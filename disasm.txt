
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f1 fb 00 00       	call   c000fc11 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 92 02 00       	call   c0029298 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 9f 02 c0       	mov    ebx,0xc0029f2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 9f 02 c0    	cmp    ebx,0xc0029f3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000049:	3d 58 e8 02 c0       	cmp    eax,0xc002e858
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e8 02 c0       	push   0xc002e858
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000075:	2d 58 e8 02 c0       	sub    eax,0xc002e858
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e8 02 c0       	push   0xc002e858
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 9f 02 c0       	mov    ebx,0xc0029f44
c00000bb:	81 eb 40 9f 02 c0    	sub    ebx,0xc0029f40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 9f 02 c0       	mov    esi,0xc0029f40
c00000ca:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e8 02 c0       	push   0xc002e858
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ee 02 c0       	push   0xc002ee90
c000012c:	68 58 e8 02 c0       	push   0xc002e858
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 8d db 01 00       	call   c001df30 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 5a 28 01 00       	call   c0012c15 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 6b db 01 00       	call   c001df30 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 13 e0 01 00       	call   c001e3f7 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 71 e6 01 00       	call   c001ea5e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 f2 02 c0 	lgdtd  ds:0xc002f2d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 3f 45 01 00       	call   c0014b21 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 9f 02 c0 02 	test   BYTE PTR [edx-0x3ffd60a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd60a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 9f 02 c0 08 	test   BYTE PTR [edx-0x3ffd60a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 9f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd60a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd60a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eec0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd113c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd113c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eefc
c0000e38:	c7 42 0c f4 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eef4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 ee 02 c0 02 	test   BYTE PTR ds:0xc002eec0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002eec0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd113c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd113c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 ee 02 c0 	lea    edx,[eax*8-0x3ffd110c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef00
c00011ba:	81 fb f4 ee 02 c0    	cmp    ebx,0xc002eef4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 ee 02 c0       	cmp    eax,0xc002eef4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eef0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc ee 02 c0       	mov    ds:0xc002eefc,eax
c00011f6:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c00011fb:	a3 f0 ee 02 c0       	mov    ds:0xc002eef0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001209:	c7 40 0c f4 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eef4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 ee 02 c0 	lea    ebp,[edx*4-0x3ffd1148]
c000125a:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 ee 02 c0 	lea    ecx,[edx*4-0x3ffd1140]
c0001275:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e0c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 ee 02 c0 	lea    eax,[eax*8-0x3ffd110c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,ecx
c000132f:	89 0d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,ecx
c0001335:	c7 41 08 f4 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eef4
c000133c:	c7 41 0c f4 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eef4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec ee 02 c0 	lea    edx,[ecx*8-0x3ffd1114]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec ee 02 c0 	lea    edx,[eax*4-0x3ffd1114]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e0c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edi
c0001402:	89 3d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,edi
c0001408:	c7 47 08 f4 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eef4
c000140f:	c7 47 0c f4 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eef4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 ee 02 c0    	mov    DWORD PTR ds:0xc002eef0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 ee 02 c0       	mov    edx,0xc002eec0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f214
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 f2 02 c0    	mov    DWORD PTR ds:0xc002f214,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c f2 02 c0    	push   DWORD PTR ds:0xc002f21c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c f2 02 c0       	mov    eax,ds:0xc002f21c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd113c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 ee 02 c0       	mov    eax,0xc002eef4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec f1 02 c0       	cmp    eax,0xc002f1ec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f210
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f224
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f234
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5f9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 f2 02 c0    	mov    DWORD PTR ds:0xc002f204,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 f2 02 c0    	mov    DWORD PTR ds:0xc002f208,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c f2 02 c0    	mov    DWORD PTR ds:0xc002f20c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 36 fb 01 00       	jmp    c0021728 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 67 fb 01 00       	jmp    c002176f <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 8f fb 01 00       	jmp    c00217b6 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 56 02 00       	call   c00275f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 a1 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5e80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 a1 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5e80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 a0 02 c0       	mov    edx,0xc002a080
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 a1 02 c0       	mov    edx,0xc002a1a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 70 d6 02 c0       	mov    edx,0xc002d670
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 f2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0da0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 f2 02 c0    	mov    ax,ds:0xc002f240
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 f2 02 c0    	mov    ds:0xc002f240,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 44 02 00       	call   c00275f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 a1 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5f00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb a1 02 c0       	mov    eax,0xc002a1bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 a1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5e80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 2e 02 00       	call   c00275f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 a0 02 c0       	mov    edx,0xc002a080
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 a0 02 c0       	mov    edx,0xc002a090
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0da0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0da0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 18 02 00       	call   c00275f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 18 02 00       	call   c00275f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 a0 02 c0       	mov    eax,0xc002a0d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 a0 02 c0       	mov    eax,0xc002a0d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0da0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 a0 02 c0       	mov    esi,0xc002a0c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 ff 01 00       	call   c00275f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 a1 02 c0       	mov    edx,0xc002a1a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 a0 02 c0       	mov    edx,0xc002a0a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 a0 02 c0       	mov    edx,0xc002a0b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 a1 02 c0       	mov    edx,0xc002a1c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce a1 02 c0       	mov    edx,0xc002a1ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 a1 02 c0       	mov    edx,0xc002a1e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a500
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a500
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 a3 02 c0       	mov    eax,0xc002a300
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 a2 02 c0       	mov    eax,0xc002a240
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 08 02 00       	call   c00290c7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 08 02 00       	call   c00290a9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d 08 02 00       	call   c00290c7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 ff 01 00       	call   c00287cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 09 02 00       	call   c0029260 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 08 02 00       	call   c00290c7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 07 02 00       	call   c00290c7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 07 02 00       	call   c00290a9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 06 02 00       	call   c00290c7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb 05 02 00       	call   c00290a9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a6 02 c0       	mov    eax,0xc002a600
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 03 02 00       	call   c00290c7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c 03 02 00       	call   c00290a9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac 00 02 00       	call   c0028e5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a fa 01 00       	call   c00287f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 02 02 00       	call   c00290cb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 03 02 00       	call   c00291ef <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be f9 01 00       	call   c00287f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 02 02 00       	call   c00290c5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a 02 02 00       	call   c00290c9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 03 02 00       	call   c0029280 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a ff 01 00       	call   c0028e5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 f9 01 00       	call   c00287f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 01 02 00       	call   c00290cb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 02 02 00       	call   c00291ef <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c f8 01 00       	call   c00287f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 01 02 00       	call   c00290c5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 01 02 00       	call   c00290c9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc 02 02 00       	call   c0029280 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 00 02 00       	call   c00290c7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 00 02 00       	call   c00290a9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 00 02 00       	call   c00290c7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a fd 01 00       	call   c0028e5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c f0 01 00       	call   c002817b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df f6 01 00       	call   c00287f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 fd 01 00       	call   c0028e5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 f0 01 00       	call   c002817b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 fd 01 00       	call   c0028e5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 ff 01 00       	call   c00290c5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 f6 01 00       	call   c00287cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 00 02 00       	call   c0029260 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc fe 01 00       	call   c00290a9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 f5 01 00       	call   c00287cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 fc 01 00       	call   c0028e5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 f5 01 00       	call   c00287f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a fc 01 00       	call   c0028e5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 f8 01 00       	call   c0028adc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 ef 01 00       	call   c002817b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 e8 01 00       	call   c0027b10 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 ff 01 00       	call   c00291ef <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 f5 01 00       	call   c00287f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 ff 01 00       	call   c00291ef <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 ee 01 00       	call   c002817b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 fd 01 00       	call   c00290cb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa f7 01 00       	call   c0028adc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 ee 01 00       	call   c002817b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e ff 01 00       	call   c0029280 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 fa 01 00       	call   c0028e5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 f4 01 00       	call   c00287cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 fd 01 00       	call   c00290c7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf ed 01 00       	call   c002817b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb f3 01 00       	call   c00287cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d fe 01 00       	call   c0029280 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e fa 01 00       	call   c0028e5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb f3 01 00       	call   c00287f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e fa 01 00       	call   c0028e5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 ed 01 00       	call   c002817b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 f9 01 00       	call   c0028e5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 fc 01 00       	call   c00290c7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d f3 01 00       	call   c00287cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f fd 01 00       	call   c0029260 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 fb 01 00       	call   c00290a9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 f2 01 00       	call   c00287cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e f9 01 00       	call   c0028e5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 f2 01 00       	call   c00287f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 f9 01 00       	call   c0028e5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a f5 01 00       	call   c0028adc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 eb 01 00       	call   c002817b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 e5 01 00       	call   c0027b10 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 fc 01 00       	call   c00291ef <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 f1 01 00       	call   c00287f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 fb 01 00       	call   c00291ef <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 eb 01 00       	call   c002817b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b fa 01 00       	call   c00290cb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 f4 01 00       	call   c0028adc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 ea 01 00       	call   c002817b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df fb 01 00       	call   c0029280 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 f7 01 00       	call   c0028e5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 f1 01 00       	call   c00287cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 f9 01 00       	call   c00290c7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 ea 01 00       	call   c002817b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac f0 01 00       	call   c00287cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 f7 01 00       	call   c0028e5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 ea 01 00       	call   c002817b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 aa 02 c0       	mov    eax,0xc002aac0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 aa 02 c0       	mov    eax,0xc002aad4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c f5 01 00       	call   c0028e5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a ef 01 00       	call   c00287f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac e1 01 00       	call   c0027b10 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 f8 01 00       	call   c00291ef <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c ee 01 00       	call   c00287f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f f8 01 00       	call   c00291ef <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 e7 01 00       	call   c002817b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 f8 01 00       	call   c00291ef <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 ee 01 00       	call   c00287f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 e7 01 00       	call   c002817b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a e0 01 00       	call   c0027b10 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 f7 01 00       	call   c00291ef <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a ed 01 00       	call   c00287f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d f7 01 00       	call   c00291ef <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af e6 01 00       	call   c002817b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f f7 01 00       	call   c00291ef <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe ec 01 00       	call   c00287f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 e6 01 00       	call   c002817b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 e6 01 00       	call   c002817b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 df 01 00       	call   c0027b10 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 f5 01 00       	call   c00291ef <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 eb 01 00       	call   c00287f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 f5 01 00       	call   c00291ef <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 e5 01 00       	call   c002817b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 f5 01 00       	call   c00291ef <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f eb 01 00       	call   c00287f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 e4 01 00       	call   c002817b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 f5 01 00       	call   c00291ef <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 eb 01 00       	call   c00287f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a e4 01 00       	call   c002817b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af dd 01 00       	call   c0027b10 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 f4 01 00       	call   c00291ef <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f ea 01 00       	call   c00287f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 f4 01 00       	call   c00291ef <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 e3 01 00       	call   c002817b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 f4 01 00       	call   c00291ef <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 ea 01 00       	call   c00287f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a e3 01 00       	call   c002817b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da f3 01 00       	call   c00291ef <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 e9 01 00       	call   c00287f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c e3 01 00       	call   c002817b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 e3 01 00       	call   c002817b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d e9 01 00       	call   c00287f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 f2 01 00       	call   c00290cb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 e2 01 00       	call   c002817b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 e9 01 00       	call   c00287f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 f1 01 00       	call   c00290cb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b db 01 00       	call   c0027b10 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 f2 01 00       	call   c00291ef <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb e7 01 00       	call   c00287f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de f1 01 00       	call   c00291ef <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 e1 01 00       	call   c002817b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 f1 01 00       	call   c00291ef <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 e7 01 00       	call   c00287f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 e1 01 00       	call   c002817b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 f1 01 00       	call   c00291ef <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b e7 01 00       	call   c00287f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 e0 01 00       	call   c002817b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 f1 01 00       	call   c00291ef <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd e6 01 00       	call   c00287f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 e0 01 00       	call   c002817b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 f0 01 00       	call   c00291ef <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af e6 01 00       	call   c00287f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 e0 01 00       	call   c002817b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a d9 01 00       	call   c0027b10 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 ef 01 00       	call   c00291ef <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da e5 01 00       	call   c00287f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 ef 01 00       	call   c00291ef <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 df 01 00       	call   c002817b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 ef 01 00       	call   c00291ef <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c e5 01 00       	call   c00287f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 de 01 00       	call   c002817b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 ef 01 00       	call   c00291ef <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e e5 01 00       	call   c00287f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 de 01 00       	call   c002817b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 ee 01 00       	call   c00291ef <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 e4 01 00       	call   c00287f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 de 01 00       	call   c002817b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 ee 01 00       	call   c00291ef <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 e4 01 00       	call   c00287f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb dd 01 00       	call   c002817b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf dd 01 00       	call   c002817b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c e4 01 00       	call   c00287f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 ec 01 00       	call   c00290cb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 dd 01 00       	call   c002817b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 e3 01 00       	call   c00287f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 ec 01 00       	call   c00290cb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e dd 01 00       	call   c002817b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b e3 01 00       	call   c00287f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 ec 01 00       	call   c00290cb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 dc 01 00       	call   c002817b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 e3 01 00       	call   c00287f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de eb 01 00       	call   c00290cb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c d5 01 00       	call   c0027b10 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 ec 01 00       	call   c00291ef <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc e1 01 00       	call   c00287f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df eb 01 00       	call   c00291ef <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 db 01 00       	call   c002817b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 eb 01 00       	call   c00291ef <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a e1 01 00       	call   c00287f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 db 01 00       	call   c002817b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 eb 01 00       	call   c00291ef <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c e1 01 00       	call   c00287f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 da 01 00       	call   c002817b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 eb 01 00       	call   c00291ef <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe e0 01 00       	call   c00287f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 da 01 00       	call   c002817b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 ea 01 00       	call   c00291ef <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 e0 01 00       	call   c00287f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 da 01 00       	call   c002817b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 ea 01 00       	call   c00291ef <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 e0 01 00       	call   c00287f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 d9 01 00       	call   c002817b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 ea 01 00       	call   c00291ef <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 e0 01 00       	call   c00287f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a d9 01 00       	call   c002817b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 d2 01 00       	call   c0027b10 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b e9 01 00       	call   c00291ef <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 df 01 00       	call   c00287f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 e9 01 00       	call   c00291ef <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 d8 01 00       	call   c002817b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 e8 01 00       	call   c00291ef <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf de 01 00       	call   c00287f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 d8 01 00       	call   c002817b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 e8 01 00       	call   c00291ef <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 de 01 00       	call   c00287f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea d7 01 00       	call   c002817b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a e8 01 00       	call   c00291ef <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 de 01 00       	call   c00287f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c d7 01 00       	call   c002817b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc e7 01 00       	call   c00291ef <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 dd 01 00       	call   c00287f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e d7 01 00       	call   c002817b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae e7 01 00       	call   c00291ef <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 dd 01 00       	call   c00287f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd d6 01 00       	call   c002817b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d e7 01 00       	call   c00291ef <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 dd 01 00       	call   c00287f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 d6 01 00       	call   c002817b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e d6 01 00       	call   c002817b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec dc 01 00       	call   c00287f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 e5 01 00       	call   c00290cb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 d6 01 00       	call   c002817b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 dc 01 00       	call   c00287f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 e5 01 00       	call   c00290cb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df d5 01 00       	call   c002817b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d dc 01 00       	call   c00287f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 e4 01 00       	call   c00290cb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 d5 01 00       	call   c002817b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 db 01 00       	call   c00287f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 e4 01 00       	call   c00290cb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f d5 01 00       	call   c002817b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d db 01 00       	call   c00287f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 e4 01 00       	call   c00290cb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd d4 01 00       	call   c002817b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b db 01 00       	call   c00287f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 e3 01 00       	call   c00290cb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b cd 01 00       	call   c0027b10 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 e3 01 00       	call   c00291ef <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb d9 01 00       	call   c00287f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 e3 01 00       	call   c00291ef <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 d3 01 00       	call   c002817b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 e3 01 00       	call   c00291ef <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 d9 01 00       	call   c00287f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac d2 01 00       	call   c002817b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 e2 01 00       	call   c00291ef <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 d8 01 00       	call   c00287f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d d2 01 00       	call   c002817b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a e2 01 00       	call   c00291ef <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 d8 01 00       	call   c00287f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee d1 01 00       	call   c002817b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b e2 01 00       	call   c00291ef <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 d8 01 00       	call   c00287f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f d1 01 00       	call   c002817b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc e1 01 00       	call   c00291ef <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 d7 01 00       	call   c00287f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 d1 01 00       	call   c002817b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d e1 01 00       	call   c00291ef <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 d7 01 00       	call   c00287f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 d0 01 00       	call   c002817b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e e1 01 00       	call   c00291ef <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 d7 01 00       	call   c00287f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 d0 01 00       	call   c002817b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf e0 01 00       	call   c00291ef <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 d6 01 00       	call   c00287f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 d0 01 00       	call   c002817b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d c9 01 00       	call   c0027b10 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 df 01 00       	call   c00291ef <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd d5 01 00       	call   c00287f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 df 01 00       	call   c00291ef <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 cf 01 00       	call   c002817b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 df 01 00       	call   c00291ef <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 d5 01 00       	call   c00287f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd ce 01 00       	call   c002817b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 df 01 00       	call   c00291ef <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 d4 01 00       	call   c00287f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d ce 01 00       	call   c002817b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 de 01 00       	call   c00291ef <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 d4 01 00       	call   c00287f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd cd 01 00       	call   c002817b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 de 01 00       	call   c00291ef <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 d4 01 00       	call   c00287f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d cd 01 00       	call   c002817b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 dd 01 00       	call   c00291ef <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 d3 01 00       	call   c00287f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d cd 01 00       	call   c002817b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 dd 01 00       	call   c00291ef <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 d3 01 00       	call   c00287f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd cc 01 00       	call   c002817b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 dd 01 00       	call   c00291ef <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 d3 01 00       	call   c00287f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d cc 01 00       	call   c002817b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 dc 01 00       	call   c00291ef <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 d2 01 00       	call   c00287f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d cc 01 00       	call   c002817b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 cb 01 00       	call   c002817b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f d2 01 00       	call   c00287f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db da 01 00       	call   c00290cb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 cb 01 00       	call   c002817b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 d1 01 00       	call   c00287f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e da 01 00       	call   c00290cb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 cb 01 00       	call   c002817b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 d1 01 00       	call   c00287f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 da 01 00       	call   c00290cb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab ca 01 00       	call   c002817b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 d1 01 00       	call   c00287f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 d9 01 00       	call   c00290cb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e ca 01 00       	call   c002817b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab d0 01 00       	call   c00287f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 d9 01 00       	call   c00290cb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 c9 01 00       	call   c002817b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e d0 01 00       	call   c00287f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a d9 01 00       	call   c00290cb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 c9 01 00       	call   c002817b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 cf 01 00       	call   c00287f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad d8 01 00       	call   c00290cb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 c9 01 00       	call   c002817b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 cf 01 00       	call   c00287f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 d8 01 00       	call   c00290cb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c cf 01 00       	call   c00287f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 d9 01 00       	jmp    c0029280 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e d6 01 00       	call   c00290c7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec d5 01 00       	call   c00290a9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 d3 01 00       	call   c0028e5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 c6 01 00       	call   c002817b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 d3 01 00       	call   c0028e5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba cf 01 00       	call   c0028adc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 d5 01 00       	call   c00290a9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c d5 01 00       	call   c00290c7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f d5 01 00       	call   c00290c7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 cf 01 00       	call   c0028adc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 d6 01 00       	call   c0029280 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d d6 01 00       	call   c0029280 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f d2 01 00       	call   c0028e5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 cb 01 00       	call   c00287cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 d4 01 00       	call   c00290c7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e c5 01 00       	call   c002817b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 cb 01 00       	call   c00287cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 d5 01 00       	call   c0029280 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c ce 01 00       	call   c0028adc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 c4 01 00       	call   c002817b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 d0 01 00       	call   c0028e5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 c3 01 00       	call   c002817b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 c3 01 00       	call   c002817b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 d0 01 00       	call   c0028e5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 d2 01 00       	call   c00290c5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 c9 01 00       	call   c00287cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 d4 01 00       	call   c0029260 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d d2 01 00       	call   c00290a9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b c9 01 00       	call   c00287cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 cf 01 00       	call   c0028e5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c c9 01 00       	call   c00287f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae cf 01 00       	call   c0028e5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 cc 01 00       	call   c0028adc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 c2 01 00       	call   c002817b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e cf 01 00       	call   c0028e5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa d1 01 00       	call   c00290c7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f c8 01 00       	call   c00287f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 c8 01 00       	call   c00287f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa ce 01 00       	call   c0028e5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e cb 01 00       	call   c0028adc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 ca 01 00       	call   c0028adc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 c1 01 00       	call   c002817b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 d2 01 00       	call   c0029280 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 ce 01 00       	call   c0028e5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b c7 01 00       	call   c00287cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a d0 01 00       	call   c00290c7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 c0 01 00       	call   c002817b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 c7 01 00       	call   c00287cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 d1 01 00       	call   c0029280 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 cf 01 00       	call   c00290c7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 cf 01 00       	call   c00290a9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be cc 01 00       	call   c0028e5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf bf 01 00       	call   c002817b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e cc 01 00       	call   c0028e5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 c8 01 00       	call   c0028adc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 ce 01 00       	call   c00290a9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 ce 01 00       	call   c00290c7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a ce 01 00       	call   c00290c7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 c8 01 00       	call   c0028adc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed cf 01 00       	call   c0029280 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 cf 01 00       	call   c0029280 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a cb 01 00       	call   c0028e5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 c4 01 00       	call   c00287cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 cd 01 00       	call   c00290c7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 be 01 00       	call   c002817b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d c4 01 00       	call   c00287cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f cf 01 00       	call   c0029280 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 c7 01 00       	call   c0028adc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 bd 01 00       	call   c002817b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f ca 01 00       	call   c0028e5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f bd 01 00       	call   c002817b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef bc 01 00       	call   c002817b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf c9 01 00       	call   c0028e5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f cc 01 00       	call   c00290c5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed c2 01 00       	call   c00287cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f cd 01 00       	call   c0029260 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 cb 01 00       	call   c00290a9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 c2 01 00       	call   c00287cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 c9 01 00       	call   c0028e5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 c2 01 00       	call   c00287f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 c8 01 00       	call   c0028e5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d c5 01 00       	call   c0028adc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc bb 01 00       	call   c002817b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 c8 01 00       	call   c0028e5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 ca 01 00       	call   c00290c7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 c1 01 00       	call   c00287f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 c1 01 00       	call   c00287f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 c7 01 00       	call   c0028e5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 c4 01 00       	call   c0028adc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 c4 01 00       	call   c0028adc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 ba 01 00       	call   c002817b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d cb 01 00       	call   c0029280 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f c7 01 00       	call   c0028e5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 c0 01 00       	call   c00287cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 c9 01 00       	call   c00290c7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d ba 01 00       	call   c002817b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 c0 01 00       	call   c00287cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 ca 01 00       	call   c0029280 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 c8 01 00       	call   c00290c7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 c8 01 00       	call   c00290a9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 c5 01 00       	call   c0028e5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa b8 01 00       	call   c002817b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 c5 01 00       	call   c0028e5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 c2 01 00       	call   c0028adc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf c7 01 00       	call   c00290a9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 c7 01 00       	call   c00290c7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 c7 01 00       	call   c00290c7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e c1 01 00       	call   c0028adc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 c9 01 00       	call   c0029280 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 c9 01 00       	call   c0029280 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 c4 01 00       	call   c0028e5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c be 01 00       	call   c00287cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b c7 01 00       	call   c00290c7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 b7 01 00       	call   c002817b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 bd 01 00       	call   c00287cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a c8 01 00       	call   c0029280 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 c0 01 00       	call   c0028adc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f b7 01 00       	call   c002817b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a c3 01 00       	call   c0028e5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a b6 01 00       	call   c002817b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a b6 01 00       	call   c002817b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa c2 01 00       	call   c0028e5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a c5 01 00       	call   c00290c5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 bc 01 00       	call   c00287cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa c6 01 00       	call   c0029260 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 c4 01 00       	call   c00290a9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce bb 01 00       	call   c00287cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c c2 01 00       	call   c0028e5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf bb 01 00       	call   c00287f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 c2 01 00       	call   c0028e5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 be 01 00       	call   c0028adc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 b5 01 00       	call   c002817b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 c1 01 00       	call   c0028e5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d c4 01 00       	call   c00290c7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 bb 01 00       	call   c00287f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 ba 01 00       	call   c00287f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b c1 01 00       	call   c0028e5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f bd 01 00       	call   c0028adc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c bd 01 00       	call   c0028adc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb b3 01 00       	call   c002817b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 c4 01 00       	call   c0029280 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a c0 01 00       	call   c0028e5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 b9 01 00       	call   c00287cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 c2 01 00       	call   c00290c7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 b3 01 00       	call   c002817b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c b9 01 00       	call   c00287cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e c4 01 00       	call   c0029280 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df c1 01 00       	call   c00290c7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d c1 01 00       	call   c00290a9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 bf 01 00       	call   c0028e5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 b2 01 00       	call   c002817b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 bf 01 00       	call   c0028e5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b bb 01 00       	call   c0028adc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a c1 01 00       	call   c00290a9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d c1 01 00       	call   c00290c7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 c0 01 00       	call   c00290c7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 ba 01 00       	call   c0028adc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 c2 01 00       	call   c0029280 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e c2 01 00       	call   c0029280 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 be 01 00       	call   c0028e5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 b7 01 00       	call   c00287cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 c0 01 00       	call   c00290c7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df b0 01 00       	call   c002817b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 b7 01 00       	call   c00287cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 c1 01 00       	call   c0029280 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd b9 01 00       	call   c0028adc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a b0 01 00       	call   c002817b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 bc 01 00       	call   c0028e5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 af 01 00       	call   c002817b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 af 01 00       	call   c002817b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 bc 01 00       	call   c0028e5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 be 01 00       	call   c00290c5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 b5 01 00       	call   c00287cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 bf 01 00       	call   c0029260 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c be 01 00       	call   c00290a9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 b5 01 00       	call   c00287cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 bb 01 00       	call   c0028e5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a b5 01 00       	call   c00287f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c bb 01 00       	call   c0028e5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 b7 01 00       	call   c0028adc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 ae 01 00       	call   c002817b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c bb 01 00       	call   c0028e5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 bd 01 00       	call   c00290c7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d b4 01 00       	call   c00287f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f b4 01 00       	call   c00287f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 ba 01 00       	call   c0028e5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba b6 01 00       	call   c0028adc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 b6 01 00       	call   c0028adc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 ad 01 00       	call   c002817b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 bd 01 00       	call   c0029280 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 b9 01 00       	call   c0028e5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c b3 01 00       	call   c00287cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb bb 01 00       	call   c00290c7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 ac 01 00       	call   c002817b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 b2 01 00       	call   c00287cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 bd 01 00       	call   c0029280 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 bb 01 00       	call   c00290c7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 ba 01 00       	call   c00290a9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c b8 01 00       	call   c0028e5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d ab 01 00       	call   c002817b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c b8 01 00       	call   c0028e5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 b4 01 00       	call   c0028adc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 ba 01 00       	call   c00290a9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 ba 01 00       	call   c00290c7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 ba 01 00       	call   c00290c7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 b4 01 00       	call   c0028adc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b bb 01 00       	call   c0029280 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 bb 01 00       	call   c0029280 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 b7 01 00       	call   c0028e5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b b0 01 00       	call   c00287cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a b9 01 00       	call   c00290c7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 aa 01 00       	call   c002817b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b b0 01 00       	call   c00287cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd ba 01 00       	call   c0029280 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 b3 01 00       	call   c0028adc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 a9 01 00       	call   c002817b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf b5 01 00       	call   c0028e5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf a8 01 00       	call   c002817b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f a8 01 00       	call   c002817b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f b5 01 00       	call   c0028e5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 b7 01 00       	call   c00290a9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a ae 01 00       	call   c00287cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c b9 01 00       	call   c0029260 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 b7 01 00       	call   c00290a9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d ae 01 00       	call   c00287cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb b4 01 00       	call   c0028e5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e ae 01 00       	call   c00287f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 b4 01 00       	call   c0028e5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 b0 01 00       	call   c0028adc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 a7 01 00       	call   c002817b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 b4 01 00       	call   c0028e5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c b6 01 00       	call   c00290c7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 ad 01 00       	call   c00287f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 ad 01 00       	call   c00287f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 b3 01 00       	call   c0028e5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe af 01 00       	call   c0028adc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 ac 01 00       	call   c00287f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 b5 01 00       	call   c00290cb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 af 01 00       	call   c0028adc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 a6 01 00       	call   c002817b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 b7 01 00       	call   c0029280 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 b2 01 00       	call   c0028e5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b ac 01 00       	call   c00287cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a b5 01 00       	call   c00290c7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 a5 01 00       	call   c002817b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca ab 01 00       	call   c00287cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c b6 01 00       	call   c0029280 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd549c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd54a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f b3 01 00       	call   c00290c7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd b2 01 00       	call   c00290a9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 b2 01 00       	call   c00290c7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b b0 01 00       	call   c0028e5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 a9 01 00       	call   c00287f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b b0 01 00       	call   c0028e5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 a3 01 00       	call   c002817b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 af 01 00       	call   c0028e5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 b2 01 00       	call   c00290c5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 a9 01 00       	call   c00287cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 b3 01 00       	call   c0029260 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba b1 01 00       	call   c00290a9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 a8 01 00       	call   c00287cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 af 01 00       	call   c0028e5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba a8 01 00       	call   c00287f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c af 01 00       	call   c0028e5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 ab 01 00       	call   c0028adc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 a1 01 00       	call   c002817b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a ab 01 00       	call   c0028adc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 a1 01 00       	call   c002817b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e b2 01 00       	call   c0029280 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 ae 01 00       	call   c0028e5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 a7 01 00       	call   c00287cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 b0 01 00       	call   c00290c7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f a1 01 00       	call   c002817b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b a7 01 00       	call   c00287cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd b1 01 00       	call   c0029280 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa ad 01 00       	call   c0028e5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 a7 01 00       	call   c00287f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 ad 01 00       	call   c0028e5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e a0 01 00       	call   c002817b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e ad 01 00       	call   c0028e5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 af 01 00       	call   c00290c9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b a6 01 00       	call   c00287cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd b0 01 00       	call   c0029260 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 af 01 00       	call   c00290a9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 a6 01 00       	call   c00287cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 ac 01 00       	call   c0028e5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 a6 01 00       	call   c00287f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 ac 01 00       	call   c0028e5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc a8 01 00       	call   c0028adc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 9f 01 00       	call   c002817b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 a8 01 00       	call   c0028adc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 9e 01 00       	call   c002817b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 af 01 00       	call   c0029280 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 ab 01 00       	call   c0028e5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d a5 01 00       	call   c00287cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec ad 01 00       	call   c00290c7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 9e 01 00       	call   c002817b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 a4 01 00       	call   c00287cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 ab 01 00       	call   c0028e5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 9e 01 00       	call   c002817b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e ac 02 c0       	mov    eax,0xc002ac7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f ac 02 c0       	mov    eax,0xc002ac8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e4e3:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c000e50d:	e8 72 01 01 00       	call   c001e684 <schedule()>
c000e512:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e517:	48                   	dec    eax
c000e518:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 ac 02 c0       	push   0xc002acc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 f2 02 c0       	mov    eax,0xc002f2c8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf ac 02 c0       	push   0xc002accf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 75 02 c0       	mov    eax,0xc00275f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 ac 02 c0       	push   0xc002acd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 73 02 c0       	mov    eax,0xc0027328
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 ac 02 c0       	push   0xc002ace2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 76 02 c0       	mov    eax,0xc00276f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec ac 02 c0       	push   0xc002acec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 74 02 c0       	mov    eax,0xc0027474
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 ac 02 c0       	push   0xc002acf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc f2 02 c0       	mov    eax,0xc002f2cc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 ad 02 c0       	push   0xc002ad02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd f2 02 c0       	mov    eax,0xc002f2cd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 61 5d 00 00       	call   c00143ce <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c000e6b2:	68 0f ad 02 c0       	push   0xc002ad0f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 89 fb 00 00       	call   c001e248 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 6c fd 00 00       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 be ee 01 c0       	push   0xc001eebe
c000e6dd:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c000e6e3:	e8 58 fd 00 00       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000e6f0:	c6 05 cd f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2cd,0x1
c000e6f7:	e8 16 0c 01 00       	call   c001f312 <Vm::initialise8086()>
c000e6fc:	e8 c1 4a 00 00       	call   c00131c2 <Fs::initVFS()>
c000e701:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 b8 e3 00 00       	call   c001cad5 <Sys::loadSyscalls()>
c000e71d:	e8 76 c0 00 00       	call   c001a798 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c ad 02 c0       	push   0xc002ad1c
c000e72c:	68 25 ad 02 c0       	push   0xc002ad25
c000e731:	e8 51 cf 00 00       	call   c001b687 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 74 55 00 00       	call   c0013cb2 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 53 5c 00 00       	call   c00143a2 <Device::loadDriversForAll()>
c000e74f:	e8 90 bb 00 00       	call   c001a2e4 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d ad 02 c0       	push   0xc002ad2d
c000e763:	e8 3d f5 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 5f f7 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 05 01 01 00       	call   c001e883 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 ad 02 c0       	push   0xc002ad49
c000e793:	50                   	push   eax
c000e794:	e8 af 5c 00 00       	call   c0014448 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 e1 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e1,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 89 89 01 00       	call   c00272b6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 8c a6 00 00       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 65 a6 00 00       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 43 a6 00 00       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 21 a6 00 00       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 e0 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f2e0,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 2f a5 00 00       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 0a a5 00 00       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 f3 87 01 00       	call   c0027270 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 b0 87 01 00       	call   c0027250 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 26 a5 00 00       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 ad 02 c0       	push   0xc002ad59
c000eaf9:	e8 39 43 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c ad 02 c0       	push   0xc002ad6c
c000eb1c:	e8 16 43 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d ad 02 c0       	push   0xc002ad7d
c000eb3f:	e8 f3 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e ad 02 c0       	push   0xc002ad8e
c000eb62:	e8 d0 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f ad 02 c0       	push   0xc002ad9f
c000eb85:	e8 ad 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 ad 02 c0       	push   0xc002adb0
c000eba8:	e8 8a 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 ad 02 c0       	push   0xc002adc1
c000ebcb:	e8 67 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 ad 02 c0       	push   0xc002add2
c000ebee:	e8 44 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 ad 02 c0       	push   0xc002ade3
c000ec11:	e8 21 42 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 ad 02 c0       	push   0xc002adf4
c000ec34:	e8 fe 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 ae 02 c0       	push   0xc002ae05
c000ec57:	e8 db 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 ae 02 c0       	push   0xc002ae16
c000ec7a:	e8 b8 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 ae 02 c0       	push   0xc002ae27
c000ec9d:	e8 95 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 ae 02 c0       	push   0xc002ae38
c000ecc0:	e8 72 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 ae 02 c0       	push   0xc002ae49
c000ece3:	e8 4f 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a ae 02 c0       	push   0xc002ae5a
c000ed06:	e8 2c 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b ae 02 c0       	push   0xc002ae6b
c000ed29:	e8 09 41 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c ae 02 c0       	push   0xc002ae7c
c000ed4c:	e8 e6 40 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d ae 02 c0       	push   0xc002ae8d
c000ed6b:	e8 c7 40 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 f4 c8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c8f4
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 b6 40 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e ae 02 c0       	push   0xc002ae9e
c000ee54:	e8 78 ba 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 ae 02 c0       	push   0xc002aea4
c000ee8c:	e8 40 ba 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 e0 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e0,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 04 e2 02 c0 	sete   BYTE PTR ds:0xc002e204
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 c7 93 00 00       	call   c00182c6 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 4a 53 00 00       	call   c0014258 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 6e a1 00 00       	call   c00190ac <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 0b 53 00 00       	call   c0014258 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 83 58 00 00       	call   c00147ec <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 db 52 00 00       	call   c0014258 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 c3 f5 00 00       	call   c001e562 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa ae 02 c0       	push   0xc002aeaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 4a 3e 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb ae 02 c0       	push   0xc002aebb
c000f00a:	e8 c2 b8 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 ae 02 c0       	push   0xc002aec8
c000f01f:	e8 ad b8 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aed2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 96 b8 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c af 02 c0       	push   0xc002af0c
c000f0d0:	e8 62 3d 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 d2 f2 02 c0       	mov    ds:0xc002f2d2,eax
c000f111:	66 89 15 d0 f2 02 c0 	mov    WORD PTR ds:0xc002f2d0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000f228:	48                   	dec    eax
c000f229:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 81 a0 01 00       	call   c0029300 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 78 a0 01 00       	call   c0029300 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 d8 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f2d8,0x7ff
c000f375:	a3 da f2 02 c0       	mov    ds:0xc002f2da,eax
c000f37a:	0f 01 1d d8 f2 02 c0 	lidtd  ds:0xc002f2d8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f66c:	e8 f9 2c 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 d3 1c 00 00       	call   c0011362 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 04 1d 00 00       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d e0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1e0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 e0 e1 02 c0       	mov    eax,ds:0xc002e1e0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 af 02 c0       	push   0xc002af28
c000f745:	e8 ed 36 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 e0 e1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e1e0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c000f771:	8b 2d e0 e1 02 c0    	mov    ebp,DWORD PTR ds:0xc002e1e0
c000f777:	e8 7c 07 00 00       	call   c000fef8 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 df 2a 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d e0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1e0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 af 02 c0       	push   0xc002af58
c000f7fd:	e8 cf b0 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d af 02 c0       	push   0xc002af5d
c000f813:	e8 b9 b0 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000f833:	48                   	dec    eax
c000f834:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f854:	e8 11 2b 00 00       	call   c001236a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f86a:	e8 a5 27 00 00       	call   c0012014 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <hwTextMode_loadInData(VgaText*)>:
c000f8e6:	55                   	push   ebp
c000f8e7:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c000f8ec:	57                   	push   edi
c000f8ed:	56                   	push   esi
c000f8ee:	53                   	push   ebx
c000f8ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8f3:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8f6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8f9:	85 d2                	test   edx,edx
c000f8fb:	7e 29                	jle    c000f926 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8fd:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f903:	31 f6                	xor    esi,esi
c000f905:	29 cd                	sub    ebp,ecx
c000f907:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f90a:	31 c0                	xor    eax,eax
c000f90c:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f910:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f914:	40                   	inc    eax
c000f915:	83 f8 50             	cmp    eax,0x50
c000f918:	75 f2                	jne    c000f90c <hwTextMode_loadInData(VgaText*)+0x26>
c000f91a:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f920:	46                   	inc    esi
c000f921:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f924:	7f e1                	jg     c000f907 <hwTextMode_loadInData(VgaText*)+0x21>
c000f926:	5b                   	pop    ebx
c000f927:	5e                   	pop    esi
c000f928:	5f                   	pop    edi
c000f929:	5d                   	pop    ebp
c000f92a:	c3                   	ret    

c000f92b <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f92b:	55                   	push   ebp
c000f92c:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93a:	75 44                	jne    c000f980 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f93c:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f93f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f942:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c000f948:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f94c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f952:	eb 08                	jmp    c000f95c <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f954:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f957:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95a:	89 da                	mov    edx,ebx
c000f95c:	83 e5 0f             	and    ebp,0xf
c000f95f:	c1 e0 04             	shl    eax,0x4
c000f962:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f965:	0f b6 c0             	movzx  eax,al
c000f968:	41                   	inc    ecx
c000f969:	09 e8                	or     eax,ebp
c000f96b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f96f:	c1 e0 08             	shl    eax,0x8
c000f972:	09 e8                	or     eax,ebp
c000f974:	39 fb                	cmp    ebx,edi
c000f976:	66 89 02             	mov    WORD PTR [edx],ax
c000f979:	75 d9                	jne    c000f954 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f97b:	5b                   	pop    ebx
c000f97c:	5e                   	pop    esi
c000f97d:	5f                   	pop    edi
c000f97e:	5d                   	pop    ebp
c000f97f:	c3                   	ret    
c000f980:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f987:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f98e:	31 c0                	xor    eax,eax
c000f990:	bd 02 00 00 00       	mov    ebp,0x2
c000f995:	eb ab                	jmp    c000f942 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f997 <hwTextMode_showCursor(VgaText*, bool)>:
c000f997:	56                   	push   esi
c000f998:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000f99f:	53                   	push   ebx
c000f9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a4:	75 36                	jne    c000f9dc <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9a6:	84 c0                	test   al,al
c000f9a8:	74 35                	je     c000f9df <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9af:	b0 0a                	mov    al,0xa
c000f9b1:	89 da                	mov    edx,ebx
c000f9b3:	ee                   	out    dx,al
c000f9b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9b9:	89 ca                	mov    edx,ecx
c000f9bb:	ec                   	in     al,dx
c000f9bc:	b2 0f                	mov    dl,0xf
c000f9be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9c2:	83 e0 c0             	and    eax,0xffffffc0
c000f9c5:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9c8:	09 d0                	or     eax,edx
c000f9ca:	89 ca                	mov    edx,ecx
c000f9cc:	ee                   	out    dx,al
c000f9cd:	b0 0b                	mov    al,0xb
c000f9cf:	89 da                	mov    edx,ebx
c000f9d1:	ee                   	out    dx,al
c000f9d2:	89 ca                	mov    edx,ecx
c000f9d4:	ec                   	in     al,dx
c000f9d5:	83 e0 e0             	and    eax,0xffffffe0
c000f9d8:	83 c8 0f             	or     eax,0xf
c000f9db:	ee                   	out    dx,al
c000f9dc:	5b                   	pop    ebx
c000f9dd:	5e                   	pop    esi
c000f9de:	c3                   	ret    
c000f9df:	b0 0a                	mov    al,0xa
c000f9e1:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9e6:	ee                   	out    dx,al
c000f9e7:	b0 20                	mov    al,0x20
c000f9e9:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ee:	ee                   	out    dx,al
c000f9ef:	5b                   	pop    ebx
c000f9f0:	5e                   	pop    esi
c000f9f1:	c3                   	ret    

c000f9f2 <hwTextMode_update(VgaText*)>:
c000f9f2:	c3                   	ret    

c000f9f3 <hwTextMode_updateCursor(VgaText*)>:
c000f9f3:	56                   	push   esi
c000f9f4:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000f9fb:	53                   	push   ebx
c000f9fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa00:	75 36                	jne    c000fa38 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa02:	be d4 03 00 00       	mov    esi,0x3d4
c000fa07:	b9 19 00 00 00       	mov    ecx,0x19
c000fa0c:	89 f2                	mov    edx,esi
c000fa0e:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa11:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa14:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa17:	c1 e1 04             	shl    ecx,0x4
c000fa1a:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa1d:	b0 0f                	mov    al,0xf
c000fa1f:	ee                   	out    dx,al
c000fa20:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa25:	88 c8                	mov    al,cl
c000fa27:	89 da                	mov    edx,ebx
c000fa29:	ee                   	out    dx,al
c000fa2a:	b0 0e                	mov    al,0xe
c000fa2c:	89 f2                	mov    edx,esi
c000fa2e:	ee                   	out    dx,al
c000fa2f:	89 c8                	mov    eax,ecx
c000fa31:	89 da                	mov    edx,ebx
c000fa33:	66 c1 e8 08          	shr    ax,0x8
c000fa37:	ee                   	out    dx,al
c000fa38:	5b                   	pop    ebx
c000fa39:	5e                   	pop    esi
c000fa3a:	c3                   	ret    

c000fa3b <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa3f:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fa46:	75 38                	jne    c000fa80 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa48:	ba da 03 00 00       	mov    edx,0x3da
c000fa4d:	84 c0                	test   al,al
c000fa4f:	75 18                	jne    c000fa69 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa51:	ec                   	in     al,dx
c000fa52:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa57:	b0 30                	mov    al,0x30
c000fa59:	89 ca                	mov    edx,ecx
c000fa5b:	ee                   	out    dx,al
c000fa5c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa61:	ec                   	in     al,dx
c000fa62:	83 c8 08             	or     eax,0x8
c000fa65:	89 ca                	mov    edx,ecx
c000fa67:	ee                   	out    dx,al
c000fa68:	c3                   	ret    
c000fa69:	ec                   	in     al,dx
c000fa6a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa6f:	b0 30                	mov    al,0x30
c000fa71:	89 ca                	mov    edx,ecx
c000fa73:	ee                   	out    dx,al
c000fa74:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa79:	ec                   	in     al,dx
c000fa7a:	83 e0 f7             	and    eax,0xfffffff7
c000fa7d:	89 ca                	mov    edx,ecx
c000fa7f:	ee                   	out    dx,al
c000fa80:	c3                   	ret    

c000fa81 <hwTextMode_scrollScreen(VgaText*)>:
c000fa81:	55                   	push   ebp
c000fa82:	57                   	push   edi
c000fa83:	56                   	push   esi
c000fa84:	53                   	push   ebx
c000fa85:	83 ec 1c             	sub    esp,0x1c
c000fa88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa8c:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fa93:	74 0e                	je     c000faa3 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa95:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa9c:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000faa3:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c000faa8:	bd 02 00 00 00       	mov    ebp,0x2
c000faad:	05 a0 00 00 00       	add    eax,0xa0
c000fab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faba:	31 c0                	xor    eax,eax
c000fabc:	eb 0b                	jmp    c000fac9 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fabe:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fac4:	74 51                	je     c000fb17 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fac6:	43                   	inc    ebx
c000fac7:	89 f0                	mov    eax,esi
c000fac9:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000facf:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fad5:	88 13                	mov    BYTE PTR [ebx],dl
c000fad7:	8d 70 01             	lea    esi,[eax+0x1]
c000fada:	83 fd 18             	cmp    ebp,0x18
c000fadd:	75 df                	jne    c000fabe <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fadf:	a8 01                	test   al,0x1
c000fae1:	75 13                	jne    c000faf6 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fae3:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fae6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faec:	75 d8                	jne    c000fac6 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faee:	83 c4 1c             	add    esp,0x1c
c000faf1:	5b                   	pop    ebx
c000faf2:	5e                   	pop    esi
c000faf3:	5f                   	pop    edi
c000faf4:	5d                   	pop    ebp
c000faf5:	c3                   	ret    
c000faf6:	83 ec 08             	sub    esp,0x8
c000faf9:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fafd:	50                   	push   eax
c000fafe:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb02:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb06:	50                   	push   eax
c000fb07:	e8 0c 0c 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb0c:	83 c4 10             	add    esp,0x10
c000fb0f:	88 07                	mov    BYTE PTR [edi],al
c000fb11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb15:	eb cf                	jmp    c000fae6 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb17:	45                   	inc    ebp
c000fb18:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb20:	eb 94                	jmp    c000fab6 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb22 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb22:	57                   	push   edi
c000fb23:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fb2a:	56                   	push   esi
c000fb2b:	53                   	push   ebx
c000fb2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb30:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb34:	75 62                	jne    c000fb98 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb36:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb3b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb40:	83 ec 08             	sub    esp,0x8
c000fb43:	52                   	push   edx
c000fb44:	50                   	push   eax
c000fb45:	e8 ce 0b 00 00       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb4a:	5a                   	pop    edx
c000fb4b:	0f b6 c0             	movzx  eax,al
c000fb4e:	59                   	pop    ecx
c000fb4f:	50                   	push   eax
c000fb50:	0f be c3             	movsx  eax,bl
c000fb53:	50                   	push   eax
c000fb54:	e8 65 0c 00 00       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	8b 35 00 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e200
c000fb62:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fb69:	74 07                	je     c000fb72 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb6b:	66 0f be c3          	movsx  ax,bl
c000fb6f:	80 cc 02             	or     ah,0x2
c000fb72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb76:	ba 19 00 00 00       	mov    edx,0x19
c000fb7b:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb7e:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb81:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb84:	c1 e1 04             	shl    ecx,0x4
c000fb87:	c1 e2 04             	shl    edx,0x4
c000fb8a:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb8e:	01 ca                	add    edx,ecx
c000fb90:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb94:	5b                   	pop    ebx
c000fb95:	5e                   	pop    esi
c000fb96:	5f                   	pop    edi
c000fb97:	c3                   	ret    
c000fb98:	b8 02 00 00 00       	mov    eax,0x2
c000fb9d:	31 d2                	xor    edx,edx
c000fb9f:	eb 9f                	jmp    c000fb40 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fba1 <setupTextMode()>:
c000fba1:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fba6:	83 e0 30             	and    eax,0x30
c000fba9:	66 83 f8 30          	cmp    ax,0x30
c000fbad:	75 11                	jne    c000fbc0 <setupTextMode()+0x1f>
c000fbaf:	81 2d 00 e2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e200,0x8000
c000fbb9:	c6 05 60 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f360,0x1
c000fbc0:	c7 05 98 f3 02 c0 3b fa 00 c0 	mov    DWORD PTR ds:0xc002f398,0xc000fa3b
c000fbca:	c7 05 84 f3 02 c0 e6 f8 00 c0 	mov    DWORD PTR ds:0xc002f384,0xc000f8e6
c000fbd4:	c7 05 80 f3 02 c0 2b f9 00 c0 	mov    DWORD PTR ds:0xc002f380,0xc000f92b
c000fbde:	c7 05 8c f3 02 c0 81 fa 00 c0 	mov    DWORD PTR ds:0xc002f38c,0xc000fa81
c000fbe8:	c7 05 94 f3 02 c0 97 f9 00 c0 	mov    DWORD PTR ds:0xc002f394,0xc000f997
c000fbf2:	c7 05 88 f3 02 c0 f2 f9 00 c0 	mov    DWORD PTR ds:0xc002f388,0xc000f9f2
c000fbfc:	c7 05 90 f3 02 c0 f3 f9 00 c0 	mov    DWORD PTR ds:0xc002f390,0xc000f9f3
c000fc06:	c7 05 9c f3 02 c0 22 fb 00 c0 	mov    DWORD PTR ds:0xc002f39c,0xc000fb22
c000fc10:	c3                   	ret    

c000fc11 <kernel_main>:
c000fc11:	57                   	push   edi
c000fc12:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc17:	56                   	push   esi
c000fc18:	89 fa                	mov    edx,edi
c000fc1a:	53                   	push   ebx
c000fc1b:	31 f6                	xor    esi,esi
c000fc1d:	83 ec 2c             	sub    esp,0x2c
c000fc20:	89 f0                	mov    eax,esi
c000fc22:	ee                   	out    dx,al
c000fc23:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc28:	b0 80                	mov    al,0x80
c000fc2a:	89 da                	mov    edx,ebx
c000fc2c:	ee                   	out    dx,al
c000fc2d:	b1 03                	mov    cl,0x3
c000fc2f:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc34:	88 c8                	mov    al,cl
c000fc36:	ee                   	out    dx,al
c000fc37:	89 f0                	mov    eax,esi
c000fc39:	89 fa                	mov    edx,edi
c000fc3b:	ee                   	out    dx,al
c000fc3c:	88 c8                	mov    al,cl
c000fc3e:	89 da                	mov    edx,ebx
c000fc40:	ee                   	out    dx,al
c000fc41:	b0 c7                	mov    al,0xc7
c000fc43:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc48:	ee                   	out    dx,al
c000fc49:	b0 0b                	mov    al,0xb
c000fc4b:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc50:	ee                   	out    dx,al
c000fc51:	68 64 af 02 c0       	push   0xc002af64
c000fc56:	e8 dc 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fc5b:	e8 4a 09 00 00       	call   c00105aa <installVgaTextImplementation()>
c000fc60:	e8 3c ff ff ff       	call   c000fba1 <setupTextMode()>
c000fc65:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc6a:	05 ff 0f 00 00       	add    eax,0xfff
c000fc6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc74:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc77:	e8 f5 03 00 00       	call   c0010071 <Phys::physicalMemorySetup(unsigned int)>
c000fc7c:	e8 6f 1f 00 00       	call   c0011bf0 <Virt::virtualMemorySetup()>
c000fc81:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc90:	75 0e                	jne    c000fca0 <kernel_main+0x8f>
c000fc92:	89 d8                	mov    eax,ebx
c000fc94:	25 48 03 00 00       	and    eax,0x348
c000fc99:	3d 00 03 00 00       	cmp    eax,0x300
c000fc9e:	74 10                	je     c000fcb0 <kernel_main+0x9f>
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	68 f5 c8 02 c0       	push   0xc002c8f5
c000fca8:	e8 24 ac 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	89 1d e0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2e0,ebx
c000fcb9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcbd:	53                   	push   ebx
c000fcbe:	e8 79 21 00 00       	call   c0011e3c <VAS::VAS()>
c000fcc3:	89 1d 50 f4 02 c0    	mov    DWORD PTR ds:0xc002f450,ebx
c000fcc9:	e8 52 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcce:	c7 04 24 7b af 02 c0 	mov    DWORD PTR [esp],0xc002af7b
c000fcd5:	e8 5d 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fcda:	e8 90 1f 00 00       	call   c0011c6f <Virt::swappingSetup()>
c000fcdf:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fce6:	e8 a1 fb ff ff       	call   c000f88c <malloc>
c000fceb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcee:	89 c6                	mov    esi,eax
c000fcf0:	e8 8f ea ff ff       	call   c000e784 <Computer::Computer()>
c000fcf5:	58                   	pop    eax
c000fcf6:	89 35 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,esi
c000fcfc:	5a                   	pop    edx
c000fcfd:	56                   	push   esi
c000fcfe:	68 98 af 02 c0       	push   0xc002af98
c000fd03:	e8 2f 31 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000fd08:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000fd0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd0f:	6a 00                	push   0x0
c000fd11:	6a 00                	push   0x0
c000fd13:	6a 00                	push   0x0
c000fd15:	50                   	push   eax
c000fd16:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd19:	83 c4 14             	add    esp,0x14
c000fd1c:	53                   	push   ebx
c000fd1d:	e8 ca 23 00 00       	call   c00120ec <VAS::~VAS()>
c000fd22:	c7 04 24 ab af 02 c0 	mov    DWORD PTR [esp],0xc002afab
c000fd29:	e8 a3 ab 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000fd2e:	83 c4 30             	add    esp,0x30
c000fd31:	5b                   	pop    ebx
c000fd32:	5e                   	pop    esi
c000fd33:	5f                   	pop    edi
c000fd34:	c3                   	ret    

c000fd35 <Phys::allocateDMA(unsigned long)>:
c000fd35:	55                   	push   ebp
c000fd36:	31 d2                	xor    edx,edx
c000fd38:	57                   	push   edi
c000fd39:	31 ed                	xor    ebp,ebp
c000fd3b:	56                   	push   esi
c000fd3c:	31 c9                	xor    ecx,ecx
c000fd3e:	53                   	push   ebx
c000fd3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd43:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd49:	31 c0                	xor    eax,eax
c000fd4b:	c1 ee 0c             	shr    esi,0xc
c000fd4e:	eb 17                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd50:	85 c9                	test   ecx,ecx
c000fd52:	75 04                	jne    c000fd58 <Phys::allocateDMA(unsigned long)+0x23>
c000fd54:	89 d5                	mov    ebp,edx
c000fd56:	89 d0                	mov    eax,edx
c000fd58:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd5b:	39 de                	cmp    esi,ebx
c000fd5d:	74 20                	je     c000fd7f <Phys::allocateDMA(unsigned long)+0x4a>
c000fd5f:	42                   	inc    edx
c000fd60:	89 d9                	mov    ecx,ebx
c000fd62:	83 fa 2f             	cmp    edx,0x2f
c000fd65:	7f 11                	jg     c000fd78 <Phys::allocateDMA(unsigned long)+0x43>
c000fd67:	80 ba 20 f3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ce0],0x0
c000fd6e:	74 e0                	je     c000fd50 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd70:	31 c9                	xor    ecx,ecx
c000fd72:	42                   	inc    edx
c000fd73:	83 fa 2f             	cmp    edx,0x2f
c000fd76:	7e ef                	jle    c000fd67 <Phys::allocateDMA(unsigned long)+0x32>
c000fd78:	5b                   	pop    ebx
c000fd79:	31 c0                	xor    eax,eax
c000fd7b:	5e                   	pop    esi
c000fd7c:	5f                   	pop    edi
c000fd7d:	5d                   	pop    ebp
c000fd7e:	c3                   	ret    
c000fd7f:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd82:	89 d7                	mov    edi,edx
c000fd84:	4f                   	dec    edi
c000fd85:	79 03                	jns    c000fd8a <Phys::allocateDMA(unsigned long)+0x55>
c000fd87:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd8a:	c1 ff 04             	sar    edi,0x4
c000fd8d:	89 c2                	mov    edx,eax
c000fd8f:	c1 fa 04             	sar    edx,0x4
c000fd92:	39 fa                	cmp    edx,edi
c000fd94:	75 2f                	jne    c000fdc5 <Phys::allocateDMA(unsigned long)+0x90>
c000fd96:	85 db                	test   ebx,ebx
c000fd98:	74 1a                	je     c000fdb4 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd9a:	be 20 f3 02 c0       	mov    esi,0xc002f320
c000fd9f:	8d 90 20 f3 02 c0    	lea    edx,[eax-0x3ffd0ce0]
c000fda5:	f7 d6                	not    esi
c000fda7:	29 c6                	sub    esi,eax
c000fda9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdac:	42                   	inc    edx
c000fdad:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdb0:	39 d9                	cmp    ecx,ebx
c000fdb2:	7f f5                	jg     c000fda9 <Phys::allocateDMA(unsigned long)+0x74>
c000fdb4:	85 ff                	test   edi,edi
c000fdb6:	74 13                	je     c000fdcb <Phys::allocateDMA(unsigned long)+0x96>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	05 50 20 0c 00       	add    eax,0xc2050
c000fdbe:	5e                   	pop    esi
c000fdbf:	c1 e0 0c             	shl    eax,0xc
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    
c000fdc5:	89 ea                	mov    edx,ebp
c000fdc7:	31 c9                	xor    ecx,ecx
c000fdc9:	eb a7                	jmp    c000fd72 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdcb:	5b                   	pop    ebx
c000fdcc:	c1 e0 0c             	shl    eax,0xc
c000fdcf:	5e                   	pop    esi
c000fdd0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdd5:	5f                   	pop    edi
c000fdd6:	5d                   	pop    ebp
c000fdd7:	c3                   	ret    

c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fde0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fde6:	c1 e9 0c             	shr    ecx,0xc
c000fde9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdee:	76 25                	jbe    c000fe15 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdf0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdf5:	c1 e8 0c             	shr    eax,0xc
c000fdf8:	8d 50 10             	lea    edx,[eax+0x10]
c000fdfb:	85 c9                	test   ecx,ecx
c000fdfd:	74 15                	je     c000fe14 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdff:	8d 82 20 f3 02 c0    	lea    eax,[edx-0x3ffd0ce0]
c000fe05:	8d 94 11 20 f3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ce0]
c000fe0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe0f:	40                   	inc    eax
c000fe10:	39 d0                	cmp    eax,edx
c000fe12:	75 f8                	jne    c000fe0c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe14:	c3                   	ret    
c000fe15:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe1b:	c1 ea 0c             	shr    edx,0xc
c000fe1e:	eb db                	jmp    c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe20 <Phys::setPageState(unsigned long, bool)>:
c000fe20:	56                   	push   esi
c000fe21:	ba 01 00 00 00       	mov    edx,0x1
c000fe26:	53                   	push   ebx
c000fe27:	8b 35 e4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1e4
c000fe2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe35:	89 c8                	mov    eax,ecx
c000fe37:	83 e1 07             	and    ecx,0x7
c000fe3a:	c1 e8 03             	shr    eax,0x3
c000fe3d:	d3 e3                	shl    ebx,cl
c000fe3f:	01 c6                	add    esi,eax
c000fe41:	d3 e2                	shl    edx,cl
c000fe43:	f7 d2                	not    edx
c000fe45:	20 16                	and    BYTE PTR [esi],dl
c000fe47:	03 05 e4 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1e4
c000fe4d:	08 18                	or     BYTE PTR [eax],bl
c000fe4f:	5b                   	pop    ebx
c000fe50:	5e                   	pop    esi
c000fe51:	c3                   	ret    

c000fe52 <Phys::getPageState(unsigned long)>:
c000fe52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe56:	8b 15 e4 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1e4
c000fe5c:	89 c8                	mov    eax,ecx
c000fe5e:	83 e1 07             	and    ecx,0x7
c000fe61:	c1 e8 03             	shr    eax,0x3
c000fe64:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe68:	d3 f8                	sar    eax,cl
c000fe6a:	83 e0 01             	and    eax,0x1
c000fe6d:	c3                   	ret    

c000fe6e <Phys::freePage(unsigned long)>:
c000fe6e:	53                   	push   ebx
c000fe6f:	83 ec 08             	sub    esp,0x8
c000fe72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe76:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe7c:	76 57                	jbe    c000fed5 <Phys::freePage(unsigned long)+0x67>
c000fe7e:	c1 eb 0c             	shr    ebx,0xc
c000fe81:	53                   	push   ebx
c000fe82:	e8 cb ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000fe87:	5a                   	pop    edx
c000fe88:	84 c0                	test   al,al
c000fe8a:	74 5b                	je     c000fee7 <Phys::freePage(unsigned long)+0x79>
c000fe8c:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c000fe91:	48                   	dec    eax
c000fe92:	a3 10 f3 02 c0       	mov    ds:0xc002f310,eax
c000fe97:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe9d:	c1 e0 02             	shl    eax,0x2
c000fea0:	99                   	cdq    
c000fea1:	f7 3d 14 f3 02 c0    	idiv   DWORD PTR ds:0xc002f314
c000fea7:	39 05 0c f3 02 c0    	cmp    DWORD PTR ds:0xc002f30c,eax
c000fead:	75 13                	jne    c000fec2 <Phys::freePage(unsigned long)+0x54>
c000feaf:	83 ec 08             	sub    esp,0x8
c000feb2:	6a 00                	push   0x0
c000feb4:	53                   	push   ebx
c000feb5:	e8 66 ff ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	83 c4 08             	add    esp,0x8
c000fec0:	5b                   	pop    ebx
c000fec1:	c3                   	ret    
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	a3 0c f3 02 c0       	mov    ds:0xc002f30c,eax
c000feca:	50                   	push   eax
c000fecb:	e8 08 0a 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	eb da                	jmp    c000feaf <Phys::freePage(unsigned long)+0x41>
c000fed5:	68 00 10 00 00       	push   0x1000
c000feda:	53                   	push   ebx
c000fedb:	e8 f8 fe ff ff       	call   c000fdd8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee0:	59                   	pop    ecx
c000fee1:	5b                   	pop    ebx
c000fee2:	83 c4 08             	add    esp,0x8
c000fee5:	5b                   	pop    ebx
c000fee6:	c3                   	ret    
c000fee7:	c7 44 24 10 c6 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afc6
c000feef:	83 c4 08             	add    esp,0x8
c000fef2:	5b                   	pop    ebx
c000fef3:	e9 d9 a9 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>

c000fef8 <Phys::allocatePage()>:
c000fef8:	56                   	push   esi
c000fef9:	53                   	push   ebx
c000fefa:	51                   	push   ecx
c000fefb:	8b 35 04 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f304
c000ff01:	89 f3                	mov    ebx,esi
c000ff03:	eb 0a                	jmp    c000ff0f <Phys::allocatePage()+0x17>
c000ff05:	89 1d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,ebx
c000ff0b:	39 de                	cmp    esi,ebx
c000ff0d:	74 24                	je     c000ff33 <Phys::allocatePage()+0x3b>
c000ff0f:	53                   	push   ebx
c000ff10:	e8 3d ff ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff15:	5a                   	pop    edx
c000ff16:	84 c0                	test   al,al
c000ff18:	74 77                	je     c000ff91 <Phys::allocatePage()+0x99>
c000ff1a:	43                   	inc    ebx
c000ff1b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff21:	75 e2                	jne    c000ff05 <Phys::allocatePage()+0xd>
c000ff23:	31 db                	xor    ebx,ebx
c000ff25:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c000ff2f:	39 de                	cmp    esi,ebx
c000ff31:	75 dc                	jne    c000ff0f <Phys::allocatePage()+0x17>
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff3e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff44:	e8 1b 2c 00 00       	call   c0012b64 <VAS::scanForEviction()>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	85 c0                	test   eax,eax
c000ff4e:	75 76                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	68 dc af 02 c0       	push   0xc002afdc
c000ff58:	e8 da 2e 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c000ff5d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff64:	e8 cc fd ff ff       	call   c000fd35 <Phys::allocateDMA(unsigned long)>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	85 c0                	test   eax,eax
c000ff6e:	75 56                	jne    c000ffc6 <Phys::allocatePage()+0xce>
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	68 ed af 02 c0       	push   0xc002afed
c000ff78:	e8 54 a9 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	8b 1d 04 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f304
c000ff86:	53                   	push   ebx
c000ff87:	e8 c6 fe ff ff       	call   c000fe52 <Phys::getPageState(unsigned long)>
c000ff8c:	5a                   	pop    edx
c000ff8d:	84 c0                	test   al,al
c000ff8f:	75 89                	jne    c000ff1a <Phys::allocatePage()+0x22>
c000ff91:	6a 01                	push   0x1
c000ff93:	53                   	push   ebx
c000ff94:	e8 87 fe ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c000ff99:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c000ff9e:	59                   	pop    ecx
c000ff9f:	40                   	inc    eax
c000ffa0:	5b                   	pop    ebx
c000ffa1:	a3 10 f3 02 c0       	mov    ds:0xc002f310,eax
c000ffa6:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa9:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffac:	c1 e0 02             	shl    eax,0x2
c000ffaf:	99                   	cdq    
c000ffb0:	f7 3d 14 f3 02 c0    	idiv   DWORD PTR ds:0xc002f314
c000ffb6:	39 05 0c f3 02 c0    	cmp    DWORD PTR ds:0xc002f30c,eax
c000ffbc:	75 0c                	jne    c000ffca <Phys::allocatePage()+0xd2>
c000ffbe:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c000ffc3:	c1 e0 0c             	shl    eax,0xc
c000ffc6:	5a                   	pop    edx
c000ffc7:	5b                   	pop    ebx
c000ffc8:	5e                   	pop    esi
c000ffc9:	c3                   	ret    
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	a3 0c f3 02 c0       	mov    ds:0xc002f30c,eax
c000ffd2:	50                   	push   eax
c000ffd3:	e8 00 09 00 00       	call   c00108d8 <VgaText::updateRAMUsageDisplay(int)>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	eb e1                	jmp    c000ffbe <Phys::allocatePage()+0xc6>

c000ffdd <Phys::allocateContiguousPages(int)>:
c000ffdd:	57                   	push   edi
c000ffde:	56                   	push   esi
c000ffdf:	53                   	push   ebx
c000ffe0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffe4:	fa                   	cli    
c000ffe5:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000ffeb:	31 db                	xor    ebx,ebx
c000ffed:	85 db                	test   ebx,ebx
c000ffef:	75 11                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c000fff1:	e8 02 ff ff ff       	call   c000fef8 <Phys::allocatePage()>
c000fff6:	83 fe 01             	cmp    esi,0x1
c000fff9:	89 c7                	mov    edi,eax
c000fffb:	74 21                	je     c001001e <Phys::allocateContiguousPages(int)+0x41>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	e8 f1 fe ff ff       	call   c000fef8 <Phys::allocatePage()>
c0010007:	89 da                	mov    edx,ebx
c0010009:	c1 e2 0c             	shl    edx,0xc
c001000c:	01 fa                	add    edx,edi
c001000e:	39 c2                	cmp    edx,eax
c0010010:	74 20                	je     c0010032 <Phys::allocateContiguousPages(int)+0x55>
c0010012:	bb 01 00 00 00       	mov    ebx,0x1
c0010017:	89 c7                	mov    edi,eax
c0010019:	83 fe 01             	cmp    esi,0x1
c001001c:	75 e4                	jne    c0010002 <Phys::allocateContiguousPages(int)+0x25>
c001001e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0010023:	48                   	dec    eax
c0010024:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0010029:	75 01                	jne    c001002c <Phys::allocateContiguousPages(int)+0x4f>
c001002b:	fb                   	sti    
c001002c:	89 f8                	mov    eax,edi
c001002e:	5b                   	pop    ebx
c001002f:	5e                   	pop    esi
c0010030:	5f                   	pop    edi
c0010031:	c3                   	ret    
c0010032:	43                   	inc    ebx
c0010033:	39 f3                	cmp    ebx,esi
c0010035:	75 b6                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x10>
c0010037:	eb e5                	jmp    c001001e <Phys::allocateContiguousPages(int)+0x41>

c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003f:	39 1d 08 f3 02 c0    	cmp    DWORD PTR ds:0xc002f308,ebx
c0010045:	73 06                	jae    c001004d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010047:	89 1d 08 f3 02 c0    	mov    DWORD PTR ds:0xc002f308,ebx
c001004d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010051:	c1 eb 0c             	shr    ebx,0xc
c0010054:	c1 e8 0c             	shr    eax,0xc
c0010057:	39 d8                	cmp    eax,ebx
c0010059:	73 13                	jae    c001006e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001005b:	6a 00                	push   0x0
c001005d:	8d 70 01             	lea    esi,[eax+0x1]
c0010060:	50                   	push   eax
c0010061:	e8 ba fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010066:	5a                   	pop    edx
c0010067:	89 f0                	mov    eax,esi
c0010069:	59                   	pop    ecx
c001006a:	39 f3                	cmp    ebx,esi
c001006c:	75 ed                	jne    c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	c3                   	ret    

c0010071 <Phys::physicalMemorySetup(unsigned int)>:
c0010071:	55                   	push   ebp
c0010072:	57                   	push   edi
c0010073:	56                   	push   esi
c0010074:	53                   	push   ebx
c0010075:	31 db                	xor    ebx,ebx
c0010077:	83 ec 40             	sub    esp,0x40
c001007a:	6a 30                	push   0x30
c001007c:	6a 00                	push   0x0
c001007e:	68 20 f3 02 c0       	push   0xc002f320
c0010083:	e8 c8 06 ff ff       	call   c0000750 <memset>
c0010088:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001008c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010091:	05 00 10 00 00       	add    eax,0x1000
c0010096:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001009a:	83 c4 10             	add    esp,0x10
c001009d:	83 ec 08             	sub    esp,0x8
c00100a0:	6a 01                	push   0x1
c00100a2:	53                   	push   ebx
c00100a3:	43                   	inc    ebx
c00100a4:	e8 77 fd ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100b2:	75 e9                	jne    c001009d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100b4:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100bb:	66 85 c0             	test   ax,ax
c00100be:	0f 84 8e 01 00 00    	je     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100d4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100dd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100e5:	eb 15                	jmp    c00100fc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100e7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100eb:	83 c3 18             	add    ebx,0x18
c00100ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100f6:	0f 84 66 01 00 00    	je     c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010102:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010109:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001010d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001010f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010112:	01 f0                	add    eax,esi
c0010114:	55                   	push   ebp
c0010115:	11 fa                	adc    edx,edi
c0010117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001011b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001011f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010123:	56                   	push   esi
c0010124:	68 28 b0 02 c0       	push   0xc002b028
c0010129:	e8 09 2d 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	09 f8                	or     eax,edi
c0010137:	0f 85 25 01 00 00    	jne    c0010262 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001013d:	4d                   	dec    ebp
c001013e:	75 a7                	jne    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010140:	ba 00 00 08 00       	mov    edx,0x80000
c0010145:	89 c1                	mov    ecx,eax
c0010147:	39 f2                	cmp    edx,esi
c0010149:	19 f9                	sbb    ecx,edi
c001014b:	0f 82 a7 00 00 00    	jb     c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010151:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010155:	89 c1                	mov    ecx,eax
c0010157:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001015b:	0f 83 97 00 00 00    	jae    c00101f8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010161:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010166:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016e:	39 fa                	cmp    edx,edi
c0010170:	19 e8                	sbb    eax,ebp
c0010172:	0f 82 14 01 00 00    	jb     c001028c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010178:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001017c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010180:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010186:	ba ff 1f 00 00       	mov    edx,0x1fff
c001018b:	83 d5 ff             	adc    ebp,0xffffffff
c001018e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010192:	31 c0                	xor    eax,eax
c0010194:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010198:	39 fa                	cmp    edx,edi
c001019a:	89 c1                	mov    ecx,eax
c001019c:	19 e9                	sbb    ecx,ebp
c001019e:	0f 83 43 ff ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a4:	be 00 00 08 00       	mov    esi,0x80000
c00101a9:	50                   	push   eax
c00101aa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ae:	57                   	push   edi
c00101af:	56                   	push   esi
c00101b0:	68 4c b0 02 c0       	push   0xc002b04c
c00101b5:	e8 7d 2c 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00101ba:	5a                   	pop    edx
c00101bb:	59                   	pop    ecx
c00101bc:	57                   	push   edi
c00101bd:	56                   	push   esi
c00101be:	e8 76 fe ff ff       	call   c0010039 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101cb:	83 c4 0c             	add    esp,0xc
c00101ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101d2:	03 05 14 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f314
c00101d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101df:	a3 14 f3 02 c0       	mov    ds:0xc002f314,eax
c00101e4:	52                   	push   edx
c00101e5:	50                   	push   eax
c00101e6:	68 09 b0 02 c0       	push   0xc002b009
c00101eb:	e8 47 2c 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	e9 ef fe ff ff       	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010204:	39 ea                	cmp    edx,ebp
c0010206:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001020a:	0f 82 d7 fe ff ff    	jb     c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010210:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010215:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010219:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001021d:	0f 83 c4 fe ff ff    	jae    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010223:	39 ee                	cmp    esi,ebp
c0010225:	89 f8                	mov    eax,edi
c0010227:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001022b:	0f 83 78 ff ff ff    	jae    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010239:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001023d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010241:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001024d:	e9 57 ff ff ff       	jmp    c00101a9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	68 fb af 02 c0       	push   0xc002affb
c001025a:	e8 72 a6 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	bb 40 01 00 00       	mov    ebx,0x140
c0010267:	83 ec 08             	sub    esp,0x8
c001026a:	6a 00                	push   0x0
c001026c:	53                   	push   ebx
c001026d:	43                   	inc    ebx
c001026e:	e8 ad fb ff ff       	call   c000fe20 <Phys::setPageState(unsigned long, bool)>
c0010273:	ff 05 14 f3 02 c0    	inc    DWORD PTR ds:0xc002f314
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010282:	75 e3                	jne    c0010267 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010284:	83 c4 3c             	add    esp,0x3c
c0010287:	5b                   	pop    ebx
c0010288:	5e                   	pop    esi
c0010289:	5f                   	pop    edi
c001028a:	5d                   	pop    ebp
c001028b:	c3                   	ret    
c001028c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010294:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001029c:	e9 d7 fe ff ff       	jmp    c0010178 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102a1:	90                   	nop

c00102a2 <Pipe::isAtty()>:
c00102a2:	31 c0                	xor    eax,eax
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <Pipe::~Pipe()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ba b8 b0 02 c0       	mov    edx,0xc002b0b8
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	89 10                	mov    DWORD PTR [eax],edx
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 0f 15 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	90                   	nop
c00102c5:	83 c4 0c             	add    esp,0xc
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <Pipe::~Pipe()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 cd ff ff ff       	call   c00102a6 <Pipe::~Pipe()>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	6a 20                	push   0x20
c00102e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e5:	e8 6d 2a 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c00102ea:	83 c4 10             	add    esp,0x10
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::read(unsigned long long, void*, int*)>:
c00102f2:	55                   	push   ebp
c00102f3:	57                   	push   edi
c00102f4:	56                   	push   esi
c00102f5:	53                   	push   ebx
c00102f6:	83 ec 1c             	sub    esp,0x1c
c00102f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010301:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010305:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010308:	89 c8                	mov    eax,ecx
c001030a:	99                   	cdq    
c001030b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001030f:	74 24                	je     c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010311:	39 f9                	cmp    ecx,edi
c0010313:	89 d1                	mov    ecx,edx
c0010315:	19 f1                	sbb    ecx,esi
c0010317:	73 1c                	jae    c0010335 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010319:	fa                   	cli    
c001031a:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0010320:	e8 5f e3 00 00       	call   c001e684 <schedule()>
c0010325:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001032a:	48                   	dec    eax
c001032b:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0010330:	75 d3                	jne    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010332:	fb                   	sti    
c0010333:	eb d0                	jmp    c0010305 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010335:	39 f8                	cmp    eax,edi
c0010337:	89 d1                	mov    ecx,edx
c0010339:	89 3c 24             	mov    DWORD PTR [esp],edi
c001033c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010340:	19 f1                	sbb    ecx,esi
c0010342:	73 07                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010344:	89 04 24             	mov    DWORD PTR [esp],eax
c0010347:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001034b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001034e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010351:	29 f7                	sub    edi,esi
c0010353:	89 f8                	mov    eax,edi
c0010355:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010359:	99                   	cdq    
c001035a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001035d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010361:	19 d0                	sbb    eax,edx
c0010363:	73 07                	jae    c001036c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010365:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001036c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001036f:	89 ea                	mov    edx,ebp
c0010371:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010375:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001037a:	74 0d                	je     c0010389 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001037c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001037f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010389:	85 d2                	test   edx,edx
c001038b:	74 11                	je     c001039e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001038d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010391:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010394:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010398:	89 d1                	mov    ecx,edx
c001039a:	89 c7                	mov    edi,eax
c001039c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103a1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103a4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103a7:	99                   	cdq    
c00103a8:	89 f7                	mov    edi,esi
c00103aa:	03 04 24             	add    eax,DWORD PTR [esp]
c00103ad:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103b1:	c1 ff 1f             	sar    edi,0x1f
c00103b4:	57                   	push   edi
c00103b5:	56                   	push   esi
c00103b6:	52                   	push   edx
c00103b7:	50                   	push   eax
c00103b8:	e8 37 73 01 00       	call   c00276f4 <__umoddi3>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103c3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103c8:	75 10                	jne    c00103da <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	68 75 b0 02 c0       	push   0xc002b075
c00103d2:	e8 fa a4 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103de:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00103e1:	89 10                	mov    DWORD PTR [eax],edx
c00103e3:	83 c4 1c             	add    esp,0x1c
c00103e6:	31 c0                	xor    eax,eax
c00103e8:	5b                   	pop    ebx
c00103e9:	5e                   	pop    esi
c00103ea:	5f                   	pop    edi
c00103eb:	5d                   	pop    ebp
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <Pipe::write(unsigned long long, void*, int*)>:
c00103ee:	55                   	push   ebp
c00103ef:	57                   	push   edi
c00103f0:	56                   	push   esi
c00103f1:	53                   	push   ebx
c00103f2:	83 ec 1c             	sub    esp,0x1c
c00103f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103fd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010400:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010404:	89 04 24             	mov    DWORD PTR [esp],eax
c0010407:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001040b:	89 d8                	mov    eax,ebx
c001040d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010410:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010414:	89 d6                	mov    esi,edx
c0010416:	89 d7                	mov    edi,edx
c0010418:	c1 ff 1f             	sar    edi,0x1f
c001041b:	03 34 24             	add    esi,DWORD PTR [esp]
c001041e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010422:	c1 f8 1f             	sar    eax,0x1f
c0010425:	39 f3                	cmp    ebx,esi
c0010427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001042b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042f:	19 f8                	sbb    eax,edi
c0010431:	b8 01 00 00 00       	mov    eax,0x1
c0010436:	72 6e                	jb     c00104a6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010438:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001043b:	01 d0                	add    eax,edx
c001043d:	99                   	cdq    
c001043e:	f7 fb                	idiv   ebx
c0010440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010444:	29 d3                	sub    ebx,edx
c0010446:	89 d7                	mov    edi,edx
c0010448:	89 de                	mov    esi,ebx
c001044a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001044d:	c1 fb 1f             	sar    ebx,0x1f
c0010450:	39 f2                	cmp    edx,esi
c0010452:	19 d8                	sbb    eax,ebx
c0010454:	b8 00 00 00 00       	mov    eax,0x0
c0010459:	72 04                	jb     c001045f <Pipe::write(unsigned long long, void*, int*)+0x71>
c001045b:	89 d0                	mov    eax,edx
c001045d:	29 f0                	sub    eax,esi
c001045f:	89 d3                	mov    ebx,edx
c0010461:	29 c3                	sub    ebx,eax
c0010463:	74 0b                	je     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010465:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010468:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001046c:	89 d9                	mov    ecx,ebx
c001046e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010470:	85 c0                	test   eax,eax
c0010472:	74 0d                	je     c0010481 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010474:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010478:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001047b:	89 de                	mov    esi,ebx
c001047d:	89 c1                	mov    ecx,eax
c001047f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010481:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010484:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010489:	75 10                	jne    c001049b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001048b:	83 ec 0c             	sub    esp,0xc
c001048e:	68 91 b0 02 c0       	push   0xc002b091
c0010493:	e8 39 a4 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0010498:	83 c4 10             	add    esp,0x10
c001049b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001049f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104a2:	89 08                	mov    DWORD PTR [eax],ecx
c00104a4:	31 c0                	xor    eax,eax
c00104a6:	83 c4 1c             	add    esp,0x1c
c00104a9:	5b                   	pop    ebx
c00104aa:	5e                   	pop    esi
c00104ab:	5f                   	pop    edi
c00104ac:	5d                   	pop    ebp
c00104ad:	c3                   	ret    

c00104ae <Pipe::Pipe(int)>:
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b5:	83 ec 08             	sub    esp,0x8
c00104b8:	6a 00                	push   0x0
c00104ba:	50                   	push   eax
c00104bb:	e8 2e 11 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	ba b8 b0 02 c0       	mov    edx,0xc002b0b8
c00104c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cc:	89 10                	mov    DWORD PTR [eax],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	50                   	push   eax
c00104f7:	e8 90 f3 ff ff       	call   c000f88c <malloc>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	89 c2                	mov    edx,eax
c0010501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010505:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010510:	90                   	nop
c0010511:	83 c4 0c             	add    esp,0xc
c0010514:	c3                   	ret    
c0010515:	90                   	nop

c0010516 <VgaText::isAtty()>:
c0010516:	b0 01                	mov    al,0x1
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <VgaText::~VgaText()>:
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	89 10                	mov    DWORD PTR [eax],edx
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	83 ec 0c             	sub    esp,0xc
c001052f:	50                   	push   eax
c0010530:	e8 9b 12 00 00       	call   c00117d0 <UnixFile::~UnixFile()>
c0010535:	83 c4 10             	add    esp,0x10
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <VgaText::~VgaText()>:
c001053e:	83 ec 0c             	sub    esp,0xc
c0010541:	83 ec 0c             	sub    esp,0xc
c0010544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010548:	e8 cd ff ff ff       	call   c001051a <VgaText::~VgaText()>
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	83 ec 08             	sub    esp,0x8
c0010553:	68 c4 02 00 00       	push   0x2c4
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 f6 27 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	83 c4 0c             	add    esp,0xc
c0010567:	c3                   	ret    

c0010568 <VgaText::read(unsigned long long, void*, int*)>:
c0010568:	83 ec 10             	sub    esp,0x10
c001056b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001056f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010577:	e8 6a 5d 00 00       	call   c00162e6 <readKeyboard(VgaText*, char*, unsigned long)>
c001057c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010580:	89 02                	mov    DWORD PTR [edx],eax
c0010582:	31 c0                	xor    eax,eax
c0010584:	83 c4 1c             	add    esp,0x1c
c0010587:	c3                   	ret    

c0010588 <setTerminalScrollLock(bool)>:
c0010588:	c3                   	ret    

c0010589 <addToTerminalCycle(VgaText*)>:
c0010589:	8b 15 a0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3a0
c001058f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010593:	85 d2                	test   edx,edx
c0010595:	75 09                	jne    c00105a0 <addToTerminalCycle(VgaText*)+0x17>
c0010597:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001059a:	a3 a0 f3 02 c0       	mov    ds:0xc002f3a0,eax
c001059f:	c3                   	ret    
c00105a0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105a3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105a6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105a9:	c3                   	ret    

c00105aa <installVgaTextImplementation()>:
c00105aa:	83 ec 10             	sub    esp,0x10
c00105ad:	6a 20                	push   0x20
c00105af:	6a 00                	push   0x0
c00105b1:	68 80 f3 02 c0       	push   0xc002f380
c00105b6:	e8 95 01 ff ff       	call   c0000750 <memset>
c00105bb:	83 c4 1c             	add    esp,0x1c
c00105be:	c3                   	ret    

c00105bf <scrollTerminalScrollLock(int)>:
c00105bf:	c3                   	ret    

c00105c0 <VgaText::load()>:
c00105c0:	53                   	push   ebx
c00105c1:	31 c0                	xor    eax,eax
c00105c3:	83 ec 58             	sub    esp,0x58
c00105c6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105ca:	89 e2                	mov    edx,esp
c00105cc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105d0:	40                   	inc    eax
c00105d1:	83 f8 50             	cmp    eax,0x50
c00105d4:	75 f6                	jne    c00105cc <VgaText::load()+0xc>
c00105d6:	31 c0                	xor    eax,eax
c00105d8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105df:	84 c9                	test   cl,cl
c00105e1:	74 06                	je     c00105e9 <VgaText::load()+0x29>
c00105e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e6:	40                   	inc    eax
c00105e7:	eb ef                	jmp    c00105d8 <VgaText::load()+0x18>
c00105e9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 09                	je     c00105f9 <VgaText::load()+0x39>
c00105f0:	51                   	push   ecx
c00105f1:	51                   	push   ecx
c00105f2:	52                   	push   edx
c00105f3:	53                   	push   ebx
c00105f4:	ff d0                	call   eax
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105fc:	85 c0                	test   eax,eax
c00105fe:	74 09                	je     c0010609 <VgaText::load()+0x49>
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	53                   	push   ebx
c0010604:	ff d0                	call   eax
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	83 c4 58             	add    esp,0x58
c001060c:	5b                   	pop    ebx
c001060d:	c3                   	ret    

c001060e <VgaText::updateCursor()>:
c001060e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010612:	39 05 a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,eax
c0010618:	75 09                	jne    c0010623 <VgaText::updateCursor()+0x15>
c001061a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 02                	je     c0010623 <VgaText::updateCursor()+0x15>
c0010621:	ff e0                	jmp    eax
c0010623:	c3                   	ret    

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001062f:	c3                   	ret    

c0010630 <VgaText::disableBlink(bool)>:
c0010630:	56                   	push   esi
c0010631:	53                   	push   ebx
c0010632:	51                   	push   ecx
c0010633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063b:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c0010641:	75 15                	jne    c0010658 <VgaText::disableBlink(bool)+0x28>
c0010643:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010646:	85 c0                	test   eax,eax
c0010648:	74 0e                	je     c0010658 <VgaText::disableBlink(bool)+0x28>
c001064a:	89 f1                	mov    ecx,esi
c001064c:	52                   	push   edx
c001064d:	52                   	push   edx
c001064e:	0f b6 d1             	movzx  edx,cl
c0010651:	52                   	push   edx
c0010652:	53                   	push   ebx
c0010653:	ff d0                	call   eax
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	89 f0                	mov    eax,esi
c001065a:	83 f0 01             	xor    eax,0x1
c001065d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010660:	58                   	pop    eax
c0010661:	5b                   	pop    ebx
c0010662:	5e                   	pop    esi
c0010663:	c3                   	ret    

c0010664 <VgaText::doANSI_SGR(int)>:
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066c:	85 d2                	test   edx,edx
c001066e:	75 0b                	jne    c001067b <VgaText::doANSI_SGR(int)+0x17>
c0010670:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010673:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010676:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010679:	eb 59                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001067b:	83 fa 07             	cmp    edx,0x7
c001067e:	75 0b                	jne    c001068b <VgaText::doANSI_SGR(int)+0x27>
c0010680:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010683:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010686:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010689:	eb 49                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c001068b:	83 fa 1b             	cmp    edx,0x1b
c001068e:	74 e0                	je     c0010670 <VgaText::doANSI_SGR(int)+0xc>
c0010690:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010693:	83 f9 07             	cmp    ecx,0x7
c0010696:	77 09                	ja     c00106a1 <VgaText::doANSI_SGR(int)+0x3d>
c0010698:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c001069f:	eb 20                	jmp    c00106c1 <VgaText::doANSI_SGR(int)+0x5d>
c00106a1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106a4:	83 f9 07             	cmp    ecx,0x7
c00106a7:	77 09                	ja     c00106b2 <VgaText::doANSI_SGR(int)+0x4e>
c00106a9:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c00106b0:	eb 22                	jmp    c00106d4 <VgaText::doANSI_SGR(int)+0x70>
c00106b2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106b5:	83 f9 07             	cmp    ecx,0x7
c00106b8:	77 0b                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x61>
c00106ba:	8b 14 95 d8 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f28]
c00106c1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106c4:	c3                   	ret    
c00106c5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 0a                	ja     c00106d7 <VgaText::doANSI_SGR(int)+0x73>
c00106cd:	8b 14 95 b0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f50]
c00106d4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106d7:	c3                   	ret    

c00106d8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106e3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e6:	c3                   	ret    
c00106e7:	90                   	nop

c00106e8 <VgaText::setDefaultFgColour(VgaColour)>:
c00106e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106f8:	53                   	push   ebx
c00106f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010701:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010705:	51                   	push   ecx
c0010706:	e8 cd ff ff ff       	call   c00106d8 <VgaText::setDefaultBgColour(VgaColour)>
c001070b:	58                   	pop    eax
c001070c:	5a                   	pop    edx
c001070d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010711:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010715:	5b                   	pop    ebx
c0010716:	eb d0                	jmp    c00106e8 <VgaText::setDefaultFgColour(VgaColour)>

c0010718 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010718:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001071c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010721:	83 e0 0f             	and    eax,0xf
c0010724:	c1 e2 04             	shl    edx,0x4
c0010727:	09 d0                	or     eax,edx
c0010729:	c3                   	ret    

c001072a <VgaText::scrollScreen()>:
c001072a:	55                   	push   ebp
c001072b:	b9 01 00 00 00       	mov    ecx,0x1
c0010730:	57                   	push   edi
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	83 ec 0c             	sub    esp,0xc
c0010736:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010740:	31 ff                	xor    edi,edi
c0010742:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010745:	83 f9 17             	cmp    ecx,0x17
c0010748:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001074b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010752:	75 27                	jne    c001077b <VgaText::scrollScreen()+0x51>
c0010754:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010757:	01 f5                	add    ebp,esi
c0010759:	f7 c7 01 00 00 00    	test   edi,0x1
c001075f:	74 16                	je     c0010777 <VgaText::scrollScreen()+0x4d>
c0010761:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010765:	50                   	push   eax
c0010766:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001076a:	50                   	push   eax
c001076b:	e8 a8 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	5a                   	pop    edx
c0010772:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010775:	eb 04                	jmp    c001077b <VgaText::scrollScreen()+0x51>
c0010777:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001077b:	47                   	inc    edi
c001077c:	46                   	inc    esi
c001077d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010783:	75 bd                	jne    c0010742 <VgaText::scrollScreen()+0x18>
c0010785:	41                   	inc    ecx
c0010786:	83 f9 18             	cmp    ecx,0x18
c0010789:	75 af                	jne    c001073a <VgaText::scrollScreen()+0x10>
c001078b:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c0010791:	75 1b                	jne    c00107ae <VgaText::scrollScreen()+0x84>
c0010793:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010797:	74 05                	je     c001079e <VgaText::scrollScreen()+0x74>
c0010799:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001079c:	eb 10                	jmp    c00107ae <VgaText::scrollScreen()+0x84>
c001079e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107a1:	85 c0                	test   eax,eax
c00107a3:	74 09                	je     c00107ae <VgaText::scrollScreen()+0x84>
c00107a5:	83 ec 0c             	sub    esp,0xc
c00107a8:	53                   	push   ebx
c00107a9:	ff d0                	call   eax
c00107ab:	83 c4 10             	add    esp,0x10
c00107ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107b2:	83 c4 0c             	add    esp,0xc
c00107b5:	5b                   	pop    ebx
c00107b6:	5e                   	pop    esi
c00107b7:	5f                   	pop    edi
c00107b8:	5d                   	pop    ebp
c00107b9:	e9 50 fe ff ff       	jmp    c001060e <VgaText::updateCursor()>

c00107be <VgaText::combineCharAndColour(char, unsigned char)>:
c00107be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107c3:	c1 e0 08             	shl    eax,0x8
c00107c6:	89 c2                	mov    edx,eax
c00107c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107cd:	09 d0                	or     eax,edx
c00107cf:	c3                   	ret    

c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	51                   	push   ecx
c00107d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107dc:	50                   	push   eax
c00107dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e2:	50                   	push   eax
c00107e3:	e8 30 ff ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00107e8:	5b                   	pop    ebx
c00107e9:	0f b6 c0             	movzx  eax,al
c00107ec:	5e                   	pop    esi
c00107ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107f2:	50                   	push   eax
c00107f3:	53                   	push   ebx
c00107f4:	e8 c5 ff ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	5e                   	pop    esi
c00107fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010804:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010808:	0f b7 d2             	movzx  edx,dx
c001080b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001080f:	39 0d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ecx
c0010815:	75 10                	jne    c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010817:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001081a:	85 c0                	test   eax,eax
c001081c:	74 09                	je     c0010827 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001081e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010822:	5a                   	pop    edx
c0010823:	5b                   	pop    ebx
c0010824:	5e                   	pop    esi
c0010825:	ff e0                	jmp    eax
c0010827:	58                   	pop    eax
c0010828:	5b                   	pop    ebx
c0010829:	5e                   	pop    esi
c001082a:	c3                   	ret    
c001082b:	90                   	nop

c001082c <VgaText::getCursorX()>:
c001082c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010830:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010833:	c3                   	ret    

c0010834 <VgaText::getCursorY()>:
c0010834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010838:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001083b:	c3                   	ret    

c001083c <VgaText::setCursor(int, int)>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010844:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001084b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001084e:	e9 bb fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010853:	90                   	nop

c0010854 <VgaText::setCursorX(int)>:
c0010854:	83 ec 10             	sub    esp,0x10
c0010857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001085b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001085e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010862:	50                   	push   eax
c0010863:	e8 d4 ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010868:	83 c4 1c             	add    esp,0x1c
c001086b:	c3                   	ret    

c001086c <VgaText::setCursorY(int)>:
c001086c:	83 ec 10             	sub    esp,0x10
c001086f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010877:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001087a:	50                   	push   eax
c001087b:	e8 bc ff ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010880:	83 c4 1c             	add    esp,0x1c
c0010883:	c3                   	ret    

c0010884 <VgaText::incrementCursor(bool)>:
c0010884:	56                   	push   esi
c0010885:	53                   	push   ebx
c0010886:	51                   	push   ecx
c0010887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001088b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001088f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010892:	40                   	inc    eax
c0010893:	83 f8 50             	cmp    eax,0x50
c0010896:	74 05                	je     c001089d <VgaText::incrementCursor(bool)+0x19>
c0010898:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001089b:	eb 24                	jmp    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c001089d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108a7:	8d 50 01             	lea    edx,[eax+0x1]
c00108aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108b0:	75 0f                	jne    c00108c1 <VgaText::incrementCursor(bool)+0x3d>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108b8:	53                   	push   ebx
c00108b9:	e8 6c fe ff ff       	call   c001072a <VgaText::scrollScreen()>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	89 f0                	mov    eax,esi
c00108c3:	84 c0                	test   al,al
c00108c5:	74 0c                	je     c00108d3 <VgaText::incrementCursor(bool)+0x4f>
c00108c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108cb:	5a                   	pop    edx
c00108cc:	5b                   	pop    ebx
c00108cd:	5e                   	pop    esi
c00108ce:	e9 3b fd ff ff       	jmp    c001060e <VgaText::updateCursor()>
c00108d3:	58                   	pop    eax
c00108d4:	5b                   	pop    ebx
c00108d5:	5e                   	pop    esi
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::updateRAMUsageDisplay(int)>:
c00108d8:	56                   	push   esi
c00108d9:	8b 35 00 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e200
c00108df:	53                   	push   ebx
c00108e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00108e5:	6a 0f                	push   0xf
c00108e7:	6a 00                	push   0x0
c00108e9:	e8 2a fe ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c00108ee:	5a                   	pop    edx
c00108ef:	59                   	pop    ecx
c00108f0:	0f b6 c8             	movzx  ecx,al
c00108f3:	51                   	push   ecx
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	99                   	cdq    
c00108f9:	f7 fb                	idiv   ebx
c00108fb:	89 d3                	mov    ebx,edx
c00108fd:	83 c0 30             	add    eax,0x30
c0010900:	83 c3 30             	add    ebx,0x30
c0010903:	0f be c0             	movsx  eax,al
c0010906:	0f b6 db             	movzx  ebx,bl
c0010909:	50                   	push   eax
c001090a:	e8 af fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001090f:	5a                   	pop    edx
c0010910:	5a                   	pop    edx
c0010911:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010918:	51                   	push   ecx
c0010919:	53                   	push   ebx
c001091a:	e8 9f fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c001091f:	5b                   	pop    ebx
c0010920:	5a                   	pop    edx
c0010921:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010928:	51                   	push   ecx
c0010929:	6a 25                	push   0x25
c001092b:	e8 8e fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010930:	59                   	pop    ecx
c0010931:	5b                   	pop    ebx
c0010932:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateDiskUsage()>:
c001093c:	55                   	push   ebp
c001093d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010942:	57                   	push   edi
c0010943:	8b 3d 00 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e200
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	6a 0f                	push   0xf
c001094d:	6a 00                	push   0x0
c001094f:	e8 c4 fd ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010954:	5a                   	pop    edx
c0010955:	0f b6 d8             	movzx  ebx,al
c0010958:	59                   	pop    ecx
c0010959:	8b 35 34 36 03 c0    	mov    esi,DWORD PTR ds:0xc0033634
c001095f:	53                   	push   ebx
c0010960:	b9 0a 00 00 00       	mov    ecx,0xa
c0010965:	89 f0                	mov    eax,esi
c0010967:	99                   	cdq    
c0010968:	f7 fd                	idiv   ebp
c001096a:	99                   	cdq    
c001096b:	f7 f9                	idiv   ecx
c001096d:	8d 42 30             	lea    eax,[edx+0x30]
c0010970:	0f b6 c0             	movzx  eax,al
c0010973:	50                   	push   eax
c0010974:	e8 45 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010979:	5d                   	pop    ebp
c001097a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001097f:	5a                   	pop    edx
c0010980:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010984:	53                   	push   ebx
c0010985:	89 f0                	mov    eax,esi
c0010987:	99                   	cdq    
c0010988:	f7 fd                	idiv   ebp
c001098a:	99                   	cdq    
c001098b:	f7 f9                	idiv   ecx
c001098d:	8d 42 30             	lea    eax,[edx+0x30]
c0010990:	0f b6 c0             	movzx  eax,al
c0010993:	50                   	push   eax
c0010994:	e8 25 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010999:	5d                   	pop    ebp
c001099a:	bd 64 00 00 00       	mov    ebp,0x64
c001099f:	5a                   	pop    edx
c00109a0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109a7:	53                   	push   ebx
c00109a8:	89 f0                	mov    eax,esi
c00109aa:	99                   	cdq    
c00109ab:	f7 fd                	idiv   ebp
c00109ad:	99                   	cdq    
c00109ae:	f7 f9                	idiv   ecx
c00109b0:	8d 42 30             	lea    eax,[edx+0x30]
c00109b3:	0f b6 c0             	movzx  eax,al
c00109b6:	50                   	push   eax
c00109b7:	e8 02 fe ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109bc:	5d                   	pop    ebp
c00109bd:	5a                   	pop    edx
c00109be:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109c5:	53                   	push   ebx
c00109c6:	89 f0                	mov    eax,esi
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	89 d6                	mov    esi,edx
c00109cd:	99                   	cdq    
c00109ce:	f7 f9                	idiv   ecx
c00109d0:	8d 42 30             	lea    eax,[edx+0x30]
c00109d3:	0f b6 c0             	movzx  eax,al
c00109d6:	50                   	push   eax
c00109d7:	e8 e2 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109dc:	5d                   	pop    ebp
c00109dd:	5a                   	pop    edx
c00109de:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109e5:	53                   	push   ebx
c00109e6:	8d 46 30             	lea    eax,[esi+0x30]
c00109e9:	0f b6 f0             	movzx  esi,al
c00109ec:	56                   	push   esi
c00109ed:	e8 cc fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c00109f2:	5e                   	pop    esi
c00109f3:	8b 35 30 36 03 c0    	mov    esi,DWORD PTR ds:0xc0033630
c00109f9:	5d                   	pop    ebp
c00109fa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a01:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a06:	53                   	push   ebx
c0010a07:	89 f0                	mov    eax,esi
c0010a09:	99                   	cdq    
c0010a0a:	f7 fd                	idiv   ebp
c0010a0c:	99                   	cdq    
c0010a0d:	f7 f9                	idiv   ecx
c0010a0f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a12:	0f b6 c0             	movzx  eax,al
c0010a15:	50                   	push   eax
c0010a16:	e8 a3 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1b:	5a                   	pop    edx
c0010a1c:	5d                   	pop    ebp
c0010a1d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a24:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 fd                	idiv   ebp
c0010a2f:	99                   	cdq    
c0010a30:	f7 f9                	idiv   ecx
c0010a32:	8d 42 30             	lea    eax,[edx+0x30]
c0010a35:	0f b6 c0             	movzx  eax,al
c0010a38:	50                   	push   eax
c0010a39:	e8 80 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3e:	5a                   	pop    edx
c0010a3f:	5d                   	pop    ebp
c0010a40:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a47:	bd 64 00 00 00       	mov    ebp,0x64
c0010a4c:	53                   	push   ebx
c0010a4d:	89 f0                	mov    eax,esi
c0010a4f:	99                   	cdq    
c0010a50:	f7 fd                	idiv   ebp
c0010a52:	99                   	cdq    
c0010a53:	f7 f9                	idiv   ecx
c0010a55:	83 c2 30             	add    edx,0x30
c0010a58:	0f b6 d2             	movzx  edx,dl
c0010a5b:	52                   	push   edx
c0010a5c:	e8 5d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a61:	5a                   	pop    edx
c0010a62:	5d                   	pop    ebp
c0010a63:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 f9                	idiv   ecx
c0010a70:	89 d6                	mov    esi,edx
c0010a72:	99                   	cdq    
c0010a73:	f7 f9                	idiv   ecx
c0010a75:	8d 42 30             	lea    eax,[edx+0x30]
c0010a78:	0f b6 c0             	movzx  eax,al
c0010a7b:	50                   	push   eax
c0010a7c:	e8 3d fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a81:	5a                   	pop    edx
c0010a82:	59                   	pop    ecx
c0010a83:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a8a:	53                   	push   ebx
c0010a8b:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8e:	0f b6 f0             	movzx  esi,al
c0010a91:	56                   	push   esi
c0010a92:	e8 27 fd ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aa0:	5b                   	pop    ebx
c0010aa1:	5e                   	pop    esi
c0010aa2:	5f                   	pop    edi
c0010aa3:	5d                   	pop    ebp
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::updateTitle()>:
c0010aa6:	53                   	push   ebx
c0010aa7:	31 c0                	xor    eax,eax
c0010aa9:	83 ec 58             	sub    esp,0x58
c0010aac:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ab0:	89 e1                	mov    ecx,esp
c0010ab2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ab6:	40                   	inc    eax
c0010ab7:	83 f8 50             	cmp    eax,0x50
c0010aba:	75 f6                	jne    c0010ab2 <VgaText::updateTitle()+0xc>
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ac5:	84 db                	test   bl,bl
c0010ac7:	74 06                	je     c0010acf <VgaText::updateTitle()+0x29>
c0010ac9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010acc:	40                   	inc    eax
c0010acd:	eb ef                	jmp    c0010abe <VgaText::updateTitle()+0x18>
c0010acf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ad2:	85 c0                	test   eax,eax
c0010ad4:	74 09                	je     c0010adf <VgaText::updateTitle()+0x39>
c0010ad6:	53                   	push   ebx
c0010ad7:	53                   	push   ebx
c0010ad8:	51                   	push   ecx
c0010ad9:	52                   	push   edx
c0010ada:	ff d0                	call   eax
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	e8 58 fe ff ff       	call   c001093c <VgaText::updateDiskUsage()>
c0010ae4:	83 c4 58             	add    esp,0x58
c0010ae7:	5b                   	pop    ebx
c0010ae8:	c3                   	ret    
c0010ae9:	90                   	nop

c0010aea <VgaText::setTitleTextColour(VgaColour)>:
c0010aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010af5:	eb af                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010af7:	90                   	nop

c0010af8 <VgaText::setTitleColour(VgaColour)>:
c0010af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b03:	eb a1                	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b05:	90                   	nop

c0010b06 <VgaText::setTitle(char*)>:
c0010b06:	53                   	push   ebx
c0010b07:	83 ec 10             	sub    esp,0x10
c0010b0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b18:	50                   	push   eax
c0010b19:	e8 ee fc fe ff       	call   c000080c <strcpy>
c0010b1e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b22:	83 c4 18             	add    esp,0x18
c0010b25:	5b                   	pop    ebx
c0010b26:	e9 7b ff ff ff       	jmp    c0010aa6 <VgaText::updateTitle()>
c0010b2b:	90                   	nop

c0010b2c <VgaText::decrementCursor(bool)>:
c0010b2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b34:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b37:	85 c0                	test   eax,eax
c0010b39:	74 04                	je     c0010b3f <VgaText::decrementCursor(bool)+0x13>
c0010b3b:	48                   	dec    eax
c0010b3c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b3f:	84 c9                	test   cl,cl
c0010b41:	74 09                	je     c0010b4c <VgaText::decrementCursor(bool)+0x20>
c0010b43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b47:	e9 c2 fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b4e:	53                   	push   ebx
c0010b4f:	83 ec 08             	sub    esp,0x8
c0010b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b62:	3c 07                	cmp    al,0x7
c0010b64:	75 2a                	jne    c0010b90 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b66:	a1 58 f4 02 c0       	mov    eax,ds:0xc002f458
c0010b6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b73:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b7b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b87:	83 c4 08             	add    esp,0x8
c0010b8a:	5b                   	pop    ebx
c0010b8b:	e9 b4 30 00 00       	jmp    c0013c44 <Buzzer::beep(int, int, bool)>
c0010b90:	3c 0d                	cmp    al,0xd
c0010b92:	75 09                	jne    c0010b9d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b94:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b9b:	eb 2c                	jmp    c0010bc9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b9d:	3c 0a                	cmp    al,0xa
c0010b9f:	75 31                	jne    c0010bd2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010ba1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010ba4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bab:	8d 50 01             	lea    edx,[eax+0x1]
c0010bae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bb1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bb4:	75 0f                	jne    c0010bc5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bbc:	53                   	push   ebx
c0010bbd:	e8 68 fb ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010bc2:	83 c4 10             	add    esp,0x10
c0010bc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bc9:	83 c4 08             	add    esp,0x8
c0010bcc:	5b                   	pop    ebx
c0010bcd:	e9 3c fa ff ff       	jmp    c001060e <VgaText::updateCursor()>
c0010bd2:	3c 08                	cmp    al,0x8
c0010bd4:	75 25                	jne    c0010bfb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bd6:	50                   	push   eax
c0010bd7:	50                   	push   eax
c0010bd8:	6a 01                	push   0x1
c0010bda:	53                   	push   ebx
c0010bdb:	e8 4c ff ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010be0:	5a                   	pop    edx
c0010be1:	59                   	pop    ecx
c0010be2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010be5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010be8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010beb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bee:	6a 20                	push   0x20
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 da fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bf6:	83 c4 28             	add    esp,0x28
c0010bf9:	5b                   	pop    ebx
c0010bfa:	c3                   	ret    
c0010bfb:	83 ec 08             	sub    esp,0x8
c0010bfe:	0f be c0             	movsx  eax,al
c0010c01:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c04:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c07:	51                   	push   ecx
c0010c08:	52                   	push   edx
c0010c09:	50                   	push   eax
c0010c0a:	53                   	push   ebx
c0010c0b:	e8 c0 fb ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c10:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c14:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c1c:	83 c4 28             	add    esp,0x28
c0010c1f:	5b                   	pop    ebx
c0010c20:	e9 5f fc ff ff       	jmp    c0010884 <VgaText::incrementCursor(bool)>
c0010c25:	90                   	nop

c0010c26 <VgaText::isShowingCursor()>:
c0010c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c2a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c2d:	c3                   	ret    

c0010c2e <VgaText::isBlinkDisabled()>:
c0010c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c35:	83 f0 01             	xor    eax,0x1
c0010c38:	c3                   	ret    
c0010c39:	90                   	nop

c0010c3a <VgaText::setCursorHeight(int)>:
c0010c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c42:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c45:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c4d:	e9 d2 f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010c52 <VgaText::getCursorHeight()>:
c0010c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c59:	c3                   	ret    

c0010c5a <setActiveTerminal(VgaText*)>:
c0010c5a:	53                   	push   ebx
c0010c5b:	83 ec 08             	sub    esp,0x8
c0010c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c62:	85 db                	test   ebx,ebx
c0010c64:	75 11                	jne    c0010c77 <setActiveTerminal(VgaText*)+0x1d>
c0010c66:	c7 44 24 10 cc b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b0cc
c0010c6e:	83 c4 08             	add    esp,0x8
c0010c71:	5b                   	pop    ebx
c0010c72:	e9 5a 9c 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c0010c77:	50                   	push   eax
c0010c78:	50                   	push   eax
c0010c79:	53                   	push   ebx
c0010c7a:	68 da b0 02 c0       	push   0xc002b0da
c0010c7f:	e8 b3 21 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0010c84:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	85 c0                	test   eax,eax
c0010c8e:	74 0c                	je     c0010c9c <setActiveTerminal(VgaText*)+0x42>
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	50                   	push   eax
c0010c94:	e8 75 f9 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	89 1d a4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a4,ebx
c0010ca2:	51                   	push   ecx
c0010ca3:	51                   	push   ecx
c0010ca4:	53                   	push   ebx
c0010ca5:	68 f2 b0 02 c0       	push   0xc002b0f2
c0010caa:	e8 88 21 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0010caf:	83 c4 0c             	add    esp,0xc
c0010cb2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cb5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cb8:	53                   	push   ebx
c0010cb9:	e8 7e fb ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010cbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc1:	e8 68 ff ff ff       	call   c0010c2e <VgaText::isBlinkDisabled()>
c0010cc6:	5a                   	pop    edx
c0010cc7:	0f b6 c0             	movzx  eax,al
c0010cca:	59                   	pop    ecx
c0010ccb:	50                   	push   eax
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 5e f9 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c0010cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd5:	e8 78 ff ff ff       	call   c0010c52 <VgaText::getCursorHeight()>
c0010cda:	5a                   	pop    edx
c0010cdb:	59                   	pop    ecx
c0010cdc:	50                   	push   eax
c0010cdd:	53                   	push   ebx
c0010cde:	e8 57 ff ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0010ce3:	83 c4 10             	add    esp,0x10
c0010ce6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cea:	75 07                	jne    c0010cf3 <setActiveTerminal(VgaText*)+0x99>
c0010cec:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cf7:	83 c4 08             	add    esp,0x8
c0010cfa:	5b                   	pop    ebx
c0010cfb:	e9 c0 f8 ff ff       	jmp    c00105c0 <VgaText::load()>

c0010d00 <doTerminalCycle()>:
c0010d00:	83 ec 18             	sub    esp,0x18
c0010d03:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c0010d08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d0b:	50                   	push   eax
c0010d0c:	a3 a0 f3 02 c0       	mov    ds:0xc002f3a0,eax
c0010d11:	e8 44 ff ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0010d16:	83 c4 1c             	add    esp,0x1c
c0010d19:	c3                   	ret    

c0010d1a <VgaText::doUpdate()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d21:	85 c0                	test   eax,eax
c0010d23:	74 02                	je     c0010d27 <VgaText::doUpdate()+0xd>
c0010d25:	ff e0                	jmp    eax
c0010d27:	c3                   	ret    

c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d28:	55                   	push   ebp
c0010d29:	31 ed                	xor    ebp,ebp
c0010d2b:	57                   	push   edi
c0010d2c:	56                   	push   esi
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 1c             	sub    esp,0x1c
c0010d31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d3a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d41:	50                   	push   eax
c0010d42:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d47:	50                   	push   eax
c0010d48:	e8 cb f9 ff ff       	call   c0010718 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d4d:	59                   	pop    ecx
c0010d4e:	0f b6 c0             	movzx  eax,al
c0010d51:	5e                   	pop    esi
c0010d52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d5b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d62:	0f b7 f6             	movzx  esi,si
c0010d65:	01 f6                	add    esi,esi
c0010d67:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d6a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d6d:	84 c0                	test   al,al
c0010d6f:	0f 84 fd 00 00 00    	je     c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d75:	3c 0d                	cmp    al,0xd
c0010d77:	75 0c                	jne    c0010d85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d79:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d80:	e9 e7 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d85:	3c 0a                	cmp    al,0xa
c0010d87:	75 47                	jne    c0010dd0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d93:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d96:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d99:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d9c:	75 0f                	jne    c0010dad <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d9e:	83 ec 0c             	sub    esp,0xc
c0010da1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010da4:	53                   	push   ebx
c0010da5:	e8 80 f9 ff ff       	call   c001072a <VgaText::scrollScreen()>
c0010daa:	83 c4 10             	add    esp,0x10
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	31 ed                	xor    ebp,ebp
c0010db2:	53                   	push   ebx
c0010db3:	e8 56 f8 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010db8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dc3:	0f b7 f6             	movzx  esi,si
c0010dc6:	01 f6                	add    esi,esi
c0010dc8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dcb:	e9 9c 00 00 00       	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dd0:	3c 08                	cmp    al,0x8
c0010dd2:	75 35                	jne    c0010e09 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dd4:	56                   	push   esi
c0010dd5:	56                   	push   esi
c0010dd6:	6a 01                	push   0x1
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 4e fd ff ff       	call   c0010b2c <VgaText::decrementCursor(bool)>
c0010dde:	58                   	pop    eax
c0010ddf:	5a                   	pop    edx
c0010de0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010de3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010de6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010de9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dec:	6a 20                	push   0x20
c0010dee:	53                   	push   ebx
c0010def:	e8 dc f9 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010df4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010df9:	83 c4 20             	add    esp,0x20
c0010dfc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dff:	0f b7 f6             	movzx  esi,si
c0010e02:	01 f6                	add    esi,esi
c0010e04:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e07:	eb 63                	jmp    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e09:	51                   	push   ecx
c0010e0a:	51                   	push   ecx
c0010e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e0f:	50                   	push   eax
c0010e10:	e8 a9 f9 ff ff       	call   c00107be <VgaText::combineCharAndColour(char, unsigned char)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	66 89 06             	mov    WORD PTR [esi],ax
c0010e1b:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c0010e21:	75 21                	jne    c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e23:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e26:	85 c0                	test   eax,eax
c0010e28:	74 1a                	je     c0010e44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e2a:	52                   	push   edx
c0010e2b:	52                   	push   edx
c0010e2c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e3a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e3d:	51                   	push   ecx
c0010e3e:	53                   	push   ebx
c0010e3f:	ff d0                	call   eax
c0010e41:	83 c4 20             	add    esp,0x20
c0010e44:	83 c6 02             	add    esi,0x2
c0010e47:	50                   	push   eax
c0010e48:	50                   	push   eax
c0010e49:	6a 00                	push   0x0
c0010e4b:	53                   	push   ebx
c0010e4c:	e8 33 fa ff ff       	call   c0010884 <VgaText::incrementCursor(bool)>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e58:	75 0d                	jne    c0010e67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e5a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e5f:	0f b7 f6             	movzx  esi,si
c0010e62:	01 f6                	add    esi,esi
c0010e64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e67:	bd 01 00 00 00       	mov    ebp,0x1
c0010e6c:	47                   	inc    edi
c0010e6d:	e9 f8 fe ff ff       	jmp    c0010d6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e72:	83 ec 0c             	sub    esp,0xc
c0010e75:	53                   	push   ebx
c0010e76:	e8 93 f7 ff ff       	call   c001060e <VgaText::updateCursor()>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 e8                	mov    eax,ebp
c0010e80:	84 c0                	test   al,al
c0010e82:	74 0c                	je     c0010e90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	53                   	push   ebx
c0010e88:	e8 8d fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	5b                   	pop    ebx
c0010e9b:	5e                   	pop    esi
c0010e9c:	5f                   	pop    edi
c0010e9d:	5d                   	pop    ebp
c0010e9e:	c3                   	ret    
c0010e9f:	90                   	nop

c0010ea0 <VgaText::clearScreen()>:
c0010ea0:	57                   	push   edi
c0010ea1:	56                   	push   esi
c0010ea2:	31 f6                	xor    esi,esi
c0010ea4:	53                   	push   ebx
c0010ea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ea9:	52                   	push   edx
c0010eaa:	6a 00                	push   0x0
c0010eac:	6a 00                	push   0x0
c0010eae:	53                   	push   ebx
c0010eaf:	e8 88 f9 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010eb4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ec1:	7e 20                	jle    c0010ee3 <VgaText::clearScreen()+0x43>
c0010ec3:	31 ff                	xor    edi,edi
c0010ec5:	50                   	push   eax
c0010ec6:	50                   	push   eax
c0010ec7:	56                   	push   esi
c0010ec8:	57                   	push   edi
c0010ec9:	47                   	inc    edi
c0010eca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ecd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ed0:	6a 20                	push   0x20
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 f8 f8 ff ff       	call   c00107d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed8:	83 c4 20             	add    esp,0x20
c0010edb:	83 ff 50             	cmp    edi,0x50
c0010ede:	75 e5                	jne    c0010ec5 <VgaText::clearScreen()+0x25>
c0010ee0:	46                   	inc    esi
c0010ee1:	eb db                	jmp    c0010ebe <VgaText::clearScreen()+0x1e>
c0010ee3:	83 ec 0c             	sub    esp,0xc
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 2e fe ff ff       	call   c0010d1a <VgaText::doUpdate()>
c0010eec:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	5b                   	pop    ebx
c0010ef7:	5e                   	pop    esi
c0010ef8:	5f                   	pop    edi
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putchar(char)>:
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	83 ec 14             	sub    esp,0x14
c0010eff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f07:	3c 5b                	cmp    al,0x5b
c0010f09:	75 18                	jne    c0010f23 <VgaText::putchar(char)+0x29>
c0010f0b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f0f:	74 1f                	je     c0010f30 <VgaText::putchar(char)+0x36>
c0010f11:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f17:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f1e:	e9 bd 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f23:	3c 1b                	cmp    al,0x1b
c0010f25:	75 09                	jne    c0010f30 <VgaText::putchar(char)+0x36>
c0010f27:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f2b:	e9 b0 00 00 00       	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010f30:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f33:	84 c9                	test   cl,cl
c0010f35:	0f 84 92 00 00 00    	je     c0010fcd <VgaText::putchar(char)+0xd3>
c0010f3b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f3e:	80 fa 3e             	cmp    dl,0x3e
c0010f41:	77 76                	ja     c0010fb9 <VgaText::putchar(char)+0xbf>
c0010f43:	3c 6d                	cmp    al,0x6d
c0010f45:	75 47                	jne    c0010f8e <VgaText::putchar(char)+0x94>
c0010f47:	31 f6                	xor    esi,esi
c0010f49:	31 d2                	xor    edx,edx
c0010f4b:	31 c0                	xor    eax,eax
c0010f4d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f50:	7e 2d                	jle    c0010f7f <VgaText::putchar(char)+0x85>
c0010f52:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f57:	80 fa 3b             	cmp    dl,0x3b
c0010f5a:	75 17                	jne    c0010f73 <VgaText::putchar(char)+0x79>
c0010f5c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f60:	50                   	push   eax
c0010f61:	53                   	push   ebx
c0010f62:	e8 fd f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f67:	59                   	pop    ecx
c0010f68:	31 d2                	xor    edx,edx
c0010f6a:	58                   	pop    eax
c0010f6b:	31 c0                	xor    eax,eax
c0010f6d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f71:	eb 09                	jmp    c0010f7c <VgaText::putchar(char)+0x82>
c0010f73:	6b c0 0a             	imul   eax,eax,0xa
c0010f76:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f7a:	88 ca                	mov    dl,cl
c0010f7c:	46                   	inc    esi
c0010f7d:	eb ce                	jmp    c0010f4d <VgaText::putchar(char)+0x53>
c0010f7f:	84 d2                	test   dl,dl
c0010f81:	74 2e                	je     c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f83:	50                   	push   eax
c0010f84:	53                   	push   ebx
c0010f85:	e8 da f6 ff ff       	call   c0010664 <VgaText::doANSI_SGR(int)>
c0010f8a:	58                   	pop    eax
c0010f8b:	5a                   	pop    edx
c0010f8c:	eb 23                	jmp    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f8e:	3c 4a                	cmp    al,0x4a
c0010f90:	75 1f                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f92:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f96:	75 19                	jne    c0010fb1 <VgaText::putchar(char)+0xb7>
c0010f98:	83 ec 0c             	sub    esp,0xc
c0010f9b:	53                   	push   ebx
c0010f9c:	e8 ff fe ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c0010fa1:	83 c4 0c             	add    esp,0xc
c0010fa4:	6a 00                	push   0x0
c0010fa6:	6a 00                	push   0x0
c0010fa8:	53                   	push   ebx
c0010fa9:	e8 8e f8 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fb7:	eb 27                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fb9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fbc:	83 fa 0e             	cmp    edx,0xe
c0010fbf:	7f 1f                	jg     c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fc1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fc4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fc7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fcb:	eb 13                	jmp    c0010fe0 <VgaText::putchar(char)+0xe6>
c0010fcd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fd0:	0f be c0             	movsx  eax,al
c0010fd3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fd6:	50                   	push   eax
c0010fd7:	53                   	push   ebx
c0010fd8:	e8 71 fb ff ff       	call   c0010b4e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	83 c4 14             	add    esp,0x14
c0010fe3:	5b                   	pop    ebx
c0010fe4:	5e                   	pop    esi
c0010fe5:	c3                   	ret    

c0010fe6 <VgaText::puts(char const*)>:
c0010fe6:	53                   	push   ebx
c0010fe7:	83 ec 08             	sub    esp,0x8
c0010fea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ff1:	84 c0                	test   al,al
c0010ff3:	74 12                	je     c0011007 <VgaText::puts(char const*)+0x21>
c0010ff5:	43                   	inc    ebx
c0010ff6:	51                   	push   ecx
c0010ff7:	51                   	push   ecx
c0010ff8:	50                   	push   eax
c0010ff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffd:	e8 f8 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	eb e7                	jmp    c0010fee <VgaText::puts(char const*)+0x8>
c0011007:	83 c4 08             	add    esp,0x8
c001100a:	5b                   	pop    ebx
c001100b:	c3                   	ret    

c001100c <VgaText::putx(unsigned int)>:
c001100c:	57                   	push   edi
c001100d:	b9 11 00 00 00       	mov    ecx,0x11
c0011012:	56                   	push   esi
c0011013:	be 0e b1 02 c0       	mov    esi,0xc002b10e
c0011018:	53                   	push   ebx
c0011019:	83 ec 20             	sub    esp,0x20
c001101c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011020:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011024:	fc                   	cld    
c0011025:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011027:	be 08 00 00 00       	mov    esi,0x8
c001102c:	50                   	push   eax
c001102d:	50                   	push   eax
c001102e:	89 d8                	mov    eax,ebx
c0011030:	c1 e3 04             	shl    ebx,0x4
c0011033:	c1 e8 1c             	shr    eax,0x1c
c0011036:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001103b:	50                   	push   eax
c001103c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011040:	e8 b5 fe ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	4e                   	dec    esi
c0011049:	75 e1                	jne    c001102c <VgaText::putx(unsigned int)+0x20>
c001104b:	83 c4 20             	add    esp,0x20
c001104e:	5b                   	pop    ebx
c001104f:	5e                   	pop    esi
c0011050:	5f                   	pop    edi
c0011051:	c3                   	ret    

c0011052 <VgaText::VgaText(char const*)>:
c0011052:	57                   	push   edi
c0011053:	56                   	push   esi
c0011054:	53                   	push   ebx
c0011055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 00                	push   0x0
c001105e:	50                   	push   eax
c001105f:	e8 8a 05 00 00       	call   c00115ee <UnixFile::UnixFile(int)>
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	89 10                	mov    DWORD PTR [eax],edx
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011081:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011094:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	8d 50 60             	lea    edx,[eax+0x60]
c00110cb:	bb 80 f3 02 c0       	mov    ebx,0xc002f380
c00110d0:	b8 08 00 00 00       	mov    eax,0x8
c00110d5:	fc                   	cld    
c00110d6:	89 d7                	mov    edi,edx
c00110d8:	89 de                	mov    esi,ebx
c00110da:	89 c1                	mov    ecx,eax
c00110dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e2:	05 82 00 00 00       	add    eax,0x82
c00110e7:	83 ec 08             	sub    esp,0x8
c00110ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ee:	50                   	push   eax
c00110ef:	e8 18 f7 fe ff       	call   c000080c <strcpy>
c00110f4:	83 c4 10             	add    esp,0x10
c00110f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	6a 01                	push   0x1
c0011107:	e8 25 09 00 00       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	89 c2                	mov    edx,eax
c0011111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011118:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011125:	89 c6                	mov    esi,eax
c0011127:	e8 cc ed ff ff       	call   c000fef8 <Phys::allocatePage()>
c001112c:	6a 05                	push   0x5
c001112e:	56                   	push   esi
c001112f:	50                   	push   eax
c0011130:	53                   	push   ebx
c0011131:	e8 32 11 00 00       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011140:	83 ec 04             	sub    esp,0x4
c0011143:	68 00 0f 00 00       	push   0xf00
c0011148:	6a 00                	push   0x0
c001114a:	50                   	push   eax
c001114b:	e8 00 f6 fe ff       	call   c0000750 <memset>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	83 ec 04             	sub    esp,0x4
c0011156:	6a 00                	push   0x0
c0011158:	6a 07                	push   0x7
c001115a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001115e:	e8 95 f5 ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 ec 08             	sub    esp,0x8
c0011169:	6a 02                	push   0x2
c001116b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116f:	e8 c6 fa ff ff       	call   c0010c3a <VgaText::setCursorHeight(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	83 ec 04             	sub    esp,0x4
c001117a:	6a 00                	push   0x0
c001117c:	6a 00                	push   0x0
c001117e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011182:	e8 b5 f6 ff ff       	call   c001083c <VgaText::setCursor(int, int)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	83 ec 08             	sub    esp,0x8
c001118d:	6a 01                	push   0x1
c001118f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011193:	e8 8c f4 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	83 ec 08             	sub    esp,0x8
c001119e:	6a 01                	push   0x1
c00111a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a4:	e8 87 f4 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c00111a9:	83 c4 10             	add    esp,0x10
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b3:	e8 e8 fc ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c00111b8:	83 c4 10             	add    esp,0x10
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	05 02 01 00 00       	add    eax,0x102
c00111cc:	83 ec 04             	sub    esp,0x4
c00111cf:	68 96 00 00 00       	push   0x96
c00111d4:	6a 00                	push   0x0
c00111d6:	50                   	push   eax
c00111d7:	e8 74 f5 fe ff       	call   c0000750 <memset>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	05 98 01 00 00       	add    eax,0x198
c00111e8:	83 ec 04             	sub    esp,0x4
c00111eb:	68 2c 01 00 00       	push   0x12c
c00111f0:	6a 00                	push   0x0
c00111f2:	50                   	push   eax
c00111f3:	e8 58 f5 fe ff       	call   c0000750 <memset>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	90                   	nop
c00111fc:	5b                   	pop    ebx
c00111fd:	5e                   	pop    esi
c00111fe:	5f                   	pop    edi
c00111ff:	c3                   	ret    

c0011200 <VgaText::receiveKey(unsigned char)>:
c0011200:	55                   	push   ebp
c0011201:	57                   	push   edi
c0011202:	56                   	push   esi
c0011203:	53                   	push   ebx
c0011204:	83 ec 1c             	sub    esp,0x1c
c0011207:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001120b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001120f:	84 db                	test   bl,bl
c0011211:	0f 84 c9 00 00 00    	je     c00112e0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011217:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001121d:	80 fb 08             	cmp    bl,0x8
c0011220:	75 2c                	jne    c001124e <VgaText::receiveKey(unsigned char)+0x4e>
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	57                   	push   edi
c0011226:	e8 41 f5 fe ff       	call   c000076c <strlen>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	85 c0                	test   eax,eax
c0011230:	74 41                	je     c0011273 <VgaText::receiveKey(unsigned char)+0x73>
c0011232:	50                   	push   eax
c0011233:	50                   	push   eax
c0011234:	6a 08                	push   0x8
c0011236:	56                   	push   esi
c0011237:	e8 be fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001123c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001123f:	e8 28 f5 fe ff       	call   c000076c <strlen>
c0011244:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001124c:	eb 22                	jmp    c0011270 <VgaText::receiveKey(unsigned char)+0x70>
c001124e:	0f be c3             	movsx  eax,bl
c0011251:	52                   	push   edx
c0011252:	52                   	push   edx
c0011253:	50                   	push   eax
c0011254:	56                   	push   esi
c0011255:	e8 a0 fc ff ff       	call   c0010efa <VgaText::putchar(char)>
c001125a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001125e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011263:	59                   	pop    ecx
c0011264:	5d                   	pop    ebp
c0011265:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011269:	50                   	push   eax
c001126a:	57                   	push   edi
c001126b:	e8 dc f6 fe ff       	call   c000094c <strcat>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001127a:	75 05                	jne    c0011281 <VgaText::receiveKey(unsigned char)+0x81>
c001127c:	80 fb 0a             	cmp    bl,0xa
c001127f:	75 53                	jne    c00112d4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011281:	83 ec 0c             	sub    esp,0xc
c0011284:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001128a:	53                   	push   ebx
c001128b:	e8 dc f4 fe ff       	call   c000076c <strlen>
c0011290:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011293:	89 c5                	mov    ebp,eax
c0011295:	e8 d2 f4 fe ff       	call   c000076c <strlen>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112a1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112a6:	76 10                	jbe    c00112b8 <VgaText::receiveKey(unsigned char)+0xb8>
c00112a8:	83 ec 0c             	sub    esp,0xc
c00112ab:	68 1f b1 02 c0       	push   0xc002b11f
c00112b0:	e8 1c 96 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00112b5:	83 c4 10             	add    esp,0x10
c00112b8:	50                   	push   eax
c00112b9:	50                   	push   eax
c00112ba:	57                   	push   edi
c00112bb:	53                   	push   ebx
c00112bc:	e8 8b f6 fe ff       	call   c000094c <strcat>
c00112c1:	83 c4 0c             	add    esp,0xc
c00112c4:	68 96 00 00 00       	push   0x96
c00112c9:	6a 00                	push   0x0
c00112cb:	57                   	push   edi
c00112cc:	e8 7f f4 fe ff       	call   c0000750 <memset>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	56                   	push   esi
c00112d8:	e8 3d fa ff ff       	call   c0010d1a <VgaText::doUpdate()>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	83 c4 1c             	add    esp,0x1c
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	5d                   	pop    ebp
c00112e7:	c3                   	ret    

c00112e8 <VgaText::write(unsigned long long, void*, int*)>:
c00112e8:	55                   	push   ebp
c00112e9:	57                   	push   edi
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112fb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011302:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011305:	39 eb                	cmp    ebx,ebp
c0011307:	74 13                	je     c001131c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011309:	43                   	inc    ebx
c001130a:	50                   	push   eax
c001130b:	50                   	push   eax
c001130c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011310:	50                   	push   eax
c0011311:	56                   	push   esi
c0011312:	e8 e3 fb ff ff       	call   c0010efa <VgaText::putchar(char)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	eb e9                	jmp    c0011305 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001131c:	83 ec 0c             	sub    esp,0xc
c001131f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011326:	56                   	push   esi
c0011327:	e8 ee f9 ff ff       	call   c0010d1a <VgaText::doUpdate()>
c001132c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011330:	89 38                	mov    DWORD PTR [eax],edi
c0011332:	83 c4 1c             	add    esp,0x1c
c0011335:	31 c0                	xor    eax,eax
c0011337:	5b                   	pop    ebx
c0011338:	5e                   	pop    esi
c0011339:	5f                   	pop    edi
c001133a:	5d                   	pop    ebp
c001133b:	c3                   	ret    

c001133c <newTerminal(char*)>:
c001133c:	83 ec 28             	sub    esp,0x28
c001133f:	68 c4 02 00 00       	push   0x2c4
c0011344:	e8 43 e5 ff ff       	call   c000f88c <malloc>
c0011349:	5a                   	pop    edx
c001134a:	59                   	pop    ecx
c001134b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001134f:	50                   	push   eax
c0011350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011354:	e8 f9 fc ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c0011359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001135d:	83 c4 2c             	add    esp,0x2c
c0011360:	c3                   	ret    
c0011361:	90                   	nop

c0011362 <TSS::TSS()>:
c0011362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011366:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001136d:	90                   	nop
c001136e:	c3                   	ret    
c001136f:	90                   	nop

c0011370 <TSS::setESP(unsigned long)>:
c0011370:	55                   	push   ebp
c0011371:	89 e5                	mov    ebp,esp
c0011373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011379:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001137c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137f:	90                   	nop
c0011380:	5d                   	pop    ebp
c0011381:	c3                   	ret    

c0011382 <TSS::flush()>:
c0011382:	55                   	push   ebp
c0011383:	89 e5                	mov    ebp,esp
c0011385:	83 ec 10             	sub    esp,0x10
c0011388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138b:	8b 00                	mov    eax,DWORD PTR [eax]
c001138d:	83 c8 03             	or     eax,0x3
c0011390:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011394:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011398:	66 89 d0             	mov    ax,dx
c001139b:	0f 00 d8             	ltr    ax
c001139e:	90                   	nop
c001139f:	c9                   	leave  
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <TSS::setup(unsigned long, unsigned long)>:
c00113a2:	55                   	push   ebp
c00113a3:	89 e5                	mov    ebp,esp
c00113a5:	83 ec 18             	sub    esp,0x18
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	6a 68                	push   0x68
c00113ad:	e8 da e4 ff ff       	call   c000f88c <malloc>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	89 c2                	mov    edx,eax
c00113b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c3:	83 ec 04             	sub    esp,0x4
c00113c6:	6a 68                	push   0x68
c00113c8:	6a 00                	push   0x0
c00113ca:	50                   	push   eax
c00113cb:	e8 80 f3 fe ff       	call   c0000750 <memset>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011409:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001140f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011412:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011415:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001141b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011421:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011439:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011445:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011448:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001144b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011454:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011467:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146a:	0f 20 da             	mov    edx,cr3
c001146d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011470:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011473:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147c:	83 ec 08             	sub    esp,0x8
c001147f:	50                   	push   eax
c0011480:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011483:	50                   	push   eax
c0011484:	e8 df db ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	6a 68                	push   0x68
c0011491:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011494:	50                   	push   eax
c0011495:	e8 ea db ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114a1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114a4:	83 e0 0f             	and    eax,0xf
c00114a7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114aa:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ad:	83 c8 40             	or     eax,0x40
c00114b0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00114b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114be:	05 78 01 00 00       	add    eax,0x178
c00114c3:	83 ec 04             	sub    esp,0x4
c00114c6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114c9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114cc:	50                   	push   eax
c00114cd:	e8 e6 db ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	89 c2                	mov    edx,eax
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	89 10                	mov    DWORD PTR [eax],edx
c00114dc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00114e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114e7:	05 78 01 00 00       	add    eax,0x178
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	50                   	push   eax
c00114f0:	e8 07 dc ff ff       	call   c000f0fc <GDT::flush()>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fd:	83 ec 08             	sub    esp,0x8
c0011500:	50                   	push   eax
c0011501:	68 88 b1 02 c0       	push   0xc002b188
c0011506:	e8 2c 19 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001150b:	83 c4 10             	add    esp,0x10
c001150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011511:	8b 00                	mov    eax,DWORD PTR [eax]
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001151a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011526:	75 08                	jne    c0011530 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011528:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001152e:	eb 38                	jmp    c0011568 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011530:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011535:	75 17                	jne    c001154e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001153c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001153f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011545:	8b 10                	mov    edx,DWORD PTR [eax]
c0011547:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001154b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001154e:	89 c1                	mov    ecx,eax
c0011550:	83 e1 fd             	and    ecx,0xfffffffd
c0011553:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011559:	74 cd                	je     c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001155b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011560:	83 e0 ef             	and    eax,0xffffffef
c0011563:	83 f8 08             	cmp    eax,0x8
c0011566:	76 c0                	jbe    c0011528 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011568:	31 c0                	xor    eax,eax
c001156a:	c3                   	ret    
c001156b:	90                   	nop

c001156c <ReservedFilename::isAtty()>:
c001156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011570:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011573:	31 c0                	xor    eax,eax
c0011575:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001157b:	74 09                	je     c0011586 <ReservedFilename::isAtty()+0x1a>
c001157d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011583:	0f 94 c0             	sete   al
c0011586:	c3                   	ret    
c0011587:	90                   	nop

c0011588 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011597:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001159c:	75 08                	jne    c00115a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001159e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115a4:	eb 3d                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115ab:	75 17                	jne    c00115c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115c9:	75 04                	jne    c00115cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00115cd:	eb 14                	jmp    c00115e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115d4:	74 c8                	je     c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115db:	83 e0 ef             	and    eax,0xffffffef
c00115de:	83 f8 08             	cmp    eax,0x8
c00115e1:	76 bb                	jbe    c001159e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e3:	31 c0                	xor    eax,eax
c00115e5:	c3                   	ret    

c00115e6 <UnixFile::getFileDescriptor()>:
c00115e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ed:	c3                   	ret    

c00115ee <UnixFile::UnixFile(int)>:
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 28             	sub    esp,0x28
c00115f2:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c00115f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115fb:	89 10                	mov    DWORD PTR [eax],edx
c00115fd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011605:	0f 8f 8c 01 00 00    	jg     c0011797 <UnixFile::UnixFile(int)+0x1a9>
c001160b:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0011610:	8d 50 01             	lea    edx,[eax+0x1]
c0011613:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c0011619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001161d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011620:	83 ec 08             	sub    esp,0x8
c0011623:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011627:	68 38 f4 02 c0       	push   0xc002f438
c001162c:	e8 4b 7d 01 00       	call   c002937c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	a0 34 f4 02 c0       	mov    al,ds:0xc002f434
c0011639:	83 f0 01             	xor    eax,0x1
c001163c:	84 c0                	test   al,al
c001163e:	0f 84 54 01 00 00    	je     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c0011644:	c6 05 34 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f434,0x1
c001164b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011653:	83 ec 0c             	sub    esp,0xc
c0011656:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001165a:	e8 2d e2 ff ff       	call   c000f88c <malloc>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	89 c3                	mov    ebx,eax
c0011664:	83 ec 08             	sub    esp,0x8
c0011667:	68 03 ff ff 0f       	push   0xfffff03
c001166c:	53                   	push   ebx
c001166d:	e8 2c 01 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	89 1d 2c f4 02 c0    	mov    DWORD PTR ds:0xc002f42c,ebx
c001167b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001168a:	e8 fd e1 ff ff       	call   c000f88c <malloc>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	89 c3                	mov    ebx,eax
c0011694:	83 ec 08             	sub    esp,0x8
c0011697:	68 01 ff ff 0f       	push   0xfffff01
c001169c:	53                   	push   ebx
c001169d:	e8 fc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	89 1d 30 f4 02 c0    	mov    DWORD PTR ds:0xc002f430,ebx
c00116ab:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116ba:	e8 cd e1 ff ff       	call   c000f88c <malloc>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	89 c3                	mov    ebx,eax
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 00 ff ff 0f       	push   0xfffff00
c00116cc:	53                   	push   ebx
c00116cd:	e8 cc 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	89 1d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ebx
c00116db:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116ea:	e8 9d e1 ff ff       	call   c000f88c <malloc>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	89 c3                	mov    ebx,eax
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	68 02 ff ff 0f       	push   0xfffff02
c00116fc:	53                   	push   ebx
c00116fd:	e8 9c 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	89 1d 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,ebx
c001170b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011713:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011718:	7f 7e                	jg     c0011798 <UnixFile::UnixFile(int)+0x1aa>
c001171a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011729:	e8 5e e1 ff ff       	call   c000f88c <malloc>
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	89 c3                	mov    ebx,eax
c0011733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011737:	05 10 ff ff 0f       	add    eax,0xfffff10
c001173c:	83 ec 08             	sub    esp,0x8
c001173f:	50                   	push   eax
c0011740:	53                   	push   ebx
c0011741:	e8 58 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001174d:	89 1c 85 00 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c00],ebx
c0011754:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011763:	e8 24 e1 ff ff       	call   c000f88c <malloc>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	89 c3                	mov    ebx,eax
c001176d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011771:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	50                   	push   eax
c001177a:	53                   	push   ebx
c001177b:	e8 1e 00 00 00       	call   c001179e <ReservedFilename::ReservedFilename(int)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011787:	89 1c 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],ebx
c001178e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011792:	e9 7c ff ff ff       	jmp    c0011713 <UnixFile::UnixFile(int)+0x125>
c0011797:	90                   	nop
c0011798:	83 c4 28             	add    esp,0x28
c001179b:	5b                   	pop    ebx
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <ReservedFilename::ReservedFilename(int)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a5:	83 ec 08             	sub    esp,0x8
c00117a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117ac:	50                   	push   eax
c00117ad:	e8 3c fe ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c00117ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117be:	89 10                	mov    DWORD PTR [eax],edx
c00117c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117cb:	90                   	nop
c00117cc:	83 c4 0c             	add    esp,0xc
c00117cf:	c3                   	ret    

c00117d0 <UnixFile::~UnixFile()>:
c00117d0:	83 ec 1c             	sub    esp,0x1c
c00117d3:	ba 74 b2 02 c0       	mov    edx,0xc002b274
c00117d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117dc:	89 10                	mov    DWORD PTR [eax],edx
c00117de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117e5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117ea:	7f 73                	jg     c001185f <UnixFile::~UnixFile()+0x8f>
c00117ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	68 38 f4 02 c0       	push   0xc002f438
c00117fc:	e8 4f 7c 01 00       	call   c0029450 <LinkedList<UnixFile>::getFirstElement()>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	68 38 f4 02 c0       	push   0xc002f438
c0011810:	e8 43 7c 01 00       	call   c0029458 <LinkedList<UnixFile>::removeFirst()>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001181c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011820:	74 40                	je     c0011862 <UnixFile::~UnixFile()+0x92>
c0011822:	83 ec 08             	sub    esp,0x8
c0011825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011829:	68 38 f4 02 c0       	push   0xc002f438
c001182e:	e8 49 7b 01 00       	call   c002937c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183a:	8d 50 01             	lea    edx,[eax+0x1]
c001183d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011841:	3d 88 13 00 00       	cmp    eax,0x1388
c0011846:	0f 94 c0             	sete   al
c0011849:	84 c0                	test   al,al
c001184b:	74 a7                	je     c00117f4 <UnixFile::~UnixFile()+0x24>
c001184d:	83 ec 0c             	sub    esp,0xc
c0011850:	68 4c b2 02 c0       	push   0xc002b24c
c0011855:	e8 77 90 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	eb 95                	jmp    c00117f4 <UnixFile::~UnixFile()+0x24>
c001185f:	90                   	nop
c0011860:	eb 01                	jmp    c0011863 <UnixFile::~UnixFile()+0x93>
c0011862:	90                   	nop
c0011863:	90                   	nop
c0011864:	83 c4 1c             	add    esp,0x1c
c0011867:	c3                   	ret    

c0011868 <UnixFile::~UnixFile()>:
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011872:	e8 59 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	83 ec 08             	sub    esp,0x8
c001187d:	6a 0c                	push   0xc
c001187f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011883:	e8 cf 14 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	83 c4 0c             	add    esp,0xc
c001188e:	c3                   	ret    
c001188f:	90                   	nop

c0011890 <ReservedFilename::~ReservedFilename()>:
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c0011898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189c:	89 10                	mov    DWORD PTR [eax],edx
c001189e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	50                   	push   eax
c00118a6:	e8 25 ff ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	90                   	nop
c00118af:	83 c4 0c             	add    esp,0xc
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <ReservedFilename::~ReservedFilename()>:
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	e8 cd ff ff ff       	call   c0011890 <ReservedFilename::~ReservedFilename()>
c00118c3:	83 c4 10             	add    esp,0x10
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	6a 0c                	push   0xc
c00118cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cf:	e8 83 14 00 00       	call   c0012d57 <operator delete(void*, unsigned long)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	83 c4 0c             	add    esp,0xc
c00118da:	c3                   	ret    

c00118db <getFromFileDescriptor(int)>:
c00118db:	53                   	push   ebx
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118e3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118e9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ef:	7f 2c                	jg     c001191d <getFromFileDescriptor(int)+0x42>
c00118f1:	83 ec 0c             	sub    esp,0xc
c00118f4:	68 38 f4 02 c0       	push   0xc002f438
c00118f9:	e8 52 7b 01 00       	call   c0029450 <LinkedList<UnixFile>::getFirstElement()>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	85 c0                	test   eax,eax
c0011903:	75 04                	jne    c0011909 <getFromFileDescriptor(int)+0x2e>
c0011905:	31 c0                	xor    eax,eax
c0011907:	eb 6e                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011909:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001190c:	74 69                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001190e:	52                   	push   edx
c001190f:	52                   	push   edx
c0011910:	50                   	push   eax
c0011911:	68 38 f4 02 c0       	push   0xc002f438
c0011916:	e8 df 7b 01 00       	call   c00294fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c001191b:	eb e1                	jmp    c00118fe <getFromFileDescriptor(int)+0x23>
c001191d:	a1 2c f4 02 c0       	mov    eax,ds:0xc002f42c
c0011922:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011928:	74 4d                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c001192a:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c001192f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011935:	74 40                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011937:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c001193c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011942:	74 33                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011944:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0011949:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001194f:	74 26                	je     c0011977 <getFromFileDescriptor(int)+0x9c>
c0011951:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011957:	83 f8 08             	cmp    eax,0x8
c001195a:	77 09                	ja     c0011965 <getFromFileDescriptor(int)+0x8a>
c001195c:	8b 04 85 00 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c00]
c0011963:	eb 12                	jmp    c0011977 <getFromFileDescriptor(int)+0x9c>
c0011965:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001196b:	83 fb 08             	cmp    ebx,0x8
c001196e:	77 95                	ja     c0011905 <getFromFileDescriptor(int)+0x2a>
c0011970:	8b 04 9d c0 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0c40]
c0011977:	83 c4 08             	add    esp,0x8
c001197a:	5b                   	pop    ebx
c001197b:	c3                   	ret    

c001197c <__static_initialization_and_destruction_0(int, int)>:
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011984:	75 34                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011986:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001198e:	75 2a                	jne    c00119ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	68 38 f4 02 c0       	push   0xc002f438
c0011998:	e8 87 79 01 00       	call   c0029324 <LinkedList<UnixFile>::LinkedList()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	83 ec 04             	sub    esp,0x4
c00119a3:	68 dc e1 02 c0       	push   0xc002e1dc
c00119a8:	68 38 f4 02 c0       	push   0xc002f438
c00119ad:	68 22 93 02 c0       	push   0xc0029322
c00119b2:	e8 1a 13 00 00       	call   c0012cd1 <__cxa_atexit>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	90                   	nop
c00119bb:	83 c4 0c             	add    esp,0xc
c00119be:	c3                   	ret    

c00119bf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	83 ec 08             	sub    esp,0x8
c00119c5:	68 ff ff 00 00       	push   0xffff
c00119ca:	6a 01                	push   0x1
c00119cc:	e8 ab ff ff ff       	call   c001197c <__static_initialization_and_destruction_0(int, int)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 c4 0c             	add    esp,0xc
c00119d7:	c3                   	ret    

c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119d8:	53                   	push   ebx
c00119d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119e1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119e7:	89 c8                	mov    eax,ecx
c00119e9:	d1 e8                	shr    eax,1
c00119eb:	03 05 68 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e268
c00119f1:	83 e1 01             	and    ecx,0x1
c00119f4:	8a 10                	mov    dl,BYTE PTR [eax]
c00119f6:	75 09                	jne    c0011a01 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119f8:	83 e2 f0             	and    edx,0xfffffff0
c00119fb:	09 da                	or     edx,ebx
c00119fd:	88 10                	mov    BYTE PTR [eax],dl
c00119ff:	5b                   	pop    ebx
c0011a00:	c3                   	ret    
c0011a01:	c1 e3 04             	shl    ebx,0x4
c0011a04:	83 e2 0f             	and    edx,0xf
c0011a07:	09 da                	or     edx,ebx
c0011a09:	88 10                	mov    BYTE PTR [eax],dl
c0011a0b:	5b                   	pop    ebx
c0011a0c:	c3                   	ret    

c0011a0d <Virt::getPageState(unsigned long)>:
c0011a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a11:	8b 0d 68 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e268
c0011a17:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a1d:	89 d0                	mov    eax,edx
c0011a1f:	d1 e8                	shr    eax,1
c0011a21:	83 e2 01             	and    edx,0x1
c0011a24:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a27:	75 04                	jne    c0011a2d <Virt::getPageState(unsigned long)+0x20>
c0011a29:	83 e0 0f             	and    eax,0xf
c0011a2c:	c3                   	ret    
c0011a2d:	c0 e8 04             	shr    al,0x4
c0011a30:	c3                   	ret    

c0011a31 <Virt::allocateKernelVirtualPages(int)>:
c0011a31:	55                   	push   ebp
c0011a32:	31 ed                	xor    ebp,ebp
c0011a34:	57                   	push   edi
c0011a35:	56                   	push   esi
c0011a36:	53                   	push   ebx
c0011a37:	31 db                	xor    ebx,ebx
c0011a39:	83 ec 1c             	sub    esp,0x1c
c0011a3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a40:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c0011a46:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a4b:	57                   	push   edi
c0011a4c:	e8 bc ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a51:	5a                   	pop    edx
c0011a52:	84 c0                	test   al,al
c0011a54:	75 3a                	jne    c0011a90 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a56:	85 db                	test   ebx,ebx
c0011a58:	75 02                	jne    c0011a5c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a5a:	89 fd                	mov    ebp,edi
c0011a5c:	43                   	inc    ebx
c0011a5d:	39 f3                	cmp    ebx,esi
c0011a5f:	74 5a                	je     c0011abb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a61:	47                   	inc    edi
c0011a62:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a68:	76 31                	jbe    c0011a9b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a6a:	c7 05 64 e2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e264,0xc8000
c0011a74:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a79:	75 28                	jne    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a7b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a80:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a85:	57                   	push   edi
c0011a86:	e8 82 ff ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011a8b:	5a                   	pop    edx
c0011a8c:	84 c0                	test   al,al
c0011a8e:	74 c6                	je     c0011a56 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a90:	31 db                	xor    ebx,ebx
c0011a92:	47                   	inc    edi
c0011a93:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a99:	77 cf                	ja     c0011a6a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a9b:	89 3d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edi
c0011aa1:	eb a8                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 a4 b2 02 c0       	push   0xc002b2a4
c0011aab:	e8 21 8e 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011ab0:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	eb 90                	jmp    c0011a4b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011abb:	89 2d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,ebp
c0011ac1:	4b                   	dec    ebx
c0011ac2:	74 5f                	je     c0011b23 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ac4:	85 f6                	test   esi,esi
c0011ac6:	74 3d                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ac8:	89 e8                	mov    eax,ebp
c0011aca:	31 db                	xor    ebx,ebx
c0011acc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011acf:	eb 14                	jmp    c0011ae5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ad1:	6a 01                	push   0x1
c0011ad3:	43                   	inc    ebx
c0011ad4:	50                   	push   eax
c0011ad5:	e8 fe fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ada:	58                   	pop    eax
c0011adb:	39 f3                	cmp    ebx,esi
c0011add:	5a                   	pop    edx
c0011ade:	74 25                	je     c0011b05 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ae0:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c0011ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0011ae8:	85 db                	test   ebx,ebx
c0011aea:	89 15 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edx
c0011af0:	74 20                	je     c0011b12 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011af2:	39 df                	cmp    edi,ebx
c0011af4:	75 db                	jne    c0011ad1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011af6:	6a 03                	push   0x3
c0011af8:	43                   	inc    ebx
c0011af9:	50                   	push   eax
c0011afa:	e8 d9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aff:	59                   	pop    ecx
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	58                   	pop    eax
c0011b03:	75 db                	jne    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	89 e8                	mov    eax,ebp
c0011b0a:	5b                   	pop    ebx
c0011b0b:	c1 e0 0c             	shl    eax,0xc
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	5d                   	pop    ebp
c0011b11:	c3                   	ret    
c0011b12:	6a 02                	push   0x2
c0011b14:	bb 01 00 00 00       	mov    ebx,0x1
c0011b19:	50                   	push   eax
c0011b1a:	e8 b9 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b1f:	58                   	pop    eax
c0011b20:	5a                   	pop    edx
c0011b21:	eb bd                	jmp    c0011ae0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b23:	6a 04                	push   0x4
c0011b25:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b28:	55                   	push   ebp
c0011b29:	a3 64 e2 02 c0       	mov    ds:0xc002e264,eax
c0011b2e:	e8 a5 fe ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b33:	59                   	pop    ecx
c0011b34:	89 e8                	mov    eax,ebp
c0011b36:	5b                   	pop    ebx
c0011b37:	c1 e0 0c             	shl    eax,0xc
c0011b3a:	83 c4 1c             	add    esp,0x1c
c0011b3d:	5b                   	pop    ebx
c0011b3e:	5e                   	pop    esi
c0011b3f:	5f                   	pop    edi
c0011b40:	5d                   	pop    ebp
c0011b41:	c3                   	ret    

c0011b42 <Virt::freeSwapfilePage(unsigned long)>:
c0011b42:	53                   	push   ebx
c0011b43:	8b 15 4c f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f44c
c0011b49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b4d:	b8 01 00 00 00       	mov    eax,0x1
c0011b52:	89 cb                	mov    ebx,ecx
c0011b54:	d3 e0                	shl    eax,cl
c0011b56:	c1 eb 05             	shr    ebx,0x5
c0011b59:	f7 d0                	not    eax
c0011b5b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b5e:	5b                   	pop    ebx
c0011b5f:	c3                   	ret    

c0011b60 <Virt::swapIDToSector(unsigned long)>:
c0011b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b64:	0f af 05 6c e2 02 c0 	imul   eax,DWORD PTR ds:0xc002e26c
c0011b6b:	03 05 74 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e274
c0011b71:	c3                   	ret    

c0011b72 <Virt::allocateSwapfilePage()>:
c0011b72:	55                   	push   ebp
c0011b73:	31 d2                	xor    edx,edx
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c0011b81:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011b86:	f7 f1                	div    ecx
c0011b88:	39 0d 70 e2 02 c0    	cmp    DWORD PTR ds:0xc002e270,ecx
c0011b8e:	72 2d                	jb     c0011bbd <Virt::allocateSwapfilePage()+0x4b>
c0011b90:	8b 35 4c f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f44c
c0011b96:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b98:	f6 c2 01             	test   dl,0x1
c0011b9b:	74 3c                	je     c0011bd9 <Virt::allocateSwapfilePage()+0x67>
c0011b9d:	31 c9                	xor    ecx,ecx
c0011b9f:	bf 01 00 00 00       	mov    edi,0x1
c0011ba4:	eb 12                	jmp    c0011bb8 <Virt::allocateSwapfilePage()+0x46>
c0011ba6:	89 fd                	mov    ebp,edi
c0011ba8:	89 ca                	mov    edx,ecx
c0011baa:	d3 e5                	shl    ebp,cl
c0011bac:	c1 ea 05             	shr    edx,0x5
c0011baf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bb4:	85 ea                	test   edx,ebp
c0011bb6:	74 2a                	je     c0011be2 <Virt::allocateSwapfilePage()+0x70>
c0011bb8:	41                   	inc    ecx
c0011bb9:	39 c8                	cmp    eax,ecx
c0011bbb:	77 e9                	ja     c0011ba6 <Virt::allocateSwapfilePage()+0x34>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 2b b4 02 c0       	push   0xc002b42b
c0011bc5:	e8 07 8d 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	31 c9                	xor    ecx,ecx
c0011bcf:	83 c4 0c             	add    esp,0xc
c0011bd2:	89 c8                	mov    eax,ecx
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	5f                   	pop    edi
c0011bd7:	5d                   	pop    ebp
c0011bd8:	c3                   	ret    
c0011bd9:	89 f3                	mov    ebx,esi
c0011bdb:	bd 01 00 00 00       	mov    ebp,0x1
c0011be0:	31 c9                	xor    ecx,ecx
c0011be2:	09 ea                	or     edx,ebp
c0011be4:	89 c8                	mov    eax,ecx
c0011be6:	89 13                	mov    DWORD PTR [ebx],edx
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	5b                   	pop    ebx
c0011bec:	5e                   	pop    esi
c0011bed:	5f                   	pop    edi
c0011bee:	5d                   	pop    ebp
c0011bef:	c3                   	ret    

c0011bf0 <Virt::virtualMemorySetup()>:
c0011bf0:	53                   	push   ebx
c0011bf1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bf6:	83 ec 08             	sub    esp,0x8
c0011bf9:	6a 0f                	push   0xf
c0011bfb:	53                   	push   ebx
c0011bfc:	43                   	inc    ebx
c0011bfd:	e8 d6 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c02:	59                   	pop    ecx
c0011c03:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c09:	58                   	pop    eax
c0011c0a:	75 ed                	jne    c0011bf9 <Virt::virtualMemorySetup()+0x9>
c0011c0c:	83 ec 08             	sub    esp,0x8
c0011c0f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c14:	68 00 00 00 c8       	push   0xc8000000
c0011c19:	68 42 b4 02 c0       	push   0xc002b442
c0011c1e:	e8 14 12 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c23:	58                   	pop    eax
c0011c24:	5a                   	pop    edx
c0011c25:	68 00 f0 ff ef       	push   0xeffff000
c0011c2a:	68 56 b4 02 c0       	push   0xc002b456
c0011c2f:	e8 03 12 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c34:	83 c4 10             	add    esp,0x10
c0011c37:	83 ec 08             	sub    esp,0x8
c0011c3a:	6a 00                	push   0x0
c0011c3c:	53                   	push   ebx
c0011c3d:	43                   	inc    ebx
c0011c3e:	e8 95 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4c:	75 e9                	jne    c0011c37 <Virt::virtualMemorySetup()+0x47>
c0011c4e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c53:	83 ec 08             	sub    esp,0x8
c0011c56:	6a 0f                	push   0xf
c0011c58:	53                   	push   ebx
c0011c59:	43                   	inc    ebx
c0011c5a:	e8 79 fd ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c5f:	83 c4 10             	add    esp,0x10
c0011c62:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c68:	75 e9                	jne    c0011c53 <Virt::virtualMemorySetup()+0x63>
c0011c6a:	83 c4 08             	add    esp,0x8
c0011c6d:	5b                   	pop    ebx
c0011c6e:	c3                   	ret    

c0011c6f <Virt::swappingSetup()>:
c0011c6f:	c3                   	ret    

c0011c70 <Virt::setupPageSwapping(int)>:
c0011c70:	57                   	push   edi
c0011c71:	56                   	push   esi
c0011c72:	53                   	push   ebx
c0011c73:	83 ec 1c             	sub    esp,0x1c
c0011c76:	68 6a b4 02 c0       	push   0xc002b46a
c0011c7b:	e8 b7 11 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011c80:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c87:	e8 00 dc ff ff       	call   c000f88c <malloc>
c0011c8c:	83 c4 0c             	add    esp,0xc
c0011c8f:	89 c6                	mov    esi,eax
c0011c91:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c0011c97:	68 7e b4 02 c0       	push   0xc002b47e
c0011c9c:	50                   	push   eax
c0011c9d:	e8 f4 16 00 00       	call   c0013396 <File::File(char const*, Process*)>
c0011ca2:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ca5:	e8 c8 18 00 00       	call   c0013572 <File::unlink()>
c0011caa:	59                   	pop    ecx
c0011cab:	5b                   	pop    ebx
c0011cac:	6a 12                	push   0x12
c0011cae:	56                   	push   esi
c0011caf:	e8 46 17 00 00       	call   c00133fa <File::open(FileOpenMode)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 c0                	test   eax,eax
c0011cb9:	0f 85 5b 01 00 00    	jne    c0011e1a <Virt::setupPageSwapping(int)+0x1aa>
c0011cbf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ccb:	c1 e3 08             	shl    ebx,0x8
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 00 00 01 00       	push   0x10000
c0011cd6:	e8 b1 db ff ff       	call   c000f88c <malloc>
c0011cdb:	83 c4 0c             	add    esp,0xc
c0011cde:	89 c7                	mov    edi,eax
c0011ce0:	68 00 00 01 00       	push   0x10000
c0011ce5:	68 ee 00 00 00       	push   0xee
c0011cea:	50                   	push   eax
c0011ceb:	e8 60 ea fe ff       	call   c0000750 <memset>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	85 db                	test   ebx,ebx
c0011cf5:	79 03                	jns    c0011cfa <Virt::setupPageSwapping(int)+0x8a>
c0011cf7:	83 c3 0f             	add    ebx,0xf
c0011cfa:	c1 fb 04             	sar    ebx,0x4
c0011cfd:	4b                   	dec    ebx
c0011cfe:	83 fb ff             	cmp    ebx,0xffffffff
c0011d01:	74 4f                	je     c0011d52 <Virt::setupPageSwapping(int)+0xe2>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d08:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d0c:	52                   	push   edx
c0011d0d:	57                   	push   edi
c0011d0e:	6a 00                	push   0x0
c0011d10:	68 00 00 01 00       	push   0x10000
c0011d15:	56                   	push   esi
c0011d16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d19:	83 c4 20             	add    esp,0x20
c0011d1c:	85 c0                	test   eax,eax
c0011d1e:	0f 85 e0 00 00 00    	jne    c0011e04 <Virt::setupPageSwapping(int)+0x194>
c0011d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d28:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d2d:	74 ce                	je     c0011cfd <Virt::setupPageSwapping(int)+0x8d>
c0011d2f:	83 ec 08             	sub    esp,0x8
c0011d32:	4b                   	dec    ebx
c0011d33:	50                   	push   eax
c0011d34:	68 d1 b4 02 c0       	push   0xc002b4d1
c0011d39:	e8 f9 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011d3e:	c7 04 24 da b4 02 c0 	mov    DWORD PTR [esp],0xc002b4da
c0011d45:	e8 87 8b 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011d4a:	83 c4 10             	add    esp,0x10
c0011d4d:	83 fb ff             	cmp    ebx,0xffffffff
c0011d50:	75 b1                	jne    c0011d03 <Virt::setupPageSwapping(int)+0x93>
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	56                   	push   esi
c0011d56:	e8 fd 16 00 00       	call   c0013458 <File::close()>
c0011d5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d5e:	e8 49 db ff ff       	call   c000f8ac <rfree>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	85 f6                	test   esi,esi
c0011d68:	74 0c                	je     c0011d76 <Virt::setupPageSwapping(int)+0x106>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d6f:	56                   	push   esi
c0011d70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	83 ec 08             	sub    esp,0x8
c0011d79:	a1 e8 f8 02 c0       	mov    eax,ds:0xc002f8e8
c0011d7e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d84:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d86:	68 7e b4 02 c0       	push   0xc002b47e
c0011d8b:	50                   	push   eax
c0011d8c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d93:	c6 05 78 e2 02 c0 43 	mov    BYTE PTR ds:0xc002e278,0x43
c0011d9a:	c1 e2 0b             	shl    edx,0xb
c0011d9d:	a3 74 e2 02 c0       	mov    ds:0xc002e274,eax
c0011da2:	89 15 70 e2 02 c0    	mov    DWORD PTR ds:0xc002e270,edx
c0011da8:	c7 05 6c e2 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e26c,0x8
c0011db2:	c1 ea 08             	shr    edx,0x8
c0011db5:	89 14 24             	mov    DWORD PTR [esp],edx
c0011db8:	e8 cf da ff ff       	call   c000f88c <malloc>
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	89 c1                	mov    ecx,eax
c0011dc2:	a3 4c f4 02 c0       	mov    ds:0xc002f44c,eax
c0011dc7:	31 d2                	xor    edx,edx
c0011dc9:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011dce:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011dd4:	c1 e8 05             	shr    eax,0x5
c0011dd7:	50                   	push   eax
c0011dd8:	6a 00                	push   0x0
c0011dda:	51                   	push   ecx
c0011ddb:	e8 70 e9 fe ff       	call   c0000750 <memset>
c0011de0:	58                   	pop    eax
c0011de1:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011de6:	5a                   	pop    edx
c0011de7:	31 d2                	xor    edx,edx
c0011de9:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011def:	c1 e8 05             	shr    eax,0x5
c0011df2:	50                   	push   eax
c0011df3:	68 e0 b4 02 c0       	push   0xc002b4e0
c0011df8:	e8 3a 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011dfd:	83 c4 20             	add    esp,0x20
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	c3                   	ret    
c0011e04:	83 ec 08             	sub    esp,0x8
c0011e07:	50                   	push   eax
c0011e08:	68 b9 b4 02 c0       	push   0xc002b4b9
c0011e0d:	e8 25 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	e9 0a ff ff ff       	jmp    c0011d24 <Virt::setupPageSwapping(int)+0xb4>
c0011e1a:	83 ec 08             	sub    esp,0x8
c0011e1d:	50                   	push   eax
c0011e1e:	68 95 b4 02 c0       	push   0xc002b495
c0011e23:	e8 0f 10 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0011e28:	c7 04 24 9e b4 02 c0 	mov    DWORD PTR [esp],0xc002b49e
c0011e2f:	e8 9d 8a 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	e9 83 fe ff ff       	jmp    c0011cbf <Virt::setupPageSwapping(int)+0x4f>

c0011e3c <VAS::VAS()>:
c0011e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e56:	a3 50 f4 02 c0       	mov    ds:0xc002f450,eax
c0011e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e67:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e75:	90                   	nop
c0011e76:	c3                   	ret    
c0011e77:	90                   	nop

c0011e78 <VAS::VAS(VAS*)>:
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e91:	83 ec 0c             	sub    esp,0xc
c0011e94:	68 c4 b2 02 c0       	push   0xc002b2c4
c0011e99:	e8 33 8a 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	90                   	nop
c0011ea2:	83 c4 0c             	add    esp,0xc
c0011ea5:	c3                   	ret    

c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eaa:	89 c2                	mov    edx,eax
c0011eac:	c1 e8 0a             	shr    eax,0xa
c0011eaf:	c1 ea 16             	shr    edx,0x16
c0011eb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011eb7:	19 c9                	sbb    ecx,ecx
c0011eb9:	c1 e2 0c             	shl    edx,0xc
c0011ebc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ec2:	25 fc 0f 00 00       	and    eax,0xffc
c0011ec7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ece:	01 d0                	add    eax,edx
c0011ed0:	c3                   	ret    
c0011ed1:	90                   	nop

c0011ed2 <VAS::getPageTableEntry(unsigned long)>:
c0011ed2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ed6:	89 ca                	mov    edx,ecx
c0011ed8:	c1 e9 0a             	shr    ecx,0xa
c0011edb:	c1 ea 16             	shr    edx,0x16
c0011ede:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ee4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eea:	c1 e0 0c             	shl    eax,0xc
c0011eed:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ef0:	c3                   	ret    

c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ef1:	57                   	push   edi
c0011ef2:	56                   	push   esi
c0011ef3:	be 01 00 00 00       	mov    esi,0x1
c0011ef8:	53                   	push   ebx
c0011ef9:	83 ec 10             	sub    esp,0x10
c0011efc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f00:	c1 eb 0c             	shr    ebx,0xc
c0011f03:	eb 3f                	jmp    c0011f44 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f05:	83 ec 08             	sub    esp,0x8
c0011f08:	57                   	push   edi
c0011f09:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0011f0f:	e8 be ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f1d:	f6 c4 04             	test   ah,0x4
c0011f20:	75 5f                	jne    c0011f81 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f22:	80 fa 04             	cmp    dl,0x4
c0011f25:	74 78                	je     c0011f9f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f27:	80 fa 02             	cmp    dl,0x2
c0011f2a:	0f 84 88 00 00 00    	je     c0011fb8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f30:	80 fa 03             	cmp    dl,0x3
c0011f33:	0f 84 ad 00 00 00    	je     c0011fe6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f39:	fe ca                	dec    dl
c0011f3b:	0f 84 92 00 00 00    	je     c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f41:	43                   	inc    ebx
c0011f42:	31 f6                	xor    esi,esi
c0011f44:	53                   	push   ebx
c0011f45:	89 df                	mov    edi,ebx
c0011f47:	e8 c1 fa ff ff       	call   c0011a0d <Virt::getPageState(unsigned long)>
c0011f4c:	c1 e7 0c             	shl    edi,0xc
c0011f4f:	59                   	pop    ecx
c0011f50:	84 c0                	test   al,al
c0011f52:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f56:	75 ad                	jne    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	68 fb b4 02 c0       	push   0xc002b4fb
c0011f60:	e8 6c 89 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011f65:	58                   	pop    eax
c0011f66:	5a                   	pop    edx
c0011f67:	57                   	push   edi
c0011f68:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0011f6e:	e8 5f ff ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f78:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f7c:	f6 c4 04             	test   ah,0x4
c0011f7f:	74 c0                	je     c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f81:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	50                   	push   eax
c0011f8e:	e8 db de ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c0011f93:	83 c4 10             	add    esp,0x10
c0011f96:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f9a:	80 fa 04             	cmp    dl,0x4
c0011f9d:	75 88                	jne    c0011f27 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f9f:	89 f0                	mov    eax,esi
c0011fa1:	84 c0                	test   al,al
c0011fa3:	75 47                	jne    c0011fec <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fa5:	c7 44 24 20 e8 b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b2e8
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	5b                   	pop    ebx
c0011fb1:	5e                   	pop    esi
c0011fb2:	5f                   	pop    edi
c0011fb3:	e9 19 89 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c0011fb8:	89 f0                	mov    eax,esi
c0011fba:	84 c0                	test   al,al
c0011fbc:	75 15                	jne    c0011fd3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	68 17 b5 02 c0       	push   0xc002b517
c0011fc6:	e8 06 89 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	e9 6e ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fd3:	83 ec 08             	sub    esp,0x8
c0011fd6:	6a 00                	push   0x0
c0011fd8:	53                   	push   ebx
c0011fd9:	e8 fa f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	e9 5b ff ff ff       	jmp    c0011f41 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe6:	89 f0                	mov    eax,esi
c0011fe8:	84 c0                	test   al,al
c0011fea:	75 15                	jne    c0012001 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fec:	83 ec 08             	sub    esp,0x8
c0011fef:	6a 00                	push   0x0
c0011ff1:	53                   	push   ebx
c0011ff2:	e8 e1 f9 ff ff       	call   c00119d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	5b                   	pop    ebx
c0011ffe:	5e                   	pop    esi
c0011fff:	5f                   	pop    edi
c0012000:	c3                   	ret    
c0012001:	c7 44 24 20 33 b5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b533
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	5b                   	pop    ebx
c001200d:	5e                   	pop    esi
c001200e:	5f                   	pop    edi
c001200f:	e9 bd 88 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>

c0012014 <VAS::freeAllocatedPages(unsigned long)>:
c0012014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001201c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012020:	74 09                	je     c001202b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012022:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012026:	e9 c6 fe ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001202b:	c7 44 24 04 0c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b30c
c0012033:	e9 ff 0d 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>

c0012038 <VAS::virtualToPhysical(unsigned long)>:
c0012038:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001203c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012040:	e8 8d fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012045:	5a                   	pop    edx
c0012046:	8b 00                	mov    eax,DWORD PTR [eax]
c0012048:	59                   	pop    ecx
c0012049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001204e:	c3                   	ret    
c001204f:	90                   	nop

c0012050 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012050:	55                   	push   ebp
c0012051:	57                   	push   edi
c0012052:	56                   	push   esi
c0012053:	53                   	push   ebx
c0012054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012058:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001205c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012060:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012064:	85 db                	test   ebx,ebx
c0012066:	7e 22                	jle    c001208a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012068:	c1 e3 0c             	shl    ebx,0xc
c001206b:	01 f3                	add    ebx,esi
c001206d:	56                   	push   esi
c001206e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012074:	55                   	push   ebp
c0012075:	e8 58 fe ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001207a:	5a                   	pop    edx
c001207b:	59                   	pop    ecx
c001207c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001207e:	21 f9                	and    ecx,edi
c0012080:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012084:	39 f3                	cmp    ebx,esi
c0012086:	89 08                	mov    DWORD PTR [eax],ecx
c0012088:	75 e3                	jne    c001206d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	5d                   	pop    ebp
c001208e:	c3                   	ret    
c001208f:	90                   	nop

c0012090 <VAS::setToWriteCombining(unsigned long, int)>:
c0012090:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001209b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120a2:	75 01                	jne    c00120a5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120a4:	c3                   	ret    
c00120a5:	68 80 00 00 00       	push   0x80
c00120aa:	6a ff                	push   0xffffffff
c00120ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b8:	e8 93 ff ff ff       	call   c0012050 <VAS::reflagRange(unsigned long, int, int, int)>
c00120bd:	83 c4 14             	add    esp,0x14
c00120c0:	c3                   	ret    
c00120c1:	90                   	nop

c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120d5:	19 c0                	sbb    eax,eax
c00120d7:	83 ca 03             	or     edx,0x3
c00120da:	83 e0 fc             	and    eax,0xfffffffc
c00120dd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120e4:	0f 20 d8             	mov    eax,cr3
c00120e7:	0f 22 d8             	mov    cr3,eax
c00120ea:	c3                   	ret    
c00120eb:	90                   	nop

c00120ec <VAS::~VAS()>:
c00120ec:	83 ec 2c             	sub    esp,0x2c
c00120ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120f7:	fa                   	cli    
c00120f8:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c00120fd:	40                   	inc    eax
c00120fe:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012103:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001210d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012113:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012117:	6a 01                	push   0x1
c0012119:	50                   	push   eax
c001211a:	e8 a3 ff ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001211f:	83 c4 0c             	add    esp,0xc
c0012122:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001212a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012132:	0f 8f d4 00 00 00    	jg     c001220c <VAS::~VAS()+0x120>
c0012138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001213f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012143:	c1 e2 02             	shl    edx,0x2
c0012146:	01 d0                	add    eax,edx
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001214e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012152:	83 e0 01             	and    eax,0x1
c0012155:	0f 84 a8 00 00 00    	je     c0012203 <VAS::~VAS()+0x117>
c001215b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012163:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001216b:	7f 72                	jg     c00121df <VAS::~VAS()+0xf3>
c001216d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012171:	c1 e0 0a             	shl    eax,0xa
c0012174:	89 c2                	mov    edx,eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	01 d0                	add    eax,edx
c001217c:	c1 e0 0c             	shl    eax,0xc
c001217f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012183:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012188:	8b 00                	mov    eax,DWORD PTR [eax]
c001218a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001218d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012193:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012197:	6a 01                	push   0x1
c0012199:	50                   	push   eax
c001219a:	e8 07 fd ff ff       	call   c0011ea6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001219f:	83 c4 0c             	add    esp,0xc
c00121a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b4:	25 01 04 00 00       	and    eax,0x401
c00121b9:	3d 01 04 00 00       	cmp    eax,0x401
c00121be:	75 19                	jne    c00121d9 <VAS::~VAS()+0xed>
c00121c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	50                   	push   eax
c00121cd:	e8 9c dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121d2:	83 c4 10             	add    esp,0x10
c00121d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121dd:	eb 84                	jmp    c0012163 <VAS::~VAS()+0x77>
c00121df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e3:	25 00 04 00 00       	and    eax,0x400
c00121e8:	74 19                	je     c0012203 <VAS::~VAS()+0x117>
c00121ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f3:	83 ec 0c             	sub    esp,0xc
c00121f6:	50                   	push   eax
c00121f7:	e8 72 dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c00121fc:	83 c4 10             	add    esp,0x10
c00121ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012203:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012207:	e9 1e ff ff ff       	jmp    c001212a <VAS::~VAS()+0x3e>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	50                   	push   eax
c0012217:	e8 d5 fc ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012223:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012226:	83 ec 0c             	sub    esp,0xc
c0012229:	50                   	push   eax
c001222a:	e8 3f dc ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001223a:	c1 e0 02             	shl    eax,0x2
c001223d:	83 ec 08             	sub    esp,0x8
c0012240:	50                   	push   eax
c0012241:	68 30 b3 02 c0       	push   0xc002b330
c0012246:	e8 ec 0b 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012253:	48                   	dec    eax
c0012254:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012259:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001225e:	85 c0                	test   eax,eax
c0012260:	75 01                	jne    c0012263 <VAS::~VAS()+0x177>
c0012262:	fb                   	sti    
c0012263:	90                   	nop
c0012264:	83 c4 2c             	add    esp,0x2c
c0012267:	c3                   	ret    

c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012268:	55                   	push   ebp
c0012269:	57                   	push   edi
c001226a:	56                   	push   esi
c001226b:	53                   	push   ebx
c001226c:	83 ec 1c             	sub    esp,0x1c
c001226f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012273:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012277:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001227d:	77 08                	ja     c0012287 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001227f:	0f 20 d8             	mov    eax,cr3
c0012282:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012285:	75 47                	jne    c00122ce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001228b:	09 d8                	or     eax,ebx
c001228d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012292:	75 57                	jne    c00122eb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012294:	89 de                	mov    esi,ebx
c0012296:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012299:	c1 ee 16             	shr    esi,0x16
c001229c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122a3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122a7:	74 54                	je     c00122fd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122b3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122b7:	c1 e6 0c             	shl    esi,0xc
c00122ba:	c1 eb 0a             	shr    ebx,0xa
c00122bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122c3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122c6:	83 c4 1c             	add    esp,0x1c
c00122c9:	5b                   	pop    ebx
c00122ca:	5e                   	pop    esi
c00122cb:	5f                   	pop    edi
c00122cc:	5d                   	pop    ebp
c00122cd:	c3                   	ret    
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	68 50 b3 02 c0       	push   0xc002b350
c00122d6:	e8 5c 0b 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122e2:	09 d8                	or     eax,ebx
c00122e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00122e9:	74 a9                	je     c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	68 b8 b3 02 c0       	push   0xc002b3b8
c00122f3:	e8 d9 85 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	eb 97                	jmp    c0012294 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012301:	e8 f2 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	89 c5                	mov    ebp,eax
c001230b:	8b 0d 50 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f450
c0012311:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012315:	6a 01                	push   0x1
c0012317:	e8 15 f7 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001231c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012323:	6a 01                	push   0x1
c0012325:	50                   	push   eax
c0012326:	55                   	push   ebp
c0012327:	81 cd 07 04 00 00    	or     ebp,0x407
c001232d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012331:	51                   	push   ecx
c0012332:	e8 27 02 00 00       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012337:	83 c4 1c             	add    esp,0x1c
c001233a:	68 00 10 00 00       	push   0x1000
c001233f:	6a 00                	push   0x0
c0012341:	50                   	push   eax
c0012342:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012346:	e8 05 e4 fe ff       	call   c0000750 <memset>
c001234b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001234f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012352:	e8 9a fb ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001235b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012364:	e9 40 ff ff ff       	jmp    c00122a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012369:	90                   	nop

c001236a <VAS::allocatePages(int, int)>:
c001236a:	55                   	push   ebp
c001236b:	57                   	push   edi
c001236c:	56                   	push   esi
c001236d:	53                   	push   ebx
c001236e:	83 ec 1c             	sub    esp,0x1c
c0012371:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012375:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001237a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012380:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012386:	83 e0 01             	and    eax,0x1
c0012389:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001238d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012391:	0f 85 cc 00 00 00    	jne    c0012463 <VAS::allocatePages(int, int)+0xf9>
c0012397:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001239a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001239e:	85 c0                	test   eax,eax
c00123a0:	0f 84 a1 00 00 00    	je     c0012447 <VAS::allocatePages(int, int)+0xdd>
c00123a6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ae:	c1 e6 0c             	shl    esi,0xc
c00123b1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123b5:	85 c0                	test   eax,eax
c00123b7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123ba:	7e 33                	jle    c00123ef <VAS::allocatePages(int, int)+0x85>
c00123bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c4:	81 cd 00 04 00 00    	or     ebp,0x400
c00123ca:	e8 29 db ff ff       	call   c000fef8 <Phys::allocatePage()>
c00123cf:	55                   	push   ebp
c00123d0:	53                   	push   ebx
c00123d1:	50                   	push   eax
c00123d2:	57                   	push   edi
c00123d3:	e8 90 fe ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123e0:	74 03                	je     c00123e5 <VAS::allocatePages(int, int)+0x7b>
c00123e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123eb:	39 de                	cmp    esi,ebx
c00123ed:	75 db                	jne    c00123ca <VAS::allocatePages(int, int)+0x60>
c00123ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123f4:	75 12                	jne    c0012408 <VAS::allocatePages(int, int)+0x9e>
c00123f6:	0f 20 d8             	mov    eax,cr3
c00123f9:	0f 22 d8             	mov    cr3,eax
c00123fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012400:	83 c4 1c             	add    esp,0x1c
c0012403:	5b                   	pop    ebx
c0012404:	5e                   	pop    esi
c0012405:	5f                   	pop    edi
c0012406:	5d                   	pop    ebp
c0012407:	c3                   	ret    
c0012408:	c1 ee 0a             	shr    esi,0xa
c001240b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001240f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012415:	c1 eb 0a             	shr    ebx,0xa
c0012418:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001241e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012424:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001242a:	39 c3                	cmp    ebx,eax
c001242c:	77 ce                	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c001242e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012431:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012437:	39 d8                	cmp    eax,ebx
c0012439:	73 f3                	jae    c001242e <VAS::allocatePages(int, int)+0xc4>
c001243b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001243f:	83 c4 1c             	add    esp,0x1c
c0012442:	5b                   	pop    ebx
c0012443:	5e                   	pop    esi
c0012444:	5f                   	pop    edi
c0012445:	5d                   	pop    ebp
c0012446:	c3                   	ret    
c0012447:	83 ec 0c             	sub    esp,0xc
c001244a:	68 dc b3 02 c0       	push   0xc002b3dc
c001244f:	e8 7d 84 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0012454:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	e9 43 ff ff ff       	jmp    c00123a6 <VAS::allocatePages(int, int)+0x3c>
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001246a:	e8 c2 f5 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001246f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001247b:	0f 87 9b 00 00 00    	ja     c001251c <VAS::allocatePages(int, int)+0x1b2>
c0012481:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012485:	85 d2                	test   edx,edx
c0012487:	7e 3c                	jle    c00124c5 <VAS::allocatePages(int, int)+0x15b>
c0012489:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001248d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012491:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012495:	c1 e5 0c             	shl    ebp,0xc
c0012498:	81 ce 00 04 00 00    	or     esi,0x400
c001249e:	01 dd                	add    ebp,ebx
c00124a0:	e8 53 da ff ff       	call   c000fef8 <Phys::allocatePage()>
c00124a5:	56                   	push   esi
c00124a6:	53                   	push   ebx
c00124a7:	50                   	push   eax
c00124a8:	57                   	push   edi
c00124a9:	e8 ba fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124b6:	74 03                	je     c00124bb <VAS::allocatePages(int, int)+0x151>
c00124b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124c1:	39 dd                	cmp    ebp,ebx
c00124c3:	75 db                	jne    c00124a0 <VAS::allocatePages(int, int)+0x136>
c00124c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ca:	0f 84 26 ff ff ff    	je     c00123f6 <VAS::allocatePages(int, int)+0x8c>
c00124d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124d8:	89 d3                	mov    ebx,edx
c00124da:	c1 e0 0c             	shl    eax,0xc
c00124dd:	c1 eb 0a             	shr    ebx,0xa
c00124e0:	01 d0                	add    eax,edx
c00124e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124e8:	c1 e8 0a             	shr    eax,0xa
c00124eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124f6:	2d 00 00 40 00       	sub    eax,0x400000
c00124fb:	39 c3                	cmp    ebx,eax
c00124fd:	0f 87 f9 fe ff ff    	ja     c00123fc <VAS::allocatePages(int, int)+0x92>
c0012503:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012506:	81 c3 00 10 00 00    	add    ebx,0x1000
c001250c:	39 d8                	cmp    eax,ebx
c001250e:	73 f3                	jae    c0012503 <VAS::allocatePages(int, int)+0x199>
c0012510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012514:	83 c4 1c             	add    esp,0x1c
c0012517:	5b                   	pop    ebx
c0012518:	5e                   	pop    esi
c0012519:	5f                   	pop    edi
c001251a:	5d                   	pop    ebp
c001251b:	c3                   	ret    
c001251c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012521:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012527:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001252e:	0f 84 4d ff ff ff    	je     c0012481 <VAS::allocatePages(int, int)+0x117>
c0012534:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001253c:	e9 40 ff ff ff       	jmp    c0012481 <VAS::allocatePages(int, int)+0x117>
c0012541:	90                   	nop

c0012542 <VAS::setCPUSpecific(unsigned long)>:
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	6a 05                	push   0x5
c0012547:	68 00 00 40 c2       	push   0xc2400000
c001254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012554:	e8 0f fd ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012559:	83 c4 1c             	add    esp,0x1c
c001255c:	c3                   	ret    
c001255d:	90                   	nop

c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001255e:	55                   	push   ebp
c001255f:	57                   	push   edi
c0012560:	56                   	push   esi
c0012561:	53                   	push   ebx
c0012562:	83 ec 1c             	sub    esp,0x1c
c0012565:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001256a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001256e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012574:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012578:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001257e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012582:	83 e0 01             	and    eax,0x1
c0012585:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012589:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001258d:	85 c0                	test   eax,eax
c001258f:	7e 39                	jle    c00125ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012591:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012595:	89 f3                	mov    ebx,esi
c0012597:	c1 e0 0c             	shl    eax,0xc
c001259a:	01 f0                	add    eax,esi
c001259c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125a0:	55                   	push   ebp
c00125a1:	53                   	push   ebx
c00125a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a6:	29 f0                	sub    eax,esi
c00125a8:	01 d8                	add    eax,ebx
c00125aa:	50                   	push   eax
c00125ab:	57                   	push   edi
c00125ac:	e8 b7 fc ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b9:	74 03                	je     c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125c8:	75 d6                	jne    c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125cf:	75 10                	jne    c00125e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125d1:	0f 20 d8             	mov    eax,cr3
c00125d4:	0f 22 d8             	mov    cr3,eax
c00125d7:	83 c4 1c             	add    esp,0x1c
c00125da:	89 f0                	mov    eax,esi
c00125dc:	5b                   	pop    ebx
c00125dd:	5e                   	pop    esi
c00125de:	5f                   	pop    edi
c00125df:	5d                   	pop    ebp
c00125e0:	c3                   	ret    
c00125e1:	89 f3                	mov    ebx,esi
c00125e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e7:	c1 eb 0a             	shr    ebx,0xa
c00125ea:	c1 e0 0c             	shl    eax,0xc
c00125ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f3:	01 f0                	add    eax,esi
c00125f5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fb:	c1 e8 0a             	shr    eax,0xa
c00125fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012603:	2d 00 00 40 00       	sub    eax,0x400000
c0012608:	39 c3                	cmp    ebx,eax
c001260a:	77 cb                	ja     c00125d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001260c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012615:	39 d8                	cmp    eax,ebx
c0012617:	73 f3                	jae    c001260c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012619:	83 c4 1c             	add    esp,0x1c
c001261c:	89 f0                	mov    eax,esi
c001261e:	5b                   	pop    ebx
c001261f:	5e                   	pop    esi
c0012620:	5f                   	pop    edi
c0012621:	5d                   	pop    ebp
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001262f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012633:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012637:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001263b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012640:	75 4a                	jne    c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012646:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012649:	c1 eb 16             	shr    ebx,0x16
c001264c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012653:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012657:	74 4d                	je     c00126a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001265d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012661:	c1 e8 0a             	shr    eax,0xa
c0012664:	80 fa 01             	cmp    dl,0x1
c0012667:	19 d2                	sbb    edx,edx
c0012669:	c1 e3 0c             	shl    ebx,0xc
c001266c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012670:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012676:	25 fc 0f 00 00       	and    eax,0xffc
c001267b:	01 d8                	add    eax,ebx
c001267d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012684:	83 c4 1c             	add    esp,0x1c
c0012687:	5b                   	pop    ebx
c0012688:	5e                   	pop    esi
c0012689:	5f                   	pop    edi
c001268a:	5d                   	pop    ebp
c001268b:	c3                   	ret    
c001268c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012690:	83 ec 0c             	sub    esp,0xc
c0012693:	68 08 b4 02 c0       	push   0xc002b408
c0012698:	e8 34 82 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a4:	eb 9c                	jmp    c0012642 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126aa:	e8 49 d8 ff ff       	call   c000fef8 <Phys::allocatePage()>
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	89 c5                	mov    ebp,eax
c00126b4:	8b 0d 50 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f450
c00126ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126be:	6a 01                	push   0x1
c00126c0:	e8 6c f3 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c00126c5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126cc:	6a 01                	push   0x1
c00126ce:	50                   	push   eax
c00126cf:	55                   	push   ebp
c00126d0:	81 cd 07 04 00 00    	or     ebp,0x407
c00126d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126da:	51                   	push   ecx
c00126db:	e8 7e fe ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e0:	83 c4 1c             	add    esp,0x1c
c00126e3:	68 00 10 00 00       	push   0x1000
c00126e8:	6a 00                	push   0x0
c00126ea:	50                   	push   eax
c00126eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ef:	e8 5c e0 fe ff       	call   c0000750 <memset>
c00126f4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126fb:	e8 f1 f7 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012700:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001270d:	e9 47 ff ff ff       	jmp    c0012659 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012712 <VAS::VAS(bool)>:
c0012712:	53                   	push   ebx
c0012713:	83 ec 28             	sub    esp,0x28
c0012716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001271e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012722:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012729:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012734:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012738:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001273c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001273f:	e8 b4 d7 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012744:	89 c2                	mov    edx,eax
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001274d:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0012753:	83 ec 0c             	sub    esp,0xc
c0012756:	6a 01                	push   0x1
c0012758:	e8 d4 f2 ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	89 c2                	mov    edx,eax
c0012762:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012766:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012769:	83 ec 0c             	sub    esp,0xc
c001276c:	6a 03                	push   0x3
c001276e:	6a 01                	push   0x1
c0012770:	52                   	push   edx
c0012771:	50                   	push   eax
c0012772:	53                   	push   ebx
c0012773:	e8 e6 fd ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012778:	83 c4 20             	add    esp,0x20
c001277b:	89 c2                	mov    edx,eax
c001277d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012781:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012784:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001278c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012794:	7f 1c                	jg     c00127b2 <VAS::VAS(bool)+0xa0>
c0012796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001279d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127a1:	c1 e2 02             	shl    edx,0x2
c00127a4:	01 d0                	add    eax,edx
c00127a6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127b0:	eb da                	jmp    c001278c <VAS::VAS(bool)+0x7a>
c00127b2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127ba:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127c2:	7f 7a                	jg     c001283e <VAS::VAS(bool)+0x12c>
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 00 02 00 00       	sub    eax,0x200
c00127cd:	c1 e0 0c             	shl    eax,0xc
c00127d0:	83 c8 03             	or     eax,0x3
c00127d3:	89 c2                	mov    edx,eax
c00127d5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00127da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127e6:	83 e0 10             	and    eax,0x10
c00127e9:	84 c0                	test   al,al
c00127eb:	74 07                	je     c00127f4 <VAS::VAS(bool)+0xe2>
c00127ed:	b8 00 01 00 00       	mov    eax,0x100
c00127f2:	eb 05                	jmp    c00127f9 <VAS::VAS(bool)+0xe7>
c00127f4:	b8 00 00 00 00       	mov    eax,0x0
c00127f9:	09 d0                	or     eax,edx
c00127fb:	89 c1                	mov    ecx,eax
c00127fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012801:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012808:	c1 e2 02             	shl    edx,0x2
c001280b:	01 d0                	add    eax,edx
c001280d:	89 ca                	mov    edx,ecx
c001280f:	89 10                	mov    DWORD PTR [eax],edx
c0012811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012815:	2d 40 03 00 00       	sub    eax,0x340
c001281a:	83 f8 7f             	cmp    eax,0x7f
c001281d:	77 16                	ja     c0012835 <VAS::VAS(bool)+0x123>
c001281f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012823:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001282a:	c1 e2 02             	shl    edx,0x2
c001282d:	01 d0                	add    eax,edx
c001282f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012835:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012839:	e9 7c ff ff ff       	jmp    c00127ba <VAS::VAS(bool)+0xa8>
c001283e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012849:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001284f:	83 e0 10             	and    eax,0x10
c0012852:	84 c0                	test   al,al
c0012854:	74 07                	je     c001285d <VAS::VAS(bool)+0x14b>
c0012856:	b8 03 41 00 00       	mov    eax,0x4103
c001285b:	eb 05                	jmp    c0012862 <VAS::VAS(bool)+0x150>
c001285d:	b8 03 40 00 00       	mov    eax,0x4003
c0012862:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012866:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012869:	81 c2 20 0c 00 00    	add    edx,0xc20
c001286f:	89 02                	mov    DWORD PTR [edx],eax
c0012871:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012882:	83 ec 08             	sub    esp,0x8
c0012885:	50                   	push   eax
c0012886:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001288a:	e8 b3 fc ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012896:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012899:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128aa:	83 e0 10             	and    eax,0x10
c00128ad:	84 c0                	test   al,al
c00128af:	74 07                	je     c00128b8 <VAS::VAS(bool)+0x1a6>
c00128b1:	b8 00 01 00 00       	mov    eax,0x100
c00128b6:	eb 05                	jmp    c00128bd <VAS::VAS(bool)+0x1ab>
c00128b8:	b8 00 00 00 00       	mov    eax,0x0
c00128bd:	09 c2                	or     edx,eax
c00128bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c6:	05 fc 0f 00 00       	add    eax,0xffc
c00128cb:	83 ca 03             	or     edx,0x3
c00128ce:	89 10                	mov    DWORD PTR [eax],edx
c00128d0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00128d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	50                   	push   eax
c00128df:	e8 60 1c 00 00       	call   c0014544 <Device::getName()>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	83 ec 08             	sub    esp,0x8
c00128ea:	68 4d b5 02 c0       	push   0xc002b54d
c00128ef:	50                   	push   eax
c00128f0:	e8 a3 df fe ff       	call   c0000898 <strcmp>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	85 c0                	test   eax,eax
c00128fa:	0f 94 c0             	sete   al
c00128fd:	84 c0                	test   al,al
c00128ff:	0f 84 87 00 00 00    	je     c001298c <VAS::VAS(bool)+0x27a>
c0012905:	fa                   	cli    
c0012906:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001290b:	40                   	inc    eax
c001290c:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012911:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012916:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001291c:	05 7c 09 00 00       	add    eax,0x97c
c0012921:	83 ec 0c             	sub    esp,0xc
c0012924:	50                   	push   eax
c0012925:	e8 e4 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012932:	89 c3                	mov    ebx,eax
c0012934:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012939:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001293f:	05 7c 09 00 00       	add    eax,0x97c
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	50                   	push   eax
c0012948:	e8 c1 c9 ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	50                   	push   eax
c0012954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012958:	e8 75 f5 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	8b 00                	mov    eax,DWORD PTR [eax]
c0012962:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012967:	6a 11                	push   0x11
c0012969:	53                   	push   ebx
c001296a:	50                   	push   eax
c001296b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001296f:	e8 f4 f8 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001297c:	48                   	dec    eax
c001297d:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012982:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012987:	85 c0                	test   eax,eax
c0012989:	75 01                	jne    c001298c <VAS::VAS(bool)+0x27a>
c001298b:	fb                   	sti    
c001298c:	90                   	nop
c001298d:	83 c4 28             	add    esp,0x28
c0012990:	5b                   	pop    ebx
c0012991:	c3                   	ret    

c0012992 <VAS::evict(unsigned long)>:
c0012992:	55                   	push   ebp
c0012993:	57                   	push   edi
c0012994:	56                   	push   esi
c0012995:	53                   	push   ebx
c0012996:	83 ec 1c             	sub    esp,0x1c
c0012999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129a5:	e8 c8 f1 ff ff       	call   c0011b72 <Virt::allocateSwapfilePage()>
c00129aa:	89 c7                	mov    edi,eax
c00129ac:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c00129b1:	85 c0                	test   eax,eax
c00129b3:	7e 3d                	jle    c00129f2 <VAS::evict(unsigned long)+0x60>
c00129b5:	89 ee                	mov    esi,ebp
c00129b7:	31 db                	xor    ebx,ebx
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	57                   	push   edi
c00129bd:	e8 9e f1 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c00129c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00129c5:	01 d8                	add    eax,ebx
c00129c7:	6a 01                	push   0x1
c00129c9:	31 d2                	xor    edx,edx
c00129cb:	43                   	inc    ebx
c00129cc:	52                   	push   edx
c00129cd:	81 c6 00 02 00 00    	add    esi,0x200
c00129d3:	50                   	push   eax
c00129d4:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c00129db:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c00129e2:	e8 33 3e 00 00       	call   c001681a <LogicalDisk::write(unsigned long long, int, void*)>
c00129e7:	83 c4 20             	add    esp,0x20
c00129ea:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c00129f0:	7f c7                	jg     c00129b9 <VAS::evict(unsigned long)+0x27>
c00129f2:	83 ec 08             	sub    esp,0x8
c00129f5:	c1 e7 0b             	shl    edi,0xb
c00129f8:	55                   	push   ebp
c00129f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129fd:	e8 d0 f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a02:	83 c4 0c             	add    esp,0xc
c0012a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a07:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a0d:	09 d7                	or     edi,edx
c0012a0f:	89 38                	mov    DWORD PTR [eax],edi
c0012a11:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0012a16:	40                   	inc    eax
c0012a17:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c0012a1c:	0f 20 da             	mov    edx,cr3
c0012a1f:	0f 22 da             	mov    cr3,edx
c0012a22:	50                   	push   eax
c0012a23:	55                   	push   ebp
c0012a24:	68 5b b5 02 c0       	push   0xc002b55b
c0012a29:	e8 09 04 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012a2e:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0012a33:	c7 44 24 40 70 b5 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b570
c0012a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0012a3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a42:	89 15 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,edx
c0012a48:	83 c4 2c             	add    esp,0x2c
c0012a4b:	5b                   	pop    ebx
c0012a4c:	5e                   	pop    esi
c0012a4d:	5f                   	pop    edi
c0012a4e:	5d                   	pop    ebp
c0012a4f:	e9 e3 03 00 00       	jmp    c0012e37 <Dbg::kprintf(char const*, ...)>

c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a54:	55                   	push   ebp
c0012a55:	57                   	push   edi
c0012a56:	56                   	push   esi
c0012a57:	53                   	push   ebx
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a5f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a65:	0f 84 dc 00 00 00    	je     c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a6b:	56                   	push   esi
c0012a6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a70:	e8 5d f4 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012a75:	5b                   	pop    ebx
c0012a76:	85 c0                	test   eax,eax
c0012a78:	5f                   	pop    edi
c0012a79:	89 c3                	mov    ebx,eax
c0012a7b:	0f 84 c6 00 00 00    	je     c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a81:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a83:	31 c0                	xor    eax,eax
c0012a85:	89 fa                	mov    edx,edi
c0012a87:	81 e2 01 04 00 00    	and    edx,0x401
c0012a8d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a93:	0f 85 b0 00 00 00    	jne    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012a99:	e8 5a d4 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012a9e:	c1 ef 0b             	shr    edi,0xb
c0012aa1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012aa3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012aa9:	09 c2                	or     edx,eax
c0012aab:	81 ca 01 08 00 00    	or     edx,0x801
c0012ab1:	89 13                	mov    DWORD PTR [ebx],edx
c0012ab3:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c0012ab9:	85 c9                	test   ecx,ecx
c0012abb:	7e 3d                	jle    c0012afa <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012abd:	89 f5                	mov    ebp,esi
c0012abf:	31 db                	xor    ebx,ebx
c0012ac1:	83 ec 0c             	sub    esp,0xc
c0012ac4:	57                   	push   edi
c0012ac5:	e8 96 f0 ff ff       	call   c0011b60 <Virt::swapIDToSector(unsigned long)>
c0012aca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012acd:	01 d8                	add    eax,ebx
c0012acf:	6a 01                	push   0x1
c0012ad1:	31 d2                	xor    edx,edx
c0012ad3:	43                   	inc    ebx
c0012ad4:	52                   	push   edx
c0012ad5:	81 c5 00 02 00 00    	add    ebp,0x200
c0012adb:	50                   	push   eax
c0012adc:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c0012ae3:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c0012aea:	e8 bf 3c 00 00       	call   c00167ae <LogicalDisk::read(unsigned long long, int, void*)>
c0012aef:	83 c4 20             	add    esp,0x20
c0012af2:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c0012af8:	7f c7                	jg     c0012ac1 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012afa:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0012aff:	48                   	dec    eax
c0012b00:	52                   	push   edx
c0012b01:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c0012b06:	50                   	push   eax
c0012b07:	56                   	push   esi
c0012b08:	68 81 b5 02 c0       	push   0xc002b581
c0012b0d:	e8 25 03 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012b12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b15:	e8 28 f0 ff ff       	call   c0011b42 <Virt::freeSwapfilePage(unsigned long)>
c0012b1a:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	48                   	dec    eax
c0012b23:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012b28:	85 c0                	test   eax,eax
c0012b2a:	75 01                	jne    c0012b2d <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b2c:	fb                   	sti    
c0012b2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b31:	25 ff 0f 00 00       	and    eax,0xfff
c0012b36:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b3b:	77 14                	ja     c0012b51 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b3d:	0f 20 d8             	mov    eax,cr3
c0012b40:	0f 22 d8             	mov    cr3,eax
c0012b43:	b0 01                	mov    al,0x1
c0012b45:	eb 02                	jmp    c0012b49 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b47:	31 c0                	xor    eax,eax
c0012b49:	83 c4 0c             	add    esp,0xc
c0012b4c:	5b                   	pop    ebx
c0012b4d:	5e                   	pop    esi
c0012b4e:	5f                   	pop    edi
c0012b4f:	5d                   	pop    ebp
c0012b50:	c3                   	ret    
c0012b51:	83 ec 0c             	sub    esp,0xc
c0012b54:	68 96 b5 02 c0       	push   0xc002b596
c0012b59:	e8 d9 02 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	eb da                	jmp    c0012b3d <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b63:	90                   	nop

c0012b64 <VAS::scanForEviction()>:
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b6b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b6e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b74:	75 0e                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012b76:	89 da                	mov    edx,ebx
c0012b78:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b7b:	c1 ea 16             	shr    edx,0x16
c0012b7e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b82:	74 48                	je     c0012bcc <VAS::scanForEviction()+0x68>
c0012b84:	53                   	push   ebx
c0012b85:	56                   	push   esi
c0012b86:	e8 47 f3 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c0012b8b:	5a                   	pop    edx
c0012b8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b8e:	59                   	pop    ecx
c0012b8f:	89 fa                	mov    edx,edi
c0012b91:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b97:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b9d:	74 3d                	je     c0012bdc <VAS::scanForEviction()+0x78>
c0012b9f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ba5:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bab:	76 2a                	jbe    c0012bd7 <VAS::scanForEviction()+0x73>
c0012bad:	31 db                	xor    ebx,ebx
c0012baf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bb6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bbc:	75 c6                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012bbe:	89 da                	mov    edx,ebx
c0012bc0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bc3:	c1 ea 16             	shr    edx,0x16
c0012bc6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bca:	75 b8                	jne    c0012b84 <VAS::scanForEviction()+0x20>
c0012bcc:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bd2:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bd5:	eb 97                	jmp    c0012b6e <VAS::scanForEviction()+0xa>
c0012bd7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bda:	eb 92                	jmp    c0012b6e <VAS::scanForEviction()+0xa>
c0012bdc:	f7 c7 01 00 00 00    	test   edi,0x1
c0012be2:	74 bb                	je     c0012b9f <VAS::scanForEviction()+0x3b>
c0012be4:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bea:	74 0a                	je     c0012bf6 <VAS::scanForEviction()+0x92>
c0012bec:	83 e7 df             	and    edi,0xffffffdf
c0012bef:	89 38                	mov    DWORD PTR [eax],edi
c0012bf1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bf4:	eb a9                	jmp    c0012b9f <VAS::scanForEviction()+0x3b>
c0012bf6:	83 ec 08             	sub    esp,0x8
c0012bf9:	53                   	push   ebx
c0012bfa:	56                   	push   esi
c0012bfb:	e8 92 fd ff ff       	call   c0012992 <VAS::evict(unsigned long)>
c0012c00:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	89 f8                	mov    eax,edi
c0012c0c:	5b                   	pop    ebx
c0012c0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c12:	5e                   	pop    esi
c0012c13:	5f                   	pop    edi
c0012c14:	c3                   	ret    

c0012c15 <mapVASFirstTime>:
c0012c15:	55                   	push   ebp
c0012c16:	57                   	push   edi
c0012c17:	56                   	push   esi
c0012c18:	53                   	push   ebx
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c21:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c24:	4a                   	dec    edx
c0012c25:	0f 84 8e 00 00 00    	je     c0012cb9 <mapVASFirstTime+0xa4>
c0012c2b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c2e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c31:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c36:	c1 e5 15             	shl    ebp,0x15
c0012c39:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c3e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c44:	29 eb                	sub    ebx,ebp
c0012c46:	29 ee                	sub    esi,ebp
c0012c48:	e8 ab d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012c4d:	83 ec 0c             	sub    esp,0xc
c0012c50:	68 03 04 00 00       	push   0x403
c0012c55:	6a 01                	push   0x1
c0012c57:	53                   	push   ebx
c0012c58:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c5e:	50                   	push   eax
c0012c5f:	57                   	push   edi
c0012c60:	e8 f9 f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c65:	83 c4 20             	add    esp,0x20
c0012c68:	39 f3                	cmp    ebx,esi
c0012c6a:	75 dc                	jne    c0012c48 <mapVASFirstTime+0x33>
c0012c6c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c71:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c76:	29 ee                	sub    esi,ebp
c0012c78:	29 e8                	sub    eax,ebp
c0012c7a:	89 c5                	mov    ebp,eax
c0012c7c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c80:	19 db                	sbb    ebx,ebx
c0012c82:	e8 71 d2 ff ff       	call   c000fef8 <Phys::allocatePage()>
c0012c87:	83 e3 04             	and    ebx,0x4
c0012c8a:	83 ec 0c             	sub    esp,0xc
c0012c8d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c93:	53                   	push   ebx
c0012c94:	6a 01                	push   0x1
c0012c96:	56                   	push   esi
c0012c97:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c9d:	50                   	push   eax
c0012c9e:	57                   	push   edi
c0012c9f:	e8 ba f8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ca4:	83 c4 20             	add    esp,0x20
c0012ca7:	39 f5                	cmp    ebp,esi
c0012ca9:	75 d1                	jne    c0012c7c <mapVASFirstTime+0x67>
c0012cab:	0f 20 d8             	mov    eax,cr3
c0012cae:	0f 22 d8             	mov    cr3,eax
c0012cb1:	83 c4 0c             	add    esp,0xc
c0012cb4:	5b                   	pop    ebx
c0012cb5:	5e                   	pop    esi
c0012cb6:	5f                   	pop    edi
c0012cb7:	5d                   	pop    ebp
c0012cb8:	c3                   	ret    
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	68 a6 b5 02 c0       	push   0xc002b5a6
c0012cc1:	e8 71 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	83 c4 0c             	add    esp,0xc
c0012ccc:	5b                   	pop    ebx
c0012ccd:	5e                   	pop    esi
c0012cce:	5f                   	pop    edi
c0012ccf:	5d                   	pop    ebp
c0012cd0:	c3                   	ret    

c0012cd1 <__cxa_atexit>:
c0012cd1:	31 c0                	xor    eax,eax
c0012cd3:	c3                   	ret    

c0012cd4 <__cxa_finalize>:
c0012cd4:	c3                   	ret    

c0012cd5 <__stack_chk_fail>:
c0012cd5:	55                   	push   ebp
c0012cd6:	89 e5                	mov    ebp,esp
c0012cd8:	83 ec 14             	sub    esp,0x14
c0012cdb:	68 bf b5 02 c0       	push   0xc002b5bf
c0012ce0:	e8 52 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012ce5:	58                   	pop    eax
c0012ce6:	5a                   	pop    edx
c0012ce7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cea:	68 0f b6 02 c0       	push   0xc002b60f
c0012cef:	e8 43 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012cf4:	59                   	pop    ecx
c0012cf5:	58                   	pop    eax
c0012cf6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cf9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cfc:	68 0f b6 02 c0       	push   0xc002b60f
c0012d01:	e8 31 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d06:	5a                   	pop    edx
c0012d07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d0a:	59                   	pop    ecx
c0012d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d0d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d10:	68 0f b6 02 c0       	push   0xc002b60f
c0012d15:	e8 1d 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d1a:	5a                   	pop    edx
c0012d1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d1e:	59                   	pop    ecx
c0012d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d23:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d26:	68 0f b6 02 c0       	push   0xc002b60f
c0012d2b:	e8 07 01 00 00       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0012d30:	c7 04 24 17 b6 02 c0 	mov    DWORD PTR [esp],0xc002b617
c0012d37:	e8 95 7b 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	c9                   	leave  
c0012d40:	c3                   	ret    

c0012d41 <__cxa_pure_virtual>:
c0012d41:	83 ec 18             	sub    esp,0x18
c0012d44:	68 2f b6 02 c0       	push   0xc002b62f
c0012d49:	e8 83 7b 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0012d4e:	83 c4 1c             	add    esp,0x1c
c0012d51:	c3                   	ret    

c0012d52 <operator new[](unsigned long)>:
c0012d52:	e9 35 cb ff ff       	jmp    c000f88c <malloc>

c0012d57 <operator delete(void*, unsigned long)>:
c0012d57:	e9 50 cb ff ff       	jmp    c000f8ac <rfree>

c0012d5c <operator delete[](void*)>:
c0012d5c:	e9 4b cb ff ff       	jmp    c000f8ac <rfree>

c0012d61 <operator delete[](void*, unsigned long)>:
c0012d61:	e9 46 cb ff ff       	jmp    c000f8ac <rfree>

c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d66:	57                   	push   edi
c0012d67:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d6c:	56                   	push   esi
c0012d6d:	be 44 b6 02 c0       	mov    esi,0xc002b644
c0012d72:	53                   	push   ebx
c0012d73:	83 ec 40             	sub    esp,0x40
c0012d76:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d7a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d7e:	fc                   	cld    
c0012d7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d81:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d85:	83 f9 3e             	cmp    ecx,0x3e
c0012d88:	7e 05                	jle    c0012d8f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d8a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d8f:	89 df                	mov    edi,ebx
c0012d91:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d95:	eb 02                	jmp    c0012d99 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d97:	89 c7                	mov    edi,eax
c0012d99:	31 d2                	xor    edx,edx
c0012d9b:	46                   	inc    esi
c0012d9c:	89 f8                	mov    eax,edi
c0012d9e:	f7 f1                	div    ecx
c0012da0:	39 cf                	cmp    edi,ecx
c0012da2:	73 f3                	jae    c0012d97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012da4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012da7:	eb 02                	jmp    c0012dab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012da9:	89 c3                	mov    ebx,eax
c0012dab:	31 d2                	xor    edx,edx
c0012dad:	4e                   	dec    esi
c0012dae:	89 d8                	mov    eax,ebx
c0012db0:	f7 f1                	div    ecx
c0012db2:	39 cb                	cmp    ebx,ecx
c0012db4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012db8:	88 16                	mov    BYTE PTR [esi],dl
c0012dba:	73 ed                	jae    c0012da9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dbc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dc0:	83 c4 40             	add    esp,0x40
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	c3                   	ret    

c0012dc7 <Dbg::logc(char)>:
c0012dc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dcb:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dd0:	ec                   	in     al,dx
c0012dd1:	a8 20                	test   al,0x20
c0012dd3:	74 fb                	je     c0012dd0 <Dbg::logc(char)+0x9>
c0012dd5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012dda:	88 c8                	mov    al,cl
c0012ddc:	ee                   	out    dx,al
c0012ddd:	c3                   	ret    

c0012dde <Dbg::logs(char*)>:
c0012dde:	53                   	push   ebx
c0012ddf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012de3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012de6:	84 c0                	test   al,al
c0012de8:	74 0f                	je     c0012df9 <Dbg::logs(char*)+0x1b>
c0012dea:	50                   	push   eax
c0012deb:	43                   	inc    ebx
c0012dec:	e8 d6 ff ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012df1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df4:	5a                   	pop    edx
c0012df5:	84 c0                	test   al,al
c0012df7:	75 f1                	jne    c0012dea <Dbg::logs(char*)+0xc>
c0012df9:	5b                   	pop    ebx
c0012dfa:	c3                   	ret    

c0012dfb <Dbg::logWriteInt(unsigned int)>:
c0012dfb:	83 ec 10             	sub    esp,0x10
c0012dfe:	6a 0a                	push   0xa
c0012e00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e04:	50                   	push   eax
c0012e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e09:	e8 58 ff ff ff       	call   c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e0e:	50                   	push   eax
c0012e0f:	e8 ca ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e14:	83 c4 20             	add    esp,0x20
c0012e17:	c3                   	ret    

c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e18:	83 ec 10             	sub    esp,0x10
c0012e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e23:	50                   	push   eax
c0012e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e28:	e8 39 ff ff ff       	call   c0012d66 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e2d:	50                   	push   eax
c0012e2e:	e8 ab ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e33:	83 c4 20             	add    esp,0x20
c0012e36:	c3                   	ret    

c0012e37 <Dbg::kprintf(char const*, ...)>:
c0012e37:	55                   	push   ebp
c0012e38:	57                   	push   edi
c0012e39:	56                   	push   esi
c0012e3a:	53                   	push   ebx
c0012e3b:	83 ec 0c             	sub    esp,0xc
c0012e3e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e4a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e4d:	84 c0                	test   al,al
c0012e4f:	74 4a                	je     c0012e9b <Dbg::kprintf(char const*, ...)+0x64>
c0012e51:	31 db                	xor    ebx,ebx
c0012e53:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e56:	3c 25                	cmp    al,0x25
c0012e58:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e5b:	0f 85 e4 00 00 00    	jne    c0012f45 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e61:	83 c3 02             	add    ebx,0x2
c0012e64:	8a 07                	mov    al,BYTE PTR [edi]
c0012e66:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e69:	83 e8 25             	sub    eax,0x25
c0012e6c:	3c 53                	cmp    al,0x53
c0012e6e:	0f 87 ba 00 00 00    	ja     c0012f2e <Dbg::kprintf(char const*, ...)+0xf7>
c0012e74:	0f b6 c0             	movzx  eax,al
c0012e77:	ff 24 85 84 b6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd497c]
c0012e7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e82:	89 c8                	mov    eax,ecx
c0012e84:	83 c1 04             	add    ecx,0x4
c0012e87:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e8b:	ff 30                	push   DWORD PTR [eax]
c0012e8d:	e8 4c ff ff ff       	call   c0012dde <Dbg::logs(char*)>
c0012e92:	58                   	pop    eax
c0012e93:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e97:	84 c0                	test   al,al
c0012e99:	75 b8                	jne    c0012e53 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e9b:	83 c4 0c             	add    esp,0xc
c0012e9e:	5b                   	pop    ebx
c0012e9f:	5e                   	pop    esi
c0012ea0:	5f                   	pop    edi
c0012ea1:	5d                   	pop    ebp
c0012ea2:	c3                   	ret    
c0012ea3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ea7:	89 d0                	mov    eax,edx
c0012ea9:	83 c2 04             	add    edx,0x4
c0012eac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eb0:	ff 30                	push   DWORD PTR [eax]
c0012eb2:	e8 44 ff ff ff       	call   c0012dfb <Dbg::logWriteInt(unsigned int)>
c0012eb7:	58                   	pop    eax
c0012eb8:	eb d9                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ebe:	89 d0                	mov    eax,edx
c0012ec0:	83 c2 04             	add    edx,0x4
c0012ec3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ec6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eca:	50                   	push   eax
c0012ecb:	e8 f7 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012ed0:	58                   	pop    eax
c0012ed1:	eb c0                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ed7:	89 c8                	mov    eax,ecx
c0012ed9:	83 c1 04             	add    ecx,0x4
c0012edc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ee0:	ff 30                	push   DWORD PTR [eax]
c0012ee2:	e8 14 ff ff ff       	call   c0012dfb <Dbg::logWriteInt(unsigned int)>
c0012ee7:	5f                   	pop    edi
c0012ee8:	eb a9                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eee:	89 c8                	mov    eax,ecx
c0012ef0:	83 c1 04             	add    ecx,0x4
c0012ef3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef7:	6a 10                	push   0x10
c0012ef9:	ff 30                	push   DWORD PTR [eax]
c0012efb:	e8 18 ff ff ff       	call   c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f00:	59                   	pop    ecx
c0012f01:	5f                   	pop    edi
c0012f02:	eb 8f                	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f08:	89 d0                	mov    eax,edx
c0012f0a:	83 c2 08             	add    edx,0x8
c0012f0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f11:	6a 10                	push   0x10
c0012f13:	ff 30                	push   DWORD PTR [eax]
c0012f15:	e8 fe fe ff ff       	call   c0012e18 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f1a:	58                   	pop    eax
c0012f1b:	5a                   	pop    edx
c0012f1c:	e9 72 ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f21:	6a 25                	push   0x25
c0012f23:	e8 9f fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f28:	58                   	pop    eax
c0012f29:	e9 65 ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2e:	6a 25                	push   0x25
c0012f30:	e8 92 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f38:	50                   	push   eax
c0012f39:	e8 89 fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f3e:	5a                   	pop    edx
c0012f3f:	59                   	pop    ecx
c0012f40:	e9 4e ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f45:	50                   	push   eax
c0012f46:	89 eb                	mov    ebx,ebp
c0012f48:	e8 7a fe ff ff       	call   c0012dc7 <Dbg::logc(char)>
c0012f4d:	89 fd                	mov    ebp,edi
c0012f4f:	58                   	pop    eax
c0012f50:	e9 3e ff ff ff       	jmp    c0012e93 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f55:	90                   	nop

c0012f56 <File::read(unsigned long long, void*, int*)>:
c0012f56:	53                   	push   ebx
c0012f57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f5f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f66:	3c 19                	cmp    al,0x19
c0012f68:	77 35                	ja     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f6a:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0012f71:	85 c0                	test   eax,eax
c0012f73:	74 2a                	je     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f7b:	85 c0                	test   eax,eax
c0012f7d:	74 20                	je     c0012f9f <File::read(unsigned long long, void*, int*)+0x49>
c0012f7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f83:	74 21                	je     c0012fa6 <File::read(unsigned long long, void*, int*)+0x50>
c0012f85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f8b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f99:	5b                   	pop    ebx
c0012f9a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f9d:	ff e0                	jmp    eax
c0012f9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012fa4:	eb 05                	jmp    c0012fab <File::read(unsigned long long, void*, int*)+0x55>
c0012fa6:	b8 05 00 00 00       	mov    eax,0x5
c0012fab:	5b                   	pop    ebx
c0012fac:	c3                   	ret    
c0012fad:	90                   	nop

c0012fae <File::write(unsigned long long, void*, int*)>:
c0012fae:	53                   	push   ebx
c0012faf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fb7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fbe:	3c 19                	cmp    al,0x19
c0012fc0:	77 35                	ja     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fc2:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0012fc9:	85 c0                	test   eax,eax
c0012fcb:	74 2a                	je     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fcd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fd3:	85 c0                	test   eax,eax
c0012fd5:	74 20                	je     c0012ff7 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fdb:	74 21                	je     c0012ffe <File::write(unsigned long long, void*, int*)+0x50>
c0012fdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fe3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff1:	5b                   	pop    ebx
c0012ff2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ff5:	ff e0                	jmp    eax
c0012ff7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffc:	eb 05                	jmp    c0013003 <File::write(unsigned long long, void*, int*)+0x55>
c0012ffe:	b8 05 00 00 00       	mov    eax,0x5
c0013003:	5b                   	pop    ebx
c0013004:	c3                   	ret    
c0013005:	90                   	nop

c0013006 <Directory::read(unsigned long long, void*, int*)>:
c0013006:	53                   	push   ebx
c0013007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001300b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001300f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013016:	3c 19                	cmp    al,0x19
c0013018:	77 35                	ja     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c001301a:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0013021:	85 c0                	test   eax,eax
c0013023:	74 2a                	je     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c0013025:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001302b:	85 c0                	test   eax,eax
c001302d:	74 20                	je     c001304f <Directory::read(unsigned long long, void*, int*)+0x49>
c001302f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013033:	74 21                	je     c0013056 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013035:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013037:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001303b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013049:	5b                   	pop    ebx
c001304a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001304d:	ff e0                	jmp    eax
c001304f:	b8 0b 00 00 00       	mov    eax,0xb
c0013054:	eb 05                	jmp    c001305b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013056:	b8 05 00 00 00       	mov    eax,0x5
c001305b:	5b                   	pop    ebx
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <Directory::write(unsigned long long, void*, int*)>:
c001305e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013062:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013069:	b8 0b 00 00 00       	mov    eax,0xb
c001306e:	80 fa 19             	cmp    dl,0x19
c0013071:	77 18                	ja     c001308b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013073:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c001307a:	85 d2                	test   edx,edx
c001307c:	74 0d                	je     c001308b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001307e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013085:	19 c0                	sbb    eax,eax
c0013087:	83 e0 0a             	and    eax,0xa
c001308a:	40                   	inc    eax
c001308b:	c3                   	ret    

c001308c <File::isAtty()>:
c001308c:	31 c0                	xor    eax,eax
c001308e:	c3                   	ret    
c001308f:	90                   	nop

c0013090 <Directory::isAtty()>:
c0013090:	31 c0                	xor    eax,eax
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013094:	b8 0a 00 00 00       	mov    eax,0xa
c0013099:	c3                   	ret    

c001309a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001309a:	b8 0a 00 00 00       	mov    eax,0xa
c001309f:	c3                   	ret    

c00130a0 <Filesystem::getFileFirstSector(char const*)>:
c00130a0:	31 c0                	xor    eax,eax
c00130a2:	31 d2                	xor    edx,edx
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <File::~File()>:
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c00130ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b2:	89 10                	mov    DWORD PTR [eax],edx
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	50                   	push   eax
c00130bc:	e8 0f e7 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	90                   	nop
c00130c5:	83 c4 0c             	add    esp,0xc
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <File::~File()>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	83 ec 0c             	sub    esp,0xc
c00130d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d4:	e8 cd ff ff ff       	call   c00130a6 <File::~File()>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	83 ec 08             	sub    esp,0x8
c00130df:	68 14 01 00 00       	push   0x114
c00130e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e8:	e8 6a fc ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	83 c4 0c             	add    esp,0xc
c00130f3:	c3                   	ret    

c00130f4 <Directory::~Directory()>:
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	89 10                	mov    DWORD PTR [eax],edx
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	50                   	push   eax
c001310a:	e8 c1 e6 ff ff       	call   c00117d0 <UnixFile::~UnixFile()>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	90                   	nop
c0013113:	83 c4 0c             	add    esp,0xc
c0013116:	c3                   	ret    
c0013117:	90                   	nop

c0013118 <Directory::~Directory()>:
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	83 ec 0c             	sub    esp,0xc
c001311e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013122:	e8 cd ff ff ff       	call   c00130f4 <Directory::~Directory()>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	83 ec 08             	sub    esp,0x8
c001312d:	68 14 01 00 00       	push   0x114
c0013132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013136:	e8 1c fc ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	83 c4 0c             	add    esp,0xc
c0013141:	c3                   	ret    

c0013142 <Filesystem::Filesystem()>:
c0013142:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0013147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001314b:	89 10                	mov    DWORD PTR [eax],edx
c001314d:	8b 15 54 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f454
c0013153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013157:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001315a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315e:	a3 54 f4 02 c0       	mov    ds:0xc002f454,eax
c0013163:	90                   	nop
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Filesystem::~Filesystem()>:
c0013166:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c001316b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316f:	89 10                	mov    DWORD PTR [eax],edx
c0013171:	90                   	nop
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Filesystem::~Filesystem()>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001317b:	e8 e6 ff ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0013180:	83 c4 04             	add    esp,0x4
c0013183:	83 ec 08             	sub    esp,0x8
c0013186:	6a 08                	push   0x8
c0013188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318c:	e8 c6 fb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	83 c4 0c             	add    esp,0xc
c0013197:	c3                   	ret    

c0013198 <Fs::getcwd(Process*, char*, int)>:
c0013198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001319c:	31 c0                	xor    eax,eax
c001319e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131a5:	7d 15                	jge    c00131bc <Fs::getcwd(Process*, char*, int)+0x24>
c00131a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131ab:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131b2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131b5:	84 c9                	test   cl,cl
c00131b7:	74 06                	je     c00131bf <Fs::getcwd(Process*, char*, int)+0x27>
c00131b9:	40                   	inc    eax
c00131ba:	eb e2                	jmp    c001319e <Fs::getcwd(Process*, char*, int)+0x6>
c00131bc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131bf:	31 c0                	xor    eax,eax
c00131c1:	c3                   	ret    

c00131c2 <Fs::initVFS()>:
c00131c2:	83 ec 18             	sub    esp,0x18
c00131c5:	6a 08                	push   0x8
c00131c7:	e8 c0 c6 ff ff       	call   c000f88c <malloc>
c00131cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00131cf:	e8 e6 e6 00 00       	call   c00218ba <FAT::FAT()>
c00131d4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131db:	e8 ac c6 ff ff       	call   c000f88c <malloc>
c00131e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00131e3:	e8 0e f9 00 00       	call   c0022af6 <ISO9660::ISO9660()>
c00131e8:	83 c4 1c             	add    esp,0x1c
c00131eb:	c3                   	ret    

c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131ec:	55                   	push   ebp
c00131ed:	57                   	push   edi
c00131ee:	56                   	push   esi
c00131ef:	53                   	push   ebx
c00131f0:	81 ec 10 04 00 00    	sub    esp,0x410
c00131f6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00131fd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013204:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001320b:	68 00 04 00 00       	push   0x400
c0013210:	6a 00                	push   0x0
c0013212:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013216:	56                   	push   esi
c0013217:	e8 34 d5 fe ff       	call   c0000750 <memset>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013223:	75 0b                	jne    c0013230 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013225:	50                   	push   eax
c0013226:	50                   	push   eax
c0013227:	57                   	push   edi
c0013228:	56                   	push   esi
c0013229:	e8 de d5 fe ff       	call   c000080c <strcpy>
c001322e:	eb 41                	jmp    c0013271 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013230:	8a 07                	mov    al,BYTE PTR [edi]
c0013232:	3c 5c                	cmp    al,0x5c
c0013234:	74 04                	je     c001323a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013236:	3c 2f                	cmp    al,0x2f
c0013238:	75 18                	jne    c0013252 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001323a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001323d:	3c 60                	cmp    al,0x60
c001323f:	7e 03                	jle    c0013244 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013241:	83 e8 20             	sub    eax,0x20
c0013244:	88 04 24             	mov    BYTE PTR [esp],al
c0013247:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001324e:	50                   	push   eax
c001324f:	50                   	push   eax
c0013250:	eb 18                	jmp    c001326a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013252:	50                   	push   eax
c0013253:	50                   	push   eax
c0013254:	55                   	push   ebp
c0013255:	56                   	push   esi
c0013256:	e8 b1 d5 fe ff       	call   c000080c <strcpy>
c001325b:	5a                   	pop    edx
c001325c:	59                   	pop    ecx
c001325d:	68 f1 cf 02 c0       	push   0xc002cff1
c0013262:	56                   	push   esi
c0013263:	e8 e4 d6 fe ff       	call   c000094c <strcat>
c0013268:	5d                   	pop    ebp
c0013269:	58                   	pop    eax
c001326a:	57                   	push   edi
c001326b:	56                   	push   esi
c001326c:	e8 db d6 fe ff       	call   c000094c <strcat>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013277:	3c 60                	cmp    al,0x60
c0013279:	7e 03                	jle    c001327e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001327b:	83 e8 20             	sub    eax,0x20
c001327e:	88 04 24             	mov    BYTE PTR [esp],al
c0013281:	88 03                	mov    BYTE PTR [ebx],al
c0013283:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001328a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013290:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013294:	bf 03 00 00 00       	mov    edi,0x3
c0013299:	b8 03 00 00 00       	mov    eax,0x3
c001329e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132a1:	84 d2                	test   dl,dl
c00132a3:	0f 84 91 00 00 00    	je     c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132a9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132ac:	80 fa 5c             	cmp    dl,0x5c
c00132af:	74 05                	je     c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132b1:	80 fa 2f             	cmp    dl,0x2f
c00132b4:	75 12                	jne    c00132c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132b6:	89 c5                	mov    ebp,eax
c00132b8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132bd:	74 09                	je     c00132c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132bf:	40                   	inc    eax
c00132c0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132c4:	89 cf                	mov    edi,ecx
c00132c6:	eb d6                	jmp    c001329e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132c8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132cd:	75 5b                	jne    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132cf:	80 fa 2e             	cmp    dl,0x2e
c00132d2:	75 56                	jne    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132d4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132d8:	74 19                	je     c00132f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132da:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132df:	74 53                	je     c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132e1:	89 f9                	mov    ecx,edi
c00132e3:	41                   	inc    ecx
c00132e4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132e7:	80 fa 2f             	cmp    dl,0x2f
c00132ea:	74 f7                	je     c00132e3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132ec:	80 fa 5c             	cmp    dl,0x5c
c00132ef:	74 f2                	je     c00132e3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132f1:	eb d1                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132f3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132f8:	74 3a                	je     c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132fa:	83 f8 03             	cmp    eax,0x3
c00132fd:	74 c5                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ff:	41                   	inc    ecx
c0013300:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013303:	80 fa 2f             	cmp    dl,0x2f
c0013306:	74 f7                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013308:	80 fa 5c             	cmp    dl,0x5c
c001330b:	74 f2                	je     c00132ff <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001330d:	48                   	dec    eax
c001330e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013312:	75 06                	jne    c001331a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013314:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013318:	eb f3                	jmp    c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001331a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001331e:	74 07                	je     c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013320:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013324:	48                   	dec    eax
c0013325:	eb f3                	jmp    c001331a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013327:	40                   	inc    eax
c0013328:	eb 9a                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001332a:	80 fa 2f             	cmp    dl,0x2f
c001332d:	74 95                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001332f:	80 fa 5c             	cmp    dl,0x5c
c0013332:	74 90                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013334:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013337:	40                   	inc    eax
c0013338:	eb 8a                	jmp    c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	53                   	push   ebx
c0013342:	e8 25 d4 fe ff       	call   c000076c <strlen>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001334f:	75 26                	jne    c0013377 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013351:	83 ec 0c             	sub    esp,0xc
c0013354:	53                   	push   ebx
c0013355:	e8 12 d4 fe ff       	call   c000076c <strlen>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013362:	74 26                	je     c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	53                   	push   ebx
c0013368:	e8 ff d3 fe ff       	call   c000076c <strlen>
c001336d:	83 c4 10             	add    esp,0x10
c0013370:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013375:	eb c7                	jmp    c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013377:	83 ec 0c             	sub    esp,0xc
c001337a:	53                   	push   ebx
c001337b:	e8 ec d3 fe ff       	call   c000076c <strlen>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013388:	74 c7                	je     c0013351 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001338a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <File::File(char const*, Process*)>:
c0013396:	83 ec 0c             	sub    esp,0xc
c0013399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339d:	83 ec 08             	sub    esp,0x8
c00133a0:	6a 00                	push   0x0
c00133a2:	50                   	push   eax
c00133a3:	e8 46 e2 ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	ba 44 b8 02 c0       	mov    edx,0xc002b844
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	89 10                	mov    DWORD PTR [eax],edx
c00133b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c4:	83 c0 0d             	add    eax,0xd
c00133c7:	83 ec 04             	sub    esp,0x4
c00133ca:	52                   	push   edx
c00133cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133cf:	50                   	push   eax
c00133d0:	e8 17 fe ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133df:	8d 50 bf             	lea    edx,[eax-0x41]
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133f4:	90                   	nop
c00133f5:	83 c4 0c             	add    esp,0xc
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <File::open(FileOpenMode)>:
c00133fa:	53                   	push   ebx
c00133fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013400:	83 ec 08             	sub    esp,0x8
c0013403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013407:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001340e:	80 fa 19             	cmp    dl,0x19
c0013411:	77 40                	ja     c0013453 <File::open(FileOpenMode)+0x59>
c0013413:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c001341a:	85 d2                	test   edx,edx
c001341c:	74 35                	je     c0013453 <File::open(FileOpenMode)+0x59>
c001341e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013424:	85 d2                	test   edx,edx
c0013426:	74 2b                	je     c0013453 <File::open(FileOpenMode)+0x59>
c0013428:	b8 06 00 00 00       	mov    eax,0x6
c001342d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013431:	75 20                	jne    c0013453 <File::open(FileOpenMode)+0x59>
c0013433:	8b 02                	mov    eax,DWORD PTR [edx]
c0013435:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001343b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001343f:	51                   	push   ecx
c0013440:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013443:	51                   	push   ecx
c0013444:	52                   	push   edx
c0013445:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	85 c0                	test   eax,eax
c001344d:	75 04                	jne    c0013453 <File::open(FileOpenMode)+0x59>
c001344f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013453:	83 c4 08             	add    esp,0x8
c0013456:	5b                   	pop    ebx
c0013457:	c3                   	ret    

c0013458 <File::close()>:
c0013458:	53                   	push   ebx
c0013459:	b8 0b 00 00 00       	mov    eax,0xb
c001345e:	83 ec 08             	sub    esp,0x8
c0013461:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013465:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001346c:	80 fa 19             	cmp    dl,0x19
c001346f:	77 41                	ja     c00134b2 <File::close()+0x5a>
c0013471:	8b 1c 95 e0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0720]
c0013478:	85 db                	test   ebx,ebx
c001347a:	74 36                	je     c00134b2 <File::close()+0x5a>
c001347c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013483:	74 2d                	je     c00134b2 <File::close()+0x5a>
c0013485:	b8 05 00 00 00       	mov    eax,0x5
c001348a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001348e:	74 22                	je     c00134b2 <File::close()+0x5a>
c0013490:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013494:	8b 04 95 e0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0720]
c001349b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134a1:	53                   	push   ebx
c00134a2:	53                   	push   ebx
c00134a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00134a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134ab:	50                   	push   eax
c00134ac:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	83 c4 08             	add    esp,0x8
c00134b5:	5b                   	pop    ebx
c00134b6:	c3                   	ret    
c00134b7:	90                   	nop

c00134b8 <File::seek(unsigned long long)>:
c00134b8:	56                   	push   esi
c00134b9:	53                   	push   ebx
c00134ba:	b8 0b 00 00 00       	mov    eax,0xb
c00134bf:	51                   	push   ecx
c00134c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134c8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134d3:	80 fa 19             	cmp    dl,0x19
c00134d6:	77 31                	ja     c0013509 <File::seek(unsigned long long)+0x51>
c00134d8:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c00134df:	85 d2                	test   edx,edx
c00134e1:	74 26                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134e3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134e9:	85 d2                	test   edx,edx
c00134eb:	74 1c                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134ed:	b8 05 00 00 00       	mov    eax,0x5
c00134f2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00134f6:	74 11                	je     c0013509 <File::seek(unsigned long long)+0x51>
c00134f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00134fa:	53                   	push   ebx
c00134fb:	51                   	push   ecx
c00134fc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013502:	52                   	push   edx
c0013503:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	5a                   	pop    edx
c001350a:	5b                   	pop    ebx
c001350b:	5e                   	pop    esi
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <File::tell(unsigned long long*)>:
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	b8 0b 00 00 00       	mov    eax,0xb
c0013516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001351a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013521:	80 fa 19             	cmp    dl,0x19
c0013524:	77 34                	ja     c001355a <File::tell(unsigned long long*)+0x4c>
c0013526:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c001352d:	85 d2                	test   edx,edx
c001352f:	74 29                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c0013531:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013537:	85 d2                	test   edx,edx
c0013539:	74 1f                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c001353b:	b8 05 00 00 00       	mov    eax,0x5
c0013540:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013544:	74 14                	je     c001355a <File::tell(unsigned long long*)+0x4c>
c0013546:	50                   	push   eax
c0013547:	8b 02                	mov    eax,DWORD PTR [edx]
c0013549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001354d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013553:	52                   	push   edx
c0013554:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	83 c4 0c             	add    esp,0xc
c001355d:	c3                   	ret    

c001355e <File::rewind()>:
c001355e:	83 ec 10             	sub    esp,0x10
c0013561:	6a 00                	push   0x0
c0013563:	6a 00                	push   0x0
c0013565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013569:	e8 4a ff ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001356e:	83 c4 1c             	add    esp,0x1c
c0013571:	c3                   	ret    

c0013572 <File::unlink()>:
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001357e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013585:	80 f9 19             	cmp    cl,0x19
c0013588:	77 2f                	ja     c00135b9 <File::unlink()+0x47>
c001358a:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013591:	85 c9                	test   ecx,ecx
c0013593:	74 24                	je     c00135b9 <File::unlink()+0x47>
c0013595:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359b:	85 c9                	test   ecx,ecx
c001359d:	74 1a                	je     c00135b9 <File::unlink()+0x47>
c001359f:	b8 06 00 00 00       	mov    eax,0x6
c00135a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a8:	75 0f                	jne    c00135b9 <File::unlink()+0x47>
c00135aa:	83 c2 0d             	add    edx,0xd
c00135ad:	50                   	push   eax
c00135ae:	50                   	push   eax
c00135af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b1:	52                   	push   edx
c00135b2:	51                   	push   ecx
c00135b3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	83 c4 0c             	add    esp,0xc
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop

c00135be <File::rename(char const*)>:
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	b8 0b 00 00 00       	mov    eax,0xb
c00135c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d1:	80 f9 19             	cmp    cl,0x19
c00135d4:	77 32                	ja     c0013608 <File::rename(char const*)+0x4a>
c00135d6:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00135dd:	85 c9                	test   ecx,ecx
c00135df:	74 27                	je     c0013608 <File::rename(char const*)+0x4a>
c00135e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e7:	85 c9                	test   ecx,ecx
c00135e9:	74 1d                	je     c0013608 <File::rename(char const*)+0x4a>
c00135eb:	b8 06 00 00 00       	mov    eax,0x6
c00135f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135f4:	75 12                	jne    c0013608 <File::rename(char const*)+0x4a>
c00135f6:	83 c2 0d             	add    edx,0xd
c00135f9:	50                   	push   eax
c00135fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013600:	52                   	push   edx
c0013601:	51                   	push   ecx
c0013602:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	83 c4 0c             	add    esp,0xc
c001360b:	c3                   	ret    

c001360c <File::chfatattr(unsigned char, unsigned char)>:
c001360c:	57                   	push   edi
c001360d:	b8 0b 00 00 00       	mov    eax,0xb
c0013612:	56                   	push   esi
c0013613:	53                   	push   ebx
c0013614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013618:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001361c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013623:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013627:	80 f9 19             	cmp    cl,0x19
c001362a:	77 37                	ja     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001362c:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013633:	85 c9                	test   ecx,ecx
c0013635:	74 2c                	je     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013637:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 22                	je     c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013641:	b8 06 00 00 00       	mov    eax,0x6
c0013646:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364a:	75 17                	jne    c0013663 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001364c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001364e:	89 f0                	mov    eax,esi
c0013650:	83 c2 0d             	add    edx,0xd
c0013653:	0f b6 f0             	movzx  esi,al
c0013656:	0f b6 db             	movzx  ebx,bl
c0013659:	56                   	push   esi
c001365a:	53                   	push   ebx
c001365b:	52                   	push   edx
c001365c:	51                   	push   ecx
c001365d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	5b                   	pop    ebx
c0013664:	5e                   	pop    esi
c0013665:	5f                   	pop    edi
c0013666:	c3                   	ret    
c0013667:	90                   	nop

c0013668 <File::exists()>:
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	31 c0                	xor    eax,eax
c001366d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013671:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013678:	80 f9 19             	cmp    cl,0x19
c001367b:	77 24                	ja     c00136a1 <File::exists()+0x39>
c001367d:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013684:	85 c9                	test   ecx,ecx
c0013686:	74 19                	je     c00136a1 <File::exists()+0x39>
c0013688:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001368e:	85 c9                	test   ecx,ecx
c0013690:	74 0f                	je     c00136a1 <File::exists()+0x39>
c0013692:	83 c2 0d             	add    edx,0xd
c0013695:	50                   	push   eax
c0013696:	50                   	push   eax
c0013697:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013699:	52                   	push   edx
c001369a:	51                   	push   ecx
c001369b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	83 c4 0c             	add    esp,0xc
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop

c00136a6 <File::stat(unsigned long long*, bool*)>:
c00136a6:	56                   	push   esi
c00136a7:	53                   	push   ebx
c00136a8:	50                   	push   eax
c00136a9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136c1:	80 f9 19             	cmp    cl,0x19
c00136c4:	77 3d                	ja     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136c6:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00136cd:	85 c9                	test   ecx,ecx
c00136cf:	74 32                	je     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d7:	85 c9                	test   ecx,ecx
c00136d9:	74 28                	je     c0013703 <File::stat(unsigned long long*, bool*)+0x5d>
c00136db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e1:	74 13                	je     c00136f6 <File::stat(unsigned long long*, bool*)+0x50>
c00136e3:	83 ec 04             	sub    esp,0x4
c00136e6:	56                   	push   esi
c00136e7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136ed:	51                   	push   ecx
c00136ee:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136f1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00136f4:	eb 0a                	jmp    c0013700 <File::stat(unsigned long long*, bool*)+0x5a>
c00136f6:	53                   	push   ebx
c00136f7:	83 c2 0d             	add    edx,0xd
c00136fa:	56                   	push   esi
c00136fb:	52                   	push   edx
c00136fc:	51                   	push   ecx
c00136fd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	5a                   	pop    edx
c0013704:	5b                   	pop    ebx
c0013705:	5e                   	pop    esi
c0013706:	c3                   	ret    

c0013707 <Fs::setcwd(Process*, char*)>:
c0013707:	55                   	push   ebp
c0013708:	57                   	push   edi
c0013709:	56                   	push   esi
c001370a:	53                   	push   ebx
c001370b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013711:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013718:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001371e:	57                   	push   edi
c001371f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013726:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001372a:	56                   	push   esi
c001372b:	e8 bc fa ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c0013730:	89 34 24             	mov    DWORD PTR [esp],esi
c0013733:	e8 34 d0 fe ff       	call   c000076c <strlen>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	83 f8 02             	cmp    eax,0x2
c001373e:	77 17                	ja     c0013757 <Fs::setcwd(Process*, char*)+0x50>
c0013740:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013745:	83 e8 41             	sub    eax,0x41
c0013748:	83 f8 19             	cmp    eax,0x19
c001374b:	76 24                	jbe    c0013771 <Fs::setcwd(Process*, char*)+0x6a>
c001374d:	b8 03 00 00 00       	mov    eax,0x3
c0013752:	e9 e0 00 00 00       	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	56                   	push   esi
c001375b:	e8 0c d0 fe ff       	call   c000076c <strlen>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	83 f8 03             	cmp    eax,0x3
c0013766:	75 34                	jne    c001379c <Fs::setcwd(Process*, char*)+0x95>
c0013768:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001376d:	75 2d                	jne    c001379c <Fs::setcwd(Process*, char*)+0x95>
c001376f:	eb cf                	jmp    c0013740 <Fs::setcwd(Process*, char*)+0x39>
c0013771:	8b 14 85 e0 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0720]
c0013778:	b8 05 00 00 00       	mov    eax,0x5
c001377d:	85 d2                	test   edx,edx
c001377f:	0f 84 b2 00 00 00    	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013785:	b8 06 00 00 00       	mov    eax,0x6
c001378a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013791:	0f 85 92 00 00 00    	jne    c0013829 <Fs::setcwd(Process*, char*)+0x122>
c0013797:	e9 9b 00 00 00       	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	68 14 01 00 00       	push   0x114
c00137a4:	e8 e3 c0 ff ff       	call   c000f88c <malloc>
c00137a9:	83 c4 0c             	add    esp,0xc
c00137ac:	89 c3                	mov    ebx,eax
c00137ae:	55                   	push   ebp
c00137af:	56                   	push   esi
c00137b0:	50                   	push   eax
c00137b1:	e8 e0 fb ff ff       	call   c0013396 <File::File(char const*, Process*)>
c00137b6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137bb:	83 c4 0c             	add    esp,0xc
c00137be:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137c2:	50                   	push   eax
c00137c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137c7:	50                   	push   eax
c00137c8:	53                   	push   ebx
c00137c9:	e8 d8 fe ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 f8 02             	cmp    eax,0x2
c00137d4:	74 04                	je     c00137da <Fs::setcwd(Process*, char*)+0xd3>
c00137d6:	85 c0                	test   eax,eax
c00137d8:	74 1c                	je     c00137f6 <Fs::setcwd(Process*, char*)+0xef>
c00137da:	b8 01 00 00 00       	mov    eax,0x1
c00137df:	85 db                	test   ebx,ebx
c00137e1:	74 54                	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c00137e3:	83 ec 0c             	sub    esp,0xc
c00137e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e8:	53                   	push   ebx
c00137e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	b8 01 00 00 00       	mov    eax,0x1
c00137f4:	eb 41                	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c00137f6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00137fb:	75 1c                	jne    c0013819 <Fs::setcwd(Process*, char*)+0x112>
c00137fd:	b8 02 00 00 00       	mov    eax,0x2
c0013802:	85 db                	test   ebx,ebx
c0013804:	74 31                	je     c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013806:	83 ec 0c             	sub    esp,0xc
c0013809:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380b:	53                   	push   ebx
c001380c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001380f:	83 c4 10             	add    esp,0x10
c0013812:	b8 02 00 00 00       	mov    eax,0x2
c0013817:	eb 1e                	jmp    c0013837 <Fs::setcwd(Process*, char*)+0x130>
c0013819:	85 db                	test   ebx,ebx
c001381b:	74 0c                	je     c0013829 <Fs::setcwd(Process*, char*)+0x122>
c001381d:	83 ec 0c             	sub    esp,0xc
c0013820:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013822:	53                   	push   ebx
c0013823:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	50                   	push   eax
c001382a:	50                   	push   eax
c001382b:	56                   	push   esi
c001382c:	57                   	push   edi
c001382d:	e8 da cf fe ff       	call   c000080c <strcpy>
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	31 c0                	xor    eax,eax
c0013837:	81 c4 1c 02 00 00    	add    esp,0x21c
c001383d:	5b                   	pop    ebx
c001383e:	5e                   	pop    esi
c001383f:	5f                   	pop    edi
c0013840:	5d                   	pop    ebp
c0013841:	c3                   	ret    

c0013842 <Directory::Directory(char const*, Process*)>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013849:	83 ec 08             	sub    esp,0x8
c001384c:	6a 00                	push   0x0
c001384e:	50                   	push   eax
c001384f:	e8 9a dd ff ff       	call   c00115ee <UnixFile::UnixFile(int)>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c001385c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013860:	89 10                	mov    DWORD PTR [eax],edx
c0013862:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013866:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013870:	83 c0 0d             	add    eax,0xd
c0013873:	83 ec 04             	sub    esp,0x4
c0013876:	52                   	push   edx
c0013877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001387b:	50                   	push   eax
c001387c:	e8 6b f9 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001388b:	8d 50 bf             	lea    edx,[eax-0x41]
c001388e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013892:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138a0:	90                   	nop
c00138a1:	83 c4 0c             	add    esp,0xc
c00138a4:	c3                   	ret    
c00138a5:	90                   	nop

c00138a6 <Directory::open()>:
c00138a6:	53                   	push   ebx
c00138a7:	b8 0b 00 00 00       	mov    eax,0xb
c00138ac:	83 ec 08             	sub    esp,0x8
c00138af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138ba:	80 fa 19             	cmp    dl,0x19
c00138bd:	77 3d                	ja     c00138fc <Directory::open()+0x56>
c00138bf:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c00138c6:	85 d2                	test   edx,edx
c00138c8:	74 32                	je     c00138fc <Directory::open()+0x56>
c00138ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138d0:	85 d2                	test   edx,edx
c00138d2:	74 28                	je     c00138fc <Directory::open()+0x56>
c00138d4:	b8 06 00 00 00       	mov    eax,0x6
c00138d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138dd:	75 1d                	jne    c00138fc <Directory::open()+0x56>
c00138df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138e5:	50                   	push   eax
c00138e6:	8b 02                	mov    eax,DWORD PTR [edx]
c00138e8:	51                   	push   ecx
c00138e9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138ec:	51                   	push   ecx
c00138ed:	52                   	push   edx
c00138ee:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138f1:	83 c4 10             	add    esp,0x10
c00138f4:	85 c0                	test   eax,eax
c00138f6:	75 04                	jne    c00138fc <Directory::open()+0x56>
c00138f8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00138fc:	83 c4 08             	add    esp,0x8
c00138ff:	5b                   	pop    ebx
c0013900:	c3                   	ret    
c0013901:	90                   	nop

c0013902 <Directory::close()>:
c0013902:	53                   	push   ebx
c0013903:	b8 0b 00 00 00       	mov    eax,0xb
c0013908:	83 ec 08             	sub    esp,0x8
c001390b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001390f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013916:	80 fa 19             	cmp    dl,0x19
c0013919:	77 41                	ja     c001395c <Directory::close()+0x5a>
c001391b:	8b 1c 95 e0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0720]
c0013922:	85 db                	test   ebx,ebx
c0013924:	74 36                	je     c001395c <Directory::close()+0x5a>
c0013926:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001392d:	74 2d                	je     c001395c <Directory::close()+0x5a>
c001392f:	b8 05 00 00 00       	mov    eax,0x5
c0013934:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013938:	74 22                	je     c001395c <Directory::close()+0x5a>
c001393a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001393e:	8b 04 95 e0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0720]
c0013945:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001394b:	53                   	push   ebx
c001394c:	53                   	push   ebx
c001394d:	8b 10                	mov    edx,DWORD PTR [eax]
c001394f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013955:	50                   	push   eax
c0013956:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	83 c4 08             	add    esp,0x8
c001395f:	5b                   	pop    ebx
c0013960:	c3                   	ret    
c0013961:	90                   	nop

c0013962 <Directory::unlink()>:
c0013962:	83 ec 0c             	sub    esp,0xc
c0013965:	b8 0b 00 00 00       	mov    eax,0xb
c001396a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001396e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013975:	80 f9 19             	cmp    cl,0x19
c0013978:	77 2f                	ja     c00139a9 <Directory::unlink()+0x47>
c001397a:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013981:	85 c9                	test   ecx,ecx
c0013983:	74 24                	je     c00139a9 <Directory::unlink()+0x47>
c0013985:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001398b:	85 c9                	test   ecx,ecx
c001398d:	74 1a                	je     c00139a9 <Directory::unlink()+0x47>
c001398f:	b8 06 00 00 00       	mov    eax,0x6
c0013994:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013998:	75 0f                	jne    c00139a9 <Directory::unlink()+0x47>
c001399a:	83 c2 0d             	add    edx,0xd
c001399d:	50                   	push   eax
c001399e:	50                   	push   eax
c001399f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139a1:	52                   	push   edx
c00139a2:	51                   	push   ecx
c00139a3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	83 c4 0c             	add    esp,0xc
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Directory::rename(char const*)>:
c00139ae:	83 ec 0c             	sub    esp,0xc
c00139b1:	b8 0b 00 00 00       	mov    eax,0xb
c00139b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139c1:	80 f9 19             	cmp    cl,0x19
c00139c4:	77 32                	ja     c00139f8 <Directory::rename(char const*)+0x4a>
c00139c6:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00139cd:	85 c9                	test   ecx,ecx
c00139cf:	74 27                	je     c00139f8 <Directory::rename(char const*)+0x4a>
c00139d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139d7:	85 c9                	test   ecx,ecx
c00139d9:	74 1d                	je     c00139f8 <Directory::rename(char const*)+0x4a>
c00139db:	b8 06 00 00 00       	mov    eax,0x6
c00139e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139e4:	75 12                	jne    c00139f8 <Directory::rename(char const*)+0x4a>
c00139e6:	83 c2 0d             	add    edx,0xd
c00139e9:	50                   	push   eax
c00139ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f0:	52                   	push   edx
c00139f1:	51                   	push   ecx
c00139f2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00139f5:	83 c4 10             	add    esp,0x10
c00139f8:	83 c4 0c             	add    esp,0xc
c00139fb:	c3                   	ret    

c00139fc <Directory::exists()>:
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	31 c0                	xor    eax,eax
c0013a01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0c:	80 f9 19             	cmp    cl,0x19
c0013a0f:	77 24                	ja     c0013a35 <Directory::exists()+0x39>
c0013a11:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013a18:	85 c9                	test   ecx,ecx
c0013a1a:	74 19                	je     c0013a35 <Directory::exists()+0x39>
c0013a1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a22:	85 c9                	test   ecx,ecx
c0013a24:	74 0f                	je     c0013a35 <Directory::exists()+0x39>
c0013a26:	83 c2 0d             	add    edx,0xd
c0013a29:	50                   	push   eax
c0013a2a:	50                   	push   eax
c0013a2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a2d:	52                   	push   edx
c0013a2e:	51                   	push   ecx
c0013a2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a32:	83 c4 10             	add    esp,0x10
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <Directory::read(dirent*)>:
c0013a3a:	83 ec 1c             	sub    esp,0x1c
c0013a3d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a4d:	80 fa 19             	cmp    dl,0x19
c0013a50:	77 30                	ja     c0013a82 <Directory::read(dirent*)+0x48>
c0013a52:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c0013a59:	85 d2                	test   edx,edx
c0013a5b:	74 25                	je     c0013a82 <Directory::read(dirent*)+0x48>
c0013a5d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a64:	74 1c                	je     c0013a82 <Directory::read(dirent*)+0x48>
c0013a66:	83 ec 0c             	sub    esp,0xc
c0013a69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a6f:	52                   	push   edx
c0013a70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a74:	6a 00                	push   0x0
c0013a76:	68 10 01 00 00       	push   0x110
c0013a7b:	51                   	push   ecx
c0013a7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a7f:	83 c4 20             	add    esp,0x20
c0013a82:	83 c4 1c             	add    esp,0x1c
c0013a85:	c3                   	ret    

c0013a86 <Directory::create()>:
c0013a86:	83 ec 0c             	sub    esp,0xc
c0013a89:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a99:	80 f9 19             	cmp    cl,0x19
c0013a9c:	77 2f                	ja     c0013acd <Directory::create()+0x47>
c0013a9e:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013aa5:	85 c9                	test   ecx,ecx
c0013aa7:	74 24                	je     c0013acd <Directory::create()+0x47>
c0013aa9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aaf:	85 c9                	test   ecx,ecx
c0013ab1:	74 1a                	je     c0013acd <Directory::create()+0x47>
c0013ab3:	b8 06 00 00 00       	mov    eax,0x6
c0013ab8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013abc:	75 0f                	jne    c0013acd <Directory::create()+0x47>
c0013abe:	83 c2 0d             	add    edx,0xd
c0013ac1:	50                   	push   eax
c0013ac2:	50                   	push   eax
c0013ac3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac5:	52                   	push   edx
c0013ac6:	51                   	push   ecx
c0013ac7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	83 c4 0c             	add    esp,0xc
c0013ad0:	c3                   	ret    
c0013ad1:	90                   	nop

c0013ad2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ad2:	b8 0a 00 00 00       	mov    eax,0xa
c0013ad7:	c3                   	ret    

c0013ad8 <Bus::Bus(char const*)>:
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013adf:	83 ec 08             	sub    esp,0x8
c0013ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae6:	50                   	push   eax
c0013ae7:	e8 5c 09 00 00       	call   c0014448 <Device::Device(char const*)>
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0013af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af8:	89 10                	mov    DWORD PTR [eax],edx
c0013afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b08:	90                   	nop
c0013b09:	83 c4 0c             	add    esp,0xc
c0013b0c:	c3                   	ret    
c0013b0d:	90                   	nop

c0013b0e <Bus::~Bus()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0013b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1a:	89 10                	mov    DWORD PTR [eax],edx
c0013b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	50                   	push   eax
c0013b24:	e8 15 06 00 00       	call   c001413e <Device::~Device()>
c0013b29:	83 c4 10             	add    esp,0x10
c0013b2c:	90                   	nop
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	c3                   	ret    
c0013b31:	90                   	nop

c0013b32 <Bus::~Bus()>:
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	83 ec 0c             	sub    esp,0xc
c0013b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3c:	e8 cd ff ff ff       	call   c0013b0e <Bus::~Bus()>
c0013b41:	83 c4 10             	add    esp,0x10
c0013b44:	83 ec 08             	sub    esp,0x8
c0013b47:	68 58 01 00 00       	push   0x158
c0013b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b50:	e8 02 f2 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	83 c4 0c             	add    esp,0xc
c0013b5b:	c3                   	ret    

c0013b5c <Buzzer::Buzzer(char const*)>:
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b63:	83 ec 08             	sub    esp,0x8
c0013b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6a:	50                   	push   eax
c0013b6b:	e8 d8 08 00 00       	call   c0014448 <Device::Device(char const*)>
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c0013b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7c:	89 10                	mov    DWORD PTR [eax],edx
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b9a:	90                   	nop
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <Buzzer::~Buzzer()>:
c0013ba0:	83 ec 0c             	sub    esp,0xc
c0013ba3:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c0013ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bac:	89 10                	mov    DWORD PTR [eax],edx
c0013bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb2:	83 ec 0c             	sub    esp,0xc
c0013bb5:	50                   	push   eax
c0013bb6:	e8 83 05 00 00       	call   c001413e <Device::~Device()>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	90                   	nop
c0013bbf:	83 c4 0c             	add    esp,0xc
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <Buzzer::~Buzzer()>:
c0013bc4:	83 ec 0c             	sub    esp,0xc
c0013bc7:	83 ec 0c             	sub    esp,0xc
c0013bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bce:	e8 cd ff ff ff       	call   c0013ba0 <Buzzer::~Buzzer()>
c0013bd3:	83 c4 10             	add    esp,0x10
c0013bd6:	83 ec 08             	sub    esp,0x8
c0013bd9:	68 5c 01 00 00       	push   0x15c
c0013bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be2:	e8 70 f1 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013be7:	83 c4 10             	add    esp,0x10
c0013bea:	83 c4 0c             	add    esp,0xc
c0013bed:	c3                   	ret    

c0013bee <Buzzer::stop()>:
c0013bee:	83 ec 14             	sub    esp,0x14
c0013bf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bf7:	6a 00                	push   0x0
c0013bf9:	50                   	push   eax
c0013bfa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013bfd:	83 c4 1c             	add    esp,0x1c
c0013c00:	c3                   	ret    

c0013c01 <beepThread(void*)>:
c0013c01:	53                   	push   ebx
c0013c02:	83 ec 08             	sub    esp,0x8
c0013c05:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0013c0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c0e:	48                   	dec    eax
c0013c0f:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0013c14:	75 01                	jne    c0013c17 <beepThread(void*)+0x16>
c0013c16:	fb                   	sti    
c0013c17:	50                   	push   eax
c0013c18:	50                   	push   eax
c0013c19:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c1e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c24:	52                   	push   edx
c0013c25:	50                   	push   eax
c0013c26:	e8 5c ad 00 00       	call   c001e987 <nanoSleep(unsigned long long)>
c0013c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c2e:	e8 bb ff ff ff       	call   c0013bee <Buzzer::stop()>
c0013c33:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c3b:	83 c4 18             	add    esp,0x18
c0013c3e:	5b                   	pop    ebx
c0013c3f:	e9 3f ac 00 00       	jmp    c001e883 <blockTask(TaskState)>

c0013c44 <Buzzer::beep(int, int, bool)>:
c0013c44:	57                   	push   edi
c0013c45:	56                   	push   esi
c0013c46:	53                   	push   ebx
c0013c47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c53:	52                   	push   edx
c0013c54:	52                   	push   edx
c0013c55:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5b:	56                   	push   esi
c0013c5c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	89 f8                	mov    eax,edi
c0013c64:	84 c0                	test   al,al
c0013c66:	74 1f                	je     c0013c87 <Buzzer::beep(int, int, bool)+0x43>
c0013c68:	50                   	push   eax
c0013c69:	50                   	push   eax
c0013c6a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c70:	99                   	cdq    
c0013c71:	52                   	push   edx
c0013c72:	50                   	push   eax
c0013c73:	e8 0f ad 00 00       	call   c001e987 <nanoSleep(unsigned long long)>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c7f:	5b                   	pop    ebx
c0013c80:	5e                   	pop    esi
c0013c81:	5f                   	pop    edi
c0013c82:	e9 67 ff ff ff       	jmp    c0013bee <Buzzer::stop()>
c0013c87:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c8d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0013c92:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c9a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c9e:	c7 44 24 14 01 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c01
c0013ca6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013caa:	5b                   	pop    ebx
c0013cab:	5e                   	pop    esi
c0013cac:	5f                   	pop    edi
c0013cad:	e9 8e a7 00 00       	jmp    c001e440 <Process::createThread(void (*)(void*), void*, int)>

c0013cb2 <User::loadClockSettings(int)>:
c0013cb2:	53                   	push   ebx
c0013cb3:	83 ec 14             	sub    esp,0x14
c0013cb6:	68 14 01 00 00       	push   0x114
c0013cbb:	e8 cc bb ff ff       	call   c000f88c <malloc>
c0013cc0:	83 c4 0c             	add    esp,0xc
c0013cc3:	89 c3                	mov    ebx,eax
c0013cc5:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c0013ccb:	68 d0 b8 02 c0       	push   0xc002b8d0
c0013cd0:	50                   	push   eax
c0013cd1:	e8 c0 f6 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c0013cd6:	58                   	pop    eax
c0013cd7:	5a                   	pop    edx
c0013cd8:	6a 01                	push   0x1
c0013cda:	53                   	push   ebx
c0013cdb:	e8 1a f7 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c0013ce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce3:	e8 70 f7 ff ff       	call   c0013458 <File::close()>
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	85 db                	test   ebx,ebx
c0013ced:	74 0f                	je     c0013cfe <User::loadClockSettings(int)+0x4c>
c0013cef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013cf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013cf8:	83 c4 08             	add    esp,0x8
c0013cfb:	5b                   	pop    ebx
c0013cfc:	ff e0                	jmp    eax
c0013cfe:	83 c4 08             	add    esp,0x8
c0013d01:	5b                   	pop    ebx
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <Clock::Clock(char const*)>:
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0b:	83 ec 08             	sub    esp,0x8
c0013d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d12:	50                   	push   eax
c0013d13:	e8 30 07 00 00       	call   c0014448 <Device::Device(char const*)>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	ba f8 b8 02 c0       	mov    edx,0xc002b8f8
c0013d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d24:	89 10                	mov    DWORD PTR [eax],edx
c0013d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d34:	90                   	nop
c0013d35:	83 c4 0c             	add    esp,0xc
c0013d38:	c3                   	ret    
c0013d39:	90                   	nop

c0013d3a <Clock::~Clock()>:
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	ba f8 b8 02 c0       	mov    edx,0xc002b8f8
c0013d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d46:	89 10                	mov    DWORD PTR [eax],edx
c0013d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	50                   	push   eax
c0013d50:	e8 e9 03 00 00       	call   c001413e <Device::~Device()>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	90                   	nop
c0013d59:	83 c4 0c             	add    esp,0xc
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <Clock::~Clock()>:
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	83 ec 0c             	sub    esp,0xc
c0013d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d68:	e8 cd ff ff ff       	call   c0013d3a <Clock::~Clock()>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	83 ec 08             	sub    esp,0x8
c0013d73:	68 58 01 00 00       	push   0x158
c0013d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7c:	e8 d6 ef ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0013d81:	83 c4 10             	add    esp,0x10
c0013d84:	83 c4 0c             	add    esp,0xc
c0013d87:	c3                   	ret    

c0013d88 <Clock::timeInSecondsLocal()>:
c0013d88:	53                   	push   ebx
c0013d89:	83 ec 14             	sub    esp,0x14
c0013d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d92:	50                   	push   eax
c0013d93:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d96:	0f b6 0d 5c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f45c
c0013d9d:	03 0d 60 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f460
c0013da3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013da9:	89 cb                	mov    ebx,ecx
c0013dab:	c1 fb 1f             	sar    ebx,0x1f
c0013dae:	01 c8                	add    eax,ecx
c0013db0:	11 da                	adc    edx,ebx
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	31 c9                	xor    ecx,ecx
c0013db7:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013dbe:	74 05                	je     c0013dc5 <Clock::timeInSecondsLocal()+0x3d>
c0013dc0:	b9 08 07 00 00       	mov    ecx,0x708
c0013dc5:	31 db                	xor    ebx,ebx
c0013dc7:	01 c8                	add    eax,ecx
c0013dc9:	11 da                	adc    edx,ebx
c0013dcb:	83 c4 08             	add    esp,0x8
c0013dce:	5b                   	pop    ebx
c0013dcf:	c3                   	ret    

c0013dd0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dd0:	57                   	push   edi
c0013dd1:	56                   	push   esi
c0013dd2:	53                   	push   ebx
c0013dd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013dd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ddb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ddd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013de1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013de4:	0f b6 05 5c f4 02 c0 	movzx  eax,BYTE PTR ds:0xc002f45c
c0013deb:	03 05 60 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f460
c0013df1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013df7:	99                   	cdq    
c0013df8:	29 c6                	sub    esi,eax
c0013dfa:	19 d7                	sbb    edi,edx
c0013dfc:	89 f0                	mov    eax,esi
c0013dfe:	89 fa                	mov    edx,edi
c0013e00:	31 f6                	xor    esi,esi
c0013e02:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013e09:	74 05                	je     c0013e10 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e0b:	be 08 07 00 00       	mov    esi,0x708
c0013e10:	31 ff                	xor    edi,edi
c0013e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e16:	29 f0                	sub    eax,esi
c0013e18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e1c:	19 fa                	sbb    edx,edi
c0013e1e:	89 d8                	mov    eax,ebx
c0013e20:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e24:	5b                   	pop    ebx
c0013e25:	5e                   	pop    esi
c0013e26:	5f                   	pop    edi
c0013e27:	ff e0                	jmp    eax

c0013e29 <datetimeToSeconds(datetime_t)>:
c0013e29:	55                   	push   ebp
c0013e2a:	57                   	push   edi
c0013e2b:	56                   	push   esi
c0013e2c:	53                   	push   ebx
c0013e2d:	83 ec 14             	sub    esp,0x14
c0013e30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e34:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e38:	89 d3                	mov    ebx,edx
c0013e3a:	0f b6 c6             	movzx  eax,dh
c0013e3d:	c1 eb 10             	shr    ebx,0x10
c0013e40:	48                   	dec    eax
c0013e41:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e46:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e4a:	0f b6 f5             	movzx  esi,ch
c0013e4d:	89 cf                	mov    edi,ecx
c0013e4f:	6b f6 3c             	imul   esi,esi,0x3c
c0013e52:	c1 ef 10             	shr    edi,0x10
c0013e55:	0f b6 c9             	movzx  ecx,cl
c0013e58:	89 f8                	mov    eax,edi
c0013e5a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e60:	0f b6 f8             	movzx  edi,al
c0013e63:	0f b6 d2             	movzx  edx,dl
c0013e66:	01 fe                	add    esi,edi
c0013e68:	01 f1                	add    ecx,esi
c0013e6a:	0f b7 f3             	movzx  esi,bx
c0013e6d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e71:	c1 f9 1f             	sar    ecx,0x1f
c0013e74:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e7d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e82:	8b 0c 8d 40 b9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd46c0]
c0013e89:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e8d:	76 29                	jbe    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013e8f:	f6 c3 03             	test   bl,0x3
c0013e92:	75 24                	jne    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013e94:	31 d2                	xor    edx,edx
c0013e96:	bf 64 00 00 00       	mov    edi,0x64
c0013e9b:	89 d8                	mov    eax,ebx
c0013e9d:	66 f7 f7             	div    di
c0013ea0:	66 85 d2             	test   dx,dx
c0013ea3:	75 12                	jne    c0013eb7 <datetimeToSeconds(datetime_t)+0x8e>
c0013ea5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eab:	bf 90 01 00 00       	mov    edi,0x190
c0013eb0:	99                   	cdq    
c0013eb1:	f7 ff                	idiv   edi
c0013eb3:	85 d2                	test   edx,edx
c0013eb5:	75 01                	jne    c0013eb8 <datetimeToSeconds(datetime_t)+0x8f>
c0013eb7:	41                   	inc    ecx
c0013eb8:	66 83 fb 46          	cmp    bx,0x46
c0013ebc:	76 45                	jbe    c0013f03 <datetimeToSeconds(datetime_t)+0xda>
c0013ebe:	bb 46 00 00 00       	mov    ebx,0x46
c0013ec3:	bf 64 00 00 00       	mov    edi,0x64
c0013ec8:	bd 90 01 00 00       	mov    ebp,0x190
c0013ecd:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ed2:	f6 c3 03             	test   bl,0x3
c0013ed5:	75 23                	jne    c0013efa <datetimeToSeconds(datetime_t)+0xd1>
c0013ed7:	89 d8                	mov    eax,ebx
c0013ed9:	99                   	cdq    
c0013eda:	f7 ff                	idiv   edi
c0013edc:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ee1:	85 d2                	test   edx,edx
c0013ee3:	75 15                	jne    c0013efa <datetimeToSeconds(datetime_t)+0xd1>
c0013ee5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013eeb:	99                   	cdq    
c0013eec:	f7 fd                	idiv   ebp
c0013eee:	83 fa 01             	cmp    edx,0x1
c0013ef1:	19 c0                	sbb    eax,eax
c0013ef3:	f7 d0                	not    eax
c0013ef5:	05 6e 01 00 00       	add    eax,0x16e
c0013efa:	01 c1                	add    ecx,eax
c0013efc:	43                   	inc    ebx
c0013efd:	39 f3                	cmp    ebx,esi
c0013eff:	7c cc                	jl     c0013ecd <datetimeToSeconds(datetime_t)+0xa4>
c0013f01:	eb 35                	jmp    c0013f38 <datetimeToSeconds(datetime_t)+0x10f>
c0013f03:	74 33                	je     c0013f38 <datetimeToSeconds(datetime_t)+0x10f>
c0013f05:	b8 45 00 00 00       	mov    eax,0x45
c0013f0a:	89 c2                	mov    edx,eax
c0013f0c:	83 e2 03             	and    edx,0x3
c0013f0f:	39 f0                	cmp    eax,esi
c0013f11:	7e 0f                	jle    c0013f22 <datetimeToSeconds(datetime_t)+0xf9>
c0013f13:	83 fa 01             	cmp    edx,0x1
c0013f16:	19 d2                	sbb    edx,edx
c0013f18:	48                   	dec    eax
c0013f19:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f20:	eb e8                	jmp    c0013f0a <datetimeToSeconds(datetime_t)+0xe1>
c0013f22:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f27:	85 d2                	test   edx,edx
c0013f29:	75 0b                	jne    c0013f36 <datetimeToSeconds(datetime_t)+0x10d>
c0013f2b:	66 83 fb 01          	cmp    bx,0x1
c0013f2f:	19 c0                	sbb    eax,eax
c0013f31:	05 6e 01 00 00       	add    eax,0x16e
c0013f36:	29 c1                	sub    ecx,eax
c0013f38:	b8 80 51 01 00       	mov    eax,0x15180
c0013f3d:	f7 e9                	imul   ecx
c0013f3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f43:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f47:	83 c4 14             	add    esp,0x14
c0013f4a:	5b                   	pop    ebx
c0013f4b:	5e                   	pop    esi
c0013f4c:	5f                   	pop    edi
c0013f4d:	5d                   	pop    ebp
c0013f4e:	c3                   	ret    
c0013f4f:	90                   	nop

c0013f50 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f50:	57                   	push   edi
c0013f51:	56                   	push   esi
c0013f52:	53                   	push   ebx
c0013f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f57:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f59:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f64:	e8 c0 fe ff ff       	call   c0013e29 <datetimeToSeconds(datetime_t)>
c0013f69:	59                   	pop    ecx
c0013f6a:	0f b6 0d 5c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f45c
c0013f71:	5b                   	pop    ebx
c0013f72:	03 0d 60 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f460
c0013f78:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f7e:	89 cb                	mov    ebx,ecx
c0013f80:	c1 fb 1f             	sar    ebx,0x1f
c0013f83:	29 c8                	sub    eax,ecx
c0013f85:	19 da                	sbb    edx,ebx
c0013f87:	31 c9                	xor    ecx,ecx
c0013f89:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013f90:	74 05                	je     c0013f97 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f92:	b9 08 07 00 00       	mov    ecx,0x708
c0013f97:	31 db                	xor    ebx,ebx
c0013f99:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f9d:	29 c8                	sub    eax,ecx
c0013f9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fa3:	19 da                	sbb    edx,ebx
c0013fa5:	89 f8                	mov    eax,edi
c0013fa7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fab:	5b                   	pop    ebx
c0013fac:	5e                   	pop    esi
c0013fad:	5f                   	pop    edi
c0013fae:	ff e0                	jmp    eax

c0013fb0 <secondsToDatetime(unsigned long long)>:
c0013fb0:	55                   	push   ebp
c0013fb1:	57                   	push   edi
c0013fb2:	56                   	push   esi
c0013fb3:	53                   	push   ebx
c0013fb4:	83 ec 1c             	sub    esp,0x1c
c0013fb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fbb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fbf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fc3:	6a 00                	push   0x0
c0013fc5:	68 80 51 01 00       	push   0x15180
c0013fca:	55                   	push   ebp
c0013fcb:	57                   	push   edi
c0013fcc:	e8 23 36 01 00       	call   c00275f4 <__udivdi3>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fde:	6a 00                	push   0x0
c0013fe0:	68 80 51 01 00       	push   0x15180
c0013fe5:	55                   	push   ebp
c0013fe6:	57                   	push   edi
c0013fe7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013fec:	e8 03 37 01 00       	call   c00276f4 <__umoddi3>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	99                   	cdq    
c0013ff5:	f7 ff                	idiv   edi
c0013ff7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ffc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013fff:	89 d0                	mov    eax,edx
c0014001:	99                   	cdq    
c0014002:	f7 ff                	idiv   edi
c0014004:	85 db                	test   ebx,ebx
c0014006:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014009:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001400c:	79 11                	jns    c001401f <secondsToDatetime(unsigned long long)+0x6f>
c001400e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014012:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014018:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001401d:	eb 07                	jmp    c0014026 <secondsToDatetime(unsigned long long)+0x76>
c001401f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014024:	89 d8                	mov    eax,ebx
c0014026:	bf b4 05 00 00       	mov    edi,0x5b4
c001402b:	99                   	cdq    
c001402c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014031:	f7 f9                	idiv   ecx
c0014033:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014038:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001403c:	31 d2                	xor    edx,edx
c001403e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014046:	01 c3                	add    ebx,eax
c0014048:	89 d8                	mov    eax,ebx
c001404a:	f7 f1                	div    ecx
c001404c:	31 d2                	xor    edx,edx
c001404e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014051:	89 d8                	mov    eax,ebx
c0014053:	f7 f7                	div    edi
c0014055:	31 d2                	xor    edx,edx
c0014057:	29 c1                	sub    ecx,eax
c0014059:	89 d8                	mov    eax,ebx
c001405b:	f7 f5                	div    ebp
c001405d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014062:	29 c1                	sub    ecx,eax
c0014064:	31 d2                	xor    edx,edx
c0014066:	89 c8                	mov    eax,ecx
c0014068:	f7 f5                	div    ebp
c001406a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001406f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014073:	31 d2                	xor    edx,edx
c0014075:	89 c8                	mov    eax,ecx
c0014077:	f7 f5                	div    ebp
c0014079:	31 d2                	xor    edx,edx
c001407b:	01 c3                	add    ebx,eax
c001407d:	89 c8                	mov    eax,ecx
c001407f:	f7 f7                	div    edi
c0014081:	bf 99 00 00 00       	mov    edi,0x99
c0014086:	29 c3                	sub    ebx,eax
c0014088:	31 d2                	xor    edx,edx
c001408a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014092:	29 c3                	sub    ebx,eax
c0014094:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014097:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001409a:	bb 05 00 00 00       	mov    ebx,0x5
c001409f:	83 c1 02             	add    ecx,0x2
c00140a2:	89 c8                	mov    eax,ecx
c00140a4:	f7 f7                	div    edi
c00140a6:	31 d2                	xor    edx,edx
c00140a8:	89 c7                	mov    edi,eax
c00140aa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140b0:	83 c0 02             	add    eax,0x2
c00140b3:	f7 f3                	div    ebx
c00140b5:	89 eb                	mov    ebx,ebp
c00140b7:	29 c3                	sub    ebx,eax
c00140b9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140bf:	88 1e                	mov    BYTE PTR [esi],bl
c00140c1:	19 c0                	sbb    eax,eax
c00140c3:	31 d2                	xor    edx,edx
c00140c5:	83 e0 0c             	and    eax,0xc
c00140c8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140cc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140d4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140d8:	83 f9 01             	cmp    ecx,0x1
c00140db:	0f 96 c2             	setbe  dl
c00140de:	41                   	inc    ecx
c00140df:	01 d0                	add    eax,edx
c00140e1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140e4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140e8:	83 c4 1c             	add    esp,0x1c
c00140eb:	89 f0                	mov    eax,esi
c00140ed:	5b                   	pop    ebx
c00140ee:	5e                   	pop    esi
c00140ef:	5f                   	pop    edi
c00140f0:	5d                   	pop    ebp
c00140f1:	c2 04 00             	ret    0x4

c00140f4 <Clock::timeInDatetimeLocal()>:
c00140f4:	53                   	push   ebx
c00140f5:	83 ec 14             	sub    esp,0x14
c00140f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014100:	e8 83 fc ff ff       	call   c0013d88 <Clock::timeInSecondsLocal()>
c0014105:	83 c4 0c             	add    esp,0xc
c0014108:	52                   	push   edx
c0014109:	50                   	push   eax
c001410a:	53                   	push   ebx
c001410b:	e8 a0 fe ff ff       	call   c0013fb0 <secondsToDatetime(unsigned long long)>
c0014110:	89 d8                	mov    eax,ebx
c0014112:	83 c4 14             	add    esp,0x14
c0014115:	5b                   	pop    ebx
c0014116:	c2 04 00             	ret    0x4
c0014119:	90                   	nop

c001411a <Device::hibernate()>:
c001411a:	c3                   	ret    
c001411b:	90                   	nop

c001411c <Device::wake()>:
c001411c:	c3                   	ret    
c001411d:	90                   	nop

c001411e <Device::detect()>:
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <Device::disableLegacy()>:
c0014120:	c3                   	ret    
c0014121:	90                   	nop

c0014122 <Device::powerSaving(PowerSavingLevel)>:
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <DriverlessDevice::close(int, int, void*)>:
c0014124:	31 c0                	xor    eax,eax
c0014126:	c3                   	ret    
c0014127:	90                   	nop

c0014128 <DriverlessDevice::detect()>:
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <DriverlessDevice::open(int, int, void*)>:
c001412a:	83 ec 18             	sub    esp,0x18
c001412d:	68 70 b9 02 c0       	push   0xc002b970
c0014132:	e8 9a 67 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0014137:	83 c8 ff             	or     eax,0xffffffff
c001413a:	83 c4 1c             	add    esp,0x1c
c001413d:	c3                   	ret    

c001413e <Device::~Device()>:
c001413e:	ba 98 b9 02 c0       	mov    edx,0xc002b998
c0014143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014147:	89 10                	mov    DWORD PTR [eax],edx
c0014149:	90                   	nop
c001414a:	c3                   	ret    
c001414b:	90                   	nop

c001414c <Device::~Device()>:
c001414c:	83 ec 0c             	sub    esp,0xc
c001414f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014153:	e8 e6 ff ff ff       	call   c001413e <Device::~Device()>
c0014158:	83 c4 04             	add    esp,0x4
c001415b:	83 ec 08             	sub    esp,0x8
c001415e:	68 58 01 00 00       	push   0x158
c0014163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014167:	e8 eb eb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	83 c4 0c             	add    esp,0xc
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::findAndLoadDriver()>:
c0014174:	c3                   	ret    
c0014175:	90                   	nop

c0014176 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014176:	57                   	push   edi
c0014177:	b9 09 00 00 00       	mov    ecx,0x9
c001417c:	56                   	push   esi
c001417d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014181:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014185:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001418f:	81 c7 18 01 00 00    	add    edi,0x118
c0014195:	fc                   	cld    
c0014196:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014198:	5e                   	pop    esi
c0014199:	5f                   	pop    edi
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <Device::preOpenACPI(void*, char*, char*)>:
c001419c:	57                   	push   edi
c001419d:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141a2:	56                   	push   esi
c00141a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141ab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141b5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141bb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141c7:	b9 0e 00 00 00       	mov    ecx,0xe
c00141cc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d8:	5e                   	pop    esi
c00141d9:	5f                   	pop    edi
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141e5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141ec:	75 0b                	jne    c00141f9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00141f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00141f7:	eb 1e                	jmp    c0014217 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00141f9:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00141fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014204:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001420a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001420c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014210:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014214:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014217:	ff e0                	jmp    eax
c0014219:	90                   	nop

c001421a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001421a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001421e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014223:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001422a:	75 0b                	jne    c0014237 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001422c:	8b 00                	mov    eax,DWORD PTR [eax]
c001422e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014232:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014235:	eb 1e                	jmp    c0014255 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014237:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001423c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014242:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014248:	8b 08                	mov    ecx,DWORD PTR [eax]
c001424a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001424e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014252:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014255:	ff e0                	jmp    eax
c0014257:	90                   	nop

c0014258 <Device::addChild(Device*)>:
c0014258:	53                   	push   ebx
c0014259:	83 ec 08             	sub    esp,0x8
c001425c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014264:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001426a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014270:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014272:	85 d2                	test   edx,edx
c0014274:	74 04                	je     c001427a <Device::addChild(Device*)+0x22>
c0014276:	89 d3                	mov    ebx,edx
c0014278:	eb f6                	jmp    c0014270 <Device::addChild(Device*)+0x18>
c001427a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001427d:	83 ec 0c             	sub    esp,0xc
c0014280:	6a 08                	push   0x8
c0014282:	e8 05 b6 ff ff       	call   c000f88c <malloc>
c0014287:	89 03                	mov    DWORD PTR [ebx],eax
c0014289:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001428f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014296:	83 c4 18             	add    esp,0x18
c0014299:	5b                   	pop    ebx
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <Device::removeAllChildren()>:
c001429c:	56                   	push   esi
c001429d:	53                   	push   ebx
c001429e:	52                   	push   edx
c001429f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142a3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ac:	74 17                	je     c00142c5 <Device::removeAllChildren()+0x29>
c00142ae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142b1:	85 c0                	test   eax,eax
c00142b3:	74 0c                	je     c00142c1 <Device::removeAllChildren()+0x25>
c00142b5:	83 ec 0c             	sub    esp,0xc
c00142b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00142ba:	50                   	push   eax
c00142bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142c3:	eb e4                	jmp    c00142a9 <Device::removeAllChildren()+0xd>
c00142c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142de:	58                   	pop    eax
c00142df:	5b                   	pop    ebx
c00142e0:	5e                   	pop    esi
c00142e1:	c3                   	ret    

c00142e2 <Device::hibernateAll()>:
c00142e2:	53                   	push   ebx
c00142e3:	83 ec 14             	sub    esp,0x14
c00142e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ec:	53                   	push   ebx
c00142ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142f6:	83 c4 10             	add    esp,0x10
c00142f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142fc:	74 0f                	je     c001430d <Device::hibernateAll()+0x2b>
c00142fe:	83 ec 0c             	sub    esp,0xc
c0014301:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014304:	e8 d9 ff ff ff       	call   c00142e2 <Device::hibernateAll()>
c0014309:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001430b:	eb e9                	jmp    c00142f6 <Device::hibernateAll()+0x14>
c001430d:	83 c4 08             	add    esp,0x8
c0014310:	5b                   	pop    ebx
c0014311:	c3                   	ret    

c0014312 <Device::wakeAll()>:
c0014312:	53                   	push   ebx
c0014313:	83 ec 14             	sub    esp,0x14
c0014316:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001431a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431c:	53                   	push   ebx
c001431d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014320:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001432c:	74 0f                	je     c001433d <Device::wakeAll()+0x2b>
c001432e:	83 ec 0c             	sub    esp,0xc
c0014331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014334:	e8 d9 ff ff ff       	call   c0014312 <Device::wakeAll()>
c0014339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001433b:	eb e9                	jmp    c0014326 <Device::wakeAll()+0x14>
c001433d:	83 c4 08             	add    esp,0x8
c0014340:	5b                   	pop    ebx
c0014341:	c3                   	ret    

c0014342 <Device::detectAll()>:
c0014342:	53                   	push   ebx
c0014343:	83 ec 14             	sub    esp,0x14
c0014346:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001434a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001434c:	53                   	push   ebx
c001434d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014350:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435c:	74 0f                	je     c001436d <Device::detectAll()+0x2b>
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014364:	e8 d9 ff ff ff       	call   c0014342 <Device::detectAll()>
c0014369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001436b:	eb e9                	jmp    c0014356 <Device::detectAll()+0x14>
c001436d:	83 c4 08             	add    esp,0x8
c0014370:	5b                   	pop    ebx
c0014371:	c3                   	ret    

c0014372 <Device::disableLegacyAll()>:
c0014372:	53                   	push   ebx
c0014373:	83 ec 14             	sub    esp,0x14
c0014376:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001437a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437c:	53                   	push   ebx
c001437d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014380:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438c:	74 0f                	je     c001439d <Device::disableLegacyAll()+0x2b>
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014394:	e8 d9 ff ff ff       	call   c0014372 <Device::disableLegacyAll()>
c0014399:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439b:	eb e9                	jmp    c0014386 <Device::disableLegacyAll()+0x14>
c001439d:	83 c4 08             	add    esp,0x8
c00143a0:	5b                   	pop    ebx
c00143a1:	c3                   	ret    

c00143a2 <Device::loadDriversForAll()>:
c00143a2:	53                   	push   ebx
c00143a3:	83 ec 08             	sub    esp,0x8
c00143a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143aa:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143b0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143b2:	85 db                	test   ebx,ebx
c00143b4:	74 12                	je     c00143c8 <Device::loadDriversForAll()+0x26>
c00143b6:	83 ec 0c             	sub    esp,0xc
c00143b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143bc:	e8 e1 ff ff ff       	call   c00143a2 <Device::loadDriversForAll()>
c00143c1:	83 c4 10             	add    esp,0x10
c00143c4:	89 d8                	mov    eax,ebx
c00143c6:	eb e8                	jmp    c00143b0 <Device::loadDriversForAll()+0xe>
c00143c8:	83 c4 08             	add    esp,0x8
c00143cb:	5b                   	pop    ebx
c00143cc:	c3                   	ret    
c00143cd:	90                   	nop

c00143ce <Device::closeAll()>:
c00143ce:	53                   	push   ebx
c00143cf:	83 ec 08             	sub    esp,0x8
c00143d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143d8:	6a 00                	push   0x0
c00143da:	6a 00                	push   0x0
c00143dc:	6a 00                	push   0x0
c00143de:	53                   	push   ebx
c00143df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ee:	74 0f                	je     c00143ff <Device::closeAll()+0x31>
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f6:	e8 d3 ff ff ff       	call   c00143ce <Device::closeAll()>
c00143fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143fd:	eb e9                	jmp    c00143e8 <Device::closeAll()+0x1a>
c00143ff:	83 c4 08             	add    esp,0x8
c0014402:	5b                   	pop    ebx
c0014403:	c3                   	ret    

c0014404 <Device::powerSavingAll(PowerSavingLevel)>:
c0014404:	56                   	push   esi
c0014405:	53                   	push   ebx
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001440d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014411:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014413:	56                   	push   esi
c0014414:	53                   	push   ebx
c0014415:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014418:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014424:	74 0f                	je     c0014435 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014426:	52                   	push   edx
c0014427:	52                   	push   edx
c0014428:	56                   	push   esi
c0014429:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442c:	e8 d3 ff ff ff       	call   c0014404 <Device::powerSavingAll(PowerSavingLevel)>
c0014431:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014433:	eb e9                	jmp    c001441e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014435:	58                   	pop    eax
c0014436:	5b                   	pop    ebx
c0014437:	5e                   	pop    esi
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <Device::setName(char const*)>:
c001443a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014442:	e9 c5 c3 fe ff       	jmp    c000080c <strcpy>
c0014447:	90                   	nop

c0014448 <Device::Device(char const*)>:
c0014448:	83 ec 1c             	sub    esp,0x1c
c001444b:	ba 98 b9 02 c0       	mov    edx,0xc002b998
c0014450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014454:	89 10                	mov    DWORD PTR [eax],edx
c0014456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014468:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014476:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014484:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001448e:	83 ec 08             	sub    esp,0x8
c0014491:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014495:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014499:	e8 9c ff ff ff       	call   c001443a <Device::setName(char const*)>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144a9:	83 ec 0c             	sub    esp,0xc
c00144ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144b0:	e8 d7 b3 ff ff       	call   c000f88c <malloc>
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014534:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001453e:	90                   	nop
c001453f:	83 c4 1c             	add    esp,0x1c
c0014542:	c3                   	ret    
c0014543:	90                   	nop

c0014544 <Device::getName()>:
c0014544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014548:	05 d0 00 00 00       	add    eax,0xd0
c001454d:	c3                   	ret    

c001454e <DriverlessDevice::DriverlessDevice(char const*)>:
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014555:	83 ec 08             	sub    esp,0x8
c0014558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455c:	50                   	push   eax
c001455d:	e8 e6 fe ff ff       	call   c0014448 <Device::Device(char const*)>
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	ba c4 b9 02 c0       	mov    edx,0xc002b9c4
c001456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456e:	89 10                	mov    DWORD PTR [eax],edx
c0014570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014574:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001457e:	90                   	nop
c001457f:	83 c4 0c             	add    esp,0xc
c0014582:	c3                   	ret    
c0014583:	90                   	nop

c0014584 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014584:	57                   	push   edi
c0014585:	56                   	push   esi
c0014586:	53                   	push   ebx
c0014587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001458b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001458f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014593:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014599:	75 0c                	jne    c00145a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001459b:	52                   	push   edx
c001459c:	52                   	push   edx
c001459d:	53                   	push   ebx
c001459e:	56                   	push   esi
c001459f:	e8 a2 4f 01 00       	call   c0029546 <LinkedList<Device>::addElement(Device*)>
c00145a4:	83 c4 10             	add    esp,0x10
c00145a7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145b0:	74 12                	je     c00145c4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145b2:	50                   	push   eax
c00145b3:	57                   	push   edi
c00145b4:	56                   	push   esi
c00145b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145b8:	e8 c7 ff ff ff       	call   c0014584 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	eb e9                	jmp    c00145ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145c4:	5b                   	pop    ebx
c00145c5:	5e                   	pop    esi
c00145c6:	5f                   	pop    edi
c00145c7:	c3                   	ret    

c00145c8 <getDevicesOfType(DeviceType)>:
c00145c8:	53                   	push   ebx
c00145c9:	83 ec 14             	sub    esp,0x14
c00145cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145d0:	53                   	push   ebx
c00145d1:	e8 4c 50 01 00       	call   c0029622 <LinkedList<Device>::LinkedList()>
c00145d6:	83 c4 0c             	add    esp,0xc
c00145d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145dd:	53                   	push   ebx
c00145de:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c00145e4:	e8 9b ff ff ff       	call   c0014584 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145e9:	89 d8                	mov    eax,ebx
c00145eb:	83 c4 18             	add    esp,0x18
c00145ee:	5b                   	pop    ebx
c00145ef:	c2 04 00             	ret    0x4

c00145f2 <HardDiskController::HardDiskController(char const*)>:
c00145f2:	83 ec 0c             	sub    esp,0xc
c00145f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f9:	83 ec 08             	sub    esp,0x8
c00145fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014600:	50                   	push   eax
c0014601:	e8 42 fe ff ff       	call   c0014448 <Device::Device(char const*)>
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	ba f0 b9 02 c0       	mov    edx,0xc002b9f0
c001460e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014612:	89 10                	mov    DWORD PTR [eax],edx
c0014614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014618:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014622:	90                   	nop
c0014623:	83 c4 0c             	add    esp,0xc
c0014626:	c3                   	ret    
c0014627:	90                   	nop

c0014628 <HardDiskController::~HardDiskController()>:
c0014628:	83 ec 0c             	sub    esp,0xc
c001462b:	ba f0 b9 02 c0       	mov    edx,0xc002b9f0
c0014630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014634:	89 10                	mov    DWORD PTR [eax],edx
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	83 ec 0c             	sub    esp,0xc
c001463d:	50                   	push   eax
c001463e:	e8 fb fa ff ff       	call   c001413e <Device::~Device()>
c0014643:	83 c4 10             	add    esp,0x10
c0014646:	90                   	nop
c0014647:	83 c4 0c             	add    esp,0xc
c001464a:	c3                   	ret    
c001464b:	90                   	nop

c001464c <HardDiskController::~HardDiskController()>:
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	83 ec 0c             	sub    esp,0xc
c0014652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014656:	e8 cd ff ff ff       	call   c0014628 <HardDiskController::~HardDiskController()>
c001465b:	83 c4 10             	add    esp,0x10
c001465e:	83 ec 08             	sub    esp,0x8
c0014661:	68 58 01 00 00       	push   0x158
c0014666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001466a:	e8 e8 e6 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	83 c4 0c             	add    esp,0xc
c0014675:	c3                   	ret    

c0014676 <PhysicalDisk::eject()>:
c0014676:	83 ec 18             	sub    esp,0x18
c0014679:	68 14 ba 02 c0       	push   0xc002ba14
c001467e:	e8 b4 e7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014683:	83 c8 ff             	or     eax,0xffffffff
c0014686:	83 c4 1c             	add    esp,0x1c
c0014689:	c3                   	ret    

c001468a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014691:	83 ec 08             	sub    esp,0x8
c0014694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014698:	50                   	push   eax
c0014699:	e8 aa fd ff ff       	call   c0014448 <Device::Device(char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	ba 44 ba 02 c0       	mov    edx,0xc002ba44
c00146a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146aa:	89 10                	mov    DWORD PTR [eax],edx
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146bb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146ec:	90                   	nop
c00146ed:	83 c4 0c             	add    esp,0xc
c00146f0:	c3                   	ret    
c00146f1:	90                   	nop

c00146f2 <PhysicalDisk::startCache()>:
c00146f2:	56                   	push   esi
c00146f3:	53                   	push   ebx
c00146f4:	83 ec 10             	sub    esp,0x10
c00146f7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146fb:	6a 44                	push   0x44
c00146fd:	e8 8a b1 ff ff       	call   c000f88c <malloc>
c0014702:	89 c6                	mov    esi,eax
c0014704:	58                   	pop    eax
c0014705:	5a                   	pop    edx
c0014706:	53                   	push   ebx
c0014707:	56                   	push   esi
c0014708:	e8 cf 28 00 00       	call   c0016fdc <VCache::VCache(PhysicalDisk*)>
c001470d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014713:	83 c4 14             	add    esp,0x14
c0014716:	5b                   	pop    ebx
c0014717:	5e                   	pop    esi
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <PhysicalDisk::~PhysicalDisk()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	ba 44 ba 02 c0       	mov    edx,0xc002ba44
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	89 10                	mov    DWORD PTR [eax],edx
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	50                   	push   eax
c0014730:	e8 09 fa ff ff       	call   c001413e <Device::~Device()>
c0014735:	83 c4 10             	add    esp,0x10
c0014738:	90                   	nop
c0014739:	83 c4 0c             	add    esp,0xc
c001473c:	c3                   	ret    
c001473d:	90                   	nop

c001473e <PhysicalDisk::~PhysicalDisk()>:
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014748:	e8 cd ff ff ff       	call   c001471a <PhysicalDisk::~PhysicalDisk()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	83 ec 08             	sub    esp,0x8
c0014753:	68 6c 01 00 00       	push   0x16c
c0014758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475c:	e8 f6 e5 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	83 c4 0c             	add    esp,0xc
c0014767:	c3                   	ret    

c0014768 <FPU::FPU(char const*)>:
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476f:	83 ec 08             	sub    esp,0x8
c0014772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014776:	50                   	push   eax
c0014777:	e8 cc fc ff ff       	call   c0014448 <Device::Device(char const*)>
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	ba 88 ba 02 c0       	mov    edx,0xc002ba88
c0014784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014788:	89 10                	mov    DWORD PTR [eax],edx
c001478a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014798:	90                   	nop
c0014799:	83 c4 0c             	add    esp,0xc
c001479c:	c3                   	ret    
c001479d:	90                   	nop

c001479e <FPU::~FPU()>:
c001479e:	83 ec 0c             	sub    esp,0xc
c00147a1:	ba 88 ba 02 c0       	mov    edx,0xc002ba88
c00147a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147aa:	89 10                	mov    DWORD PTR [eax],edx
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	83 ec 0c             	sub    esp,0xc
c00147b3:	50                   	push   eax
c00147b4:	e8 85 f9 ff ff       	call   c001413e <Device::~Device()>
c00147b9:	83 c4 10             	add    esp,0x10
c00147bc:	90                   	nop
c00147bd:	83 c4 0c             	add    esp,0xc
c00147c0:	c3                   	ret    
c00147c1:	90                   	nop

c00147c2 <FPU::~FPU()>:
c00147c2:	83 ec 0c             	sub    esp,0xc
c00147c5:	83 ec 0c             	sub    esp,0xc
c00147c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147cc:	e8 cd ff ff ff       	call   c001479e <FPU::~FPU()>
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	83 ec 08             	sub    esp,0x8
c00147d7:	68 58 01 00 00       	push   0x158
c00147dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e0:	e8 72 e5 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	83 c4 0c             	add    esp,0xc
c00147eb:	c3                   	ret    

c00147ec <setupFPU()>:
c00147ec:	53                   	push   ebx
c00147ed:	83 ec 08             	sub    esp,0x8
c00147f0:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c00147f6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00147fd:	74 19                	je     c0014818 <setupFPU()+0x2c>
c00147ff:	83 ec 0c             	sub    esp,0xc
c0014802:	68 58 01 00 00       	push   0x158
c0014807:	e8 80 b0 ff ff       	call   c000f88c <malloc>
c001480c:	89 c3                	mov    ebx,eax
c001480e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014811:	e8 5a 19 01 00       	call   c0026170 <AVX::AVX()>
c0014816:	eb 5b                	jmp    c0014873 <setupFPU()+0x87>
c0014818:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001481e:	84 c0                	test   al,al
c0014820:	79 19                	jns    c001483b <setupFPU()+0x4f>
c0014822:	83 ec 0c             	sub    esp,0xc
c0014825:	68 58 01 00 00       	push   0x158
c001482a:	e8 5d b0 ff ff       	call   c000f88c <malloc>
c001482f:	89 c3                	mov    ebx,eax
c0014831:	89 04 24             	mov    DWORD PTR [esp],eax
c0014834:	e8 5d 1a 01 00       	call   c0026296 <SSE::SSE()>
c0014839:	eb 38                	jmp    c0014873 <setupFPU()+0x87>
c001483b:	a8 20                	test   al,0x20
c001483d:	74 19                	je     c0014858 <setupFPU()+0x6c>
c001483f:	83 ec 0c             	sub    esp,0xc
c0014842:	68 58 01 00 00       	push   0x158
c0014847:	e8 40 b0 ff ff       	call   c000f88c <malloc>
c001484c:	89 c3                	mov    ebx,eax
c001484e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014851:	e8 aa 19 01 00       	call   c0026200 <MMX::MMX()>
c0014856:	eb 1b                	jmp    c0014873 <setupFPU()+0x87>
c0014858:	a8 10                	test   al,0x10
c001485a:	74 1c                	je     c0014878 <setupFPU()+0x8c>
c001485c:	83 ec 0c             	sub    esp,0xc
c001485f:	68 58 01 00 00       	push   0x158
c0014864:	e8 23 b0 ff ff       	call   c000f88c <malloc>
c0014869:	89 c3                	mov    ebx,eax
c001486b:	89 04 24             	mov    DWORD PTR [esp],eax
c001486e:	e8 b1 1a 01 00       	call   c0026324 <x87::x87()>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	eb 24                	jmp    c001489c <setupFPU()+0xb0>
c0014878:	83 e0 ef             	and    eax,0xffffffef
c001487b:	83 ec 0c             	sub    esp,0xc
c001487e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014884:	68 74 ba 02 c0       	push   0xc002ba74
c0014889:	e8 a9 e5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001488e:	0f 20 c0             	mov    eax,cr0
c0014891:	83 c8 04             	or     eax,0x4
c0014894:	0f 22 c0             	mov    cr0,eax
c0014897:	31 db                	xor    ebx,ebx
c0014899:	83 c4 10             	add    esp,0x10
c001489c:	89 d8                	mov    eax,ebx
c001489e:	83 c4 08             	add    esp,0x8
c00148a1:	5b                   	pop    ebx
c00148a2:	c3                   	ret    
c00148a3:	90                   	nop

c00148a4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148ac:	c1 e0 04             	shl    eax,0x4
c00148af:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148b3:	8d 50 10             	lea    edx,[eax+0x10]
c00148b6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148bc:	74 08                	je     c00148c6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148be:	83 c0 04             	add    eax,0x4
c00148c1:	39 d0                	cmp    eax,edx
c00148c3:	75 f1                	jne    c00148b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148c5:	c3                   	ret    
c00148c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148d0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148da:	eb e2                	jmp    c00148be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148dc:	57                   	push   edi
c00148dd:	31 c0                	xor    eax,eax
c00148df:	56                   	push   esi
c00148e0:	53                   	push   ebx
c00148e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148ed:	89 da                	mov    edx,ebx
c00148ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148f3:	c1 e2 04             	shl    edx,0x4
c00148f6:	01 ca                	add    edx,ecx
c00148f8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014900:	74 16                	je     c0014918 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014902:	40                   	inc    eax
c0014903:	83 f8 04             	cmp    eax,0x4
c0014906:	75 f0                	jne    c00148f8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014908:	c7 44 24 10 b8 ba 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bab8
c0014910:	5b                   	pop    ebx
c0014911:	5e                   	pop    esi
c0014912:	5f                   	pop    edi
c0014913:	e9 b9 5f 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c0014918:	8d 04 98             	lea    eax,[eax+ebx*4]
c001491b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001491e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014924:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001492a:	5b                   	pop    ebx
c001492b:	5e                   	pop    esi
c001492c:	5f                   	pop    edi
c001492d:	c3                   	ret    

c001492e <doubleFault(regs*, void*)>:
c001492e:	55                   	push   ebp
c001492f:	89 e5                	mov    ebp,esp
c0014931:	83 ec 08             	sub    esp,0x8
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	68 f3 ba 02 c0       	push   0xc002baf3
c001493c:	e8 90 5f 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	90                   	nop
c0014945:	c9                   	leave  
c0014946:	c3                   	ret    
c0014947:	90                   	nop

c0014948 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014948:	56                   	push   esi
c0014949:	53                   	push   ebx
c001494a:	50                   	push   eax
c001494b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001494f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014953:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014958:	75 35                	jne    c001498f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001495a:	8d 43 20             	lea    eax,[ebx+0x20]
c001495d:	31 d2                	xor    edx,edx
c001495f:	89 c1                	mov    ecx,eax
c0014961:	c1 e1 04             	shl    ecx,0x4
c0014964:	01 f1                	add    ecx,esi
c0014966:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001496e:	74 3e                	je     c00149ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014970:	42                   	inc    edx
c0014971:	83 fa 04             	cmp    edx,0x4
c0014974:	75 f0                	jne    c0014966 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	68 38 bb 02 c0       	push   0xc002bb38
c001497e:	e8 4e 5f 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0014983:	83 c4 10             	add    esp,0x10
c0014986:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001498b:	5a                   	pop    edx
c001498c:	5b                   	pop    ebx
c001498d:	5e                   	pop    esi
c001498e:	c3                   	ret    
c001498f:	83 ec 0c             	sub    esp,0xc
c0014992:	56                   	push   esi
c0014993:	e8 ac fb ff ff       	call   c0014544 <Device::getName()>
c0014998:	83 c4 10             	add    esp,0x10
c001499b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001499e:	75 ba                	jne    c001495a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149a0:	83 fb 0f             	cmp    ebx,0xf
c00149a3:	7f 29                	jg     c00149ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149a5:	0f b6 9b 20 e5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ae0]
c00149ac:	eb ac                	jmp    c001495a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ae:	8d 04 82             	lea    eax,[edx+eax*4]
c00149b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149b5:	8d 04 86             	lea    eax,[esi+eax*4]
c00149b8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149c2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149c8:	89 d8                	mov    eax,ebx
c00149ca:	5a                   	pop    edx
c00149cb:	5b                   	pop    ebx
c00149cc:	5e                   	pop    esi
c00149cd:	c3                   	ret    
c00149ce:	83 ec 0c             	sub    esp,0xc
c00149d1:	68 00 bb 02 c0       	push   0xc002bb00
c00149d6:	e8 f6 5e 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	e9 77 ff ff ff       	jmp    c001495a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149e3:	90                   	nop

c00149e4 <InterruptController::clearAllHandlers(int, bool)>:
c00149e4:	56                   	push   esi
c00149e5:	53                   	push   ebx
c00149e6:	52                   	push   edx
c00149e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149ef:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00149f4:	75 61                	jne    c0014a57 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00149f6:	8d 46 20             	lea    eax,[esi+0x20]
c00149f9:	c1 e6 04             	shl    esi,0x4
c00149fc:	c1 e0 04             	shl    eax,0x4
c00149ff:	01 de                	add    esi,ebx
c0014a01:	01 d8                	add    eax,ebx
c0014a03:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a0d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a17:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a21:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a2b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a35:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a3f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a49:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a53:	58                   	pop    eax
c0014a54:	5b                   	pop    ebx
c0014a55:	5e                   	pop    esi
c0014a56:	c3                   	ret    
c0014a57:	83 ec 0c             	sub    esp,0xc
c0014a5a:	53                   	push   ebx
c0014a5b:	e8 e4 fa ff ff       	call   c0014544 <Device::getName()>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a66:	75 8e                	jne    c00149f6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a68:	83 fe 0f             	cmp    esi,0xf
c0014a6b:	7f 09                	jg     c0014a76 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a6d:	0f b6 b6 20 e5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ae0]
c0014a74:	eb 80                	jmp    c00149f6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a76:	83 ec 0c             	sub    esp,0xc
c0014a79:	68 74 bb 02 c0       	push   0xc002bb74
c0014a7e:	e8 4e 5e 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0014a83:	83 c4 10             	add    esp,0x10
c0014a86:	e9 6b ff ff ff       	jmp    c00149f6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a8b:	90                   	nop

c0014a8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a8c:	56                   	push   esi
c0014a8d:	53                   	push   ebx
c0014a8e:	52                   	push   edx
c0014a8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a97:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a9c:	75 3a                	jne    c0014ad8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aa2:	8d 50 20             	lea    edx,[eax+0x20]
c0014aa5:	c1 e2 04             	shl    edx,0x4
c0014aa8:	8d 04 16             	lea    eax,[esi+edx*1]
c0014aab:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014aaf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ab5:	74 0b                	je     c0014ac2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ab7:	83 c0 04             	add    eax,0x4
c0014aba:	39 d0                	cmp    eax,edx
c0014abc:	75 f1                	jne    c0014aaf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014abe:	58                   	pop    eax
c0014abf:	5b                   	pop    ebx
c0014ac0:	5e                   	pop    esi
c0014ac1:	c3                   	ret    
c0014ac2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014acc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ad6:	eb df                	jmp    c0014ab7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	56                   	push   esi
c0014adc:	e8 63 fa ff ff       	call   c0014544 <Device::getName()>
c0014ae1:	83 c4 10             	add    esp,0x10
c0014ae4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ae7:	75 b5                	jne    c0014a9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ae9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014aee:	7f 11                	jg     c0014b01 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014af0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014af4:	0f b6 80 20 e5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ae0]
c0014afb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014aff:	eb 9d                	jmp    c0014a9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	68 74 bb 02 c0       	push   0xc002bb74
c0014b09:	e8 c3 5d 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	eb 8b                	jmp    c0014a9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b13 <nmiHandler(regs*, void*)>:
c0014b13:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014b18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b1c:	e9 b5 a4 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014b21 <int_handler>:
c0014b21:	55                   	push   ebp
c0014b22:	57                   	push   edi
c0014b23:	56                   	push   esi
c0014b24:	53                   	push   ebx
c0014b25:	83 ec 0c             	sub    esp,0xc
c0014b28:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b2c:	80 3d 24 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e24,0x0
c0014b33:	74 0b                	je     c0014b40 <int_handler+0x1f>
c0014b35:	fa                   	cli    
c0014b36:	f4                   	hlt    
c0014b37:	80 3d 24 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e24,0x0
c0014b3e:	75 f5                	jne    c0014b35 <int_handler+0x14>
c0014b40:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014b45:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b4e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b54:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b57:	83 f8 17             	cmp    eax,0x17
c0014b5a:	77 13                	ja     c0014b6f <int_handler+0x4e>
c0014b5c:	83 ec 08             	sub    esp,0x8
c0014b5f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b61:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b64:	0f b6 c0             	movzx  eax,al
c0014b67:	50                   	push   eax
c0014b68:	57                   	push   edi
c0014b69:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	83 c3 15             	add    ebx,0x15
c0014b72:	c1 e3 04             	shl    ebx,0x4
c0014b75:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b79:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b80:	31 db                	xor    ebx,ebx
c0014b82:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b86:	85 c0                	test   eax,eax
c0014b88:	74 13                	je     c0014b9d <int_handler+0x7c>
c0014b8a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b8d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b91:	74 1c                	je     c0014baf <int_handler+0x8e>
c0014b93:	83 ec 08             	sub    esp,0x8
c0014b96:	52                   	push   edx
c0014b97:	56                   	push   esi
c0014b98:	ff d0                	call   eax
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	43                   	inc    ebx
c0014b9e:	83 fb 04             	cmp    ebx,0x4
c0014ba1:	75 df                	jne    c0014b82 <int_handler+0x61>
c0014ba3:	83 c4 0c             	add    esp,0xc
c0014ba6:	31 c0                	xor    eax,eax
c0014ba8:	5b                   	pop    ebx
c0014ba9:	31 d2                	xor    edx,edx
c0014bab:	5e                   	pop    esi
c0014bac:	5f                   	pop    edi
c0014bad:	5d                   	pop    ebp
c0014bae:	c3                   	ret    
c0014baf:	83 ec 08             	sub    esp,0x8
c0014bb2:	52                   	push   edx
c0014bb3:	56                   	push   esi
c0014bb4:	ff d0                	call   eax
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	83 c4 0c             	add    esp,0xc
c0014bbc:	5b                   	pop    ebx
c0014bbd:	5e                   	pop    esi
c0014bbe:	5f                   	pop    edi
c0014bbf:	5d                   	pop    ebp
c0014bc0:	c3                   	ret    
c0014bc1:	90                   	nop

c0014bc2 <InterruptController::InterruptController(char const*)>:
c0014bc2:	83 ec 1c             	sub    esp,0x1c
c0014bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc9:	83 ec 08             	sub    esp,0x8
c0014bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bd0:	50                   	push   eax
c0014bd1:	e8 72 f8 ff ff       	call   c0014448 <Device::Device(char const*)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0014bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014be2:	89 10                	mov    DWORD PTR [eax],edx
c0014be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014be8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014bf2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bfa:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c02:	7f 5e                	jg     c0014c62 <InterruptController::InterruptController(char const*)+0xa0>
c0014c04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c0c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c11:	7f 49                	jg     c0014c5c <InterruptController::InterruptController(char const*)+0x9a>
c0014c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c1b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c26:	01 ca                	add    edx,ecx
c0014c28:	83 c2 54             	add    edx,0x54
c0014c2b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c3b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c46:	01 ca                	add    edx,ecx
c0014c48:	81 c2 54 04 00 00    	add    edx,0x454
c0014c4e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c56:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c5a:	eb b0                	jmp    c0014c0c <InterruptController::InterruptController(char const*)+0x4a>
c0014c5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c60:	eb 98                	jmp    c0014bfa <InterruptController::InterruptController(char const*)+0x38>
c0014c62:	90                   	nop
c0014c63:	83 c4 1c             	add    esp,0x1c
c0014c66:	c3                   	ret    
c0014c67:	90                   	nop

c0014c68 <InterruptController::~InterruptController()>:
c0014c68:	83 ec 0c             	sub    esp,0xc
c0014c6b:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0014c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c74:	89 10                	mov    DWORD PTR [eax],edx
c0014c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c7a:	83 ec 0c             	sub    esp,0xc
c0014c7d:	50                   	push   eax
c0014c7e:	e8 bb f4 ff ff       	call   c001413e <Device::~Device()>
c0014c83:	83 c4 10             	add    esp,0x10
c0014c86:	90                   	nop
c0014c87:	83 c4 0c             	add    esp,0xc
c0014c8a:	c3                   	ret    
c0014c8b:	90                   	nop

c0014c8c <InterruptController::~InterruptController()>:
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	83 ec 0c             	sub    esp,0xc
c0014c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c96:	e8 cd ff ff ff       	call   c0014c68 <InterruptController::~InterruptController()>
c0014c9b:	83 c4 10             	add    esp,0x10
c0014c9e:	83 ec 08             	sub    esp,0x8
c0014ca1:	68 58 21 00 00       	push   0x2158
c0014ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014caa:	e8 a8 e0 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	83 c4 0c             	add    esp,0xc
c0014cb5:	c3                   	ret    

c0014cb6 <displayDebugInfo(regs*)>:
c0014cb6:	55                   	push   ebp
c0014cb7:	57                   	push   edi
c0014cb8:	56                   	push   esi
c0014cb9:	53                   	push   ebx
c0014cba:	83 ec 24             	sub    esp,0x24
c0014cbd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014cc1:	0f 20 c2             	mov    edx,cr0
c0014cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cc8:	0f 20 d7             	mov    edi,cr2
c0014ccb:	0f 20 de             	mov    esi,cr3
c0014cce:	0f 20 e5             	mov    ebp,cr4
c0014cd1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cd4:	68 ae bb 02 c0       	push   0xc002bbae
c0014cd9:	e8 59 e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014cde:	59                   	pop    ecx
c0014cdf:	58                   	pop    eax
c0014ce0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ce3:	68 b9 bb 02 c0       	push   0xc002bbb9
c0014ce8:	e8 4a e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014ced:	58                   	pop    eax
c0014cee:	5a                   	pop    edx
c0014cef:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014cf2:	68 c4 bb 02 c0       	push   0xc002bbc4
c0014cf7:	e8 3b e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014cfc:	59                   	pop    ecx
c0014cfd:	58                   	pop    eax
c0014cfe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d01:	68 cf bb 02 c0       	push   0xc002bbcf
c0014d06:	e8 2c e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d0b:	58                   	pop    eax
c0014d0c:	5a                   	pop    edx
c0014d0d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d10:	68 da bb 02 c0       	push   0xc002bbda
c0014d15:	e8 1d e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d1a:	59                   	pop    ecx
c0014d1b:	58                   	pop    eax
c0014d1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d1f:	68 e5 bb 02 c0       	push   0xc002bbe5
c0014d24:	e8 0e e1 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d29:	58                   	pop    eax
c0014d2a:	5a                   	pop    edx
c0014d2b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d2e:	68 f0 bb 02 c0       	push   0xc002bbf0
c0014d33:	e8 ff e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d38:	59                   	pop    ecx
c0014d39:	58                   	pop    eax
c0014d3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d3d:	68 fb bb 02 c0       	push   0xc002bbfb
c0014d42:	e8 f0 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d47:	58                   	pop    eax
c0014d48:	5a                   	pop    edx
c0014d49:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d4c:	68 06 bc 02 c0       	push   0xc002bc06
c0014d51:	e8 e1 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d56:	59                   	pop    ecx
c0014d57:	58                   	pop    eax
c0014d58:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d5b:	68 15 bc 02 c0       	push   0xc002bc15
c0014d60:	e8 d2 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d65:	58                   	pop    eax
c0014d66:	5a                   	pop    edx
c0014d67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d6a:	68 20 bc 02 c0       	push   0xc002bc20
c0014d6f:	e8 c3 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d74:	59                   	pop    ecx
c0014d75:	58                   	pop    eax
c0014d76:	57                   	push   edi
c0014d77:	68 2b bc 02 c0       	push   0xc002bc2b
c0014d7c:	e8 b6 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d81:	58                   	pop    eax
c0014d82:	5a                   	pop    edx
c0014d83:	56                   	push   esi
c0014d84:	68 36 bc 02 c0       	push   0xc002bc36
c0014d89:	e8 a9 e0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0014d8e:	59                   	pop    ecx
c0014d8f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014d94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d9a:	e8 bb be ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c0014d9f:	58                   	pop    eax
c0014da0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014da3:	5a                   	pop    edx
c0014da4:	c1 e0 05             	shl    eax,0x5
c0014da7:	05 80 e2 02 c0       	add    eax,0xc002e280
c0014dac:	50                   	push   eax
c0014dad:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014db2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db8:	e8 29 c2 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014dbd:	59                   	pop    ecx
c0014dbe:	58                   	pop    eax
c0014dbf:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014dc4:	68 41 bc 02 c0       	push   0xc002bc41
c0014dc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dcf:	e8 12 c2 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014dd4:	58                   	pop    eax
c0014dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dda:	5a                   	pop    edx
c0014ddb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dde:	83 c0 0c             	add    eax,0xc
c0014de1:	50                   	push   eax
c0014de2:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014de7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ded:	e8 f4 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014df2:	59                   	pop    ecx
c0014df3:	58                   	pop    eax
c0014df4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014df9:	68 4a bc 02 c0       	push   0xc002bc4a
c0014dfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e04:	e8 dd c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e09:	58                   	pop    eax
c0014e0a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e0f:	5a                   	pop    edx
c0014e10:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e19:	e8 ee c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e1e:	59                   	pop    ecx
c0014e1f:	58                   	pop    eax
c0014e20:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e25:	68 52 bc 02 c0       	push   0xc002bc52
c0014e2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e30:	e8 b1 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e35:	58                   	pop    eax
c0014e36:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e3b:	5a                   	pop    edx
c0014e3c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e45:	e8 c2 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e4a:	59                   	pop    ecx
c0014e4b:	58                   	pop    eax
c0014e4c:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e51:	68 5a bc 02 c0       	push   0xc002bc5a
c0014e56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e5c:	e8 85 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e61:	58                   	pop    eax
c0014e62:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e67:	5a                   	pop    edx
c0014e68:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e71:	e8 96 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014e76:	59                   	pop    ecx
c0014e77:	58                   	pop    eax
c0014e78:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e7d:	68 62 bc 02 c0       	push   0xc002bc62
c0014e82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e88:	e8 59 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014e8d:	58                   	pop    eax
c0014e8e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e93:	5a                   	pop    edx
c0014e94:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9d:	e8 6a c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ea2:	59                   	pop    ecx
c0014ea3:	58                   	pop    eax
c0014ea4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ea9:	68 6a bc 02 c0       	push   0xc002bc6a
c0014eae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb4:	e8 2d c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014eb9:	58                   	pop    eax
c0014eba:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ebf:	5a                   	pop    edx
c0014ec0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec9:	e8 3e c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014ece:	59                   	pop    ecx
c0014ecf:	58                   	pop    eax
c0014ed0:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ed5:	68 72 bc 02 c0       	push   0xc002bc72
c0014eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee0:	e8 01 c1 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014ee5:	58                   	pop    eax
c0014ee6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014eeb:	5a                   	pop    edx
c0014eec:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014eef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef5:	e8 12 c1 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f01:	68 7a bc 02 c0       	push   0xc002bc7a
c0014f06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0c:	e8 d5 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f11:	58                   	pop    eax
c0014f12:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f17:	5a                   	pop    edx
c0014f18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f1c:	52                   	push   edx
c0014f1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f23:	e8 e4 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f28:	59                   	pop    ecx
c0014f29:	58                   	pop    eax
c0014f2a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f2f:	68 83 bc 02 c0       	push   0xc002bc83
c0014f34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3a:	e8 a7 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f3f:	58                   	pop    eax
c0014f40:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f45:	5a                   	pop    edx
c0014f46:	57                   	push   edi
c0014f47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4d:	e8 ba c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f52:	59                   	pop    ecx
c0014f53:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f58:	5f                   	pop    edi
c0014f59:	68 8b bc 02 c0       	push   0xc002bc8b
c0014f5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f64:	e8 7d c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f69:	58                   	pop    eax
c0014f6a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f6f:	5a                   	pop    edx
c0014f70:	56                   	push   esi
c0014f71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f77:	e8 90 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014f7c:	59                   	pop    ecx
c0014f7d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f82:	5e                   	pop    esi
c0014f83:	68 93 bc 02 c0       	push   0xc002bc93
c0014f88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8e:	e8 53 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014f93:	5f                   	pop    edi
c0014f94:	58                   	pop    eax
c0014f95:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f9a:	55                   	push   ebp
c0014f9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa1:	e8 66 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fa6:	58                   	pop    eax
c0014fa7:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014fac:	5a                   	pop    edx
c0014fad:	68 9b bc 02 c0       	push   0xc002bc9b
c0014fb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb8:	e8 29 c0 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014fbd:	0f 21 c0             	mov    eax,db0
c0014fc0:	59                   	pop    ecx
c0014fc1:	5e                   	pop    esi
c0014fc2:	50                   	push   eax
c0014fc3:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014fc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fce:	e8 39 c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0014fd3:	5f                   	pop    edi
c0014fd4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014fd9:	5d                   	pop    ebp
c0014fda:	68 a4 bc 02 c0       	push   0xc002bca4
c0014fdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe5:	e8 fc bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0014fea:	0f 21 c8             	mov    eax,db1
c0014fed:	5a                   	pop    edx
c0014fee:	59                   	pop    ecx
c0014fef:	50                   	push   eax
c0014ff0:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffb:	e8 0c c0 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015000:	5e                   	pop    esi
c0015001:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015006:	5f                   	pop    edi
c0015007:	68 ac bc 02 c0       	push   0xc002bcac
c001500c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015012:	e8 cf bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015017:	0f 21 d0             	mov    eax,db2
c001501a:	5d                   	pop    ebp
c001501b:	5a                   	pop    edx
c001501c:	50                   	push   eax
c001501d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015022:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015028:	e8 df bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001502d:	59                   	pop    ecx
c001502e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015033:	5e                   	pop    esi
c0015034:	68 b4 bc 02 c0       	push   0xc002bcb4
c0015039:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503f:	e8 a2 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015044:	0f 21 d8             	mov    eax,db3
c0015047:	5f                   	pop    edi
c0015048:	5d                   	pop    ebp
c0015049:	50                   	push   eax
c001504a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001504f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015055:	e8 b2 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001505a:	58                   	pop    eax
c001505b:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015060:	5a                   	pop    edx
c0015061:	68 bc bc 02 c0       	push   0xc002bcbc
c0015066:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506c:	e8 75 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015071:	0f 21 f0             	mov    eax,db6
c0015074:	59                   	pop    ecx
c0015075:	5e                   	pop    esi
c0015076:	50                   	push   eax
c0015077:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001507c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015082:	e8 85 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015087:	5f                   	pop    edi
c0015088:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001508d:	5d                   	pop    ebp
c001508e:	68 c4 bc 02 c0       	push   0xc002bcc4
c0015093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015099:	e8 48 bf ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001509e:	0f 21 f8             	mov    eax,db7
c00150a1:	5a                   	pop    edx
c00150a2:	59                   	pop    ecx
c00150a3:	50                   	push   eax
c00150a4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150af:	e8 58 bf ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c00150b4:	5e                   	pop    esi
c00150b5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150b8:	e8 97 8b 00 00       	call   c001dc54 <Thr::getDriverNameFromAddress(unsigned long)>
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	85 c0                	test   eax,eax
c00150c2:	74 7d                	je     c0015141 <displayDebugInfo(regs*)+0x48b>
c00150c4:	89 c6                	mov    esi,eax
c00150c6:	50                   	push   eax
c00150c7:	50                   	push   eax
c00150c8:	56                   	push   esi
c00150c9:	68 cc bc 02 c0       	push   0xc002bccc
c00150ce:	e8 64 dd ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00150d3:	5a                   	pop    edx
c00150d4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150d9:	59                   	pop    ecx
c00150da:	68 da bc 02 c0       	push   0xc002bcda
c00150df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e5:	e8 fc be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c00150ea:	5f                   	pop    edi
c00150eb:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150f0:	5d                   	pop    ebp
c00150f1:	56                   	push   esi
c00150f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f8:	e8 e9 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c00150fd:	58                   	pop    eax
c00150fe:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015103:	5a                   	pop    edx
c0015104:	68 e6 bc 02 c0       	push   0xc002bce6
c0015109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510f:	e8 d2 be ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c0015114:	59                   	pop    ecx
c0015115:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001511a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015120:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015123:	e8 63 8b 00 00       	call   c001dc8b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015128:	5b                   	pop    ebx
c0015129:	5d                   	pop    ebp
c001512a:	50                   	push   eax
c001512b:	57                   	push   edi
c001512c:	e8 db be ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c0015131:	58                   	pop    eax
c0015132:	5a                   	pop    edx
c0015133:	56                   	push   esi
c0015134:	68 f2 bc 02 c0       	push   0xc002bcf2
c0015139:	e8 f9 dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001513e:	83 c4 10             	add    esp,0x10
c0015141:	fa                   	cli    
c0015142:	f4                   	hlt    
c0015143:	eb fe                	jmp    c0015143 <displayDebugInfo(regs*)+0x48d>

c0015145 <x87EmulHandler(regs*, void*)>:
c0015145:	83 ec 0c             	sub    esp,0xc
c0015148:	0f 20 c2             	mov    edx,cr0
c001514b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015150:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015154:	75 4b                	jne    c00151a1 <x87EmulHandler(regs*, void*)+0x5c>
c0015156:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001515b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015161:	85 c0                	test   eax,eax
c0015163:	74 05                	je     c001516a <x87EmulHandler(regs*, void*)+0x25>
c0015165:	83 e2 08             	and    edx,0x8
c0015168:	75 17                	jne    c0015181 <x87EmulHandler(regs*, void*)+0x3c>
c001516a:	83 ec 0c             	sub    esp,0xc
c001516d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015171:	e8 4e b1 00 00       	call   c00202c4 <Vm::x87Handler(regs*)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	84 c0                	test   al,al
c001517b:	74 24                	je     c00151a1 <x87EmulHandler(regs*, void*)+0x5c>
c001517d:	83 c4 0c             	add    esp,0xc
c0015180:	c3                   	ret    
c0015181:	83 ec 0c             	sub    esp,0xc
c0015184:	68 18 bd 02 c0       	push   0xc002bd18
c0015189:	e8 a9 dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001518e:	0f 06                	clts   
c0015190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	a3 68 f4 02 c0       	mov    ds:0xc002f468,eax
c001519d:	83 c4 0c             	add    esp,0xc
c00151a0:	c3                   	ret    
c00151a1:	83 ec 0c             	sub    esp,0xc
c00151a4:	68 02 bd 02 c0       	push   0xc002bd02
c00151a9:	e8 89 dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00151ae:	5a                   	pop    edx
c00151af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151b3:	e8 fe fa ff ff       	call   c0014cb6 <displayDebugInfo(regs*)>

c00151b8 <gpFault(regs*, void*)>:
c00151b8:	53                   	push   ebx
c00151b9:	83 ec 14             	sub    esp,0x14
c00151bc:	c7 05 64 f4 02 c0 41 f6 01 c0 	mov    DWORD PTR ds:0xc002f464,0xc001f641
c00151c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151ca:	53                   	push   ebx
c00151cb:	e8 71 a4 00 00       	call   c001f641 <Vm::faultHandler(regs*)>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	84 c0                	test   al,al
c00151d5:	74 05                	je     c00151dc <gpFault(regs*, void*)+0x24>
c00151d7:	83 c4 08             	add    esp,0x8
c00151da:	5b                   	pop    ebx
c00151db:	c3                   	ret    
c00151dc:	83 ec 0c             	sub    esp,0xc
c00151df:	68 25 bd 02 c0       	push   0xc002bd25
c00151e4:	e8 4e dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00151e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151ec:	e8 c5 fa ff ff       	call   c0014cb6 <displayDebugInfo(regs*)>

c00151f1 <pgFault(regs*, void*)>:
c00151f1:	83 ec 14             	sub    esp,0x14
c00151f4:	0f 20 d0             	mov    eax,cr2
c00151f7:	50                   	push   eax
c00151f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015200:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015206:	e8 49 d8 ff ff       	call   c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)>
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	84 c0                	test   al,al
c0015210:	74 04                	je     c0015216 <pgFault(regs*, void*)+0x25>
c0015212:	83 c4 0c             	add    esp,0xc
c0015215:	c3                   	ret    
c0015216:	83 ec 0c             	sub    esp,0xc
c0015219:	68 40 bd 02 c0       	push   0xc002bd40
c001521e:	e8 14 dc ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015223:	58                   	pop    eax
c0015224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015228:	e8 89 fa ff ff       	call   c0014cb6 <displayDebugInfo(regs*)>

c001522d <otherISRHandler(regs*, void*)>:
c001522d:	53                   	push   ebx
c001522e:	83 ec 0c             	sub    esp,0xc
c0015231:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015235:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015238:	50                   	push   eax
c0015239:	50                   	push   eax
c001523a:	68 4d bd 02 c0       	push   0xc002bd4d
c001523f:	e8 f3 db ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015247:	e8 6a fa ff ff       	call   c0014cb6 <displayDebugInfo(regs*)>

c001524c <opcodeFault(regs*, void*)>:
c001524c:	55                   	push   ebp
c001524d:	89 e5                	mov    ebp,esp
c001524f:	56                   	push   esi
c0015250:	53                   	push   ebx
c0015251:	83 ec 40             	sub    esp,0x40
c0015254:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015259:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001525f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015265:	84 c0                	test   al,al
c0015267:	74 24                	je     c001528d <opcodeFault(regs*, void*)+0x41>
c0015269:	83 ec 0c             	sub    esp,0xc
c001526c:	68 6c bd 02 c0       	push   0xc002bd6c
c0015271:	e8 c1 db ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527f:	8d 50 19             	lea    edx,[eax+0x19]
c0015282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015285:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015288:	e9 d5 05 00 00       	jmp    c0015862 <opcodeFault(regs*, void*)+0x616>
c001528d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015290:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015293:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015296:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001529a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001529e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152aa:	8a 00                	mov    al,BYTE PTR [eax]
c00152ac:	3c f0                	cmp    al,0xf0
c00152ae:	75 17                	jne    c00152c7 <opcodeFault(regs*, void*)+0x7b>
c00152b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b9:	8d 50 01             	lea    edx,[eax+0x1]
c00152bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152c2:	e9 da 00 00 00       	jmp    c00153a1 <opcodeFault(regs*, void*)+0x155>
c00152c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ca:	8a 00                	mov    al,BYTE PTR [eax]
c00152cc:	3c f2                	cmp    al,0xf2
c00152ce:	74 09                	je     c00152d9 <opcodeFault(regs*, void*)+0x8d>
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	8a 00                	mov    al,BYTE PTR [eax]
c00152d5:	3c f3                	cmp    al,0xf3
c00152d7:	75 1b                	jne    c00152f4 <opcodeFault(regs*, void*)+0xa8>
c00152d9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e6:	8d 50 01             	lea    edx,[eax+0x1]
c00152e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ef:	e9 ad 00 00 00       	jmp    c00153a1 <opcodeFault(regs*, void*)+0x155>
c00152f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f7:	8a 00                	mov    al,BYTE PTR [eax]
c00152f9:	3c 66                	cmp    al,0x66
c00152fb:	75 1f                	jne    c001531c <opcodeFault(regs*, void*)+0xd0>
c00152fd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015301:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015305:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530e:	8d 50 01             	lea    edx,[eax+0x1]
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015317:	e9 85 00 00 00       	jmp    c00153a1 <opcodeFault(regs*, void*)+0x155>
c001531c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531f:	8a 00                	mov    al,BYTE PTR [eax]
c0015321:	3c 67                	cmp    al,0x67
c0015323:	75 18                	jne    c001533d <opcodeFault(regs*, void*)+0xf1>
c0015325:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015329:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001532c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015332:	8d 50 01             	lea    edx,[eax+0x1]
c0015335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015338:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001533b:	eb 64                	jmp    c00153a1 <opcodeFault(regs*, void*)+0x155>
c001533d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015340:	8a 00                	mov    al,BYTE PTR [eax]
c0015342:	3c 2e                	cmp    al,0x2e
c0015344:	74 09                	je     c001534f <opcodeFault(regs*, void*)+0x103>
c0015346:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015349:	8a 00                	mov    al,BYTE PTR [eax]
c001534b:	3c 3e                	cmp    al,0x3e
c001534d:	75 18                	jne    c0015367 <opcodeFault(regs*, void*)+0x11b>
c001534f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015353:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015359:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535c:	8d 50 01             	lea    edx,[eax+0x1]
c001535f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015362:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015365:	eb 3a                	jmp    c00153a1 <opcodeFault(regs*, void*)+0x155>
c0015367:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536a:	8a 00                	mov    al,BYTE PTR [eax]
c001536c:	3c 36                	cmp    al,0x36
c001536e:	74 1b                	je     c001538b <opcodeFault(regs*, void*)+0x13f>
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c 26                	cmp    al,0x26
c0015377:	74 12                	je     c001538b <opcodeFault(regs*, void*)+0x13f>
c0015379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537c:	8a 00                	mov    al,BYTE PTR [eax]
c001537e:	3c 64                	cmp    al,0x64
c0015380:	74 09                	je     c001538b <opcodeFault(regs*, void*)+0x13f>
c0015382:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015385:	8a 00                	mov    al,BYTE PTR [eax]
c0015387:	3c 65                	cmp    al,0x65
c0015389:	75 16                	jne    c00153a1 <opcodeFault(regs*, void*)+0x155>
c001538b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001538f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015395:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015398:	8d 50 01             	lea    edx,[eax+0x1]
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a4:	8a 00                	mov    al,BYTE PTR [eax]
c00153a6:	3c 0f                	cmp    al,0xf
c00153a8:	0f 85 ad 00 00 00    	jne    c001545b <opcodeFault(regs*, void*)+0x20f>
c00153ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b1:	40                   	inc    eax
c00153b2:	8a 00                	mov    al,BYTE PTR [eax]
c00153b4:	3c c2                	cmp    al,0xc2
c00153b6:	74 0e                	je     c00153c6 <opcodeFault(regs*, void*)+0x17a>
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	40                   	inc    eax
c00153bc:	8a 00                	mov    al,BYTE PTR [eax]
c00153be:	3c c3                	cmp    al,0xc3
c00153c0:	0f 85 95 00 00 00    	jne    c001545b <opcodeFault(regs*, void*)+0x20f>
c00153c6:	83 ec 0c             	sub    esp,0xc
c00153c9:	68 8f bd 02 c0       	push   0xc002bd8f
c00153ce:	e8 64 da ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153dc:	8d 50 01             	lea    edx,[eax+0x1]
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153eb:	8a 00                	mov    al,BYTE PTR [eax]
c00153ed:	8d 50 fe             	lea    edx,[eax-0x2]
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	88 10                	mov    BYTE PTR [eax],dl
c00153f5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00153f8:	50                   	push   eax
c00153f9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00153fc:	50                   	push   eax
c00153fd:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015400:	50                   	push   eax
c0015401:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015404:	e8 95 4b 00 00       	call   c0019f9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015412:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015415:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015418:	01 d0                	add    eax,edx
c001541a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001541d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015420:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015423:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015426:	48                   	dec    eax
c0015427:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015430:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	83 ec 04             	sub    esp,0x4
c0015439:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001543c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001543f:	50                   	push   eax
c0015440:	e8 6f ad fe ff       	call   c00001b4 <voodooXADD>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001544b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001544e:	01 c2                	add    edx,eax
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015456:	e9 07 04 00 00       	jmp    c0015862 <opcodeFault(regs*, void*)+0x616>
c001545b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545e:	8a 00                	mov    al,BYTE PTR [eax]
c0015460:	3c 0f                	cmp    al,0xf
c0015462:	0f 85 8b 01 00 00    	jne    c00155f3 <opcodeFault(regs*, void*)+0x3a7>
c0015468:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546b:	40                   	inc    eax
c001546c:	8a 00                	mov    al,BYTE PTR [eax]
c001546e:	3c c7                	cmp    al,0xc7
c0015470:	0f 86 7d 01 00 00    	jbe    c00155f3 <opcodeFault(regs*, void*)+0x3a7>
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	40                   	inc    eax
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c cf                	cmp    al,0xcf
c001547e:	0f 87 6f 01 00 00    	ja     c00155f3 <opcodeFault(regs*, void*)+0x3a7>
c0015484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015487:	40                   	inc    eax
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	83 c0 38             	add    eax,0x38
c001548d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015490:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015494:	75 0b                	jne    c00154a1 <opcodeFault(regs*, void*)+0x255>
c0015496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015499:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001549c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001549f:	eb 75                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154a1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154a5:	75 0b                	jne    c00154b2 <opcodeFault(regs*, void*)+0x266>
c00154a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154aa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154b0:	eb 64                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154b2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154b6:	75 0b                	jne    c00154c3 <opcodeFault(regs*, void*)+0x277>
c00154b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c1:	eb 53                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154c3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154c7:	75 0b                	jne    c00154d4 <opcodeFault(regs*, void*)+0x288>
c00154c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d2:	eb 42                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154d4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154d8:	75 0b                	jne    c00154e5 <opcodeFault(regs*, void*)+0x299>
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e3:	eb 31                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154e5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154e9:	75 0b                	jne    c00154f6 <opcodeFault(regs*, void*)+0x2aa>
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f4:	eb 20                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c00154f6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154fa:	75 0b                	jne    c0015507 <opcodeFault(regs*, void*)+0x2bb>
c00154fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015502:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015505:	eb 0f                	jmp    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c0015507:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001550b:	75 09                	jne    c0015516 <opcodeFault(regs*, void*)+0x2ca>
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015513:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015516:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001551a:	74 10                	je     c001552c <opcodeFault(regs*, void*)+0x2e0>
c001551c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015523:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001552a:	eb 2d                	jmp    c0015559 <opcodeFault(regs*, void*)+0x30d>
c001552c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001552f:	c1 e0 18             	shl    eax,0x18
c0015532:	89 c2                	mov    edx,eax
c0015534:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015537:	c1 e0 08             	shl    eax,0x8
c001553a:	25 00 00 ff 00       	and    eax,0xff0000
c001553f:	09 c2                	or     edx,eax
c0015541:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015544:	c1 e8 08             	shr    eax,0x8
c0015547:	25 00 ff 00 00       	and    eax,0xff00
c001554c:	09 c2                	or     edx,eax
c001554e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015551:	c1 e8 18             	shr    eax,0x18
c0015554:	09 d0                	or     eax,edx
c0015556:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015559:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001555d:	75 0b                	jne    c001556a <opcodeFault(regs*, void*)+0x31e>
c001555f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015562:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015565:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015568:	eb 75                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c001556a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001556e:	75 0b                	jne    c001557b <opcodeFault(regs*, void*)+0x32f>
c0015570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015576:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015579:	eb 64                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c001557b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001557f:	75 0b                	jne    c001558c <opcodeFault(regs*, void*)+0x340>
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015587:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001558a:	eb 53                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c001558c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015590:	75 0b                	jne    c001559d <opcodeFault(regs*, void*)+0x351>
c0015592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015595:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015598:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001559b:	eb 42                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c001559d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a1:	75 0b                	jne    c00155ae <opcodeFault(regs*, void*)+0x362>
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155ac:	eb 31                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c00155ae:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b2:	75 0b                	jne    c00155bf <opcodeFault(regs*, void*)+0x373>
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155bd:	eb 20                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c00155bf:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155c3:	75 0b                	jne    c00155d0 <opcodeFault(regs*, void*)+0x384>
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ce:	eb 0f                	jmp    c00155df <opcodeFault(regs*, void*)+0x393>
c00155d0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155d4:	75 09                	jne    c00155df <opcodeFault(regs*, void*)+0x393>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155e5:	8d 50 02             	lea    edx,[eax+0x2]
c00155e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155ee:	e9 6f 02 00 00       	jmp    c0015862 <opcodeFault(regs*, void*)+0x616>
c00155f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f6:	8a 00                	mov    al,BYTE PTR [eax]
c00155f8:	3c 0f                	cmp    al,0xf
c00155fa:	0f 85 8d 01 00 00    	jne    c001578d <opcodeFault(regs*, void*)+0x541>
c0015600:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015603:	40                   	inc    eax
c0015604:	8a 00                	mov    al,BYTE PTR [eax]
c0015606:	3c c7                	cmp    al,0xc7
c0015608:	0f 85 7f 01 00 00    	jne    c001578d <opcodeFault(regs*, void*)+0x541>
c001560e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015614:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015617:	8d 50 01             	lea    edx,[eax+0x1]
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015620:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015623:	50                   	push   eax
c0015624:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015627:	50                   	push   eax
c0015628:	8d 45 bc             	lea    eax,[ebp-0x44]
c001562b:	50                   	push   eax
c001562c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001562f:	e8 6a 49 00 00       	call   c0019f9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001563a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001563d:	83 f0 01             	xor    eax,0x1
c0015640:	84 c0                	test   al,al
c0015642:	0f 84 45 01 00 00    	je     c001578d <opcodeFault(regs*, void*)+0x541>
c0015648:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001564b:	3c 01                	cmp    al,0x1
c001564d:	0f 85 3a 01 00 00    	jne    c001578d <opcodeFault(regs*, void*)+0x541>
c0015653:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015656:	83 f0 01             	xor    eax,0x1
c0015659:	84 c0                	test   al,al
c001565b:	0f 84 2c 01 00 00    	je     c001578d <opcodeFault(regs*, void*)+0x541>
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015667:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001566a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015671:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015674:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015677:	89 c2                	mov    edx,eax
c0015679:	b8 00 00 00 00       	mov    eax,0x0
c001567e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015681:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015687:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001568a:	ba 00 00 00 00       	mov    edx,0x0
c001568f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015692:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015698:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001569b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001569e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156a5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156a8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156ab:	89 c2                	mov    edx,eax
c00156ad:	b8 00 00 00 00       	mov    eax,0x0
c00156b2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156b5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156be:	ba 00 00 00 00       	mov    edx,0x0
c00156c3:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156c6:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156c9:	fa                   	cli    
c00156ca:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c00156cf:	40                   	inc    eax
c00156d0:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c00156d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156db:	8b 00                	mov    eax,DWORD PTR [eax]
c00156dd:	89 c1                	mov    ecx,eax
c00156df:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156e2:	89 cb                	mov    ebx,ecx
c00156e4:	89 d0                	mov    eax,edx
c00156e6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156e9:	89 c6                	mov    esi,eax
c00156eb:	89 f0                	mov    eax,esi
c00156ed:	09 d8                	or     eax,ebx
c00156ef:	85 c0                	test   eax,eax
c00156f1:	75 21                	jne    c0015714 <opcodeFault(regs*, void*)+0x4c8>
c00156f3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00156f6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156f9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156fc:	89 01                	mov    DWORD PTR [ecx],eax
c00156fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015704:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015707:	83 c8 40             	or     eax,0x40
c001570a:	89 c2                	mov    edx,eax
c001570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015712:	eb 3e                	jmp    c0015752 <opcodeFault(regs*, void*)+0x506>
c0015714:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015717:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001571a:	8b 00                	mov    eax,DWORD PTR [eax]
c001571c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001571f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015722:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015728:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001572b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001572e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015731:	89 d0                	mov    eax,edx
c0015733:	31 d2                	xor    edx,edx
c0015735:	89 c3                	mov    ebx,eax
c0015737:	89 d6                	mov    esi,edx
c0015739:	89 da                	mov    edx,ebx
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015744:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015747:	83 e0 bf             	and    eax,0xffffffbf
c001574a:	89 c2                	mov    edx,eax
c001574c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015752:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015757:	48                   	dec    eax
c0015758:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001575d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015762:	85 c0                	test   eax,eax
c0015764:	75 01                	jne    c0015767 <opcodeFault(regs*, void*)+0x51b>
c0015766:	fb                   	sti    
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001576d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015770:	01 c2                	add    edx,eax
c0015772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015775:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	68 9e bd 02 c0       	push   0xc002bd9e
c0015780:	e8 b2 d6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	e9 d5 00 00 00       	jmp    c0015862 <opcodeFault(regs*, void*)+0x616>
c001578d:	83 ec 0c             	sub    esp,0xc
c0015790:	68 b1 bd 02 c0       	push   0xc002bdb1
c0015795:	e8 9d d6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157a9:	c1 e0 04             	shl    eax,0x4
c00157ac:	01 d0                	add    eax,edx
c00157ae:	83 c0 03             	add    eax,0x3
c00157b1:	8a 00                	mov    al,BYTE PTR [eax]
c00157b3:	0f b6 d8             	movzx  ebx,al
c00157b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157c2:	c1 e0 04             	shl    eax,0x4
c00157c5:	01 d0                	add    eax,edx
c00157c7:	83 c0 02             	add    eax,0x2
c00157ca:	8a 00                	mov    al,BYTE PTR [eax]
c00157cc:	0f b6 c8             	movzx  ecx,al
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157db:	c1 e0 04             	shl    eax,0x4
c00157de:	01 d0                	add    eax,edx
c00157e0:	40                   	inc    eax
c00157e1:	8a 00                	mov    al,BYTE PTR [eax]
c00157e3:	0f b6 d0             	movzx  edx,al
c00157e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157f2:	c1 e0 04             	shl    eax,0x4
c00157f5:	01 f0                	add    eax,esi
c00157f7:	8a 00                	mov    al,BYTE PTR [eax]
c00157f9:	0f b6 c0             	movzx  eax,al
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	53                   	push   ebx
c0015800:	51                   	push   ecx
c0015801:	52                   	push   edx
c0015802:	50                   	push   eax
c0015803:	68 c4 bd 02 c0       	push   0xc002bdc4
c0015808:	e8 2a d6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001580d:	83 c4 20             	add    esp,0x20
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015816:	83 c0 03             	add    eax,0x3
c0015819:	8a 00                	mov    al,BYTE PTR [eax]
c001581b:	0f b6 d8             	movzx  ebx,al
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015824:	83 c0 02             	add    eax,0x2
c0015827:	8a 00                	mov    al,BYTE PTR [eax]
c0015829:	0f b6 c8             	movzx  ecx,al
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015832:	40                   	inc    eax
c0015833:	8a 00                	mov    al,BYTE PTR [eax]
c0015835:	0f b6 d0             	movzx  edx,al
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001583e:	8a 00                	mov    al,BYTE PTR [eax]
c0015840:	0f b6 c0             	movzx  eax,al
c0015843:	83 ec 0c             	sub    esp,0xc
c0015846:	53                   	push   ebx
c0015847:	51                   	push   ecx
c0015848:	52                   	push   edx
c0015849:	50                   	push   eax
c001584a:	68 ec bd 02 c0       	push   0xc002bdec
c001584f:	e8 e3 d5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0015854:	83 c4 20             	add    esp,0x20
c0015857:	83 ec 0c             	sub    esp,0xc
c001585a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001585d:	e8 54 f4 ff ff       	call   c0014cb6 <displayDebugInfo(regs*)>
c0015862:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015865:	5b                   	pop    ebx
c0015866:	5e                   	pop    esi
c0015867:	5d                   	pop    ebp
c0015868:	c3                   	ret    

c0015869 <displayProgramFault(char const*)>:
c0015869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001586e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015871:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015877:	85 c0                	test   eax,eax
c0015879:	74 15                	je     c0015890 <displayProgramFault(char const*)+0x27>
c001587b:	83 ec 0c             	sub    esp,0xc
c001587e:	6a 04                	push   0x4
c0015880:	6a 0f                	push   0xf
c0015882:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015886:	50                   	push   eax
c0015887:	e8 9c b4 ff ff       	call   c0010d28 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001588c:	83 c4 1c             	add    esp,0x1c
c001588f:	c3                   	ret    
c0015890:	c3                   	ret    

c0015891 <setupInterruptController()>:
c0015891:	55                   	push   ebp
c0015892:	89 e5                	mov    ebp,esp
c0015894:	53                   	push   ebx
c0015895:	83 ec 24             	sub    esp,0x24
c0015898:	b8 00 00 00 00       	mov    eax,0x0
c001589d:	85 c0                	test   eax,eax
c001589f:	0f 95 c0             	setne  al
c00158a2:	84 c0                	test   al,al
c00158a4:	74 5b                	je     c0015901 <setupInterruptController()+0x70>
c00158a6:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158ad:	83 ec 0c             	sub    esp,0xc
c00158b0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158b3:	e8 d4 9f ff ff       	call   c000f88c <malloc>
c00158b8:	83 c4 10             	add    esp,0x10
c00158bb:	89 c3                	mov    ebx,eax
c00158bd:	83 ec 0c             	sub    esp,0xc
c00158c0:	53                   	push   ebx
c00158c1:	e8 9c 0c 01 00       	call   c0026562 <APIC::APIC()>
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158cc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d4:	83 c0 08             	add    eax,0x8
c00158d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d9:	6a 00                	push   0x0
c00158db:	6a 00                	push   0x0
c00158dd:	6a 00                	push   0x0
c00158df:	52                   	push   edx
c00158e0:	ff d0                	call   eax
c00158e2:	83 c4 10             	add    esp,0x10
c00158e5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00158ea:	83 ec 08             	sub    esp,0x8
c00158ed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158f0:	50                   	push   eax
c00158f1:	e8 62 e9 ff ff       	call   c0014258 <Device::addChild(Device*)>
c00158f6:	83 c4 10             	add    esp,0x10
c00158f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158fc:	e9 89 03 00 00       	jmp    c0015c8a <setupInterruptController()+0x3f9>
c0015901:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c0015906:	84 c0                	test   al,al
c0015908:	75 24                	jne    c001592e <setupInterruptController()+0x9d>
c001590a:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001590f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015915:	83 e2 fe             	and    edx,0xfffffffe
c0015918:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001591e:	83 ec 0c             	sub    esp,0xc
c0015921:	68 11 be 02 c0       	push   0xc002be11
c0015926:	e8 0c d5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015933:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015939:	83 e0 01             	and    eax,0x1
c001593c:	84 c0                	test   al,al
c001593e:	0f 95 c0             	setne  al
c0015941:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015944:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015951:	e8 36 9f ff ff       	call   c000f88c <malloc>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	89 c3                	mov    ebx,eax
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	53                   	push   ebx
c001595f:	e8 56 11 01 00       	call   c0026aba <PIC::PIC()>
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001596a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001596d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015970:	8b 00                	mov    eax,DWORD PTR [eax]
c0015972:	83 c0 08             	add    eax,0x8
c0015975:	8b 00                	mov    eax,DWORD PTR [eax]
c0015977:	6a 00                	push   0x0
c0015979:	6a 00                	push   0x0
c001597b:	6a 00                	push   0x0
c001597d:	52                   	push   edx
c001597e:	ff d0                	call   eax
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015987:	74 73                	je     c00159fc <setupInterruptController()+0x16b>
c0015989:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001598c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015991:	83 c0 0c             	add    eax,0xc
c0015994:	8b 00                	mov    eax,DWORD PTR [eax]
c0015996:	6a 00                	push   0x0
c0015998:	6a 00                	push   0x0
c001599a:	6a 00                	push   0x0
c001599c:	52                   	push   edx
c001599d:	ff d0                	call   eax
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159a6:	74 15                	je     c00159bd <setupInterruptController()+0x12c>
c00159a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	83 c0 04             	add    eax,0x4
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	83 ec 0c             	sub    esp,0xc
c00159b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b8:	ff d0                	call   eax
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159ca:	e8 bd 9e ff ff       	call   c000f88c <malloc>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	89 c3                	mov    ebx,eax
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	53                   	push   ebx
c00159d8:	e8 85 0b 01 00       	call   c0026562 <APIC::APIC()>
c00159dd:	83 c4 10             	add    esp,0x10
c00159e0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159eb:	83 c0 08             	add    eax,0x8
c00159ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f0:	6a 00                	push   0x0
c00159f2:	6a 00                	push   0x0
c00159f4:	6a 00                	push   0x0
c00159f6:	52                   	push   edx
c00159f7:	ff d0                	call   eax
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015a01:	83 ec 08             	sub    esp,0x8
c0015a04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a07:	50                   	push   eax
c0015a08:	e8 4b e8 ff ff       	call   c0014258 <Device::addChild(Device*)>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	c7 05 68 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f468,0x0
c0015a1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1f:	83 c0 24             	add    eax,0x24
c0015a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a24:	6a 00                	push   0x0
c0015a26:	68 2d 52 01 c0       	push   0xc001522d
c0015a2b:	6a 00                	push   0x0
c0015a2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a30:	ff d0                	call   eax
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3a:	83 c0 24             	add    eax,0x24
c0015a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3f:	6a 00                	push   0x0
c0015a41:	68 2d 52 01 c0       	push   0xc001522d
c0015a46:	6a 01                	push   0x1
c0015a48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a4b:	ff d0                	call   eax
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a55:	83 c0 24             	add    eax,0x24
c0015a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5a:	6a 00                	push   0x0
c0015a5c:	68 13 4b 01 c0       	push   0xc0014b13
c0015a61:	6a 02                	push   0x2
c0015a63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a66:	ff d0                	call   eax
c0015a68:	83 c4 10             	add    esp,0x10
c0015a6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a70:	83 c0 24             	add    eax,0x24
c0015a73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a75:	6a 00                	push   0x0
c0015a77:	68 2d 52 01 c0       	push   0xc001522d
c0015a7c:	6a 03                	push   0x3
c0015a7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a81:	ff d0                	call   eax
c0015a83:	83 c4 10             	add    esp,0x10
c0015a86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8b:	83 c0 24             	add    eax,0x24
c0015a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a90:	6a 00                	push   0x0
c0015a92:	68 2d 52 01 c0       	push   0xc001522d
c0015a97:	6a 04                	push   0x4
c0015a99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9c:	ff d0                	call   eax
c0015a9e:	83 c4 10             	add    esp,0x10
c0015aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa6:	83 c0 24             	add    eax,0x24
c0015aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aab:	6a 00                	push   0x0
c0015aad:	68 2d 52 01 c0       	push   0xc001522d
c0015ab2:	6a 05                	push   0x5
c0015ab4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab7:	ff d0                	call   eax
c0015ab9:	83 c4 10             	add    esp,0x10
c0015abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015abf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac1:	83 c0 24             	add    eax,0x24
c0015ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac6:	6a 00                	push   0x0
c0015ac8:	68 4c 52 01 c0       	push   0xc001524c
c0015acd:	6a 06                	push   0x6
c0015acf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad2:	ff d0                	call   eax
c0015ad4:	83 c4 10             	add    esp,0x10
c0015ad7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adc:	83 c0 24             	add    eax,0x24
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	6a 00                	push   0x0
c0015ae3:	68 45 51 01 c0       	push   0xc0015145
c0015ae8:	6a 07                	push   0x7
c0015aea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aed:	ff d0                	call   eax
c0015aef:	83 c4 10             	add    esp,0x10
c0015af2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af7:	83 c0 24             	add    eax,0x24
c0015afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afc:	6a 00                	push   0x0
c0015afe:	68 2e 49 01 c0       	push   0xc001492e
c0015b03:	6a 08                	push   0x8
c0015b05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b08:	ff d0                	call   eax
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b12:	83 c0 24             	add    eax,0x24
c0015b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b17:	6a 00                	push   0x0
c0015b19:	68 2d 52 01 c0       	push   0xc001522d
c0015b1e:	6a 09                	push   0x9
c0015b20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b23:	ff d0                	call   eax
c0015b25:	83 c4 10             	add    esp,0x10
c0015b28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2d:	83 c0 24             	add    eax,0x24
c0015b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b32:	6a 00                	push   0x0
c0015b34:	68 2d 52 01 c0       	push   0xc001522d
c0015b39:	6a 0a                	push   0xa
c0015b3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3e:	ff d0                	call   eax
c0015b40:	83 c4 10             	add    esp,0x10
c0015b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b48:	83 c0 24             	add    eax,0x24
c0015b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4d:	6a 00                	push   0x0
c0015b4f:	68 2d 52 01 c0       	push   0xc001522d
c0015b54:	6a 0b                	push   0xb
c0015b56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b59:	ff d0                	call   eax
c0015b5b:	83 c4 10             	add    esp,0x10
c0015b5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b63:	83 c0 24             	add    eax,0x24
c0015b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b68:	6a 00                	push   0x0
c0015b6a:	68 2d 52 01 c0       	push   0xc001522d
c0015b6f:	6a 0c                	push   0xc
c0015b71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b74:	ff d0                	call   eax
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7e:	83 c0 24             	add    eax,0x24
c0015b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b83:	6a 00                	push   0x0
c0015b85:	68 b8 51 01 c0       	push   0xc00151b8
c0015b8a:	6a 0d                	push   0xd
c0015b8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8f:	ff d0                	call   eax
c0015b91:	83 c4 10             	add    esp,0x10
c0015b94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b99:	83 c0 24             	add    eax,0x24
c0015b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9e:	6a 00                	push   0x0
c0015ba0:	68 f1 51 01 c0       	push   0xc00151f1
c0015ba5:	6a 0e                	push   0xe
c0015ba7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015baa:	ff d0                	call   eax
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb4:	83 c0 24             	add    eax,0x24
c0015bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb9:	6a 00                	push   0x0
c0015bbb:	68 2d 52 01 c0       	push   0xc001522d
c0015bc0:	6a 0f                	push   0xf
c0015bc2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc5:	ff d0                	call   eax
c0015bc7:	83 c4 10             	add    esp,0x10
c0015bca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcf:	83 c0 24             	add    eax,0x24
c0015bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd4:	6a 00                	push   0x0
c0015bd6:	68 2d 52 01 c0       	push   0xc001522d
c0015bdb:	6a 10                	push   0x10
c0015bdd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be0:	ff d0                	call   eax
c0015be2:	83 c4 10             	add    esp,0x10
c0015be5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bea:	83 c0 24             	add    eax,0x24
c0015bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bef:	6a 00                	push   0x0
c0015bf1:	68 2d 52 01 c0       	push   0xc001522d
c0015bf6:	6a 11                	push   0x11
c0015bf8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfb:	ff d0                	call   eax
c0015bfd:	83 c4 10             	add    esp,0x10
c0015c00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c05:	83 c0 24             	add    eax,0x24
c0015c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0a:	6a 00                	push   0x0
c0015c0c:	68 2d 52 01 c0       	push   0xc001522d
c0015c11:	6a 12                	push   0x12
c0015c13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c16:	ff d0                	call   eax
c0015c18:	83 c4 10             	add    esp,0x10
c0015c1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c20:	83 c0 24             	add    eax,0x24
c0015c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c25:	6a 00                	push   0x0
c0015c27:	68 2d 52 01 c0       	push   0xc001522d
c0015c2c:	6a 13                	push   0x13
c0015c2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c31:	ff d0                	call   eax
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3b:	83 c0 24             	add    eax,0x24
c0015c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c40:	6a 00                	push   0x0
c0015c42:	68 2d 52 01 c0       	push   0xc001522d
c0015c47:	6a 14                	push   0x14
c0015c49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4c:	ff d0                	call   eax
c0015c4e:	83 c4 10             	add    esp,0x10
c0015c51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c56:	83 c0 24             	add    eax,0x24
c0015c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5b:	6a 00                	push   0x0
c0015c5d:	68 2d 52 01 c0       	push   0xc001522d
c0015c62:	6a 1e                	push   0x1e
c0015c64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c67:	ff d0                	call   eax
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c71:	83 c0 24             	add    eax,0x24
c0015c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c76:	6a 00                	push   0x0
c0015c78:	68 ca cc 01 c0       	push   0xc001ccca
c0015c7d:	6a 60                	push   0x60
c0015c7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c82:	ff d0                	call   eax
c0015c84:	83 c4 10             	add    esp,0x10
c0015c87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c8d:	c9                   	leave  
c0015c8e:	c3                   	ret    
c0015c8f:	90                   	nop

c0015c90 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c90:	55                   	push   ebp
c0015c91:	89 e5                	mov    ebp,esp
c0015c93:	83 ec 08             	sub    esp,0x8
c0015c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c99:	83 ec 0c             	sub    esp,0xc
c0015c9c:	50                   	push   eax
c0015c9d:	e8 a2 e8 ff ff       	call   c0014544 <Device::getName()>
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	8a 00                	mov    al,BYTE PTR [eax]
c0015ca7:	3c 41                	cmp    al,0x41
c0015ca9:	0f 94 c0             	sete   al
c0015cac:	84 c0                	test   al,al
c0015cae:	74 28                	je     c0015cd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cb0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cb4:	7f 12                	jg     c0015cc8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cb9:	05 20 e5 02 c0       	add    eax,0xc002e520
c0015cbe:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc0:	0f b6 c0             	movzx  eax,al
c0015cc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cc6:	eb 10                	jmp    c0015cd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	68 00 bb 02 c0       	push   0xc002bb00
c0015cd0:	e8 fc 4b 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cdb:	c9                   	leave  
c0015cdc:	c3                   	ret    
c0015cdd:	90                   	nop

c0015cde <startGUI(void*)>:
c0015cde:	55                   	push   ebp
c0015cdf:	89 e5                	mov    ebp,esp
c0015ce1:	53                   	push   ebx
c0015ce2:	83 ec 04             	sub    esp,0x4
c0015ce5:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015cea:	48                   	dec    eax
c0015ceb:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015cf0:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015cf5:	85 c0                	test   eax,eax
c0015cf7:	75 01                	jne    c0015cfa <startGUI(void*)+0x1c>
c0015cf9:	fb                   	sti    
c0015cfa:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d00:	83 ec 08             	sub    esp,0x8
c0015d03:	6a 01                	push   0x1
c0015d05:	68 74 be 02 c0       	push   0xc002be74
c0015d0a:	e8 96 7f 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c0015d0f:	83 c4 10             	add    esp,0x10
c0015d12:	83 ec 08             	sub    esp,0x8
c0015d15:	53                   	push   ebx
c0015d16:	50                   	push   eax
c0015d17:	e8 b4 81 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d25:	83 ec 08             	sub    esp,0x8
c0015d28:	6a 01                	push   0x1
c0015d2a:	68 8e be 02 c0       	push   0xc002be8e
c0015d2f:	e8 71 7f 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	53                   	push   ebx
c0015d3b:	50                   	push   eax
c0015d3c:	e8 8f 81 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	90                   	nop
c0015d45:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d48:	c9                   	leave  
c0015d49:	c3                   	ret    

c0015d4a <startGUIVESA(void*)>:
c0015d4a:	55                   	push   ebp
c0015d4b:	89 e5                	mov    ebp,esp
c0015d4d:	53                   	push   ebx
c0015d4e:	83 ec 04             	sub    esp,0x4
c0015d51:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d56:	48                   	dec    eax
c0015d57:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015d5c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d61:	85 c0                	test   eax,eax
c0015d63:	75 01                	jne    c0015d66 <startGUIVESA(void*)+0x1c>
c0015d65:	fb                   	sti    
c0015d66:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d6c:	83 ec 08             	sub    esp,0x8
c0015d6f:	6a 01                	push   0x1
c0015d71:	68 a8 be 02 c0       	push   0xc002bea8
c0015d76:	e8 2a 7f 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	83 ec 08             	sub    esp,0x8
c0015d81:	53                   	push   ebx
c0015d82:	50                   	push   eax
c0015d83:	e8 48 81 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c0015d88:	83 c4 10             	add    esp,0x10
c0015d8b:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d91:	83 ec 08             	sub    esp,0x8
c0015d94:	6a 01                	push   0x1
c0015d96:	68 8e be 02 c0       	push   0xc002be8e
c0015d9b:	e8 05 7f 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	83 ec 08             	sub    esp,0x8
c0015da6:	53                   	push   ebx
c0015da7:	50                   	push   eax
c0015da8:	e8 23 81 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	90                   	nop
c0015db1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015db4:	c9                   	leave  
c0015db5:	c3                   	ret    

c0015db6 <sendKeyToTerminal(unsigned char)>:
c0015db6:	55                   	push   ebp
c0015db7:	89 e5                	mov    ebp,esp
c0015db9:	83 ec 28             	sub    esp,0x28
c0015dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dc2:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c0015dc7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	52                   	push   edx
c0015dcf:	50                   	push   eax
c0015dd0:	e8 2b b4 ff ff       	call   c0011200 <VgaText::receiveKey(unsigned char)>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ddc:	0f 85 8f 00 00 00    	jne    c0015e71 <sendKeyToTerminal(unsigned char)+0xbb>
c0015de2:	fa                   	cli    
c0015de3:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015de8:	40                   	inc    eax
c0015de9:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015dee:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015df3:	40                   	inc    eax
c0015df4:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0015df9:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c0015dfe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e01:	c7 05 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f480,0x0
c0015e0b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e0f:	74 1f                	je     c0015e30 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e14:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e1a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e26:	e8 1d 8d 00 00       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c0015e2b:	83 c4 10             	add    esp,0x10
c0015e2e:	eb db                	jmp    c0015e0b <sendKeyToTerminal(unsigned char)+0x55>
c0015e30:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015e35:	48                   	dec    eax
c0015e36:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0015e3b:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015e40:	85 c0                	test   eax,eax
c0015e42:	75 18                	jne    c0015e5c <sendKeyToTerminal(unsigned char)+0xa6>
c0015e44:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c0015e49:	85 c0                	test   eax,eax
c0015e4b:	74 0f                	je     c0015e5c <sendKeyToTerminal(unsigned char)+0xa6>
c0015e4d:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c0015e57:	e8 28 88 00 00       	call   c001e684 <schedule()>
c0015e5c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015e61:	48                   	dec    eax
c0015e62:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015e67:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015e6c:	85 c0                	test   eax,eax
c0015e6e:	75 01                	jne    c0015e71 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e70:	fb                   	sti    
c0015e71:	90                   	nop
c0015e72:	c9                   	leave  
c0015e73:	c3                   	ret    

c0015e74 <sendKeyboardToken(KeyboardToken)>:
c0015e74:	55                   	push   ebp
c0015e75:	89 e5                	mov    ebp,esp
c0015e77:	83 ec 18             	sub    esp,0x18
c0015e7a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e80:	0f b7 c0             	movzx  eax,ax
c0015e83:	83 f2 01             	xor    edx,0x1
c0015e86:	88 90 a0 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0b60],dl
c0015e8c:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c0015e91:	85 c0                	test   eax,eax
c0015e93:	74 24                	je     c0015eb9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e95:	8b 0d 88 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f488
c0015e9b:	83 ec 04             	sub    esp,0x4
c0015e9e:	68 a0 f4 02 c0       	push   0xc002f4a0
c0015ea3:	83 ec 08             	sub    esp,0x8
c0015ea6:	89 e2                	mov    edx,esp
c0015ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eab:	89 02                	mov    DWORD PTR [edx],eax
c0015ead:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eb0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eb4:	ff d1                	call   ecx
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebc:	66 3d 03 02          	cmp    ax,0x203
c0015ec0:	75 07                	jne    c0015ec9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ec2:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c0015ec7:	84 c0                	test   al,al
c0015ec9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ecd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ed0:	a0 a8 f8 02 c0       	mov    al,ds:0xc002f8a8
c0015ed5:	38 c2                	cmp    dl,al
c0015ed7:	74 1c                	je     c0015ef5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ed9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015edc:	a2 a8 f8 02 c0       	mov    ds:0xc002f8a8,al
c0015ee1:	a0 a8 f8 02 c0       	mov    al,ds:0xc002f8a8
c0015ee6:	0f b6 c0             	movzx  eax,al
c0015ee9:	83 ec 0c             	sub    esp,0xc
c0015eec:	50                   	push   eax
c0015eed:	e8 96 a6 ff ff       	call   c0010588 <setTerminalScrollLock(bool)>
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ef8:	84 c0                	test   al,al
c0015efa:	0f 84 ae 00 00 00    	je     c0015fae <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f03:	66 3d 10 03          	cmp    ax,0x310
c0015f07:	75 06                	jne    c0015f0f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f09:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f12:	66 3d 11 03          	cmp    ax,0x311
c0015f16:	75 06                	jne    c0015f1e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f18:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f21:	66 3d 12 03          	cmp    ax,0x312
c0015f25:	75 06                	jne    c0015f2d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f27:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f30:	66 3d 13 03          	cmp    ax,0x313
c0015f34:	75 06                	jne    c0015f3c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f36:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3f:	66 3d 14 03          	cmp    ax,0x314
c0015f43:	75 06                	jne    c0015f4b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f45:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4e:	66 3d 15 03          	cmp    ax,0x315
c0015f52:	75 06                	jne    c0015f5a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f54:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5d:	66 3d 16 03          	cmp    ax,0x316
c0015f61:	75 06                	jne    c0015f69 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f63:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6c:	66 3d 17 03          	cmp    ax,0x317
c0015f70:	75 06                	jne    c0015f78 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f72:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7b:	66 3d 18 03          	cmp    ax,0x318
c0015f7f:	75 06                	jne    c0015f87 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f81:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8a:	66 3d 19 03          	cmp    ax,0x319
c0015f8e:	75 06                	jne    c0015f96 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f90:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f99:	66 3d 1a 03          	cmp    ax,0x31a
c0015f9d:	0f 85 c9 00 00 00    	jne    c001606c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fa3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fa9:	e9 be 00 00 00       	jmp    c001606c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb1:	66 3d 10 03          	cmp    ax,0x310
c0015fb5:	75 0a                	jne    c0015fc1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fb7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fbd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc4:	66 3d 11 03          	cmp    ax,0x311
c0015fc8:	75 0a                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fca:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 12 03          	cmp    ax,0x312
c0015fdb:	75 0a                	jne    c0015fe7 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fdd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fe3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fea:	66 3d 13 03          	cmp    ax,0x313
c0015fee:	75 0a                	jne    c0015ffa <sendKeyboardToken(KeyboardToken)+0x186>
c0015ff0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ff6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffd:	66 3d 14 03          	cmp    ax,0x314
c0016001:	75 0a                	jne    c001600d <sendKeyboardToken(KeyboardToken)+0x199>
c0016003:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016009:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016010:	66 3d 15 03          	cmp    ax,0x315
c0016014:	75 0a                	jne    c0016020 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016016:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001601c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016023:	66 3d 16 03          	cmp    ax,0x316
c0016027:	75 0a                	jne    c0016033 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016029:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001602f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016036:	66 3d 17 03          	cmp    ax,0x317
c001603a:	75 0a                	jne    c0016046 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001603c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016042:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016049:	66 3d 18 03          	cmp    ax,0x318
c001604d:	75 0a                	jne    c0016059 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001604f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016055:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605c:	66 3d 19 03          	cmp    ax,0x319
c0016060:	75 0a                	jne    c001606c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016062:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016068:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606f:	66 3d 00 02          	cmp    ax,0x200
c0016073:	75 2c                	jne    c00160a1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016075:	a0 a0 f8 02 c0       	mov    al,ds:0xc002f8a0
c001607a:	83 f0 01             	xor    eax,0x1
c001607d:	84 c0                	test   al,al
c001607f:	74 20                	je     c00160a1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016081:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0016086:	6a 01                	push   0x1
c0016088:	6a 00                	push   0x0
c001608a:	68 de 5c 01 c0       	push   0xc0015cde
c001608f:	50                   	push   eax
c0016090:	e8 ab 83 00 00       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c0016095:	83 c4 10             	add    esp,0x10
c0016098:	c6 05 a0 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8a0,0x1
c001609f:	eb 33                	jmp    c00160d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a4:	66 3d 01 02          	cmp    ax,0x201
c00160a8:	75 2a                	jne    c00160d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160aa:	a0 a0 f8 02 c0       	mov    al,ds:0xc002f8a0
c00160af:	83 f0 01             	xor    eax,0x1
c00160b2:	84 c0                	test   al,al
c00160b4:	74 1e                	je     c00160d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00160bb:	6a 01                	push   0x1
c00160bd:	6a 00                	push   0x0
c00160bf:	68 4a 5d 01 c0       	push   0xc0015d4a
c00160c4:	50                   	push   eax
c00160c5:	e8 76 83 00 00       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c00160ca:	83 c4 10             	add    esp,0x10
c00160cd:	c6 05 a0 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8a0,0x1
c00160d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d7:	66 3d 1d 03          	cmp    ax,0x31d
c00160db:	75 06                	jne    c00160e3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160dd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e6:	66 3d 1c 03          	cmp    ax,0x31c
c00160ea:	75 06                	jne    c00160f2 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160ec:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f5:	66 3d 1b 03          	cmp    ax,0x31b
c00160f9:	75 06                	jne    c0016101 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160fb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016104:	66 3d 1e 03          	cmp    ax,0x31e
c0016108:	75 06                	jne    c0016110 <sendKeyboardToken(KeyboardToken)+0x29c>
c001610a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016113:	66 3d 1f 03          	cmp    ax,0x31f
c0016117:	75 06                	jne    c001611f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016119:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001611f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016122:	66 3d 1a 03          	cmp    ax,0x31a
c0016126:	75 06                	jne    c001612e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016128:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001612e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016132:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016135:	83 f0 01             	xor    eax,0x1
c0016138:	84 c0                	test   al,al
c001613a:	74 77                	je     c00161b3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001613c:	a0 a1 f5 02 c0       	mov    al,ds:0xc002f5a1
c0016141:	84 c0                	test   al,al
c0016143:	74 41                	je     c0016186 <sendKeyboardToken(KeyboardToken)+0x312>
c0016145:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016149:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001614d:	74 2b                	je     c001617a <sendKeyboardToken(KeyboardToken)+0x306>
c001614f:	8b 15 a4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8a4
c0016155:	89 d0                	mov    eax,edx
c0016157:	c1 e0 02             	shl    eax,0x2
c001615a:	01 d0                	add    eax,edx
c001615c:	01 c0                	add    eax,eax
c001615e:	a3 a4 f8 02 c0       	mov    ds:0xc002f8a4,eax
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	0f b7 c0             	movzx  eax,ax
c0016169:	8d 50 d0             	lea    edx,[eax-0x30]
c001616c:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c0016171:	01 d0                	add    eax,edx
c0016173:	a3 a4 f8 02 c0       	mov    ds:0xc002f8a4,eax
c0016178:	eb 6d                	jmp    c00161e7 <sendKeyboardToken(KeyboardToken)+0x373>
c001617a:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c0016184:	eb 61                	jmp    c00161e7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016186:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c001618b:	85 c0                	test   eax,eax
c001618d:	74 18                	je     c00161a7 <sendKeyboardToken(KeyboardToken)+0x333>
c001618f:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c0016194:	0f b6 c0             	movzx  eax,al
c0016197:	83 ec 0c             	sub    esp,0xc
c001619a:	50                   	push   eax
c001619b:	e8 16 fc ff ff       	call   c0015db6 <sendKeyToTerminal(unsigned char)>
c00161a0:	83 c4 10             	add    esp,0x10
c00161a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161a7:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c00161b1:	eb 34                	jmp    c00161e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b6:	66 3d 01 01          	cmp    ax,0x101
c00161ba:	75 2b                	jne    c00161e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00161bc:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161c1:	85 c0                	test   eax,eax
c00161c3:	74 18                	je     c00161dd <sendKeyboardToken(KeyboardToken)+0x369>
c00161c5:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161ca:	0f b6 c0             	movzx  eax,al
c00161cd:	83 ec 0c             	sub    esp,0xc
c00161d0:	50                   	push   eax
c00161d1:	e8 e0 fb ff ff       	call   c0015db6 <sendKeyToTerminal(unsigned char)>
c00161d6:	83 c4 10             	add    esp,0x10
c00161d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161dd:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c00161e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161ea:	83 f0 01             	xor    eax,0x1
c00161ed:	84 c0                	test   al,al
c00161ef:	74 4c                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161f4:	83 f0 01             	xor    eax,0x1
c00161f7:	84 c0                	test   al,al
c00161f9:	74 42                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161fb:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 36                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620a:	66 83 f8 1f          	cmp    ax,0x1f
c001620e:	76 09                	jbe    c0016219 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016213:	66 83 f8 7e          	cmp    ax,0x7e
c0016217:	76 12                	jbe    c001622b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621c:	66 83 f8 0a          	cmp    ax,0xa
c0016220:	74 09                	je     c001622b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016225:	66 83 f8 08          	cmp    ax,0x8
c0016229:	75 12                	jne    c001623d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001622b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622e:	0f b6 c0             	movzx  eax,al
c0016231:	83 ec 0c             	sub    esp,0xc
c0016234:	50                   	push   eax
c0016235:	e8 7c fb ff ff       	call   c0015db6 <sendKeyToTerminal(unsigned char)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016240:	83 f0 01             	xor    eax,0x1
c0016243:	84 c0                	test   al,al
c0016245:	74 4f                	je     c0016296 <sendKeyboardToken(KeyboardToken)+0x422>
c0016247:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001624a:	83 f0 01             	xor    eax,0x1
c001624d:	84 c0                	test   al,al
c001624f:	74 45                	je     c0016296 <sendKeyboardToken(KeyboardToken)+0x422>
c0016251:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c0016256:	84 c0                	test   al,al
c0016258:	74 3c                	je     c0016296 <sendKeyboardToken(KeyboardToken)+0x422>
c001625a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625d:	66 83 f8 3f          	cmp    ax,0x3f
c0016261:	76 33                	jbe    c0016296 <sendKeyboardToken(KeyboardToken)+0x422>
c0016263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016266:	66 83 f8 7f          	cmp    ax,0x7f
c001626a:	77 2a                	ja     c0016296 <sendKeyboardToken(KeyboardToken)+0x422>
c001626c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626f:	88 c2                	mov    dl,al
c0016271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016274:	66 83 f8 5f          	cmp    ax,0x5f
c0016278:	76 04                	jbe    c001627e <sendKeyboardToken(KeyboardToken)+0x40a>
c001627a:	b0 20                	mov    al,0x20
c001627c:	eb 02                	jmp    c0016280 <sendKeyboardToken(KeyboardToken)+0x40c>
c001627e:	b0 00                	mov    al,0x0
c0016280:	29 c2                	sub    edx,eax
c0016282:	88 d0                	mov    al,dl
c0016284:	83 e8 40             	sub    eax,0x40
c0016287:	0f b6 c0             	movzx  eax,al
c001628a:	83 ec 0c             	sub    esp,0xc
c001628d:	50                   	push   eax
c001628e:	e8 23 fb ff ff       	call   c0015db6 <sendKeyToTerminal(unsigned char)>
c0016293:	83 c4 10             	add    esp,0x10
c0016296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016299:	66 3d 00 03          	cmp    ax,0x300
c001629d:	75 0f                	jne    c00162ae <sendKeyboardToken(KeyboardToken)+0x43a>
c001629f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162a2:	83 f0 01             	xor    eax,0x1
c00162a5:	84 c0                	test   al,al
c00162a7:	74 05                	je     c00162ae <sendKeyboardToken(KeyboardToken)+0x43a>
c00162a9:	e8 52 aa ff ff       	call   c0010d00 <doTerminalCycle()>
c00162ae:	90                   	nop
c00162af:	c9                   	leave  
c00162b0:	c3                   	ret    

c00162b1 <clearInternalKeybuffer(VgaText*)>:
c00162b1:	55                   	push   ebp
c00162b2:	89 e5                	mov    ebp,esp
c00162b4:	83 ec 08             	sub    esp,0x8
c00162b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ba:	05 98 01 00 00       	add    eax,0x198
c00162bf:	83 ec 0c             	sub    esp,0xc
c00162c2:	50                   	push   eax
c00162c3:	e8 a4 a4 fe ff       	call   c000076c <strlen>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ce:	81 c2 98 01 00 00    	add    edx,0x198
c00162d4:	83 ec 04             	sub    esp,0x4
c00162d7:	50                   	push   eax
c00162d8:	6a 00                	push   0x0
c00162da:	52                   	push   edx
c00162db:	e8 70 a4 fe ff       	call   c0000750 <memset>
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	90                   	nop
c00162e4:	c9                   	leave  
c00162e5:	c3                   	ret    

c00162e6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162e6:	55                   	push   ebp
c00162e7:	89 e5                	mov    ebp,esp
c00162e9:	83 ec 18             	sub    esp,0x18
c00162ec:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c00162f1:	85 c0                	test   eax,eax
c00162f3:	74 2a                	je     c001631f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00162f5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00162fb:	8b 0d 88 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f488
c0016301:	83 ec 04             	sub    esp,0x4
c0016304:	68 a0 f4 02 c0       	push   0xc002f4a0
c0016309:	83 ec 08             	sub    esp,0x8
c001630c:	89 e2                	mov    edx,esp
c001630e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016311:	89 02                	mov    DWORD PTR [edx],eax
c0016313:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016316:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001631a:	ff d1                	call   ecx
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	83 ec 0c             	sub    esp,0xc
c0016322:	68 c3 be 02 c0       	push   0xc002bec3
c0016327:	e8 0b cb ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	fb                   	sti    
c0016330:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016337:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001633b:	0f 84 a1 00 00 00    	je     c00163e2 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016344:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001634a:	84 c0                	test   al,al
c001634c:	75 28                	jne    c0016376 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001634e:	fa                   	cli    
c001634f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016354:	40                   	inc    eax
c0016355:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001635a:	e8 25 83 00 00       	call   c001e684 <schedule()>
c001635f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016364:	48                   	dec    eax
c0016365:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001636a:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001636f:	85 c0                	test   eax,eax
c0016371:	75 ce                	jne    c0016341 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016373:	fb                   	sti    
c0016374:	eb cb                	jmp    c0016341 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016376:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016379:	8d 50 01             	lea    edx,[eax+0x1]
c001637c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001637f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016382:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016388:	88 10                	mov    BYTE PTR [eax],dl
c001638a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001638d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016393:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016399:	05 98 01 00 00       	add    eax,0x198
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	50                   	push   eax
c00163a2:	e8 c5 a3 fe ff       	call   c000076c <strlen>
c00163a7:	83 c4 10             	add    esp,0x10
c00163aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ad:	81 c2 98 01 00 00    	add    edx,0x198
c00163b3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b9:	81 c2 98 01 00 00    	add    edx,0x198
c00163bf:	83 ec 04             	sub    esp,0x4
c00163c2:	50                   	push   eax
c00163c3:	51                   	push   ecx
c00163c4:	52                   	push   edx
c00163c5:	e8 be a2 fe ff       	call   c0000688 <memmove>
c00163ca:	83 c4 10             	add    esp,0x10
c00163cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163d3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163d7:	0f 85 5a ff ff ff    	jne    c0016337 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163e0:	eb 03                	jmp    c00163e5 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00163e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163e5:	c9                   	leave  
c00163e6:	c3                   	ret    
c00163e7:	90                   	nop

c00163e8 <Keyboard::Keyboard(char const*)>:
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ef:	83 ec 08             	sub    esp,0x8
c00163f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f6:	50                   	push   eax
c00163f7:	e8 4c e0 ff ff       	call   c0014448 <Device::Device(char const*)>
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	ba e4 be 02 c0       	mov    edx,0xc002bee4
c0016404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016408:	89 10                	mov    DWORD PTR [eax],edx
c001640a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016418:	c6 05 84 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f484,0x1
c001641f:	90                   	nop
c0016420:	83 c4 0c             	add    esp,0xc
c0016423:	c3                   	ret    

c0016424 <Keyboard::~Keyboard()>:
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	ba e4 be 02 c0       	mov    edx,0xc002bee4
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	89 10                	mov    DWORD PTR [eax],edx
c0016432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	50                   	push   eax
c001643a:	e8 ff dc ff ff       	call   c001413e <Device::~Device()>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	90                   	nop
c0016443:	83 c4 0c             	add    esp,0xc
c0016446:	c3                   	ret    
c0016447:	90                   	nop

c0016448 <Keyboard::~Keyboard()>:
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	83 ec 0c             	sub    esp,0xc
c001644e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016452:	e8 cd ff ff ff       	call   c0016424 <Keyboard::~Keyboard()>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	83 ec 08             	sub    esp,0x8
c001645d:	68 5c 01 00 00       	push   0x15c
c0016462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016466:	e8 ec c8 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	83 c4 0c             	add    esp,0xc
c0016471:	c3                   	ret    

c0016472 <LogicalDisk::close(int, int, void*)>:
c0016472:	83 c8 ff             	or     eax,0xffffffff
c0016475:	c3                   	ret    

c0016476 <LogicalDisk::~LogicalDisk()>:
c0016476:	83 ec 0c             	sub    esp,0xc
c0016479:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	89 10                	mov    DWORD PTR [eax],edx
c0016484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	50                   	push   eax
c001648c:	e8 ad dc ff ff       	call   c001413e <Device::~Device()>
c0016491:	83 c4 10             	add    esp,0x10
c0016494:	90                   	nop
c0016495:	83 c4 0c             	add    esp,0xc
c0016498:	c3                   	ret    
c0016499:	90                   	nop

c001649a <LogicalDisk::~LogicalDisk()>:
c001649a:	83 ec 0c             	sub    esp,0xc
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a4:	e8 cd ff ff ff       	call   c0016476 <LogicalDisk::~LogicalDisk()>
c00164a9:	83 c4 10             	add    esp,0x10
c00164ac:	83 ec 08             	sub    esp,0x8
c00164af:	68 74 01 00 00       	push   0x174
c00164b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b8:	e8 9a c8 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	83 c4 0c             	add    esp,0xc
c00164c3:	c3                   	ret    

c00164c4 <LogicalDisk::open(int, int, void*)>:
c00164c4:	83 ec 18             	sub    esp,0x18
c00164c7:	68 10 bf 02 c0       	push   0xc002bf10
c00164cc:	e8 00 44 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00164d1:	83 c8 ff             	or     eax,0xffffffff
c00164d4:	83 c4 1c             	add    esp,0x1c
c00164d7:	c3                   	ret    

c00164d8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164d8:	53                   	push   ebx
c00164d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164e5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164eb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164f1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164f7:	77 10                	ja     c0016509 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164f9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164ff:	89 d3                	mov    ebx,edx
c0016501:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016507:	72 05                	jb     c001650e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016509:	83 c8 ff             	or     eax,0xffffffff
c001650c:	89 c2                	mov    edx,eax
c001650e:	5b                   	pop    ebx
c001650f:	c3                   	ret    

c0016510 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016510:	56                   	push   esi
c0016511:	83 c8 ff             	or     eax,0xffffffff
c0016514:	53                   	push   ebx
c0016515:	89 c2                	mov    edx,eax
c0016517:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001651b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001651f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016523:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016529:	77 27                	ja     c0016552 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001652b:	89 d8                	mov    eax,ebx
c001652d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016533:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016539:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001653e:	89 c2                	mov    edx,eax
c0016540:	73 10                	jae    c0016552 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016542:	89 c8                	mov    eax,ecx
c0016544:	89 da                	mov    edx,ebx
c0016546:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001654c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016552:	5b                   	pop    ebx
c0016553:	5e                   	pop    esi
c0016554:	c3                   	ret    
c0016555:	90                   	nop

c0016556 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016556:	83 ec 1c             	sub    esp,0x1c
c0016559:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001655d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016565:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016569:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001656d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016570:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657c:	83 ec 08             	sub    esp,0x8
c001657f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016583:	50                   	push   eax
c0016584:	e8 bf de ff ff       	call   c0014448 <Device::Device(char const*)>
c0016589:	83 c4 10             	add    esp,0x10
c001658c:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c0016591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016595:	89 10                	mov    DWORD PTR [eax],edx
c0016597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165cd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165d3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165de:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165e4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165f2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016606:	90                   	nop
c0016607:	83 c4 1c             	add    esp,0x1c
c001660a:	c3                   	ret    
c001660b:	90                   	nop

c001660c <LogicalDisk::assignDriveLetter()>:
c001660c:	55                   	push   ebp
c001660d:	57                   	push   edi
c001660e:	56                   	push   esi
c001660f:	53                   	push   ebx
c0016610:	83 ec 14             	sub    esp,0x14
c0016613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016617:	8b 3d c0 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8c0
c001661d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016623:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016627:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001662d:	8b 3d c4 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8c4
c0016633:	3c 01                	cmp    al,0x1
c0016635:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016639:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001663d:	19 c0                	sbb    eax,eax
c001663f:	83 e0 02             	and    eax,0x2
c0016642:	83 c0 41             	add    eax,0x41
c0016645:	0f be e8             	movsx  ebp,al
c0016648:	3c 43                	cmp    al,0x43
c001664a:	75 10                	jne    c001665c <LogicalDisk::assignDriveLetter()+0x50>
c001664c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016653:	75 5d                	jne    c00166b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016655:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001665a:	75 56                	jne    c00166b2 <LogicalDisk::assignDriveLetter()+0xa6>
c001665c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001665f:	ba 01 00 00 00       	mov    edx,0x1
c0016664:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016668:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001666c:	d3 e2                	shl    edx,cl
c001666e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016672:	89 d7                	mov    edi,edx
c0016674:	89 d6                	mov    esi,edx
c0016676:	c1 ff 1f             	sar    edi,0x1f
c0016679:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001667d:	21 f9                	and    ecx,edi
c001667f:	09 d1                	or     ecx,edx
c0016681:	75 2f                	jne    c00166b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016683:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016687:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001668b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016691:	09 f2                	or     edx,esi
c0016693:	89 15 c0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c0,edx
c0016699:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001669d:	09 fa                	or     edx,edi
c001669f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166a3:	89 15 c4 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c4,edx
c00166a9:	89 1c bd e0 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0720],ebx
c00166b0:	eb 08                	jmp    c00166ba <LogicalDisk::assignDriveLetter()+0xae>
c00166b2:	45                   	inc    ebp
c00166b3:	40                   	inc    eax
c00166b4:	3c 5b                	cmp    al,0x5b
c00166b6:	75 90                	jne    c0016648 <LogicalDisk::assignDriveLetter()+0x3c>
c00166b8:	31 c0                	xor    eax,eax
c00166ba:	83 c4 14             	add    esp,0x14
c00166bd:	5b                   	pop    ebx
c00166be:	5e                   	pop    esi
c00166bf:	5f                   	pop    edi
c00166c0:	5d                   	pop    ebp
c00166c1:	c3                   	ret    

c00166c2 <LogicalDisk::mount()>:
c00166c2:	56                   	push   esi
c00166c3:	53                   	push   ebx
c00166c4:	50                   	push   eax
c00166c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166c9:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c00166cf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166d9:	85 db                	test   ebx,ebx
c00166db:	74 50                	je     c001672d <LogicalDisk::mount()+0x6b>
c00166dd:	50                   	push   eax
c00166de:	50                   	push   eax
c00166df:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c00166e5:	68 34 bf 02 c0       	push   0xc002bf34
c00166ea:	e8 48 c7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00166ef:	83 c4 0c             	add    esp,0xc
c00166f2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166fb:	83 e8 41             	sub    eax,0x41
c00166fe:	50                   	push   eax
c00166ff:	56                   	push   esi
c0016700:	53                   	push   ebx
c0016701:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016704:	83 c4 10             	add    esp,0x10
c0016707:	84 c0                	test   al,al
c0016709:	74 08                	je     c0016713 <LogicalDisk::mount()+0x51>
c001670b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016711:	eb 1c                	jmp    c001672f <LogicalDisk::mount()+0x6d>
c0016713:	51                   	push   ecx
c0016714:	51                   	push   ecx
c0016715:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c001671b:	68 4f bf 02 c0       	push   0xc002bf4f
c0016720:	e8 12 c7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0016725:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	eb ac                	jmp    c00166d9 <LogicalDisk::mount()+0x17>
c001672d:	31 c0                	xor    eax,eax
c001672f:	5a                   	pop    edx
c0016730:	5b                   	pop    ebx
c0016731:	5e                   	pop    esi
c0016732:	c3                   	ret    
c0016733:	90                   	nop

c0016734 <LogicalDisk::unmount()>:
c0016734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016738:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016742:	c3                   	ret    
c0016743:	90                   	nop

c0016744 <LogicalDisk::eject()>:
c0016744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016748:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001674e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016750:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016754:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016757:	90                   	nop

c0016758 <LogicalDisk::unassignDriveLetter()>:
c0016758:	57                   	push   edi
c0016759:	56                   	push   esi
c001675a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001675e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016765:	84 c9                	test   cl,cl
c0016767:	75 0f                	jne    c0016778 <LogicalDisk::unassignDriveLetter()+0x20>
c0016769:	c7 44 24 0c 6a bf 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bf6a
c0016771:	5e                   	pop    esi
c0016772:	5f                   	pop    edi
c0016773:	e9 59 41 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c0016778:	83 e9 41             	sub    ecx,0x41
c001677b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016782:	b8 01 00 00 00       	mov    eax,0x1
c0016787:	c7 04 8d e0 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0720],0x0
c0016792:	d3 e0                	shl    eax,cl
c0016794:	89 c7                	mov    edi,eax
c0016796:	f7 d0                	not    eax
c0016798:	c1 ff 1f             	sar    edi,0x1f
c001679b:	21 05 c0 f8 02 c0    	and    DWORD PTR ds:0xc002f8c0,eax
c00167a1:	89 fe                	mov    esi,edi
c00167a3:	f7 d6                	not    esi
c00167a5:	21 35 c4 f8 02 c0    	and    DWORD PTR ds:0xc002f8c4,esi
c00167ab:	5e                   	pop    esi
c00167ac:	5f                   	pop    edi
c00167ad:	c3                   	ret    

c00167ae <LogicalDisk::read(unsigned long long, int, void*)>:
c00167ae:	57                   	push   edi
c00167af:	56                   	push   esi
c00167b0:	53                   	push   ebx
c00167b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167c1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167c7:	77 41                	ja     c001680a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167c9:	99                   	cdq    
c00167ca:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167d0:	01 c8                	add    eax,ecx
c00167d2:	11 da                	adc    edx,ebx
c00167d4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167da:	19 d7                	sbb    edi,edx
c00167dc:	72 33                	jb     c0016811 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167de:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167e4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167ee:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167f2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167f8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	e9 ec 0a 00 00       	jmp    c00172f6 <VCache::read(unsigned long long, int, void*)>
c001680a:	b8 05 00 00 00       	mov    eax,0x5
c001680f:	eb 05                	jmp    c0016816 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016811:	b8 07 00 00 00       	mov    eax,0x7
c0016816:	5b                   	pop    ebx
c0016817:	5e                   	pop    esi
c0016818:	5f                   	pop    edi
c0016819:	c3                   	ret    

c001681a <LogicalDisk::write(unsigned long long, int, void*)>:
c001681a:	57                   	push   edi
c001681b:	56                   	push   esi
c001681c:	53                   	push   ebx
c001681d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016821:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016825:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001682d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016833:	77 41                	ja     c0016876 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016835:	99                   	cdq    
c0016836:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001683c:	01 c8                	add    eax,ecx
c001683e:	11 da                	adc    edx,ebx
c0016840:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016846:	19 d7                	sbb    edi,edx
c0016848:	72 33                	jb     c001687d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001684a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016850:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016856:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001685a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001685e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016864:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001686a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001686e:	5b                   	pop    ebx
c001686f:	5e                   	pop    esi
c0016870:	5f                   	pop    edi
c0016871:	e9 96 09 00 00       	jmp    c001720c <VCache::write(unsigned long long, int, void*)>
c0016876:	b8 05 00 00 00       	mov    eax,0x5
c001687b:	eb 05                	jmp    c0016882 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001687d:	b8 07 00 00 00       	mov    eax,0x7
c0016882:	5b                   	pop    ebx
c0016883:	5e                   	pop    esi
c0016884:	5f                   	pop    edi
c0016885:	c3                   	ret    

c0016886 <Mouse::Mouse(char const*)>:
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688d:	83 ec 08             	sub    esp,0x8
c0016890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016894:	50                   	push   eax
c0016895:	e8 ae db ff ff       	call   c0014448 <Device::Device(char const*)>
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	ba c0 bf 02 c0       	mov    edx,0xc002bfc0
c00168a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a6:	89 10                	mov    DWORD PTR [eax],edx
c00168a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ac:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168b6:	90                   	nop
c00168b7:	83 c4 0c             	add    esp,0xc
c00168ba:	c3                   	ret    
c00168bb:	90                   	nop

c00168bc <Mouse::~Mouse()>:
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	ba c0 bf 02 c0       	mov    edx,0xc002bfc0
c00168c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c8:	89 10                	mov    DWORD PTR [eax],edx
c00168ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	50                   	push   eax
c00168d2:	e8 67 d8 ff ff       	call   c001413e <Device::~Device()>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	90                   	nop
c00168db:	83 c4 0c             	add    esp,0xc
c00168de:	c3                   	ret    
c00168df:	90                   	nop

c00168e0 <Mouse::~Mouse()>:
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ea:	e8 cd ff ff ff       	call   c00168bc <Mouse::~Mouse()>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	83 ec 08             	sub    esp,0x8
c00168f5:	68 58 01 00 00       	push   0x158
c00168fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fe:	e8 54 c4 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	83 c4 0c             	add    esp,0xc
c0016909:	c3                   	ret    

c001690a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001690a:	55                   	push   ebp
c001690b:	57                   	push   edi
c001690c:	56                   	push   esi
c001690d:	53                   	push   ebx
c001690e:	81 ec 20 01 00 00    	sub    esp,0x120
c0016914:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001691b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016922:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016929:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016930:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001693c:	56                   	push   esi
c001693d:	68 e4 bf 02 c0       	push   0xc002bfe4
c0016942:	e8 f0 c4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0016947:	58                   	pop    eax
c0016948:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001694f:	e8 f0 db ff ff       	call   c0014544 <Device::getName()>
c0016954:	5a                   	pop    edx
c0016955:	59                   	pop    ecx
c0016956:	50                   	push   eax
c0016957:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001695b:	53                   	push   ebx
c001695c:	e8 ab 9e fe ff       	call   c000080c <strcpy>
c0016961:	5d                   	pop    ebp
c0016962:	58                   	pop    eax
c0016963:	68 15 c0 02 c0       	push   0xc002c015
c0016968:	53                   	push   ebx
c0016969:	e8 de 9f fe ff       	call   c000094c <strcat>
c001696e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016975:	e8 12 8f ff ff       	call   c000f88c <malloc>
c001697a:	83 c4 0c             	add    esp,0xc
c001697d:	89 c5                	mov    ebp,eax
c001697f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016987:	57                   	push   edi
c0016988:	56                   	push   esi
c0016989:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016990:	53                   	push   ebx
c0016991:	50                   	push   eax
c0016992:	e8 bf fb ff ff       	call   c0016556 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016997:	83 c4 14             	add    esp,0x14
c001699a:	55                   	push   ebp
c001699b:	e8 6c fc ff ff       	call   c001660c <LogicalDisk::assignDriveLetter()>
c00169a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169a3:	0f be d8             	movsx  ebx,al
c00169a6:	e8 17 fd ff ff       	call   c00166c2 <LogicalDisk::mount()>
c00169ab:	58                   	pop    eax
c00169ac:	5a                   	pop    edx
c00169ad:	55                   	push   ebp
c00169ae:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169b5:	e8 9e d8 ff ff       	call   c0014258 <Device::addChild(Device*)>
c00169ba:	59                   	pop    ecx
c00169bb:	5e                   	pop    esi
c00169bc:	53                   	push   ebx
c00169bd:	68 20 c0 02 c0       	push   0xc002c020
c00169c2:	e8 70 c4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00169c7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169cd:	5b                   	pop    ebx
c00169ce:	5e                   	pop    esi
c00169cf:	5f                   	pop    edi
c00169d0:	5d                   	pop    ebp
c00169d1:	c3                   	ret    

c00169d2 <createPartitionsForDisk(PhysicalDisk*)>:
c00169d2:	55                   	push   ebp
c00169d3:	57                   	push   edi
c00169d4:	56                   	push   esi
c00169d5:	53                   	push   ebx
c00169d6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169dc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169e3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169e9:	3d 00 02 00 00       	cmp    eax,0x200
c00169ee:	74 27                	je     c0016a17 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169f0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169f6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169fc:	83 ec 10             	sub    esp,0x10
c00169ff:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a03:	99                   	cdq    
c0016a04:	c1 e6 0a             	shl    esi,0xa
c0016a07:	52                   	push   edx
c0016a08:	89 fd                	mov    ebp,edi
c0016a0a:	50                   	push   eax
c0016a0b:	55                   	push   ebp
c0016a0c:	56                   	push   esi
c0016a0d:	e8 e2 0b 01 00       	call   c00275f4 <__udivdi3>
c0016a12:	e9 b1 00 00 00       	jmp    c0016ac8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a17:	83 ec 0c             	sub    esp,0xc
c0016a1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a1c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a20:	56                   	push   esi
c0016a21:	6a 01                	push   0x1
c0016a23:	6a 00                	push   0x0
c0016a25:	6a 00                	push   0x0
c0016a27:	53                   	push   ebx
c0016a28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a2b:	83 c4 20             	add    esp,0x20
c0016a2e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a36:	75 0a                	jne    c0016a42 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a38:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a40:	74 2c                	je     c0016a6e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a54:	83 ec 10             	sub    esp,0x10
c0016a57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a5b:	89 f7                	mov    edi,esi
c0016a5d:	c1 e0 0a             	shl    eax,0xa
c0016a60:	c1 ff 1f             	sar    edi,0x1f
c0016a63:	57                   	push   edi
c0016a64:	56                   	push   esi
c0016a65:	52                   	push   edx
c0016a66:	50                   	push   eax
c0016a67:	e8 88 0b 01 00       	call   c00275f4 <__udivdi3>
c0016a6c:	eb 5a                	jmp    c0016ac8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a6e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a75:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a7c:	83 e1 7f             	and    ecx,0x7f
c0016a7f:	83 e0 7f             	and    eax,0x7f
c0016a82:	01 c1                	add    ecx,eax
c0016a84:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a8b:	83 e0 7f             	and    eax,0x7f
c0016a8e:	01 c1                	add    ecx,eax
c0016a90:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a97:	83 e0 7f             	and    eax,0x7f
c0016a9a:	00 c1                	add    cl,al
c0016a9c:	74 41                	je     c0016adf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a9e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aa4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aaa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ab0:	83 ec 10             	sub    esp,0x10
c0016ab3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ab7:	89 f7                	mov    edi,esi
c0016ab9:	c1 e0 0a             	shl    eax,0xa
c0016abc:	c1 ff 1f             	sar    edi,0x1f
c0016abf:	57                   	push   edi
c0016ac0:	56                   	push   esi
c0016ac1:	52                   	push   edx
c0016ac2:	50                   	push   eax
c0016ac3:	e8 2c 0b 01 00       	call   c00275f4 <__udivdi3>
c0016ac8:	83 c4 14             	add    esp,0x14
c0016acb:	52                   	push   edx
c0016acc:	50                   	push   eax
c0016acd:	6a 00                	push   0x0
c0016acf:	6a 00                	push   0x0
c0016ad1:	53                   	push   ebx
c0016ad2:	e8 33 fe ff ff       	call   c001690a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ad7:	83 c4 20             	add    esp,0x20
c0016ada:	e9 79 01 00 00       	jmp    c0016c58 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016adf:	89 f0                	mov    eax,esi
c0016ae1:	31 f6                	xor    esi,esi
c0016ae3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016aea:	75 02                	jne    c0016aee <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aec:	89 f1                	mov    ecx,esi
c0016aee:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016af5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016afc:	c1 e2 08             	shl    edx,0x8
c0016aff:	c1 e7 10             	shl    edi,0x10
c0016b02:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b0a:	09 fa                	or     edx,edi
c0016b0c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b14:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b1b:	83 c0 10             	add    eax,0x10
c0016b1e:	09 fa                	or     edx,edi
c0016b20:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b27:	c1 e7 18             	shl    edi,0x18
c0016b2a:	09 fa                	or     edx,edi
c0016b2c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b33:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b37:	c1 e7 10             	shl    edi,0x10
c0016b3a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b41:	c1 e2 08             	shl    edx,0x8
c0016b44:	09 fa                	or     edx,edi
c0016b46:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b4d:	09 fa                	or     edx,edi
c0016b4f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b56:	c1 e7 18             	shl    edi,0x18
c0016b59:	09 fa                	or     edx,edi
c0016b5b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b5f:	46                   	inc    esi
c0016b60:	83 fe 04             	cmp    esi,0x4
c0016b63:	0f 85 7a ff ff ff    	jne    c0016ae3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b6d:	83 f0 01             	xor    eax,0x1
c0016b70:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b74:	75 57                	jne    c0016bcd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b7a:	83 f0 01             	xor    eax,0x1
c0016b7d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b81:	75 4a                	jne    c0016bcd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b83:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b87:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b9d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ba3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ba9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bad:	89 f7                	mov    edi,esi
c0016baf:	c1 e0 0a             	shl    eax,0xa
c0016bb2:	c1 ff 1f             	sar    edi,0x1f
c0016bb5:	57                   	push   edi
c0016bb6:	56                   	push   esi
c0016bb7:	52                   	push   edx
c0016bb8:	50                   	push   eax
c0016bb9:	e8 36 0a 01 00       	call   c00275f4 <__udivdi3>
c0016bbe:	83 c4 10             	add    esp,0x10
c0016bc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bc9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bcd:	84 c9                	test   cl,cl
c0016bcf:	74 53                	je     c0016c24 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bd1:	0f b6 c9             	movzx  ecx,cl
c0016bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bdc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016be0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016be8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bec:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bf0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c04:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c08:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c0c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c10:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c1c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c20:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c24:	31 ed                	xor    ebp,ebp
c0016c26:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c2a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c2e:	89 f8                	mov    eax,edi
c0016c30:	09 f0                	or     eax,esi
c0016c32:	74 1e                	je     c0016c52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c34:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c38:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c3c:	89 d1                	mov    ecx,edx
c0016c3e:	09 c1                	or     ecx,eax
c0016c40:	74 10                	je     c0016c52 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	57                   	push   edi
c0016c46:	56                   	push   esi
c0016c47:	52                   	push   edx
c0016c48:	50                   	push   eax
c0016c49:	53                   	push   ebx
c0016c4a:	e8 bb fc ff ff       	call   c001690a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c4f:	83 c4 20             	add    esp,0x20
c0016c52:	45                   	inc    ebp
c0016c53:	83 fd 04             	cmp    ebp,0x4
c0016c56:	75 ce                	jne    c0016c26 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c58:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c5e:	5b                   	pop    ebx
c0016c5f:	5e                   	pop    esi
c0016c60:	5f                   	pop    edi
c0016c61:	5d                   	pop    ebp
c0016c62:	c3                   	ret    
c0016c63:	90                   	nop

c0016c64 <Serial::Serial(char const*)>:
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6b:	83 ec 08             	sub    esp,0x8
c0016c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c72:	50                   	push   eax
c0016c73:	e8 d0 d7 ff ff       	call   c0014448 <Device::Device(char const*)>
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	ba 4c c0 02 c0       	mov    edx,0xc002c04c
c0016c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c84:	89 10                	mov    DWORD PTR [eax],edx
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c94:	90                   	nop
c0016c95:	83 c4 0c             	add    esp,0xc
c0016c98:	c3                   	ret    
c0016c99:	90                   	nop

c0016c9a <Serial::~Serial()>:
c0016c9a:	83 ec 0c             	sub    esp,0xc
c0016c9d:	ba 4c c0 02 c0       	mov    edx,0xc002c04c
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	89 10                	mov    DWORD PTR [eax],edx
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	50                   	push   eax
c0016cb0:	e8 89 d4 ff ff       	call   c001413e <Device::~Device()>
c0016cb5:	83 c4 10             	add    esp,0x10
c0016cb8:	90                   	nop
c0016cb9:	83 c4 0c             	add    esp,0xc
c0016cbc:	c3                   	ret    
c0016cbd:	90                   	nop

c0016cbe <Serial::~Serial()>:
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	83 ec 0c             	sub    esp,0xc
c0016cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc8:	e8 cd ff ff ff       	call   c0016c9a <Serial::~Serial()>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	83 ec 08             	sub    esp,0x8
c0016cd3:	68 58 01 00 00       	push   0x158
c0016cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cdc:	e8 76 c0 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	83 c4 0c             	add    esp,0xc
c0016ce7:	c3                   	ret    

c0016ce8 <Timer::Timer(char const*)>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cef:	83 ec 08             	sub    esp,0x8
c0016cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf6:	50                   	push   eax
c0016cf7:	e8 4c d7 ff ff       	call   c0014448 <Device::Device(char const*)>
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	ba 90 c0 02 c0       	mov    edx,0xc002c090
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	89 10                	mov    DWORD PTR [eax],edx
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d18:	90                   	nop
c0016d19:	83 c4 0c             	add    esp,0xc
c0016d1c:	c3                   	ret    
c0016d1d:	90                   	nop

c0016d1e <Timer::~Timer()>:
c0016d1e:	83 ec 0c             	sub    esp,0xc
c0016d21:	ba 90 c0 02 c0       	mov    edx,0xc002c090
c0016d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2a:	89 10                	mov    DWORD PTR [eax],edx
c0016d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	50                   	push   eax
c0016d34:	e8 05 d4 ff ff       	call   c001413e <Device::~Device()>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	90                   	nop
c0016d3d:	83 c4 0c             	add    esp,0xc
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <Timer::~Timer()>:
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4c:	e8 cd ff ff ff       	call   c0016d1e <Timer::~Timer()>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	83 ec 08             	sub    esp,0x8
c0016d57:	68 5c 01 00 00       	push   0x15c
c0016d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d60:	e8 f2 bf ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	83 c4 0c             	add    esp,0xc
c0016d6b:	c3                   	ret    

c0016d6c <Timer::read()>:
c0016d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d76:	c3                   	ret    

c0016d77 <timerHandler(unsigned long long)>:
c0016d77:	55                   	push   ebp
c0016d78:	57                   	push   edi
c0016d79:	56                   	push   esi
c0016d7a:	53                   	push   ebx
c0016d7b:	83 ec 0c             	sub    esp,0xc
c0016d7e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d82:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d86:	01 35 50 f9 02 c0    	add    DWORD PTR ds:0xc002f950,esi
c0016d8c:	11 3d 54 f9 02 c0    	adc    DWORD PTR ds:0xc002f954,edi
c0016d92:	80 3d cd f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cd,0x0
c0016d99:	0f 84 42 01 00 00    	je     c0016ee1 <timerHandler(unsigned long long)+0x16a>
c0016d9f:	fa                   	cli    
c0016da0:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0016da6:	83 ec 0c             	sub    esp,0xc
c0016da9:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c0016daf:	68 18 28 03 c0       	push   0xc0032818
c0016db4:	e8 c1 28 01 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016db9:	83 c4 10             	add    esp,0x10
c0016dbc:	84 c0                	test   al,al
c0016dbe:	0f 85 a2 00 00 00    	jne    c0016e66 <timerHandler(unsigned long long)+0xef>
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	68 18 28 03 c0       	push   0xc0032818
c0016dcc:	e8 c5 28 01 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	89 c3                	mov    ebx,eax
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 18 28 03 c0       	push   0xc0032818
c0016dde:	e8 b3 28 01 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	c7 04 24 18 28 03 c0 	mov    DWORD PTR [esp],0xc0032818
c0016dea:	89 c5                	mov    ebp,eax
c0016dec:	e8 ad 28 01 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dfa:	39 15 50 f9 02 c0    	cmp    DWORD PTR ds:0xc002f950,edx
c0016e00:	a1 54 f9 02 c0       	mov    eax,ds:0xc002f954
c0016e05:	19 c8                	sbb    eax,ecx
c0016e07:	72 21                	jb     c0016e2a <timerHandler(unsigned long long)+0xb3>
c0016e09:	83 ec 0c             	sub    esp,0xc
c0016e0c:	55                   	push   ebp
c0016e0d:	e8 36 7d 00 00       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c0016e12:	83 c4 10             	add    esp,0x10
c0016e15:	39 eb                	cmp    ebx,ebp
c0016e17:	75 21                	jne    c0016e3a <timerHandler(unsigned long long)+0xc3>
c0016e19:	83 ec 0c             	sub    esp,0xc
c0016e1c:	68 18 28 03 c0       	push   0xc0032818
c0016e21:	e8 70 28 01 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e26:	89 c3                	mov    ebx,eax
c0016e28:	eb 0d                	jmp    c0016e37 <timerHandler(unsigned long long)+0xc0>
c0016e2a:	50                   	push   eax
c0016e2b:	50                   	push   eax
c0016e2c:	55                   	push   ebp
c0016e2d:	68 18 28 03 c0       	push   0xc0032818
c0016e32:	e8 15 29 01 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e37:	83 c4 10             	add    esp,0x10
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	68 18 28 03 c0       	push   0xc0032818
c0016e42:	e8 33 28 01 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	84 c0                	test   al,al
c0016e4c:	75 18                	jne    c0016e66 <timerHandler(unsigned long long)+0xef>
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	68 18 28 03 c0       	push   0xc0032818
c0016e56:	e8 3b 28 01 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	39 d8                	cmp    eax,ebx
c0016e60:	0f 85 70 ff ff ff    	jne    c0016dd6 <timerHandler(unsigned long long)+0x5f>
c0016e66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e6b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e6f:	74 3d                	je     c0016eae <timerHandler(unsigned long long)+0x137>
c0016e71:	80 3d cc f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cc,0x0
c0016e78:	74 34                	je     c0016eae <timerHandler(unsigned long long)+0x137>
c0016e7a:	fa                   	cli    
c0016e7b:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0016e81:	31 d2                	xor    edx,edx
c0016e83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e88:	89 f9                	mov    ecx,edi
c0016e8a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e95:	39 c6                	cmp    esi,eax
c0016e97:	19 d1                	sbb    ecx,edx
c0016e99:	72 05                	jb     c0016ea0 <timerHandler(unsigned long long)+0x129>
c0016e9b:	e8 e4 77 00 00       	call   c001e684 <schedule()>
c0016ea0:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016ea5:	48                   	dec    eax
c0016ea6:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016eab:	75 01                	jne    c0016eae <timerHandler(unsigned long long)+0x137>
c0016ead:	fb                   	sti    
c0016eae:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0016eb3:	48                   	dec    eax
c0016eb4:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0016eb9:	75 18                	jne    c0016ed3 <timerHandler(unsigned long long)+0x15c>
c0016ebb:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c0016ec2:	74 0f                	je     c0016ed3 <timerHandler(unsigned long long)+0x15c>
c0016ec4:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c0016ece:	e8 b1 77 00 00       	call   c001e684 <schedule()>
c0016ed3:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016ed8:	48                   	dec    eax
c0016ed9:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016ede:	75 01                	jne    c0016ee1 <timerHandler(unsigned long long)+0x16a>
c0016ee0:	fb                   	sti    
c0016ee1:	83 c4 0c             	add    esp,0xc
c0016ee4:	5b                   	pop    ebx
c0016ee5:	5e                   	pop    esi
c0016ee6:	5f                   	pop    edi
c0016ee7:	5d                   	pop    ebp
c0016ee8:	c3                   	ret    

c0016ee9 <setupTimer(int)>:
c0016ee9:	57                   	push   edi
c0016eea:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016eef:	56                   	push   esi
c0016ef0:	53                   	push   ebx
c0016ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ef5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016efb:	83 ec 0c             	sub    esp,0xc
c0016efe:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f04:	e8 3b d6 ff ff       	call   c0014544 <Device::getName()>
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f0f:	0f 85 8d 00 00 00    	jne    c0016fa2 <setupTimer(int)+0xb9>
c0016f15:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016f1a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f21:	74 7f                	je     c0016fa2 <setupTimer(int)+0xb9>
c0016f23:	83 ec 0c             	sub    esp,0xc
c0016f26:	68 5c 01 00 00       	push   0x15c
c0016f2b:	e8 5c 89 ff ff       	call   c000f88c <malloc>
c0016f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f33:	89 c3                	mov    ebx,eax
c0016f35:	e8 8a 02 01 00       	call   c00271c4 <PIT::PIT()>
c0016f3a:	59                   	pop    ecx
c0016f3b:	5f                   	pop    edi
c0016f3c:	53                   	push   ebx
c0016f3d:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0016f43:	e8 10 d3 ff ff       	call   c0014258 <Device::addChild(Device*)>
c0016f48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f4a:	6a 00                	push   0x0
c0016f4c:	6a 00                	push   0x0
c0016f4e:	56                   	push   esi
c0016f4f:	53                   	push   ebx
c0016f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f53:	83 c4 14             	add    esp,0x14
c0016f56:	68 60 01 00 00       	push   0x160
c0016f5b:	e8 2c 89 ff ff       	call   c000f88c <malloc>
c0016f60:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f63:	89 c7                	mov    edi,eax
c0016f65:	e8 0a 01 01 00       	call   c0027074 <APICTimer::APICTimer()>
c0016f6a:	6a 00                	push   0x0
c0016f6c:	6a 00                	push   0x0
c0016f6e:	56                   	push   esi
c0016f6f:	57                   	push   edi
c0016f70:	e8 01 00 01 00       	call   c0026f76 <APICTimer::open(int, int, void*)>
c0016f75:	83 c4 20             	add    esp,0x20
c0016f78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f7a:	6a 00                	push   0x0
c0016f7c:	6a 00                	push   0x0
c0016f7e:	6a 00                	push   0x0
c0016f80:	53                   	push   ebx
c0016f81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f84:	58                   	pop    eax
c0016f85:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016f8a:	5a                   	pop    edx
c0016f8b:	57                   	push   edi
c0016f8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f92:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f98:	e8 bb d2 ff ff       	call   c0014258 <Device::addChild(Device*)>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	eb 33                	jmp    c0016fd5 <setupTimer(int)+0xec>
c0016fa2:	83 ec 0c             	sub    esp,0xc
c0016fa5:	68 5c 01 00 00       	push   0x15c
c0016faa:	e8 dd 88 ff ff       	call   c000f88c <malloc>
c0016faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fb2:	89 c3                	mov    ebx,eax
c0016fb4:	e8 0b 02 01 00       	call   c00271c4 <PIT::PIT()>
c0016fb9:	58                   	pop    eax
c0016fba:	5a                   	pop    edx
c0016fbb:	53                   	push   ebx
c0016fbc:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0016fc2:	e8 91 d2 ff ff       	call   c0014258 <Device::addChild(Device*)>
c0016fc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fc9:	6a 00                	push   0x0
c0016fcb:	6a 00                	push   0x0
c0016fcd:	56                   	push   esi
c0016fce:	53                   	push   ebx
c0016fcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fd2:	83 c4 20             	add    esp,0x20
c0016fd5:	89 d8                	mov    eax,ebx
c0016fd7:	5b                   	pop    ebx
c0016fd8:	5e                   	pop    esi
c0016fd9:	5f                   	pop    edi
c0016fda:	c3                   	ret    
c0016fdb:	90                   	nop

c0016fdc <VCache::VCache(PhysicalDisk*)>:
c0016fdc:	53                   	push   ebx
c0016fdd:	83 ec 18             	sub    esp,0x18
c0016fe0:	ba c0 c0 02 c0       	mov    edx,0xc002c0c0
c0016fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe9:	89 10                	mov    DWORD PTR [eax],edx
c0016feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017005:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001700c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017017:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001701e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017029:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017034:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017043:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017056:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001705a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001706d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017075:	83 ec 0c             	sub    esp,0xc
c0017078:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001707c:	e8 0b 88 ff ff       	call   c000f88c <malloc>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	89 c3                	mov    ebx,eax
c0017086:	83 ec 0c             	sub    esp,0xc
c0017089:	53                   	push   ebx
c001708a:	e8 9f 73 00 00       	call   c001e42e <Mutex::Mutex()>
c001708f:	83 c4 10             	add    esp,0x10
c0017092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017096:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ec:	05 00 01 00 00       	add    eax,0x100
c00170f1:	c1 e0 04             	shl    eax,0x4
c00170f4:	83 ec 0c             	sub    esp,0xc
c00170f7:	50                   	push   eax
c00170f8:	e8 8f 87 ff ff       	call   c000f88c <malloc>
c00170fd:	83 c4 10             	add    esp,0x10
c0017100:	89 c2                	mov    edx,eax
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017118:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001711c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017120:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017126:	c1 e0 07             	shl    eax,0x7
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	50                   	push   eax
c001712d:	e8 5a 87 ff ff       	call   c000f88c <malloc>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	89 c2                	mov    edx,eax
c0017137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001713e:	90                   	nop
c001713f:	83 c4 18             	add    esp,0x18
c0017142:	5b                   	pop    ebx
c0017143:	c3                   	ret    

c0017144 <VCache::invalidateReadBuffer()>:
c0017144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017148:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001714e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017152:	c3                   	ret    
c0017153:	90                   	nop

c0017154 <VCache::writeWriteBuffer()>:
c0017154:	53                   	push   ebx
c0017155:	83 ec 14             	sub    esp,0x14
c0017158:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001715c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001715f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017161:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017164:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017167:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001716a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001716d:	50                   	push   eax
c001716e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017171:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017178:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001717f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017183:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001718a:	83 c4 28             	add    esp,0x28
c001718d:	5b                   	pop    ebx
c001718e:	c3                   	ret    
c001718f:	90                   	nop

c0017190 <VCache::~VCache()>:
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	ba c0 c0 02 c0       	mov    edx,0xc002c0c0
c0017198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001719c:	89 10                	mov    DWORD PTR [eax],edx
c001719e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171a5:	84 c0                	test   al,al
c00171a7:	74 0f                	je     c00171b8 <VCache::~VCache()+0x28>
c00171a9:	83 ec 0c             	sub    esp,0xc
c00171ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b0:	e8 9f ff ff ff       	call   c0017154 <VCache::writeWriteBuffer()>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171bf:	83 ec 0c             	sub    esp,0xc
c00171c2:	50                   	push   eax
c00171c3:	e8 d4 86 ff ff       	call   c000f89c <free>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171d2:	83 ec 0c             	sub    esp,0xc
c00171d5:	50                   	push   eax
c00171d6:	e8 c1 86 ff ff       	call   c000f89c <free>
c00171db:	83 c4 10             	add    esp,0x10
c00171de:	90                   	nop
c00171df:	83 c4 0c             	add    esp,0xc
c00171e2:	c3                   	ret    
c00171e3:	90                   	nop

c00171e4 <VCache::~VCache()>:
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	83 ec 0c             	sub    esp,0xc
c00171ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ee:	e8 9d ff ff ff       	call   c0017190 <VCache::~VCache()>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	83 ec 08             	sub    esp,0x8
c00171f9:	6a 44                	push   0x44
c00171fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ff:	e8 53 bb ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	83 c4 0c             	add    esp,0xc
c001720a:	c3                   	ret    
c001720b:	90                   	nop

c001720c <VCache::write(unsigned long long, int, void*)>:
c001720c:	55                   	push   ebp
c001720d:	57                   	push   edi
c001720e:	56                   	push   esi
c001720f:	53                   	push   ebx
c0017210:	83 ec 18             	sub    esp,0x18
c0017213:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017217:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001721b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001721f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017222:	e8 95 77 00 00       	call   c001e9bc <Semaphore::acquire()>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001722e:	74 0c                	je     c001723c <VCache::write(unsigned long long, int, void*)+0x30>
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	53                   	push   ebx
c0017234:	e8 0b ff ff ff       	call   c0017144 <VCache::invalidateReadBuffer()>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017240:	74 5c                	je     c001729e <VCache::write(unsigned long long, int, void*)+0x92>
c0017242:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017245:	89 e8                	mov    eax,ebp
c0017247:	99                   	cdq    
c0017248:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001724b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001724e:	89 c1                	mov    ecx,eax
c0017250:	89 d0                	mov    eax,edx
c0017252:	31 f1                	xor    ecx,esi
c0017254:	31 f8                	xor    eax,edi
c0017256:	09 c1                	or     ecx,eax
c0017258:	75 38                	jne    c0017292 <VCache::write(unsigned long long, int, void*)+0x86>
c001725a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001725f:	75 31                	jne    c0017292 <VCache::write(unsigned long long, int, void*)+0x86>
c0017261:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017264:	89 ef                	mov    edi,ebp
c0017266:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001726c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017270:	0f af f9             	imul   edi,ecx
c0017273:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017276:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017278:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001727b:	40                   	inc    eax
c001727c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001727f:	83 c0 80             	add    eax,0xffffff80
c0017282:	75 5c                	jne    c00172e0 <VCache::write(unsigned long long, int, void*)+0xd4>
c0017284:	83 ec 0c             	sub    esp,0xc
c0017287:	53                   	push   ebx
c0017288:	e8 c7 fe ff ff       	call   c0017154 <VCache::writeWriteBuffer()>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	eb 4e                	jmp    c00172e0 <VCache::write(unsigned long long, int, void*)+0xd4>
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	53                   	push   ebx
c0017296:	e8 b9 fe ff ff       	call   c0017154 <VCache::writeWriteBuffer()>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172a1:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172a6:	7f 22                	jg     c00172ca <VCache::write(unsigned long long, int, void*)+0xbe>
c00172a8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172ab:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172b2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172b6:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172b9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172bc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172c2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c8:	eb 16                	jmp    c00172e0 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ca:	83 ec 0c             	sub    esp,0xc
c00172cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00172cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172d7:	57                   	push   edi
c00172d8:	56                   	push   esi
c00172d9:	50                   	push   eax
c00172da:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172dd:	83 c4 20             	add    esp,0x20
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172e6:	e8 0b 7e 00 00       	call   c001f0f6 <Semaphore::release()>
c00172eb:	83 c4 1c             	add    esp,0x1c
c00172ee:	31 c0                	xor    eax,eax
c00172f0:	5b                   	pop    ebx
c00172f1:	5e                   	pop    esi
c00172f2:	5f                   	pop    edi
c00172f3:	5d                   	pop    ebp
c00172f4:	c3                   	ret    
c00172f5:	90                   	nop

c00172f6 <VCache::read(unsigned long long, int, void*)>:
c00172f6:	55                   	push   ebp
c00172f7:	57                   	push   edi
c00172f8:	56                   	push   esi
c00172f9:	53                   	push   ebx
c00172fa:	83 ec 28             	sub    esp,0x28
c00172fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017301:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017305:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017309:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001730d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017310:	e8 a7 76 00 00       	call   c001e9bc <Semaphore::acquire()>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001731c:	74 0c                	je     c001732a <VCache::read(unsigned long long, int, void*)+0x34>
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	53                   	push   ebx
c0017322:	e8 2d fe ff ff       	call   c0017154 <VCache::writeWriteBuffer()>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	83 fd 01             	cmp    ebp,0x1
c001732d:	0f 85 80 00 00 00    	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017333:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017336:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001733a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017341:	75 70                	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xbd>
c0017343:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017346:	89 e9                	mov    ecx,ebp
c0017348:	f7 d9                	neg    ecx
c001734a:	89 c8                	mov    eax,ecx
c001734c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017350:	c1 f8 1f             	sar    eax,0x1f
c0017353:	21 f1                	and    ecx,esi
c0017355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017359:	89 c8                	mov    eax,ecx
c001735b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001735f:	21 f9                	and    ecx,edi
c0017361:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017365:	89 ca                	mov    edx,ecx
c0017367:	74 0a                	je     c0017373 <VCache::read(unsigned long long, int, void*)+0x7d>
c0017369:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001736c:	75 05                	jne    c0017373 <VCache::read(unsigned long long, int, void*)+0x7d>
c001736e:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017371:	74 23                	je     c0017396 <VCache::read(unsigned long long, int, void*)+0xa0>
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001737a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001737e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0017381:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0017384:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017386:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017389:	55                   	push   ebp
c001738a:	52                   	push   edx
c001738b:	50                   	push   eax
c001738c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017390:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017393:	83 c4 20             	add    esp,0x20
c0017396:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017399:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001739d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173a6:	48                   	dec    eax
c00173a7:	21 c6                	and    esi,eax
c00173a9:	0f af f1             	imul   esi,ecx
c00173ac:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173b1:	eb 1d                	jmp    c00173d0 <VCache::read(unsigned long long, int, void*)+0xda>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	53                   	push   ebx
c00173b7:	e8 88 fd ff ff       	call   c0017144 <VCache::invalidateReadBuffer()>
c00173bc:	5a                   	pop    edx
c00173bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00173c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173c6:	55                   	push   ebp
c00173c7:	57                   	push   edi
c00173c8:	56                   	push   esi
c00173c9:	50                   	push   eax
c00173ca:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173cd:	83 c4 20             	add    esp,0x20
c00173d0:	83 ec 0c             	sub    esp,0xc
c00173d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173d6:	e8 1b 7d 00 00       	call   c001f0f6 <Semaphore::release()>
c00173db:	83 c4 2c             	add    esp,0x2c
c00173de:	31 c0                	xor    eax,eax
c00173e0:	5b                   	pop    ebx
c00173e1:	5e                   	pop    esi
c00173e2:	5f                   	pop    edi
c00173e3:	5d                   	pop    ebp
c00173e4:	c3                   	ret    
c00173e5:	90                   	nop

c00173e6 <Video::putrect(int, int, int, int, unsigned int)>:
c00173e6:	55                   	push   ebp
c00173e7:	57                   	push   edi
c00173e8:	56                   	push   esi
c00173e9:	53                   	push   ebx
c00173ea:	83 ec 1c             	sub    esp,0x1c
c00173ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173f5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173f9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017401:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017405:	01 df                	add    edi,ebx
c0017407:	39 fb                	cmp    ebx,edi
c0017409:	7d 1f                	jge    c001742a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001740b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001740f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017413:	7d 12                	jge    c0017427 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017415:	8b 16                	mov    edx,DWORD PTR [esi]
c0017417:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001741b:	53                   	push   ebx
c001741c:	55                   	push   ebp
c001741d:	45                   	inc    ebp
c001741e:	56                   	push   esi
c001741f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	eb e8                	jmp    c001740f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017427:	43                   	inc    ebx
c0017428:	eb dd                	jmp    c0017407 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001742a:	83 c4 1c             	add    esp,0x1c
c001742d:	5b                   	pop    ebx
c001742e:	5e                   	pop    esi
c001742f:	5f                   	pop    edi
c0017430:	5d                   	pop    ebp
c0017431:	c3                   	ret    

c0017432 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017432:	55                   	push   ebp
c0017433:	57                   	push   edi
c0017434:	31 ff                	xor    edi,edi
c0017436:	56                   	push   esi
c0017437:	53                   	push   ebx
c0017438:	83 ec 1c             	sub    esp,0x1c
c001743b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001743f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017443:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001744a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001744f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017453:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017457:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001745b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001745e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017462:	01 f9                	add    ecx,edi
c0017464:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017468:	7d 2f                	jge    c0017499 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001746a:	31 f6                	xor    esi,esi
c001746c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017470:	01 f2                	add    edx,esi
c0017472:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017476:	7d 1a                	jge    c0017492 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017478:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001747b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001747e:	46                   	inc    esi
c001747f:	51                   	push   ecx
c0017480:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017484:	52                   	push   edx
c0017485:	55                   	push   ebp
c0017486:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017489:	83 c4 10             	add    esp,0x10
c001748c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017490:	eb da                	jmp    c001746c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017492:	47                   	inc    edi
c0017493:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017497:	eb c5                	jmp    c001745e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017499:	83 c4 1c             	add    esp,0x1c
c001749c:	5b                   	pop    ebx
c001749d:	5e                   	pop    esi
c001749e:	5f                   	pop    edi
c001749f:	5d                   	pop    ebp
c00174a0:	c3                   	ret    
c00174a1:	90                   	nop

c00174a2 <Video::blit(unsigned int*, int, int, int, int)>:
c00174a2:	55                   	push   ebp
c00174a3:	57                   	push   edi
c00174a4:	56                   	push   esi
c00174a5:	53                   	push   ebx
c00174a6:	83 ec 1c             	sub    esp,0x1c
c00174a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174b1:	85 c0                	test   eax,eax
c00174b3:	79 02                	jns    c00174b7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174b5:	31 c0                	xor    eax,eax
c00174b7:	c1 e0 02             	shl    eax,0x2
c00174ba:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174c6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174ca:	39 d8                	cmp    eax,ebx
c00174cc:	7e 49                	jle    c0017517 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ce:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174d4:	7c 41                	jl     c0017517 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174de:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174e2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174e6:	39 f9                	cmp    ecx,edi
c00174e8:	7e 22                	jle    c001750c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174ea:	83 c5 04             	add    ebp,0x4
c00174ed:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f3:	7c 14                	jl     c0017509 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174f7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017502:	56                   	push   esi
c0017503:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	47                   	inc    edi
c001750a:	eb d2                	jmp    c00174de <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001750c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017510:	43                   	inc    ebx
c0017511:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017515:	eb ab                	jmp    c00174c2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017517:	83 c4 1c             	add    esp,0x1c
c001751a:	5b                   	pop    ebx
c001751b:	5e                   	pop    esi
c001751c:	5f                   	pop    edi
c001751d:	5d                   	pop    ebp
c001751e:	c3                   	ret    
c001751f:	90                   	nop

c0017520 <Video::clearScreen(unsigned int)>:
c0017520:	57                   	push   edi
c0017521:	56                   	push   esi
c0017522:	53                   	push   ebx
c0017523:	31 db                	xor    ebx,ebx
c0017525:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017529:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001752f:	7e 1f                	jle    c0017550 <Video::clearScreen(unsigned int)+0x30>
c0017531:	31 ff                	xor    edi,edi
c0017533:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017539:	7e 12                	jle    c001754d <Video::clearScreen(unsigned int)+0x2d>
c001753b:	8b 06                	mov    eax,DWORD PTR [esi]
c001753d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017541:	53                   	push   ebx
c0017542:	57                   	push   edi
c0017543:	47                   	inc    edi
c0017544:	56                   	push   esi
c0017545:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	eb e6                	jmp    c0017533 <Video::clearScreen(unsigned int)+0x13>
c001754d:	43                   	inc    ebx
c001754e:	eb d9                	jmp    c0017529 <Video::clearScreen(unsigned int)+0x9>
c0017550:	5b                   	pop    ebx
c0017551:	5e                   	pop    esi
c0017552:	5f                   	pop    edi
c0017553:	c3                   	ret    

c0017554 <Video::putpixel(int, int, unsigned int)>:
c0017554:	c7 44 24 04 c8 c0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c0c8
c001755c:	e9 70 33 00 00       	jmp    c001a8d1 <Krnl::panic(char const*)>
c0017561:	90                   	nop

c0017562 <Video::Video(char const*)>:
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017569:	83 ec 08             	sub    esp,0x8
c001756c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017570:	50                   	push   eax
c0017571:	e8 d2 ce ff ff       	call   c0014448 <Device::Device(char const*)>
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	ba 4c c1 02 c0       	mov    edx,0xc002c14c
c001757e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017582:	89 10                	mov    DWORD PTR [eax],edx
c0017584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017588:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017592:	90                   	nop
c0017593:	83 c4 0c             	add    esp,0xc
c0017596:	c3                   	ret    
c0017597:	90                   	nop

c0017598 <Video::~Video()>:
c0017598:	83 ec 0c             	sub    esp,0xc
c001759b:	ba 4c c1 02 c0       	mov    edx,0xc002c14c
c00175a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a4:	89 10                	mov    DWORD PTR [eax],edx
c00175a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175aa:	83 ec 0c             	sub    esp,0xc
c00175ad:	50                   	push   eax
c00175ae:	e8 8b cb ff ff       	call   c001413e <Device::~Device()>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	90                   	nop
c00175b7:	83 c4 0c             	add    esp,0xc
c00175ba:	c3                   	ret    
c00175bb:	90                   	nop

c00175bc <Video::~Video()>:
c00175bc:	83 ec 0c             	sub    esp,0xc
c00175bf:	83 ec 0c             	sub    esp,0xc
c00175c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175c6:	e8 cd ff ff ff       	call   c0017598 <Video::~Video()>
c00175cb:	83 c4 10             	add    esp,0x10
c00175ce:	83 ec 08             	sub    esp,0x8
c00175d1:	68 64 01 00 00       	push   0x164
c00175d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175da:	e8 78 b7 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	83 c4 0c             	add    esp,0xc
c00175e5:	c3                   	ret    

c00175e6 <Video::isMonochrome()>:
c00175e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ea:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175f0:	c3                   	ret    
c00175f1:	90                   	nop

c00175f2 <Video::getWidth()>:
c00175f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175fc:	c3                   	ret    
c00175fd:	90                   	nop

c00175fe <Video::getHeight()>:
c00175fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017602:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <Video::drawCursor(int, int, unsigned char*, int)>:
c001760a:	55                   	push   ebp
c001760b:	57                   	push   edi
c001760c:	56                   	push   esi
c001760d:	53                   	push   ebx
c001760e:	83 ec 2c             	sub    esp,0x2c
c0017611:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017615:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017619:	83 f8 01             	cmp    eax,0x1
c001761c:	19 c9                	sbb    ecx,ecx
c001761e:	31 db                	xor    ebx,ebx
c0017620:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017624:	89 cd                	mov    ebp,ecx
c0017626:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001762e:	f7 d5                	not    ebp
c0017630:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017636:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001763a:	01 d8                	add    eax,ebx
c001763c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017640:	56                   	push   esi
c0017641:	e8 b8 ff ff ff       	call   c00175fe <Video::getHeight()>
c0017646:	59                   	pop    ecx
c0017647:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001764b:	7e 70                	jle    c00176bd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001764d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017651:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017655:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017658:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001765c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017660:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017667:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001766b:	89 f8                	mov    eax,edi
c001766d:	83 c0 20             	add    eax,0x20
c0017670:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017674:	56                   	push   esi
c0017675:	e8 78 ff ff ff       	call   c00175f2 <Video::getWidth()>
c001767a:	5a                   	pop    edx
c001767b:	39 c7                	cmp    edi,eax
c001767d:	7d 34                	jge    c00176b3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001767f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017684:	74 05                	je     c001768b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017686:	8b 06                	mov    eax,DWORD PTR [esi]
c0017688:	55                   	push   ebp
c0017689:	eb 0d                	jmp    c0017698 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001768b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017690:	74 12                	je     c00176a4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017692:	8b 06                	mov    eax,DWORD PTR [esi]
c0017694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017698:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001769c:	57                   	push   edi
c001769d:	56                   	push   esi
c001769e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176a1:	83 c4 10             	add    esp,0x10
c00176a4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176a8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176ac:	47                   	inc    edi
c00176ad:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176b1:	75 c1                	jne    c0017674 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176b3:	43                   	inc    ebx
c00176b4:	83 fb 20             	cmp    ebx,0x20
c00176b7:	0f 85 79 ff ff ff    	jne    c0017636 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176bd:	83 c4 2c             	add    esp,0x2c
c00176c0:	5b                   	pop    ebx
c00176c1:	5e                   	pop    esi
c00176c2:	5f                   	pop    edi
c00176c3:	5d                   	pop    ebp
c00176c4:	c3                   	ret    
c00176c5:	90                   	nop

c00176c6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176c6:	55                   	push   ebp
c00176c7:	57                   	push   edi
c00176c8:	56                   	push   esi
c00176c9:	53                   	push   ebx
c00176ca:	83 ec 28             	sub    esp,0x28
c00176cd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176d1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176d5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176d9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176dd:	c1 e7 08             	shl    edi,0x8
c00176e0:	01 c7                	add    edi,eax
c00176e2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176e6:	c1 e0 08             	shl    eax,0x8
c00176e9:	01 d0                	add    eax,edx
c00176eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f3:	0f af c7             	imul   eax,edi
c00176f6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176fd:	50                   	push   eax
c00176fe:	e8 89 81 ff ff       	call   c000f88c <malloc>
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	89 c5                	mov    ebp,eax
c0017708:	85 c0                	test   eax,eax
c001770a:	75 15                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001770c:	83 ec 0c             	sub    esp,0xc
c001770f:	68 e9 c0 02 c0       	push   0xc002c0e9
c0017714:	e8 1e b7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017719:	83 c4 10             	add    esp,0x10
c001771c:	e9 1c 01 00 00       	jmp    c001783d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017721:	be 12 00 00 00       	mov    esi,0x12
c0017726:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001772a:	74 11                	je     c001773d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001772c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017730:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017734:	c1 fe 03             	sar    esi,0x3
c0017737:	0f af f0             	imul   esi,eax
c001773a:	83 c6 12             	add    esi,0x12
c001773d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017741:	74 04                	je     c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017743:	85 ff                	test   edi,edi
c0017745:	75 12                	jne    c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017747:	83 ec 0c             	sub    esp,0xc
c001774a:	68 00 c1 02 c0       	push   0xc002c100
c001774f:	e8 e3 b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017754:	e9 ce 00 00 00       	jmp    c0017827 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017759:	52                   	push   edx
c001775a:	52                   	push   edx
c001775b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001775f:	50                   	push   eax
c0017760:	68 15 c1 02 c0       	push   0xc002c115
c0017765:	e8 cd b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001776a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001776e:	83 c4 10             	add    esp,0x10
c0017771:	80 fa 02             	cmp    dl,0x2
c0017774:	0f 85 98 00 00 00    	jne    c0017812 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001777a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001777f:	75 10                	jne    c0017791 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017781:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017785:	75 0a                	jne    c0017791 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017787:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001778a:	83 e8 18             	sub    eax,0x18
c001778d:	a8 f7                	test   al,0xf7
c001778f:	74 0a                	je     c001779b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017791:	83 ec 0c             	sub    esp,0xc
c0017794:	68 22 c1 02 c0       	push   0xc002c122
c0017799:	eb 7f                	jmp    c001781a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001779b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177b7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177bb:	75 0c                	jne    c00177c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177bd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177c2:	c1 e0 18             	shl    eax,0x18
c00177c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177c9:	41                   	inc    ecx
c00177ca:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177cf:	c1 e2 10             	shl    edx,0x10
c00177d2:	89 d0                	mov    eax,edx
c00177d4:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177d9:	c1 e2 08             	shl    edx,0x8
c00177dc:	09 c2                	or     edx,eax
c00177de:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177e2:	09 c2                	or     edx,eax
c00177e4:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177e8:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177ec:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177f0:	c1 f8 03             	sar    eax,0x3
c00177f3:	01 c6                	add    esi,eax
c00177f5:	89 c8                	mov    eax,ecx
c00177f7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177fb:	39 c7                	cmp    edi,eax
c00177fd:	7f b0                	jg     c00177af <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017807:	39 14 24             	cmp    DWORD PTR [esp],edx
c001780a:	7e 22                	jle    c001782e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001780c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017810:	eb 99                	jmp    c00177ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017812:	50                   	push   eax
c0017813:	50                   	push   eax
c0017814:	52                   	push   edx
c0017815:	68 30 c1 02 c0       	push   0xc002c130
c001781a:	e8 18 b6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001781f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017822:	e8 75 80 ff ff       	call   c000f89c <free>
c0017827:	83 c4 10             	add    esp,0x10
c001782a:	31 ed                	xor    ebp,ebp
c001782c:	eb 0f                	jmp    c001783d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001782e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017832:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017835:	89 38                	mov    DWORD PTR [eax],edi
c0017837:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783b:	89 08                	mov    DWORD PTR [eax],ecx
c001783d:	83 c4 1c             	add    esp,0x1c
c0017840:	89 e8                	mov    eax,ebp
c0017842:	5b                   	pop    ebx
c0017843:	5e                   	pop    esi
c0017844:	5f                   	pop    edi
c0017845:	5d                   	pop    ebp
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <Video::putTGA(int, int, unsigned char*, int)>:
c0017848:	55                   	push   ebp
c0017849:	57                   	push   edi
c001784a:	56                   	push   esi
c001784b:	53                   	push   ebx
c001784c:	83 ec 28             	sub    esp,0x28
c001784f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017853:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017857:	50                   	push   eax
c0017858:	8d 44 24 18          	lea    eax,[esp+0x18]
c001785c:	50                   	push   eax
c001785d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017861:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017865:	56                   	push   esi
c0017866:	e8 5b fe ff ff       	call   c00176c6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001786b:	83 c4 20             	add    esp,0x20
c001786e:	85 c0                	test   eax,eax
c0017870:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017874:	74 35                	je     c00178ab <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017876:	89 c7                	mov    edi,eax
c0017878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001787c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017880:	39 d8                	cmp    eax,ebx
c0017882:	7e 27                	jle    c00178ab <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017884:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017888:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001788c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017890:	39 e8                	cmp    eax,ebp
c0017892:	7e 14                	jle    c00178a8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017894:	8b 06                	mov    eax,DWORD PTR [esi]
c0017896:	83 c7 04             	add    edi,0x4
c0017899:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001789c:	53                   	push   ebx
c001789d:	55                   	push   ebp
c001789e:	45                   	inc    ebp
c001789f:	56                   	push   esi
c00178a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	eb e0                	jmp    c0017888 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178a8:	43                   	inc    ebx
c00178a9:	eb cd                	jmp    c0017878 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178ab:	83 c4 1c             	add    esp,0x1c
c00178ae:	5b                   	pop    ebx
c00178af:	5e                   	pop    esi
c00178b0:	5f                   	pop    edi
c00178b1:	5d                   	pop    ebp
c00178b2:	c3                   	ret    
c00178b3:	90                   	nop

c00178b4 <ACPI::close(int, int, void*)>:
c00178b4:	83 ec 1c             	sub    esp,0x1c
c00178b7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178bf:	74 0a                	je     c00178cb <ACPI::close(int, int, void*)+0x17>
c00178c1:	b8 00 00 00 00       	mov    eax,0x0
c00178c6:	e9 9a 00 00 00       	jmp    c0017965 <ACPI::close(int, int, void*)+0xb1>
c00178cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178d0:	75 37                	jne    c0017909 <ACPI::close(int, int, void*)+0x55>
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	68 8c c1 02 c0       	push   0xc002c18c
c00178da:	e8 58 b5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00178e7:	85 c0                	test   eax,eax
c00178e9:	74 07                	je     c00178f2 <ACPI::close(int, int, void*)+0x3e>
c00178eb:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00178f0:	ff d0                	call   eax
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	68 00 c3 02 c0       	push   0xc002c300
c00178fa:	e8 d2 2f 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017907:	eb 5c                	jmp    c0017965 <ACPI::close(int, int, void*)+0xb1>
c0017909:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001790e:	75 50                	jne    c0017960 <ACPI::close(int, int, void*)+0xac>
c0017910:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c0017915:	85 c0                	test   eax,eax
c0017917:	74 07                	je     c0017920 <ACPI::close(int, int, void*)+0x6c>
c0017919:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c001791e:	ff d0                	call   eax
c0017920:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017925:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001792a:	83 e0 02             	and    eax,0x2
c001792d:	74 1c                	je     c001794b <ACPI::close(int, int, void*)+0x97>
c001792f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017936:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001793a:	89 c2                	mov    edx,eax
c001793c:	ec                   	in     al,dx
c001793d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017941:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017945:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017949:	eb da                	jmp    c0017925 <ACPI::close(int, int, void*)+0x71>
c001794b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017952:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017957:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001795b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001795f:	ee                   	out    dx,al
c0017960:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017965:	83 c4 1c             	add    esp,0x1c
c0017968:	c3                   	ret    

c0017969 <findRSDP()>:
c0017969:	83 ec 1c             	sub    esp,0x1c
c001796c:	83 ec 0c             	sub    esp,0xc
c001796f:	68 99 c1 02 c0       	push   0xc002c199
c0017974:	e8 be b4 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017987:	83 e0 04             	and    eax,0x4
c001798a:	84 c0                	test   al,al
c001798c:	75 07                	jne    c0017995 <findRSDP()+0x2c>
c001798e:	b8 00 00 00 00       	mov    eax,0x0
c0017993:	eb 6a                	jmp    c00179ff <findRSDP()+0x96>
c0017995:	a1 14 f3 02 c0       	mov    eax,ds:0xc002f314
c001799a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001799f:	7f 1b                	jg     c00179bc <findRSDP()+0x53>
c00179a1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00179a6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ac:	83 e2 fb             	and    edx,0xfffffffb
c00179af:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179b5:	b8 00 00 00 00       	mov    eax,0x0
c00179ba:	eb 43                	jmp    c00179ff <findRSDP()+0x96>
c00179bc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179c4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179cc:	77 2c                	ja     c00179fa <findRSDP()+0x91>
c00179ce:	83 ec 04             	sub    esp,0x4
c00179d1:	6a 08                	push   0x8
c00179d3:	68 a7 c1 02 c0       	push   0xc002c1a7
c00179d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179dc:	e8 6b 8c fe ff       	call   c000064c <memcmp>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	85 c0                	test   eax,eax
c00179e6:	0f 94 c0             	sete   al
c00179e9:	84 c0                	test   al,al
c00179eb:	74 06                	je     c00179f3 <findRSDP()+0x8a>
c00179ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f1:	eb 0c                	jmp    c00179ff <findRSDP()+0x96>
c00179f3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179f8:	eb ca                	jmp    c00179c4 <findRSDP()+0x5b>
c00179fa:	b8 00 00 00 00       	mov    eax,0x0
c00179ff:	83 c4 1c             	add    esp,0x1c
c0017a02:	c3                   	ret    

c0017a03 <loadACPITables(unsigned char*)>:
c0017a03:	57                   	push   edi
c0017a04:	56                   	push   esi
c0017a05:	53                   	push   ebx
c0017a06:	83 ec 60             	sub    esp,0x60
c0017a09:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017a0e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a14:	83 e0 04             	and    eax,0x4
c0017a17:	84 c0                	test   al,al
c0017a19:	0f 84 33 02 00 00    	je     c0017c52 <loadACPITables(unsigned char*)+0x24f>
c0017a1f:	a0 a0 1b 03 c0       	mov    al,ds:0xc0031ba0
c0017a24:	84 c0                	test   al,al
c0017a26:	74 75                	je     c0017a9d <loadACPITables(unsigned char*)+0x9a>
c0017a28:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a2c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a37:	83 e8 24             	sub    eax,0x24
c0017a3a:	c1 e8 03             	shr    eax,0x3
c0017a3d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a41:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a49:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a4d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a51:	0f 8d b2 00 00 00    	jge    c0017b09 <loadACPITables(unsigned char*)+0x106>
c0017a57:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a5b:	83 c0 24             	add    eax,0x24
c0017a5e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a62:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a66:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a6a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a6e:	c1 e0 03             	shl    eax,0x3
c0017a71:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a75:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a79:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a7e:	89 c1                	mov    ecx,eax
c0017a80:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017a85:	8d 50 01             	lea    edx,[eax+0x1]
c0017a88:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c0017a8e:	89 ca                	mov    edx,ecx
c0017a90:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017a97:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017a9b:	eb ac                	jmp    c0017a49 <loadACPITables(unsigned char*)+0x46>
c0017a9d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aa1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017aa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017aa9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aac:	83 e8 24             	sub    eax,0x24
c0017aaf:	c1 e8 02             	shr    eax,0x2
c0017ab2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ab6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017abe:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017ac2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ac6:	7d 41                	jge    c0017b09 <loadACPITables(unsigned char*)+0x106>
c0017ac8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017acc:	83 c0 24             	add    eax,0x24
c0017acf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017ad3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017adb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017adf:	c1 e0 02             	shl    eax,0x2
c0017ae2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017ae6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aea:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017aec:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017af1:	8d 50 01             	lea    edx,[eax+0x1]
c0017af4:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c0017afa:	89 ca                	mov    edx,ecx
c0017afc:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017b03:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b07:	eb b5                	jmp    c0017abe <loadACPITables(unsigned char*)+0xbb>
c0017b09:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b11:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017b16:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b1a:	0f 8d 33 01 00 00    	jge    c0017c53 <loadACPITables(unsigned char*)+0x250>
c0017b20:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b24:	8b 04 c5 a4 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce65c]
c0017b2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b33:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b40:	89 c6                	mov    esi,eax
c0017b42:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	6a 01                	push   0x1
c0017b4d:	e8 df 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b59:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	6a 01                	push   0x1
c0017b64:	6a 01                	push   0x1
c0017b66:	50                   	push   eax
c0017b67:	52                   	push   edx
c0017b68:	53                   	push   ebx
c0017b69:	e8 f0 a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b6e:	83 c4 20             	add    esp,0x20
c0017b71:	09 f0                	or     eax,esi
c0017b73:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b77:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b7b:	c1 e0 03             	shl    eax,0x3
c0017b7e:	05 a0 19 03 c0       	add    eax,0xc00319a0
c0017b83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b8f:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ba7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bab:	89 c6                	mov    esi,eax
c0017bad:	89 d7                	mov    edi,edx
c0017baf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bb1:	89 c8                	mov    eax,ecx
c0017bb3:	89 fa                	mov    edx,edi
c0017bb5:	89 f3                	mov    ebx,esi
c0017bb7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017bbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017bbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd2:	05 00 10 00 00       	add    eax,0x1000
c0017bd7:	c1 e8 0c             	shr    eax,0xc
c0017bda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017be6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bea:	25 ff 0f 00 00       	and    eax,0xfff
c0017bef:	89 c6                	mov    esi,eax
c0017bf1:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017bf7:	83 ec 0c             	sub    esp,0xc
c0017bfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bfe:	e8 2e 9e ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c0a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	6a 01                	push   0x1
c0017c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c19:	50                   	push   eax
c0017c1a:	52                   	push   edx
c0017c1b:	53                   	push   ebx
c0017c1c:	e8 3d a9 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c21:	83 c4 20             	add    esp,0x20
c0017c24:	09 f0                	or     eax,esi
c0017c26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	50                   	push   eax
c0017c32:	e8 ba a2 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c37:	83 c4 10             	add    esp,0x10
c0017c3a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c3e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c42:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017c49:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c4d:	e9 bf fe ff ff       	jmp    c0017b11 <loadACPITables(unsigned char*)+0x10e>
c0017c52:	90                   	nop
c0017c53:	83 c4 60             	add    esp,0x60
c0017c56:	5b                   	pop    ebx
c0017c57:	5e                   	pop    esi
c0017c58:	5f                   	pop    edi
c0017c59:	c3                   	ret    

c0017c5a <findRSDT(unsigned char*)>:
c0017c5a:	57                   	push   edi
c0017c5b:	56                   	push   esi
c0017c5c:	53                   	push   ebx
c0017c5d:	83 ec 50             	sub    esp,0x50
c0017c60:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017c65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c6b:	83 e0 04             	and    eax,0x4
c0017c6e:	84 c0                	test   al,al
c0017c70:	75 0a                	jne    c0017c7c <findRSDT(unsigned char*)+0x22>
c0017c72:	b8 00 00 00 00       	mov    eax,0x0
c0017c77:	e9 21 01 00 00       	jmp    c0017d9d <findRSDT(unsigned char*)+0x143>
c0017c7c:	89 e0                	mov    eax,esp
c0017c7e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c82:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017c86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c8a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017c9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ca2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017ca6:	89 c6                	mov    esi,eax
c0017ca8:	89 d7                	mov    edi,edx
c0017caa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cac:	89 c8                	mov    eax,ecx
c0017cae:	89 fa                	mov    edx,edi
c0017cb0:	89 f3                	mov    ebx,esi
c0017cb2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017cb6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017cba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cbe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017cc2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cc6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cd6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cde:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017ce2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017ce6:	25 ff 0f 00 00       	and    eax,0xfff
c0017ceb:	89 c6                	mov    esi,eax
c0017ced:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017cf3:	83 ec 0c             	sub    esp,0xc
c0017cf6:	6a 02                	push   0x2
c0017cf8:	e8 34 9d ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017cfd:	83 c4 10             	add    esp,0x10
c0017d00:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d04:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	6a 01                	push   0x1
c0017d0f:	6a 02                	push   0x2
c0017d11:	50                   	push   eax
c0017d12:	52                   	push   edx
c0017d13:	53                   	push   ebx
c0017d14:	e8 45 a8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d19:	83 c4 20             	add    esp,0x20
c0017d1c:	09 f0                	or     eax,esi
c0017d1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d26:	25 ff 0f 00 00       	and    eax,0xfff
c0017d2b:	89 c6                	mov    esi,eax
c0017d2d:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017d33:	83 ec 0c             	sub    esp,0xc
c0017d36:	6a 02                	push   0x2
c0017d38:	e8 f4 9c ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0017d3d:	83 c4 10             	add    esp,0x10
c0017d40:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d44:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	6a 01                	push   0x1
c0017d4f:	6a 02                	push   0x2
c0017d51:	50                   	push   eax
c0017d52:	52                   	push   edx
c0017d53:	53                   	push   ebx
c0017d54:	e8 05 a8 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d59:	83 c4 20             	add    esp,0x20
c0017d5c:	09 f0                	or     eax,esi
c0017d5e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d62:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d67:	75 11                	jne    c0017d7a <findRSDT(unsigned char*)+0x120>
c0017d69:	c6 05 a0 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba0,0x0
c0017d70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d74:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d78:	eb 1f                	jmp    c0017d99 <findRSDT(unsigned char*)+0x13f>
c0017d7a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d7f:	75 11                	jne    c0017d92 <findRSDT(unsigned char*)+0x138>
c0017d81:	c6 05 a0 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba0,0x1
c0017d88:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d90:	eb 07                	jmp    c0017d99 <findRSDT(unsigned char*)+0x13f>
c0017d92:	b8 00 00 00 00       	mov    eax,0x0
c0017d97:	eb 04                	jmp    c0017d9d <findRSDT(unsigned char*)+0x143>
c0017d99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017d9d:	83 c4 50             	add    esp,0x50
c0017da0:	5b                   	pop    ebx
c0017da1:	5e                   	pop    esi
c0017da2:	5f                   	pop    edi
c0017da3:	c3                   	ret    

c0017da4 <findDataTable(unsigned char*, char*)>:
c0017da4:	83 ec 1c             	sub    esp,0x1c
c0017da7:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017dac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017db2:	83 e0 04             	and    eax,0x4
c0017db5:	84 c0                	test   al,al
c0017db7:	75 07                	jne    c0017dc0 <findDataTable(unsigned char*, char*)+0x1c>
c0017db9:	b8 00 00 00 00       	mov    eax,0x0
c0017dbe:	eb 7c                	jmp    c0017e3c <findDataTable(unsigned char*, char*)+0x98>
c0017dc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dc8:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017dcd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dd1:	7d 3a                	jge    c0017e0d <findDataTable(unsigned char*, char*)+0x69>
c0017dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dd7:	c1 e0 03             	shl    eax,0x3
c0017dda:	05 a0 19 03 c0       	add    eax,0xc00319a0
c0017ddf:	83 ec 04             	sub    esp,0x4
c0017de2:	6a 04                	push   0x4
c0017de4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017de8:	50                   	push   eax
c0017de9:	e8 5e 88 fe ff       	call   c000064c <memcmp>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	85 c0                	test   eax,eax
c0017df3:	0f 94 c0             	sete   al
c0017df6:	84 c0                	test   al,al
c0017df8:	74 0d                	je     c0017e07 <findDataTable(unsigned char*, char*)+0x63>
c0017dfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dfe:	8b 04 c5 a4 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce65c]
c0017e05:	eb 35                	jmp    c0017e3c <findDataTable(unsigned char*, char*)+0x98>
c0017e07:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e0b:	eb bb                	jmp    c0017dc8 <findDataTable(unsigned char*, char*)+0x24>
c0017e0d:	a0 a0 1b 03 c0       	mov    al,ds:0xc0031ba0
c0017e12:	84 c0                	test   al,al
c0017e14:	74 07                	je     c0017e1d <findDataTable(unsigned char*, char*)+0x79>
c0017e16:	b8 58 00 00 00       	mov    eax,0x58
c0017e1b:	eb 05                	jmp    c0017e22 <findDataTable(unsigned char*, char*)+0x7e>
c0017e1d:	b8 52 00 00 00       	mov    eax,0x52
c0017e22:	83 ec 04             	sub    esp,0x4
c0017e25:	50                   	push   eax
c0017e26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e2a:	68 24 c3 02 c0       	push   0xc002c324
c0017e2f:	e8 03 b0 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	b8 00 00 00 00       	mov    eax,0x0
c0017e3c:	83 c4 1c             	add    esp,0x1c
c0017e3f:	c3                   	ret    

c0017e40 <scanMADT()>:
c0017e40:	53                   	push   ebx
c0017e41:	83 ec 38             	sub    esp,0x38
c0017e44:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017e49:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e4f:	83 e0 04             	and    eax,0x4
c0017e52:	84 c0                	test   al,al
c0017e54:	0f 84 63 04 00 00    	je     c00182bd <scanMADT()+0x47d>
c0017e5a:	e8 0a fb ff ff       	call   c0017969 <findRSDP()>
c0017e5f:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c0017e64:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c0017e69:	85 c0                	test   eax,eax
c0017e6b:	75 19                	jne    c0017e86 <scanMADT()+0x46>
c0017e6d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017e72:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e78:	83 e2 fb             	and    edx,0xfffffffb
c0017e7b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e81:	e9 3b 04 00 00       	jmp    c00182c1 <scanMADT()+0x481>
c0017e86:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c0017e8b:	83 ec 0c             	sub    esp,0xc
c0017e8e:	50                   	push   eax
c0017e8f:	e8 c6 fd ff ff       	call   c0017c5a <findRSDT(unsigned char*)>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c0017e9c:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017ea1:	85 c0                	test   eax,eax
c0017ea3:	75 19                	jne    c0017ebe <scanMADT()+0x7e>
c0017ea5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017eaa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eb0:	83 e2 fb             	and    edx,0xfffffffb
c0017eb3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eb9:	e9 03 04 00 00       	jmp    c00182c1 <scanMADT()+0x481>
c0017ebe:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	50                   	push   eax
c0017ec7:	e8 37 fb ff ff       	call   c0017a03 <loadACPITables(unsigned char*)>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017ed4:	83 ec 08             	sub    esp,0x8
c0017ed7:	68 b0 c1 02 c0       	push   0xc002c1b0
c0017edc:	50                   	push   eax
c0017edd:	e8 c2 fe ff ff       	call   c0017da4 <findDataTable(unsigned char*, char*)>
c0017ee2:	83 c4 10             	add    esp,0x10
c0017ee5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ee9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017eee:	75 19                	jne    c0017f09 <scanMADT()+0xc9>
c0017ef0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017ef5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017efb:	83 e2 fe             	and    edx,0xfffffffe
c0017efe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f04:	e9 b8 03 00 00       	jmp    c00182c1 <scanMADT()+0x481>
c0017f09:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f18:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f1c:	0f 87 9f 03 00 00    	ja     c00182c1 <scanMADT()+0x481>
c0017f22:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f2a:	0f 87 91 03 00 00    	ja     c00182c1 <scanMADT()+0x481>
c0017f30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f34:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f47:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f4b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f53:	8d 50 01             	lea    edx,[eax+0x1]
c0017f56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f62:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f66:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f6b:	0f 86 4f 03 00 00    	jbe    c00182c0 <scanMADT()+0x480>
c0017f71:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f76:	75 57                	jne    c0017fcf <scanMADT()+0x18f>
c0017f78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f83:	8a 15 a0 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031da0
c0017f89:	0f b6 d2             	movzx  edx,dl
c0017f8c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f90:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f94:	88 82 e0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce220],al
c0017f9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa5:	8a 15 a0 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031da0
c0017fab:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fae:	88 0d a0 1d 03 c0    	mov    BYTE PTR ds:0xc0031da0,cl
c0017fb4:	0f b6 d2             	movzx  edx,dl
c0017fb7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fbb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fbf:	88 82 c0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce240],al
c0017fc5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fca:	e9 da 02 00 00       	jmp    c00182a9 <scanMADT()+0x469>
c0017fcf:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fd4:	0f 85 14 01 00 00    	jne    c00180ee <scanMADT()+0x2ae>
c0017fda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fde:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe5:	8a 15 60 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c60
c0017feb:	0f b6 d2             	movzx  edx,dl
c0017fee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ff2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ff6:	88 82 80 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce380],al
c0017ffc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018000:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018004:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018008:	01 d0                	add    eax,edx
c001800a:	83 c0 2c             	add    eax,0x2c
c001800d:	8a 00                	mov    al,BYTE PTR [eax]
c001800f:	0f b6 d0             	movzx  edx,al
c0018012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018016:	8d 48 01             	lea    ecx,[eax+0x1]
c0018019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001801d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018021:	0f b6 c0             	movzx  eax,al
c0018024:	c1 e0 08             	shl    eax,0x8
c0018027:	89 d1                	mov    ecx,edx
c0018029:	09 c1                	or     ecx,eax
c001802b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802f:	8d 50 02             	lea    edx,[eax+0x2]
c0018032:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018036:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001803a:	0f b6 c0             	movzx  eax,al
c001803d:	c1 e0 10             	shl    eax,0x10
c0018040:	09 c1                	or     ecx,eax
c0018042:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018046:	8d 50 03             	lea    edx,[eax+0x3]
c0018049:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018051:	0f b6 c0             	movzx  eax,al
c0018054:	c1 e0 18             	shl    eax,0x18
c0018057:	09 c1                	or     ecx,eax
c0018059:	89 ca                	mov    edx,ecx
c001805b:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c0018060:	0f b6 c0             	movzx  eax,al
c0018063:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c001806a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001806f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018073:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018077:	01 d0                	add    eax,edx
c0018079:	83 c0 2c             	add    eax,0x2c
c001807c:	8a 00                	mov    al,BYTE PTR [eax]
c001807e:	0f b6 d0             	movzx  edx,al
c0018081:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018085:	8d 48 01             	lea    ecx,[eax+0x1]
c0018088:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018090:	0f b6 c0             	movzx  eax,al
c0018093:	c1 e0 08             	shl    eax,0x8
c0018096:	89 d1                	mov    ecx,edx
c0018098:	09 c1                	or     ecx,eax
c001809a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809e:	8d 50 02             	lea    edx,[eax+0x2]
c00180a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a9:	0f b6 c0             	movzx  eax,al
c00180ac:	c1 e0 10             	shl    eax,0x10
c00180af:	09 c1                	or     ecx,eax
c00180b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b5:	8d 50 03             	lea    edx,[eax+0x3]
c00180b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180bc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c0:	0f b6 c0             	movzx  eax,al
c00180c3:	c1 e0 18             	shl    eax,0x18
c00180c6:	09 c1                	or     ecx,eax
c00180c8:	89 ca                	mov    edx,ecx
c00180ca:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c00180cf:	0f b6 c0             	movzx  eax,al
c00180d2:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c00180d9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180de:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c00180e3:	40                   	inc    eax
c00180e4:	a2 60 1c 03 c0       	mov    ds:0xc0031c60,al
c00180e9:	e9 bb 01 00 00       	jmp    c00182a9 <scanMADT()+0x469>
c00180ee:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180f3:	0f 85 e9 00 00 00    	jne    c00181e2 <scanMADT()+0x3a2>
c00180f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fd:	8d 50 01             	lea    edx,[eax+0x1]
c0018100:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018108:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001810c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018114:	8d 50 01             	lea    edx,[eax+0x1]
c0018117:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001811b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018123:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018127:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812f:	01 d0                	add    eax,edx
c0018131:	83 c0 2c             	add    eax,0x2c
c0018134:	8a 00                	mov    al,BYTE PTR [eax]
c0018136:	0f b6 d0             	movzx  edx,al
c0018139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018144:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018148:	0f b6 c0             	movzx  eax,al
c001814b:	c1 e0 08             	shl    eax,0x8
c001814e:	89 d1                	mov    ecx,edx
c0018150:	09 c1                	or     ecx,eax
c0018152:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018156:	8d 50 02             	lea    edx,[eax+0x2]
c0018159:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018161:	0f b6 c0             	movzx  eax,al
c0018164:	c1 e0 10             	shl    eax,0x10
c0018167:	09 c1                	or     ecx,eax
c0018169:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001816d:	8d 50 03             	lea    edx,[eax+0x3]
c0018170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018174:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018178:	0f b6 c0             	movzx  eax,al
c001817b:	c1 e0 18             	shl    eax,0x18
c001817e:	09 c8                	or     eax,ecx
c0018180:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018184:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018189:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001818d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018191:	01 d0                	add    eax,edx
c0018193:	83 c0 2c             	add    eax,0x2c
c0018196:	8a 00                	mov    al,BYTE PTR [eax]
c0018198:	0f b6 c0             	movzx  eax,al
c001819b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001819f:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181aa:	0f b6 d2             	movzx  edx,dl
c00181ad:	c1 e2 08             	shl    edx,0x8
c00181b0:	09 d0                	or     eax,edx
c00181b2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181b7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181bc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c5:	88 90 20 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1ae0],dl
c00181cb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181d0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181d5:	66 89 84 12 40 1c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce3c0],ax
c00181dd:	e9 c7 00 00 00       	jmp    c00182a9 <scanMADT()+0x469>
c00181e2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181e7:	0f 85 b0 00 00 00    	jne    c001829d <scanMADT()+0x45d>
c00181ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f1:	8d 50 01             	lea    edx,[eax+0x1]
c00181f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018200:	0f b6 c0             	movzx  eax,al
c0018203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018207:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820f:	01 d0                	add    eax,edx
c0018211:	83 c0 2c             	add    eax,0x2c
c0018214:	8a 00                	mov    al,BYTE PTR [eax]
c0018216:	0f b6 d0             	movzx  edx,al
c0018219:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018224:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018228:	0f b6 c0             	movzx  eax,al
c001822b:	c1 e0 08             	shl    eax,0x8
c001822e:	09 d0                	or     eax,edx
c0018230:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018234:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018239:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001823d:	8d 50 01             	lea    edx,[eax+0x1]
c0018240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018244:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018248:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001824c:	0f b6 c0             	movzx  eax,al
c001824f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018257:	c1 e0 08             	shl    eax,0x8
c001825a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001825e:	89 c1                	mov    ecx,eax
c0018260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018264:	c1 e0 18             	shl    eax,0x18
c0018267:	89 c3                	mov    ebx,eax
c0018269:	a1 b0 1b 03 c0       	mov    eax,ds:0xc0031bb0
c001826e:	8d 50 01             	lea    edx,[eax+0x1]
c0018271:	89 15 b0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb0,edx
c0018277:	09 d9                	or     ecx,ebx
c0018279:	89 ca                	mov    edx,ecx
c001827b:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c0018282:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001828a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001828e:	68 54 c3 02 c0       	push   0xc002c354
c0018293:	e8 9f ab ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018298:	83 c4 10             	add    esp,0x10
c001829b:	eb 0c                	jmp    c00182a9 <scanMADT()+0x469>
c001829d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182a2:	75 05                	jne    c00182a9 <scanMADT()+0x469>
c00182a4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182a9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182b2:	01 d0                	add    eax,edx
c00182b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182b8:	e9 54 fc ff ff       	jmp    c0017f11 <scanMADT()+0xd1>
c00182bd:	90                   	nop
c00182be:	eb 01                	jmp    c00182c1 <scanMADT()+0x481>
c00182c0:	90                   	nop
c00182c1:	83 c4 38             	add    esp,0x38
c00182c4:	5b                   	pop    ebx
c00182c5:	c3                   	ret    

c00182c6 <ACPI::ACPI()>:
c00182c6:	83 ec 0c             	sub    esp,0xc
c00182c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182cd:	83 ec 08             	sub    esp,0x8
c00182d0:	68 b5 c1 02 c0       	push   0xc002c1b5
c00182d5:	50                   	push   eax
c00182d6:	e8 6d c1 ff ff       	call   c0014448 <Device::Device(char const*)>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	ba f0 c3 02 c0       	mov    edx,0xc002c3f0
c00182e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e7:	89 10                	mov    DWORD PTR [eax],edx
c00182e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f8:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018306:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018314:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001831b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001831f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018326:	e8 15 fb ff ff       	call   c0017e40 <scanMADT()>
c001832b:	90                   	nop
c001832c:	83 c4 0c             	add    esp,0xc
c001832f:	c3                   	ret    

c0018330 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018330:	83 ec 2c             	sub    esp,0x2c
c0018333:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018337:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001833b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001833f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018343:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018348:	88 d0                	mov    al,dl
c001834a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001834e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018353:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001835f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018365:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018369:	0f 8d 97 00 00 00    	jge    c0018406 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001836f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018373:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018377:	83 c2 2a             	add    edx,0x2a
c001837a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001837e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018383:	75 78                	jne    c00183fd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018385:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018389:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838d:	83 c2 2a             	add    edx,0x2a
c0018390:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018394:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018398:	75 63                	jne    c00183fd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001839a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001839f:	74 3a                	je     c00183db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a9:	83 c2 2a             	add    edx,0x2a
c00183ac:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183b7:	39 c2                	cmp    edx,eax
c00183b9:	74 10                	je     c00183cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183bb:	83 ec 0c             	sub    esp,0xc
c00183be:	68 90 c3 02 c0       	push   0xc002c390
c00183c3:	e8 09 25 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	83 ec 0c             	sub    esp,0xc
c00183ce:	68 ba c1 02 c0       	push   0xc002c1ba
c00183d3:	e8 f9 24 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e7:	83 c2 2a             	add    edx,0x2a
c00183ea:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00183f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183f3:	89 01                	mov    DWORD PTR [ecx],eax
c00183f5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183f8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183fd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018401:	e9 55 ff ff ff       	jmp    c001835b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018406:	90                   	nop
c0018407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840b:	83 c4 2c             	add    esp,0x2c
c001840e:	c2 04 00             	ret    0x4
c0018411:	90                   	nop

c0018412 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018412:	83 ec 1c             	sub    esp,0x1c
c0018415:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018419:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001841d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018421:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018426:	88 c8                	mov    al,cl
c0018428:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001842c:	88 d0                	mov    al,dl
c001842e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018436:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001843c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018440:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018443:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018447:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001844b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018455:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018459:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001845c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018460:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018469:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001846f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018473:	8d 48 01             	lea    ecx,[eax+0x1]
c0018476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847a:	83 c2 2a             	add    edx,0x2a
c001847d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018485:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001848b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018492:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018496:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001849a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184a4:	8d 50 01             	lea    edx,[eax+0x1]
c00184a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ab:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184bb:	3d 00 02 00 00       	cmp    eax,0x200
c00184c0:	75 10                	jne    c00184d2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184c2:	83 ec 0c             	sub    esp,0xc
c00184c5:	68 c9 c1 02 c0       	push   0xc002c1c9
c00184ca:	e8 02 24 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c00184cf:	83 c4 10             	add    esp,0x10
c00184d2:	90                   	nop
c00184d3:	83 c4 1c             	add    esp,0x1c
c00184d6:	c3                   	ret    
c00184d7:	90                   	nop

c00184d8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184d8:	b8 00 00 00 00       	mov    eax,0x0
c00184dd:	c3                   	ret    

c00184de <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184de:	83 ec 1c             	sub    esp,0x1c
c00184e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184e5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184e8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184ec:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00184f1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184f6:	83 ec 08             	sub    esp,0x8
c00184f9:	52                   	push   edx
c00184fa:	50                   	push   eax
c00184fb:	e8 a2 69 ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c0018500:	83 c4 10             	add    esp,0x10
c0018503:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018507:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001850c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018511:	83 ec 04             	sub    esp,0x4
c0018514:	6a 01                	push   0x1
c0018516:	52                   	push   edx
c0018517:	50                   	push   eax
c0018518:	e8 9b 6a ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	90                   	nop
c0018521:	83 c4 1c             	add    esp,0x1c
c0018524:	c3                   	ret    
c0018525:	90                   	nop

c0018526 <ACPI::sleep()>:
c0018526:	83 ec 0c             	sub    esp,0xc
c0018529:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001852e:	85 c0                	test   eax,eax
c0018530:	74 07                	je     c0018539 <ACPI::sleep()+0x13>
c0018532:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c0018537:	ff d0                	call   eax
c0018539:	90                   	nop
c001853a:	83 c4 0c             	add    esp,0xc
c001853d:	c3                   	ret    

c001853e <ACPI::open(int, int, void*)>:
c001853e:	57                   	push   edi
c001853f:	56                   	push   esi
c0018540:	53                   	push   ebx
c0018541:	81 ec 60 01 00 00    	sub    esp,0x160
c0018547:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001854e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018555:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001855c:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018563:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018568:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001856e:	83 e0 04             	and    eax,0x4
c0018571:	84 c0                	test   al,al
c0018573:	74 53                	je     c00185c8 <ACPI::open(int, int, void*)+0x8a>
c0018575:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001857a:	83 ec 08             	sub    esp,0x8
c001857d:	68 e6 c1 02 c0       	push   0xc002c1e6
c0018582:	50                   	push   eax
c0018583:	e8 1c f8 ff ff       	call   c0017da4 <findDataTable(unsigned char*, char*)>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018592:	83 bc 24 5c 01 00 00 00 	cmp    DWORD PTR [esp+0x15c],0x0
c001859a:	74 2c                	je     c00185c8 <ACPI::open(int, int, void*)+0x8a>
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	68 eb c1 02 c0       	push   0xc002c1eb
c00185a4:	e8 8e a8 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185b3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ba:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185c1:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185c8:	c7 84 24 58 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x158],0xc5f
c00185d3:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00185da:	8a 00                	mov    al,BYTE PTR [eax]
c00185dc:	3c 01                	cmp    al,0x1
c00185de:	75 2e                	jne    c001860e <ACPI::open(int, int, void*)+0xd0>
c00185e0:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185e7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ee:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185f5:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	68 fc c1 02 c0       	push   0xc002c1fc
c0018604:	e8 2e a8 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	eb 2b                	jmp    c0018639 <ACPI::open(int, int, void*)+0xfb>
c001860e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018615:	8a 00                	mov    al,BYTE PTR [eax]
c0018617:	3c 02                	cmp    al,0x2
c0018619:	75 1e                	jne    c0018639 <ACPI::open(int, int, void*)+0xfb>
c001861b:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018622:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	68 04 c2 02 c0       	push   0xc002c204
c0018631:	e8 01 a8 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018640:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018646:	83 f0 01             	xor    eax,0x1
c0018649:	84 c0                	test   al,al
c001864b:	74 7c                	je     c00186c9 <ACPI::open(int, int, void*)+0x18b>
c001864d:	83 ec 0c             	sub    esp,0xc
c0018650:	68 0c c2 02 c0       	push   0xc002c20c
c0018655:	e8 dd a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	e8 ee 7a fe ff       	call   c0000150 <manualPCIProbe>
c0018662:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018669:	83 bc 24 54 01 00 00 01 	cmp    DWORD PTR [esp+0x154],0x1
c0018671:	75 2e                	jne    c00186a1 <ACPI::open(int, int, void*)+0x163>
c0018673:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001867a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018681:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018688:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	68 1a c2 02 c0       	push   0xc002c21a
c0018697:	e8 9b a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	eb 28                	jmp    c00186c9 <ACPI::open(int, int, void*)+0x18b>
c00186a1:	83 bc 24 54 01 00 00 02 	cmp    DWORD PTR [esp+0x154],0x2
c00186a9:	75 1e                	jne    c00186c9 <ACPI::open(int, int, void*)+0x18b>
c00186ab:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186b2:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186b9:	83 ec 0c             	sub    esp,0xc
c00186bc:	68 24 c2 02 c0       	push   0xc002c224
c00186c1:	e8 71 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00186c6:	83 c4 10             	add    esp,0x10
c00186c9:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186d0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186d6:	84 c0                	test   al,al
c00186d8:	74 16                	je     c00186f0 <ACPI::open(int, int, void*)+0x1b2>
c00186da:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186e1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00186e7:	83 f0 01             	xor    eax,0x1
c00186ea:	0f b6 c0             	movzx  eax,al
c00186ed:	40                   	inc    eax
c00186ee:	eb 05                	jmp    c00186f5 <ACPI::open(int, int, void*)+0x1b7>
c00186f0:	b8 00 00 00 00       	mov    eax,0x0
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	50                   	push   eax
c00186f9:	68 2e c2 02 c0       	push   0xc002c22e
c00186fe:	e8 34 a7 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001870d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018713:	84 c0                	test   al,al
c0018715:	74 7c                	je     c0018793 <ACPI::open(int, int, void*)+0x255>
c0018717:	c7 84 24 38 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x138],0x158
c0018722:	83 ec 0c             	sub    esp,0xc
c0018725:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001872c:	e8 5b 71 ff ff       	call   c000f88c <malloc>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	89 c3                	mov    ebx,eax
c0018736:	83 ec 0c             	sub    esp,0xc
c0018739:	53                   	push   ebx
c001873a:	e8 ef aa 00 00       	call   c002322e <PCI::PCI()>
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0018749:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018750:	83 ec 08             	sub    esp,0x8
c0018753:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001875a:	50                   	push   eax
c001875b:	e8 f8 ba ff ff       	call   c0014258 <Device::addChild(Device*)>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001876a:	8b 00                	mov    eax,DWORD PTR [eax]
c001876c:	83 c0 08             	add    eax,0x8
c001876f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018771:	6a 00                	push   0x0
c0018773:	6a 00                	push   0x0
c0018775:	6a 00                	push   0x0
c0018777:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001877e:	ff d0                	call   eax
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	83 ec 0c             	sub    esp,0xc
c0018786:	68 37 c2 02 c0       	push   0xc002c237
c001878b:	e8 a7 a6 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018790:	83 c4 10             	add    esp,0x10
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	68 42 c2 02 c0       	push   0xc002c242
c001879b:	e8 8e 4a 00 00       	call   c001d22e <Thr::loadKernelSymbolTable(char const*)>
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	6a 0c                	push   0xc
c00187a8:	e8 c3 94 ff ff       	call   c0011c70 <Virt::setupPageSwapping(int)>
c00187ad:	83 c4 10             	add    esp,0x10
c00187b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187b7:	83 ec 08             	sub    esp,0x8
c00187ba:	6a 12                	push   0x12
c00187bc:	50                   	push   eax
c00187bd:	e8 06 be ff ff       	call   c00145c8 <getDevicesOfType(DeviceType)>
c00187c2:	83 c4 0c             	add    esp,0xc
c00187c5:	83 ec 0c             	sub    esp,0xc
c00187c8:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c00187cf:	50                   	push   eax
c00187d0:	e8 9b 10 01 00       	call   c0029870 <LinkedList<Device>::isEmpty()>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	83 f0 01             	xor    eax,0x1
c00187db:	84 c0                	test   al,al
c00187dd:	0f 84 20 01 00 00    	je     c0018903 <ACPI::open(int, int, void*)+0x3c5>
c00187e3:	83 ec 0c             	sub    esp,0xc
c00187e6:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c00187ed:	50                   	push   eax
c00187ee:	e8 99 10 01 00       	call   c002988c <LinkedList<Device>::getFirstElement()>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
c00187fd:	83 ec 0c             	sub    esp,0xc
c0018800:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018807:	50                   	push   eax
c0018808:	e8 87 10 01 00       	call   c0029894 <LinkedList<Device>::removeFirst()>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018817:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001881e:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	50                   	push   eax
c0018829:	e8 16 bd ff ff       	call   c0014544 <Device::getName()>
c001882e:	83 c4 10             	add    esp,0x10
c0018831:	83 ec 08             	sub    esp,0x8
c0018834:	50                   	push   eax
c0018835:	68 c0 c3 02 c0       	push   0xc002c3c0
c001883a:	e8 f8 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	8b 94 24 48 01 00 00 	mov    edx,DWORD PTR [esp+0x148]
c0018849:	8d 44 24 04          	lea    eax,[esp+0x4]
c001884d:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018853:	ba 09 00 00 00       	mov    edx,0x9
c0018858:	fc                   	cld    
c0018859:	89 c7                	mov    edi,eax
c001885b:	89 de                	mov    esi,ebx
c001885d:	89 d1                	mov    ecx,edx
c001885f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018861:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018865:	0f b6 c0             	movzx  eax,al
c0018868:	83 ec 08             	sub    esp,0x8
c001886b:	50                   	push   eax
c001886c:	68 60 c2 02 c0       	push   0xc002c260
c0018871:	e8 c1 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0018876:	83 c4 10             	add    esp,0x10
c0018879:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001887d:	0f b6 c0             	movzx  eax,al
c0018880:	83 ec 08             	sub    esp,0x8
c0018883:	50                   	push   eax
c0018884:	68 72 c2 02 c0       	push   0xc002c272
c0018889:	e8 a9 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001888e:	83 c4 10             	add    esp,0x10
c0018891:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018896:	0f b7 c0             	movzx  eax,ax
c0018899:	83 ec 08             	sub    esp,0x8
c001889c:	50                   	push   eax
c001889d:	68 84 c2 02 c0       	push   0xc002c284
c00188a2:	e8 90 a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	83 ec 08             	sub    esp,0x8
c00188ad:	8d 44 24 30          	lea    eax,[esp+0x30]
c00188b1:	50                   	push   eax
c00188b2:	83 ec 24             	sub    esp,0x24
c00188b5:	89 e0                	mov    eax,esp
c00188b7:	89 c3                	mov    ebx,eax
c00188b9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188bd:	ba 09 00 00 00       	mov    edx,0x9
c00188c2:	89 df                	mov    edi,ebx
c00188c4:	89 c6                	mov    esi,eax
c00188c6:	89 d1                	mov    ecx,edx
c00188c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188ca:	e8 c1 ac 00 00       	call   c0023590 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00188cf:	83 c4 30             	add    esp,0x30
c00188d2:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00188d9:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00188e1:	0f 84 de fe ff ff    	je     c00187c5 <ACPI::open(int, int, void*)+0x287>
c00188e7:	83 ec 08             	sub    esp,0x8
c00188ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00188f1:	68 96 c2 02 c0       	push   0xc002c296
c00188f6:	e8 3c a5 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00188fb:	83 c4 10             	add    esp,0x10
c00188fe:	e9 c2 fe ff ff       	jmp    c00187c5 <ACPI::open(int, int, void*)+0x287>
c0018903:	83 ec 0c             	sub    esp,0xc
c0018906:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c001890d:	50                   	push   eax
c001890e:	e8 5b 0f 01 00       	call   c002986e <LinkedList<Device>::~LinkedList()>
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c001891c:	83 ec 08             	sub    esp,0x8
c001891f:	6a 01                	push   0x1
c0018921:	68 a2 c2 02 c0       	push   0xc002c2a2
c0018926:	e8 7a 53 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	83 ec 08             	sub    esp,0x8
c0018931:	53                   	push   ebx
c0018932:	50                   	push   eax
c0018933:	e8 98 55 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0018941:	83 ec 08             	sub    esp,0x8
c0018944:	6a 01                	push   0x1
c0018946:	68 bf c2 02 c0       	push   0xc002c2bf
c001894b:	e8 55 53 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c0018950:	83 c4 10             	add    esp,0x10
c0018953:	83 ec 08             	sub    esp,0x8
c0018956:	53                   	push   ebx
c0018957:	50                   	push   eax
c0018958:	e8 73 55 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c001895d:	83 c4 10             	add    esp,0x10
c0018960:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018965:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001896b:	83 e0 04             	and    eax,0x4
c001896e:	84 c0                	test   al,al
c0018970:	0f 84 fd 00 00 00    	je     c0018a73 <ACPI::open(int, int, void*)+0x535>
c0018976:	c7 84 24 34 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x134],0x114
c0018981:	83 ec 0c             	sub    esp,0xc
c0018984:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001898b:	e8 fc 6e ff ff       	call   c000f88c <malloc>
c0018990:	83 c4 10             	add    esp,0x10
c0018993:	89 c3                	mov    ebx,eax
c0018995:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001899a:	83 ec 04             	sub    esp,0x4
c001899d:	50                   	push   eax
c001899e:	68 dc c2 02 c0       	push   0xc002c2dc
c00189a3:	53                   	push   ebx
c00189a4:	e8 ed a9 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c00189a9:	83 c4 10             	add    esp,0x10
c00189ac:	89 9c 24 40 01 00 00 	mov    DWORD PTR [esp+0x140],ebx
c00189b3:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00189bb:	74 1a                	je     c00189d7 <ACPI::open(int, int, void*)+0x499>
c00189bd:	83 ec 0c             	sub    esp,0xc
c00189c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00189c7:	e8 9c ac ff ff       	call   c0013668 <File::exists()>
c00189cc:	83 c4 10             	add    esp,0x10
c00189cf:	84 c0                	test   al,al
c00189d1:	74 04                	je     c00189d7 <ACPI::open(int, int, void*)+0x499>
c00189d3:	b0 01                	mov    al,0x1
c00189d5:	eb 02                	jmp    c00189d9 <ACPI::open(int, int, void*)+0x49b>
c00189d7:	b0 00                	mov    al,0x0
c00189d9:	84 c0                	test   al,al
c00189db:	74 25                	je     c0018a02 <ACPI::open(int, int, void*)+0x4c4>
c00189dd:	83 ec 08             	sub    esp,0x8
c00189e0:	6a 01                	push   0x1
c00189e2:	68 dc c2 02 c0       	push   0xc002c2dc
c00189e7:	e8 b9 52 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c00189ec:	83 c4 10             	add    esp,0x10
c00189ef:	83 ec 08             	sub    esp,0x8
c00189f2:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00189f9:	50                   	push   eax
c00189fa:	e8 d1 54 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a0a:	74 27                	je     c0018a33 <ACPI::open(int, int, void*)+0x4f5>
c0018a0c:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a14:	74 1d                	je     c0018a33 <ACPI::open(int, int, void*)+0x4f5>
c0018a16:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a1f:	83 c0 08             	add    eax,0x8
c0018a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a24:	83 ec 0c             	sub    esp,0xc
c0018a27:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018a2e:	ff d0                	call   eax
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0018a38:	83 ec 08             	sub    esp,0x8
c0018a3b:	68 f9 c2 02 c0       	push   0xc002c2f9
c0018a40:	50                   	push   eax
c0018a41:	e8 5e f3 ff ff       	call   c0017da4 <findDataTable(unsigned char*, char*)>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	89 84 24 3c 01 00 00 	mov    DWORD PTR [esp+0x13c],eax
c0018a50:	83 bc 24 3c 01 00 00 00 	cmp    DWORD PTR [esp+0x13c],0x0
c0018a58:	74 19                	je     c0018a73 <ACPI::open(int, int, void*)+0x535>
c0018a5a:	83 ec 08             	sub    esp,0x8
c0018a5d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018a64:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018a6b:	e8 6e fa ff ff       	call   c00184de <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a70:	83 c4 10             	add    esp,0x10
c0018a73:	b8 00 00 00 00       	mov    eax,0x0
c0018a78:	81 c4 60 01 00 00    	add    esp,0x160
c0018a7e:	5b                   	pop    ebx
c0018a7f:	5e                   	pop    esi
c0018a80:	5f                   	pop    edi
c0018a81:	c3                   	ret    

c0018a82 <CPU::close(int, int, void*)>:
c0018a82:	31 c0                	xor    eax,eax
c0018a84:	c3                   	ret    
c0018a85:	90                   	nop

c0018a86 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a86:	55                   	push   ebp
c0018a87:	57                   	push   edi
c0018a88:	56                   	push   esi
c0018a89:	53                   	push   ebx
c0018a8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a92:	89 ce                	mov    esi,ecx
c0018a94:	89 d5                	mov    ebp,edx
c0018a96:	80 f9 04             	cmp    cl,0x4
c0018a99:	75 28                	jne    c0018ac3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a9b:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a9e:	3c 03                	cmp    al,0x3
c0018aa0:	0f 86 63 01 00 00    	jbe    c0018c09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018aa6:	80 fa 03             	cmp    dl,0x3
c0018aa9:	0f 84 5a 01 00 00    	je     c0018c09 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018aaf:	8d 7a f2             	lea    edi,[edx-0xe]
c0018ab2:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018ab7:	89 fb                	mov    ebx,edi
c0018ab9:	80 fb 01             	cmp    bl,0x1
c0018abc:	77 4e                	ja     c0018b0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018abe:	e9 52 01 00 00       	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac3:	80 f9 05             	cmp    cl,0x5
c0018ac6:	75 4d                	jne    c0018b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018ac8:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018acd:	80 fa 03             	cmp    dl,0x3
c0018ad0:	0f 86 3f 01 00 00    	jbe    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad6:	8d 7a fa             	lea    edi,[edx-0x6]
c0018ad9:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c0018ade:	89 fb                	mov    ebx,edi
c0018ae0:	80 fb 01             	cmp    bl,0x1
c0018ae3:	0f 86 2c 01 00 00    	jbe    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae9:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018aee:	80 fa 08             	cmp    dl,0x8
c0018af1:	0f 84 1e 01 00 00    	je     c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018af7:	89 d7                	mov    edi,edx
c0018af9:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018afe:	83 e7 fb             	and    edi,0xfffffffb
c0018b01:	89 fb                	mov    ebx,edi
c0018b03:	80 fb 09             	cmp    bl,0x9
c0018b06:	0f 84 09 01 00 00    	je     c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0c:	31 c0                	xor    eax,eax
c0018b0e:	89 eb                	mov    ebx,ebp
c0018b10:	0f b6 fb             	movzx  edi,bl
c0018b13:	eb 30                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b15:	31 c0                	xor    eax,eax
c0018b17:	80 f9 06             	cmp    cl,0x6
c0018b1a:	75 f2                	jne    c0018b0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b1c:	80 fa 0a             	cmp    dl,0xa
c0018b1f:	77 ed                	ja     c0018b0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b21:	bf de 05 00 00       	mov    edi,0x5de
c0018b26:	0f a3 d7             	bt     edi,edx
c0018b29:	73 e3                	jae    c0018b0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b2b:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018b30:	e9 e0 00 00 00       	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b35:	39 c7                	cmp    edi,eax
c0018b37:	0f 84 d3 00 00 00    	je     c0018c10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b3d:	40                   	inc    eax
c0018b3e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b43:	74 09                	je     c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b45:	89 f3                	mov    ebx,esi
c0018b47:	80 fb 0f             	cmp    bl,0xf
c0018b4a:	75 f1                	jne    c0018b3d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b4c:	eb e7                	jmp    c0018b35 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b4e:	80 f9 10             	cmp    cl,0x10
c0018b51:	75 14                	jne    c0018b67 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b53:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b56:	83 e0 fb             	and    eax,0xfffffffb
c0018b59:	3c 02                	cmp    al,0x2
c0018b5b:	76 34                	jbe    c0018b91 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b5d:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018b62:	80 fa 02             	cmp    dl,0x2
c0018b65:	eb 24                	jmp    c0018b8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b67:	80 f9 11             	cmp    cl,0x11
c0018b6a:	75 13                	jne    c0018b7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b6c:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018b71:	80 fa 03             	cmp    dl,0x3
c0018b74:	0f 85 9b 00 00 00    	jne    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b7a:	e9 91 00 00 00       	jmp    c0018c10 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b7f:	80 f9 12             	cmp    cl,0x12
c0018b82:	75 14                	jne    c0018b98 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b84:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018b89:	fe ca                	dec    dl
c0018b8b:	0f 85 84 00 00 00    	jne    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b91:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018b96:	eb 7d                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b98:	80 f9 14             	cmp    cl,0x14
c0018b9b:	75 12                	jne    c0018baf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b9d:	4a                   	dec    edx
c0018b9e:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018ba3:	80 fa 01             	cmp    dl,0x1
c0018ba6:	77 6d                	ja     c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba8:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018bad:	eb 66                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018baf:	80 f9 15             	cmp    cl,0x15
c0018bb2:	75 31                	jne    c0018be5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018bb4:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018bb9:	80 fa 01             	cmp    dl,0x1
c0018bbc:	74 57                	je     c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbe:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018bc3:	80 fa 13             	cmp    dl,0x13
c0018bc6:	76 0c                	jbe    c0018bd4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018bc8:	80 fa 30             	cmp    dl,0x30
c0018bcb:	75 48                	jne    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bcd:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018bd2:	eb 41                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd4:	b9 04 00 09 00       	mov    ecx,0x90004
c0018bd9:	0f a3 d1             	bt     ecx,edx
c0018bdc:	73 37                	jae    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bde:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018be3:	eb 30                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be5:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018bea:	80 f9 16             	cmp    cl,0x16
c0018bed:	75 26                	jne    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bef:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018bf4:	84 d2                	test   dl,dl
c0018bf6:	74 1d                	je     c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf8:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018bfd:	80 fa 30             	cmp    dl,0x30
c0018c00:	75 13                	jne    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c02:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018c07:	eb 0c                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c09:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018c0e:	eb 05                	jmp    c0018c15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c10:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018c15:	5b                   	pop    ebx
c0018c16:	5e                   	pop    esi
c0018c17:	5f                   	pop    edi
c0018c18:	5d                   	pop    ebp
c0018c19:	c3                   	ret    

c0018c1a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c22:	80 f9 04             	cmp    cl,0x4
c0018c25:	75 6b                	jne    c0018c92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c27:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018c2c:	80 fa 01             	cmp    dl,0x1
c0018c2f:	0f 86 92 02 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018c3a:	80 fa 02             	cmp    dl,0x2
c0018c3d:	0f 84 84 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018c48:	80 fa 03             	cmp    dl,0x3
c0018c4b:	0f 84 76 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c51:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018c56:	80 fa 04             	cmp    dl,0x4
c0018c59:	0f 84 68 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5f:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018c64:	80 fa 05             	cmp    dl,0x5
c0018c67:	0f 84 5a 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6d:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018c72:	80 fa 07             	cmp    dl,0x7
c0018c75:	0f 84 4c 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7b:	83 ea 08             	sub    edx,0x8
c0018c7e:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018c83:	80 fa 01             	cmp    dl,0x1
c0018c86:	0f 87 3b 02 00 00    	ja     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8c:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018c91:	c3                   	ret    
c0018c92:	80 f9 05             	cmp    cl,0x5
c0018c95:	75 45                	jne    c0018cdc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c97:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c9a:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018c9f:	80 f9 02             	cmp    cl,0x2
c0018ca2:	0f 86 1f 02 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca8:	80 fa 04             	cmp    dl,0x4
c0018cab:	0f 84 f3 01 00 00    	je     c0018ea4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018cb1:	80 fa 07             	cmp    dl,0x7
c0018cb4:	0f 84 0d 02 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cba:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018cbf:	80 fa 08             	cmp    dl,0x8
c0018cc2:	0f 84 ff 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc8:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018ccd:	80 fa 09             	cmp    dl,0x9
c0018cd0:	0f 85 f1 01 00 00    	jne    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd6:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018cdb:	c3                   	ret    
c0018cdc:	80 f9 06             	cmp    cl,0x6
c0018cdf:	0f 85 85 01 00 00    	jne    c0018e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018ce5:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018cea:	80 fa 01             	cmp    dl,0x1
c0018ced:	0f 84 d4 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf3:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cf6:	3c 01                	cmp    al,0x1
c0018cf8:	0f 86 ac 01 00 00    	jbe    c0018eaa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cfe:	80 fa 03             	cmp    dl,0x3
c0018d01:	0f 84 a3 01 00 00    	je     c0018eaa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d07:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d0a:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018d0f:	80 f9 01             	cmp    cl,0x1
c0018d12:	0f 86 af 01 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d18:	80 fa 09             	cmp    dl,0x9
c0018d1b:	0f 84 8f 01 00 00    	je     c0018eb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d21:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d24:	80 f9 01             	cmp    cl,0x1
c0018d27:	0f 86 9a 01 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2d:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018d32:	80 fa 0d             	cmp    dl,0xd
c0018d35:	0f 84 8c 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3b:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018d40:	80 fa 0e             	cmp    dl,0xe
c0018d43:	0f 84 7e 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d49:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018d4e:	80 fa 0f             	cmp    dl,0xf
c0018d51:	0f 84 70 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d57:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018d5c:	80 fa 15             	cmp    dl,0x15
c0018d5f:	0f 84 62 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d65:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d68:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018d6d:	80 f9 01             	cmp    cl,0x1
c0018d70:	0f 86 51 01 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d76:	80 fa 1a             	cmp    dl,0x1a
c0018d79:	0f 84 37 01 00 00    	je     c0018eb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d7f:	80 fa 1c             	cmp    dl,0x1c
c0018d82:	0f 84 34 01 00 00    	je     c0018ebc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d88:	80 fa 1d             	cmp    dl,0x1d
c0018d8b:	0f 84 36 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d91:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018d96:	80 fa 25             	cmp    dl,0x25
c0018d99:	0f 84 28 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018da2:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018da7:	80 f9 01             	cmp    cl,0x1
c0018daa:	0f 86 17 01 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db0:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018db5:	80 fa 2a             	cmp    dl,0x2a
c0018db8:	0f 84 09 01 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbe:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018dc3:	80 fa 2c             	cmp    dl,0x2c
c0018dc6:	0f 84 fb 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcc:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018dd1:	80 fa 2d             	cmp    dl,0x2d
c0018dd4:	0f 84 ed 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dda:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018ddf:	80 fa 2e             	cmp    dl,0x2e
c0018de2:	0f 84 df 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de8:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018ded:	80 fa 2f             	cmp    dl,0x2f
c0018df0:	0f 84 d1 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018df9:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018dfe:	80 f9 01             	cmp    cl,0x1
c0018e01:	0f 86 c0 00 00 00    	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e07:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018e0c:	80 fa 37             	cmp    dl,0x37
c0018e0f:	0f 84 b2 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e15:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018e1a:	80 fa 3a             	cmp    dl,0x3a
c0018e1d:	0f 84 a4 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e23:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018e28:	80 fa 3c             	cmp    dl,0x3c
c0018e2b:	0f 84 96 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e31:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018e36:	80 fa 3d             	cmp    dl,0x3d
c0018e39:	0f 84 88 00 00 00    	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3f:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018e44:	80 fa 3e             	cmp    dl,0x3e
c0018e47:	74 7e                	je     c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e49:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e4c:	3c 01                	cmp    al,0x1
c0018e4e:	76 72                	jbe    c0018ec2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e50:	80 fa 3f             	cmp    dl,0x3f
c0018e53:	74 6d                	je     c0018ec2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e55:	80 fa 4a             	cmp    dl,0x4a
c0018e58:	74 0a                	je     c0018e64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e5a:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018e5f:	80 fa 4d             	cmp    dl,0x4d
c0018e62:	75 63                	jne    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e64:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018e69:	c3                   	ret    
c0018e6a:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018e6f:	80 f9 0b             	cmp    cl,0xb
c0018e72:	75 0a                	jne    c0018e7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e74:	fe ca                	dec    dl
c0018e76:	75 4f                	jne    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e78:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018e7d:	c3                   	ret    
c0018e7e:	80 f9 0f             	cmp    cl,0xf
c0018e81:	75 44                	jne    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e83:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018e88:	80 fa 02             	cmp    dl,0x2
c0018e8b:	76 3a                	jbe    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e8d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e90:	3c 01                	cmp    al,0x1
c0018e92:	76 0a                	jbe    c0018e9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e94:	b8 06 c7 02 c0       	mov    eax,0xc002c706
c0018e99:	80 fa 06             	cmp    dl,0x6
c0018e9c:	75 29                	jne    c0018ec7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e9e:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018ea3:	c3                   	ret    
c0018ea4:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018ea9:	c3                   	ret    
c0018eaa:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018eaf:	c3                   	ret    
c0018eb0:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018eb5:	c3                   	ret    
c0018eb6:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018ebb:	c3                   	ret    
c0018ebc:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018ec1:	c3                   	ret    
c0018ec2:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018ec7:	c3                   	ret    

c0018ec8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ec8:	60                   	pusha  
c0018ec9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ed1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ed5:	9c                   	pushf  
c0018ed6:	fa                   	cli    
c0018ed7:	0f 09                	wbinvd 
c0018ed9:	0f 30                	wrmsr  
c0018edb:	9d                   	popf   
c0018edc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ee0:	89 02                	mov    DWORD PTR [edx],eax
c0018ee2:	61                   	popa   
c0018ee3:	c3                   	ret    

c0018ee4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ee4:	60                   	pusha  
c0018ee5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ee9:	9c                   	pushf  
c0018eea:	fa                   	cli    
c0018eeb:	0f 09                	wbinvd 
c0018eed:	31 c0                	xor    eax,eax
c0018eef:	31 d2                	xor    edx,edx
c0018ef1:	0f 32                	rdmsr  
c0018ef3:	9d                   	popf   
c0018ef4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ef8:	89 02                	mov    DWORD PTR [edx],eax
c0018efa:	61                   	popa   
c0018efb:	c3                   	ret    

c0018efc <CPU::AMD_K6_writeback(int, int, int)>:
c0018efc:	56                   	push   esi
c0018efd:	53                   	push   ebx
c0018efe:	83 ec 10             	sub    esp,0x10
c0018f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f05:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018f0a:	75 5d                	jne    c0018f69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f0c:	83 f8 08             	cmp    eax,0x8
c0018f0f:	75 09                	jne    c0018f1a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f11:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018f16:	7e 13                	jle    c0018f2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f18:	eb 30                	jmp    c0018f4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f1a:	83 f8 06             	cmp    eax,0x6
c0018f1d:	7c 4a                	jl     c0018f69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f1f:	83 f8 07             	cmp    eax,0x7
c0018f22:	7e 07                	jle    c0018f2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f24:	83 f8 09             	cmp    eax,0x9
c0018f27:	74 21                	je     c0018f4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f29:	eb 3e                	jmp    c0018f69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f2b:	89 e6                	mov    esi,esp
c0018f2d:	8b 1d 08 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f308
c0018f33:	56                   	push   esi
c0018f34:	c1 eb 15             	shr    ebx,0x15
c0018f37:	68 82 00 00 c0       	push   0xc0000082
c0018f3c:	83 e3 7e             	and    ebx,0x7e
c0018f3f:	e8 a0 ff ff ff       	call   c0018ee4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f44:	56                   	push   esi
c0018f45:	6a 00                	push   0x0
c0018f47:	53                   	push   ebx
c0018f48:	eb 12                	jmp    c0018f5c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f4a:	89 e3                	mov    ebx,esp
c0018f4c:	53                   	push   ebx
c0018f4d:	68 82 00 00 c0       	push   0xc0000082
c0018f52:	e8 8d ff ff ff       	call   c0018ee4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f57:	53                   	push   ebx
c0018f58:	6a 00                	push   0x0
c0018f5a:	6a 00                	push   0x0
c0018f5c:	68 82 00 00 c0       	push   0xc0000082
c0018f61:	e8 62 ff ff ff       	call   c0018ec8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f66:	83 c4 18             	add    esp,0x18
c0018f69:	83 c4 10             	add    esp,0x10
c0018f6c:	5b                   	pop    ebx
c0018f6d:	5e                   	pop    esi
c0018f6e:	c3                   	ret    
c0018f6f:	90                   	nop

c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f70:	55                   	push   ebp
c0018f71:	57                   	push   edi
c0018f72:	56                   	push   esi
c0018f73:	53                   	push   ebx
c0018f74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f7c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f80:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f84:	39 05 e0 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7e0,eax
c0018f8a:	75 23                	jne    c0018faf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f8c:	a1 0c 1e 03 c0       	mov    eax,ds:0xc0031e0c
c0018f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f95:	89 06                	mov    DWORD PTR [esi],eax
c0018f97:	a1 08 1e 03 c0       	mov    eax,ds:0xc0031e08
c0018f9c:	89 07                	mov    DWORD PTR [edi],eax
c0018f9e:	a1 04 1e 03 c0       	mov    eax,ds:0xc0031e04
c0018fa3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018fa6:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c0018fab:	89 02                	mov    DWORD PTR [edx],eax
c0018fad:	eb 3f                	jmp    c0018fee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018faf:	31 c9                	xor    ecx,ecx
c0018fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb5:	0f a2                	cpuid  
c0018fb7:	89 06                	mov    DWORD PTR [esi],eax
c0018fb9:	89 1f                	mov    DWORD PTR [edi],ebx
c0018fbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fbf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018fc2:	89 10                	mov    DWORD PTR [eax],edx
c0018fc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fc8:	a3 e0 e7 02 c0       	mov    ds:0xc002e7e0,eax
c0018fcd:	8b 06                	mov    eax,DWORD PTR [esi]
c0018fcf:	a3 0c 1e 03 c0       	mov    ds:0xc0031e0c,eax
c0018fd4:	8b 07                	mov    eax,DWORD PTR [edi]
c0018fd6:	a3 08 1e 03 c0       	mov    ds:0xc0031e08,eax
c0018fdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fde:	a3 04 1e 03 c0       	mov    ds:0xc0031e04,eax
c0018fe3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fe9:	a3 00 1e 03 c0       	mov    ds:0xc0031e00,eax
c0018fee:	5b                   	pop    ebx
c0018fef:	5e                   	pop    esi
c0018ff0:	5f                   	pop    edi
c0018ff1:	5d                   	pop    ebp
c0018ff2:	c3                   	ret    
c0018ff3:	90                   	nop

c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>:
c0018ff4:	83 ec 10             	sub    esp,0x10
c0018ff7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ffb:	50                   	push   eax
c0018ffc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019000:	50                   	push   eax
c0019001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019005:	50                   	push   eax
c0019006:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900a:	50                   	push   eax
c001900b:	6a 01                	push   0x1
c001900d:	e8 5e ff ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019012:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019016:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001901a:	0f 95 c0             	setne  al
c001901d:	83 c4 24             	add    esp,0x24
c0019020:	c3                   	ret    
c0019021:	90                   	nop

c0019022 <CPU::cpuidCheckECX(unsigned int)>:
c0019022:	83 ec 10             	sub    esp,0x10
c0019025:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019029:	50                   	push   eax
c001902a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902e:	50                   	push   eax
c001902f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019033:	50                   	push   eax
c0019034:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019038:	50                   	push   eax
c0019039:	6a 01                	push   0x1
c001903b:	e8 30 ff ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019040:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019044:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019048:	0f 95 c0             	setne  al
c001904b:	83 c4 24             	add    esp,0x24
c001904e:	c3                   	ret    
c001904f:	90                   	nop

c0019050 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019050:	83 ec 10             	sub    esp,0x10
c0019053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019057:	50                   	push   eax
c0019058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905c:	50                   	push   eax
c001905d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019061:	50                   	push   eax
c0019062:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019066:	50                   	push   eax
c0019067:	6a 07                	push   0x7
c0019069:	e8 02 ff ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001906e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019072:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019076:	0f 95 c0             	setne  al
c0019079:	83 c4 24             	add    esp,0x24
c001907c:	c3                   	ret    
c001907d:	90                   	nop

c001907e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001907e:	83 ec 10             	sub    esp,0x10
c0019081:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019085:	50                   	push   eax
c0019086:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001908a:	50                   	push   eax
c001908b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001908f:	50                   	push   eax
c0019090:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019094:	50                   	push   eax
c0019095:	6a 07                	push   0x7
c0019097:	e8 d4 fe ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001909c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190a4:	0f 95 c0             	setne  al
c00190a7:	83 c4 24             	add    esp,0x24
c00190aa:	c3                   	ret    
c00190ab:	90                   	nop

c00190ac <CPU::CPU()>:
c00190ac:	83 ec 0c             	sub    esp,0xc
c00190af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b3:	83 ec 08             	sub    esp,0x8
c00190b6:	68 06 c7 02 c0       	push   0xc002c706
c00190bb:	50                   	push   eax
c00190bc:	e8 87 b3 ff ff       	call   c0014448 <Device::Device(char const*)>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c00190c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190cd:	89 10                	mov    DWORD PTR [eax],edx
c00190cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e1:	05 78 01 00 00       	add    eax,0x178
c00190e6:	83 ec 0c             	sub    esp,0xc
c00190e9:	50                   	push   eax
c00190ea:	e8 b3 5f ff ff       	call   c000f0a2 <GDT::GDT()>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f6:	05 7c 09 00 00       	add    eax,0x97c
c00190fb:	83 ec 0c             	sub    esp,0xc
c00190fe:	50                   	push   eax
c00190ff:	e8 08 62 ff ff       	call   c000f30c <IDT::IDT()>
c0019104:	83 c4 10             	add    esp,0x10
c0019107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001910b:	05 7c 11 00 00       	add    eax,0x117c
c0019110:	83 ec 0c             	sub    esp,0xc
c0019113:	50                   	push   eax
c0019114:	e8 49 82 ff ff       	call   c0011362 <TSS::TSS()>
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019120:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001912b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019135:	90                   	nop
c0019136:	83 c4 0c             	add    esp,0xc
c0019139:	c3                   	ret    

c001913a <CPU::displayFeatures()>:
c001913a:	53                   	push   ebx
c001913b:	83 ec 10             	sub    esp,0x10
c001913e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019142:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019148:	68 14 c4 02 c0       	push   0xc002c414
c001914d:	e8 e5 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019152:	59                   	pop    ecx
c0019153:	58                   	pop    eax
c0019154:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001915a:	50                   	push   eax
c001915b:	68 25 c4 02 c0       	push   0xc002c425
c0019160:	e8 d2 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019165:	58                   	pop    eax
c0019166:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001916c:	5a                   	pop    edx
c001916d:	c1 e8 0e             	shr    eax,0xe
c0019170:	0f b6 c0             	movzx  eax,al
c0019173:	50                   	push   eax
c0019174:	68 36 c4 02 c0       	push   0xc002c436
c0019179:	e8 b9 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001917e:	59                   	pop    ecx
c001917f:	58                   	pop    eax
c0019180:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019186:	66 c1 e8 06          	shr    ax,0x6
c001918a:	0f b6 c0             	movzx  eax,al
c001918d:	50                   	push   eax
c001918e:	68 47 c4 02 c0       	push   0xc002c447
c0019193:	e8 9f 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019198:	c7 04 24 f4 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8f4
c001919f:	e8 93 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00191ac:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00191b3:	74 05                	je     c00191ba <CPU::displayFeatures()+0x80>
c00191b5:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00191ba:	52                   	push   edx
c00191bb:	52                   	push   edx
c00191bc:	50                   	push   eax
c00191bd:	68 58 c4 02 c0       	push   0xc002c458
c00191c2:	e8 70 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00191cf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00191d6:	78 05                	js     c00191dd <CPU::displayFeatures()+0xa3>
c00191d8:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00191dd:	51                   	push   ecx
c00191de:	51                   	push   ecx
c00191df:	50                   	push   eax
c00191e0:	68 6f c4 02 c0       	push   0xc002c46f
c00191e5:	e8 4d 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00191f2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191f9:	75 05                	jne    c0019200 <CPU::displayFeatures()+0xc6>
c00191fb:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019200:	52                   	push   edx
c0019201:	52                   	push   edx
c0019202:	50                   	push   eax
c0019203:	68 86 c4 02 c0       	push   0xc002c486
c0019208:	e8 2a 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c0019215:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001921c:	75 05                	jne    c0019223 <CPU::displayFeatures()+0xe9>
c001921e:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019223:	51                   	push   ecx
c0019224:	51                   	push   ecx
c0019225:	50                   	push   eax
c0019226:	68 9d c4 02 c0       	push   0xc002c49d
c001922b:	e8 07 9c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c0019238:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001923f:	75 05                	jne    c0019246 <CPU::displayFeatures()+0x10c>
c0019241:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019246:	52                   	push   edx
c0019247:	52                   	push   edx
c0019248:	50                   	push   eax
c0019249:	68 b4 c4 02 c0       	push   0xc002c4b4
c001924e:	e8 e4 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c001925b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019262:	75 05                	jne    c0019269 <CPU::displayFeatures()+0x12f>
c0019264:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019269:	51                   	push   ecx
c001926a:	51                   	push   ecx
c001926b:	50                   	push   eax
c001926c:	68 cb c4 02 c0       	push   0xc002c4cb
c0019271:	e8 c1 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c001927e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019285:	75 05                	jne    c001928c <CPU::displayFeatures()+0x152>
c0019287:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c001928c:	52                   	push   edx
c001928d:	52                   	push   edx
c001928e:	50                   	push   eax
c001928f:	68 e2 c4 02 c0       	push   0xc002c4e2
c0019294:	e8 9e 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00192a1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00192a8:	75 05                	jne    c00192af <CPU::displayFeatures()+0x175>
c00192aa:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00192af:	51                   	push   ecx
c00192b0:	51                   	push   ecx
c00192b1:	50                   	push   eax
c00192b2:	68 f9 c4 02 c0       	push   0xc002c4f9
c00192b7:	e8 7b 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00192c4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00192cb:	75 05                	jne    c00192d2 <CPU::displayFeatures()+0x198>
c00192cd:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00192d2:	52                   	push   edx
c00192d3:	52                   	push   edx
c00192d4:	50                   	push   eax
c00192d5:	68 10 c5 02 c0       	push   0xc002c510
c00192da:	e8 58 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00192df:	83 c4 10             	add    esp,0x10
c00192e2:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c00192e7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192ee:	75 05                	jne    c00192f5 <CPU::displayFeatures()+0x1bb>
c00192f0:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00192f5:	51                   	push   ecx
c00192f6:	51                   	push   ecx
c00192f7:	50                   	push   eax
c00192f8:	68 27 c5 02 c0       	push   0xc002c527
c00192fd:	e8 35 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c001930a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019311:	75 05                	jne    c0019318 <CPU::displayFeatures()+0x1de>
c0019313:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019318:	52                   	push   edx
c0019319:	52                   	push   edx
c001931a:	50                   	push   eax
c001931b:	68 3e c5 02 c0       	push   0xc002c53e
c0019320:	e8 12 9b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019325:	83 c4 10             	add    esp,0x10
c0019328:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c001932d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019334:	75 05                	jne    c001933b <CPU::displayFeatures()+0x201>
c0019336:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c001933b:	51                   	push   ecx
c001933c:	51                   	push   ecx
c001933d:	50                   	push   eax
c001933e:	68 55 c5 02 c0       	push   0xc002c555
c0019343:	e8 ef 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0019348:	83 c4 10             	add    esp,0x10
c001934b:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c0019350:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019357:	75 05                	jne    c001935e <CPU::displayFeatures()+0x224>
c0019359:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c001935e:	52                   	push   edx
c001935f:	52                   	push   edx
c0019360:	50                   	push   eax
c0019361:	68 6c c5 02 c0       	push   0xc002c56c
c0019366:	e8 cc 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001936b:	83 c4 10             	add    esp,0x10
c001936e:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c0019373:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001937a:	78 05                	js     c0019381 <CPU::displayFeatures()+0x247>
c001937c:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c0019381:	51                   	push   ecx
c0019382:	51                   	push   ecx
c0019383:	50                   	push   eax
c0019384:	68 83 c5 02 c0       	push   0xc002c583
c0019389:	e8 a9 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001938e:	83 c4 10             	add    esp,0x10
c0019391:	b8 52 ad 02 c0       	mov    eax,0xc002ad52
c0019396:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001939d:	75 05                	jne    c00193a4 <CPU::displayFeatures()+0x26a>
c001939f:	b8 56 ad 02 c0       	mov    eax,0xc002ad56
c00193a4:	52                   	push   edx
c00193a5:	52                   	push   edx
c00193a6:	50                   	push   eax
c00193a7:	68 9a c5 02 c0       	push   0xc002c59a
c00193ac:	e8 86 9a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00193b1:	83 c4 18             	add    esp,0x18
c00193b4:	5b                   	pop    ebx
c00193b5:	c3                   	ret    

c00193b6 <CPU::detectFeatures()>:
c00193b6:	55                   	push   ebp
c00193b7:	57                   	push   edi
c00193b8:	56                   	push   esi
c00193b9:	53                   	push   ebx
c00193ba:	83 ec 50             	sub    esp,0x50
c00193bd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00193c1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00193cb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00193d2:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00193d8:	6a 0d                	push   0xd
c00193da:	6a 00                	push   0x0
c00193dc:	55                   	push   ebp
c00193dd:	e8 6e 73 fe ff       	call   c0000750 <memset>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00193ea:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193f1:	0f 84 22 09 00 00    	je     c0019d19 <CPU::detectFeatures()+0x963>
c00193f7:	83 ec 0c             	sub    esp,0xc
c00193fa:	89 ef                	mov    edi,ebp
c00193fc:	6a 10                	push   0x10
c00193fe:	e8 f1 fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c0019403:	83 e0 01             	and    eax,0x1
c0019406:	8d 14 00             	lea    edx,[eax+eax*1]
c0019409:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001940f:	83 e0 fd             	and    eax,0xfffffffd
c0019412:	09 d0                	or     eax,edx
c0019414:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001941a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019421:	e8 ce fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c0019426:	83 e0 01             	and    eax,0x1
c0019429:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019430:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019436:	83 e0 fb             	and    eax,0xfffffffb
c0019439:	09 d0                	or     eax,edx
c001943b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019441:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019448:	e8 a7 fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c001944d:	83 e0 01             	and    eax,0x1
c0019450:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019457:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945d:	83 e0 f7             	and    eax,0xfffffff7
c0019460:	09 d0                	or     eax,edx
c0019462:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019468:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001946f:	e8 80 fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c0019474:	83 e0 01             	and    eax,0x1
c0019477:	c1 e0 04             	shl    eax,0x4
c001947a:	88 c2                	mov    dl,al
c001947c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019482:	83 e0 ef             	and    eax,0xffffffef
c0019485:	09 d0                	or     eax,edx
c0019487:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001948d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019494:	e8 5b fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c0019499:	83 e0 01             	and    eax,0x1
c001949c:	c1 e0 05             	shl    eax,0x5
c001949f:	88 c2                	mov    dl,al
c00194a1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194a7:	83 e0 df             	and    eax,0xffffffdf
c00194aa:	09 d0                	or     eax,edx
c00194ac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00194b9:	e8 36 fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c00194be:	83 e0 01             	and    eax,0x1
c00194c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00194c4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194ca:	83 e0 fd             	and    eax,0xfffffffd
c00194cd:	09 d0                	or     eax,edx
c00194cf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194d5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194dc:	e8 13 fb ff ff       	call   c0018ff4 <CPU::cpuidCheckEDX(unsigned int)>
c00194e1:	83 e0 01             	and    eax,0x1
c00194e4:	c1 e0 06             	shl    eax,0x6
c00194e7:	88 c2                	mov    dl,al
c00194e9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194ef:	83 e0 bf             	and    eax,0xffffffbf
c00194f2:	09 d0                	or     eax,edx
c00194f4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194fa:	58                   	pop    eax
c00194fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194ff:	50                   	push   eax
c0019500:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019504:	50                   	push   eax
c0019505:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019509:	56                   	push   esi
c001950a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001950e:	50                   	push   eax
c001950f:	6a 00                	push   0x0
c0019511:	e8 5a fa ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019516:	b8 04 00 00 00       	mov    eax,0x4
c001951b:	89 c1                	mov    ecx,eax
c001951d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001951f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019525:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0019529:	89 c1                	mov    ecx,eax
c001952b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001952d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019533:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019537:	89 c1                	mov    ecx,eax
c0019539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001953b:	83 c4 18             	add    esp,0x18
c001953e:	68 b1 c5 02 c0       	push   0xc002c5b1
c0019543:	55                   	push   ebp
c0019544:	e8 4f 73 fe ff       	call   c0000898 <strcmp>
c0019549:	83 c4 10             	add    esp,0x10
c001954c:	85 c0                	test   eax,eax
c001954e:	75 0f                	jne    c001955f <CPU::detectFeatures()+0x1a9>
c0019550:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001955a:	e9 22 02 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c001955f:	50                   	push   eax
c0019560:	50                   	push   eax
c0019561:	68 be c5 02 c0       	push   0xc002c5be
c0019566:	55                   	push   ebp
c0019567:	e8 2c 73 fe ff       	call   c0000898 <strcmp>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	85 c0                	test   eax,eax
c0019571:	74 dd                	je     c0019550 <CPU::detectFeatures()+0x19a>
c0019573:	50                   	push   eax
c0019574:	50                   	push   eax
c0019575:	68 cb c5 02 c0       	push   0xc002c5cb
c001957a:	55                   	push   ebp
c001957b:	e8 18 73 fe ff       	call   c0000898 <strcmp>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	85 c0                	test   eax,eax
c0019585:	74 2a                	je     c00195b1 <CPU::detectFeatures()+0x1fb>
c0019587:	50                   	push   eax
c0019588:	50                   	push   eax
c0019589:	68 d8 c5 02 c0       	push   0xc002c5d8
c001958e:	55                   	push   ebp
c001958f:	e8 04 73 fe ff       	call   c0000898 <strcmp>
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	85 c0                	test   eax,eax
c0019599:	74 16                	je     c00195b1 <CPU::detectFeatures()+0x1fb>
c001959b:	50                   	push   eax
c001959c:	50                   	push   eax
c001959d:	68 e5 c5 02 c0       	push   0xc002c5e5
c00195a2:	55                   	push   ebp
c00195a3:	e8 f0 72 fe ff       	call   c0000898 <strcmp>
c00195a8:	83 c4 10             	add    esp,0x10
c00195ab:	85 c0                	test   eax,eax
c00195ad:	74 48                	je     c00195f7 <CPU::detectFeatures()+0x241>
c00195af:	eb 0f                	jmp    c00195c0 <CPU::detectFeatures()+0x20a>
c00195b1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00195bb:	e9 c1 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c00195c0:	50                   	push   eax
c00195c1:	50                   	push   eax
c00195c2:	68 f2 c5 02 c0       	push   0xc002c5f2
c00195c7:	55                   	push   ebp
c00195c8:	e8 cb 72 fe ff       	call   c0000898 <strcmp>
c00195cd:	83 c4 10             	add    esp,0x10
c00195d0:	85 c0                	test   eax,eax
c00195d2:	74 23                	je     c00195f7 <CPU::detectFeatures()+0x241>
c00195d4:	57                   	push   edi
c00195d5:	57                   	push   edi
c00195d6:	68 ff c5 02 c0       	push   0xc002c5ff
c00195db:	55                   	push   ebp
c00195dc:	e8 b7 72 fe ff       	call   c0000898 <strcmp>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	85 c0                	test   eax,eax
c00195e6:	75 1e                	jne    c0019606 <CPU::detectFeatures()+0x250>
c00195e8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195f2:	e9 8a 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c00195f7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019601:	e9 7b 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c0019606:	56                   	push   esi
c0019607:	56                   	push   esi
c0019608:	68 0c c6 02 c0       	push   0xc002c60c
c001960d:	55                   	push   ebp
c001960e:	e8 85 72 fe ff       	call   c0000898 <strcmp>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	85 c0                	test   eax,eax
c0019618:	75 0f                	jne    c0019629 <CPU::detectFeatures()+0x273>
c001961a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019624:	e9 58 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c0019629:	51                   	push   ecx
c001962a:	51                   	push   ecx
c001962b:	68 cb c5 02 c0       	push   0xc002c5cb
c0019630:	55                   	push   ebp
c0019631:	e8 62 72 fe ff       	call   c0000898 <strcmp>
c0019636:	83 c4 10             	add    esp,0x10
c0019639:	85 c0                	test   eax,eax
c001963b:	75 0f                	jne    c001964c <CPU::detectFeatures()+0x296>
c001963d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019647:	e9 35 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c001964c:	52                   	push   edx
c001964d:	52                   	push   edx
c001964e:	68 19 c6 02 c0       	push   0xc002c619
c0019653:	55                   	push   ebp
c0019654:	e8 3f 72 fe ff       	call   c0000898 <strcmp>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	85 c0                	test   eax,eax
c001965e:	75 0f                	jne    c001966f <CPU::detectFeatures()+0x2b9>
c0019660:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001966a:	e9 12 01 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c001966f:	50                   	push   eax
c0019670:	50                   	push   eax
c0019671:	68 26 c6 02 c0       	push   0xc002c626
c0019676:	55                   	push   ebp
c0019677:	e8 1c 72 fe ff       	call   c0000898 <strcmp>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	85 c0                	test   eax,eax
c0019681:	75 0f                	jne    c0019692 <CPU::detectFeatures()+0x2dc>
c0019683:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001968d:	e9 ef 00 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c0019692:	50                   	push   eax
c0019693:	50                   	push   eax
c0019694:	68 33 c6 02 c0       	push   0xc002c633
c0019699:	55                   	push   ebp
c001969a:	e8 f9 71 fe ff       	call   c0000898 <strcmp>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	85 c0                	test   eax,eax
c00196a4:	75 0f                	jne    c00196b5 <CPU::detectFeatures()+0x2ff>
c00196a6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00196b0:	e9 cc 00 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c00196b5:	50                   	push   eax
c00196b6:	50                   	push   eax
c00196b7:	68 40 c6 02 c0       	push   0xc002c640
c00196bc:	55                   	push   ebp
c00196bd:	e8 d6 71 fe ff       	call   c0000898 <strcmp>
c00196c2:	83 c4 10             	add    esp,0x10
c00196c5:	85 c0                	test   eax,eax
c00196c7:	75 0f                	jne    c00196d8 <CPU::detectFeatures()+0x322>
c00196c9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196d3:	e9 a9 00 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c00196d8:	50                   	push   eax
c00196d9:	50                   	push   eax
c00196da:	68 4d c6 02 c0       	push   0xc002c64d
c00196df:	55                   	push   ebp
c00196e0:	e8 b3 71 fe ff       	call   c0000898 <strcmp>
c00196e5:	83 c4 10             	add    esp,0x10
c00196e8:	85 c0                	test   eax,eax
c00196ea:	75 0f                	jne    c00196fb <CPU::detectFeatures()+0x345>
c00196ec:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196f6:	e9 86 00 00 00       	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c00196fb:	50                   	push   eax
c00196fc:	50                   	push   eax
c00196fd:	68 5a c6 02 c0       	push   0xc002c65a
c0019702:	55                   	push   ebp
c0019703:	e8 90 71 fe ff       	call   c0000898 <strcmp>
c0019708:	83 c4 10             	add    esp,0x10
c001970b:	85 c0                	test   eax,eax
c001970d:	75 0c                	jne    c001971b <CPU::detectFeatures()+0x365>
c001970f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019719:	eb 66                	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c001971b:	50                   	push   eax
c001971c:	50                   	push   eax
c001971d:	68 67 c6 02 c0       	push   0xc002c667
c0019722:	55                   	push   ebp
c0019723:	e8 70 71 fe ff       	call   c0000898 <strcmp>
c0019728:	83 c4 10             	add    esp,0x10
c001972b:	85 c0                	test   eax,eax
c001972d:	75 0c                	jne    c001973b <CPU::detectFeatures()+0x385>
c001972f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019739:	eb 46                	jmp    c0019781 <CPU::detectFeatures()+0x3cb>
c001973b:	57                   	push   edi
c001973c:	57                   	push   edi
c001973d:	68 74 c6 02 c0       	push   0xc002c674
c0019742:	55                   	push   ebp
c0019743:	e8 50 71 fe ff       	call   c0000898 <strcmp>
c0019748:	83 c4 10             	add    esp,0x10
c001974b:	85 c0                	test   eax,eax
c001974d:	74 e0                	je     c001972f <CPU::detectFeatures()+0x379>
c001974f:	56                   	push   esi
c0019750:	56                   	push   esi
c0019751:	68 81 c6 02 c0       	push   0xc002c681
c0019756:	55                   	push   ebp
c0019757:	e8 3c 71 fe ff       	call   c0000898 <strcmp>
c001975c:	83 c4 10             	add    esp,0x10
c001975f:	85 c0                	test   eax,eax
c0019761:	74 cc                	je     c001972f <CPU::detectFeatures()+0x379>
c0019763:	51                   	push   ecx
c0019764:	51                   	push   ecx
c0019765:	68 8e c6 02 c0       	push   0xc002c68e
c001976a:	55                   	push   ebp
c001976b:	e8 28 71 fe ff       	call   c0000898 <strcmp>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	85 c0                	test   eax,eax
c0019775:	74 b8                	je     c001972f <CPU::detectFeatures()+0x379>
c0019777:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019781:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019786:	0f 86 be 00 00 00    	jbe    c001984a <CPU::detectFeatures()+0x494>
c001978c:	83 ec 0c             	sub    esp,0xc
c001978f:	68 80 00 00 00       	push   0x80
c0019794:	e8 b7 f8 ff ff       	call   c0019050 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019799:	83 e0 01             	and    eax,0x1
c001979c:	c1 e0 06             	shl    eax,0x6
c001979f:	88 c2                	mov    dl,al
c00197a1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197a7:	83 e0 bf             	and    eax,0xffffffbf
c00197aa:	09 d0                	or     eax,edx
c00197ac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197b2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00197b9:	e8 92 f8 ff ff       	call   c0019050 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197be:	83 e0 01             	and    eax,0x1
c00197c1:	c1 e0 04             	shl    eax,0x4
c00197c4:	88 c2                	mov    dl,al
c00197c6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197cc:	83 e0 ef             	and    eax,0xffffffef
c00197cf:	09 d0                	or     eax,edx
c00197d1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197d7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197de:	e8 6d f8 ff ff       	call   c0019050 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197e3:	c1 e0 07             	shl    eax,0x7
c00197e6:	88 c2                	mov    dl,al
c00197e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197ee:	83 e0 7f             	and    eax,0x7f
c00197f1:	09 d0                	or     eax,edx
c00197f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019800:	e8 79 f8 ff ff       	call   c001907e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019805:	83 e0 01             	and    eax,0x1
c0019808:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001980f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019815:	83 e0 f7             	and    eax,0xfffffff7
c0019818:	09 d0                	or     eax,edx
c001981a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019820:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019827:	e8 52 f8 ff ff       	call   c001907e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	83 e0 01             	and    eax,0x1
c0019832:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019839:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001983f:	83 e0 fb             	and    eax,0xfffffffb
c0019842:	09 d0                	or     eax,edx
c0019844:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001984a:	83 ec 0c             	sub    esp,0xc
c001984d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019851:	50                   	push   eax
c0019852:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019856:	50                   	push   eax
c0019857:	8d 74 24 28          	lea    esi,[esp+0x28]
c001985b:	56                   	push   esi
c001985c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019860:	50                   	push   eax
c0019861:	6a 01                	push   0x1
c0019863:	e8 08 f7 ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019868:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001986c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019872:	88 ca                	mov    dl,cl
c0019874:	83 e0 f0             	and    eax,0xfffffff0
c0019877:	83 e2 0f             	and    edx,0xf
c001987a:	09 d0                	or     eax,edx
c001987c:	88 ca                	mov    dl,cl
c001987e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019884:	c0 ea 04             	shr    dl,0x4
c0019887:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001988b:	0f b6 c2             	movzx  eax,dl
c001988e:	83 c4 20             	add    esp,0x20
c0019891:	c1 e0 06             	shl    eax,0x6
c0019894:	89 c7                	mov    edi,eax
c0019896:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001989c:	66 25 3f c0          	and    ax,0xc03f
c00198a0:	09 f8                	or     eax,edi
c00198a2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00198a9:	89 c8                	mov    eax,ecx
c00198ab:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00198b2:	c1 e8 08             	shr    eax,0x8
c00198b5:	83 e5 3f             	and    ebp,0x3f
c00198b8:	83 e0 0f             	and    eax,0xf
c00198bb:	89 c7                	mov    edi,eax
c00198bd:	c1 e7 06             	shl    edi,0x6
c00198c0:	09 ef                	or     edi,ebp
c00198c2:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00198c9:	89 fa                	mov    edx,edi
c00198cb:	83 e5 c0             	and    ebp,0xffffffc0
c00198ce:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00198d4:	88 c2                	mov    dl,al
c00198d6:	c0 ea 02             	shr    dl,0x2
c00198d9:	89 d7                	mov    edi,edx
c00198db:	09 ef                	or     edi,ebp
c00198dd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198e3:	89 fa                	mov    edx,edi
c00198e5:	83 e5 cf             	and    ebp,0xffffffcf
c00198e8:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198ee:	89 cf                	mov    edi,ecx
c00198f0:	c1 ef 0c             	shr    edi,0xc
c00198f3:	83 e7 03             	and    edi,0x3
c00198f6:	c1 e7 04             	shl    edi,0x4
c00198f9:	09 ef                	or     edi,ebp
c00198fb:	3c 06                	cmp    al,0x6
c00198fd:	89 fa                	mov    edx,edi
c00198ff:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019905:	74 04                	je     c001990b <CPU::detectFeatures()+0x555>
c0019907:	3c 0f                	cmp    al,0xf
c0019909:	75 5c                	jne    c0019967 <CPU::detectFeatures()+0x5b1>
c001990b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001990f:	89 cf                	mov    edi,ecx
c0019911:	c1 ef 10             	shr    edi,0x10
c0019914:	c1 e7 04             	shl    edi,0x4
c0019917:	09 fa                	or     edx,edi
c0019919:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001991f:	0f b6 d2             	movzx  edx,dl
c0019922:	66 81 e7 3f c0       	and    di,0xc03f
c0019927:	c1 e2 06             	shl    edx,0x6
c001992a:	09 fa                	or     edx,edi
c001992c:	3c 0f                	cmp    al,0xf
c001992e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019935:	75 30                	jne    c0019967 <CPU::detectFeatures()+0x5b1>
c0019937:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001993d:	c1 e9 14             	shr    ecx,0x14
c0019940:	83 e0 3f             	and    eax,0x3f
c0019943:	83 c1 0f             	add    ecx,0xf
c0019946:	88 ca                	mov    dl,cl
c0019948:	c0 e9 02             	shr    cl,0x2
c001994b:	c1 e2 06             	shl    edx,0x6
c001994e:	09 d0                	or     eax,edx
c0019950:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019956:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001995c:	83 e0 c0             	and    eax,0xffffffc0
c001995f:	09 c1                	or     ecx,eax
c0019961:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019967:	83 ec 0c             	sub    esp,0xc
c001996a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019971:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019975:	50                   	push   eax
c0019976:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001997a:	55                   	push   ebp
c001997b:	56                   	push   esi
c001997c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019980:	57                   	push   edi
c0019981:	68 00 00 00 80       	push   0x80000000
c0019986:	e8 e5 f5 ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001998b:	83 c4 20             	add    esp,0x20
c001998e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019996:	76 22                	jbe    c00199ba <CPU::detectFeatures()+0x604>
c0019998:	83 ec 0c             	sub    esp,0xc
c001999b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001999f:	50                   	push   eax
c00199a0:	55                   	push   ebp
c00199a1:	56                   	push   esi
c00199a2:	57                   	push   edi
c00199a3:	68 01 00 00 80       	push   0x80000001
c00199a8:	e8 c3 f5 ff ff       	call   c0018f70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199ad:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00199b7:	83 c4 20             	add    esp,0x20
c00199ba:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00199c0:	83 f8 01             	cmp    eax,0x1
c00199c3:	75 6f                	jne    c0019a34 <CPU::detectFeatures()+0x67e>
c00199c5:	51                   	push   ecx
c00199c6:	51                   	push   ecx
c00199c7:	68 9a c6 02 c0       	push   0xc002c69a
c00199cc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199d0:	56                   	push   esi
c00199d1:	e8 36 6e fe ff       	call   c000080c <strcpy>
c00199d6:	5f                   	pop    edi
c00199d7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199dd:	5d                   	pop    ebp
c00199de:	66 c1 e8 06          	shr    ax,0x6
c00199e2:	0f b6 c0             	movzx  eax,al
c00199e5:	50                   	push   eax
c00199e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199ec:	c1 e8 0e             	shr    eax,0xe
c00199ef:	0f b6 c0             	movzx  eax,al
c00199f2:	50                   	push   eax
c00199f3:	e8 22 f2 ff ff       	call   c0018c1a <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199f8:	5a                   	pop    edx
c00199f9:	59                   	pop    ecx
c00199fa:	50                   	push   eax
c00199fb:	56                   	push   esi
c00199fc:	e8 4b 6f fe ff       	call   c000094c <strcat>
c0019a01:	5f                   	pop    edi
c0019a02:	5d                   	pop    ebp
c0019a03:	56                   	push   esi
c0019a04:	53                   	push   ebx
c0019a05:	e8 30 aa ff ff       	call   c001443a <Device::setName(char const*)>
c0019a0a:	58                   	pop    eax
c0019a0b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a11:	5a                   	pop    edx
c0019a12:	68 a1 c6 02 c0       	push   0xc002c6a1
c0019a17:	50                   	push   eax
c0019a18:	e8 7b 6e fe ff       	call   c0000898 <strcmp>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	85 c0                	test   eax,eax
c0019a22:	0f 85 71 03 00 00    	jne    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019a28:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a2f:	e9 65 03 00 00       	jmp    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019a34:	83 f8 02             	cmp    eax,0x2
c0019a37:	0f 85 b5 00 00 00    	jne    c0019af2 <CPU::detectFeatures()+0x73c>
c0019a3d:	57                   	push   edi
c0019a3e:	57                   	push   edi
c0019a3f:	68 b3 c6 02 c0       	push   0xc002c6b3
c0019a44:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a48:	56                   	push   esi
c0019a49:	e8 be 6d fe ff       	call   c000080c <strcpy>
c0019a4e:	5d                   	pop    ebp
c0019a4f:	58                   	pop    eax
c0019a50:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a56:	66 c1 e8 06          	shr    ax,0x6
c0019a5a:	0f b6 c0             	movzx  eax,al
c0019a5d:	50                   	push   eax
c0019a5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a64:	c1 e8 0e             	shr    eax,0xe
c0019a67:	0f b6 c0             	movzx  eax,al
c0019a6a:	50                   	push   eax
c0019a6b:	e8 16 f0 ff ff       	call   c0018a86 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a70:	5a                   	pop    edx
c0019a71:	59                   	pop    ecx
c0019a72:	50                   	push   eax
c0019a73:	56                   	push   esi
c0019a74:	e8 d3 6e fe ff       	call   c000094c <strcat>
c0019a79:	5f                   	pop    edi
c0019a7a:	5d                   	pop    ebp
c0019a7b:	56                   	push   esi
c0019a7c:	53                   	push   ebx
c0019a7d:	e8 b8 a9 ff ff       	call   c001443a <Device::setName(char const*)>
c0019a82:	58                   	pop    eax
c0019a83:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a89:	5a                   	pop    edx
c0019a8a:	68 b8 c6 02 c0       	push   0xc002c6b8
c0019a8f:	50                   	push   eax
c0019a90:	e8 03 6e fe ff       	call   c0000898 <strcmp>
c0019a95:	83 c4 10             	add    esp,0x10
c0019a98:	85 c0                	test   eax,eax
c0019a9a:	75 20                	jne    c0019abc <CPU::detectFeatures()+0x706>
c0019a9c:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0019aa2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019aa8:	a8 01                	test   al,0x1
c0019aaa:	74 10                	je     c0019abc <CPU::detectFeatures()+0x706>
c0019aac:	83 e0 fe             	and    eax,0xfffffffe
c0019aaf:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019ab5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019abc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ac2:	c1 e8 0e             	shr    eax,0xe
c0019ac5:	3c 05                	cmp    al,0x5
c0019ac7:	0f 85 cc 02 00 00    	jne    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019acd:	56                   	push   esi
c0019ace:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019ad4:	83 e0 0f             	and    eax,0xf
c0019ad7:	50                   	push   eax
c0019ad8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ade:	66 c1 e8 06          	shr    ax,0x6
c0019ae2:	0f b6 c0             	movzx  eax,al
c0019ae5:	50                   	push   eax
c0019ae6:	6a 05                	push   0x5
c0019ae8:	e8 0f f4 ff ff       	call   c0018efc <CPU::AMD_K6_writeback(int, int, int)>
c0019aed:	e9 1f 02 00 00       	jmp    c0019d11 <CPU::detectFeatures()+0x95b>
c0019af2:	8d 50 fd             	lea    edx,[eax-0x3]
c0019af5:	83 fa 01             	cmp    edx,0x1
c0019af8:	76 09                	jbe    c0019b03 <CPU::detectFeatures()+0x74d>
c0019afa:	83 f8 06             	cmp    eax,0x6
c0019afd:	0f 85 91 01 00 00    	jne    c0019c94 <CPU::detectFeatures()+0x8de>
c0019b03:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b09:	c1 ea 0e             	shr    edx,0xe
c0019b0c:	80 fa 05             	cmp    dl,0x5
c0019b0f:	75 7b                	jne    c0019b8c <CPU::detectFeatures()+0x7d6>
c0019b11:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b17:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b1c:	66 81 fa 00 01       	cmp    dx,0x100
c0019b21:	75 0c                	jne    c0019b2f <CPU::detectFeatures()+0x779>
c0019b23:	51                   	push   ecx
c0019b24:	51                   	push   ecx
c0019b25:	68 bf c6 02 c0       	push   0xc002c6bf
c0019b2a:	e9 dc 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b2f:	66 81 fa 00 02       	cmp    dx,0x200
c0019b34:	75 0c                	jne    c0019b42 <CPU::detectFeatures()+0x78c>
c0019b36:	52                   	push   edx
c0019b37:	52                   	push   edx
c0019b38:	68 d2 c6 02 c0       	push   0xc002c6d2
c0019b3d:	e9 c9 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b42:	66 81 fa 40 02       	cmp    dx,0x240
c0019b47:	75 0c                	jne    c0019b55 <CPU::detectFeatures()+0x79f>
c0019b49:	50                   	push   eax
c0019b4a:	50                   	push   eax
c0019b4b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0019b50:	e9 b6 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b55:	83 f8 06             	cmp    eax,0x6
c0019b58:	75 0c                	jne    c0019b66 <CPU::detectFeatures()+0x7b0>
c0019b5a:	50                   	push   eax
c0019b5b:	50                   	push   eax
c0019b5c:	68 f6 c6 02 c0       	push   0xc002c6f6
c0019b61:	e9 a5 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b66:	83 f8 04             	cmp    eax,0x4
c0019b69:	75 0c                	jne    c0019b77 <CPU::detectFeatures()+0x7c1>
c0019b6b:	50                   	push   eax
c0019b6c:	50                   	push   eax
c0019b6d:	68 02 c7 02 c0       	push   0xc002c702
c0019b72:	e9 94 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b77:	83 f8 03             	cmp    eax,0x3
c0019b7a:	0f 85 19 02 00 00    	jne    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019b80:	50                   	push   eax
c0019b81:	50                   	push   eax
c0019b82:	68 0a c7 02 c0       	push   0xc002c70a
c0019b87:	e9 7f 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019b8c:	80 fa 06             	cmp    dl,0x6
c0019b8f:	0f 85 db 00 00 00    	jne    c0019c70 <CPU::detectFeatures()+0x8ba>
c0019b95:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b9b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ba0:	66 81 fa 80 01       	cmp    dx,0x180
c0019ba5:	75 0c                	jne    c0019bb3 <CPU::detectFeatures()+0x7fd>
c0019ba7:	50                   	push   eax
c0019ba8:	50                   	push   eax
c0019ba9:	68 15 c7 02 c0       	push   0xc002c715
c0019bae:	e9 58 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019bb3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019bb9:	66 f7 c1 80 ff       	test   cx,0xff80
c0019bbe:	75 0c                	jne    c0019bcc <CPU::detectFeatures()+0x816>
c0019bc0:	50                   	push   eax
c0019bc1:	50                   	push   eax
c0019bc2:	68 25 c7 02 c0       	push   0xc002c725
c0019bc7:	e9 3f 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019bcc:	66 81 fa 40 02       	cmp    dx,0x240
c0019bd1:	75 0c                	jne    c0019bdf <CPU::detectFeatures()+0x829>
c0019bd3:	55                   	push   ebp
c0019bd4:	55                   	push   ebp
c0019bd5:	68 2c c7 02 c0       	push   0xc002c72c
c0019bda:	e9 2c 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019bdf:	66 81 fa 80 02       	cmp    dx,0x280
c0019be4:	75 0c                	jne    c0019bf2 <CPU::detectFeatures()+0x83c>
c0019be6:	57                   	push   edi
c0019be7:	57                   	push   edi
c0019be8:	68 35 c7 02 c0       	push   0xc002c735
c0019bed:	e9 19 01 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019bf2:	66 81 fa 40 03       	cmp    dx,0x340
c0019bf7:	74 ed                	je     c0019be6 <CPU::detectFeatures()+0x830>
c0019bf9:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bfe:	75 0c                	jne    c0019c0c <CPU::detectFeatures()+0x856>
c0019c00:	56                   	push   esi
c0019c01:	56                   	push   esi
c0019c02:	68 3c c7 02 c0       	push   0xc002c73c
c0019c07:	e9 ff 00 00 00       	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019c0c:	83 f8 06             	cmp    eax,0x6
c0019c0f:	0f 84 45 ff ff ff    	je     c0019b5a <CPU::detectFeatures()+0x7a4>
c0019c15:	83 f8 04             	cmp    eax,0x4
c0019c18:	0f 84 4d ff ff ff    	je     c0019b6b <CPU::detectFeatures()+0x7b5>
c0019c1e:	83 f8 03             	cmp    eax,0x3
c0019c21:	0f 85 72 01 00 00    	jne    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019c27:	51                   	push   ecx
c0019c28:	51                   	push   ecx
c0019c29:	68 45 c7 02 c0       	push   0xc002c745
c0019c2e:	53                   	push   ebx
c0019c2f:	e8 06 a8 ff ff       	call   c001443a <Device::setName(char const*)>
c0019c34:	b1 c1                	mov    cl,0xc1
c0019c36:	88 c8                	mov    al,cl
c0019c38:	e6 22                	out    0x22,al
c0019c3a:	e4 23                	in     al,0x23
c0019c3c:	88 c2                	mov    dl,al
c0019c3e:	88 c8                	mov    al,cl
c0019c40:	e6 22                	out    0x22,al
c0019c42:	88 d0                	mov    al,dl
c0019c44:	83 c8 10             	or     eax,0x10
c0019c47:	e6 23                	out    0x23,al
c0019c49:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c50:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c53:	89 d0                	mov    eax,edx
c0019c55:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c5b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c5f:	40                   	inc    eax
c0019c60:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c66:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c6b:	e9 a1 00 00 00       	jmp    c0019d11 <CPU::detectFeatures()+0x95b>
c0019c70:	83 f8 06             	cmp    eax,0x6
c0019c73:	0f 84 e1 fe ff ff    	je     c0019b5a <CPU::detectFeatures()+0x7a4>
c0019c79:	83 f8 04             	cmp    eax,0x4
c0019c7c:	0f 84 e9 fe ff ff    	je     c0019b6b <CPU::detectFeatures()+0x7b5>
c0019c82:	83 f8 03             	cmp    eax,0x3
c0019c85:	0f 85 0e 01 00 00    	jne    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019c8b:	52                   	push   edx
c0019c8c:	52                   	push   edx
c0019c8d:	68 50 c7 02 c0       	push   0xc002c750
c0019c92:	eb 77                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019c94:	83 f8 07             	cmp    eax,0x7
c0019c97:	75 09                	jne    c0019ca2 <CPU::detectFeatures()+0x8ec>
c0019c99:	50                   	push   eax
c0019c9a:	50                   	push   eax
c0019c9b:	68 5a c7 02 c0       	push   0xc002c75a
c0019ca0:	eb 69                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019ca2:	83 f8 0a             	cmp    eax,0xa
c0019ca5:	75 09                	jne    c0019cb0 <CPU::detectFeatures()+0x8fa>
c0019ca7:	50                   	push   eax
c0019ca8:	50                   	push   eax
c0019ca9:	68 65 c7 02 c0       	push   0xc002c765
c0019cae:	eb 5b                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019cb0:	83 f8 0b             	cmp    eax,0xb
c0019cb3:	75 09                	jne    c0019cbe <CPU::detectFeatures()+0x908>
c0019cb5:	50                   	push   eax
c0019cb6:	50                   	push   eax
c0019cb7:	68 6d c7 02 c0       	push   0xc002c76d
c0019cbc:	eb 4d                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019cbe:	83 f8 08             	cmp    eax,0x8
c0019cc1:	75 09                	jne    c0019ccc <CPU::detectFeatures()+0x916>
c0019cc3:	50                   	push   eax
c0019cc4:	50                   	push   eax
c0019cc5:	68 76 c7 02 c0       	push   0xc002c776
c0019cca:	eb 3f                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019ccc:	83 f8 09             	cmp    eax,0x9
c0019ccf:	75 09                	jne    c0019cda <CPU::detectFeatures()+0x924>
c0019cd1:	50                   	push   eax
c0019cd2:	50                   	push   eax
c0019cd3:	68 7e c7 02 c0       	push   0xc002c77e
c0019cd8:	eb 31                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019cda:	83 f8 05             	cmp    eax,0x5
c0019cdd:	75 09                	jne    c0019ce8 <CPU::detectFeatures()+0x932>
c0019cdf:	50                   	push   eax
c0019ce0:	50                   	push   eax
c0019ce1:	68 86 c7 02 c0       	push   0xc002c786
c0019ce6:	eb 23                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019ce8:	83 f8 0c             	cmp    eax,0xc
c0019ceb:	75 09                	jne    c0019cf6 <CPU::detectFeatures()+0x940>
c0019ced:	55                   	push   ebp
c0019cee:	55                   	push   ebp
c0019cef:	68 94 c7 02 c0       	push   0xc002c794
c0019cf4:	eb 15                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019cf6:	83 f8 0d             	cmp    eax,0xd
c0019cf9:	75 09                	jne    c0019d04 <CPU::detectFeatures()+0x94e>
c0019cfb:	57                   	push   edi
c0019cfc:	57                   	push   edi
c0019cfd:	68 9f c7 02 c0       	push   0xc002c79f
c0019d02:	eb 07                	jmp    c0019d0b <CPU::detectFeatures()+0x955>
c0019d04:	56                   	push   esi
c0019d05:	56                   	push   esi
c0019d06:	68 b3 c7 02 c0       	push   0xc002c7b3
c0019d0b:	53                   	push   ebx
c0019d0c:	e8 29 a7 ff ff       	call   c001443a <Device::setName(char const*)>
c0019d11:	83 c4 10             	add    esp,0x10
c0019d14:	e9 80 00 00 00       	jmp    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019d19:	51                   	push   ecx
c0019d1a:	51                   	push   ecx
c0019d1b:	68 ff c5 02 c0       	push   0xc002c5ff
c0019d20:	55                   	push   ebp
c0019d21:	e8 e6 6a fe ff       	call   c000080c <strcpy>
c0019d26:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d30:	e8 79 65 fe ff       	call   c00002ae <is486>
c0019d35:	83 c4 10             	add    esp,0x10
c0019d38:	85 c0                	test   eax,eax
c0019d3a:	74 2b                	je     c0019d67 <CPU::detectFeatures()+0x9b1>
c0019d3c:	52                   	push   edx
c0019d3d:	52                   	push   edx
c0019d3e:	68 bf c7 02 c0       	push   0xc002c7bf
c0019d43:	53                   	push   ebx
c0019d44:	e8 f1 a6 ff ff       	call   c001443a <Device::setName(char const*)>
c0019d49:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d50:	0f 20 c0             	mov    eax,cr0
c0019d53:	83 e0 14             	and    eax,0x14
c0019d56:	83 c4 10             	add    esp,0x10
c0019d59:	83 f8 04             	cmp    eax,0x4
c0019d5c:	75 1f                	jne    c0019d7d <CPU::detectFeatures()+0x9c7>
c0019d5e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d65:	eb 32                	jmp    c0019d99 <CPU::detectFeatures()+0x9e3>
c0019d67:	50                   	push   eax
c0019d68:	50                   	push   eax
c0019d69:	68 ca c7 02 c0       	push   0xc002c7ca
c0019d6e:	53                   	push   ebx
c0019d6f:	e8 c6 a6 ff ff       	call   c001443a <Device::setName(char const*)>
c0019d74:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d7b:	eb d3                	jmp    c0019d50 <CPU::detectFeatures()+0x99a>
c0019d7d:	e8 07 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d82:	83 e0 01             	and    eax,0x1
c0019d85:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d88:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d8e:	83 e0 fd             	and    eax,0xfffffffd
c0019d91:	09 d0                	or     eax,edx
c0019d93:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d99:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019da0:	83 c4 4c             	add    esp,0x4c
c0019da3:	5b                   	pop    ebx
c0019da4:	5e                   	pop    esi
c0019da5:	5f                   	pop    edi
c0019da6:	5d                   	pop    ebp
c0019da7:	c3                   	ret    

c0019da8 <CPU::setupSMEP()>:
c0019da8:	0f 20 e0             	mov    eax,cr4
c0019dab:	0d 00 00 10 00       	or     eax,0x100000
c0019db0:	0f 22 e0             	mov    cr4,eax
c0019db3:	c3                   	ret    

c0019db4 <CPU::setupUMIP()>:
c0019db4:	0f 20 e0             	mov    eax,cr4
c0019db7:	80 cc 08             	or     ah,0x8
c0019dba:	0f 22 e0             	mov    cr4,eax
c0019dbd:	c3                   	ret    

c0019dbe <CPU::setupTSC()>:
c0019dbe:	0f 20 e0             	mov    eax,cr4
c0019dc1:	83 c8 04             	or     eax,0x4
c0019dc4:	0f 22 e0             	mov    cr4,eax
c0019dc7:	c3                   	ret    

c0019dc8 <CPU::setupLargePages()>:
c0019dc8:	0f 20 e0             	mov    eax,cr4
c0019dcb:	83 c8 10             	or     eax,0x10
c0019dce:	0f 22 e0             	mov    cr4,eax
c0019dd1:	c3                   	ret    

c0019dd2 <CPU::setupPAT()>:
c0019dd2:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019dd7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019dde:	74 2c                	je     c0019e0c <CPU::setupPAT()+0x3a>
c0019de0:	53                   	push   ebx
c0019de1:	83 ec 10             	sub    esp,0x10
c0019de4:	68 77 02 00 00       	push   0x277
c0019de9:	50                   	push   eax
c0019dea:	e8 43 50 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019def:	83 e2 f8             	and    edx,0xfffffff8
c0019df2:	83 ca 01             	or     edx,0x1
c0019df5:	52                   	push   edx
c0019df6:	50                   	push   eax
c0019df7:	68 77 02 00 00       	push   0x277
c0019dfc:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0019e02:	e8 57 50 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019e07:	83 c4 28             	add    esp,0x28
c0019e0a:	5b                   	pop    ebx
c0019e0b:	c3                   	ret    
c0019e0c:	c3                   	ret    
c0019e0d:	90                   	nop

c0019e0e <CPU::setupMTRR()>:
c0019e0e:	c3                   	ret    
c0019e0f:	90                   	nop

c0019e10 <CPU::setupGlobalPages()>:
c0019e10:	0f 20 e0             	mov    eax,cr4
c0019e13:	0c 80                	or     al,0x80
c0019e15:	0f 22 e0             	mov    cr4,eax
c0019e18:	c3                   	ret    
c0019e19:	90                   	nop

c0019e1a <CPU::allowUsermodeDataAccess()>:
c0019e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e1e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e25:	74 03                	je     c0019e2a <CPU::allowUsermodeDataAccess()+0x10>
c0019e27:	0f 01 cb             	stac   
c0019e2a:	c3                   	ret    
c0019e2b:	90                   	nop

c0019e2c <CPU::prohibitUsermodeDataAccess()>:
c0019e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e30:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e37:	74 03                	je     c0019e3c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e39:	0f 01 ca             	clac   
c0019e3c:	c3                   	ret    
c0019e3d:	90                   	nop

c0019e3e <CPU::setupSMAP()>:
c0019e3e:	0f 20 e0             	mov    eax,cr4
c0019e41:	0d 00 00 20 00       	or     eax,0x200000
c0019e46:	0f 22 e0             	mov    cr4,eax
c0019e49:	eb e1                	jmp    c0019e2c <CPU::prohibitUsermodeDataAccess()>
c0019e4b:	90                   	nop

c0019e4c <CPU::setupFeatures()>:
c0019e4c:	83 ec 0c             	sub    esp,0xc
c0019e4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e53:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e5a:	74 07                	je     c0019e63 <CPU::setupFeatures()+0x17>
c0019e5c:	52                   	push   edx
c0019e5d:	e8 46 ff ff ff       	call   c0019da8 <CPU::setupSMEP()>
c0019e62:	58                   	pop    eax
c0019e63:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e6a:	74 07                	je     c0019e73 <CPU::setupFeatures()+0x27>
c0019e6c:	52                   	push   edx
c0019e6d:	e8 cc ff ff ff       	call   c0019e3e <CPU::setupSMAP()>
c0019e72:	58                   	pop    eax
c0019e73:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e7a:	74 07                	je     c0019e83 <CPU::setupFeatures()+0x37>
c0019e7c:	52                   	push   edx
c0019e7d:	e8 32 ff ff ff       	call   c0019db4 <CPU::setupUMIP()>
c0019e82:	58                   	pop    eax
c0019e83:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e8a:	74 07                	je     c0019e93 <CPU::setupFeatures()+0x47>
c0019e8c:	52                   	push   edx
c0019e8d:	e8 2c ff ff ff       	call   c0019dbe <CPU::setupTSC()>
c0019e92:	58                   	pop    eax
c0019e93:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e9a:	74 07                	je     c0019ea3 <CPU::setupFeatures()+0x57>
c0019e9c:	52                   	push   edx
c0019e9d:	e8 26 ff ff ff       	call   c0019dc8 <CPU::setupLargePages()>
c0019ea2:	59                   	pop    ecx
c0019ea3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019eaa:	74 07                	je     c0019eb3 <CPU::setupFeatures()+0x67>
c0019eac:	52                   	push   edx
c0019ead:	e8 5e ff ff ff       	call   c0019e10 <CPU::setupGlobalPages()>
c0019eb2:	58                   	pop    eax
c0019eb3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019eba:	74 0c                	je     c0019ec8 <CPU::setupFeatures()+0x7c>
c0019ebc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019ec0:	83 c4 0c             	add    esp,0xc
c0019ec3:	e9 0a ff ff ff       	jmp    c0019dd2 <CPU::setupPAT()>
c0019ec8:	83 c4 0c             	add    esp,0xc
c0019ecb:	c3                   	ret    

c0019ecc <CPU::open(int, int, void*)>:
c0019ecc:	57                   	push   edi
c0019ecd:	56                   	push   esi
c0019ece:	53                   	push   ebx
c0019ecf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ed3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ed7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019edd:	83 ec 0c             	sub    esp,0xc
c0019ee0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ee6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019eec:	50                   	push   eax
c0019eed:	e8 2c 52 ff ff       	call   c000f11e <GDT::setup()>
c0019ef2:	83 c4 0c             	add    esp,0xc
c0019ef5:	6a 00                	push   0x0
c0019ef7:	68 ef be ad de       	push   0xdeadbeef
c0019efc:	57                   	push   edi
c0019efd:	e8 a0 74 ff ff       	call   c00113a2 <TSS::setup(unsigned long, unsigned long)>
c0019f02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f05:	e8 78 74 ff ff       	call   c0011382 <TSS::flush()>
c0019f0a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f13:	e8 6a 54 ff ff       	call   c000f382 <IDT::setup()>
c0019f18:	b8 00 04 00 00       	mov    eax,0x400
c0019f1d:	0f 23 f8             	mov    db7,eax
c0019f20:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f2a:	e8 c9 5f ff ff       	call   c000fef8 <Phys::allocatePage()>
c0019f2f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f35:	89 30                	mov    DWORD PTR [eax],esi
c0019f37:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f3d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f40:	58                   	pop    eax
c0019f41:	5a                   	pop    edx
c0019f42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f4c:	e8 f1 85 ff ff       	call   c0012542 <VAS::setCPUSpecific(unsigned long)>
c0019f51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f54:	e8 5d f4 ff ff       	call   c00193b6 <CPU::detectFeatures()>
c0019f59:	e8 33 b9 ff ff       	call   c0015891 <setupInterruptController()>
c0019f5e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f64:	a1 e0 f2 02 c0       	mov    eax,ds:0xc002f2e0
c0019f69:	83 e0 10             	and    eax,0x10
c0019f6c:	83 f8 01             	cmp    eax,0x1
c0019f6f:	19 c0                	sbb    eax,eax
c0019f71:	83 e0 46             	and    eax,0x46
c0019f74:	83 c0 1e             	add    eax,0x1e
c0019f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f7a:	e8 6a cf ff ff       	call   c0016ee9 <setupTimer(int)>
c0019f7f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f88:	e8 bf fe ff ff       	call   c0019e4c <CPU::setupFeatures()>
c0019f8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f90:	e8 a5 f1 ff ff       	call   c001913a <CPU::displayFeatures()>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	31 c0                	xor    eax,eax
c0019f9a:	5b                   	pop    ebx
c0019f9b:	5e                   	pop    esi
c0019f9c:	5f                   	pop    edi
c0019f9d:	c3                   	ret    

c0019f9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f9e:	57                   	push   edi
c0019f9f:	56                   	push   esi
c0019fa0:	53                   	push   ebx
c0019fa1:	51                   	push   ecx
c0019fa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fa6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019fa9:	0f 02 c0             	lar    eax,ax
c0019fac:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019faf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019fb3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019fb6:	88 ca                	mov    dl,cl
c0019fb8:	c0 ea 06             	shr    dl,0x6
c0019fbb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019fbf:	89 ca                	mov    edx,ecx
c0019fc1:	66 c1 ea 03          	shr    dx,0x3
c0019fc5:	83 e2 07             	and    edx,0x7
c0019fc8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019fcd:	88 17                	mov    BYTE PTR [edi],dl
c0019fcf:	0f 84 a6 01 00 00    	je     c001a17b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019fd5:	83 e1 07             	and    ecx,0x7
c0019fd8:	80 f9 04             	cmp    cl,0x4
c0019fdb:	0f 84 98 00 00 00    	je     c001a079 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019fe1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019fe6:	0f 95 c0             	setne  al
c0019fe9:	80 f9 05             	cmp    cl,0x5
c0019fec:	0f 95 c2             	setne  dl
c0019fef:	08 c2                	or     dl,al
c0019ff1:	74 79                	je     c001a06c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ff3:	84 c9                	test   cl,cl
c0019ff5:	75 05                	jne    c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ff7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ffa:	eb 3c                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ffc:	80 f9 01             	cmp    cl,0x1
c0019fff:	75 05                	jne    c001a006 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a001:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a004:	eb 32                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a006:	80 f9 02             	cmp    cl,0x2
c001a009:	75 05                	jne    c001a010 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a00b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a00e:	eb 28                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a010:	31 c0                	xor    eax,eax
c001a012:	80 f9 03             	cmp    cl,0x3
c001a015:	75 05                	jne    c001a01c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a017:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a01a:	eb 1c                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a01c:	80 f9 05             	cmp    cl,0x5
c001a01f:	75 05                	jne    c001a026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a021:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a024:	eb 12                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a026:	80 f9 06             	cmp    cl,0x6
c001a029:	75 05                	jne    c001a030 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a02b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a02e:	eb 08                	jmp    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a030:	80 f9 07             	cmp    cl,0x7
c001a033:	75 03                	jne    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a035:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a038:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a03d:	75 10                	jne    c001a04f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a03f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a043:	b9 03 00 00 00       	mov    ecx,0x3
c001a048:	01 d0                	add    eax,edx
c001a04a:	e9 37 01 00 00       	jmp    c001a186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a04f:	b9 02 00 00 00       	mov    ecx,0x2
c001a054:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a059:	0f 85 27 01 00 00    	jne    c001a186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a05f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a062:	b9 06 00 00 00       	mov    ecx,0x6
c001a067:	e9 1a 01 00 00       	jmp    c001a186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a06c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a06f:	b9 06 00 00 00       	mov    ecx,0x6
c001a074:	e9 0f 01 00 00       	jmp    c001a188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a079:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a07c:	88 ca                	mov    dl,cl
c001a07e:	c0 ea 06             	shr    dl,0x6
c001a081:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a085:	89 ca                	mov    edx,ecx
c001a087:	66 c1 ea 03          	shr    dx,0x3
c001a08b:	83 e2 07             	and    edx,0x7
c001a08e:	80 e1 07             	and    cl,0x7
c001a091:	75 05                	jne    c001a098 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a093:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a096:	eb 4c                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a098:	80 f9 01             	cmp    cl,0x1
c001a09b:	75 05                	jne    c001a0a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a09d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a0a0:	eb 42                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0a2:	80 f9 02             	cmp    cl,0x2
c001a0a5:	75 05                	jne    c001a0ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a0a7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a0aa:	eb 38                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0ac:	80 f9 03             	cmp    cl,0x3
c001a0af:	75 05                	jne    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a0b1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a0b4:	eb 2e                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0b6:	80 f9 04             	cmp    cl,0x4
c001a0b9:	75 12                	jne    c001a0cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a0bb:	f6 c4 60             	test   ah,0x60
c001a0be:	75 08                	jne    c001a0c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a0c0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a0c3:	8d 78 14             	lea    edi,[eax+0x14]
c001a0c6:	eb 1c                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0c8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a0cb:	eb 17                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0cd:	80 f9 05             	cmp    cl,0x5
c001a0d0:	75 05                	jne    c001a0d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a0d2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a0d5:	eb 0d                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0d7:	80 f9 06             	cmp    cl,0x6
c001a0da:	75 05                	jne    c001a0e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a0dc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a0df:	eb 03                	jmp    c001a0e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0e1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0e4:	84 d2                	test   dl,dl
c001a0e6:	75 05                	jne    c001a0ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0e8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0eb:	eb 3c                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ed:	80 fa 01             	cmp    dl,0x1
c001a0f0:	75 05                	jne    c001a0f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0f2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0f5:	eb 32                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0f7:	80 fa 02             	cmp    dl,0x2
c001a0fa:	75 05                	jne    c001a101 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0fc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0ff:	eb 28                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a101:	80 fa 03             	cmp    dl,0x3
c001a104:	75 05                	jne    c001a10b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a106:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a109:	eb 1e                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a10b:	31 c0                	xor    eax,eax
c001a10d:	80 fa 04             	cmp    dl,0x4
c001a110:	74 17                	je     c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a112:	80 fa 05             	cmp    dl,0x5
c001a115:	75 05                	jne    c001a11c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a117:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a11a:	eb 0d                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a11c:	80 fa 06             	cmp    dl,0x6
c001a11f:	75 05                	jne    c001a126 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a121:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a124:	eb 03                	jmp    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a126:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a129:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a12e:	0f 94 c2             	sete   dl
c001a131:	80 f9 05             	cmp    cl,0x5
c001a134:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a138:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a13d:	d3 e0                	shl    eax,cl
c001a13f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a143:	74 0a                	je     c001a14f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a145:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a148:	b9 07 00 00 00       	mov    ecx,0x7
c001a14d:	eb 37                	jmp    c001a186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a14f:	01 f8                	add    eax,edi
c001a151:	b9 03 00 00 00       	mov    ecx,0x3
c001a156:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a15b:	74 2b                	je     c001a188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a15d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a162:	75 0d                	jne    c001a171 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a164:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a168:	01 c8                	add    eax,ecx
c001a16a:	b9 04 00 00 00       	mov    ecx,0x4
c001a16f:	eb 17                	jmp    c001a188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a171:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a174:	b9 07 00 00 00       	mov    ecx,0x7
c001a179:	eb 0d                	jmp    c001a188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a17b:	b9 02 00 00 00       	mov    ecx,0x2
c001a180:	b2 01                	mov    dl,0x1
c001a182:	31 c0                	xor    eax,eax
c001a184:	eb 02                	jmp    c001a188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a186:	31 d2                	xor    edx,edx
c001a188:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a18c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a18e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a192:	88 11                	mov    BYTE PTR [ecx],dl
c001a194:	5a                   	pop    edx
c001a195:	5b                   	pop    ebx
c001a196:	5e                   	pop    esi
c001a197:	5f                   	pop    edi
c001a198:	c3                   	ret    

c001a199 <Krnl::smpEntry()>:
c001a199:	eb fe                	jmp    c001a199 <Krnl::smpEntry()>

c001a19b <Krnl::startCPU(int)>:
c001a19b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001a1a0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a1a7:	0f 84 36 01 00 00    	je     c001a2e3 <Krnl::startCPU(int)+0x148>
c001a1ad:	53                   	push   ebx
c001a1ae:	83 ec 10             	sub    esp,0x10
c001a1b1:	fa                   	cli    
c001a1b2:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001a1b8:	6a 1b                	push   0x1b
c001a1ba:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001a1c0:	e8 6d 4c ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001a1c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1ca:	89 c3                	mov    ebx,eax
c001a1cc:	58                   	pop    eax
c001a1cd:	5a                   	pop    edx
c001a1ce:	53                   	push   ebx
c001a1cf:	68 04 c8 02 c0       	push   0xc002c804
c001a1d4:	e8 5e 8c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a1d9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1e7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1f1:	c1 e0 18             	shl    eax,0x18
c001a1f4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1fa:	83 c4 10             	add    esp,0x10
c001a1fd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a203:	09 c2                	or     edx,eax
c001a205:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a20b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a211:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a217:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a21d:	80 cd c5             	or     ch,0xc5
c001a220:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a226:	f3 90                	pause  
c001a228:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a22a:	0f ba e1 0c          	bt     ecx,0xc
c001a22e:	72 f6                	jb     c001a226 <Krnl::startCPU(int)+0x8b>
c001a230:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a236:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a23c:	09 c1                	or     ecx,eax
c001a23e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a244:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a24a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a250:	80 cd 85             	or     ch,0x85
c001a253:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a259:	f3 90                	pause  
c001a25b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a25d:	0f ba e1 0c          	bt     ecx,0xc
c001a261:	72 f6                	jb     c001a259 <Krnl::startCPU(int)+0xbe>
c001a263:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a26d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a273:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a279:	09 c1                	or     ecx,eax
c001a27b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a281:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a287:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a28d:	81 c9 02 06 00 00    	or     ecx,0x602
c001a293:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a299:	f3 90                	pause  
c001a29b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a29d:	0f ba e1 0c          	bt     ecx,0xc
c001a2a1:	72 f6                	jb     c001a299 <Krnl::startCPU(int)+0xfe>
c001a2a3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2ad:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2b3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2b9:	09 c8                	or     eax,ecx
c001a2bb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a2c1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a2c7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a2cc:	0d 02 06 00 00       	or     eax,0x602
c001a2d1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a2d7:	f3 90                	pause  
c001a2d9:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2db:	0f ba e0 0c          	bt     eax,0xc
c001a2df:	72 f6                	jb     c001a2d7 <Krnl::startCPU(int)+0x13c>
c001a2e1:	eb fe                	jmp    c001a2e1 <Krnl::startCPU(int)+0x146>
c001a2e3:	c3                   	ret    

c001a2e4 <Krnl::startCPUs()>:
c001a2e4:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001a2e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2ef:	88 c2                	mov    dl,al
c001a2f1:	83 e2 0a             	and    edx,0xa
c001a2f4:	80 fa 0a             	cmp    dl,0xa
c001a2f7:	75 09                	jne    c001a302 <Krnl::startCPUs()+0x1e>
c001a2f9:	a8 01                	test   al,0x1
c001a2fb:	74 05                	je     c001a302 <Krnl::startCPUs()+0x1e>
c001a2fd:	e9 99 5e fe ff       	jmp    c000019b <prepareTramp>
c001a302:	c3                   	ret    
c001a303:	90                   	nop

c001a304 <EnvVarContainer::getEnv(char const*)>:
c001a304:	57                   	push   edi
c001a305:	56                   	push   esi
c001a306:	53                   	push   ebx
c001a307:	31 db                	xor    ebx,ebx
c001a309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a30d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a30f:	7e 2b                	jle    c001a33c <EnvVarContainer::getEnv(char const*)+0x38>
c001a311:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a318:	50                   	push   eax
c001a319:	50                   	push   eax
c001a31a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a31d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a320:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a324:	e8 6f 65 fe ff       	call   c0000898 <strcmp>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	85 c0                	test   eax,eax
c001a32e:	75 09                	jne    c001a339 <EnvVarContainer::getEnv(char const*)+0x35>
c001a330:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a333:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a337:	eb 05                	jmp    c001a33e <EnvVarContainer::getEnv(char const*)+0x3a>
c001a339:	43                   	inc    ebx
c001a33a:	eb d1                	jmp    c001a30d <EnvVarContainer::getEnv(char const*)+0x9>
c001a33c:	31 c0                	xor    eax,eax
c001a33e:	5b                   	pop    ebx
c001a33f:	5e                   	pop    esi
c001a340:	5f                   	pop    edi
c001a341:	c3                   	ret    

c001a342 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a342:	55                   	push   ebp
c001a343:	57                   	push   edi
c001a344:	56                   	push   esi
c001a345:	53                   	push   ebx
c001a346:	83 ec 28             	sub    esp,0x28
c001a349:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a34d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a351:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a355:	56                   	push   esi
c001a356:	e8 11 64 fe ff       	call   c000076c <strlen>
c001a35b:	40                   	inc    eax
c001a35c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a35f:	e8 28 55 ff ff       	call   c000f88c <malloc>
c001a364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a367:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a36b:	e8 fc 63 fe ff       	call   c000076c <strlen>
c001a370:	40                   	inc    eax
c001a371:	89 04 24             	mov    DWORD PTR [esp],eax
c001a374:	e8 13 55 ff ff       	call   c000f88c <malloc>
c001a379:	89 34 24             	mov    DWORD PTR [esp],esi
c001a37c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a380:	e8 e7 63 fe ff       	call   c000076c <strlen>
c001a385:	83 c4 0c             	add    esp,0xc
c001a388:	40                   	inc    eax
c001a389:	50                   	push   eax
c001a38a:	6a 00                	push   0x0
c001a38c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a390:	e8 bb 63 fe ff       	call   c0000750 <memset>
c001a395:	89 34 24             	mov    DWORD PTR [esp],esi
c001a398:	e8 cf 63 fe ff       	call   c000076c <strlen>
c001a39d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a3a1:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3a9:	89 de                	mov    esi,ebx
c001a3ab:	e8 bc 63 fe ff       	call   c000076c <strlen>
c001a3b0:	83 c4 0c             	add    esp,0xc
c001a3b3:	40                   	inc    eax
c001a3b4:	50                   	push   eax
c001a3b5:	6a 00                	push   0x0
c001a3b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3bb:	e8 90 63 fe ff       	call   c0000750 <memset>
c001a3c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c3:	e8 a4 63 fe ff       	call   c000076c <strlen>
c001a3c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a3cc:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3d4:	40                   	inc    eax
c001a3d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a3d8:	c1 e0 03             	shl    eax,0x3
c001a3db:	5a                   	pop    edx
c001a3dc:	59                   	pop    ecx
c001a3dd:	50                   	push   eax
c001a3de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3e1:	e8 92 54 ff ff       	call   c000f878 <realloc>
c001a3e6:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a3ea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a3ed:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a3f0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a3f4:	b9 08 00 00 00       	mov    ecx,0x8
c001a3f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3fb:	83 c4 2c             	add    esp,0x2c
c001a3fe:	5b                   	pop    ebx
c001a3ff:	5e                   	pop    esi
c001a400:	5f                   	pop    edi
c001a401:	5d                   	pop    ebp
c001a402:	c3                   	ret    
c001a403:	90                   	nop

c001a404 <EnvVarContainer::deleteEnv(char const*)>:
c001a404:	c3                   	ret    
c001a405:	90                   	nop

c001a406 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a406:	55                   	push   ebp
c001a407:	57                   	push   edi
c001a408:	56                   	push   esi
c001a409:	53                   	push   ebx
c001a40a:	81 ec 38 01 00 00    	sub    esp,0x138
c001a410:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a417:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a41e:	68 14 01 00 00       	push   0x114
c001a423:	e8 64 54 ff ff       	call   c000f88c <malloc>
c001a428:	83 c4 0c             	add    esp,0xc
c001a42b:	89 c5                	mov    ebp,eax
c001a42d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a430:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a437:	50                   	push   eax
c001a438:	e8 59 8f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001a43d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a440:	e8 23 92 ff ff       	call   c0013668 <File::exists()>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	84 c0                	test   al,al
c001a44a:	75 32                	jne    c001a47e <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a44c:	51                   	push   ecx
c001a44d:	51                   	push   ecx
c001a44e:	6a 12                	push   0x12
c001a450:	55                   	push   ebp
c001a451:	e8 a4 8f ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001a456:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a459:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a45c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a45f:	e8 08 63 fe ff       	call   c000076c <strlen>
c001a464:	5a                   	pop    edx
c001a465:	31 d2                	xor    edx,edx
c001a467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a46b:	51                   	push   ecx
c001a46c:	56                   	push   esi
c001a46d:	52                   	push   edx
c001a46e:	50                   	push   eax
c001a46f:	55                   	push   ebp
c001a470:	ff d7                	call   edi
c001a472:	83 c4 14             	add    esp,0x14
c001a475:	55                   	push   ebp
c001a476:	e8 dd 8f ff ff       	call   c0013458 <File::close()>
c001a47b:	83 c4 10             	add    esp,0x10
c001a47e:	31 f6                	xor    esi,esi
c001a480:	50                   	push   eax
c001a481:	68 00 01 00 00       	push   0x100
c001a486:	6a 00                	push   0x0
c001a488:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a48c:	50                   	push   eax
c001a48d:	e8 be 62 fe ff       	call   c0000750 <memset>
c001a492:	58                   	pop    eax
c001a493:	5a                   	pop    edx
c001a494:	6a 01                	push   0x1
c001a496:	55                   	push   ebp
c001a497:	e8 5e 8f ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4a7:	83 ec 0c             	sub    esp,0xc
c001a4aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4ad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a4b1:	51                   	push   ecx
c001a4b2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a4b6:	52                   	push   edx
c001a4b7:	6a 00                	push   0x0
c001a4b9:	6a 01                	push   0x1
c001a4bb:	55                   	push   ebp
c001a4bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4bf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a4c3:	83 c4 20             	add    esp,0x20
c001a4c6:	3c 0d                	cmp    al,0xd
c001a4c8:	0f 84 16 01 00 00    	je     c001a5e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a4ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4d3:	0f 84 fc 00 00 00    	je     c001a5d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a4d9:	3c 0a                	cmp    al,0xa
c001a4db:	74 13                	je     c001a4f0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a4dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4e2:	74 0c                	je     c001a4f0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a4e4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a4ea:	0f 8e e5 00 00 00    	jle    c001a5d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4f4:	83 ec 0c             	sub    esp,0xc
c001a4f7:	8d 78 01             	lea    edi,[eax+0x1]
c001a4fa:	57                   	push   edi
c001a4fb:	e8 8c 53 ff ff       	call   c000f88c <malloc>
c001a500:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a508:	8d 56 04             	lea    edx,[esi+0x4]
c001a50b:	89 14 24             	mov    DWORD PTR [esp],edx
c001a50e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a512:	e8 75 53 ff ff       	call   c000f88c <malloc>
c001a517:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a51b:	83 c4 0c             	add    esp,0xc
c001a51e:	57                   	push   edi
c001a51f:	6a 00                	push   0x0
c001a521:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a525:	e8 26 62 fe ff       	call   c0000750 <memset>
c001a52a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a52e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a532:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a536:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a538:	83 c4 0c             	add    esp,0xc
c001a53b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a53f:	52                   	push   edx
c001a540:	6a 00                	push   0x0
c001a542:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a546:	e8 05 62 fe ff       	call   c0000750 <memset>
c001a54b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a54f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a553:	89 34 24             	mov    DWORD PTR [esp],esi
c001a556:	e8 11 62 fe ff       	call   c000076c <strlen>
c001a55b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a55f:	89 c1                	mov    ecx,eax
c001a561:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a563:	5e                   	pop    esi
c001a564:	5f                   	pop    edi
c001a565:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a569:	68 15 c8 02 c0       	push   0xc002c815
c001a56e:	e8 c4 88 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a573:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a575:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a578:	40                   	inc    eax
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	89 03                	mov    DWORD PTR [ebx],eax
c001a57e:	85 d2                	test   edx,edx
c001a580:	75 0c                	jne    c001a58e <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	6a 08                	push   0x8
c001a587:	e8 00 53 ff ff       	call   c000f88c <malloc>
c001a58c:	eb 0c                	jmp    c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a58e:	c1 e0 03             	shl    eax,0x3
c001a591:	51                   	push   ecx
c001a592:	51                   	push   ecx
c001a593:	50                   	push   eax
c001a594:	52                   	push   edx
c001a595:	e8 de 52 ff ff       	call   c000f878 <realloc>
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a5a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5a2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a5a5:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a5a9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a5ad:	b9 08 00 00 00       	mov    ecx,0x8
c001a5b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5b4:	31 f6                	xor    esi,esi
c001a5b6:	52                   	push   edx
c001a5b7:	68 00 01 00 00       	push   0x100
c001a5bc:	6a 00                	push   0x0
c001a5be:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5c2:	50                   	push   eax
c001a5c3:	e8 88 61 fe ff       	call   c0000750 <memset>
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a5d3:	eb 0f                	jmp    c001a5e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5d5:	3c 3d                	cmp    al,0x3d
c001a5d7:	74 07                	je     c001a5e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a5d9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a5dd:	46                   	inc    esi
c001a5de:	eb 04                	jmp    c001a5e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a5e4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5e9:	0f 85 b8 fe ff ff    	jne    c001a4a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a5ef:	50                   	push   eax
c001a5f0:	50                   	push   eax
c001a5f1:	ff 33                	push   DWORD PTR [ebx]
c001a5f3:	68 23 c8 02 c0       	push   0xc002c823
c001a5f8:	e8 3a 88 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a5fd:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a603:	5b                   	pop    ebx
c001a604:	5e                   	pop    esi
c001a605:	5f                   	pop    edi
c001a606:	5d                   	pop    ebp
c001a607:	c3                   	ret    

c001a608 <EnvVarContainer::__loadSystem()>:
c001a608:	83 ec 10             	sub    esp,0x10
c001a60b:	68 00 e8 02 c0       	push   0xc002e800
c001a610:	68 4e c8 02 c0       	push   0xc002c84e
c001a615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a619:	e8 e8 fd ff ff       	call   c001a406 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a61e:	83 c4 1c             	add    esp,0x1c
c001a621:	c3                   	ret    

c001a622 <EnvVarContainer::__loadUser()>:
c001a622:	c3                   	ret    
c001a623:	90                   	nop

c001a624 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a628:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a62e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a636:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a63d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a644:	90                   	nop
c001a645:	c3                   	ret    

c001a646 <EnvVarContainer::~EnvVarContainer()>:
c001a646:	83 ec 0c             	sub    esp,0xc
c001a649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a64d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a650:	85 c0                	test   eax,eax
c001a652:	74 1d                	je     c001a671 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a658:	8b 00                	mov    eax,DWORD PTR [eax]
c001a65a:	85 c0                	test   eax,eax
c001a65c:	74 13                	je     c001a671 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a662:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a665:	83 ec 0c             	sub    esp,0xc
c001a668:	50                   	push   eax
c001a669:	e8 2e 52 ff ff       	call   c000f89c <free>
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	90                   	nop
c001a672:	83 c4 0c             	add    esp,0xc
c001a675:	c3                   	ret    

c001a676 <Krnl::getEnv(Process*, char const*)>:
c001a676:	53                   	push   ebx
c001a677:	83 ec 08             	sub    esp,0x8
c001a67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a67e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a682:	39 05 30 28 03 c0    	cmp    DWORD PTR ds:0xc0032830,eax
c001a688:	74 04                	je     c001a68e <Krnl::getEnv(Process*, char const*)+0x18>
c001a68a:	85 c0                	test   eax,eax
c001a68c:	75 0b                	jne    c001a699 <Krnl::getEnv(Process*, char const*)+0x23>
c001a68e:	a1 14 1e 03 c0       	mov    eax,ds:0xc0031e14
c001a693:	85 c0                	test   eax,eax
c001a695:	75 19                	jne    c001a6b0 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a697:	eb 27                	jmp    c001a6c0 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a699:	52                   	push   edx
c001a69a:	52                   	push   edx
c001a69b:	53                   	push   ebx
c001a69c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a6a2:	e8 5d fc ff ff       	call   c001a304 <EnvVarContainer::getEnv(char const*)>
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	85 c0                	test   eax,eax
c001a6ac:	75 28                	jne    c001a6d6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6ae:	eb de                	jmp    c001a68e <Krnl::getEnv(Process*, char const*)+0x18>
c001a6b0:	52                   	push   edx
c001a6b1:	52                   	push   edx
c001a6b2:	53                   	push   ebx
c001a6b3:	50                   	push   eax
c001a6b4:	e8 4b fc ff ff       	call   c001a304 <EnvVarContainer::getEnv(char const*)>
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	85 c0                	test   eax,eax
c001a6be:	75 16                	jne    c001a6d6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a6c0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6c4:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a6c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6cd:	83 c4 08             	add    esp,0x8
c001a6d0:	5b                   	pop    ebx
c001a6d1:	e9 2e fc ff ff       	jmp    c001a304 <EnvVarContainer::getEnv(char const*)>
c001a6d6:	83 c4 08             	add    esp,0x8
c001a6d9:	5b                   	pop    ebx
c001a6da:	c3                   	ret    

c001a6db <Krnl::setEnvSystem(char const*, char const*)>:
c001a6db:	83 ec 10             	sub    esp,0x10
c001a6de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e6:	ff 35 18 1e 03 c0    	push   DWORD PTR ds:0xc0031e18
c001a6ec:	e8 51 fc ff ff       	call   c001a342 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6f1:	83 c4 1c             	add    esp,0x1c
c001a6f4:	c3                   	ret    

c001a6f5 <Krnl::setEnvUser(char const*, char const*)>:
c001a6f5:	a1 14 1e 03 c0       	mov    eax,ds:0xc0031e14
c001a6fa:	85 c0                	test   eax,eax
c001a6fc:	74 15                	je     c001a713 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6fe:	83 ec 10             	sub    esp,0x10
c001a701:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a705:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a709:	50                   	push   eax
c001a70a:	e8 33 fc ff ff       	call   c001a342 <EnvVarContainer::setEnv(char const*, char const*)>
c001a70f:	83 c4 1c             	add    esp,0x1c
c001a712:	c3                   	ret    
c001a713:	c3                   	ret    

c001a714 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a718:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a71e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a722:	e9 1b fc ff ff       	jmp    c001a342 <EnvVarContainer::setEnv(char const*, char const*)>

c001a727 <Krnl::deleteEnvSystem(char const*)>:
c001a727:	c3                   	ret    

c001a728 <Krnl::deleteEnvUser(char const*)>:
c001a728:	c3                   	ret    

c001a729 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a729:	c3                   	ret    

c001a72a <Krnl::newProcessEnv(Process*)>:
c001a72a:	83 ec 28             	sub    esp,0x28
c001a72d:	6a 0c                	push   0xc
c001a72f:	e8 58 51 ff ff       	call   c000f88c <malloc>
c001a734:	5a                   	pop    edx
c001a735:	59                   	pop    ecx
c001a736:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a73a:	50                   	push   eax
c001a73b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a73f:	e8 e0 fe ff ff       	call   c001a624 <EnvVarContainer::EnvVarContainer(Process*)>
c001a744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a748:	83 c4 2c             	add    esp,0x2c
c001a74b:	c3                   	ret    

c001a74c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a74c:	57                   	push   edi
c001a74d:	56                   	push   esi
c001a74e:	53                   	push   ebx
c001a74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a753:	83 ec 0c             	sub    esp,0xc
c001a756:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a75c:	6a 0c                	push   0xc
c001a75e:	e8 29 51 ff ff       	call   c000f88c <malloc>
c001a763:	89 c3                	mov    ebx,eax
c001a765:	58                   	pop    eax
c001a766:	5a                   	pop    edx
c001a767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76b:	53                   	push   ebx
c001a76c:	e8 b3 fe ff ff       	call   c001a624 <EnvVarContainer::EnvVarContainer(Process*)>
c001a771:	8b 07                	mov    eax,DWORD PTR [edi]
c001a773:	89 03                	mov    DWORD PTR [ebx],eax
c001a775:	c1 e0 03             	shl    eax,0x3
c001a778:	89 04 24             	mov    DWORD PTR [esp],eax
c001a77b:	e8 0c 51 ff ff       	call   c000f88c <malloc>
c001a780:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a783:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a785:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a788:	c1 e1 03             	shl    ecx,0x3
c001a78b:	89 c7                	mov    edi,eax
c001a78d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a78f:	83 c4 10             	add    esp,0x10
c001a792:	89 d8                	mov    eax,ebx
c001a794:	5b                   	pop    ebx
c001a795:	5e                   	pop    esi
c001a796:	5f                   	pop    edi
c001a797:	c3                   	ret    

c001a798 <Krnl::loadSystemEnv()>:
c001a798:	53                   	push   ebx
c001a799:	83 ec 14             	sub    esp,0x14
c001a79c:	6a 0c                	push   0xc
c001a79e:	e8 e9 50 ff ff       	call   c000f88c <malloc>
c001a7a3:	89 c3                	mov    ebx,eax
c001a7a5:	58                   	pop    eax
c001a7a6:	5a                   	pop    edx
c001a7a7:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001a7ad:	53                   	push   ebx
c001a7ae:	e8 71 fe ff ff       	call   c001a624 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7b6:	89 1d 18 1e 03 c0    	mov    DWORD PTR ds:0xc0031e18,ebx
c001a7bc:	e8 47 fe ff ff       	call   c001a608 <EnvVarContainer::__loadSystem()>
c001a7c1:	83 c4 18             	add    esp,0x18
c001a7c4:	5b                   	pop    ebx
c001a7c5:	c3                   	ret    

c001a7c6 <Krnl::loadUserEnv()>:
c001a7c6:	53                   	push   ebx
c001a7c7:	83 ec 14             	sub    esp,0x14
c001a7ca:	6a 0c                	push   0xc
c001a7cc:	e8 bb 50 ff ff       	call   c000f88c <malloc>
c001a7d1:	89 c3                	mov    ebx,eax
c001a7d3:	58                   	pop    eax
c001a7d4:	5a                   	pop    edx
c001a7d5:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001a7db:	53                   	push   ebx
c001a7dc:	e8 43 fe ff ff       	call   c001a624 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7e1:	89 1d 14 1e 03 c0    	mov    DWORD PTR ds:0xc0031e14,ebx
c001a7e7:	83 c4 18             	add    esp,0x18
c001a7ea:	5b                   	pop    ebx
c001a7eb:	c3                   	ret    

c001a7ec <Krnl::flushEnv()>:
c001a7ec:	c3                   	ret    

c001a7ed <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7f1:	8b 15 14 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031e14
c001a7f7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7fd:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a802:	8b 00                	mov    eax,DWORD PTR [eax]
c001a804:	03 01                	add    eax,DWORD PTR [ecx]
c001a806:	85 d2                	test   edx,edx
c001a808:	74 02                	je     c001a80c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a80a:	03 02                	add    eax,DWORD PTR [edx]
c001a80c:	c3                   	ret    

c001a80d <Krnl::getProcessEnvPair(Process*, int)>:
c001a80d:	57                   	push   edi
c001a80e:	8b 0d 14 1e 03 c0    	mov    ecx,DWORD PTR ds:0xc0031e14
c001a814:	56                   	push   esi
c001a815:	85 c9                	test   ecx,ecx
c001a817:	53                   	push   ebx
c001a818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a81c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a820:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a826:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a82a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a82c:	75 47                	jne    c001a875 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a82e:	39 c3                	cmp    ebx,eax
c001a830:	7c 47                	jl     c001a879 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a832:	8b 15 18 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031e18
c001a838:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a83a:	01 c1                	add    ecx,eax
c001a83c:	39 d9                	cmp    ecx,ebx
c001a83e:	7e 6c                	jle    c001a8ac <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a840:	51                   	push   ecx
c001a841:	89 d9                	mov    ecx,ebx
c001a843:	29 c1                	sub    ecx,eax
c001a845:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a848:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a84c:	53                   	push   ebx
c001a84d:	68 70 c8 02 c0       	push   0xc002c870
c001a852:	e8 e0 85 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a857:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a85d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a85f:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a864:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a867:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a86b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a86e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a871:	89 06                	mov    DWORD PTR [esi],eax
c001a873:	eb 51                	jmp    c001a8c6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a875:	39 c3                	cmp    ebx,eax
c001a877:	7d 05                	jge    c001a87e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a879:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a87c:	eb 20                	jmp    c001a89e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a87e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a880:	8d 14 07             	lea    edx,[edi+eax*1]
c001a883:	39 da                	cmp    edx,ebx
c001a885:	7e 04                	jle    c001a88b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a887:	29 c3                	sub    ebx,eax
c001a889:	eb 10                	jmp    c001a89b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a88b:	8b 0d 18 1e 03 c0    	mov    ecx,DWORD PTR ds:0xc0031e18
c001a891:	03 11                	add    edx,DWORD PTR [ecx]
c001a893:	39 da                	cmp    edx,ebx
c001a895:	7e 15                	jle    c001a8ac <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a897:	29 c3                	sub    ebx,eax
c001a899:	29 fb                	sub    ebx,edi
c001a89b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a89e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a8a2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a8a5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8a8:	89 06                	mov    DWORD PTR [esi],eax
c001a8aa:	eb 1d                	jmp    c001a8c9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	68 84 c8 02 c0       	push   0xc002c884
c001a8b4:	e8 18 00 00 00       	call   c001a8d1 <Krnl::panic(char const*)>
c001a8b9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a8bf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a8c6:	83 c4 10             	add    esp,0x10
c001a8c9:	89 f0                	mov    eax,esi
c001a8cb:	5b                   	pop    ebx
c001a8cc:	5e                   	pop    esi
c001a8cd:	5f                   	pop    edi
c001a8ce:	c2 04 00             	ret    0x4

c001a8d1 <Krnl::panic(char const*)>:
c001a8d1:	55                   	push   ebp
c001a8d2:	89 e5                	mov    ebp,esp
c001a8d4:	53                   	push   ebx
c001a8d5:	83 ec 0c             	sub    esp,0xc
c001a8d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a8db:	fa                   	cli    
c001a8dc:	c6 05 24 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e24,0x1
c001a8e3:	53                   	push   ebx
c001a8e4:	c6 05 04 e2 02 c0 00 	mov    BYTE PTR ds:0xc002e204,0x0
c001a8eb:	68 9e c8 02 c0       	push   0xc002c89e
c001a8f0:	e8 42 85 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001a8f5:	58                   	pop    eax
c001a8f6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a8fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a901:	e8 54 63 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001a906:	83 c4 0c             	add    esp,0xc
c001a909:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a90e:	6a 01                	push   0x1
c001a910:	6a 0f                	push   0xf
c001a912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a918:	e8 db 5d ff ff       	call   c00106f8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a91d:	58                   	pop    eax
c001a91e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a923:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a929:	e8 72 65 ff ff       	call   c0010ea0 <VgaText::clearScreen()>
c001a92e:	58                   	pop    eax
c001a92f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a934:	5a                   	pop    edx
c001a935:	68 b7 c8 02 c0       	push   0xc002c8b7
c001a93a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a940:	e8 a1 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a945:	59                   	pop    ecx
c001a946:	58                   	pop    eax
c001a947:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a94c:	68 5c c9 02 c0       	push   0xc002c95c
c001a951:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a957:	e8 8a 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a95c:	58                   	pop    eax
c001a95d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a962:	5a                   	pop    edx
c001a963:	68 d3 c8 02 c0       	push   0xc002c8d3
c001a968:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96e:	e8 73 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a973:	59                   	pop    ecx
c001a974:	58                   	pop    eax
c001a975:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a97a:	53                   	push   ebx
c001a97b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a981:	e8 60 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a986:	58                   	pop    eax
c001a987:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a98c:	5a                   	pop    edx
c001a98d:	68 f3 c8 02 c0       	push   0xc002c8f3
c001a992:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a998:	e8 49 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a99d:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	85 c0                	test   eax,eax
c001a9a7:	74 02                	je     c001a9ab <Krnl::panic(char const*)+0xda>
c001a9a9:	ff d0                	call   eax
c001a9ab:	83 ec 0c             	sub    esp,0xc
c001a9ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9b1:	e8 9e 32 00 00       	call   c001dc54 <Thr::getDriverNameFromAddress(unsigned long)>
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	89 c3                	mov    ebx,eax
c001a9bb:	85 c0                	test   eax,eax
c001a9bd:	0f 84 50 02 00 00    	je     c001ac13 <Krnl::panic(char const*)+0x342>
c001a9c3:	83 ec 08             	sub    esp,0x8
c001a9c6:	8b 15 30 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032830
c001a9cc:	68 98 c9 02 c0       	push   0xc002c998
c001a9d1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9d7:	e8 0a 66 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a9dc:	58                   	pop    eax
c001a9dd:	5a                   	pop    edx
c001a9de:	8b 15 30 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032830
c001a9e4:	68 d3 c8 02 c0       	push   0xc002c8d3
c001a9e9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9ef:	e8 f2 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001a9f4:	59                   	pop    ecx
c001a9f5:	58                   	pop    eax
c001a9f6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a9fb:	53                   	push   ebx
c001a9fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa02:	e8 df 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa07:	83 c4 10             	add    esp,0x10
c001aa0a:	83 ec 08             	sub    esp,0x8
c001aa0d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa12:	68 f2 c8 02 c0       	push   0xc002c8f2
c001aa17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1d:	e8 c4 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa22:	58                   	pop    eax
c001aa23:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa28:	5a                   	pop    edx
c001aa29:	68 f0 c9 02 c0       	push   0xc002c9f0
c001aa2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa34:	e8 ad 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa39:	59                   	pop    ecx
c001aa3a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa3f:	5b                   	pop    ebx
c001aa40:	68 30 ca 02 c0       	push   0xc002ca30
c001aa45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa4b:	e8 96 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa50:	58                   	pop    eax
c001aa51:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa56:	5a                   	pop    edx
c001aa57:	68 de c8 02 c0       	push   0xc002c8de
c001aa5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa62:	e8 7f 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aa67:	59                   	pop    ecx
c001aa68:	5b                   	pop    ebx
c001aa69:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa6c:	68 f6 c8 02 c0       	push   0xc002c8f6
c001aa71:	e8 c1 83 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001aa76:	58                   	pop    eax
c001aa77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa7a:	5a                   	pop    edx
c001aa7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa7e:	68 ff c8 02 c0       	push   0xc002c8ff
c001aa83:	e8 af 83 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001aa88:	59                   	pop    ecx
c001aa89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa8c:	5b                   	pop    ebx
c001aa8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa8f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa92:	68 08 c9 02 c0       	push   0xc002c908
c001aa97:	e8 9b 83 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001aa9c:	58                   	pop    eax
c001aa9d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aaa2:	5a                   	pop    edx
c001aaa3:	68 74 ca 02 c0       	push   0xc002ca74
c001aaa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaae:	e8 33 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aab3:	59                   	pop    ecx
c001aab4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aab9:	5b                   	pop    ebx
c001aaba:	68 11 c9 02 c0       	push   0xc002c911
c001aabf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aac5:	e8 1c 65 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aaca:	0f 20 c0             	mov    eax,cr0
c001aacd:	5a                   	pop    edx
c001aace:	59                   	pop    ecx
c001aacf:	50                   	push   eax
c001aad0:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aad5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aadb:	e8 2c 65 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001aae0:	5b                   	pop    ebx
c001aae1:	58                   	pop    eax
c001aae2:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aae7:	68 1b c9 02 c0       	push   0xc002c91b
c001aaec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf2:	e8 ef 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001aaf7:	0f 20 d0             	mov    eax,cr2
c001aafa:	5a                   	pop    edx
c001aafb:	59                   	pop    ecx
c001aafc:	50                   	push   eax
c001aafd:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab08:	e8 ff 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ab0d:	5b                   	pop    ebx
c001ab0e:	58                   	pop    eax
c001ab0f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab14:	68 25 c9 02 c0       	push   0xc002c925
c001ab19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab1f:	e8 c2 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab24:	0f 20 d8             	mov    eax,cr3
c001ab27:	5a                   	pop    edx
c001ab28:	59                   	pop    ecx
c001ab29:	50                   	push   eax
c001ab2a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab35:	e8 d2 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ab3a:	5b                   	pop    ebx
c001ab3b:	58                   	pop    eax
c001ab3c:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab41:	68 38 c9 02 c0       	push   0xc002c938
c001ab46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab4c:	e8 95 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab51:	0f 20 e0             	mov    eax,cr4
c001ab54:	5a                   	pop    edx
c001ab55:	59                   	pop    ecx
c001ab56:	50                   	push   eax
c001ab57:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab62:	e8 a5 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ab67:	5b                   	pop    ebx
c001ab68:	58                   	pop    eax
c001ab69:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab6e:	68 42 c9 02 c0       	push   0xc002c942
c001ab73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab79:	e8 68 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ab7e:	5a                   	pop    edx
c001ab7f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab84:	59                   	pop    ecx
c001ab85:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab8b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab8e:	50                   	push   eax
c001ab8f:	e8 78 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001ab94:	5b                   	pop    ebx
c001ab95:	58                   	pop    eax
c001ab96:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab9b:	68 59 c9 02 c0       	push   0xc002c959
c001aba0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aba6:	e8 3b 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abab:	5a                   	pop    edx
c001abac:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abb1:	59                   	pop    ecx
c001abb2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abb8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abbb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abbe:	50                   	push   eax
c001abbf:	e8 48 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001abc4:	5b                   	pop    ebx
c001abc5:	58                   	pop    eax
c001abc6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abcb:	68 59 c9 02 c0       	push   0xc002c959
c001abd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abd6:	e8 0b 64 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001abdb:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abe0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abe3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abe9:	8b 12                	mov    edx,DWORD PTR [edx]
c001abeb:	59                   	pop    ecx
c001abec:	5b                   	pop    ebx
c001abed:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abf0:	50                   	push   eax
c001abf1:	e8 16 64 ff ff       	call   c001100c <VgaText::putx(unsigned int)>
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	b2 fe                	mov    dl,0xfe
c001abfb:	e4 60                	in     al,0x60
c001abfd:	3c 1c                	cmp    al,0x1c
c001abff:	74 04                	je     c001ac05 <Krnl::panic(char const*)+0x334>
c001ac01:	3c 5a                	cmp    al,0x5a
c001ac03:	75 f6                	jne    c001abfb <Krnl::panic(char const*)+0x32a>
c001ac05:	e4 64                	in     al,0x64
c001ac07:	a8 02                	test   al,0x2
c001ac09:	75 fa                	jne    c001ac05 <Krnl::panic(char const*)+0x334>
c001ac0b:	88 d0                	mov    al,dl
c001ac0d:	e6 64                	out    0x64,al
c001ac0f:	fa                   	cli    
c001ac10:	f4                   	hlt    
c001ac11:	eb e8                	jmp    c001abfb <Krnl::panic(char const*)+0x32a>
c001ac13:	50                   	push   eax
c001ac14:	50                   	push   eax
c001ac15:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac1a:	68 c4 c9 02 c0       	push   0xc002c9c4
c001ac1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac25:	e8 bc 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac2a:	58                   	pop    eax
c001ac2b:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac30:	5a                   	pop    edx
c001ac31:	68 d3 c8 02 c0       	push   0xc002c8d3
c001ac36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac3c:	e8 a5 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac41:	59                   	pop    ecx
c001ac42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac47:	5b                   	pop    ebx
c001ac48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac4b:	83 c0 0c             	add    eax,0xc
c001ac4e:	50                   	push   eax
c001ac4f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac5a:	e8 87 63 ff ff       	call   c0010fe6 <VgaText::puts(char const*)>
c001ac5f:	83 c4 10             	add    esp,0x10
c001ac62:	e9 a3 fd ff ff       	jmp    c001aa0a <Krnl::panic(char const*)+0x139>

c001ac67 <Net::switchEndian16(unsigned short)>:
c001ac67:	83 ec 04             	sub    esp,0x4
c001ac6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac6e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac72:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac76:	c1 f8 08             	sar    eax,0x8
c001ac79:	89 c2                	mov    edx,eax
c001ac7b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac7f:	c1 e0 08             	shl    eax,0x8
c001ac82:	09 d0                	or     eax,edx
c001ac84:	83 c4 04             	add    esp,0x4
c001ac87:	c3                   	ret    

c001ac88 <Net::switchEndian32(unsigned int)>:
c001ac88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac8c:	c1 e8 18             	shr    eax,0x18
c001ac8f:	89 c2                	mov    edx,eax
c001ac91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac95:	c1 e0 08             	shl    eax,0x8
c001ac98:	25 00 00 ff 00       	and    eax,0xff0000
c001ac9d:	09 c2                	or     edx,eax
c001ac9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aca3:	c1 e8 08             	shr    eax,0x8
c001aca6:	25 00 ff 00 00       	and    eax,0xff00
c001acab:	09 c2                	or     edx,eax
c001acad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb1:	c1 e0 18             	shl    eax,0x18
c001acb4:	09 d0                	or     eax,edx
c001acb6:	c3                   	ret    

c001acb7 <Net::crc32Calc(unsigned char*, int)>:
c001acb7:	83 ec 10             	sub    esp,0x10
c001acba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001acbf:	75 07                	jne    c001acc8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001acc1:	b8 00 00 00 00       	mov    eax,0x0
c001acc6:	eb 7c                	jmp    c001ad44 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acc8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001accd:	7f 07                	jg     c001acd6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001accf:	b8 00 00 00 00       	mov    eax,0x0
c001acd4:	eb 6e                	jmp    c001ad44 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acd6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001acde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ace6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acea:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acee:	7d 4e                	jge    c001ad3e <Net::crc32Calc(unsigned char*, int)+0x87>
c001acf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf8:	01 d0                	add    eax,edx
c001acfa:	8a 00                	mov    al,BYTE PTR [eax]
c001acfc:	0f b6 c0             	movzx  eax,al
c001acff:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ad03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad0b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ad10:	7f 26                	jg     c001ad38 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ad12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad16:	83 e0 01             	and    eax,0x1
c001ad19:	74 0d                	je     c001ad28 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ad1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad1f:	d1 e8                	shr    eax,1
c001ad21:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad26:	eb 06                	jmp    c001ad2e <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad2c:	d1 e8                	shr    eax,1
c001ad2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad32:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad36:	eb d3                	jmp    c001ad0b <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad38:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad3c:	eb a8                	jmp    c001ace6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad42:	f7 d0                	not    eax
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	c3                   	ret    

c001ad48 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad48:	57                   	push   edi
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	83 ec 60             	sub    esp,0x60
c001ad4e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad59:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ad61:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad66:	7f 1a                	jg     c001ad82 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ad68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ad72:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad79:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad7c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ad80:	eb df                	jmp    c001ad61 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ad82:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad89:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad93:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad96:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ada1:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ada5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ada9:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001adb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001adc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adc5:	89 c6                	mov    esi,eax
c001adc7:	89 d7                	mov    edi,edx
c001adc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adcb:	89 c8                	mov    eax,ecx
c001adcd:	89 fa                	mov    edx,edi
c001adcf:	89 f3                	mov    ebx,esi
c001add1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001add5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001add9:	89 04 24             	mov    DWORD PTR [esp],eax
c001addc:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ade4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adeb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001adef:	8d 44 24 78          	lea    eax,[esp+0x78]
c001adf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001adf7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001adff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae0b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ae13:	89 c6                	mov    esi,eax
c001ae15:	89 d7                	mov    edi,edx
c001ae17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae19:	89 c8                	mov    eax,ecx
c001ae1b:	89 fa                	mov    edx,edi
c001ae1d:	89 f3                	mov    ebx,esi
c001ae1f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ae23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae2b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae3a:	0f b7 c0             	movzx  eax,ax
c001ae3d:	c1 f8 08             	sar    eax,0x8
c001ae40:	89 c1                	mov    ecx,eax
c001ae42:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae49:	8d 50 01             	lea    edx,[eax+0x1]
c001ae4c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae53:	88 ca                	mov    dl,cl
c001ae55:	88 10                	mov    BYTE PTR [eax],dl
c001ae57:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ae5e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae65:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae68:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ae6f:	88 10                	mov    BYTE PTR [eax],dl
c001ae71:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae75:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ae79:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ae80:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001ae84:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001ae88:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ae8c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae90:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ae94:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae98:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ae9c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aea0:	89 c6                	mov    esi,eax
c001aea2:	89 d7                	mov    edi,edx
c001aea4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aea6:	89 c8                	mov    eax,ecx
c001aea8:	89 fa                	mov    edx,edi
c001aeaa:	89 f3                	mov    ebx,esi
c001aeac:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aeb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aeb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aeb8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aebc:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001aec3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aeca:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aece:	50                   	push   eax
c001aecf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aed3:	e8 df fd ff ff       	call   c001acb7 <Net::crc32Calc(unsigned char*, int)>
c001aed8:	83 c4 08             	add    esp,0x8
c001aedb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aedf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aee3:	c1 e8 18             	shr    eax,0x18
c001aee6:	89 c1                	mov    ecx,eax
c001aee8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aeef:	8d 50 01             	lea    edx,[eax+0x1]
c001aef2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aef9:	88 ca                	mov    dl,cl
c001aefb:	88 10                	mov    BYTE PTR [eax],dl
c001aefd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af01:	c1 e8 10             	shr    eax,0x10
c001af04:	89 c1                	mov    ecx,eax
c001af06:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af0d:	8d 50 01             	lea    edx,[eax+0x1]
c001af10:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af17:	88 ca                	mov    dl,cl
c001af19:	88 10                	mov    BYTE PTR [eax],dl
c001af1b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af1f:	c1 e8 08             	shr    eax,0x8
c001af22:	89 c1                	mov    ecx,eax
c001af24:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af2b:	8d 50 01             	lea    edx,[eax+0x1]
c001af2e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af35:	88 ca                	mov    dl,cl
c001af37:	88 10                	mov    BYTE PTR [eax],dl
c001af39:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af40:	8d 50 01             	lea    edx,[eax+0x1]
c001af43:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af4a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af4e:	88 10                	mov    BYTE PTR [eax],dl
c001af50:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af54:	83 c4 60             	add    esp,0x60
c001af57:	5b                   	pop    ebx
c001af58:	5e                   	pop    esi
c001af59:	5f                   	pop    edi
c001af5a:	c3                   	ret    

c001af5b <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001af5b:	57                   	push   edi
c001af5c:	56                   	push   esi
c001af5d:	53                   	push   ebx
c001af5e:	83 ec 70             	sub    esp,0x70
c001af61:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af68:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af6c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af74:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af7b:	83 c0 0e             	add    eax,0xe
c001af7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001af82:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001af8d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001af95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001af9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afa1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afa5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001afa9:	89 c6                	mov    esi,eax
c001afab:	89 d7                	mov    edi,edx
c001afad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afaf:	89 c8                	mov    eax,ecx
c001afb1:	89 fa                	mov    edx,edi
c001afb3:	89 f3                	mov    ebx,esi
c001afb5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001afb9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001afbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afc1:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001afc9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afd0:	83 c0 08             	add    eax,0x8
c001afd3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001afd7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001afe2:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001afea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001afee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aff2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aff6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001affa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001affe:	89 c6                	mov    esi,eax
c001b000:	89 d7                	mov    edi,edx
c001b002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b004:	89 c8                	mov    eax,ecx
c001b006:	89 fa                	mov    edx,edi
c001b008:	89 f3                	mov    ebx,esi
c001b00a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b00e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b012:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b016:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b01e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b025:	8d 50 01             	lea    edx,[eax+0x1]
c001b028:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b02f:	8a 00                	mov    al,BYTE PTR [eax]
c001b031:	0f b6 c0             	movzx  eax,al
c001b034:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b039:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b040:	8d 50 01             	lea    edx,[eax+0x1]
c001b043:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b04a:	8a 00                	mov    al,BYTE PTR [eax]
c001b04c:	0f b6 c0             	movzx  eax,al
c001b04f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b054:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b059:	c1 e0 08             	shl    eax,0x8
c001b05c:	89 c2                	mov    edx,eax
c001b05e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b062:	09 d0                	or     eax,edx
c001b064:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b06b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b06f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b077:	75 46                	jne    c001b0bf <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b079:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b080:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b083:	66 3d dc 05          	cmp    ax,0x5dc
c001b087:	77 16                	ja     c001b09f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b089:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b090:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b093:	0f b7 c0             	movzx  eax,ax
c001b096:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b09d:	eb 20                	jmp    c001b0bf <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b09f:	83 ec 0c             	sub    esp,0xc
c001b0a2:	68 9c ca 02 c0       	push   0xc002ca9c
c001b0a7:	e8 8b 7d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0b6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b0ba:	e9 17 01 00 00       	jmp    c001b1d6 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b0bf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0c6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b0cd:	8b 12                	mov    edx,DWORD PTR [edx]
c001b0cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0d3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b0da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b0de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0f6:	89 c6                	mov    esi,eax
c001b0f8:	89 d7                	mov    edi,edx
c001b0fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0fc:	89 c8                	mov    eax,ecx
c001b0fe:	89 fa                	mov    edx,edi
c001b100:	89 f3                	mov    ebx,esi
c001b102:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b106:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b10a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b10d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b114:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b11b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b122:	8d 50 01             	lea    edx,[eax+0x1]
c001b125:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b12c:	8a 00                	mov    al,BYTE PTR [eax]
c001b12e:	0f b6 c0             	movzx  eax,al
c001b131:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b135:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b13c:	8d 50 01             	lea    edx,[eax+0x1]
c001b13f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b146:	8a 00                	mov    al,BYTE PTR [eax]
c001b148:	0f b6 c0             	movzx  eax,al
c001b14b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b14f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b156:	8d 50 01             	lea    edx,[eax+0x1]
c001b159:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b160:	8a 00                	mov    al,BYTE PTR [eax]
c001b162:	0f b6 c0             	movzx  eax,al
c001b165:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b169:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b170:	8d 50 01             	lea    edx,[eax+0x1]
c001b173:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b17a:	8a 00                	mov    al,BYTE PTR [eax]
c001b17c:	0f b6 c0             	movzx  eax,al
c001b17f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b183:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b187:	c1 e0 18             	shl    eax,0x18
c001b18a:	89 c2                	mov    edx,eax
c001b18c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b190:	c1 e0 10             	shl    eax,0x10
c001b193:	09 c2                	or     edx,eax
c001b195:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b199:	c1 e0 08             	shl    eax,0x8
c001b19c:	09 d0                	or     eax,edx
c001b19e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b1a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b1a6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1ad:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b1b1:	83 e8 04             	sub    eax,0x4
c001b1b4:	83 ec 08             	sub    esp,0x8
c001b1b7:	50                   	push   eax
c001b1b8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b1bc:	e8 f6 fa ff ff       	call   c001acb7 <Net::crc32Calc(unsigned char*, int)>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b1c8:	0f 94 c2             	sete   dl
c001b1cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b1d2:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b1d5:	90                   	nop
c001b1d6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b1dd:	83 c4 70             	add    esp,0x70
c001b1e0:	5b                   	pop    ebx
c001b1e1:	5e                   	pop    esi
c001b1e2:	5f                   	pop    edi
c001b1e3:	c2 04 00             	ret    0x4

c001b1e6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b1e6:	55                   	push   ebp
c001b1e7:	57                   	push   edi
c001b1e8:	56                   	push   esi
c001b1e9:	53                   	push   ebx
c001b1ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b1f0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b1f7:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b1f9:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b1fc:	80 fb 40             	cmp    bl,0x40
c001b1ff:	75 1b                	jne    c001b21c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b201:	8a 16                	mov    dl,BYTE PTR [esi]
c001b203:	84 d2                	test   dl,dl
c001b205:	0f 84 f1 00 00 00    	je     c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b20b:	8d 46 01             	lea    eax,[esi+0x1]
c001b20e:	80 fa 3a             	cmp    dl,0x3a
c001b211:	74 04                	je     c001b217 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b213:	89 c6                	mov    esi,eax
c001b215:	eb ea                	jmp    c001b201 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b217:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b21a:	89 c6                	mov    esi,eax
c001b21c:	50                   	push   eax
c001b21d:	6a 40                	push   0x40
c001b21f:	6a 00                	push   0x0
c001b221:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b225:	50                   	push   eax
c001b226:	e8 25 55 fe ff       	call   c0000750 <memset>
c001b22b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b232:	31 c0                	xor    eax,eax
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b239:	84 c9                	test   cl,cl
c001b23b:	0f 84 bb 00 00 00    	je     c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b241:	3d c7 00 00 00       	cmp    eax,0xc7
c001b246:	0f 8f b0 00 00 00    	jg     c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b24c:	80 f9 0a             	cmp    cl,0xa
c001b24f:	0f 85 98 00 00 00    	jne    c001b2ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b255:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b25a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b25e:	a8 df                	test   al,0xdf
c001b260:	0f 94 c1             	sete   cl
c001b263:	3c 23                	cmp    al,0x23
c001b265:	0f 94 c2             	sete   dl
c001b268:	08 d1                	or     cl,dl
c001b26a:	75 4a                	jne    c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b26c:	8d 50 f7             	lea    edx,[eax-0x9]
c001b26f:	80 fa 01             	cmp    dl,0x1
c001b272:	76 42                	jbe    c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b274:	3c 5b                	cmp    al,0x5b
c001b276:	75 42                	jne    c001b2ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b278:	80 fb 40             	cmp    bl,0x40
c001b27b:	75 39                	jne    c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b27d:	83 ec 0c             	sub    esp,0xc
c001b280:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b284:	52                   	push   edx
c001b285:	e8 e2 54 fe ff       	call   c000076c <strlen>
c001b28a:	83 c4 10             	add    esp,0x10
c001b28d:	83 f8 3f             	cmp    eax,0x3f
c001b290:	77 6a                	ja     c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b292:	50                   	push   eax
c001b293:	50                   	push   eax
c001b294:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b298:	52                   	push   edx
c001b299:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b29d:	52                   	push   edx
c001b29e:	e8 69 55 fe ff       	call   c000080c <strcpy>
c001b2a3:	58                   	pop    eax
c001b2a4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2a8:	52                   	push   edx
c001b2a9:	e8 be 54 fe ff       	call   c000076c <strlen>
c001b2ae:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b2b3:	83 c4 10             	add    esp,0x10
c001b2b6:	31 d2                	xor    edx,edx
c001b2b8:	eb 3a                	jmp    c001b2f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b2ba:	80 fb 40             	cmp    bl,0x40
c001b2bd:	74 06                	je     c001b2c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b2bf:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b2c3:	eb 20                	jmp    c001b2e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b2c5:	50                   	push   eax
c001b2c6:	50                   	push   eax
c001b2c7:	55                   	push   ebp
c001b2c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2cc:	50                   	push   eax
c001b2cd:	e8 c6 55 fe ff       	call   c0000898 <strcmp>
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	85 c0                	test   eax,eax
c001b2d7:	75 dd                	jne    c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2d9:	eb e4                	jmp    c001b2bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b2db:	8d 50 01             	lea    edx,[eax+0x1]
c001b2de:	80 f9 3d             	cmp    cl,0x3d
c001b2e1:	74 1d                	je     c001b300 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b2e3:	89 d0                	mov    eax,edx
c001b2e5:	8a 08                	mov    cl,BYTE PTR [eax]
c001b2e7:	84 c9                	test   cl,cl
c001b2e9:	75 f0                	jne    c001b2db <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b2eb:	eb 0f                	jmp    c001b2fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2ed:	8d 50 01             	lea    edx,[eax+0x1]
c001b2f0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b2f4:	47                   	inc    edi
c001b2f5:	89 d0                	mov    eax,edx
c001b2f7:	e9 3b ff ff ff       	jmp    c001b237 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b2fc:	31 c0                	xor    eax,eax
c001b2fe:	eb 33                	jmp    c001b333 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b300:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b304:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b307:	50                   	push   eax
c001b308:	50                   	push   eax
c001b309:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b30d:	50                   	push   eax
c001b30e:	56                   	push   esi
c001b30f:	e8 84 55 fe ff       	call   c0000898 <strcmp>
c001b314:	83 c4 10             	add    esp,0x10
c001b317:	85 c0                	test   eax,eax
c001b319:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b31d:	75 97                	jne    c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b31f:	51                   	push   ecx
c001b320:	51                   	push   ecx
c001b321:	52                   	push   edx
c001b322:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b329:	e8 de 54 fe ff       	call   c000080c <strcpy>
c001b32e:	83 c4 10             	add    esp,0x10
c001b331:	b0 01                	mov    al,0x1
c001b333:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b339:	5b                   	pop    ebx
c001b33a:	5e                   	pop    esi
c001b33b:	5f                   	pop    edi
c001b33c:	5d                   	pop    ebp
c001b33d:	c3                   	ret    

c001b33e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b33e:	57                   	push   edi
c001b33f:	56                   	push   esi
c001b340:	53                   	push   ebx
c001b341:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b347:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b34e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b355:	53                   	push   ebx
c001b356:	e8 11 54 fe ff       	call   c000076c <strlen>
c001b35b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b35e:	89 c7                	mov    edi,eax
c001b360:	e8 07 54 fe ff       	call   c000076c <strlen>
c001b365:	83 c4 10             	add    esp,0x10
c001b368:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b36c:	3d ff 00 00 00       	cmp    eax,0xff
c001b371:	0f 87 d3 00 00 00    	ja     c001b44a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b377:	57                   	push   edi
c001b378:	57                   	push   edi
c001b379:	56                   	push   esi
c001b37a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b37e:	56                   	push   esi
c001b37f:	e8 88 54 fe ff       	call   c000080c <strcpy>
c001b384:	58                   	pop    eax
c001b385:	5a                   	pop    edx
c001b386:	68 f1 cf 02 c0       	push   0xc002cff1
c001b38b:	56                   	push   esi
c001b38c:	e8 bb 55 fe ff       	call   c000094c <strcat>
c001b391:	59                   	pop    ecx
c001b392:	5f                   	pop    edi
c001b393:	53                   	push   ebx
c001b394:	56                   	push   esi
c001b395:	e8 b2 55 fe ff       	call   c000094c <strcat>
c001b39a:	58                   	pop    eax
c001b39b:	5a                   	pop    edx
c001b39c:	68 e8 ca 02 c0       	push   0xc002cae8
c001b3a1:	56                   	push   esi
c001b3a2:	e8 a5 55 fe ff       	call   c000094c <strcat>
c001b3a7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3ae:	e8 d9 44 ff ff       	call   c000f88c <malloc>
c001b3b3:	83 c4 0c             	add    esp,0xc
c001b3b6:	89 c3                	mov    ebx,eax
c001b3b8:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001b3be:	56                   	push   esi
c001b3bf:	50                   	push   eax
c001b3c0:	e8 d1 7f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	85 db                	test   ebx,ebx
c001b3ca:	74 7e                	je     c001b44a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b3cc:	51                   	push   ecx
c001b3cd:	51                   	push   ecx
c001b3ce:	6a 01                	push   0x1
c001b3d0:	53                   	push   ebx
c001b3d1:	e8 24 80 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	85 c0                	test   eax,eax
c001b3db:	74 08                	je     c001b3e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b3dd:	83 ec 0c             	sub    esp,0xc
c001b3e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e2:	53                   	push   ebx
c001b3e3:	eb 5f                	jmp    c001b444 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b3e5:	52                   	push   edx
c001b3e6:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b3ea:	50                   	push   eax
c001b3eb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3ef:	50                   	push   eax
c001b3f0:	53                   	push   ebx
c001b3f1:	e8 b0 82 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001b3f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	89 c1                	mov    ecx,eax
c001b3ff:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b403:	74 31                	je     c001b436 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	50                   	push   eax
c001b409:	e8 7e 44 ff ff       	call   c000f88c <malloc>
c001b40e:	89 c6                	mov    esi,eax
c001b410:	58                   	pop    eax
c001b411:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b413:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b417:	52                   	push   edx
c001b418:	56                   	push   esi
c001b419:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b41d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b421:	53                   	push   ebx
c001b422:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b425:	83 c4 20             	add    esp,0x20
c001b428:	85 c0                	test   eax,eax
c001b42a:	75 0a                	jne    c001b436 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b430:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b434:	74 18                	je     c001b44e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b436:	83 ec 0c             	sub    esp,0xc
c001b439:	53                   	push   ebx
c001b43a:	e8 19 80 ff ff       	call   c0013458 <File::close()>
c001b43f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b441:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b444:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	31 c0                	xor    eax,eax
c001b44c:	eb 3b                	jmp    c001b489 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	53                   	push   ebx
c001b452:	e8 01 80 ff ff       	call   c0013458 <File::close()>
c001b457:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b459:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b45c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b45f:	83 c4 0c             	add    esp,0xc
c001b462:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b469:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b470:	56                   	push   esi
c001b471:	e8 70 fd ff ff       	call   c001b1e6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b476:	89 34 24             	mov    DWORD PTR [esp],esi
c001b479:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b47d:	e8 1a 44 ff ff       	call   c000f89c <free>
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b489:	81 c4 20 01 00 00    	add    esp,0x120
c001b48f:	5b                   	pop    ebx
c001b490:	5e                   	pop    esi
c001b491:	5f                   	pop    edi
c001b492:	c3                   	ret    

c001b493 <Reg::getLine(char*, char*, char*)>:
c001b493:	57                   	push   edi
c001b494:	56                   	push   esi
c001b495:	53                   	push   ebx
c001b496:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b49a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b49e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4a2:	57                   	push   edi
c001b4a3:	56                   	push   esi
c001b4a4:	53                   	push   ebx
c001b4a5:	68 ed ca 02 c0       	push   0xc002caed
c001b4aa:	e8 8f fe ff ff       	call   c001b33e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	84 c0                	test   al,al
c001b4b4:	75 10                	jne    c001b4c6 <Reg::getLine(char*, char*, char*)+0x33>
c001b4b6:	57                   	push   edi
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	68 12 cb 02 c0       	push   0xc002cb12
c001b4be:	e8 7b fe ff ff       	call   c001b33e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4c3:	83 c4 10             	add    esp,0x10
c001b4c6:	5b                   	pop    ebx
c001b4c7:	5e                   	pop    esi
c001b4c8:	5f                   	pop    edi
c001b4c9:	c3                   	ret    

c001b4ca <Reg::readInt(char*, char*, int*)>:
c001b4ca:	55                   	push   ebp
c001b4cb:	57                   	push   edi
c001b4cc:	56                   	push   esi
c001b4cd:	53                   	push   ebx
c001b4ce:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b4d4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b4d8:	57                   	push   edi
c001b4d9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b4e0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b4e7:	e8 a7 ff ff ff       	call   c001b493 <Reg::getLine(char*, char*, char*)>
c001b4ec:	83 c4 10             	add    esp,0x10
c001b4ef:	84 c0                	test   al,al
c001b4f1:	0f 84 b3 00 00 00    	je     c001b5aa <Reg::readInt(char*, char*, int*)+0xe0>
c001b4f7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b4fb:	80 fa 2b             	cmp    dl,0x2b
c001b4fe:	74 0c                	je     c001b50c <Reg::readInt(char*, char*, int*)+0x42>
c001b500:	80 fa 2d             	cmp    dl,0x2d
c001b503:	75 0e                	jne    c001b513 <Reg::readInt(char*, char*, int*)+0x49>
c001b505:	ba 01 00 00 00       	mov    edx,0x1
c001b50a:	eb 0b                	jmp    c001b517 <Reg::readInt(char*, char*, int*)+0x4d>
c001b50c:	ba 01 00 00 00       	mov    edx,0x1
c001b511:	eb 02                	jmp    c001b515 <Reg::readInt(char*, char*, int*)+0x4b>
c001b513:	31 d2                	xor    edx,edx
c001b515:	31 c0                	xor    eax,eax
c001b517:	be 0a 00 00 00       	mov    esi,0xa
c001b51c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b521:	75 20                	jne    c001b543 <Reg::readInt(char*, char*, int*)+0x79>
c001b523:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b527:	80 f9 78             	cmp    cl,0x78
c001b52a:	75 0a                	jne    c001b536 <Reg::readInt(char*, char*, int*)+0x6c>
c001b52c:	83 c2 02             	add    edx,0x2
c001b52f:	be 10 00 00 00       	mov    esi,0x10
c001b534:	eb 0d                	jmp    c001b543 <Reg::readInt(char*, char*, int*)+0x79>
c001b536:	80 f9 62             	cmp    cl,0x62
c001b539:	75 08                	jne    c001b543 <Reg::readInt(char*, char*, int*)+0x79>
c001b53b:	83 c2 02             	add    edx,0x2
c001b53e:	be 02 00 00 00       	mov    esi,0x2
c001b543:	01 d7                	add    edi,edx
c001b545:	31 d2                	xor    edx,edx
c001b547:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b549:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b54d:	80 fb 0d             	cmp    bl,0xd
c001b550:	0f 94 c3             	sete   bl
c001b553:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b558:	0f 94 c1             	sete   cl
c001b55b:	08 cb                	or     bl,cl
c001b55d:	75 3a                	jne    c001b599 <Reg::readInt(char*, char*, int*)+0xcf>
c001b55f:	0f af d6             	imul   edx,esi
c001b562:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b567:	83 fe 10             	cmp    esi,0x10
c001b56a:	75 26                	jne    c001b592 <Reg::readInt(char*, char*, int*)+0xc8>
c001b56c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b570:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b573:	89 e9                	mov    ecx,ebp
c001b575:	80 f9 05             	cmp    cl,0x5
c001b578:	77 06                	ja     c001b580 <Reg::readInt(char*, char*, int*)+0xb6>
c001b57a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b57e:	eb 16                	jmp    c001b596 <Reg::readInt(char*, char*, int*)+0xcc>
c001b580:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b584:	83 e9 61             	sub    ecx,0x61
c001b587:	80 f9 05             	cmp    cl,0x5
c001b58a:	77 06                	ja     c001b592 <Reg::readInt(char*, char*, int*)+0xc8>
c001b58c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b590:	eb 04                	jmp    c001b596 <Reg::readInt(char*, char*, int*)+0xcc>
c001b592:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b596:	47                   	inc    edi
c001b597:	eb ae                	jmp    c001b547 <Reg::readInt(char*, char*, int*)+0x7d>
c001b599:	84 c0                	test   al,al
c001b59b:	74 02                	je     c001b59f <Reg::readInt(char*, char*, int*)+0xd5>
c001b59d:	f7 da                	neg    edx
c001b59f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b5a6:	89 10                	mov    DWORD PTR [eax],edx
c001b5a8:	88 d8                	mov    al,bl
c001b5aa:	81 c4 ec 00 00 00    	add    esp,0xec
c001b5b0:	5b                   	pop    ebx
c001b5b1:	5e                   	pop    esi
c001b5b2:	5f                   	pop    edi
c001b5b3:	5d                   	pop    ebp
c001b5b4:	c3                   	ret    

c001b5b5 <Reg::readString(char*, char*, char*, int)>:
c001b5b5:	57                   	push   edi
c001b5b6:	56                   	push   esi
c001b5b7:	53                   	push   ebx
c001b5b8:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b5be:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b5c5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b5c9:	57                   	push   edi
c001b5ca:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b5d1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b5d8:	e8 b6 fe ff ff       	call   c001b493 <Reg::getLine(char*, char*, char*)>
c001b5dd:	83 c4 10             	add    esp,0x10
c001b5e0:	89 c6                	mov    esi,eax
c001b5e2:	84 c0                	test   al,al
c001b5e4:	74 44                	je     c001b62a <Reg::readString(char*, char*, char*, int)+0x75>
c001b5e6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b5ed:	31 c0                	xor    eax,eax
c001b5ef:	4a                   	dec    edx
c001b5f0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b5f3:	84 c9                	test   cl,cl
c001b5f5:	74 0f                	je     c001b606 <Reg::readString(char*, char*, char*, int)+0x51>
c001b5f7:	39 c2                	cmp    edx,eax
c001b5f9:	7e 0b                	jle    c001b606 <Reg::readString(char*, char*, char*, int)+0x51>
c001b5fb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b5fe:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b603:	40                   	inc    eax
c001b604:	eb ea                	jmp    c001b5f0 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b606:	83 ec 0c             	sub    esp,0xc
c001b609:	53                   	push   ebx
c001b60a:	e8 5d 51 fe ff       	call   c000076c <strlen>
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b617:	75 11                	jne    c001b62a <Reg::readString(char*, char*, char*, int)+0x75>
c001b619:	83 ec 0c             	sub    esp,0xc
c001b61c:	53                   	push   ebx
c001b61d:	e8 4a 51 fe ff       	call   c000076c <strlen>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b62a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b630:	89 f0                	mov    eax,esi
c001b632:	5b                   	pop    ebx
c001b633:	5e                   	pop    esi
c001b634:	5f                   	pop    edi
c001b635:	c3                   	ret    

c001b636 <Reg::readBool(char*, char*, bool*)>:
c001b636:	83 ec 20             	sub    esp,0x20
c001b639:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b63d:	50                   	push   eax
c001b63e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b642:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b646:	e8 7f fe ff ff       	call   c001b4ca <Reg::readInt(char*, char*, int*)>
c001b64b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b650:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b654:	0f 95 02             	setne  BYTE PTR [edx]
c001b657:	83 c4 2c             	add    esp,0x2c
c001b65a:	c3                   	ret    

c001b65b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b65b:	53                   	push   ebx
c001b65c:	83 ec 1c             	sub    esp,0x1c
c001b65f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b663:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b667:	50                   	push   eax
c001b668:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b670:	e8 c1 ff ff ff       	call   c001b636 <Reg::readBool(char*, char*, bool*)>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	84 c0                	test   al,al
c001b67a:	74 04                	je     c001b680 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b67c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b680:	88 d8                	mov    al,bl
c001b682:	83 c4 18             	add    esp,0x18
c001b685:	5b                   	pop    ebx
c001b686:	c3                   	ret    

c001b687 <Reg::readIntWithDefault(char*, char*, int)>:
c001b687:	53                   	push   ebx
c001b688:	83 ec 1c             	sub    esp,0x1c
c001b68b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b68f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b693:	50                   	push   eax
c001b694:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b698:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b69c:	e8 29 fe ff ff       	call   c001b4ca <Reg::readInt(char*, char*, int*)>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	84 c0                	test   al,al
c001b6a6:	74 04                	je     c001b6ac <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b6a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6ac:	89 d8                	mov    eax,ebx
c001b6ae:	83 c4 18             	add    esp,0x18
c001b6b1:	5b                   	pop    ebx
c001b6b2:	c3                   	ret    

c001b6b3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b6b3:	57                   	push   edi
c001b6b4:	56                   	push   esi
c001b6b5:	56                   	push   esi
c001b6b6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b6ba:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b6be:	56                   	push   esi
c001b6bf:	57                   	push   edi
c001b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c8:	e8 e8 fe ff ff       	call   c001b5b5 <Reg::readString(char*, char*, char*, int)>
c001b6cd:	83 c4 10             	add    esp,0x10
c001b6d0:	84 c0                	test   al,al
c001b6d2:	75 1a                	jne    c001b6ee <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b6d4:	51                   	push   ecx
c001b6d5:	56                   	push   esi
c001b6d6:	6a 00                	push   0x0
c001b6d8:	57                   	push   edi
c001b6d9:	e8 72 50 fe ff       	call   c0000750 <memset>
c001b6de:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b6e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6ee:	89 f8                	mov    eax,edi
c001b6f0:	5a                   	pop    edx
c001b6f1:	5e                   	pop    esi
c001b6f2:	5f                   	pop    edi
c001b6f3:	c3                   	ret    

c001b6f4 <Sys::eject(regs*)>:
c001b6f4:	83 ec 0c             	sub    esp,0xc
c001b6f7:	83 ca ff             	or     edx,0xffffffff
c001b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6fe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b701:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b706:	83 e9 41             	sub    ecx,0x41
c001b709:	83 f9 19             	cmp    ecx,0x19
c001b70c:	77 18                	ja     c001b726 <Sys::eject(regs*)+0x32>
c001b70e:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c001b715:	85 c9                	test   ecx,ecx
c001b717:	74 0d                	je     c001b726 <Sys::eject(regs*)+0x32>
c001b719:	83 ec 0c             	sub    esp,0xc
c001b71c:	51                   	push   ecx
c001b71d:	e8 22 b0 ff ff       	call   c0016744 <LogicalDisk::eject()>
c001b722:	83 c4 10             	add    esp,0x10
c001b725:	99                   	cdq    
c001b726:	83 c4 0c             	add    esp,0xc
c001b729:	c3                   	ret    

c001b72a <Sys::exit(regs*)>:
c001b72a:	83 ec 18             	sub    esp,0x18
c001b72d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b731:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b734:	e8 7e 38 00 00       	call   c001efb7 <terminateTask(int)>
c001b739:	83 c8 ff             	or     eax,0xffffffff
c001b73c:	83 c4 1c             	add    esp,0x1c
c001b73f:	89 c2                	mov    edx,eax
c001b741:	c3                   	ret    

c001b742 <Sys::getCwd(regs*)>:
c001b742:	83 ec 10             	sub    esp,0x10
c001b745:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b749:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b74c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b754:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b757:	e8 3c 7a ff ff       	call   c0013198 <Fs::getcwd(Process*, char*, int)>
c001b75c:	83 c4 1c             	add    esp,0x1c
c001b75f:	99                   	cdq    
c001b760:	c3                   	ret    

c001b761 <Sys::getPID(regs*)>:
c001b761:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b766:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b769:	8b 00                	mov    eax,DWORD PTR [eax]
c001b76b:	99                   	cdq    
c001b76c:	c3                   	ret    

c001b76d <Sys::getRAMData(regs*)>:
c001b76d:	8b 0d 14 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f314
c001b773:	6b 05 10 f3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f310,0x64
c001b77a:	99                   	cdq    
c001b77b:	f7 f9                	idiv   ecx
c001b77d:	c1 e0 18             	shl    eax,0x18
c001b780:	09 c8                	or     eax,ecx
c001b782:	99                   	cdq    
c001b783:	c3                   	ret    

c001b784 <Sys::getVGAPtr(regs*)>:
c001b784:	55                   	push   ebp
c001b785:	57                   	push   edi
c001b786:	56                   	push   esi
c001b787:	53                   	push   ebx
c001b788:	83 ec 18             	sub    esp,0x18
c001b78b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b78f:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b792:	e8 02 33 00 00       	call   c001ea99 <Thr::processFromPID(int)>
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	89 c1                	mov    ecx,eax
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	85 c9                	test   ecx,ecx
c001b7a3:	74 59                	je     c001b7fe <Sys::getVGAPtr(regs*)+0x7a>
c001b7a5:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b7ab:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b7af:	74 0c                	je     c001b7bd <Sys::getVGAPtr(regs*)+0x39>
c001b7b1:	83 ec 0c             	sub    esp,0xc
c001b7b4:	53                   	push   ebx
c001b7b5:	e8 a0 54 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b7c0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b7c3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b7c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b7cd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7d0:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7d6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b7dc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7df:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b7e2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b7e8:	50                   	push   eax
c001b7e9:	50                   	push   eax
c001b7ea:	53                   	push   ebx
c001b7eb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7ee:	05 a8 0f 00 00       	add    eax,0xfa8
c001b7f3:	50                   	push   eax
c001b7f4:	e8 13 50 fe ff       	call   c000080c <strcpy>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	31 c0                	xor    eax,eax
c001b7fe:	83 c4 0c             	add    esp,0xc
c001b801:	31 d2                	xor    edx,edx
c001b803:	5b                   	pop    ebx
c001b804:	5e                   	pop    esi
c001b805:	5f                   	pop    edi
c001b806:	5d                   	pop    ebp
c001b807:	c3                   	ret    

c001b808 <Sys::loadDLL(regs*)>:
c001b808:	56                   	push   esi
c001b809:	53                   	push   ebx
c001b80a:	31 d2                	xor    edx,edx
c001b80c:	51                   	push   ecx
c001b80d:	b8 01 00 00 00       	mov    eax,0x1
c001b812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b816:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b81a:	0f 84 8c 00 00 00    	je     c001b8ac <Sys::loadDLL(regs*)+0xa4>
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	68 14 01 00 00       	push   0x114
c001b828:	e8 5f 40 ff ff       	call   c000f88c <malloc>
c001b82d:	83 c4 0c             	add    esp,0xc
c001b830:	89 c3                	mov    ebx,eax
c001b832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b837:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b83a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b83d:	53                   	push   ebx
c001b83e:	e8 53 7b ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001b843:	83 c4 10             	add    esp,0x10
c001b846:	31 d2                	xor    edx,edx
c001b848:	b8 02 00 00 00       	mov    eax,0x2
c001b84d:	85 db                	test   ebx,ebx
c001b84f:	74 5b                	je     c001b8ac <Sys::loadDLL(regs*)+0xa4>
c001b851:	83 ec 0c             	sub    esp,0xc
c001b854:	53                   	push   ebx
c001b855:	e8 0e 7e ff ff       	call   c0013668 <File::exists()>
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	84 c0                	test   al,al
c001b85f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b861:	75 11                	jne    c001b874 <Sys::loadDLL(regs*)+0x6c>
c001b863:	83 ec 0c             	sub    esp,0xc
c001b866:	53                   	push   ebx
c001b867:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b86a:	83 c4 10             	add    esp,0x10
c001b86d:	b8 03 00 00 00       	mov    eax,0x3
c001b872:	eb 36                	jmp    c001b8aa <Sys::loadDLL(regs*)+0xa2>
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	53                   	push   ebx
c001b878:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b87b:	58                   	pop    eax
c001b87c:	5a                   	pop    edx
c001b87d:	6a 00                	push   0x0
c001b87f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b882:	e8 1e 24 00 00       	call   c001dca5 <Thr::loadDLL(char const*, bool)>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	89 c1                	mov    ecx,eax
c001b88c:	31 d2                	xor    edx,edx
c001b88e:	b8 04 00 00 00       	mov    eax,0x4
c001b893:	85 c9                	test   ecx,ecx
c001b895:	74 15                	je     c001b8ac <Sys::loadDLL(regs*)+0xa4>
c001b897:	53                   	push   ebx
c001b898:	53                   	push   ebx
c001b899:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001b89f:	51                   	push   ecx
c001b8a0:	e8 2b 26 00 00       	call   c001ded0 <Thr::executeDLL(unsigned long, void*)>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	31 c0                	xor    eax,eax
c001b8aa:	31 d2                	xor    edx,edx
c001b8ac:	59                   	pop    ecx
c001b8ad:	5b                   	pop    ebx
c001b8ae:	5e                   	pop    esi
c001b8af:	c3                   	ret    

c001b8b0 <Sys::read(regs*)>:
c001b8b0:	57                   	push   edi
c001b8b1:	56                   	push   esi
c001b8b2:	53                   	push   ebx
c001b8b3:	83 ec 10             	sub    esp,0x10
c001b8b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8bd:	83 f8 02             	cmp    eax,0x2
c001b8c0:	77 10                	ja     c001b8d2 <Sys::read(regs*)+0x22>
c001b8c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ca:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b8d0:	eb 0e                	jmp    c001b8e0 <Sys::read(regs*)+0x30>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	50                   	push   eax
c001b8d6:	e8 00 60 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	89 c1                	mov    ecx,eax
c001b8e0:	83 c8 ff             	or     eax,0xffffffff
c001b8e3:	85 c9                	test   ecx,ecx
c001b8e5:	89 c2                	mov    edx,eax
c001b8e7:	74 28                	je     c001b911 <Sys::read(regs*)+0x61>
c001b8e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8f1:	31 ff                	xor    edi,edi
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b8f8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b8fc:	52                   	push   edx
c001b8fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b900:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b903:	57                   	push   edi
c001b904:	56                   	push   esi
c001b905:	51                   	push   ecx
c001b906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b909:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b90d:	83 c4 20             	add    esp,0x20
c001b910:	99                   	cdq    
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	5b                   	pop    ebx
c001b915:	5e                   	pop    esi
c001b916:	5f                   	pop    edi
c001b917:	c3                   	ret    

c001b918 <Sys::sbrk(regs*)>:
c001b918:	56                   	push   esi
c001b919:	53                   	push   ebx
c001b91a:	50                   	push   eax
c001b91b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b920:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b924:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b927:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b92a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b930:	85 db                	test   ebx,ebx
c001b932:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b935:	74 02                	je     c001b939 <Sys::sbrk(regs*)+0x21>
c001b937:	79 06                	jns    c001b93f <Sys::sbrk(regs*)+0x27>
c001b939:	89 f0                	mov    eax,esi
c001b93b:	31 d2                	xor    edx,edx
c001b93d:	eb 2a                	jmp    c001b969 <Sys::sbrk(regs*)+0x51>
c001b93f:	83 c8 ff             	or     eax,0xffffffff
c001b942:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b948:	89 c2                	mov    edx,eax
c001b94a:	77 1d                	ja     c001b969 <Sys::sbrk(regs*)+0x51>
c001b94c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b952:	50                   	push   eax
c001b953:	c1 ea 0c             	shr    edx,0xc
c001b956:	68 07 0c 00 00       	push   0xc07
c001b95b:	52                   	push   edx
c001b95c:	51                   	push   ecx
c001b95d:	e8 08 6a ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001b962:	89 f0                	mov    eax,esi
c001b964:	31 d2                	xor    edx,edx
c001b966:	83 c4 10             	add    esp,0x10
c001b969:	59                   	pop    ecx
c001b96a:	5b                   	pop    ebx
c001b96b:	5e                   	pop    esi
c001b96c:	c3                   	ret    

c001b96d <Sys::setCwd(regs*)>:
c001b96d:	83 ec 14             	sub    esp,0x14
c001b970:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b974:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b97f:	e8 83 7d ff ff       	call   c0013707 <Fs::setcwd(Process*, char*)>
c001b984:	83 c4 1c             	add    esp,0x1c
c001b987:	99                   	cdq    
c001b988:	c3                   	ret    

c001b989 <Sys::setTime(regs*)>:
c001b989:	55                   	push   ebp
c001b98a:	31 d2                	xor    edx,edx
c001b98c:	57                   	push   edi
c001b98d:	bf 18 00 00 00       	mov    edi,0x18
c001b992:	56                   	push   esi
c001b993:	53                   	push   ebx
c001b994:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b999:	83 ec 30             	sub    esp,0x30
c001b99c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b9a0:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b9a3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9a6:	f7 f3                	div    ebx
c001b9a8:	89 d6                	mov    esi,edx
c001b9aa:	31 d2                	xor    edx,edx
c001b9ac:	f7 f3                	div    ebx
c001b9ae:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9b5:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b9ba:	31 d2                	xor    edx,edx
c001b9bc:	f7 f3                	div    ebx
c001b9be:	31 d2                	xor    edx,edx
c001b9c0:	bb 0c 00 00 00       	mov    ebx,0xc
c001b9c5:	f7 f7                	div    edi
c001b9c7:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b9ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9ce:	0f b7 cd             	movzx  ecx,bp
c001b9d1:	56                   	push   esi
c001b9d2:	89 c7                	mov    edi,eax
c001b9d4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b9d8:	c1 e6 10             	shl    esi,0x10
c001b9db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9df:	83 e7 1f             	and    edi,0x1f
c001b9e2:	51                   	push   ecx
c001b9e3:	47                   	inc    edi
c001b9e4:	c1 e8 05             	shr    eax,0x5
c001b9e7:	31 d2                	xor    edx,edx
c001b9e9:	f7 f3                	div    ebx
c001b9eb:	31 db                	xor    ebx,ebx
c001b9ed:	52                   	push   edx
c001b9ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b9f2:	57                   	push   edi
c001b9f3:	68 2d cb 02 c0       	push   0xc002cb2d
c001b9f8:	e8 3a 74 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001b9fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba01:	89 f8                	mov    eax,edi
c001ba03:	31 c9                	xor    ecx,ecx
c001ba05:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba09:	88 c1                	mov    cl,al
c001ba0b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ba11:	88 d5                	mov    ch,dl
c001ba13:	c1 e0 10             	shl    eax,0x10
c001ba16:	0f b7 d1             	movzx  edx,cx
c001ba19:	09 c2                	or     edx,eax
c001ba1b:	89 d8                	mov    eax,ebx
c001ba1d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ba22:	09 f0                	or     eax,esi
c001ba24:	89 c3                	mov    ebx,eax
c001ba26:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ba2a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ba2e:	83 c4 18             	add    esp,0x18
c001ba31:	53                   	push   ebx
c001ba32:	52                   	push   edx
c001ba33:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba37:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba3b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba3f:	e8 e5 83 ff ff       	call   c0013e29 <datetimeToSeconds(datetime_t)>
c001ba44:	83 c4 0c             	add    esp,0xc
c001ba47:	52                   	push   edx
c001ba48:	50                   	push   eax
c001ba49:	56                   	push   esi
c001ba4a:	e8 61 85 ff ff       	call   c0013fb0 <secondsToDatetime(unsigned long long)>
c001ba4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba57:	51                   	push   ecx
c001ba58:	89 d6                	mov    esi,edx
c001ba5a:	51                   	push   ecx
c001ba5b:	c1 ee 10             	shr    esi,0x10
c001ba5e:	89 f3                	mov    ebx,esi
c001ba60:	0f b6 f3             	movzx  esi,bl
c001ba63:	56                   	push   esi
c001ba64:	0f b6 f6             	movzx  esi,dh
c001ba67:	0f b6 d2             	movzx  edx,dl
c001ba6a:	56                   	push   esi
c001ba6b:	52                   	push   edx
c001ba6c:	89 c2                	mov    edx,eax
c001ba6e:	c1 ea 10             	shr    edx,0x10
c001ba71:	52                   	push   edx
c001ba72:	0f b6 d4             	movzx  edx,ah
c001ba75:	0f b6 c0             	movzx  eax,al
c001ba78:	52                   	push   edx
c001ba79:	50                   	push   eax
c001ba7a:	68 49 cb 02 c0       	push   0xc002cb49
c001ba7f:	e8 b3 73 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ba84:	83 c4 2c             	add    esp,0x2c
c001ba87:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001ba8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ba90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ba94:	53                   	push   ebx
c001ba95:	51                   	push   ecx
c001ba96:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ba9c:	e8 af 84 ff ff       	call   c0013f50 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001baa1:	83 f0 01             	xor    eax,0x1
c001baa4:	31 d2                	xor    edx,edx
c001baa6:	0f b6 c0             	movzx  eax,al
c001baa9:	83 c4 3c             	add    esp,0x3c
c001baac:	5b                   	pop    ebx
c001baad:	5e                   	pop    esi
c001baae:	5f                   	pop    edi
c001baaf:	5d                   	pop    ebp
c001bab0:	c3                   	ret    

c001bab1 <Sys::timezone(regs*)>:
c001bab1:	53                   	push   ebx
c001bab2:	83 ec 08             	sub    esp,0x8
c001bab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bab9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001babd:	75 17                	jne    c001bad6 <Sys::timezone(regs*)+0x25>
c001babf:	83 ec 0c             	sub    esp,0xc
c001bac2:	68 65 cb 02 c0       	push   0xc002cb65
c001bac7:	e8 6b 73 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bacc:	83 c8 ff             	or     eax,0xffffffff
c001bacf:	83 c4 10             	add    esp,0x10
c001bad2:	89 c2                	mov    edx,eax
c001bad4:	eb 20                	jmp    c001baf6 <Sys::timezone(regs*)+0x45>
c001bad6:	83 ec 0c             	sub    esp,0xc
c001bad9:	68 9d cb 02 c0       	push   0xc002cb9d
c001bade:	e8 54 73 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bae3:	58                   	pop    eax
c001bae4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bae7:	e8 c6 81 ff ff       	call   c0013cb2 <User::loadClockSettings(int)>
c001baec:	83 c4 10             	add    esp,0x10
c001baef:	b8 01 00 00 00       	mov    eax,0x1
c001baf4:	31 d2                	xor    edx,edx
c001baf6:	83 c4 08             	add    esp,0x8
c001baf9:	5b                   	pop    ebx
c001bafa:	c3                   	ret    

c001bafb <Sys::write(regs*)>:
c001bafb:	57                   	push   edi
c001bafc:	56                   	push   esi
c001bafd:	53                   	push   ebx
c001bafe:	83 ec 10             	sub    esp,0x10
c001bb01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb08:	83 f8 02             	cmp    eax,0x2
c001bb0b:	77 10                	ja     c001bb1d <Sys::write(regs*)+0x22>
c001bb0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb15:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bb1b:	eb 0e                	jmp    c001bb2b <Sys::write(regs*)+0x30>
c001bb1d:	83 ec 0c             	sub    esp,0xc
c001bb20:	50                   	push   eax
c001bb21:	e8 b5 5d ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	89 c1                	mov    ecx,eax
c001bb2b:	83 c8 ff             	or     eax,0xffffffff
c001bb2e:	85 c9                	test   ecx,ecx
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	74 28                	je     c001bb5c <Sys::write(regs*)+0x61>
c001bb34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb3c:	31 ff                	xor    edi,edi
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bb43:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bb47:	52                   	push   edx
c001bb48:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb4b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bb4e:	57                   	push   edi
c001bb4f:	56                   	push   esi
c001bb50:	51                   	push   ecx
c001bb51:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bb54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb58:	83 c4 20             	add    esp,0x20
c001bb5b:	99                   	cdq    
c001bb5c:	83 c4 10             	add    esp,0x10
c001bb5f:	5b                   	pop    ebx
c001bb60:	5e                   	pop    esi
c001bb61:	5f                   	pop    edi
c001bb62:	c3                   	ret    

c001bb63 <Sys::wsbe(regs*)>:
c001bb63:	57                   	push   edi
c001bb64:	b9 0b 00 00 00       	mov    ecx,0xb
c001bb69:	56                   	push   esi
c001bb6a:	be dc cb 02 c0       	mov    esi,0xc002cbdc
c001bb6f:	53                   	push   ebx
c001bb70:	83 ec 30             	sub    esp,0x30
c001bb73:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bb77:	fc                   	cld    
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb7d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bb81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb89:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bb8f:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb91:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bb94:	57                   	push   edi
c001bb95:	e8 d2 4b fe ff       	call   c000076c <strlen>
c001bb9a:	5a                   	pop    edx
c001bb9b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bb9f:	52                   	push   edx
c001bba0:	31 d2                	xor    edx,edx
c001bba2:	57                   	push   edi
c001bba3:	52                   	push   edx
c001bba4:	50                   	push   eax
c001bba5:	56                   	push   esi
c001bba6:	ff d3                	call   ebx
c001bba8:	83 c4 14             	add    esp,0x14
c001bbab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bbaf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbb2:	e8 00 34 00 00       	call   c001efb7 <terminateTask(int)>
c001bbb7:	83 c4 40             	add    esp,0x40
c001bbba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bbbf:	5b                   	pop    ebx
c001bbc0:	31 d2                	xor    edx,edx
c001bbc2:	5e                   	pop    esi
c001bbc3:	5f                   	pop    edi
c001bbc4:	c3                   	ret    

c001bbc5 <Sys::yield(regs*)>:
c001bbc5:	57                   	push   edi
c001bbc6:	56                   	push   esi
c001bbc7:	53                   	push   ebx
c001bbc8:	fa                   	cli    
c001bbc9:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001bbcf:	e8 b0 2a 00 00       	call   c001e684 <schedule()>
c001bbd4:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001bbd9:	48                   	dec    eax
c001bbda:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001bbdf:	75 01                	jne    c001bbe2 <Sys::yield(regs*)+0x1d>
c001bbe1:	fb                   	sti    
c001bbe2:	8b 35 50 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f950
c001bbe8:	8b 3d 54 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f954
c001bbee:	89 f0                	mov    eax,esi
c001bbf0:	89 fb                	mov    ebx,edi
c001bbf2:	89 f1                	mov    ecx,esi
c001bbf4:	c1 e0 07             	shl    eax,0x7
c001bbf7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bbfb:	25 80 30 0f 00       	and    eax,0xf3080
c001bc00:	c1 eb 17             	shr    ebx,0x17
c001bc03:	31 c8                	xor    eax,ecx
c001bc05:	89 da                	mov    edx,ebx
c001bc07:	5b                   	pop    ebx
c001bc08:	5e                   	pop    esi
c001bc09:	5f                   	pop    edi
c001bc0a:	c3                   	ret    

c001bc0b <sysCallSeekDir(regs*)>:
c001bc0b:	31 c0                	xor    eax,eax
c001bc0d:	31 d2                	xor    edx,edx
c001bc0f:	c3                   	ret    

c001bc10 <sysCallTellDir(regs*)>:
c001bc10:	31 c0                	xor    eax,eax
c001bc12:	31 d2                	xor    edx,edx
c001bc14:	c3                   	ret    

c001bc15 <sysCallVerify(regs*)>:
c001bc15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc19:	31 d2                	xor    edx,edx
c001bc1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc1e:	c3                   	ret    

c001bc1f <sysFormatDisk(regs*)>:
c001bc1f:	56                   	push   esi
c001bc20:	53                   	push   ebx
c001bc21:	53                   	push   ebx
c001bc22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc26:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c001bc2c:	eb 25                	jmp    c001bc53 <sysFormatDisk(regs*)+0x34>
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc34:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc36:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bc39:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc3c:	50                   	push   eax
c001bc3d:	ff 34 85 e0 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0720]
c001bc44:	53                   	push   ebx
c001bc45:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bc48:	83 c4 20             	add    esp,0x20
c001bc4b:	83 f8 08             	cmp    eax,0x8
c001bc4e:	75 12                	jne    c001bc62 <sysFormatDisk(regs*)+0x43>
c001bc50:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bc53:	85 db                	test   ebx,ebx
c001bc55:	75 d7                	jne    c001bc2e <sysFormatDisk(regs*)+0xf>
c001bc57:	59                   	pop    ecx
c001bc58:	b8 03 00 00 00       	mov    eax,0x3
c001bc5d:	31 d2                	xor    edx,edx
c001bc5f:	5b                   	pop    ebx
c001bc60:	5e                   	pop    esi
c001bc61:	c3                   	ret    
c001bc62:	85 c0                	test   eax,eax
c001bc64:	74 1b                	je     c001bc81 <sysFormatDisk(regs*)+0x62>
c001bc66:	83 f8 09             	cmp    eax,0x9
c001bc69:	74 0b                	je     c001bc76 <sysFormatDisk(regs*)+0x57>
c001bc6b:	59                   	pop    ecx
c001bc6c:	b8 02 00 00 00       	mov    eax,0x2
c001bc71:	31 d2                	xor    edx,edx
c001bc73:	5b                   	pop    ebx
c001bc74:	5e                   	pop    esi
c001bc75:	c3                   	ret    
c001bc76:	59                   	pop    ecx
c001bc77:	b8 01 00 00 00       	mov    eax,0x1
c001bc7c:	31 d2                	xor    edx,edx
c001bc7e:	5b                   	pop    ebx
c001bc7f:	5e                   	pop    esi
c001bc80:	c3                   	ret    
c001bc81:	59                   	pop    ecx
c001bc82:	31 c0                	xor    eax,eax
c001bc84:	31 d2                	xor    edx,edx
c001bc86:	5b                   	pop    ebx
c001bc87:	5e                   	pop    esi
c001bc88:	c3                   	ret    

c001bc89 <sysSetDiskVolumeLabel(regs*)>:
c001bc89:	56                   	push   esi
c001bc8a:	53                   	push   ebx
c001bc8b:	53                   	push   ebx
c001bc8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc90:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bc93:	83 f8 19             	cmp    eax,0x19
c001bc96:	77 29                	ja     c001bcc1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc98:	8b 0c 85 e0 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0720]
c001bc9f:	85 c9                	test   ecx,ecx
c001bca1:	74 1e                	je     c001bcc1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bca3:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bca6:	85 d2                	test   edx,edx
c001bca8:	74 17                	je     c001bcc1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcaa:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bcb0:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bcb2:	52                   	push   edx
c001bcb3:	50                   	push   eax
c001bcb4:	51                   	push   ecx
c001bcb5:	53                   	push   ebx
c001bcb6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	99                   	cdq    
c001bcbd:	59                   	pop    ecx
c001bcbe:	5b                   	pop    ebx
c001bcbf:	5e                   	pop    esi
c001bcc0:	c3                   	ret    
c001bcc1:	59                   	pop    ecx
c001bcc2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bcc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bccc:	5b                   	pop    ebx
c001bccd:	5e                   	pop    esi
c001bcce:	c3                   	ret    

c001bccf <sysGetDiskVolumeLabel(regs*)>:
c001bccf:	57                   	push   edi
c001bcd0:	56                   	push   esi
c001bcd1:	53                   	push   ebx
c001bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bcd9:	83 fa 19             	cmp    edx,0x19
c001bcdc:	77 34                	ja     c001bd12 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bcde:	8b 0c 95 e0 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0720]
c001bce5:	85 c9                	test   ecx,ecx
c001bce7:	74 29                	je     c001bd12 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bce9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bcec:	85 db                	test   ebx,ebx
c001bcee:	74 22                	je     c001bd12 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bcf0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bcf3:	85 c0                	test   eax,eax
c001bcf5:	74 1b                	je     c001bd12 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bcf7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bcfd:	83 ec 0c             	sub    esp,0xc
c001bd00:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bd02:	50                   	push   eax
c001bd03:	53                   	push   ebx
c001bd04:	52                   	push   edx
c001bd05:	51                   	push   ecx
c001bd06:	56                   	push   esi
c001bd07:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bd0a:	83 c4 20             	add    esp,0x20
c001bd0d:	99                   	cdq    
c001bd0e:	5b                   	pop    ebx
c001bd0f:	5e                   	pop    esi
c001bd10:	5f                   	pop    edi
c001bd11:	c3                   	ret    
c001bd12:	5b                   	pop    ebx
c001bd13:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1d:	5e                   	pop    esi
c001bd1e:	5f                   	pop    edi
c001bd1f:	c3                   	ret    

c001bd20 <sysShutdown(regs*)>:
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd2a:	85 c0                	test   eax,eax
c001bd2c:	74 18                	je     c001bd46 <sysShutdown(regs*)+0x26>
c001bd2e:	83 f8 01             	cmp    eax,0x1
c001bd31:	74 38                	je     c001bd6b <sysShutdown(regs*)+0x4b>
c001bd33:	83 f8 02             	cmp    eax,0x2
c001bd36:	74 24                	je     c001bd5c <sysShutdown(regs*)+0x3c>
c001bd38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd42:	83 c4 0c             	add    esp,0xc
c001bd45:	c3                   	ret    
c001bd46:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001bd4b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd4d:	6a 00                	push   0x0
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 00                	push   0x0
c001bd53:	50                   	push   eax
c001bd54:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bd57:	83 c4 10             	add    esp,0x10
c001bd5a:	eb dc                	jmp    c001bd38 <sysShutdown(regs*)+0x18>
c001bd5c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001bd61:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd63:	6a 00                	push   0x0
c001bd65:	6a 00                	push   0x0
c001bd67:	6a 01                	push   0x1
c001bd69:	eb e8                	jmp    c001bd53 <sysShutdown(regs*)+0x33>
c001bd6b:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001bd70:	85 c0                	test   eax,eax
c001bd72:	74 02                	je     c001bd76 <sysShutdown(regs*)+0x56>
c001bd74:	ff d0                	call   eax
c001bd76:	31 c0                	xor    eax,eax
c001bd78:	31 d2                	xor    edx,edx
c001bd7a:	83 c4 0c             	add    esp,0xc
c001bd7d:	c3                   	ret    

c001bd7e <sysCallRealpath(regs*)>:
c001bd7e:	83 ec 0c             	sub    esp,0xc
c001bd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd85:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bd88:	85 d2                	test   edx,edx
c001bd8a:	74 07                	je     c001bd93 <sysCallRealpath(regs*)+0x15>
c001bd8c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bd8f:	85 c0                	test   eax,eax
c001bd91:	75 0b                	jne    c001bd9e <sysCallRealpath(regs*)+0x20>
c001bd93:	b8 01 00 00 00       	mov    eax,0x1
c001bd98:	31 d2                	xor    edx,edx
c001bd9a:	83 c4 0c             	add    esp,0xc
c001bd9d:	c3                   	ret    
c001bd9e:	51                   	push   ecx
c001bd9f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bda5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bda8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bdae:	51                   	push   ecx
c001bdaf:	52                   	push   edx
c001bdb0:	50                   	push   eax
c001bdb1:	e8 36 74 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c001bdb6:	83 c4 10             	add    esp,0x10
c001bdb9:	31 c0                	xor    eax,eax
c001bdbb:	31 d2                	xor    edx,edx
c001bdbd:	83 c4 0c             	add    esp,0xc
c001bdc0:	c3                   	ret    

c001bdc1 <sysCallGetArgc(regs*)>:
c001bdc1:	83 ec 14             	sub    esp,0x14
c001bdc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdc9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdcc:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bdd2:	68 08 cc 02 c0       	push   0xc002cc08
c001bdd7:	e8 5b 70 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bde4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bdea:	83 c4 1c             	add    esp,0x1c
c001bded:	99                   	cdq    
c001bdee:	c3                   	ret    

c001bdef <sysCallReadDir(regs*)>:
c001bdef:	53                   	push   ebx
c001bdf0:	83 ec 18             	sub    esp,0x18
c001bdf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdf7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdfa:	83 f8 02             	cmp    eax,0x2
c001bdfd:	76 53                	jbe    c001be52 <sysCallReadDir(regs*)+0x63>
c001bdff:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be02:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be08:	77 4f                	ja     c001be59 <sysCallReadDir(regs*)+0x6a>
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	50                   	push   eax
c001be0e:	e8 c8 5a ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001be13:	83 c4 10             	add    esp,0x10
c001be16:	85 c0                	test   eax,eax
c001be18:	74 50                	je     c001be6a <sysCallReadDir(regs*)+0x7b>
c001be1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be22:	83 ec 0c             	sub    esp,0xc
c001be25:	8b 10                	mov    edx,DWORD PTR [eax]
c001be27:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be2b:	51                   	push   ecx
c001be2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be2f:	6a 00                	push   0x0
c001be31:	68 10 01 00 00       	push   0x110
c001be36:	50                   	push   eax
c001be37:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be3a:	83 c4 20             	add    esp,0x20
c001be3d:	85 c0                	test   eax,eax
c001be3f:	74 38                	je     c001be79 <sysCallReadDir(regs*)+0x8a>
c001be41:	83 f8 07             	cmp    eax,0x7
c001be44:	74 0c                	je     c001be52 <sysCallReadDir(regs*)+0x63>
c001be46:	b8 02 00 00 00       	mov    eax,0x2
c001be4b:	31 d2                	xor    edx,edx
c001be4d:	83 c4 18             	add    esp,0x18
c001be50:	5b                   	pop    ebx
c001be51:	c3                   	ret    
c001be52:	b8 01 00 00 00       	mov    eax,0x1
c001be57:	eb f2                	jmp    c001be4b <sysCallReadDir(regs*)+0x5c>
c001be59:	83 ec 08             	sub    esp,0x8
c001be5c:	52                   	push   edx
c001be5d:	68 2c cd 02 c0       	push   0xc002cd2c
c001be62:	e8 d0 6f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001be67:	83 c4 10             	add    esp,0x10
c001be6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be74:	83 c4 18             	add    esp,0x18
c001be77:	5b                   	pop    ebx
c001be78:	c3                   	ret    
c001be79:	31 c0                	xor    eax,eax
c001be7b:	eb ce                	jmp    c001be4b <sysCallReadDir(regs*)+0x5c>

c001be7d <sysCallIsATTY(regs*)>:
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be84:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be87:	83 f8 02             	cmp    eax,0x2
c001be8a:	76 07                	jbe    c001be93 <sysCallIsATTY(regs*)+0x16>
c001be8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be91:	75 26                	jne    c001beb9 <sysCallIsATTY(regs*)+0x3c>
c001be93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be9b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bea1:	85 c0                	test   eax,eax
c001bea3:	74 24                	je     c001bec9 <sysCallIsATTY(regs*)+0x4c>
c001bea5:	83 ec 0c             	sub    esp,0xc
c001bea8:	8b 10                	mov    edx,DWORD PTR [eax]
c001beaa:	50                   	push   eax
c001beab:	ff 12                	call   DWORD PTR [edx]
c001bead:	31 d2                	xor    edx,edx
c001beaf:	0f b6 c0             	movzx  eax,al
c001beb2:	83 c4 10             	add    esp,0x10
c001beb5:	83 c4 0c             	add    esp,0xc
c001beb8:	c3                   	ret    
c001beb9:	83 ec 0c             	sub    esp,0xc
c001bebc:	50                   	push   eax
c001bebd:	e8 19 5a ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bec2:	83 c4 10             	add    esp,0x10
c001bec5:	85 c0                	test   eax,eax
c001bec7:	75 dc                	jne    c001bea5 <sysCallIsATTY(regs*)+0x28>
c001bec9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bece:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bed3:	83 c4 0c             	add    esp,0xc
c001bed6:	c3                   	ret    

c001bed7 <sysCallSeek(regs*)>:
c001bed7:	53                   	push   ebx
c001bed8:	83 ec 08             	sub    esp,0x8
c001bedb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bedf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bee2:	83 f8 02             	cmp    eax,0x2
c001bee5:	76 4a                	jbe    c001bf31 <sysCallSeek(regs*)+0x5a>
c001bee7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001beec:	77 32                	ja     c001bf20 <sysCallSeek(regs*)+0x49>
c001beee:	83 ec 0c             	sub    esp,0xc
c001bef1:	50                   	push   eax
c001bef2:	e8 e4 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bef7:	83 c4 0c             	add    esp,0xc
c001befa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001befd:	31 db                	xor    ebx,ebx
c001beff:	53                   	push   ebx
c001bf00:	51                   	push   ecx
c001bf01:	50                   	push   eax
c001bf02:	e8 b1 75 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	85 c0                	test   eax,eax
c001bf0c:	0f 95 c0             	setne  al
c001bf0f:	31 d2                	xor    edx,edx
c001bf11:	0f b6 c0             	movzx  eax,al
c001bf14:	f7 d8                	neg    eax
c001bf16:	83 d2 00             	adc    edx,0x0
c001bf19:	83 c4 08             	add    esp,0x8
c001bf1c:	f7 da                	neg    edx
c001bf1e:	5b                   	pop    ebx
c001bf1f:	c3                   	ret    
c001bf20:	83 ec 08             	sub    esp,0x8
c001bf23:	50                   	push   eax
c001bf24:	68 13 cc 02 c0       	push   0xc002cc13
c001bf29:	e8 09 6f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf3b:	83 c4 08             	add    esp,0x8
c001bf3e:	5b                   	pop    ebx
c001bf3f:	c3                   	ret    

c001bf40 <sysCallTell(regs*)>:
c001bf40:	53                   	push   ebx
c001bf41:	83 ec 08             	sub    esp,0x8
c001bf44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf48:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf4b:	83 f8 02             	cmp    eax,0x2
c001bf4e:	76 5e                	jbe    c001bfae <sysCallTell(regs*)+0x6e>
c001bf50:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf55:	77 2d                	ja     c001bf84 <sysCallTell(regs*)+0x44>
c001bf57:	83 ec 0c             	sub    esp,0xc
c001bf5a:	50                   	push   eax
c001bf5b:	e8 7b 59 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bf60:	5a                   	pop    edx
c001bf61:	59                   	pop    ecx
c001bf62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf65:	50                   	push   eax
c001bf66:	e8 a3 75 ff ff       	call   c001350e <File::tell(unsigned long long*)>
c001bf6b:	83 c4 10             	add    esp,0x10
c001bf6e:	85 c0                	test   eax,eax
c001bf70:	0f 95 c0             	setne  al
c001bf73:	31 d2                	xor    edx,edx
c001bf75:	0f b6 c0             	movzx  eax,al
c001bf78:	f7 d8                	neg    eax
c001bf7a:	83 d2 00             	adc    edx,0x0
c001bf7d:	83 c4 08             	add    esp,0x8
c001bf80:	f7 da                	neg    edx
c001bf82:	5b                   	pop    ebx
c001bf83:	c3                   	ret    
c001bf84:	83 ec 08             	sub    esp,0x8
c001bf87:	50                   	push   eax
c001bf88:	68 2d cc 02 c0       	push   0xc002cc2d
c001bf8d:	e8 a5 6e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001bf92:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfa5:	31 d2                	xor    edx,edx
c001bfa7:	31 c0                	xor    eax,eax
c001bfa9:	83 c4 08             	add    esp,0x8
c001bfac:	5b                   	pop    ebx
c001bfad:	c3                   	ret    
c001bfae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfb8:	83 c4 08             	add    esp,0x8
c001bfbb:	5b                   	pop    ebx
c001bfbc:	c3                   	ret    

c001bfbd <sysCallSize(regs*)>:
c001bfbd:	53                   	push   ebx
c001bfbe:	83 ec 18             	sub    esp,0x18
c001bfc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bfc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfc8:	83 f8 02             	cmp    eax,0x2
c001bfcb:	76 64                	jbe    c001c031 <sysCallSize(regs*)+0x74>
c001bfcd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfd2:	77 33                	ja     c001c007 <sysCallSize(regs*)+0x4a>
c001bfd4:	83 ec 0c             	sub    esp,0xc
c001bfd7:	50                   	push   eax
c001bfd8:	e8 fe 58 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001bfdd:	83 c4 0c             	add    esp,0xc
c001bfe0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bfe4:	52                   	push   edx
c001bfe5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bfe8:	50                   	push   eax
c001bfe9:	e8 b8 76 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	85 c0                	test   eax,eax
c001bff3:	0f 95 c0             	setne  al
c001bff6:	31 d2                	xor    edx,edx
c001bff8:	0f b6 c0             	movzx  eax,al
c001bffb:	f7 d8                	neg    eax
c001bffd:	83 d2 00             	adc    edx,0x0
c001c000:	83 c4 18             	add    esp,0x18
c001c003:	f7 da                	neg    edx
c001c005:	5b                   	pop    ebx
c001c006:	c3                   	ret    
c001c007:	83 ec 08             	sub    esp,0x8
c001c00a:	50                   	push   eax
c001c00b:	68 47 cc 02 c0       	push   0xc002cc47
c001c010:	e8 22 6e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c015:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c018:	83 c4 10             	add    esp,0x10
c001c01b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c021:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c028:	31 d2                	xor    edx,edx
c001c02a:	31 c0                	xor    eax,eax
c001c02c:	83 c4 18             	add    esp,0x18
c001c02f:	5b                   	pop    ebx
c001c030:	c3                   	ret    
c001c031:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c036:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c03b:	83 c4 18             	add    esp,0x18
c001c03e:	5b                   	pop    ebx
c001c03f:	c3                   	ret    

c001c040 <sysCallSizeFromFilename(regs*)>:
c001c040:	57                   	push   edi
c001c041:	56                   	push   esi
c001c042:	53                   	push   ebx
c001c043:	83 ec 20             	sub    esp,0x20
c001c046:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c04a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c04d:	83 fb 02             	cmp    ebx,0x2
c001c050:	0f 86 99 00 00 00    	jbe    c001c0ef <sysCallSizeFromFilename(regs*)+0xaf>
c001c056:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c05c:	77 65                	ja     c001c0c3 <sysCallSizeFromFilename(regs*)+0x83>
c001c05e:	83 ec 0c             	sub    esp,0xc
c001c061:	68 14 01 00 00       	push   0x114
c001c066:	e8 21 38 ff ff       	call   c000f88c <malloc>
c001c06b:	83 c4 0c             	add    esp,0xc
c001c06e:	89 c6                	mov    esi,eax
c001c070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c075:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c078:	53                   	push   ebx
c001c079:	56                   	push   esi
c001c07a:	e8 17 73 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c07f:	83 c4 0c             	add    esp,0xc
c001c082:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c086:	50                   	push   eax
c001c087:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c08a:	56                   	push   esi
c001c08b:	e8 16 76 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001c090:	83 c4 10             	add    esp,0x10
c001c093:	85 f6                	test   esi,esi
c001c095:	74 14                	je     c001c0ab <sysCallSizeFromFilename(regs*)+0x6b>
c001c097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c09b:	8b 16                	mov    edx,DWORD PTR [esi]
c001c09d:	83 ec 0c             	sub    esp,0xc
c001c0a0:	56                   	push   esi
c001c0a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0a4:	83 c4 10             	add    esp,0x10
c001c0a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0ab:	85 c0                	test   eax,eax
c001c0ad:	0f 95 c0             	setne  al
c001c0b0:	31 d2                	xor    edx,edx
c001c0b2:	0f b6 c0             	movzx  eax,al
c001c0b5:	f7 d8                	neg    eax
c001c0b7:	83 d2 00             	adc    edx,0x0
c001c0ba:	83 c4 20             	add    esp,0x20
c001c0bd:	f7 da                	neg    edx
c001c0bf:	5b                   	pop    ebx
c001c0c0:	5e                   	pop    esi
c001c0c1:	5f                   	pop    edi
c001c0c2:	c3                   	ret    
c001c0c3:	83 ec 08             	sub    esp,0x8
c001c0c6:	53                   	push   ebx
c001c0c7:	68 47 cc 02 c0       	push   0xc002cc47
c001c0cc:	e8 66 6d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c0d1:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0e4:	31 d2                	xor    edx,edx
c001c0e6:	83 c4 20             	add    esp,0x20
c001c0e9:	31 c0                	xor    eax,eax
c001c0eb:	5b                   	pop    ebx
c001c0ec:	5e                   	pop    esi
c001c0ed:	5f                   	pop    edi
c001c0ee:	c3                   	ret    
c001c0ef:	83 c4 20             	add    esp,0x20
c001c0f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0f7:	5b                   	pop    ebx
c001c0f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0fd:	5e                   	pop    esi
c001c0fe:	5f                   	pop    edi
c001c0ff:	c3                   	ret    

c001c100 <sysCallClose(regs*)>:
c001c100:	53                   	push   ebx
c001c101:	83 ec 08             	sub    esp,0x8
c001c104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c108:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c10b:	83 f8 02             	cmp    eax,0x2
c001c10e:	76 50                	jbe    c001c160 <sysCallClose(regs*)+0x60>
c001c110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c115:	74 58                	je     c001c16f <sysCallClose(regs*)+0x6f>
c001c117:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c11c:	74 60                	je     c001c17e <sysCallClose(regs*)+0x7e>
c001c11e:	77 2f                	ja     c001c14f <sysCallClose(regs*)+0x4f>
c001c120:	83 ec 0c             	sub    esp,0xc
c001c123:	50                   	push   eax
c001c124:	e8 b2 57 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c129:	89 c3                	mov    ebx,eax
c001c12b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c12e:	e8 25 73 ff ff       	call   c0013458 <File::close()>
c001c133:	83 c4 10             	add    esp,0x10
c001c136:	85 db                	test   ebx,ebx
c001c138:	74 0c                	je     c001c146 <sysCallClose(regs*)+0x46>
c001c13a:	83 ec 0c             	sub    esp,0xc
c001c13d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c13f:	53                   	push   ebx
c001c140:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	31 c0                	xor    eax,eax
c001c148:	31 d2                	xor    edx,edx
c001c14a:	83 c4 08             	add    esp,0x8
c001c14d:	5b                   	pop    ebx
c001c14e:	c3                   	ret    
c001c14f:	83 ec 08             	sub    esp,0x8
c001c152:	50                   	push   eax
c001c153:	68 50 cd 02 c0       	push   0xc002cd50
c001c158:	e8 da 6c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c165:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c16a:	83 c4 08             	add    esp,0x8
c001c16d:	5b                   	pop    ebx
c001c16e:	c3                   	ret    
c001c16f:	83 ec 0c             	sub    esp,0xc
c001c172:	68 62 cc 02 c0       	push   0xc002cc62
c001c177:	e8 bb 6c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c17c:	eb c5                	jmp    c001c143 <sysCallClose(regs*)+0x43>
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	68 70 cc 02 c0       	push   0xc002cc70
c001c186:	eb ef                	jmp    c001c177 <sysCallClose(regs*)+0x77>

c001c188 <sysCallOpenDir(regs*)>:
c001c188:	56                   	push   esi
c001c189:	53                   	push   ebx
c001c18a:	53                   	push   ebx
c001c18b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c18f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c192:	85 f6                	test   esi,esi
c001c194:	74 59                	je     c001c1ef <sysCallOpenDir(regs*)+0x67>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	68 14 01 00 00       	push   0x114
c001c19e:	e8 e9 36 ff ff       	call   c000f88c <malloc>
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	89 c6                	mov    esi,eax
c001c1a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1b3:	56                   	push   esi
c001c1b4:	e8 89 76 ff ff       	call   c0013842 <Directory::Directory(char const*, Process*)>
c001c1b9:	83 c4 10             	add    esp,0x10
c001c1bc:	85 f6                	test   esi,esi
c001c1be:	74 2f                	je     c001c1ef <sysCallOpenDir(regs*)+0x67>
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	56                   	push   esi
c001c1c4:	e8 dd 76 ff ff       	call   c00138a6 <Directory::open()>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	85 c0                	test   eax,eax
c001c1ce:	75 1f                	jne    c001c1ef <sysCallOpenDir(regs*)+0x67>
c001c1d0:	83 ec 0c             	sub    esp,0xc
c001c1d3:	56                   	push   esi
c001c1d4:	e8 0d 54 ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c1d9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1dc:	83 c4 10             	add    esp,0x10
c001c1df:	89 02                	mov    DWORD PTR [edx],eax
c001c1e1:	c1 f8 1f             	sar    eax,0x1f
c001c1e4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1e7:	31 c0                	xor    eax,eax
c001c1e9:	59                   	pop    ecx
c001c1ea:	31 d2                	xor    edx,edx
c001c1ec:	5b                   	pop    ebx
c001c1ed:	5e                   	pop    esi
c001c1ee:	c3                   	ret    
c001c1ef:	59                   	pop    ecx
c001c1f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1fa:	5b                   	pop    ebx
c001c1fb:	5e                   	pop    esi
c001c1fc:	c3                   	ret    

c001c1fd <sysCallCloseDir(regs*)>:
c001c1fd:	53                   	push   ebx
c001c1fe:	83 ec 08             	sub    esp,0x8
c001c201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c205:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c208:	83 f8 02             	cmp    eax,0x2
c001c20b:	76 47                	jbe    c001c254 <sysCallCloseDir(regs*)+0x57>
c001c20d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c212:	77 2f                	ja     c001c243 <sysCallCloseDir(regs*)+0x46>
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	50                   	push   eax
c001c218:	e8 be 56 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c21d:	89 c3                	mov    ebx,eax
c001c21f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c222:	e8 db 76 ff ff       	call   c0013902 <Directory::close()>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	85 db                	test   ebx,ebx
c001c22c:	74 0c                	je     c001c23a <sysCallCloseDir(regs*)+0x3d>
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c233:	53                   	push   ebx
c001c234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	31 c0                	xor    eax,eax
c001c23c:	31 d2                	xor    edx,edx
c001c23e:	83 c4 08             	add    esp,0x8
c001c241:	5b                   	pop    ebx
c001c242:	c3                   	ret    
c001c243:	83 ec 08             	sub    esp,0x8
c001c246:	50                   	push   eax
c001c247:	68 78 cd 02 c0       	push   0xc002cd78
c001c24c:	e8 e6 6b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c251:	83 c4 10             	add    esp,0x10
c001c254:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c259:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c25e:	83 c4 08             	add    esp,0x8
c001c261:	5b                   	pop    ebx
c001c262:	c3                   	ret    

c001c263 <sysCallMakeDir(regs*)>:
c001c263:	56                   	push   esi
c001c264:	53                   	push   ebx
c001c265:	83 ec 10             	sub    esp,0x10
c001c268:	68 14 01 00 00       	push   0x114
c001c26d:	e8 1a 36 ff ff       	call   c000f88c <malloc>
c001c272:	83 c4 0c             	add    esp,0xc
c001c275:	89 c3                	mov    ebx,eax
c001c277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c27f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c283:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c286:	53                   	push   ebx
c001c287:	e8 b6 75 ff ff       	call   c0013842 <Directory::Directory(char const*, Process*)>
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	85 db                	test   ebx,ebx
c001c291:	74 32                	je     c001c2c5 <sysCallMakeDir(regs*)+0x62>
c001c293:	83 ec 0c             	sub    esp,0xc
c001c296:	53                   	push   ebx
c001c297:	e8 ea 77 ff ff       	call   c0013a86 <Directory::create()>
c001c29c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c29f:	89 c6                	mov    esi,eax
c001c2a1:	e8 5c 76 ff ff       	call   c0013902 <Directory::close()>
c001c2a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ae:	83 c4 10             	add    esp,0x10
c001c2b1:	31 c0                	xor    eax,eax
c001c2b3:	59                   	pop    ecx
c001c2b4:	85 f6                	test   esi,esi
c001c2b6:	5b                   	pop    ebx
c001c2b7:	0f 95 c0             	setne  al
c001c2ba:	5e                   	pop    esi
c001c2bb:	31 d2                	xor    edx,edx
c001c2bd:	f7 d8                	neg    eax
c001c2bf:	83 d2 00             	adc    edx,0x0
c001c2c2:	f7 da                	neg    edx
c001c2c4:	c3                   	ret    
c001c2c5:	59                   	pop    ecx
c001c2c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2d0:	5b                   	pop    ebx
c001c2d1:	5e                   	pop    esi
c001c2d2:	c3                   	ret    

c001c2d3 <sysCallWait(regs*)>:
c001c2d3:	83 ec 10             	sub    esp,0x10
c001c2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2da:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c2dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c2e3:	e8 c8 25 00 00       	call   c001e8b0 <waitTask(int, int*, int)>
c001c2e8:	83 c4 1c             	add    esp,0x1c
c001c2eb:	99                   	cdq    
c001c2ec:	c3                   	ret    

c001c2ed <sysCallNotImpl(regs*)>:
c001c2ed:	83 ec 18             	sub    esp,0x18
c001c2f0:	68 7e cc 02 c0       	push   0xc002cc7e
c001c2f5:	e8 d7 e5 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001c2fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c304:	83 c4 1c             	add    esp,0x1c
c001c307:	c3                   	ret    

c001c308 <sysPanic(regs*)>:
c001c308:	83 ec 18             	sub    esp,0x18
c001c30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c30f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c312:	e8 ba e5 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001c317:	c7 04 24 98 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc98
c001c31e:	e8 ae e5 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001c323:	b8 01 00 00 00       	mov    eax,0x1
c001c328:	31 d2                	xor    edx,edx
c001c32a:	83 c4 1c             	add    esp,0x1c
c001c32d:	c3                   	ret    

c001c32e <sysCallRmdir(regs*)>:
c001c32e:	56                   	push   esi
c001c32f:	53                   	push   ebx
c001c330:	83 ec 20             	sub    esp,0x20
c001c333:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c337:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c33a:	68 14 01 00 00       	push   0x114
c001c33f:	e8 48 35 ff ff       	call   c000f88c <malloc>
c001c344:	83 c4 0c             	add    esp,0xc
c001c347:	89 c3                	mov    ebx,eax
c001c349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c351:	56                   	push   esi
c001c352:	53                   	push   ebx
c001c353:	e8 3e 70 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c35b:	e8 12 72 ff ff       	call   c0013572 <File::unlink()>
c001c360:	83 c4 10             	add    esp,0x10
c001c363:	85 db                	test   ebx,ebx
c001c365:	74 14                	je     c001c37b <sysCallRmdir(regs*)+0x4d>
c001c367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c36b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c36d:	83 ec 0c             	sub    esp,0xc
c001c370:	53                   	push   ebx
c001c371:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c374:	83 c4 10             	add    esp,0x10
c001c377:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c37b:	85 c0                	test   eax,eax
c001c37d:	0f 95 c0             	setne  al
c001c380:	31 d2                	xor    edx,edx
c001c382:	0f b6 c0             	movzx  eax,al
c001c385:	f7 d8                	neg    eax
c001c387:	83 d2 00             	adc    edx,0x0
c001c38a:	83 c4 14             	add    esp,0x14
c001c38d:	f7 da                	neg    edx
c001c38f:	5b                   	pop    ebx
c001c390:	5e                   	pop    esi
c001c391:	c3                   	ret    

c001c392 <sysCallUnlink(regs*)>:
c001c392:	56                   	push   esi
c001c393:	53                   	push   ebx
c001c394:	83 ec 20             	sub    esp,0x20
c001c397:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c39b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c39e:	68 14 01 00 00       	push   0x114
c001c3a3:	e8 e4 34 ff ff       	call   c000f88c <malloc>
c001c3a8:	83 c4 0c             	add    esp,0xc
c001c3ab:	89 c3                	mov    ebx,eax
c001c3ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3b5:	56                   	push   esi
c001c3b6:	53                   	push   ebx
c001c3b7:	e8 da 6f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c3bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3bf:	e8 ae 71 ff ff       	call   c0013572 <File::unlink()>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	85 db                	test   ebx,ebx
c001c3c9:	74 14                	je     c001c3df <sysCallUnlink(regs*)+0x4d>
c001c3cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3d1:	83 ec 0c             	sub    esp,0xc
c001c3d4:	53                   	push   ebx
c001c3d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3df:	85 c0                	test   eax,eax
c001c3e1:	0f 95 c0             	setne  al
c001c3e4:	31 d2                	xor    edx,edx
c001c3e6:	0f b6 c0             	movzx  eax,al
c001c3e9:	f7 d8                	neg    eax
c001c3eb:	83 d2 00             	adc    edx,0x0
c001c3ee:	83 c4 14             	add    esp,0x14
c001c3f1:	f7 da                	neg    edx
c001c3f3:	5b                   	pop    ebx
c001c3f4:	5e                   	pop    esi
c001c3f5:	c3                   	ret    

c001c3f6 <sysCallGetArgv(regs*)>:
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3fd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c400:	85 c0                	test   eax,eax
c001c402:	78 2b                	js     c001c42f <sysCallGetArgv(regs*)+0x39>
c001c404:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c40a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c40d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c413:	7d 1a                	jge    c001c42f <sysCallGetArgv(regs*)+0x39>
c001c415:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 17                	je     c001c437 <sysCallGetArgv(regs*)+0x41>
c001c420:	83 ec 08             	sub    esp,0x8
c001c423:	50                   	push   eax
c001c424:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c427:	e8 e0 43 fe ff       	call   c000080c <strcpy>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	31 c0                	xor    eax,eax
c001c431:	31 d2                	xor    edx,edx
c001c433:	83 c4 0c             	add    esp,0xc
c001c436:	c3                   	ret    
c001c437:	b8 01 00 00 00       	mov    eax,0x1
c001c43c:	31 d2                	xor    edx,edx
c001c43e:	83 c4 0c             	add    esp,0xc
c001c441:	c3                   	ret    

c001c442 <sysCallTTYName(regs*)>:
c001c442:	56                   	push   esi
c001c443:	53                   	push   ebx
c001c444:	53                   	push   ebx
c001c445:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c449:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c44c:	85 c0                	test   eax,eax
c001c44e:	74 5f                	je     c001c4af <sysCallTTYName(regs*)+0x6d>
c001c450:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c453:	83 f8 02             	cmp    eax,0x2
c001c456:	77 3e                	ja     c001c496 <sysCallTTYName(regs*)+0x54>
c001c458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c45d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c460:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c466:	85 db                	test   ebx,ebx
c001c468:	74 45                	je     c001c4af <sysCallTTYName(regs*)+0x6d>
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c46f:	53                   	push   ebx
c001c470:	ff 10                	call   DWORD PTR [eax]
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	84 c0                	test   al,al
c001c477:	74 41                	je     c001c4ba <sysCallTTYName(regs*)+0x78>
c001c479:	83 ec 08             	sub    esp,0x8
c001c47c:	81 c3 82 00 00 00    	add    ebx,0x82
c001c482:	53                   	push   ebx
c001c483:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c486:	e8 81 43 fe ff       	call   c000080c <strcpy>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	31 c0                	xor    eax,eax
c001c490:	59                   	pop    ecx
c001c491:	31 d2                	xor    edx,edx
c001c493:	5b                   	pop    ebx
c001c494:	5e                   	pop    esi
c001c495:	c3                   	ret    
c001c496:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c49b:	74 bb                	je     c001c458 <sysCallTTYName(regs*)+0x16>
c001c49d:	83 ec 0c             	sub    esp,0xc
c001c4a0:	50                   	push   eax
c001c4a1:	e8 35 54 ff ff       	call   c00118db <getFromFileDescriptor(int)>
c001c4a6:	83 c4 10             	add    esp,0x10
c001c4a9:	89 c3                	mov    ebx,eax
c001c4ab:	85 db                	test   ebx,ebx
c001c4ad:	75 bb                	jne    c001c46a <sysCallTTYName(regs*)+0x28>
c001c4af:	59                   	pop    ecx
c001c4b0:	b8 01 00 00 00       	mov    eax,0x1
c001c4b5:	31 d2                	xor    edx,edx
c001c4b7:	5b                   	pop    ebx
c001c4b8:	5e                   	pop    esi
c001c4b9:	c3                   	ret    
c001c4ba:	59                   	pop    ecx
c001c4bb:	b8 02 00 00 00       	mov    eax,0x2
c001c4c0:	31 d2                	xor    edx,edx
c001c4c2:	5b                   	pop    ebx
c001c4c3:	5e                   	pop    esi
c001c4c4:	c3                   	ret    

c001c4c5 <sysCallUSleep(regs*)>:
c001c4c5:	83 ec 14             	sub    esp,0x14
c001c4c8:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c4cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4d1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c4d8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c4db:	01 ca                	add    edx,ecx
c001c4dd:	52                   	push   edx
c001c4de:	50                   	push   eax
c001c4df:	e8 a3 24 00 00       	call   c001e987 <nanoSleep(unsigned long long)>
c001c4e4:	31 c0                	xor    eax,eax
c001c4e6:	31 d2                	xor    edx,edx
c001c4e8:	83 c4 1c             	add    esp,0x1c
c001c4eb:	c3                   	ret    

c001c4ec <sysCallSpawn(regs*)>:
c001c4ec:	56                   	push   esi
c001c4ed:	53                   	push   ebx
c001c4ee:	50                   	push   eax
c001c4ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c4f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c4f6:	85 c0                	test   eax,eax
c001c4f8:	75 08                	jne    c001c502 <sysCallSpawn(regs*)+0x16>
c001c4fa:	59                   	pop    ecx
c001c4fb:	31 c0                	xor    eax,eax
c001c4fd:	31 d2                	xor    edx,edx
c001c4ff:	5b                   	pop    ebx
c001c500:	5e                   	pop    esi
c001c501:	c3                   	ret    
c001c502:	83 ec 08             	sub    esp,0x8
c001c505:	50                   	push   eax
c001c506:	68 a7 cc 02 c0       	push   0xc002cca7
c001c50b:	e8 27 69 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c510:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c517:	e8 70 33 ff ff       	call   c000f88c <malloc>
c001c51c:	83 c4 10             	add    esp,0x10
c001c51f:	89 c6                	mov    esi,eax
c001c521:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c524:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c527:	85 c0                	test   eax,eax
c001c529:	75 32                	jne    c001c55d <sysCallSpawn(regs*)+0x71>
c001c52b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c530:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c533:	52                   	push   edx
c001c534:	50                   	push   eax
c001c535:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c538:	56                   	push   esi
c001c539:	e8 26 1b 00 00       	call   c001e064 <Process::Process(char const*, Process*, char**)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c548:	75 b0                	jne    c001c4fa <sysCallSpawn(regs*)+0xe>
c001c54a:	83 ec 0c             	sub    esp,0xc
c001c54d:	56                   	push   esi
c001c54e:	e8 f3 1f 00 00       	call   c001e546 <Process::createUserThread()>
c001c553:	8b 06                	mov    eax,DWORD PTR [esi]
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	99                   	cdq    
c001c559:	59                   	pop    ecx
c001c55a:	5b                   	pop    ebx
c001c55b:	5e                   	pop    esi
c001c55c:	c3                   	ret    
c001c55d:	31 c0                	xor    eax,eax
c001c55f:	eb d2                	jmp    c001c533 <sysCallSpawn(regs*)+0x47>

c001c561 <sysCallGetEnv(regs*)>:
c001c561:	55                   	push   ebp
c001c562:	57                   	push   edi
c001c563:	56                   	push   esi
c001c564:	53                   	push   ebx
c001c565:	83 ec 28             	sub    esp,0x28
c001c568:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c56c:	68 b5 cc 02 c0       	push   0xc002ccb5
c001c571:	e8 c1 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c576:	5f                   	pop    edi
c001c577:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c57a:	5d                   	pop    ebp
c001c57b:	53                   	push   ebx
c001c57c:	68 e2 cf 02 c0       	push   0xc002cfe2
c001c581:	e8 b1 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c586:	58                   	pop    eax
c001c587:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c58a:	5a                   	pop    edx
c001c58b:	57                   	push   edi
c001c58c:	68 be cc 02 c0       	push   0xc002ccbe
c001c591:	e8 a1 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c596:	59                   	pop    ecx
c001c597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c59c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c59f:	e8 49 e2 ff ff       	call   c001a7ed <Krnl::getProcessTotalEnvCount(Process*)>
c001c5a4:	5a                   	pop    edx
c001c5a5:	89 c5                	mov    ebp,eax
c001c5a7:	59                   	pop    ecx
c001c5a8:	50                   	push   eax
c001c5a9:	68 c8 cc 02 c0       	push   0xc002ccc8
c001c5ae:	e8 84 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c5b3:	83 c4 10             	add    esp,0x10
c001c5b6:	39 ef                	cmp    edi,ebp
c001c5b8:	7c 15                	jl     c001c5cf <sysCallGetEnv(regs*)+0x6e>
c001c5ba:	85 db                	test   ebx,ebx
c001c5bc:	75 0c                	jne    c001c5ca <sysCallGetEnv(regs*)+0x69>
c001c5be:	83 c4 1c             	add    esp,0x1c
c001c5c1:	31 c0                	xor    eax,eax
c001c5c3:	5b                   	pop    ebx
c001c5c4:	31 d2                	xor    edx,edx
c001c5c6:	5e                   	pop    esi
c001c5c7:	5f                   	pop    edi
c001c5c8:	5d                   	pop    ebp
c001c5c9:	c3                   	ret    
c001c5ca:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c5cd:	eb ef                	jmp    c001c5be <sysCallGetEnv(regs*)+0x5d>
c001c5cf:	83 ec 0c             	sub    esp,0xc
c001c5d2:	68 d4 cc 02 c0       	push   0xc002ccd4
c001c5d7:	e8 5b 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c5dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5e0:	83 c4 0c             	add    esp,0xc
c001c5e3:	57                   	push   edi
c001c5e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c5ea:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c5ed:	50                   	push   eax
c001c5ee:	e8 1a e2 ff ff       	call   c001a80d <Krnl::getProcessEnvPair(Process*, int)>
c001c5f3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c5f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c5fb:	68 93 d0 02 c0       	push   0xc002d093
c001c600:	e8 32 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c605:	83 c4 10             	add    esp,0x10
c001c608:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c60b:	85 f6                	test   esi,esi
c001c60d:	75 47                	jne    c001c656 <sysCallGetEnv(regs*)+0xf5>
c001c60f:	83 ec 0c             	sub    esp,0xc
c001c612:	55                   	push   ebp
c001c613:	e8 54 41 fe ff       	call   c000076c <strlen>
c001c618:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c61b:	89 c3                	mov    ebx,eax
c001c61d:	e8 4a 41 fe ff       	call   c000076c <strlen>
c001c622:	5a                   	pop    edx
c001c623:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c627:	59                   	pop    ecx
c001c628:	50                   	push   eax
c001c629:	68 d7 cc 02 c0       	push   0xc002ccd7
c001c62e:	e8 04 68 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c636:	e8 31 41 fe ff       	call   c000076c <strlen>
c001c63b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c63e:	89 c3                	mov    ebx,eax
c001c640:	e8 27 41 fe ff       	call   c000076c <strlen>
c001c645:	83 c4 10             	add    esp,0x10
c001c648:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c64c:	83 c4 1c             	add    esp,0x1c
c001c64f:	31 d2                	xor    edx,edx
c001c651:	5b                   	pop    ebx
c001c652:	5e                   	pop    esi
c001c653:	5f                   	pop    edi
c001c654:	5d                   	pop    ebp
c001c655:	c3                   	ret    
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	68 ad d0 02 c0       	push   0xc002d0ad
c001c65e:	e8 d4 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c663:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c666:	58                   	pop    eax
c001c667:	5a                   	pop    edx
c001c668:	55                   	push   ebp
c001c669:	53                   	push   ebx
c001c66a:	e8 9d 41 fe ff       	call   c000080c <strcpy>
c001c66f:	59                   	pop    ecx
c001c670:	5e                   	pop    esi
c001c671:	68 e1 cc 02 c0       	push   0xc002cce1
c001c676:	53                   	push   ebx
c001c677:	e8 d0 42 fe ff       	call   c000094c <strcat>
c001c67c:	5d                   	pop    ebp
c001c67d:	58                   	pop    eax
c001c67e:	57                   	push   edi
c001c67f:	53                   	push   ebx
c001c680:	e8 c7 42 fe ff       	call   c000094c <strcat>
c001c685:	c7 04 24 c7 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0c7
c001c68c:	e8 a6 67 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c691:	83 c4 10             	add    esp,0x10
c001c694:	e9 25 ff ff ff       	jmp    c001c5be <sysCallGetEnv(regs*)+0x5d>

c001c699 <sysAppSettings(regs*)>:
c001c699:	57                   	push   edi
c001c69a:	56                   	push   esi
c001c69b:	56                   	push   esi
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c6a3:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c6a9:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c6ae:	66 3d c0 09          	cmp    ax,0x9c0
c001c6b2:	75 2e                	jne    c001c6e2 <sysAppSettings(regs*)+0x49>
c001c6b4:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c6ba:	83 e0 1f             	and    eax,0x1f
c001c6bd:	3c 01                	cmp    al,0x1
c001c6bf:	74 2c                	je     c001c6ed <sysAppSettings(regs*)+0x54>
c001c6c1:	3c 07                	cmp    al,0x7
c001c6c3:	0f 84 b3 00 00 00    	je     c001c77c <sysAppSettings(regs*)+0xe3>
c001c6c9:	84 c0                	test   al,al
c001c6cb:	0f 84 d2 00 00 00    	je     c001c7a3 <sysAppSettings(regs*)+0x10a>
c001c6d1:	3c 08                	cmp    al,0x8
c001c6d3:	74 63                	je     c001c738 <sysAppSettings(regs*)+0x9f>
c001c6d5:	59                   	pop    ecx
c001c6d6:	0f b6 c0             	movzx  eax,al
c001c6d9:	5e                   	pop    esi
c001c6da:	05 e8 03 00 00       	add    eax,0x3e8
c001c6df:	5f                   	pop    edi
c001c6e0:	99                   	cdq    
c001c6e1:	c3                   	ret    
c001c6e2:	b8 01 00 00 00       	mov    eax,0x1
c001c6e7:	59                   	pop    ecx
c001c6e8:	31 d2                	xor    edx,edx
c001c6ea:	5e                   	pop    esi
c001c6eb:	5f                   	pop    edi
c001c6ec:	c3                   	ret    
c001c6ed:	50                   	push   eax
c001c6ee:	68 00 01 00 00       	push   0x100
c001c6f3:	6a 00                	push   0x0
c001c6f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6fd:	83 c0 0c             	add    eax,0xc
c001c700:	50                   	push   eax
c001c701:	e8 4a 40 fe ff       	call   c0000750 <memset>
c001c706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c70b:	b9 ff 00 00 00       	mov    ecx,0xff
c001c710:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c713:	83 c7 0c             	add    edi,0xc
c001c716:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c71d:	5a                   	pop    edx
c001c71e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c721:	59                   	pop    ecx
c001c722:	8d 50 0c             	lea    edx,[eax+0xc]
c001c725:	52                   	push   edx
c001c726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c72c:	e8 d5 43 ff ff       	call   c0010b06 <VgaText::setTitle(char*)>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	31 c0                	xor    eax,eax
c001c736:	eb af                	jmp    c001c6e7 <sysAppSettings(regs*)+0x4e>
c001c738:	83 ec 08             	sub    esp,0x8
c001c73b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c741:	83 e0 0f             	and    eax,0xf
c001c744:	50                   	push   eax
c001c745:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c74a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c74d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c753:	e8 a0 43 ff ff       	call   c0010af8 <VgaText::setTitleColour(VgaColour)>
c001c758:	5f                   	pop    edi
c001c759:	58                   	pop    eax
c001c75a:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c760:	c1 e8 04             	shr    eax,0x4
c001c763:	83 e0 0f             	and    eax,0xf
c001c766:	50                   	push   eax
c001c767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c76c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c76f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c775:	e8 70 43 ff ff       	call   c0010aea <VgaText::setTitleTextColour(VgaColour)>
c001c77a:	eb b5                	jmp    c001c731 <sysAppSettings(regs*)+0x98>
c001c77c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c781:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c784:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c78a:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c790:	c0 e8 06             	shr    al,0x6
c001c793:	83 e0 01             	and    eax,0x1
c001c796:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c79c:	31 c0                	xor    eax,eax
c001c79e:	e9 44 ff ff ff       	jmp    c001c6e7 <sysAppSettings(regs*)+0x4e>
c001c7a3:	b8 02 00 00 00       	mov    eax,0x2
c001c7a8:	e9 3a ff ff ff       	jmp    c001c6e7 <sysAppSettings(regs*)+0x4e>

c001c7ad <sysSetFatAttrib(regs*)>:
c001c7ad:	57                   	push   edi
c001c7ae:	56                   	push   esi
c001c7af:	53                   	push   ebx
c001c7b0:	83 ec 1c             	sub    esp,0x1c
c001c7b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7b7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c7ba:	68 14 01 00 00       	push   0x114
c001c7bf:	e8 c8 30 ff ff       	call   c000f88c <malloc>
c001c7c4:	83 c4 0c             	add    esp,0xc
c001c7c7:	89 c3                	mov    ebx,eax
c001c7c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c7d1:	57                   	push   edi
c001c7d2:	53                   	push   ebx
c001c7d3:	e8 be 6b ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001c7d8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c7db:	83 c4 0c             	add    esp,0xc
c001c7de:	0f b6 d4             	movzx  edx,ah
c001c7e1:	0f b6 c0             	movzx  eax,al
c001c7e4:	52                   	push   edx
c001c7e5:	50                   	push   eax
c001c7e6:	53                   	push   ebx
c001c7e7:	e8 20 6e ff ff       	call   c001360c <File::chfatattr(unsigned char, unsigned char)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	85 db                	test   ebx,ebx
c001c7f1:	74 14                	je     c001c807 <sysSetFatAttrib(regs*)+0x5a>
c001c7f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c7f9:	83 ec 0c             	sub    esp,0xc
c001c7fc:	53                   	push   ebx
c001c7fd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c807:	85 c0                	test   eax,eax
c001c809:	0f 95 c0             	setne  al
c001c80c:	31 d2                	xor    edx,edx
c001c80e:	0f b6 c0             	movzx  eax,al
c001c811:	f7 d8                	neg    eax
c001c813:	83 d2 00             	adc    edx,0x0
c001c816:	83 c4 10             	add    esp,0x10
c001c819:	f7 da                	neg    edx
c001c81b:	5b                   	pop    ebx
c001c81c:	5e                   	pop    esi
c001c81d:	5f                   	pop    edi
c001c81e:	c3                   	ret    

c001c81f <sysPipe(regs*)>:
c001c81f:	57                   	push   edi
c001c820:	56                   	push   esi
c001c821:	53                   	push   ebx
c001c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c82c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c82f:	6a 20                	push   0x20
c001c831:	e8 56 30 ff ff       	call   c000f88c <malloc>
c001c836:	89 c3                	mov    ebx,eax
c001c838:	58                   	pop    eax
c001c839:	5a                   	pop    edx
c001c83a:	68 00 50 00 00       	push   0x5000
c001c83f:	53                   	push   ebx
c001c840:	e8 69 3c ff ff       	call   c00104ae <Pipe::Pipe(int)>
c001c845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c848:	e8 99 4d ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c84d:	89 07                	mov    DWORD PTR [edi],eax
c001c84f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c852:	e8 8f 4d ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	89 06                	mov    DWORD PTR [esi],eax
c001c85c:	31 d2                	xor    edx,edx
c001c85e:	5b                   	pop    ebx
c001c85f:	31 c0                	xor    eax,eax
c001c861:	5e                   	pop    esi
c001c862:	5f                   	pop    edi
c001c863:	c3                   	ret    

c001c864 <sysGetUnixTime(regs*)>:
c001c864:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001c869:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c86f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c873:	e9 10 75 ff ff       	jmp    c0013d88 <Clock::timeInSecondsLocal()>

c001c878 <string_ends_with(char const*, char const*)>:
c001c878:	57                   	push   edi
c001c879:	56                   	push   esi
c001c87a:	53                   	push   ebx
c001c87b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c87f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c883:	83 ec 0c             	sub    esp,0xc
c001c886:	53                   	push   ebx
c001c887:	e8 e0 3e fe ff       	call   c000076c <strlen>
c001c88c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c88f:	89 c6                	mov    esi,eax
c001c891:	e8 d6 3e fe ff       	call   c000076c <strlen>
c001c896:	83 c4 10             	add    esp,0x10
c001c899:	39 c6                	cmp    esi,eax
c001c89b:	7d 06                	jge    c001c8a3 <string_ends_with(char const*, char const*)+0x2b>
c001c89d:	5b                   	pop    ebx
c001c89e:	31 c0                	xor    eax,eax
c001c8a0:	5e                   	pop    esi
c001c8a1:	5f                   	pop    edi
c001c8a2:	c3                   	ret    
c001c8a3:	83 ec 08             	sub    esp,0x8
c001c8a6:	29 c6                	sub    esi,eax
c001c8a8:	57                   	push   edi
c001c8a9:	01 f3                	add    ebx,esi
c001c8ab:	53                   	push   ebx
c001c8ac:	e8 e7 3f fe ff       	call   c0000898 <strcmp>
c001c8b1:	83 c4 10             	add    esp,0x10
c001c8b4:	85 c0                	test   eax,eax
c001c8b6:	5b                   	pop    ebx
c001c8b7:	0f 94 c0             	sete   al
c001c8ba:	5e                   	pop    esi
c001c8bb:	0f b6 c0             	movzx  eax,al
c001c8be:	5f                   	pop    edi
c001c8bf:	c3                   	ret    

c001c8c0 <sysCallOpen(regs*)>:
c001c8c0:	56                   	push   esi
c001c8c1:	53                   	push   ebx
c001c8c2:	81 ec 04 01 00 00    	sub    esp,0x104
c001c8c8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c8cf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c8d2:	85 c9                	test   ecx,ecx
c001c8d4:	0f 84 b3 00 00 00    	je     c001c98d <sysCallOpen(regs*)+0xcd>
c001c8da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c8dd:	85 c0                	test   eax,eax
c001c8df:	0f 84 a8 00 00 00    	je     c001c98d <sysCallOpen(regs*)+0xcd>
c001c8e5:	52                   	push   edx
c001c8e6:	68 e3 cc 02 c0       	push   0xc002cce3
c001c8eb:	50                   	push   eax
c001c8ec:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c8f0:	56                   	push   esi
c001c8f1:	e8 f6 68 ff ff       	call   c00131ec <Fs::standardiseFiles(char*, char const*, char const*)>
c001c8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8f9:	e8 6e 3e fe ff       	call   c000076c <strlen>
c001c8fe:	83 c4 10             	add    esp,0x10
c001c901:	48                   	dec    eax
c001c902:	74 1d                	je     c001c921 <sysCallOpen(regs*)+0x61>
c001c904:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c907:	eb 0f                	jmp    c001c918 <sysCallOpen(regs*)+0x58>
c001c909:	80 fa 3a             	cmp    dl,0x3a
c001c90c:	74 0f                	je     c001c91d <sysCallOpen(regs*)+0x5d>
c001c90e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c912:	48                   	dec    eax
c001c913:	74 0c                	je     c001c921 <sysCallOpen(regs*)+0x61>
c001c915:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c918:	80 fa 2e             	cmp    dl,0x2e
c001c91b:	75 ec                	jne    c001c909 <sysCallOpen(regs*)+0x49>
c001c91d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c921:	83 ec 08             	sub    esp,0x8
c001c924:	68 e7 cc 02 c0       	push   0xc002cce7
c001c929:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c92c:	e8 47 ff ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001c931:	83 c4 10             	add    esp,0x10
c001c934:	85 c0                	test   eax,eax
c001c936:	75 17                	jne    c001c94f <sysCallOpen(regs*)+0x8f>
c001c938:	83 ec 08             	sub    esp,0x8
c001c93b:	68 08 cd 02 c0       	push   0xc002cd08
c001c940:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c943:	e8 30 ff ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	85 c0                	test   eax,eax
c001c94d:	74 51                	je     c001c9a0 <sysCallOpen(regs*)+0xe0>
c001c94f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c952:	83 ec 08             	sub    esp,0x8
c001c955:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c962:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c965:	ff 30                	push   DWORD PTR [eax]
c001c967:	68 ec cc 02 c0       	push   0xc002ccec
c001c96c:	e8 c6 64 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c971:	c7 04 24 fb cc 02 c0 	mov    DWORD PTR [esp],0xc002ccfb
c001c978:	e8 ba 64 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001c97d:	83 c4 10             	add    esp,0x10
c001c980:	81 c4 04 01 00 00    	add    esp,0x104
c001c986:	31 c0                	xor    eax,eax
c001c988:	31 d2                	xor    edx,edx
c001c98a:	5b                   	pop    ebx
c001c98b:	5e                   	pop    esi
c001c98c:	c3                   	ret    
c001c98d:	81 c4 04 01 00 00    	add    esp,0x104
c001c993:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c998:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c99d:	5b                   	pop    ebx
c001c99e:	5e                   	pop    esi
c001c99f:	c3                   	ret    
c001c9a0:	83 ec 08             	sub    esp,0x8
c001c9a3:	68 e8 cc 02 c0       	push   0xc002cce8
c001c9a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9ab:	e8 e8 3e fe ff       	call   c0000898 <strcmp>
c001c9b0:	83 c4 10             	add    esp,0x10
c001c9b3:	85 c0                	test   eax,eax
c001c9b5:	74 98                	je     c001c94f <sysCallOpen(regs*)+0x8f>
c001c9b7:	83 ec 08             	sub    esp,0x8
c001c9ba:	68 e7 cc 02 c0       	push   0xc002cce7
c001c9bf:	56                   	push   esi
c001c9c0:	e8 b3 fe ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001c9c5:	83 c4 10             	add    esp,0x10
c001c9c8:	85 c0                	test   eax,eax
c001c9ca:	75 83                	jne    c001c94f <sysCallOpen(regs*)+0x8f>
c001c9cc:	83 ec 08             	sub    esp,0x8
c001c9cf:	68 0d cd 02 c0       	push   0xc002cd0d
c001c9d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9d7:	e8 9c fe ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	85 c0                	test   eax,eax
c001c9e1:	0f 85 d9 00 00 00    	jne    c001cac0 <sysCallOpen(regs*)+0x200>
c001c9e7:	83 ec 08             	sub    esp,0x8
c001c9ea:	68 12 cd 02 c0       	push   0xc002cd12
c001c9ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9f2:	e8 81 fe ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	85 c0                	test   eax,eax
c001c9fc:	0f 85 be 00 00 00    	jne    c001cac0 <sysCallOpen(regs*)+0x200>
c001ca02:	83 ec 08             	sub    esp,0x8
c001ca05:	68 0e cd 02 c0       	push   0xc002cd0e
c001ca0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca0d:	e8 86 3e fe ff       	call   c0000898 <strcmp>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 84 a3 00 00 00    	je     c001cac0 <sysCallOpen(regs*)+0x200>
c001ca1d:	83 ec 08             	sub    esp,0x8
c001ca20:	68 0d cd 02 c0       	push   0xc002cd0d
c001ca25:	56                   	push   esi
c001ca26:	e8 4d fe ff ff       	call   c001c878 <string_ends_with(char const*, char const*)>
c001ca2b:	83 c4 10             	add    esp,0x10
c001ca2e:	85 c0                	test   eax,eax
c001ca30:	0f 85 8a 00 00 00    	jne    c001cac0 <sysCallOpen(regs*)+0x200>
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	68 14 01 00 00       	push   0x114
c001ca3e:	e8 49 2e ff ff       	call   c000f88c <malloc>
c001ca43:	83 c4 0c             	add    esp,0xc
c001ca46:	89 c6                	mov    esi,eax
c001ca48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ca50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca53:	56                   	push   esi
c001ca54:	e8 3d 69 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	85 f6                	test   esi,esi
c001ca5e:	0f 84 29 ff ff ff    	je     c001c98d <sysCallOpen(regs*)+0xcd>
c001ca64:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ca67:	0f b6 c2             	movzx  eax,dl
c001ca6a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ca6d:	89 d0                	mov    eax,edx
c001ca6f:	83 e0 01             	and    eax,0x1
c001ca72:	f6 c2 02             	test   dl,0x2
c001ca75:	74 03                	je     c001ca7a <sysCallOpen(regs*)+0x1ba>
c001ca77:	83 c8 02             	or     eax,0x2
c001ca7a:	f6 c2 04             	test   dl,0x4
c001ca7d:	74 03                	je     c001ca82 <sysCallOpen(regs*)+0x1c2>
c001ca7f:	83 c8 04             	or     eax,0x4
c001ca82:	f6 c2 08             	test   dl,0x8
c001ca85:	74 03                	je     c001ca8a <sysCallOpen(regs*)+0x1ca>
c001ca87:	83 c8 0a             	or     eax,0xa
c001ca8a:	83 e2 10             	and    edx,0x10
c001ca8d:	74 03                	je     c001ca92 <sysCallOpen(regs*)+0x1d2>
c001ca8f:	83 c8 12             	or     eax,0x12
c001ca92:	83 ec 08             	sub    esp,0x8
c001ca95:	50                   	push   eax
c001ca96:	56                   	push   esi
c001ca97:	e8 5e 69 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	85 c0                	test   eax,eax
c001caa1:	0f 85 e6 fe ff ff    	jne    c001c98d <sysCallOpen(regs*)+0xcd>
c001caa7:	83 ec 0c             	sub    esp,0xc
c001caaa:	56                   	push   esi
c001caab:	e8 36 4b ff ff       	call   c00115e6 <UnixFile::getFileDescriptor()>
c001cab0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cab3:	89 02                	mov    DWORD PTR [edx],eax
c001cab5:	c1 f8 1f             	sar    eax,0x1f
c001cab8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cabb:	e9 bd fe ff ff       	jmp    c001c97d <sysCallOpen(regs*)+0xbd>
c001cac0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cac3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001cac9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cad0:	e9 ab fe ff ff       	jmp    c001c980 <sysCallOpen(regs*)+0xc0>

c001cad5 <Sys::loadSyscalls()>:
c001cad5:	c7 05 40 1e 03 c0 c5 bb 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001bbc5
c001cadf:	c7 05 44 1e 03 c0 2a b7 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001b72a
c001cae9:	c7 05 48 1e 03 c0 18 b9 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001b918
c001caf3:	c7 05 4c 1e 03 c0 fb ba 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001bafb
c001cafd:	c7 05 50 1e 03 c0 b0 b8 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001b8b0
c001cb07:	c7 05 54 1e 03 c0 61 b7 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001b761
c001cb11:	c7 05 58 1e 03 c0 42 b7 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001b742
c001cb1b:	c7 05 5c 1e 03 c0 6d b9 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001b96d
c001cb25:	c7 05 64 1e 03 c0 00 c1 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001c100
c001cb2f:	c7 05 60 1e 03 c0 c0 c8 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001c8c0
c001cb39:	c7 05 68 1e 03 c0 88 c1 01 c0 	mov    DWORD PTR ds:0xc0031e68,0xc001c188
c001cb43:	c7 05 6c 1e 03 c0 ef bd 01 c0 	mov    DWORD PTR ds:0xc0031e6c,0xc001bdef
c001cb4d:	c7 05 70 1e 03 c0 0b bc 01 c0 	mov    DWORD PTR ds:0xc0031e70,0xc001bc0b
c001cb57:	c7 05 74 1e 03 c0 10 bc 01 c0 	mov    DWORD PTR ds:0xc0031e74,0xc001bc10
c001cb61:	c7 05 78 1e 03 c0 63 c2 01 c0 	mov    DWORD PTR ds:0xc0031e78,0xc001c263
c001cb6b:	c7 05 7c 1e 03 c0 fd c1 01 c0 	mov    DWORD PTR ds:0xc0031e7c,0xc001c1fd
c001cb75:	c7 05 80 1e 03 c0 d7 be 01 c0 	mov    DWORD PTR ds:0xc0031e80,0xc001bed7
c001cb7f:	c7 05 84 1e 03 c0 40 bf 01 c0 	mov    DWORD PTR ds:0xc0031e84,0xc001bf40
c001cb89:	c7 05 88 1e 03 c0 bd bf 01 c0 	mov    DWORD PTR ds:0xc0031e88,0xc001bfbd
c001cb93:	c7 05 8c 1e 03 c0 15 bc 01 c0 	mov    DWORD PTR ds:0xc0031e8c,0xc001bc15
c001cb9d:	c7 05 90 1e 03 c0 d3 c2 01 c0 	mov    DWORD PTR ds:0xc0031e90,0xc001c2d3
c001cba7:	c7 05 94 1e 03 c0 ed c2 01 c0 	mov    DWORD PTR ds:0xc0031e94,0xc001c2ed
c001cbb1:	c7 05 98 1e 03 c0 ed c2 01 c0 	mov    DWORD PTR ds:0xc0031e98,0xc001c2ed
c001cbbb:	c7 05 9c 1e 03 c0 2e c3 01 c0 	mov    DWORD PTR ds:0xc0031e9c,0xc001c32e
c001cbc5:	c7 05 a0 1e 03 c0 92 c3 01 c0 	mov    DWORD PTR ds:0xc0031ea0,0xc001c392
c001cbcf:	c7 05 a4 1e 03 c0 c1 bd 01 c0 	mov    DWORD PTR ds:0xc0031ea4,0xc001bdc1
c001cbd9:	c7 05 a8 1e 03 c0 f6 c3 01 c0 	mov    DWORD PTR ds:0xc0031ea8,0xc001c3f6
c001cbe3:	c7 05 ac 1e 03 c0 7e bd 01 c0 	mov    DWORD PTR ds:0xc0031eac,0xc001bd7e
c001cbed:	c7 05 b0 1e 03 c0 42 c4 01 c0 	mov    DWORD PTR ds:0xc0031eb0,0xc001c442
c001cbf7:	c7 05 b4 1e 03 c0 7d be 01 c0 	mov    DWORD PTR ds:0xc0031eb4,0xc001be7d
c001cc01:	c7 05 b8 1e 03 c0 c5 c4 01 c0 	mov    DWORD PTR ds:0xc0031eb8,0xc001c4c5
c001cc0b:	c7 05 bc 1e 03 c0 40 c0 01 c0 	mov    DWORD PTR ds:0xc0031ebc,0xc001c040
c001cc15:	c7 05 c0 1e 03 c0 ec c4 01 c0 	mov    DWORD PTR ds:0xc0031ec0,0xc001c4ec
c001cc1f:	c7 05 c4 1e 03 c0 61 c5 01 c0 	mov    DWORD PTR ds:0xc0031ec4,0xc001c561
c001cc29:	c7 05 c8 1e 03 c0 99 c6 01 c0 	mov    DWORD PTR ds:0xc0031ec8,0xc001c699
c001cc33:	c7 05 cc 1e 03 c0 1f bc 01 c0 	mov    DWORD PTR ds:0xc0031ecc,0xc001bc1f
c001cc3d:	c7 05 d0 1e 03 c0 89 bc 01 c0 	mov    DWORD PTR ds:0xc0031ed0,0xc001bc89
c001cc47:	c7 05 d4 1e 03 c0 cf bc 01 c0 	mov    DWORD PTR ds:0xc0031ed4,0xc001bccf
c001cc51:	c7 05 d8 1e 03 c0 ad c7 01 c0 	mov    DWORD PTR ds:0xc0031ed8,0xc001c7ad
c001cc5b:	c7 05 dc 1e 03 c0 08 c3 01 c0 	mov    DWORD PTR ds:0xc0031edc,0xc001c308
c001cc65:	c7 05 e0 1e 03 c0 20 bd 01 c0 	mov    DWORD PTR ds:0xc0031ee0,0xc001bd20
c001cc6f:	c7 05 e4 1e 03 c0 1f c8 01 c0 	mov    DWORD PTR ds:0xc0031ee4,0xc001c81f
c001cc79:	c7 05 e8 1e 03 c0 64 c8 01 c0 	mov    DWORD PTR ds:0xc0031ee8,0xc001c864
c001cc83:	c7 05 ec 1e 03 c0 08 b8 01 c0 	mov    DWORD PTR ds:0xc0031eec,0xc001b808
c001cc8d:	c7 05 f0 1e 03 c0 89 b9 01 c0 	mov    DWORD PTR ds:0xc0031ef0,0xc001b989
c001cc97:	c7 05 f4 1e 03 c0 b1 ba 01 c0 	mov    DWORD PTR ds:0xc0031ef4,0xc001bab1
c001cca1:	c7 05 f8 1e 03 c0 f4 b6 01 c0 	mov    DWORD PTR ds:0xc0031ef8,0xc001b6f4
c001ccab:	c7 05 fc 1e 03 c0 63 bb 01 c0 	mov    DWORD PTR ds:0xc0031efc,0xc001bb63
c001ccb5:	c7 05 00 1f 03 c0 6d b7 01 c0 	mov    DWORD PTR ds:0xc0031f00,0xc001b76d
c001ccbf:	c7 05 04 1f 03 c0 84 b7 01 c0 	mov    DWORD PTR ds:0xc0031f04,0xc001b784
c001ccc9:	c3                   	ret    

c001ccca <Sys::systemCall(regs*, void*)>:
c001ccca:	53                   	push   ebx
c001cccb:	83 ec 08             	sub    esp,0x8
c001ccce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccd2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccd5:	83 f8 7f             	cmp    eax,0x7f
c001ccd8:	77 16                	ja     c001ccf0 <Sys::systemCall(regs*, void*)+0x26>
c001ccda:	8b 14 85 40 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1c0]
c001cce1:	85 d2                	test   edx,edx
c001cce3:	74 0b                	je     c001ccf0 <Sys::systemCall(regs*, void*)+0x26>
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	53                   	push   ebx
c001cce9:	ff d2                	call   edx
c001cceb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ccee:	eb 0d                	jmp    c001ccfd <Sys::systemCall(regs*, void*)+0x33>
c001ccf0:	52                   	push   edx
c001ccf1:	52                   	push   edx
c001ccf2:	50                   	push   eax
c001ccf3:	68 17 cd 02 c0       	push   0xc002cd17
c001ccf8:	e8 3a 61 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ccfd:	83 c4 10             	add    esp,0x10
c001cd00:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cd05:	31 d2                	xor    edx,edx
c001cd07:	83 c4 08             	add    esp,0x8
c001cd0a:	5b                   	pop    ebx
c001cd0b:	c3                   	ret    

c001cd0c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cd0c:	55                   	push   ebp
c001cd0d:	57                   	push   edi
c001cd0e:	56                   	push   esi
c001cd0f:	53                   	push   ebx
c001cd10:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cd16:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd1d:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cd24:	85 c0                	test   eax,eax
c001cd26:	0f 95 c1             	setne  cl
c001cd29:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cd31:	0f 94 c2             	sete   dl
c001cd34:	84 d1                	test   cl,dl
c001cd36:	74 23                	je     c001cd5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd38:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cd3e:	74 1b                	je     c001cd5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd40:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd46:	89 da                	mov    edx,ebx
c001cd48:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cd4e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cd54:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cd5b:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cd62:	05 ff 0f 00 00       	add    eax,0xfff
c001cd67:	83 ec 0c             	sub    esp,0xc
c001cd6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd6e:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cd74:	c1 e8 0c             	shr    eax,0xc
c001cd77:	89 fe                	mov    esi,edi
c001cd79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd7d:	c1 ee 0c             	shr    esi,0xc
c001cd80:	6a 01                	push   0x1
c001cd82:	e8 aa 4c ff ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c001cd87:	89 c5                	mov    ebp,eax
c001cd89:	58                   	pop    eax
c001cd8a:	5a                   	pop    edx
c001cd8b:	56                   	push   esi
c001cd8c:	68 9b cd 02 c0       	push   0xc002cd9b
c001cd91:	e8 a1 60 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001cd96:	59                   	pop    ecx
c001cd97:	58                   	pop    eax
c001cd98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd9c:	68 ad cd 02 c0       	push   0xc002cdad
c001cda1:	e8 91 60 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cdaf:	0f 86 31 01 00 00    	jbe    c001cee6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cdb5:	c1 e6 0c             	shl    esi,0xc
c001cdb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdbb:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cdbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdc2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cdc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cdcc:	01 df                	add    edi,ebx
c001cdce:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cdd1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cdd5:	0f 84 08 01 00 00    	je     c001cee3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cddb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cde1:	76 05                	jbe    c001cde8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cde3:	bf 00 10 00 00       	mov    edi,0x1000
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	31 d2                	xor    edx,edx
c001cded:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cdf4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cdf6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cdfa:	50                   	push   eax
c001cdfb:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cdff:	56                   	push   esi
c001ce00:	52                   	push   edx
c001ce01:	57                   	push   edi
c001ce02:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ce09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce0c:	83 c4 20             	add    esp,0x20
c001ce0f:	85 c0                	test   eax,eax
c001ce11:	74 0a                	je     c001ce1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ce13:	53                   	push   ebx
c001ce14:	53                   	push   ebx
c001ce15:	50                   	push   eax
c001ce16:	68 bf cd 02 c0       	push   0xc002cdbf
c001ce1b:	eb 0f                	jmp    c001ce2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ce1d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001ce21:	74 20                	je     c001ce43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ce23:	51                   	push   ecx
c001ce24:	51                   	push   ecx
c001ce25:	6a 00                	push   0x0
c001ce27:	68 ea cd 02 c0       	push   0xc002cdea
c001ce2c:	e8 06 60 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ce31:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce34:	e8 b8 50 ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	31 c0                	xor    eax,eax
c001ce3e:	e9 68 01 00 00       	jmp    c001cfab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001ce43:	fa                   	cli    
c001ce44:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ce4a:	e8 a9 30 ff ff       	call   c000fef8 <Phys::allocatePage()>
c001ce4f:	6a 07                	push   0x7
c001ce51:	89 c7                	mov    edi,eax
c001ce53:	55                   	push   ebp
c001ce54:	50                   	push   eax
c001ce55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce63:	e8 00 54 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce68:	83 c4 0c             	add    esp,0xc
c001ce6b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce72:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce78:	6a 00                	push   0x0
c001ce7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce82:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce88:	e8 35 52 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ce8d:	58                   	pop    eax
c001ce8e:	5a                   	pop    edx
c001ce8f:	68 07 0c 00 00       	push   0xc07
c001ce94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ce98:	57                   	push   edi
c001ce99:	89 ef                	mov    edi,ebp
c001ce9b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cea2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cea8:	6a 00                	push   0x0
c001ceaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ceaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ceb2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ceb8:	e8 67 57 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cebd:	b9 00 10 00 00       	mov    ecx,0x1000
c001cec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cec4:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001cec9:	83 c4 20             	add    esp,0x20
c001cecc:	48                   	dec    eax
c001cecd:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ced2:	85 c0                	test   eax,eax
c001ced4:	75 01                	jne    c001ced7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001ced6:	fb                   	sti    
c001ced7:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cede:	e9 df fe ff ff       	jmp    c001cdc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cee3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cee6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ceee:	0f 86 a9 00 00 00    	jbe    c001cf9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cef4:	fa                   	cli    
c001cef5:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001cefb:	51                   	push   ecx
c001cefc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf03:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf09:	6a 00                	push   0x0
c001cf0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf13:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf19:	e8 a4 51 ff ff       	call   c00120c2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cf1e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf22:	c1 e6 0c             	shl    esi,0xc
c001cf25:	01 de                	add    esi,ebx
c001cf27:	83 c4 10             	add    esp,0x10
c001cf2a:	39 de                	cmp    esi,ebx
c001cf2c:	74 61                	je     c001cf8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cf2e:	e8 c5 2f ff ff       	call   c000fef8 <Phys::allocatePage()>
c001cf33:	6a 07                	push   0x7
c001cf35:	89 c7                	mov    edi,eax
c001cf37:	55                   	push   ebp
c001cf38:	50                   	push   eax
c001cf39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf41:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf47:	e8 1c 53 ff ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf4c:	58                   	pop    eax
c001cf4d:	5a                   	pop    edx
c001cf4e:	68 07 0c 00 00       	push   0xc07
c001cf53:	53                   	push   ebx
c001cf54:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cf5a:	57                   	push   edi
c001cf5b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf62:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf68:	6a 00                	push   0x0
c001cf6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf72:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf78:	e8 a7 56 ff ff       	call   c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf7d:	83 c4 1c             	add    esp,0x1c
c001cf80:	68 00 10 00 00       	push   0x1000
c001cf85:	6a 00                	push   0x0
c001cf87:	55                   	push   ebp
c001cf88:	e8 c3 37 fe ff       	call   c0000750 <memset>
c001cf8d:	eb 98                	jmp    c001cf27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cf8f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001cf94:	48                   	dec    eax
c001cf95:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001cf9a:	75 01                	jne    c001cf9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf9c:	fb                   	sti    
c001cf9d:	83 ec 0c             	sub    esp,0xc
c001cfa0:	55                   	push   ebp
c001cfa1:	e8 4b 4f ff ff       	call   c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cfa6:	83 c4 10             	add    esp,0x10
c001cfa9:	b0 01                	mov    al,0x1
c001cfab:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cfb1:	5b                   	pop    ebx
c001cfb2:	5e                   	pop    esi
c001cfb3:	5f                   	pop    edi
c001cfb4:	5d                   	pop    ebp
c001cfb5:	c3                   	ret    

c001cfb6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cfb6:	55                   	push   ebp
c001cfb7:	57                   	push   edi
c001cfb8:	56                   	push   esi
c001cfb9:	53                   	push   ebx
c001cfba:	83 ec 48             	sub    esp,0x48
c001cfbd:	68 14 01 00 00       	push   0x114
c001cfc2:	e8 c5 28 ff ff       	call   c000f88c <malloc>
c001cfc7:	83 c4 0c             	add    esp,0xc
c001cfca:	89 c6                	mov    esi,eax
c001cfcc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cfd0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cfd4:	50                   	push   eax
c001cfd5:	e8 bc 63 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001cfda:	58                   	pop    eax
c001cfdb:	5a                   	pop    edx
c001cfdc:	6a 01                	push   0x1
c001cfde:	56                   	push   esi
c001cfdf:	e8 16 64 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	85 c0                	test   eax,eax
c001cfe9:	0f 85 47 01 00 00    	jne    c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfef:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cff7:	83 ec 0c             	sub    esp,0xc
c001cffa:	6a 34                	push   0x34
c001cffc:	e8 8b 28 ff ff       	call   c000f88c <malloc>
c001d001:	89 c3                	mov    ebx,eax
c001d003:	58                   	pop    eax
c001d004:	8b 06                	mov    eax,DWORD PTR [esi]
c001d006:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d00a:	57                   	push   edi
c001d00b:	53                   	push   ebx
c001d00c:	6a 00                	push   0x0
c001d00e:	6a 34                	push   0x34
c001d010:	56                   	push   esi
c001d011:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d014:	83 c4 20             	add    esp,0x20
c001d017:	85 c0                	test   eax,eax
c001d019:	0f 85 17 01 00 00    	jne    c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d01f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d025:	0f 85 0b 01 00 00    	jne    c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d02b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d02e:	85 c0                	test   eax,eax
c001d030:	0f 84 00 01 00 00    	je     c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d036:	31 d2                	xor    edx,edx
c001d038:	55                   	push   ebp
c001d039:	52                   	push   edx
c001d03a:	50                   	push   eax
c001d03b:	56                   	push   esi
c001d03c:	e8 77 64 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	85 c0                	test   eax,eax
c001d046:	0f 85 ea 00 00 00    	jne    c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d04c:	83 ec 0c             	sub    esp,0xc
c001d04f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d052:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d05a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d05e:	0f af c2             	imul   eax,edx
c001d061:	50                   	push   eax
c001d062:	e8 25 28 ff ff       	call   c000f88c <malloc>
c001d067:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d069:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d06d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d074:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d078:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d07c:	0f af c2             	imul   eax,edx
c001d07f:	99                   	cdq    
c001d080:	52                   	push   edx
c001d081:	50                   	push   eax
c001d082:	56                   	push   esi
c001d083:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d086:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d089:	83 c4 20             	add    esp,0x20
c001d08c:	85 c0                	test   eax,eax
c001d08e:	0f 84 a2 00 00 00    	je     c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d094:	31 d2                	xor    edx,edx
c001d096:	51                   	push   ecx
c001d097:	52                   	push   edx
c001d098:	50                   	push   eax
c001d099:	56                   	push   esi
c001d09a:	e8 19 64 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d09f:	83 c4 10             	add    esp,0x10
c001d0a2:	85 c0                	test   eax,eax
c001d0a4:	0f 85 8c 00 00 00    	jne    c001d136 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0b1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0b5:	31 ed                	xor    ebp,ebp
c001d0b7:	0f af c2             	imul   eax,edx
c001d0ba:	50                   	push   eax
c001d0bb:	e8 cc 27 ff ff       	call   c000f88c <malloc>
c001d0c0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d0c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0cd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0d1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0d5:	0f af c2             	imul   eax,edx
c001d0d8:	99                   	cdq    
c001d0d9:	52                   	push   edx
c001d0da:	50                   	push   eax
c001d0db:	56                   	push   esi
c001d0dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0df:	83 c4 20             	add    esp,0x20
c001d0e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d0ea:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d0ee:	0f 86 80 00 00 00    	jbe    c001d174 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d0f4:	0f b7 fd             	movzx  edi,bp
c001d0f7:	c1 e7 05             	shl    edi,0x5
c001d0fa:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d0fe:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d101:	75 6b                	jne    c001d16e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d103:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d106:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d10a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d10d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d111:	52                   	push   edx
c001d112:	31 d2                	xor    edx,edx
c001d114:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d117:	52                   	push   edx
c001d118:	50                   	push   eax
c001d119:	56                   	push   esi
c001d11a:	e8 99 63 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	85 c0                	test   eax,eax
c001d124:	74 17                	je     c001d13d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d126:	83 ec 0c             	sub    esp,0xc
c001d129:	68 16 ce 02 c0       	push   0xc002ce16
c001d12e:	e8 04 5d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001d133:	83 c4 10             	add    esp,0x10
c001d136:	31 c0                	xor    eax,eax
c001d138:	e9 87 00 00 00       	jmp    c001d1c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d13d:	83 ec 0c             	sub    esp,0xc
c001d140:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d143:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d146:	50                   	push   eax
c001d147:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d14b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d14f:	56                   	push   esi
c001d150:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d154:	e8 b3 fb ff ff       	call   c001cd0c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d15d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d161:	83 c4 20             	add    esp,0x20
c001d164:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d168:	73 04                	jae    c001d16e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d16a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d16e:	45                   	inc    ebp
c001d16f:	e9 76 ff ff ff       	jmp    c001d0ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d174:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d178:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d180:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d18f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d194:	05 00 10 00 00       	add    eax,0x1000
c001d199:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d19c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1a0:	e8 f7 26 ff ff       	call   c000f89c <free>
c001d1a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1a8:	e8 ef 26 ff ff       	call   c000f89c <free>
c001d1ad:	58                   	pop    eax
c001d1ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1b2:	e8 e5 26 ff ff       	call   c000f89c <free>
c001d1b7:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1ba:	e8 99 62 ff ff       	call   c0013458 <File::close()>
c001d1bf:	83 c4 10             	add    esp,0x10
c001d1c2:	b0 01                	mov    al,0x1
c001d1c4:	83 c4 3c             	add    esp,0x3c
c001d1c7:	5b                   	pop    ebx
c001d1c8:	5e                   	pop    esi
c001d1c9:	5f                   	pop    edi
c001d1ca:	5d                   	pop    ebp
c001d1cb:	c3                   	ret    

c001d1cc <Thr::runtimeReferenceHelper()>:
c001d1cc:	83 ec 18             	sub    esp,0x18
c001d1cf:	68 1e ce 02 c0       	push   0xc002ce1e
c001d1d4:	e8 5e 5c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001d1d9:	fa                   	cli    
c001d1da:	83 c4 10             	add    esp,0x10
c001d1dd:	eb fe                	jmp    c001d1dd <Thr::runtimeReferenceHelper()+0x11>

c001d1df <Thr::getAddressOfKernelSymbol(char const*)>:
c001d1df:	57                   	push   edi
c001d1e0:	56                   	push   esi
c001d1e1:	53                   	push   ebx
c001d1e2:	31 db                	xor    ebx,ebx
c001d1e4:	39 1d e0 27 03 c0    	cmp    DWORD PTR ds:0xc00327e0,ebx
c001d1ea:	7e 3c                	jle    c001d228 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d1ec:	8b 34 9d 60 27 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd8a0]
c001d1f3:	31 ff                	xor    edi,edi
c001d1f5:	39 3c 9d 60 26 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd9a0],edi
c001d1fc:	7e 27                	jle    c001d225 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d1fe:	50                   	push   eax
c001d1ff:	50                   	push   eax
c001d200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d204:	8b 06                	mov    eax,DWORD PTR [esi]
c001d206:	03 04 9d e0 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd920]
c001d20d:	50                   	push   eax
c001d20e:	e8 85 36 fe ff       	call   c0000898 <strcmp>
c001d213:	83 c4 10             	add    esp,0x10
c001d216:	85 c0                	test   eax,eax
c001d218:	75 05                	jne    c001d21f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d21a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d21d:	eb 0b                	jmp    c001d22a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d21f:	83 c6 10             	add    esi,0x10
c001d222:	47                   	inc    edi
c001d223:	eb d0                	jmp    c001d1f5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d225:	43                   	inc    ebx
c001d226:	eb bc                	jmp    c001d1e4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d228:	31 c0                	xor    eax,eax
c001d22a:	5b                   	pop    ebx
c001d22b:	5e                   	pop    esi
c001d22c:	5f                   	pop    edi
c001d22d:	c3                   	ret    

c001d22e <Thr::loadKernelSymbolTable(char const*)>:
c001d22e:	55                   	push   ebp
c001d22f:	57                   	push   edi
c001d230:	56                   	push   esi
c001d231:	53                   	push   ebx
c001d232:	83 ec 68             	sub    esp,0x68
c001d235:	8b 35 30 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032830
c001d23b:	68 14 01 00 00       	push   0x114
c001d240:	e8 47 26 ff ff       	call   c000f88c <malloc>
c001d245:	83 c4 0c             	add    esp,0xc
c001d248:	89 c3                	mov    ebx,eax
c001d24a:	56                   	push   esi
c001d24b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d24f:	50                   	push   eax
c001d250:	e8 41 61 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001d255:	5e                   	pop    esi
c001d256:	5f                   	pop    edi
c001d257:	6a 01                	push   0x1
c001d259:	53                   	push   ebx
c001d25a:	e8 9b 61 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001d25f:	83 c4 10             	add    esp,0x10
c001d262:	85 c0                	test   eax,eax
c001d264:	74 0a                	je     c001d270 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d266:	83 ec 0c             	sub    esp,0xc
c001d269:	68 40 ce 02 c0       	push   0xc002ce40
c001d26e:	eb 34                	jmp    c001d2a4 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d270:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d278:	83 ec 0c             	sub    esp,0xc
c001d27b:	6a 34                	push   0x34
c001d27d:	e8 0a 26 ff ff       	call   c000f88c <malloc>
c001d282:	59                   	pop    ecx
c001d283:	89 c7                	mov    edi,eax
c001d285:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d289:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d28b:	56                   	push   esi
c001d28c:	57                   	push   edi
c001d28d:	6a 00                	push   0x0
c001d28f:	6a 34                	push   0x34
c001d291:	53                   	push   ebx
c001d292:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d295:	83 c4 20             	add    esp,0x20
c001d298:	85 c0                	test   eax,eax
c001d29a:	74 17                	je     c001d2b3 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	68 57 ce 02 c0       	push   0xc002ce57
c001d2a4:	e8 28 d6 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	31 c0                	xor    eax,eax
c001d2ae:	e9 31 02 00 00       	jmp    c001d4e4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d2b3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d2b9:	75 e1                	jne    c001d29c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2bb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d2be:	85 c0                	test   eax,eax
c001d2c0:	74 da                	je     c001d29c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2c2:	52                   	push   edx
c001d2c3:	31 d2                	xor    edx,edx
c001d2c5:	52                   	push   edx
c001d2c6:	50                   	push   eax
c001d2c7:	53                   	push   ebx
c001d2c8:	e8 eb 61 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	85 c0                	test   eax,eax
c001d2d2:	75 c8                	jne    c001d29c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d2db:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d2df:	31 ed                	xor    ebp,ebp
c001d2e1:	0f af c2             	imul   eax,edx
c001d2e4:	50                   	push   eax
c001d2e5:	e8 a2 25 ff ff       	call   c000f88c <malloc>
c001d2ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2f0:	89 34 24             	mov    DWORD PTR [esp],esi
c001d2f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d2fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d2ff:	0f af c2             	imul   eax,edx
c001d302:	99                   	cdq    
c001d303:	52                   	push   edx
c001d304:	50                   	push   eax
c001d305:	53                   	push   ebx
c001d306:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d309:	83 c4 20             	add    esp,0x20
c001d30c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d314:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d31c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d32c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d330:	0f 86 aa 00 00 00    	jbe    c001d3e0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d336:	0f b7 f5             	movzx  esi,bp
c001d339:	6b f6 28             	imul   esi,esi,0x28
c001d33c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d340:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d343:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d347:	50                   	push   eax
c001d348:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d34c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d350:	8b 16                	mov    edx,DWORD PTR [esi]
c001d352:	6b c0 28             	imul   eax,eax,0x28
c001d355:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d359:	89 d0                	mov    eax,edx
c001d35b:	31 d2                	xor    edx,edx
c001d35d:	52                   	push   edx
c001d35e:	50                   	push   eax
c001d35f:	53                   	push   ebx
c001d360:	e8 53 61 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d365:	83 c4 0c             	add    esp,0xc
c001d368:	6a 20                	push   0x20
c001d36a:	6a 00                	push   0x0
c001d36c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d370:	52                   	push   edx
c001d371:	e8 da 33 fe ff       	call   c0000750 <memset>
c001d376:	58                   	pop    eax
c001d377:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d379:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d37d:	51                   	push   ecx
c001d37e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d382:	52                   	push   edx
c001d383:	6a 00                	push   0x0
c001d385:	6a 1f                	push   0x1f
c001d387:	53                   	push   ebx
c001d388:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d38b:	83 c4 18             	add    esp,0x18
c001d38e:	68 6e ce 02 c0       	push   0xc002ce6e
c001d393:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d397:	52                   	push   edx
c001d398:	e8 fb 34 fe ff       	call   c0000898 <strcmp>
c001d39d:	83 c4 10             	add    esp,0x10
c001d3a0:	85 c0                	test   eax,eax
c001d3a2:	75 0f                	jne    c001d3b3 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d3a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3b3:	50                   	push   eax
c001d3b4:	50                   	push   eax
c001d3b5:	68 76 ce 02 c0       	push   0xc002ce76
c001d3ba:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d3be:	50                   	push   eax
c001d3bf:	e8 d4 34 fe ff       	call   c0000898 <strcmp>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	85 c0                	test   eax,eax
c001d3c9:	75 0f                	jne    c001d3da <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d3cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d3da:	45                   	inc    ebp
c001d3db:	e9 4c ff ff ff       	jmp    c001d32c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d3e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d3e5:	75 10                	jne    c001d3f7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	68 7e ce 02 c0       	push   0xc002ce7e
c001d3ef:	e8 dd d4 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d3fc:	75 10                	jne    c001d40e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	68 7e ce 02 c0       	push   0xc002ce7e
c001d406:	e8 c6 d4 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001d40b:	83 c4 10             	add    esp,0x10
c001d40e:	31 d2                	xor    edx,edx
c001d410:	50                   	push   eax
c001d411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d415:	52                   	push   edx
c001d416:	50                   	push   eax
c001d417:	53                   	push   ebx
c001d418:	e8 9b 60 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d41d:	5a                   	pop    edx
c001d41e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d422:	e8 65 24 ff ff       	call   c000f88c <malloc>
c001d427:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d42b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d42f:	31 c9                	xor    ecx,ecx
c001d431:	5e                   	pop    esi
c001d432:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d434:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d438:	55                   	push   ebp
c001d439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d43d:	51                   	push   ecx
c001d43e:	52                   	push   edx
c001d43f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d443:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d447:	53                   	push   ebx
c001d448:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d44b:	83 c4 14             	add    esp,0x14
c001d44e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d452:	e8 35 24 ff ff       	call   c000f88c <malloc>
c001d457:	89 c6                	mov    esi,eax
c001d459:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d45b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d45e:	56                   	push   esi
c001d45f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d463:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d467:	51                   	push   ecx
c001d468:	52                   	push   edx
c001d469:	53                   	push   ebx
c001d46a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d46d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d471:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c001d477:	83 c4 1c             	add    esp,0x1c
c001d47a:	c1 e8 04             	shr    eax,0x4
c001d47d:	89 04 95 60 26 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd9a0],eax
c001d484:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d488:	31 d2                	xor    edx,edx
c001d48a:	52                   	push   edx
c001d48b:	50                   	push   eax
c001d48c:	53                   	push   ebx
c001d48d:	e8 26 60 ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d492:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d494:	31 d2                	xor    edx,edx
c001d496:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d499:	56                   	push   esi
c001d49a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d49e:	52                   	push   edx
c001d49f:	50                   	push   eax
c001d4a0:	53                   	push   ebx
c001d4a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4a4:	83 c4 14             	add    esp,0x14
c001d4a7:	53                   	push   ebx
c001d4a8:	e8 ab 5f ff ff       	call   c0013458 <File::close()>
c001d4ad:	5d                   	pop    ebp
c001d4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4b2:	e8 e5 23 ff ff       	call   c000f89c <free>
c001d4b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4ba:	e8 dd 23 ff ff       	call   c000f89c <free>
c001d4bf:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001d4c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4c8:	8d 50 01             	lea    edx,[eax+0x1]
c001d4cb:	89 0c 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],ecx
c001d4d2:	89 34 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],esi
c001d4d9:	89 15 e0 27 03 c0    	mov    DWORD PTR ds:0xc00327e0,edx
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	b0 01                	mov    al,0x1
c001d4e4:	83 c4 5c             	add    esp,0x5c
c001d4e7:	5b                   	pop    ebx
c001d4e8:	5e                   	pop    esi
c001d4e9:	5f                   	pop    edi
c001d4ea:	5d                   	pop    ebp
c001d4eb:	c3                   	ret    

c001d4ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d4ec:	55                   	push   ebp
c001d4ed:	57                   	push   edi
c001d4ee:	56                   	push   esi
c001d4ef:	53                   	push   ebx
c001d4f0:	81 ec 68 03 00 00    	sub    esp,0x368
c001d4f6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d4fd:	8b 1d 30 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032830
c001d503:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d507:	68 14 01 00 00       	push   0x114
c001d50c:	e8 7b 23 ff ff       	call   c000f88c <malloc>
c001d511:	83 c4 0c             	add    esp,0xc
c001d514:	89 c5                	mov    ebp,eax
c001d516:	53                   	push   ebx
c001d517:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d51e:	50                   	push   eax
c001d51f:	e8 72 5e ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001d524:	5e                   	pop    esi
c001d525:	5f                   	pop    edi
c001d526:	6a 01                	push   0x1
c001d528:	55                   	push   ebp
c001d529:	e8 cc 5e ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	85 c0                	test   eax,eax
c001d533:	0f 85 a7 06 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d539:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d541:	83 ec 0c             	sub    esp,0xc
c001d544:	6a 34                	push   0x34
c001d546:	e8 41 23 ff ff       	call   c000f88c <malloc>
c001d54b:	5b                   	pop    ebx
c001d54c:	89 c7                	mov    edi,eax
c001d54e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d552:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d555:	53                   	push   ebx
c001d556:	57                   	push   edi
c001d557:	6a 00                	push   0x0
c001d559:	6a 34                	push   0x34
c001d55b:	55                   	push   ebp
c001d55c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d55f:	83 c4 20             	add    esp,0x20
c001d562:	85 c0                	test   eax,eax
c001d564:	0f 85 76 06 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d56a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d570:	0f 85 6a 06 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d576:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d579:	85 c0                	test   eax,eax
c001d57b:	0f 84 5f 06 00 00    	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d581:	31 d2                	xor    edx,edx
c001d583:	51                   	push   ecx
c001d584:	52                   	push   edx
c001d585:	50                   	push   eax
c001d586:	55                   	push   ebp
c001d587:	e8 2c 5f ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	85 c0                	test   eax,eax
c001d591:	0f 85 49 06 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d597:	83 ec 0c             	sub    esp,0xc
c001d59a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d59d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d5a5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a9:	0f af c2             	imul   eax,edx
c001d5ac:	50                   	push   eax
c001d5ad:	e8 da 22 ff ff       	call   c000f88c <malloc>
c001d5b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d5b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c8:	0f af c2             	imul   eax,edx
c001d5cb:	99                   	cdq    
c001d5cc:	52                   	push   edx
c001d5cd:	50                   	push   eax
c001d5ce:	55                   	push   ebp
c001d5cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5d2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d5d5:	83 c4 20             	add    esp,0x20
c001d5d8:	85 c0                	test   eax,eax
c001d5da:	0f 84 00 06 00 00    	je     c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5e0:	52                   	push   edx
c001d5e1:	31 d2                	xor    edx,edx
c001d5e3:	52                   	push   edx
c001d5e4:	50                   	push   eax
c001d5e5:	55                   	push   ebp
c001d5e6:	e8 cd 5e ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	85 c0                	test   eax,eax
c001d5f0:	0f 85 ea 05 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5f6:	83 ec 0c             	sub    esp,0xc
c001d5f9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d5fd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d601:	31 f6                	xor    esi,esi
c001d603:	0f af c2             	imul   eax,edx
c001d606:	50                   	push   eax
c001d607:	e8 80 22 ff ff       	call   c000f88c <malloc>
c001d60c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d60f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d613:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d61a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d61e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d622:	0f af c2             	imul   eax,edx
c001d625:	99                   	cdq    
c001d626:	52                   	push   edx
c001d627:	50                   	push   eax
c001d628:	55                   	push   ebp
c001d629:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d62c:	83 c4 20             	add    esp,0x20
c001d62f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d633:	0f 86 8a 00 00 00    	jbe    c001d6c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d639:	0f b7 de             	movzx  ebx,si
c001d63c:	c1 e3 05             	shl    ebx,0x5
c001d63f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d643:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d646:	75 75                	jne    c001d6bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d648:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d64b:	31 d2                	xor    edx,edx
c001d64d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d651:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d658:	50                   	push   eax
c001d659:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d65c:	52                   	push   edx
c001d65d:	50                   	push   eax
c001d65e:	55                   	push   ebp
c001d65f:	e8 54 5e ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	85 c0                	test   eax,eax
c001d669:	0f 85 71 05 00 00    	jne    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d66f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d676:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d679:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d67d:	31 d2                	xor    edx,edx
c001d67f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d683:	83 ec 0c             	sub    esp,0xc
c001d686:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d68a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d691:	50                   	push   eax
c001d692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d69a:	52                   	push   edx
c001d69b:	50                   	push   eax
c001d69c:	55                   	push   ebp
c001d69d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6a0:	83 c4 1c             	add    esp,0x1c
c001d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d6a6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d6a9:	50                   	push   eax
c001d6aa:	6a 00                	push   0x0
c001d6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6b0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d6b4:	50                   	push   eax
c001d6b5:	e8 96 30 fe ff       	call   c0000750 <memset>
c001d6ba:	83 c4 10             	add    esp,0x10
c001d6bd:	46                   	inc    esi
c001d6be:	e9 6c ff ff ff       	jmp    c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d6c3:	53                   	push   ebx
c001d6c4:	31 db                	xor    ebx,ebx
c001d6c6:	68 00 01 00 00       	push   0x100
c001d6cb:	6a 00                	push   0x0
c001d6cd:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d6d1:	50                   	push   eax
c001d6d2:	e8 79 30 fe ff       	call   c0000750 <memset>
c001d6d7:	83 c4 0c             	add    esp,0xc
c001d6da:	68 00 01 00 00       	push   0x100
c001d6df:	6a 00                	push   0x0
c001d6e1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d6e8:	50                   	push   eax
c001d6e9:	e8 62 30 fe ff       	call   c0000750 <memset>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d6f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d701:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d711:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d719:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d71d:	0f 86 30 01 00 00    	jbe    c001d853 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d723:	0f b7 f3             	movzx  esi,bx
c001d726:	6b f6 28             	imul   esi,esi,0x28
c001d729:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d72d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d734:	52                   	push   edx
c001d735:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d739:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d73d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d73f:	6b d2 28             	imul   edx,edx,0x28
c001d742:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d746:	31 d2                	xor    edx,edx
c001d748:	52                   	push   edx
c001d749:	50                   	push   eax
c001d74a:	55                   	push   ebp
c001d74b:	e8 68 5d ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d750:	83 c4 0c             	add    esp,0xc
c001d753:	6a 20                	push   0x20
c001d755:	6a 00                	push   0x0
c001d757:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d75e:	51                   	push   ecx
c001d75f:	e8 ec 2f fe ff       	call   c0000750 <memset>
c001d764:	59                   	pop    ecx
c001d765:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d768:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d76c:	52                   	push   edx
c001d76d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d774:	51                   	push   ecx
c001d775:	6a 00                	push   0x0
c001d777:	6a 1f                	push   0x1f
c001d779:	55                   	push   ebp
c001d77a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d77d:	83 c4 1c             	add    esp,0x1c
c001d780:	6a 09                	push   0x9
c001d782:	68 98 ce 02 c0       	push   0xc002ce98
c001d787:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d78e:	51                   	push   ecx
c001d78f:	e8 b8 2e fe ff       	call   c000064c <memcmp>
c001d794:	83 c4 10             	add    esp,0x10
c001d797:	85 c0                	test   eax,eax
c001d799:	75 21                	jne    c001d7bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7a3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d7a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7ab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7ae:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d7b5:	89 d0                	mov    eax,edx
c001d7b7:	40                   	inc    eax
c001d7b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7bc:	50                   	push   eax
c001d7bd:	6a 09                	push   0x9
c001d7bf:	68 a2 ce 02 c0       	push   0xc002cea2
c001d7c4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7cb:	50                   	push   eax
c001d7cc:	e8 7b 2e fe ff       	call   c000064c <memcmp>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	85 c0                	test   eax,eax
c001d7d6:	75 21                	jne    c001d7f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7e0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d7e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7eb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d7f2:	89 d0                	mov    eax,edx
c001d7f4:	40                   	inc    eax
c001d7f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7f9:	50                   	push   eax
c001d7fa:	50                   	push   eax
c001d7fb:	68 6e ce 02 c0       	push   0xc002ce6e
c001d800:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d807:	50                   	push   eax
c001d808:	e8 8b 30 fe ff       	call   c0000898 <strcmp>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	85 c0                	test   eax,eax
c001d812:	75 0f                	jne    c001d823 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d814:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d817:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d81b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d81f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d823:	50                   	push   eax
c001d824:	50                   	push   eax
c001d825:	68 76 ce 02 c0       	push   0xc002ce76
c001d82a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d831:	50                   	push   eax
c001d832:	e8 61 30 fe ff       	call   c0000898 <strcmp>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	85 c0                	test   eax,eax
c001d83c:	75 0f                	jne    c001d84d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d83e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d841:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d849:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d84d:	43                   	inc    ebx
c001d84e:	e9 c6 fe ff ff       	jmp    c001d719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d853:	31 d2                	xor    edx,edx
c001d855:	50                   	push   eax
c001d856:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d85a:	52                   	push   edx
c001d85b:	50                   	push   eax
c001d85c:	55                   	push   ebp
c001d85d:	e8 56 5c ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d862:	58                   	pop    eax
c001d863:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d867:	e8 20 20 ff ff       	call   c000f88c <malloc>
c001d86c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d86f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d873:	31 d2                	xor    edx,edx
c001d875:	58                   	pop    eax
c001d876:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d87a:	53                   	push   ebx
c001d87b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d87f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d883:	52                   	push   edx
c001d884:	50                   	push   eax
c001d885:	55                   	push   ebp
c001d886:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d889:	83 c4 14             	add    esp,0x14
c001d88c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d890:	e8 f7 1f ff ff       	call   c000f88c <malloc>
c001d895:	31 d2                	xor    edx,edx
c001d897:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d89b:	83 c4 0c             	add    esp,0xc
c001d89e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8a2:	52                   	push   edx
c001d8a3:	50                   	push   eax
c001d8a4:	55                   	push   ebp
c001d8a5:	e8 0e 5c ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d8aa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8ad:	31 d2                	xor    edx,edx
c001d8af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d8b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d8ba:	52                   	push   edx
c001d8bb:	50                   	push   eax
c001d8bc:	55                   	push   ebp
c001d8bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8c0:	83 c4 20             	add    esp,0x20
c001d8c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d8cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8cf:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d8d3:	0f 84 0b 03 00 00    	je     c001dbe4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d8d9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d8e0:	31 d2                	xor    edx,edx
c001d8e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8e6:	c1 e8 03             	shr    eax,0x3
c001d8e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d8ed:	51                   	push   ecx
c001d8ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8f2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d8f6:	52                   	push   edx
c001d8f7:	50                   	push   eax
c001d8f8:	55                   	push   ebp
c001d8f9:	e8 ba 5b ff ff       	call   c00134b8 <File::seek(unsigned long long)>
c001d8fe:	5b                   	pop    ebx
c001d8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d903:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d90a:	e8 7d 1f ff ff       	call   c000f88c <malloc>
c001d90f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d916:	31 d2                	xor    edx,edx
c001d918:	5e                   	pop    esi
c001d919:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d91d:	50                   	push   eax
c001d91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d922:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d926:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d92d:	52                   	push   edx
c001d92e:	50                   	push   eax
c001d92f:	55                   	push   ebp
c001d930:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d933:	83 c4 20             	add    esp,0x20
c001d936:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d93e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d942:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d946:	0f 8d 7c 02 00 00    	jge    c001dbc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d954:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d959:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d95c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d960:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d964:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d968:	89 d8                	mov    eax,ebx
c001d96a:	c1 e8 08             	shr    eax,0x8
c001d96d:	89 c6                	mov    esi,eax
c001d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d973:	c1 e6 04             	shl    esi,0x4
c001d976:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d97a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d97d:	85 d2                	test   edx,edx
c001d97f:	0f 85 bf 00 00 00    	jne    c001da44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d985:	83 ec 0c             	sub    esp,0xc
c001d988:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d98c:	03 06                	add    eax,DWORD PTR [esi]
c001d98e:	50                   	push   eax
c001d98f:	e8 4b f8 ff ff       	call   c001d1df <Thr::getAddressOfKernelSymbol(char const*)>
c001d994:	83 c4 10             	add    esp,0x10
c001d997:	89 c2                	mov    edx,eax
c001d999:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d99e:	85 c0                	test   eax,eax
c001d9a0:	0f 85 9e 00 00 00    	jne    c001da44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9a6:	83 ec 0c             	sub    esp,0xc
c001d9a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9ad:	03 06                	add    eax,DWORD PTR [esi]
c001d9af:	50                   	push   eax
c001d9b0:	e8 8a 0b ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d9b5:	83 c4 10             	add    esp,0x10
c001d9b8:	89 c2                	mov    edx,eax
c001d9ba:	85 c0                	test   eax,eax
c001d9bc:	0f 85 82 00 00 00    	jne    c001da44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d9c6:	50                   	push   eax
c001d9c7:	50                   	push   eax
c001d9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cc:	03 06                	add    eax,DWORD PTR [esi]
c001d9ce:	50                   	push   eax
c001d9cf:	68 ac ce 02 c0       	push   0xc002ceac
c001d9d4:	e8 5e 54 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001d9d9:	58                   	pop    eax
c001d9da:	5a                   	pop    edx
c001d9db:	68 c6 ce 02 c0       	push   0xc002cec6
c001d9e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9e7:	50                   	push   eax
c001d9e8:	e8 1f 2e fe ff       	call   c000080c <strcpy>
c001d9ed:	59                   	pop    ecx
c001d9ee:	58                   	pop    eax
c001d9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f3:	03 06                	add    eax,DWORD PTR [esi]
c001d9f5:	50                   	push   eax
c001d9f6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9fd:	50                   	push   eax
c001d9fe:	e8 49 2f fe ff       	call   c000094c <strcat>
c001da03:	58                   	pop    eax
c001da04:	5a                   	pop    edx
c001da05:	68 5c cf 02 c0       	push   0xc002cf5c
c001da0a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da11:	50                   	push   eax
c001da12:	e8 35 2f fe ff       	call   c000094c <strcat>
c001da17:	83 c4 10             	add    esp,0x10
c001da1a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da1f:	0f 84 5d 01 00 00    	je     c001db82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da2f:	50                   	push   eax
c001da30:	e8 9c ce ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001da35:	83 c4 10             	add    esp,0x10
c001da38:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001da3c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da40:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001da44:	80 fb 01             	cmp    bl,0x1
c001da47:	0f 85 88 00 00 00    	jne    c001dad5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001da4d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001da54:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001da58:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001da5c:	01 ce                	add    esi,ecx
c001da5e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da64:	0f 94 c0             	sete   al
c001da67:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da6d:	0f 94 c3             	sete   bl
c001da70:	09 c3                	or     ebx,eax
c001da72:	8b 06                	mov    eax,DWORD PTR [esi]
c001da74:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001da79:	74 41                	je     c001dabc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001da7b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001da7e:	84 db                	test   bl,bl
c001da80:	75 15                	jne    c001da97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001da82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da86:	66 83 f8 0c          	cmp    ax,0xc
c001da8a:	76 05                	jbe    c001da91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001da8c:	b8 0c 00 00 00       	mov    eax,0xc
c001da91:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001da95:	76 37                	jbe    c001dace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da97:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001da9b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001daa0:	0f 84 dc 00 00 00    	je     c001db82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001daa6:	83 ec 0c             	sub    esp,0xc
c001daa9:	68 dd ce 02 c0       	push   0xc002cedd
c001daae:	e8 1e ce ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001daba:	eb 12                	jmp    c001dace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dabc:	01 c1                	add    ecx,eax
c001dabe:	84 db                	test   bl,bl
c001dac0:	75 0c                	jne    c001dace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dac2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dac6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001daca:	77 02                	ja     c001dace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dacc:	01 d1                	add    ecx,edx
c001dace:	89 0e                	mov    DWORD PTR [esi],ecx
c001dad0:	e9 ea 00 00 00       	jmp    c001dbbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dad5:	80 fb 02             	cmp    bl,0x2
c001dad8:	75 7c                	jne    c001db56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001dada:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001dae1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001dae5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001dae9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001daef:	74 20                	je     c001db11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001daf1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001daf7:	74 18                	je     c001db11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001daf9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dafd:	b9 0a 00 00 00       	mov    ecx,0xa
c001db02:	66 83 f8 0e          	cmp    ax,0xe
c001db06:	77 03                	ja     c001db0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001db08:	8d 48 fc             	lea    ecx,[eax-0x4]
c001db0b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001db0f:	76 1f                	jbe    c001db30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001db11:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001db15:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db1a:	74 66                	je     c001db82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	68 f9 ce 02 c0       	push   0xc002cef9
c001db24:	e8 a8 cd ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db30:	8b 06                	mov    eax,DWORD PTR [esi]
c001db32:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db37:	74 13                	je     c001db4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001db39:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db3d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001db44:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001db48:	01 c8                	add    eax,ecx
c001db4a:	eb 04                	jmp    c001db50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001db4c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001db50:	01 c2                	add    edx,eax
c001db52:	89 16                	mov    DWORD PTR [esi],edx
c001db54:	eb 69                	jmp    c001dbbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db56:	0f b6 db             	movzx  ebx,bl
c001db59:	50                   	push   eax
c001db5a:	50                   	push   eax
c001db5b:	53                   	push   ebx
c001db5c:	68 15 cf 02 c0       	push   0xc002cf15
c001db61:	e8 d1 52 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db6e:	74 12                	je     c001db82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db70:	83 ec 0c             	sub    esp,0xc
c001db73:	68 20 cf 02 c0       	push   0xc002cf20
c001db78:	e8 54 cd ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001db7d:	83 c4 10             	add    esp,0x10
c001db80:	eb 3d                	jmp    c001dbbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db82:	83 ec 0c             	sub    esp,0xc
c001db85:	55                   	push   ebp
c001db86:	e8 cd 58 ff ff       	call   c0013458 <File::close()>
c001db8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db94:	59                   	pop    ecx
c001db95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db99:	e8 fe 1c ff ff       	call   c000f89c <free>
c001db9e:	5b                   	pop    ebx
c001db9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dba3:	e8 f4 1c ff ff       	call   c000f89c <free>
c001dba8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dbab:	e8 ec 1c ff ff       	call   c000f89c <free>
c001dbb0:	5e                   	pop    esi
c001dbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbb5:	e8 e2 1c ff ff       	call   c000f89c <free>
c001dbba:	83 c4 10             	add    esp,0x10
c001dbbd:	eb 21                	jmp    c001dbe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dbbf:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dbc3:	e9 76 fd ff ff       	jmp    c001d93e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbcf:	e8 c8 1c ff ff       	call   c000f89c <free>
c001dbd4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	e9 eb fc ff ff       	jmp    c001d8cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dbe0:	31 c0                	xor    eax,eax
c001dbe2:	eb 33                	jmp    c001dc17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	55                   	push   ebp
c001dbe8:	e8 6b 58 ff ff       	call   c0013458 <File::close()>
c001dbed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dbf0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbf6:	58                   	pop    eax
c001dbf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbfb:	e8 9c 1c ff ff       	call   c000f89c <free>
c001dc00:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc03:	e8 94 1c ff ff       	call   c000f89c <free>
c001dc08:	5a                   	pop    edx
c001dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc0d:	e8 8a 1c ff ff       	call   c000f89c <free>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	b0 01                	mov    al,0x1
c001dc17:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dc1d:	5b                   	pop    ebx
c001dc1e:	5e                   	pop    esi
c001dc1f:	5f                   	pop    edi
c001dc20:	5d                   	pop    ebp
c001dc21:	c3                   	ret    

c001dc22 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dc22:	56                   	push   esi
c001dc23:	31 d2                	xor    edx,edx
c001dc25:	53                   	push   ebx
c001dc26:	8b 1d 40 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032040
c001dc2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc30:	39 d3                	cmp    ebx,edx
c001dc32:	7e 1b                	jle    c001dc4f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dc34:	8b 04 95 60 22 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdda0]
c001dc3b:	39 c8                	cmp    eax,ecx
c001dc3d:	77 0d                	ja     c001dc4c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dc3f:	8b 34 95 60 20 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcdfa0]
c001dc46:	01 c6                	add    esi,eax
c001dc48:	39 ce                	cmp    esi,ecx
c001dc4a:	77 05                	ja     c001dc51 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dc4c:	42                   	inc    edx
c001dc4d:	eb e1                	jmp    c001dc30 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dc4f:	31 c0                	xor    eax,eax
c001dc51:	5b                   	pop    ebx
c001dc52:	5e                   	pop    esi
c001dc53:	c3                   	ret    

c001dc54 <Thr::getDriverNameFromAddress(unsigned long)>:
c001dc54:	53                   	push   ebx
c001dc55:	31 c0                	xor    eax,eax
c001dc57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc5b:	8b 1d 40 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032040
c001dc61:	39 c3                	cmp    ebx,eax
c001dc63:	7e 22                	jle    c001dc87 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dc65:	8b 14 85 60 22 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdda0]
c001dc6c:	39 ca                	cmp    edx,ecx
c001dc6e:	77 14                	ja     c001dc84 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc70:	03 14 85 60 20 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcdfa0]
c001dc77:	39 ca                	cmp    edx,ecx
c001dc79:	76 09                	jbe    c001dc84 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc7b:	8b 04 85 60 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdba0]
c001dc82:	eb 05                	jmp    c001dc89 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dc84:	40                   	inc    eax
c001dc85:	eb da                	jmp    c001dc61 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dc87:	31 c0                	xor    eax,eax
c001dc89:	5b                   	pop    ebx
c001dc8a:	c3                   	ret    

c001dc8b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dc8b:	53                   	push   ebx
c001dc8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dc90:	53                   	push   ebx
c001dc91:	e8 8c ff ff ff       	call   c001dc22 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dc96:	5a                   	pop    edx
c001dc97:	31 d2                	xor    edx,edx
c001dc99:	85 c0                	test   eax,eax
c001dc9b:	74 04                	je     c001dca1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dc9d:	89 da                	mov    edx,ebx
c001dc9f:	29 c2                	sub    edx,eax
c001dca1:	89 d0                	mov    eax,edx
c001dca3:	5b                   	pop    ebx
c001dca4:	c3                   	ret    

c001dca5 <Thr::loadDLL(char const*, bool)>:
c001dca5:	55                   	push   ebp
c001dca6:	57                   	push   edi
c001dca7:	56                   	push   esi
c001dca8:	53                   	push   ebx
c001dca9:	81 ec 34 01 00 00    	sub    esp,0x134
c001dcaf:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dcb6:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dcbd:	56                   	push   esi
c001dcbe:	68 38 cf 02 c0       	push   0xc002cf38
c001dcc3:	e8 6f 51 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001dcc8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dccf:	e8 b8 1b ff ff       	call   c000f88c <malloc>
c001dcd4:	83 c4 0c             	add    esp,0xc
c001dcd7:	89 c3                	mov    ebx,eax
c001dcd9:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001dcdf:	56                   	push   esi
c001dce0:	50                   	push   eax
c001dce1:	e8 b0 56 ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	85 db                	test   ebx,ebx
c001dceb:	75 3c                	jne    c001dd29 <Thr::loadDLL(char const*, bool)+0x84>
c001dced:	89 f8                	mov    eax,edi
c001dcef:	84 c0                	test   al,al
c001dcf1:	0f 84 cc 01 00 00    	je     c001dec3 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcf7:	55                   	push   ebp
c001dcf8:	55                   	push   ebp
c001dcf9:	68 49 cf 02 c0       	push   0xc002cf49
c001dcfe:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dd02:	55                   	push   ebp
c001dd03:	e8 04 2b fe ff       	call   c000080c <strcpy>
c001dd08:	58                   	pop    eax
c001dd09:	5a                   	pop    edx
c001dd0a:	56                   	push   esi
c001dd0b:	55                   	push   ebp
c001dd0c:	e8 3b 2c fe ff       	call   c000094c <strcat>
c001dd11:	59                   	pop    ecx
c001dd12:	58                   	pop    eax
c001dd13:	68 5c cf 02 c0       	push   0xc002cf5c
c001dd18:	55                   	push   ebp
c001dd19:	e8 2e 2c fe ff       	call   c000094c <strcat>
c001dd1e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd21:	e8 ab cb ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001dd26:	83 c4 10             	add    esp,0x10
c001dd29:	51                   	push   ecx
c001dd2a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dd2e:	50                   	push   eax
c001dd2f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd33:	50                   	push   eax
c001dd34:	53                   	push   ebx
c001dd35:	e8 6c 59 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	85 db                	test   ebx,ebx
c001dd3f:	74 0c                	je     c001dd4d <Thr::loadDLL(char const*, bool)+0xa8>
c001dd41:	83 ec 0c             	sub    esp,0xc
c001dd44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd46:	53                   	push   ebx
c001dd47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd4a:	83 c4 10             	add    esp,0x10
c001dd4d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dd52:	75 0a                	jne    c001dd5e <Thr::loadDLL(char const*, bool)+0xb9>
c001dd54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd58:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dd5c:	75 3c                	jne    c001dd9a <Thr::loadDLL(char const*, bool)+0xf5>
c001dd5e:	89 f8                	mov    eax,edi
c001dd60:	84 c0                	test   al,al
c001dd62:	0f 84 43 01 00 00    	je     c001deab <Thr::loadDLL(char const*, bool)+0x206>
c001dd68:	51                   	push   ecx
c001dd69:	51                   	push   ecx
c001dd6a:	68 49 cf 02 c0       	push   0xc002cf49
c001dd6f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dd73:	53                   	push   ebx
c001dd74:	e8 93 2a fe ff       	call   c000080c <strcpy>
c001dd79:	5d                   	pop    ebp
c001dd7a:	58                   	pop    eax
c001dd7b:	56                   	push   esi
c001dd7c:	53                   	push   ebx
c001dd7d:	e8 ca 2b fe ff       	call   c000094c <strcat>
c001dd82:	58                   	pop    eax
c001dd83:	5a                   	pop    edx
c001dd84:	68 5c cf 02 c0       	push   0xc002cf5c
c001dd89:	53                   	push   ebx
c001dd8a:	e8 bd 2b fe ff       	call   c000094c <strcat>
c001dd8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd92:	e8 3a cb ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	52                   	push   edx
c001dd9b:	6a 03                	push   0x3
c001dd9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dda1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dda5:	05 ff 0f 00 00       	add    eax,0xfff
c001ddaa:	83 d2 00             	adc    edx,0x0
c001ddad:	0f ac d0 0c          	shrd   eax,edx,0xc
c001ddb1:	50                   	push   eax
c001ddb2:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001ddb8:	e8 ad 45 ff ff       	call   c001236a <VAS::allocatePages(int, int)>
c001ddbd:	59                   	pop    ecx
c001ddbe:	89 c3                	mov    ebx,eax
c001ddc0:	5d                   	pop    ebp
c001ddc1:	50                   	push   eax
c001ddc2:	68 5e cf 02 c0       	push   0xc002cf5e
c001ddc7:	e8 6b 50 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ddcc:	89 34 24             	mov    DWORD PTR [esp],esi
c001ddcf:	e8 98 29 fe ff       	call   c000076c <strlen>
c001ddd4:	8b 2d 40 20 03 c0    	mov    ebp,DWORD PTR ds:0xc0032040
c001ddda:	40                   	inc    eax
c001dddb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddde:	e8 a9 1a ff ff       	call   c000f88c <malloc>
c001dde3:	89 04 ad 60 24 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdba0],eax
c001ddea:	58                   	pop    eax
c001ddeb:	a1 40 20 03 c0       	mov    eax,ds:0xc0032040
c001ddf0:	5a                   	pop    edx
c001ddf1:	56                   	push   esi
c001ddf2:	ff 34 85 60 24 03 c0 	push   DWORD PTR [eax*4-0x3ffcdba0]
c001ddf9:	e8 0e 2a fe ff       	call   c000080c <strcpy>
c001ddfe:	a1 40 20 03 c0       	mov    eax,ds:0xc0032040
c001de03:	8d 50 01             	lea    edx,[eax+0x1]
c001de06:	89 1c 85 60 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdda0],ebx
c001de0d:	89 15 40 20 03 c0    	mov    DWORD PTR ds:0xc0032040,edx
c001de13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de17:	83 c4 0c             	add    esp,0xc
c001de1a:	89 14 85 60 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfa0],edx
c001de21:	6a 01                	push   0x1
c001de23:	53                   	push   ebx
c001de24:	56                   	push   esi
c001de25:	e8 c2 f6 ff ff       	call   c001d4ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001de2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de36:	0f 85 83 00 00 00    	jne    c001debf <Thr::loadDLL(char const*, bool)+0x21a>
c001de3c:	89 f8                	mov    eax,edi
c001de3e:	84 c0                	test   al,al
c001de40:	74 6d                	je     c001deaf <Thr::loadDLL(char const*, bool)+0x20a>
c001de42:	83 ec 0c             	sub    esp,0xc
c001de45:	68 6b cf 02 c0       	push   0xc002cf6b
c001de4a:	e8 82 ca ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	eb 5b                	jmp    c001deaf <Thr::loadDLL(char const*, bool)+0x20a>
c001de54:	89 ee                	mov    esi,ebp
c001de56:	50                   	push   eax
c001de57:	c1 e6 0c             	shl    esi,0xc
c001de5a:	50                   	push   eax
c001de5b:	01 de                	add    esi,ebx
c001de5d:	56                   	push   esi
c001de5e:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001de64:	e8 69 40 ff ff       	call   c0011ed2 <VAS::getPageTableEntry(unsigned long)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001de6f:	75 0c                	jne    c001de7d <Thr::loadDLL(char const*, bool)+0x1d8>
c001de71:	83 ec 0c             	sub    esp,0xc
c001de74:	56                   	push   esi
c001de75:	e8 f4 1f ff ff       	call   c000fe6e <Phys::freePage(unsigned long)>
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	45                   	inc    ebp
c001de7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de86:	05 ff 0f 00 00       	add    eax,0xfff
c001de8b:	bf 00 00 00 00       	mov    edi,0x0
c001de90:	83 d2 00             	adc    edx,0x0
c001de93:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de97:	c1 ea 0c             	shr    edx,0xc
c001de9a:	39 c5                	cmp    ebp,eax
c001de9c:	89 d1                	mov    ecx,edx
c001de9e:	89 f8                	mov    eax,edi
c001dea0:	19 c8                	sbb    eax,ecx
c001dea2:	72 b0                	jb     c001de54 <Thr::loadDLL(char const*, bool)+0x1af>
c001dea4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dea9:	75 18                	jne    c001dec3 <Thr::loadDLL(char const*, bool)+0x21e>
c001deab:	31 db                	xor    ebx,ebx
c001dead:	eb 14                	jmp    c001dec3 <Thr::loadDLL(char const*, bool)+0x21e>
c001deaf:	83 ec 0c             	sub    esp,0xc
c001deb2:	68 8a cf 02 c0       	push   0xc002cf8a
c001deb7:	e8 15 ca ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	31 ed                	xor    ebp,ebp
c001dec1:	eb bb                	jmp    c001de7e <Thr::loadDLL(char const*, bool)+0x1d9>
c001dec3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dec9:	89 d8                	mov    eax,ebx
c001decb:	5b                   	pop    ebx
c001decc:	5e                   	pop    esi
c001decd:	5f                   	pop    edi
c001dece:	5d                   	pop    ebp
c001decf:	c3                   	ret    

c001ded0 <Thr::executeDLL(unsigned long, void*)>:
c001ded0:	56                   	push   esi
c001ded1:	53                   	push   ebx
c001ded2:	52                   	push   edx
c001ded3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ded7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dedb:	85 db                	test   ebx,ebx
c001dedd:	75 10                	jne    c001deef <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dedf:	83 ec 0c             	sub    esp,0xc
c001dee2:	68 a6 cf 02 c0       	push   0xc002cfa6
c001dee7:	e8 e5 c9 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	50                   	push   eax
c001def0:	50                   	push   eax
c001def1:	53                   	push   ebx
c001def2:	68 d0 cf 02 c0       	push   0xc002cfd0
c001def7:	e8 3b 4f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001defc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df00:	89 d8                	mov    eax,ebx
c001df02:	83 c4 14             	add    esp,0x14
c001df05:	5b                   	pop    ebx
c001df06:	5e                   	pop    esi
c001df07:	ff e0                	jmp    eax
c001df09:	90                   	nop

c001df0a <userModeEntryPoint(void*)>:
c001df0a:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001df0f:	48                   	dec    eax
c001df10:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001df15:	75 01                	jne    c001df18 <userModeEntryPoint(void*)+0xe>
c001df17:	fb                   	sti    
c001df18:	fb                   	sti    
c001df19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df21:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df2b:	e9 fa 23 fe ff       	jmp    c000032a <goToUsermode>

c001df30 <changeTSS>:
c001df30:	83 ec 14             	sub    esp,0x14
c001df33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df38:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001df3b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001df40:	c1 e2 15             	shl    edx,0x15
c001df43:	29 d0                	sub    eax,edx
c001df45:	50                   	push   eax
c001df46:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df51:	05 7c 11 00 00       	add    eax,0x117c
c001df56:	50                   	push   eax
c001df57:	e8 14 34 ff ff       	call   c0011370 <TSS::setESP(unsigned long)>
c001df5c:	83 c4 1c             	add    esp,0x1c
c001df5f:	c3                   	ret    

c001df60 <switchToThread(ThreadControlBlock*)>:
c001df60:	57                   	push   edi
c001df61:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001df66:	56                   	push   esi
c001df67:	85 c0                	test   eax,eax
c001df69:	53                   	push   ebx
c001df6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df6e:	0f 85 88 00 00 00    	jne    c001dffc <switchToThread(ThreadControlBlock*)+0x9c>
c001df74:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001df77:	3c ff                	cmp    al,0xff
c001df79:	74 7d                	je     c001dff8 <switchToThread(ThreadControlBlock*)+0x98>
c001df7b:	0f b6 d0             	movzx  edx,al
c001df7e:	b8 84 03 00 00       	mov    eax,0x384
c001df83:	29 d0                	sub    eax,edx
c001df85:	c1 e0 10             	shl    eax,0x10
c001df88:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001df8b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001df8e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df99:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dfa0:	74 4a                	je     c001dfec <switchToThread(ThreadControlBlock*)+0x8c>
c001dfa2:	0f 31                	rdtsc  
c001dfa4:	a3 48 28 03 c0       	mov    ds:0xc0032848,eax
c001dfa9:	89 c6                	mov    esi,eax
c001dfab:	89 d7                	mov    edi,edx
c001dfad:	2b 35 38 28 03 c0    	sub    esi,DWORD PTR ds:0xc0032838
c001dfb3:	89 15 4c 28 03 c0    	mov    DWORD PTR ds:0xc003284c,edx
c001dfb9:	1b 3d 3c 28 03 c0    	sbb    edi,DWORD PTR ds:0xc003283c
c001dfbf:	89 35 40 28 03 c0    	mov    DWORD PTR ds:0xc0032840,esi
c001dfc5:	a3 38 28 03 c0       	mov    ds:0xc0032838,eax
c001dfca:	89 3d 44 28 03 c0    	mov    DWORD PTR ds:0xc0032844,edi
c001dfd0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dfd6:	89 15 3c 28 03 c0    	mov    DWORD PTR ds:0xc003283c,edx
c001dfdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dfdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dfe2:	01 c6                	add    esi,eax
c001dfe4:	11 d7                	adc    edi,edx
c001dfe6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dfe9:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dfec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dff0:	5b                   	pop    ebx
c001dff1:	5e                   	pop    esi
c001dff2:	5f                   	pop    edi
c001dff3:	e9 6a 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dff8:	31 c0                	xor    eax,eax
c001dffa:	eb 8f                	jmp    c001df8b <switchToThread(ThreadControlBlock*)+0x2b>
c001dffc:	5b                   	pop    ebx
c001dffd:	c7 05 00 28 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x1
c001e007:	5e                   	pop    esi
c001e008:	5f                   	pop    edi
c001e009:	c3                   	ret    

c001e00a <Process::addArgs(char**)>:
c001e00a:	57                   	push   edi
c001e00b:	56                   	push   esi
c001e00c:	53                   	push   ebx
c001e00d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e011:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e015:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e01f:	85 ff                	test   edi,edi
c001e021:	74 3d                	je     c001e060 <Process::addArgs(char**)+0x56>
c001e023:	8b 07                	mov    eax,DWORD PTR [edi]
c001e025:	85 c0                	test   eax,eax
c001e027:	74 37                	je     c001e060 <Process::addArgs(char**)+0x56>
c001e029:	31 db                	xor    ebx,ebx
c001e02b:	83 ec 0c             	sub    esp,0xc
c001e02e:	50                   	push   eax
c001e02f:	e8 38 27 fe ff       	call   c000076c <strlen>
c001e034:	40                   	inc    eax
c001e035:	89 04 24             	mov    DWORD PTR [esp],eax
c001e038:	e8 4f 18 ff ff       	call   c000f88c <malloc>
c001e03d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e044:	5a                   	pop    edx
c001e045:	59                   	pop    ecx
c001e046:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e049:	43                   	inc    ebx
c001e04a:	50                   	push   eax
c001e04b:	e8 bc 27 fe ff       	call   c000080c <strcpy>
c001e050:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e05c:	85 c0                	test   eax,eax
c001e05e:	75 cb                	jne    c001e02b <Process::addArgs(char**)+0x21>
c001e060:	5b                   	pop    ebx
c001e061:	5e                   	pop    esi
c001e062:	5f                   	pop    edi
c001e063:	c3                   	ret    

c001e064 <Process::Process(char const*, Process*, char**)>:
c001e064:	56                   	push   esi
c001e065:	53                   	push   ebx
c001e066:	83 ec 14             	sub    esp,0x14
c001e069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e06d:	05 0c 02 00 00       	add    eax,0x20c
c001e072:	bb 07 00 00 00       	mov    ebx,0x7
c001e077:	89 c6                	mov    esi,eax
c001e079:	85 db                	test   ebx,ebx
c001e07b:	78 12                	js     c001e08f <Process::Process(char const*, Process*, char**)+0x2b>
c001e07d:	83 ec 0c             	sub    esp,0xc
c001e080:	56                   	push   esi
c001e081:	e8 0c b9 00 00       	call   c0029992 <ThreadControlBlock::ThreadControlBlock()>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	83 c6 63             	add    esi,0x63
c001e08c:	4b                   	dec    ebx
c001e08d:	eb ea                	jmp    c001e079 <Process::Process(char const*, Process*, char**)+0x15>
c001e08f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e093:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0a1:	e8 84 c6 ff ff       	call   c001a72a <Krnl::newProcessEnv(Process*)>
c001e0a6:	83 c4 10             	add    esp,0x10
c001e0a9:	89 c2                	mov    edx,eax
c001e0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0af:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0b9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0c2:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001e0c7:	8d 50 01             	lea    edx,[eax+0x1]
c001e0ca:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001e0d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0d4:	89 02                	mov    DWORD PTR [edx],eax
c001e0d6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e0de:	83 ec 0c             	sub    esp,0xc
c001e0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e0e5:	e8 a2 17 ff ff       	call   c000f88c <malloc>
c001e0ea:	83 c4 10             	add    esp,0x10
c001e0ed:	89 c3                	mov    ebx,eax
c001e0ef:	83 ec 08             	sub    esp,0x8
c001e0f2:	6a 00                	push   0x0
c001e0f4:	53                   	push   ebx
c001e0f5:	e8 18 46 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e0fa:	83 c4 10             	add    esp,0x10
c001e0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e101:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e10b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e119:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e11d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e127:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e12d:	85 c0                	test   eax,eax
c001e12f:	74 42                	je     c001e173 <Process::Process(char const*, Process*, char**)+0x10f>
c001e131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e135:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e13b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e145:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e14b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e14f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e155:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e15b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15f:	05 0c 01 00 00       	add    eax,0x10c
c001e164:	83 ec 08             	sub    esp,0x8
c001e167:	52                   	push   edx
c001e168:	50                   	push   eax
c001e169:	e8 9e 26 fe ff       	call   c000080c <strcpy>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	eb 63                	jmp    c001e1d6 <Process::Process(char const*, Process*, char**)+0x172>
c001e173:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e17b:	83 ec 0c             	sub    esp,0xc
c001e17e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e182:	e8 05 17 ff ff       	call   c000f88c <malloc>
c001e187:	83 c4 10             	add    esp,0x10
c001e18a:	89 c3                	mov    ebx,eax
c001e18c:	83 ec 08             	sub    esp,0x8
c001e18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e193:	53                   	push   ebx
c001e194:	e8 b9 2e ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1a0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	50                   	push   eax
c001e1b4:	e8 d0 23 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e1b9:	83 c4 10             	add    esp,0x10
c001e1bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1c0:	05 0c 01 00 00       	add    eax,0x10c
c001e1c5:	83 ec 08             	sub    esp,0x8
c001e1c8:	68 ef cf 02 c0       	push   0xc002cfef
c001e1cd:	50                   	push   eax
c001e1ce:	e8 39 26 fe ff       	call   c000080c <strcpy>
c001e1d3:	83 c4 10             	add    esp,0x10
c001e1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1da:	83 c0 0c             	add    eax,0xc
c001e1dd:	83 ec 08             	sub    esp,0x8
c001e1e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1e4:	50                   	push   eax
c001e1e5:	e8 22 26 fe ff       	call   c000080c <strcpy>
c001e1ea:	83 c4 10             	add    esp,0x10
c001e1ed:	83 ec 08             	sub    esp,0x8
c001e1f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1f8:	e8 0d fe ff ff       	call   c001e00a <Process::addArgs(char**)>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	83 ec 08             	sub    esp,0x8
c001e203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e20b:	e8 a6 ed ff ff       	call   c001cfb6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e217:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e21b:	83 f0 01             	xor    eax,0x1
c001e21e:	88 c2                	mov    dl,al
c001e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e224:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e22a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e22f:	83 ec 08             	sub    esp,0x8
c001e232:	50                   	push   eax
c001e233:	68 1c d1 02 c0       	push   0xc002d11c
c001e238:	e8 fa 4b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	90                   	nop
c001e241:	83 c4 14             	add    esp,0x14
c001e244:	5b                   	pop    ebx
c001e245:	5e                   	pop    esi
c001e246:	c3                   	ret    
c001e247:	90                   	nop

c001e248 <Process::Process(bool, char const*, Process*, char**)>:
c001e248:	56                   	push   esi
c001e249:	53                   	push   ebx
c001e24a:	83 ec 24             	sub    esp,0x24
c001e24d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e251:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e259:	05 0c 02 00 00       	add    eax,0x20c
c001e25e:	bb 07 00 00 00       	mov    ebx,0x7
c001e263:	89 c6                	mov    esi,eax
c001e265:	85 db                	test   ebx,ebx
c001e267:	78 12                	js     c001e27b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	56                   	push   esi
c001e26d:	e8 20 b7 00 00       	call   c0029992 <ThreadControlBlock::ThreadControlBlock()>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	83 c6 63             	add    esi,0x63
c001e278:	4b                   	dec    ebx
c001e279:	eb ea                	jmp    c001e265 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e27b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e27f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e286:	83 ec 0c             	sub    esp,0xc
c001e289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e28d:	e8 98 c4 ff ff       	call   c001a72a <Krnl::newProcessEnv(Process*)>
c001e292:	83 c4 10             	add    esp,0x10
c001e295:	89 c2                	mov    edx,eax
c001e297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e29b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e2a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2a5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e2ae:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001e2b3:	8d 50 01             	lea    edx,[eax+0x1]
c001e2b6:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001e2bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e2c0:	89 02                	mov    DWORD PTR [edx],eax
c001e2c2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e2ca:	83 ec 0c             	sub    esp,0xc
c001e2cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e2d1:	e8 b6 15 ff ff       	call   c000f88c <malloc>
c001e2d6:	83 c4 10             	add    esp,0x10
c001e2d9:	89 c3                	mov    ebx,eax
c001e2db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e2e0:	83 ec 08             	sub    esp,0x8
c001e2e3:	50                   	push   eax
c001e2e4:	53                   	push   ebx
c001e2e5:	e8 28 44 ff ff       	call   c0012712 <VAS::VAS(bool)>
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2f1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e2f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2fb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e309:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e30d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e317:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e31d:	85 c0                	test   eax,eax
c001e31f:	74 42                	je     c001e363 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e325:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e32b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e335:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e33b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e33f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e345:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e34b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e34f:	05 0c 01 00 00       	add    eax,0x10c
c001e354:	83 ec 08             	sub    esp,0x8
c001e357:	52                   	push   edx
c001e358:	50                   	push   eax
c001e359:	e8 ae 24 fe ff       	call   c000080c <strcpy>
c001e35e:	83 c4 10             	add    esp,0x10
c001e361:	eb 63                	jmp    c001e3c6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e363:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e36b:	83 ec 0c             	sub    esp,0xc
c001e36e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e372:	e8 15 15 ff ff       	call   c000f88c <malloc>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	89 c3                	mov    ebx,eax
c001e37c:	83 ec 08             	sub    esp,0x8
c001e37f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e383:	53                   	push   ebx
c001e384:	e8 c9 2c ff ff       	call   c0011052 <VgaText::VgaText(char const*)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e390:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e39a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	50                   	push   eax
c001e3a4:	e8 e0 21 ff ff       	call   c0010589 <addToTerminalCycle(VgaText*)>
c001e3a9:	83 c4 10             	add    esp,0x10
c001e3ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3b0:	05 0c 01 00 00       	add    eax,0x10c
c001e3b5:	83 ec 08             	sub    esp,0x8
c001e3b8:	68 ef cf 02 c0       	push   0xc002cfef
c001e3bd:	50                   	push   eax
c001e3be:	e8 49 24 fe ff       	call   c000080c <strcpy>
c001e3c3:	83 c4 10             	add    esp,0x10
c001e3c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3ca:	83 c0 0c             	add    eax,0xc
c001e3cd:	83 ec 08             	sub    esp,0x8
c001e3d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3d4:	50                   	push   eax
c001e3d5:	e8 32 24 fe ff       	call   c000080c <strcpy>
c001e3da:	83 c4 10             	add    esp,0x10
c001e3dd:	83 ec 08             	sub    esp,0x8
c001e3e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e3e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3e8:	e8 1d fc ff ff       	call   c001e00a <Process::addArgs(char**)>
c001e3ed:	83 c4 10             	add    esp,0x10
c001e3f0:	90                   	nop
c001e3f1:	83 c4 24             	add    esp,0x24
c001e3f4:	5b                   	pop    ebx
c001e3f5:	5e                   	pop    esi
c001e3f6:	c3                   	ret    

c001e3f7 <taskStartupFunction>:
c001e3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e3ff:	c3                   	ret    

c001e400 <Semaphore::Semaphore(int)>:
c001e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e408:	89 10                	mov    DWORD PTR [eax],edx
c001e40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e40e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e419:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e424:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e42b:	90                   	nop
c001e42c:	c3                   	ret    
c001e42d:	90                   	nop

c001e42e <Mutex::Mutex()>:
c001e42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e432:	6a 01                	push   0x1
c001e434:	50                   	push   eax
c001e435:	e8 c6 ff ff ff       	call   c001e400 <Semaphore::Semaphore(int)>
c001e43a:	83 c4 08             	add    esp,0x8
c001e43d:	90                   	nop
c001e43e:	c3                   	ret    
c001e43f:	90                   	nop

c001e440 <Process::createThread(void (*)(void*), void*, int)>:
c001e440:	55                   	push   ebp
c001e441:	31 c9                	xor    ecx,ecx
c001e443:	57                   	push   edi
c001e444:	56                   	push   esi
c001e445:	53                   	push   ebx
c001e446:	83 ec 1c             	sub    esp,0x1c
c001e449:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e44d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e454:	89 f2                	mov    edx,esi
c001e456:	0f b7 c2             	movzx  eax,dx
c001e459:	83 e2 01             	and    edx,0x1
c001e45c:	74 16                	je     c001e474 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e45e:	d1 f8                	sar    eax,1
c001e460:	41                   	inc    ecx
c001e461:	89 c2                	mov    edx,eax
c001e463:	83 f9 10             	cmp    ecx,0x10
c001e466:	75 ee                	jne    c001e456 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e468:	83 c4 1c             	add    esp,0x1c
c001e46b:	31 db                	xor    ebx,ebx
c001e46d:	89 d8                	mov    eax,ebx
c001e46f:	5b                   	pop    ebx
c001e470:	5e                   	pop    esi
c001e471:	5f                   	pop    edi
c001e472:	5d                   	pop    ebp
c001e473:	c3                   	ret    
c001e474:	b8 01 00 00 00       	mov    eax,0x1
c001e479:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e47c:	d3 e0                	shl    eax,cl
c001e47e:	09 c6                	or     esi,eax
c001e480:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e483:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e48a:	89 c6                	mov    esi,eax
c001e48c:	c1 e6 05             	shl    esi,0x5
c001e48f:	01 f0                	add    eax,esi
c001e491:	01 d8                	add    eax,ebx
c001e493:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e49a:	75 0a                	jne    c001e4a6 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e49c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e4a6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e4ac:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e4b0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e4b3:	01 ca                	add    edx,ecx
c001e4b5:	83 ec 08             	sub    esp,0x8
c001e4b8:	89 d0                	mov    eax,edx
c001e4ba:	c1 e0 05             	shl    eax,0x5
c001e4bd:	01 d0                	add    eax,edx
c001e4bf:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e4c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4c7:	01 d8                	add    eax,ebx
c001e4c9:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e4cf:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e4d5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e4db:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e4e1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e4e7:	89 cd                	mov    ebp,ecx
c001e4e9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e4ed:	f7 dd                	neg    ebp
c001e4ef:	c1 e5 15             	shl    ebp,0x15
c001e4f2:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e4f8:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e4fe:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e508:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e50e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e518:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e522:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e526:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e52d:	53                   	push   ebx
c001e52e:	68 24 28 03 c0       	push   0xc0032824
c001e533:	e8 14 b2 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e538:	89 d8                	mov    eax,ebx
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	83 c4 1c             	add    esp,0x1c
c001e540:	5b                   	pop    ebx
c001e541:	5e                   	pop    esi
c001e542:	5f                   	pop    edi
c001e543:	5d                   	pop    ebp
c001e544:	c3                   	ret    
c001e545:	90                   	nop

c001e546 <Process::createUserThread()>:
c001e546:	83 ec 0c             	sub    esp,0xc
c001e549:	68 80 00 00 00       	push   0x80
c001e54e:	6a 00                	push   0x0
c001e550:	68 0a df 01 c0       	push   0xc001df0a
c001e555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e559:	e8 e2 fe ff ff       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c001e55e:	83 c4 1c             	add    esp,0x1c
c001e561:	c3                   	ret    

c001e562 <setupMultitasking(void (*)())>:
c001e562:	56                   	push   esi
c001e563:	53                   	push   ebx
c001e564:	51                   	push   ecx
c001e565:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e569:	eb 10                	jmp    c001e57b <setupMultitasking(void (*)())+0x19>
c001e56b:	83 ec 0c             	sub    esp,0xc
c001e56e:	68 24 28 03 c0       	push   0xc0032824
c001e573:	e8 26 b1 00 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e578:	83 c4 10             	add    esp,0x10
c001e57b:	83 ec 0c             	sub    esp,0xc
c001e57e:	68 24 28 03 c0       	push   0xc0032824
c001e583:	e8 f2 b0 00 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	84 c0                	test   al,al
c001e58d:	74 dc                	je     c001e56b <setupMultitasking(void (*)())+0x9>
c001e58f:	83 ec 0c             	sub    esp,0xc
c001e592:	68 3f 07 00 00       	push   0x73f
c001e597:	e8 f0 12 ff ff       	call   c000f88c <malloc>
c001e59c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5a3:	89 c3                	mov    ebx,eax
c001e5a5:	6a 00                	push   0x0
c001e5a7:	68 f3 cf 02 c0       	push   0xc002cff3
c001e5ac:	6a 01                	push   0x1
c001e5ae:	50                   	push   eax
c001e5af:	e8 94 fc ff ff       	call   c001e248 <Process::Process(bool, char const*, Process*, char**)>
c001e5b4:	83 c4 18             	add    esp,0x18
c001e5b7:	89 1d 30 28 03 c0    	mov    DWORD PTR ds:0xc0032830,ebx
c001e5bd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e5c3:	68 44 d1 02 c0       	push   0xc002d144
c001e5c8:	e8 6a 48 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e5cd:	58                   	pop    eax
c001e5ce:	5a                   	pop    edx
c001e5cf:	6a 63                	push   0x63
c001e5d1:	68 78 d1 02 c0       	push   0xc002d178
c001e5d6:	e8 5c 48 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e5db:	59                   	pop    ecx
c001e5dc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e5e2:	e8 73 26 ff ff       	call   c0010c5a <setActiveTerminal(VgaText*)>
c001e5e7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e5ef:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e5f9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e5ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e602:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e60c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e612:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e618:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e622:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e62c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e636:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e63c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e646:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e64c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e656:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e65c:	58                   	pop    eax
c001e65d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e663:	5a                   	pop    edx
c001e664:	68 ef cf 02 c0       	push   0xc002cfef
c001e669:	50                   	push   eax
c001e66a:	e8 9d 21 fe ff       	call   c000080c <strcpy>
c001e66f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e676:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e67a:	83 c4 14             	add    esp,0x14
c001e67d:	5b                   	pop    ebx
c001e67e:	5e                   	pop    esi
c001e67f:	e9 d0 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e684 <schedule()>:
c001e684:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e689:	85 c0                	test   eax,eax
c001e68b:	74 0b                	je     c001e698 <schedule()+0x14>
c001e68d:	c7 05 00 28 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x1
c001e697:	c3                   	ret    
c001e698:	53                   	push   ebx
c001e699:	83 ec 14             	sub    esp,0x14
c001e69c:	68 24 28 03 c0       	push   0xc0032824
c001e6a1:	e8 d4 af 00 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6a6:	83 c4 10             	add    esp,0x10
c001e6a9:	84 c0                	test   al,al
c001e6ab:	75 38                	jne    c001e6e5 <schedule()+0x61>
c001e6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6b5:	4a                   	dec    edx
c001e6b6:	74 32                	je     c001e6ea <schedule()+0x66>
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	68 24 28 03 c0       	push   0xc0032824
c001e6c0:	e8 d1 af 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c5:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001e6cc:	89 c3                	mov    ebx,eax
c001e6ce:	e8 cb af 00 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6d3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e6da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6dd:	e8 7e f8 ff ff       	call   c001df60 <switchToThread(ThreadControlBlock*)>
c001e6e2:	83 c4 10             	add    esp,0x10
c001e6e5:	83 c4 08             	add    esp,0x8
c001e6e8:	5b                   	pop    ebx
c001e6e9:	c3                   	ret    
c001e6ea:	83 ec 08             	sub    esp,0x8
c001e6ed:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e6f4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e6fa:	68 24 28 03 c0       	push   0xc0032824
c001e6ff:	e8 48 b0 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e704:	83 c4 10             	add    esp,0x10
c001e707:	eb af                	jmp    c001e6b8 <schedule()+0x34>
c001e709:	90                   	nop

c001e70a <Semaphore::tryAcquire()>:
c001e70a:	53                   	push   ebx
c001e70b:	83 ec 08             	sub    esp,0x8
c001e70e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e712:	fa                   	cli    
c001e713:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e718:	8d 50 01             	lea    edx,[eax+0x1]
c001e71b:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001e721:	8b 15 04 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032804
c001e727:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e72a:	89 1d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ebx
c001e730:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e733:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e735:	7c 2a                	jl     c001e761 <Semaphore::tryAcquire()+0x57>
c001e737:	89 15 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,edx
c001e73d:	85 d2                	test   edx,edx
c001e73f:	75 0a                	jne    c001e74b <Semaphore::tryAcquire()+0x41>
c001e741:	8b 15 00 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032800
c001e747:	85 d2                	test   edx,edx
c001e749:	75 5b                	jne    c001e7a6 <Semaphore::tryAcquire()+0x9c>
c001e74b:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e750:	85 c0                	test   eax,eax
c001e752:	74 07                	je     c001e75b <Semaphore::tryAcquire()+0x51>
c001e754:	31 c0                	xor    eax,eax
c001e756:	83 c4 08             	add    esp,0x8
c001e759:	5b                   	pop    ebx
c001e75a:	c3                   	ret    
c001e75b:	fb                   	sti    
c001e75c:	83 c4 08             	add    esp,0x8
c001e75f:	5b                   	pop    ebx
c001e760:	c3                   	ret    
c001e761:	43                   	inc    ebx
c001e762:	89 15 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,edx
c001e768:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e76b:	85 d2                	test   edx,edx
c001e76d:	75 1f                	jne    c001e78e <Semaphore::tryAcquire()+0x84>
c001e76f:	8b 0d 00 28 03 c0    	mov    ecx,DWORD PTR ds:0xc0032800
c001e775:	85 c9                	test   ecx,ecx
c001e777:	74 15                	je     c001e78e <Semaphore::tryAcquire()+0x84>
c001e779:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e783:	e8 fc fe ff ff       	call   c001e684 <schedule()>
c001e788:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e78d:	48                   	dec    eax
c001e78e:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e793:	85 c0                	test   eax,eax
c001e795:	75 08                	jne    c001e79f <Semaphore::tryAcquire()+0x95>
c001e797:	fb                   	sti    
c001e798:	b0 01                	mov    al,0x1
c001e79a:	83 c4 08             	add    esp,0x8
c001e79d:	5b                   	pop    ebx
c001e79e:	c3                   	ret    
c001e79f:	b0 01                	mov    al,0x1
c001e7a1:	83 c4 08             	add    esp,0x8
c001e7a4:	5b                   	pop    ebx
c001e7a5:	c3                   	ret    
c001e7a6:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e7b0:	e8 cf fe ff ff       	call   c001e684 <schedule()>
c001e7b5:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e7ba:	48                   	dec    eax
c001e7bb:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e7c0:	85 c0                	test   eax,eax
c001e7c2:	75 90                	jne    c001e754 <Semaphore::tryAcquire()+0x4a>
c001e7c4:	eb 95                	jmp    c001e75b <Semaphore::tryAcquire()+0x51>

c001e7c6 <Semaphore::assertLocked(char const*)>:
c001e7c6:	83 ec 0c             	sub    esp,0xc
c001e7c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7cd:	fa                   	cli    
c001e7ce:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e7d4:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e7d9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7dc:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001e7e2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e7e4:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e7e7:	7c 24                	jl     c001e80d <Semaphore::assertLocked(char const*)+0x47>
c001e7e9:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001e7ee:	85 c0                	test   eax,eax
c001e7f0:	75 09                	jne    c001e7fb <Semaphore::assertLocked(char const*)+0x35>
c001e7f2:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001e7f7:	85 c0                	test   eax,eax
c001e7f9:	75 29                	jne    c001e824 <Semaphore::assertLocked(char const*)+0x5e>
c001e7fb:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e800:	48                   	dec    eax
c001e801:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e806:	75 01                	jne    c001e809 <Semaphore::assertLocked(char const*)+0x43>
c001e808:	fb                   	sti    
c001e809:	83 c4 0c             	add    esp,0xc
c001e80c:	c3                   	ret    
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e814:	e8 b8 c0 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001e819:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	48                   	dec    eax
c001e822:	eb c5                	jmp    c001e7e9 <Semaphore::assertLocked(char const*)+0x23>
c001e824:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e82e:	e8 51 fe ff ff       	call   c001e684 <schedule()>
c001e833:	eb c6                	jmp    c001e7fb <Semaphore::assertLocked(char const*)+0x35>

c001e835 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e835:	83 ec 14             	sub    esp,0x14
c001e838:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c001e83e:	68 9c d1 02 c0       	push   0xc002d19c
c001e843:	e8 ef 45 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e84d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e851:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e854:	e8 2b fe ff ff       	call   c001e684 <schedule()>
c001e859:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e85e:	83 c4 10             	add    esp,0x10
c001e861:	48                   	dec    eax
c001e862:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e867:	85 c0                	test   eax,eax
c001e869:	75 06                	jne    c001e871 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e86b:	fb                   	sti    
c001e86c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e871:	83 ec 08             	sub    esp,0x8
c001e874:	50                   	push   eax
c001e875:	68 d0 d1 02 c0       	push   0xc002d1d0
c001e87a:	e8 b8 45 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001e87f:	83 c4 1c             	add    esp,0x1c
c001e882:	c3                   	ret    

c001e883 <blockTask(TaskState)>:
c001e883:	83 ec 0c             	sub    esp,0xc
c001e886:	fa                   	cli    
c001e887:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e88d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e896:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e899:	e8 e6 fd ff ff       	call   c001e684 <schedule()>
c001e89e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e8a3:	48                   	dec    eax
c001e8a4:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e8a9:	75 01                	jne    c001e8ac <blockTask(TaskState)+0x29>
c001e8ab:	fb                   	sti    
c001e8ac:	83 c4 0c             	add    esp,0xc
c001e8af:	c3                   	ret    

c001e8b0 <waitTask(int, int*, int)>:
c001e8b0:	83 ec 18             	sub    esp,0x18
c001e8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8bc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e8bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8c8:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e8cb:	6a 07                	push   0x7
c001e8cd:	e8 b1 ff ff ff       	call   c001e883 <blockTask(TaskState)>
c001e8d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e8dd:	85 d2                	test   edx,edx
c001e8df:	74 0a                	je     c001e8eb <waitTask(int, int*, int)+0x3b>
c001e8e1:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e8e4:	89 02                	mov    DWORD PTR [edx],eax
c001e8e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8eb:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    

c001e8f2 <nanoSleepUntil(unsigned long long)>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8fd:	3b 05 50 f9 02 c0    	cmp    eax,DWORD PTR ds:0xc002f950
c001e903:	89 d1                	mov    ecx,edx
c001e905:	1b 0d 54 f9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f954
c001e90b:	73 04                	jae    c001e911 <nanoSleepUntil(unsigned long long)+0x1f>
c001e90d:	83 c4 0c             	add    esp,0xc
c001e910:	c3                   	ret    
c001e911:	fa                   	cli    
c001e912:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e918:	83 ec 08             	sub    esp,0x8
c001e91b:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001e921:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e927:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e92a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e92d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e933:	68 18 28 03 c0       	push   0xc0032818
c001e938:	e8 0f ae 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e93d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e944:	e8 3a ff ff ff       	call   c001e883 <blockTask(TaskState)>
c001e949:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	48                   	dec    eax
c001e952:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001e957:	85 c0                	test   eax,eax
c001e959:	75 09                	jne    c001e964 <nanoSleepUntil(unsigned long long)+0x72>
c001e95b:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001e960:	85 c0                	test   eax,eax
c001e962:	75 12                	jne    c001e976 <nanoSleepUntil(unsigned long long)+0x84>
c001e964:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e969:	48                   	dec    eax
c001e96a:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e96f:	75 9c                	jne    c001e90d <nanoSleepUntil(unsigned long long)+0x1b>
c001e971:	fb                   	sti    
c001e972:	83 c4 0c             	add    esp,0xc
c001e975:	c3                   	ret    
c001e976:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e980:	e8 ff fc ff ff       	call   c001e684 <schedule()>
c001e985:	eb dd                	jmp    c001e964 <nanoSleepUntil(unsigned long long)+0x72>

c001e987 <nanoSleep(unsigned long long)>:
c001e987:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c001e98c:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c001e992:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e996:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e99a:	e9 53 ff ff ff       	jmp    c001e8f2 <nanoSleepUntil(unsigned long long)>

c001e99f <sleep(unsigned long long)>:
c001e99f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e9a7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e9ac:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e9b0:	01 ca                	add    edx,ecx
c001e9b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9b6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e9ba:	eb cb                	jmp    c001e987 <nanoSleep(unsigned long long)>

c001e9bc <Semaphore::acquire()>:
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9c3:	fa                   	cli    
c001e9c4:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e9c9:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e9cf:	8d 48 01             	lea    ecx,[eax+0x1]
c001e9d2:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001e9d8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e9db:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e9dd:	7d 28                	jge    c001ea07 <Semaphore::acquire()+0x4b>
c001e9df:	41                   	inc    ecx
c001e9e0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e9e3:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001e9e8:	85 c0                	test   eax,eax
c001e9ea:	75 09                	jne    c001e9f5 <Semaphore::acquire()+0x39>
c001e9ec:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001e9f1:	85 c0                	test   eax,eax
c001e9f3:	75 4e                	jne    c001ea43 <Semaphore::acquire()+0x87>
c001e9f5:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e9fa:	48                   	dec    eax
c001e9fb:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ea00:	75 01                	jne    c001ea03 <Semaphore::acquire()+0x47>
c001ea02:	fb                   	sti    
c001ea03:	83 c4 0c             	add    esp,0xc
c001ea06:	c3                   	ret    
c001ea07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea13:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ea16:	85 c9                	test   ecx,ecx
c001ea18:	74 3a                	je     c001ea54 <Semaphore::acquire()+0x98>
c001ea1a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ea1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea23:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ea26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea2b:	83 ec 0c             	sub    esp,0xc
c001ea2e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001ea31:	6a 05                	push   0x5
c001ea33:	e8 4b fe ff ff       	call   c001e883 <blockTask(TaskState)>
c001ea38:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001ea3d:	83 c4 10             	add    esp,0x10
c001ea40:	48                   	dec    eax
c001ea41:	eb a0                	jmp    c001e9e3 <Semaphore::acquire()+0x27>
c001ea43:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001ea4d:	e8 32 fc ff ff       	call   c001e684 <schedule()>
c001ea52:	eb a1                	jmp    c001e9f5 <Semaphore::acquire()+0x39>
c001ea54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea59:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ea5c:	eb c8                	jmp    c001ea26 <Semaphore::acquire()+0x6a>

c001ea5e <taskReturned>:
c001ea5e:	83 ec 18             	sub    esp,0x18
c001ea61:	68 04 d2 02 c0       	push   0xc002d204
c001ea66:	e8 66 be ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001ea6b:	83 c4 10             	add    esp,0x10
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	6a 02                	push   0x2
c001ea73:	e8 0b fe ff ff       	call   c001e883 <blockTask(TaskState)>
c001ea78:	fa                   	cli    
c001ea79:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ea7f:	e8 00 fc ff ff       	call   c001e684 <schedule()>
c001ea84:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	48                   	dec    eax
c001ea8d:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ea92:	85 c0                	test   eax,eax
c001ea94:	75 d8                	jne    c001ea6e <taskReturned+0x10>
c001ea96:	fb                   	sti    
c001ea97:	eb d5                	jmp    c001ea6e <taskReturned+0x10>

c001ea99 <Thr::processFromPID(int)>:
c001ea99:	57                   	push   edi
c001ea9a:	56                   	push   esi
c001ea9b:	53                   	push   ebx
c001ea9c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eaa0:	83 ec 0c             	sub    esp,0xc
c001eaa3:	68 fa cf 02 c0       	push   0xc002cffa
c001eaa8:	e8 8a 43 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eaad:	fa                   	cli    
c001eaae:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001eab4:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001eabb:	e8 d6 ab 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	89 c7                	mov    edi,eax
c001eac5:	eb 14                	jmp    c001eadb <Thr::processFromPID(int)+0x42>
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	68 24 28 03 c0       	push   0xc0032824
c001eacf:	e8 c2 ab 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	39 f8                	cmp    eax,edi
c001ead9:	74 49                	je     c001eb24 <Thr::processFromPID(int)+0x8b>
c001eadb:	83 ec 0c             	sub    esp,0xc
c001eade:	68 24 28 03 c0       	push   0xc0032824
c001eae3:	e8 ae ab 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eae8:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001eaef:	89 c3                	mov    ebx,eax
c001eaf1:	e8 a8 ab 00 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eaf6:	58                   	pop    eax
c001eaf7:	5a                   	pop    edx
c001eaf8:	53                   	push   ebx
c001eaf9:	68 24 28 03 c0       	push   0xc0032824
c001eafe:	e8 49 ac 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb03:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb06:	83 c4 10             	add    esp,0x10
c001eb09:	39 30                	cmp    DWORD PTR [eax],esi
c001eb0b:	75 ba                	jne    c001eac7 <Thr::processFromPID(int)+0x2e>
c001eb0d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eb12:	48                   	dec    eax
c001eb13:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eb18:	74 07                	je     c001eb21 <Thr::processFromPID(int)+0x88>
c001eb1a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb1d:	5b                   	pop    ebx
c001eb1e:	5e                   	pop    esi
c001eb1f:	5f                   	pop    edi
c001eb20:	c3                   	ret    
c001eb21:	fb                   	sti    
c001eb22:	eb f6                	jmp    c001eb1a <Thr::processFromPID(int)+0x81>
c001eb24:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eb29:	48                   	dec    eax
c001eb2a:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eb2f:	75 01                	jne    c001eb32 <Thr::processFromPID(int)+0x99>
c001eb31:	fb                   	sti    
c001eb32:	83 ec 0c             	sub    esp,0xc
c001eb35:	68 15 d0 02 c0       	push   0xc002d015
c001eb3a:	e8 f8 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eb3f:	83 c4 10             	add    esp,0x10
c001eb42:	31 c0                	xor    eax,eax
c001eb44:	5b                   	pop    ebx
c001eb45:	5e                   	pop    esi
c001eb46:	5f                   	pop    edi
c001eb47:	c3                   	ret    

c001eb48 <unblockTask(ThreadControlBlock*)>:
c001eb48:	53                   	push   ebx
c001eb49:	83 ec 08             	sub    esp,0x8
c001eb4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb50:	fa                   	cli    
c001eb51:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001eb57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb5a:	85 c0                	test   eax,eax
c001eb5c:	74 66                	je     c001ebc4 <unblockTask(ThreadControlBlock*)+0x7c>
c001eb5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb61:	48                   	dec    eax
c001eb62:	74 31                	je     c001eb95 <unblockTask(ThreadControlBlock*)+0x4d>
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	68 24 28 03 c0       	push   0xc0032824
c001eb6c:	e8 25 ab 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	85 c0                	test   eax,eax
c001eb76:	75 17                	jne    c001eb8f <unblockTask(ThreadControlBlock*)+0x47>
c001eb78:	eb 68                	jmp    c001ebe2 <unblockTask(ThreadControlBlock*)+0x9a>
c001eb7a:	83 ec 08             	sub    esp,0x8
c001eb7d:	50                   	push   eax
c001eb7e:	68 24 28 03 c0       	push   0xc0032824
c001eb83:	e8 ac ae 00 00       	call   c0029a34 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001eb88:	83 c4 10             	add    esp,0x10
c001eb8b:	85 c0                	test   eax,eax
c001eb8d:	74 53                	je     c001ebe2 <unblockTask(ThreadControlBlock*)+0x9a>
c001eb8f:	39 c3                	cmp    ebx,eax
c001eb91:	75 e7                	jne    c001eb7a <unblockTask(ThreadControlBlock*)+0x32>
c001eb93:	eb 1c                	jmp    c001ebb1 <unblockTask(ThreadControlBlock*)+0x69>
c001eb95:	83 ec 0c             	sub    esp,0xc
c001eb98:	68 f4 d2 02 c0       	push   0xc002d2f4
c001eb9d:	e8 95 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eba2:	c7 04 24 80 d2 02 c0 	mov    DWORD PTR [esp],0xc002d280
c001eba9:	e8 89 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ebae:	83 c4 10             	add    esp,0x10
c001ebb1:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ebb6:	48                   	dec    eax
c001ebb7:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ebbc:	75 01                	jne    c001ebbf <unblockTask(ThreadControlBlock*)+0x77>
c001ebbe:	fb                   	sti    
c001ebbf:	83 c4 08             	add    esp,0x8
c001ebc2:	5b                   	pop    ebx
c001ebc3:	c3                   	ret    
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	68 38 d2 02 c0       	push   0xc002d238
c001ebcc:	e8 66 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ebd1:	c7 04 24 80 d2 02 c0 	mov    DWORD PTR [esp],0xc002d280
c001ebd8:	e8 5a 42 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ebdd:	83 c4 10             	add    esp,0x10
c001ebe0:	eb cf                	jmp    c001ebb1 <unblockTask(ThreadControlBlock*)+0x69>
c001ebe2:	83 ec 08             	sub    esp,0x8
c001ebe5:	53                   	push   ebx
c001ebe6:	68 24 28 03 c0       	push   0xc0032824
c001ebeb:	e8 5c ab 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ebf0:	83 c4 10             	add    esp,0x10
c001ebf3:	eb bc                	jmp    c001ebb1 <unblockTask(ThreadControlBlock*)+0x69>

c001ebf5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ebf5:	55                   	push   ebp
c001ebf6:	57                   	push   edi
c001ebf7:	56                   	push   esi
c001ebf8:	53                   	push   ebx
c001ebf9:	83 ec 1c             	sub    esp,0x1c
c001ebfc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec00:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec03:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ec09:	85 ff                	test   edi,edi
c001ec0b:	7e 20                	jle    c001ec2d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ec0d:	31 f6                	xor    esi,esi
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ec19:	46                   	inc    esi
c001ec1a:	e8 7d 0c ff ff       	call   c000f89c <free>
c001ec1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec22:	83 c4 10             	add    esp,0x10
c001ec25:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ec2b:	7f e2                	jg     c001ec0f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ec2d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ec37:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ec3c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ec3f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ec42:	d3 c0                	rol    eax,cl
c001ec44:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ec4b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec4e:	89 f7                	mov    edi,esi
c001ec50:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ec58:	0f 85 74 01 00 00    	jne    c001edd2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ec5e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ec64:	85 ed                	test   ebp,ebp
c001ec66:	74 1b                	je     c001ec83 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	55                   	push   ebp
c001ec6c:	e8 d5 b9 ff ff       	call   c001a646 <EnvVarContainer::~EnvVarContainer()>
c001ec71:	59                   	pop    ecx
c001ec72:	5e                   	pop    esi
c001ec73:	6a 0c                	push   0xc
c001ec75:	55                   	push   ebp
c001ec76:	e8 dc 40 ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001ec7b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	89 f7                	mov    edi,esi
c001ec83:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec89:	85 c0                	test   eax,eax
c001ec8b:	0f 84 aa 00 00 00    	je     c001ed3b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ec91:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ec94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ec98:	31 c9                	xor    ecx,ecx
c001ec9a:	eb 10                	jmp    c001ecac <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ec9c:	41                   	inc    ecx
c001ec9d:	83 f9 10             	cmp    ecx,0x10
c001eca0:	0f 84 95 00 00 00    	je     c001ed3b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eca6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecac:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ecb3:	d3 fa                	sar    edx,cl
c001ecb5:	83 e2 01             	and    edx,0x1
c001ecb8:	74 e2                	je     c001ec9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecba:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ecbd:	01 ca                	add    edx,ecx
c001ecbf:	89 d5                	mov    ebp,edx
c001ecc1:	c1 e5 05             	shl    ebp,0x5
c001ecc4:	01 ea                	add    edx,ebp
c001ecc6:	01 d0                	add    eax,edx
c001ecc8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ecce:	83 fd 07             	cmp    ebp,0x7
c001ecd1:	75 c9                	jne    c001ec9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecd3:	05 40 02 00 00       	add    eax,0x240
c001ecd8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ecdb:	83 fd ff             	cmp    ebp,0xffffffff
c001ecde:	0f 8c 08 01 00 00    	jl     c001edec <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ece4:	0f 84 b9 01 00 00    	je     c001eea3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ecea:	85 ed                	test   ebp,ebp
c001ecec:	0f 84 a0 01 00 00    	je     c001ee92 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ecf2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ecf4:	75 a6                	jne    c001ec9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecf6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecfc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed00:	01 d0                	add    eax,edx
c001ed02:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ed06:	83 ec 0c             	sub    esp,0xc
c001ed09:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ed0f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed12:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ed18:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ed1f:	50                   	push   eax
c001ed20:	e8 23 fe ff ff       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed2f:	89 f7                	mov    edi,esi
c001ed31:	41                   	inc    ecx
c001ed32:	83 f9 10             	cmp    ecx,0x10
c001ed35:	0f 85 6b ff ff ff    	jne    c001eca6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ed3b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ed41:	85 c0                	test   eax,eax
c001ed43:	74 5d                	je     c001eda2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed45:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ed4b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ed51:	74 4f                	je     c001eda2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	68 24 28 03 c0       	push   0xc0032824
c001ed5b:	e8 36 a9 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed60:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ed67:	89 c7                	mov    edi,eax
c001ed69:	e8 0c a9 00 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	84 c0                	test   al,al
c001ed73:	0f 84 e4 00 00 00    	je     c001ee5d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ed79:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed7c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ed82:	85 d2                	test   edx,edx
c001ed84:	74 0f                	je     c001ed95 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ed86:	83 ec 0c             	sub    esp,0xc
c001ed89:	8b 02                	mov    eax,DWORD PTR [edx]
c001ed8b:	52                   	push   edx
c001ed8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ed8f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed92:	83 c4 10             	add    esp,0x10
c001ed95:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ed9f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eda2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001eda8:	85 db                	test   ebx,ebx
c001edaa:	74 16                	je     c001edc2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	53                   	push   ebx
c001edb0:	e8 37 33 ff ff       	call   c00120ec <VAS::~VAS()>
c001edb5:	58                   	pop    eax
c001edb6:	5a                   	pop    edx
c001edb7:	6a 14                	push   0x14
c001edb9:	53                   	push   ebx
c001edba:	e8 98 3f ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	83 ec 0c             	sub    esp,0xc
c001edc5:	68 2c d0 02 c0       	push   0xc002d02c
c001edca:	e8 68 40 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001edcf:	83 c4 10             	add    esp,0x10
c001edd2:	83 ec 08             	sub    esp,0x8
c001edd5:	68 3f 07 00 00       	push   0x73f
c001edda:	68 3a d0 02 c0       	push   0xc002d03a
c001eddf:	e8 53 40 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ede4:	83 c4 2c             	add    esp,0x2c
c001ede7:	5b                   	pop    ebx
c001ede8:	5e                   	pop    esi
c001ede9:	5f                   	pop    edi
c001edea:	5d                   	pop    ebp
c001edeb:	c3                   	ret    
c001edec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	68 38 d3 02 c0       	push   0xc002d338
c001edf8:	e8 d4 ba ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001edfd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ee00:	83 c4 10             	add    esp,0x10
c001ee03:	89 f7                	mov    edi,esi
c001ee05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee09:	e9 8e fe ff ff       	jmp    c001ec9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ee0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ee14:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ee1a:	75 1c                	jne    c001ee38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	68 a0 d3 02 c0       	push   0xc002d3a0
c001ee24:	e8 0e 40 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ee29:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee30:	e8 4e fa ff ff       	call   c001e883 <blockTask(TaskState)>
c001ee35:	83 c4 10             	add    esp,0x10
c001ee38:	83 ec 08             	sub    esp,0x8
c001ee3b:	56                   	push   esi
c001ee3c:	68 24 28 03 c0       	push   0xc0032824
c001ee41:	e8 06 a9 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee46:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ee4d:	e8 44 a8 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee52:	83 c4 10             	add    esp,0x10
c001ee55:	39 f8                	cmp    eax,edi
c001ee57:	0f 84 1c ff ff ff    	je     c001ed79 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ee5d:	83 ec 0c             	sub    esp,0xc
c001ee60:	68 24 28 03 c0       	push   0xc0032824
c001ee65:	e8 2c a8 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee6a:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ee71:	89 c6                	mov    esi,eax
c001ee73:	e8 26 a8 00 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ee78:	83 c4 10             	add    esp,0x10
c001ee7b:	39 f3                	cmp    ebx,esi
c001ee7d:	74 b9                	je     c001ee38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee7f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ee82:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee85:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ee8b:	75 ab                	jne    c001ee38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee8d:	e9 7c ff ff ff       	jmp    c001ee0e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ee92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee96:	83 ec 0c             	sub    esp,0xc
c001ee99:	68 6c d3 02 c0       	push   0xc002d36c
c001ee9e:	e9 55 ff ff ff       	jmp    c001edf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001eea3:	8b 36                	mov    esi,DWORD PTR [esi]
c001eea5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eea9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001eeac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eeaf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001eeb5:	01 d7                	add    edi,edx
c001eeb7:	89 f8                	mov    eax,edi
c001eeb9:	e9 44 fe ff ff       	jmp    c001ed02 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001eebe <cleanerTaskFunction(void*)>:
c001eebe:	53                   	push   ebx
c001eebf:	83 ec 08             	sub    esp,0x8
c001eec2:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eec7:	48                   	dec    eax
c001eec8:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eecd:	75 01                	jne    c001eed0 <cleanerTaskFunction(void*)+0x12>
c001eecf:	fb                   	sti    
c001eed0:	fa                   	cli    
c001eed1:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eed6:	80 3d ec 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327ec,0x0
c001eedd:	8d 50 01             	lea    edx,[eax+0x1]
c001eee0:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001eee6:	0f 84 b9 00 00 00    	je     c001efa5 <cleanerTaskFunction(void*)+0xe7>
c001eeec:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eef1:	85 c0                	test   eax,eax
c001eef3:	75 01                	jne    c001eef6 <cleanerTaskFunction(void*)+0x38>
c001eef5:	fb                   	sti    
c001eef6:	c6 05 ec 27 03 c0 00 	mov    BYTE PTR ds:0xc00327ec,0x0
c001eefd:	fa                   	cli    
c001eefe:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ef04:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001ef0a:	fa                   	cli    
c001ef0b:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ef11:	eb 3e                	jmp    c001ef51 <cleanerTaskFunction(void*)+0x93>
c001ef13:	83 ec 0c             	sub    esp,0xc
c001ef16:	68 0c 28 03 c0       	push   0xc003280c
c001ef1b:	e8 76 a7 00 00       	call   c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef20:	c7 04 24 0c 28 03 c0 	mov    DWORD PTR [esp],0xc003280c
c001ef27:	89 c3                	mov    ebx,eax
c001ef29:	e8 70 a7 00 00       	call   c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef2e:	c7 04 24 50 d0 02 c0 	mov    DWORD PTR [esp],0xc002d050
c001ef35:	e8 fd 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ef3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef3d:	e8 b3 fc ff ff       	call   c001ebf5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ef42:	c7 04 24 69 d0 02 c0 	mov    DWORD PTR [esp],0xc002d069
c001ef49:	e8 e9 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001ef4e:	83 c4 10             	add    esp,0x10
c001ef51:	83 ec 0c             	sub    esp,0xc
c001ef54:	68 0c 28 03 c0       	push   0xc003280c
c001ef59:	e8 1c a7 00 00       	call   c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ef5e:	83 c4 10             	add    esp,0x10
c001ef61:	84 c0                	test   al,al
c001ef63:	74 ae                	je     c001ef13 <cleanerTaskFunction(void*)+0x55>
c001ef65:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ef6a:	48                   	dec    eax
c001ef6b:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ef70:	75 01                	jne    c001ef73 <cleanerTaskFunction(void*)+0xb5>
c001ef72:	fb                   	sti    
c001ef73:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001ef78:	48                   	dec    eax
c001ef79:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001ef7e:	0f 85 3e ff ff ff    	jne    c001eec2 <cleanerTaskFunction(void*)+0x4>
c001ef84:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001ef89:	85 c0                	test   eax,eax
c001ef8b:	0f 84 31 ff ff ff    	je     c001eec2 <cleanerTaskFunction(void*)+0x4>
c001ef91:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001ef9b:	e8 e4 f6 ff ff       	call   c001e684 <schedule()>
c001efa0:	e9 1d ff ff ff       	jmp    c001eec2 <cleanerTaskFunction(void*)+0x4>
c001efa5:	83 ec 0c             	sub    esp,0xc
c001efa8:	6a 02                	push   0x2
c001efaa:	e8 86 f8 ff ff       	call   c001e835 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	e9 3f ff ff ff       	jmp    c001eef6 <cleanerTaskFunction(void*)+0x38>

c001efb7 <terminateTask(int)>:
c001efb7:	83 ec 14             	sub    esp,0x14
c001efba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efbf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001efc2:	83 c0 0c             	add    eax,0xc
c001efc5:	50                   	push   eax
c001efc6:	68 c8 d3 02 c0       	push   0xc002d3c8
c001efcb:	e8 67 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001efd0:	fa                   	cli    
c001efd1:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001efd7:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001efdd:	fa                   	cli    
c001efde:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001efe4:	c7 04 24 7c d0 02 c0 	mov    DWORD PTR [esp],0xc002d07c
c001efeb:	e8 47 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001eff0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001eff4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eff9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001effc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f001:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f004:	5a                   	pop    edx
c001f005:	59                   	pop    ecx
c001f006:	50                   	push   eax
c001f007:	68 0c 28 03 c0       	push   0xc003280c
c001f00c:	e8 3b a7 00 00       	call   c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f011:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f016:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f01d:	c7 04 24 96 d0 02 c0 	mov    DWORD PTR [esp],0xc002d096
c001f024:	e8 0e 3e ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f029:	83 c4 10             	add    esp,0x10
c001f02c:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001f031:	85 c0                	test   eax,eax
c001f033:	0f 84 8d 00 00 00    	je     c001f0c6 <terminateTask(int)+0x10f>
c001f039:	83 ec 0c             	sub    esp,0xc
c001f03c:	68 b0 d0 02 c0       	push   0xc002d0b0
c001f041:	e8 f1 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f046:	58                   	pop    eax
c001f047:	c6 05 ec 27 03 c0 01 	mov    BYTE PTR ds:0xc00327ec,0x1
c001f04e:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001f054:	e8 ef fa ff ff       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c001f059:	c7 04 24 ca d0 02 c0 	mov    DWORD PTR [esp],0xc002d0ca
c001f060:	e8 d2 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f065:	83 c4 10             	add    esp,0x10
c001f068:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f06d:	48                   	dec    eax
c001f06e:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f073:	75 01                	jne    c001f076 <terminateTask(int)+0xbf>
c001f075:	fb                   	sti    
c001f076:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f07b:	48                   	dec    eax
c001f07c:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001f081:	75 09                	jne    c001f08c <terminateTask(int)+0xd5>
c001f083:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c001f08a:	75 4c                	jne    c001f0d8 <terminateTask(int)+0x121>
c001f08c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f091:	48                   	dec    eax
c001f092:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f097:	75 01                	jne    c001f09a <terminateTask(int)+0xe3>
c001f099:	fb                   	sti    
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	68 02 d1 02 c0       	push   0xc002d102
c001f0a2:	e8 90 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	fa                   	cli    
c001f0ab:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f0b1:	e8 ce f5 ff ff       	call   c001e684 <schedule()>
c001f0b6:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f0bb:	48                   	dec    eax
c001f0bc:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f0c1:	75 e7                	jne    c001f0aa <terminateTask(int)+0xf3>
c001f0c3:	fb                   	sti    
c001f0c4:	eb e4                	jmp    c001f0aa <terminateTask(int)+0xf3>
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	68 e4 d0 02 c0       	push   0xc002d0e4
c001f0ce:	e8 64 3d ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f0d3:	83 c4 10             	add    esp,0x10
c001f0d6:	eb 90                	jmp    c001f068 <terminateTask(int)+0xb1>
c001f0d8:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001f0e2:	e8 9d f5 ff ff       	call   c001e684 <schedule()>
c001f0e7:	eb a3                	jmp    c001f08c <terminateTask(int)+0xd5>

c001f0e9 <Thr::terminateFromIRQ(int)>:
c001f0e9:	83 ec 18             	sub    esp,0x18
c001f0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f0:	e8 c2 fe ff ff       	call   c001efb7 <terminateTask(int)>
c001f0f5:	90                   	nop

c001f0f6 <Semaphore::release()>:
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0fd:	fa                   	cli    
c001f0fe:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f103:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f109:	8d 48 01             	lea    ecx,[eax+0x1]
c001f10c:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001f112:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f115:	85 c9                	test   ecx,ecx
c001f117:	74 3c                	je     c001f155 <Semaphore::release()+0x5f>
c001f119:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f122:	51                   	push   ecx
c001f123:	e8 20 fa ff ff       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c001f128:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	48                   	dec    eax
c001f131:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001f136:	85 c0                	test   eax,eax
c001f138:	75 09                	jne    c001f143 <Semaphore::release()+0x4d>
c001f13a:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001f13f:	85 c0                	test   eax,eax
c001f141:	75 17                	jne    c001f15a <Semaphore::release()+0x64>
c001f143:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f148:	48                   	dec    eax
c001f149:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f14e:	75 01                	jne    c001f151 <Semaphore::release()+0x5b>
c001f150:	fb                   	sti    
c001f151:	83 c4 0c             	add    esp,0xc
c001f154:	c3                   	ret    
c001f155:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f158:	eb d7                	jmp    c001f131 <Semaphore::release()+0x3b>
c001f15a:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001f164:	e8 1b f5 ff ff       	call   c001e684 <schedule()>
c001f169:	eb d8                	jmp    c001f143 <Semaphore::release()+0x4d>

c001f16b <__static_initialization_and_destruction_0(int, int)>:
c001f16b:	83 ec 0c             	sub    esp,0xc
c001f16e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f173:	0f 85 88 00 00 00    	jne    c001f201 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f179:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f181:	75 7e                	jne    c001f201 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f183:	83 ec 0c             	sub    esp,0xc
c001f186:	68 24 28 03 c0       	push   0xc0032824
c001f18b:	e8 4c a8 00 00       	call   c00299dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f190:	83 c4 10             	add    esp,0x10
c001f193:	83 ec 04             	sub    esp,0x4
c001f196:	68 dc e1 02 c0       	push   0xc002e1dc
c001f19b:	68 24 28 03 c0       	push   0xc0032824
c001f1a0:	68 90 99 02 c0       	push   0xc0029990
c001f1a5:	e8 27 3b ff ff       	call   c0012cd1 <__cxa_atexit>
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	68 18 28 03 c0       	push   0xc0032818
c001f1b5:	e8 22 a8 00 00       	call   c00299dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1ba:	83 c4 10             	add    esp,0x10
c001f1bd:	83 ec 04             	sub    esp,0x4
c001f1c0:	68 dc e1 02 c0       	push   0xc002e1dc
c001f1c5:	68 18 28 03 c0       	push   0xc0032818
c001f1ca:	68 90 99 02 c0       	push   0xc0029990
c001f1cf:	e8 fd 3a ff ff       	call   c0012cd1 <__cxa_atexit>
c001f1d4:	83 c4 10             	add    esp,0x10
c001f1d7:	83 ec 0c             	sub    esp,0xc
c001f1da:	68 0c 28 03 c0       	push   0xc003280c
c001f1df:	e8 f8 a7 00 00       	call   c00299dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1e4:	83 c4 10             	add    esp,0x10
c001f1e7:	83 ec 04             	sub    esp,0x4
c001f1ea:	68 dc e1 02 c0       	push   0xc002e1dc
c001f1ef:	68 0c 28 03 c0       	push   0xc003280c
c001f1f4:	68 90 99 02 c0       	push   0xc0029990
c001f1f9:	e8 d3 3a ff ff       	call   c0012cd1 <__cxa_atexit>
c001f1fe:	83 c4 10             	add    esp,0x10
c001f201:	90                   	nop
c001f202:	83 c4 0c             	add    esp,0xc
c001f205:	c3                   	ret    

c001f206 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	83 ec 08             	sub    esp,0x8
c001f20c:	68 ff ff 00 00       	push   0xffff
c001f211:	6a 01                	push   0x1
c001f213:	e8 53 ff ff ff       	call   c001f16b <__static_initialization_and_destruction_0(int, int)>
c001f218:	83 c4 10             	add    esp,0x10
c001f21b:	83 c4 0c             	add    esp,0xc
c001f21e:	c3                   	ret    

c001f21f <Vm::inbv(unsigned short)>:
c001f21f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f223:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f228:	75 06                	jne    c001f230 <Vm::inbv(unsigned short)+0x11>
c001f22a:	a0 6c 28 03 c0       	mov    al,ds:0xc003286c
c001f22f:	c3                   	ret    
c001f230:	ec                   	in     al,dx
c001f231:	c3                   	ret    

c001f232 <Vm::outbv(unsigned short, unsigned char)>:
c001f232:	53                   	push   ebx
c001f233:	83 ec 08             	sub    esp,0x8
c001f236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f23a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f23e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f243:	75 38                	jne    c001f27d <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f245:	0f b6 c3             	movzx  eax,bl
c001f248:	51                   	push   ecx
c001f249:	51                   	push   ecx
c001f24a:	50                   	push   eax
c001f24b:	68 e7 d3 02 c0       	push   0xc002d3e7
c001f250:	e8 e2 3b ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f255:	8b 15 6c 28 03 c0    	mov    edx,DWORD PTR ds:0xc003286c
c001f25b:	83 c4 10             	add    esp,0x10
c001f25e:	8d 42 01             	lea    eax,[edx+0x1]
c001f261:	88 9a 80 28 03 c0    	mov    BYTE PTR [edx-0x3ffcd780],bl
c001f267:	a3 6c 28 03 c0       	mov    ds:0xc003286c,eax
c001f26c:	83 f8 20             	cmp    eax,0x20
c001f26f:	75 0f                	jne    c001f280 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f271:	c7 05 6c 28 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x1f
c001f27b:	eb 03                	jmp    c001f280 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f27d:	88 d8                	mov    al,bl
c001f27f:	ee                   	out    dx,al
c001f280:	83 c4 08             	add    esp,0x8
c001f283:	5b                   	pop    ebx
c001f284:	c3                   	ret    

c001f285 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f285:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f28a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f28f:	c1 e0 04             	shl    eax,0x4
c001f292:	01 d0                	add    eax,edx
c001f294:	c3                   	ret    

c001f295 <Vm::getSegment(unsigned int)>:
c001f295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f299:	c1 e8 10             	shr    eax,0x10
c001f29c:	c3                   	ret    

c001f29d <Vm::getOffset(unsigned int)>:
c001f29d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2a1:	c3                   	ret    

c001f2a2 <Vm::mainloop2()>:
c001f2a2:	83 ec 18             	sub    esp,0x18
c001f2a5:	fa                   	cli    
c001f2a6:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f2ac:	6a 02                	push   0x2
c001f2ae:	c6 05 65 28 03 c0 01 	mov    BYTE PTR ds:0xc0032865,0x1
c001f2b5:	e8 7b f5 ff ff       	call   c001e835 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2bf:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f2c3:	52                   	push   edx
c001f2c4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f2c8:	52                   	push   edx
c001f2c9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f2cd:	52                   	push   edx
c001f2ce:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f2d2:	50                   	push   eax
c001f2d3:	e8 22 10 fe ff       	call   c00002fa <goToVM86>
c001f2d8:	83 c4 2c             	add    esp,0x2c
c001f2db:	c3                   	ret    

c001f2dc <Vm::mainVm8086Loop(void*)>:
c001f2dc:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f2e1:	48                   	dec    eax
c001f2e2:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f2e7:	75 01                	jne    c001f2ea <Vm::mainVm8086Loop(void*)+0xe>
c001f2e9:	fb                   	sti    
c001f2ea:	eb b6                	jmp    c001f2a2 <Vm::mainloop2()>

c001f2ec <Vm::mainloop3(unsigned long)>:
c001f2ec:	83 ec 18             	sub    esp,0x18
c001f2ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f2f3:	fa                   	cli    
c001f2f4:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f2fa:	6a 02                	push   0x2
c001f2fc:	c6 05 64 28 03 c0 01 	mov    BYTE PTR ds:0xc0032864,0x1
c001f303:	a3 60 28 03 c0       	mov    ds:0xc0032860,eax
c001f308:	e8 28 f5 ff ff       	call   c001e835 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f30d:	83 c4 1c             	add    esp,0x1c
c001f310:	eb 90                	jmp    c001f2a2 <Vm::mainloop2()>

c001f312 <Vm::initialise8086()>:
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	68 80 00 00 00       	push   0x80
c001f31a:	6a 00                	push   0x0
c001f31c:	68 dc f2 01 c0       	push   0xc001f2dc
c001f321:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001f327:	e8 14 f1 ff ff       	call   c001e440 <Process::createThread(void (*)(void*), void*, int)>
c001f32c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f333:	a3 68 28 03 c0       	mov    ds:0xc0032868,eax
c001f338:	68 00 01 00 00       	push   0x100
c001f33d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001f342:	6a 00                	push   0x0
c001f344:	6a 00                	push   0x0
c001f346:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f34c:	e8 0d 32 ff ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f351:	83 c4 2c             	add    esp,0x2c
c001f354:	c3                   	ret    

c001f355 <Vm::finish8086()>:
c001f355:	53                   	push   ebx
c001f356:	83 ec 08             	sub    esp,0x8
c001f359:	fa                   	cli    
c001f35a:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f360:	80 3d 64 28 03 c0 00 	cmp    BYTE PTR ds:0xc0032864,0x0
c001f367:	75 15                	jne    c001f37e <Vm::finish8086()+0x29>
c001f369:	e8 16 f3 ff ff       	call   c001e684 <schedule()>
c001f36e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f373:	48                   	dec    eax
c001f374:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f379:	75 de                	jne    c001f359 <Vm::finish8086()+0x4>
c001f37b:	fb                   	sti    
c001f37c:	eb db                	jmp    c001f359 <Vm::finish8086()+0x4>
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	8b 1d 60 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032860
c001f387:	ff 35 68 28 03 c0    	push   DWORD PTR ds:0xc0032868
c001f38d:	c6 05 64 28 03 c0 00 	mov    BYTE PTR ds:0xc0032864,0x0
c001f394:	e8 af f7 ff ff       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c001f399:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f39e:	83 c4 10             	add    esp,0x10
c001f3a1:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3a4:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001f3aa:	85 d2                	test   edx,edx
c001f3ac:	75 01                	jne    c001f3af <Vm::finish8086()+0x5a>
c001f3ae:	fb                   	sti    
c001f3af:	89 d8                	mov    eax,ebx
c001f3b1:	83 c4 08             	add    esp,0x8
c001f3b4:	5b                   	pop    ebx
c001f3b5:	c3                   	ret    

c001f3b6 <Vm::getOutput8086(unsigned char*)>:
c001f3b6:	57                   	push   edi
c001f3b7:	8b 0d 6c 28 03 c0    	mov    ecx,DWORD PTR ds:0xc003286c
c001f3bd:	56                   	push   esi
c001f3be:	be 80 28 03 c0       	mov    esi,0xc0032880
c001f3c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3c9:	a1 6c 28 03 c0       	mov    eax,ds:0xc003286c
c001f3ce:	5e                   	pop    esi
c001f3cf:	c7 05 6c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x0
c001f3d9:	5f                   	pop    edi
c001f3da:	c3                   	ret    

c001f3db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f3db:	55                   	push   ebp
c001f3dc:	57                   	push   edi
c001f3dd:	56                   	push   esi
c001f3de:	53                   	push   ebx
c001f3df:	83 ec 2c             	sub    esp,0x2c
c001f3e2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f3e6:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f3ea:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3ee:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f3f2:	fa                   	cli    
c001f3f3:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f3f9:	0f b6 35 65 28 03 c0 	movzx  esi,BYTE PTR ds:0xc0032865
c001f400:	89 f0                	mov    eax,esi
c001f402:	84 c0                	test   al,al
c001f404:	75 1d                	jne    c001f423 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f40a:	e8 75 f2 ff ff       	call   c001e684 <schedule()>
c001f40f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f414:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f418:	48                   	dec    eax
c001f419:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f41e:	75 d2                	jne    c001f3f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f420:	fb                   	sti    
c001f421:	eb cf                	jmp    c001f3f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f423:	a1 68 28 03 c0       	mov    eax,ds:0xc0032868
c001f428:	c7 05 6c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x0
c001f432:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f436:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f43a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f43e:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f442:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f446:	50                   	push   eax
c001f447:	6a 20                	push   0x20
c001f449:	6a 00                	push   0x0
c001f44b:	68 80 28 03 c0       	push   0xc0032880
c001f450:	e8 fb 12 fe ff       	call   c0000750 <memset>
c001f455:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f45c:	e8 2b 04 ff ff       	call   c000f88c <malloc>
c001f461:	83 c4 0c             	add    esp,0xc
c001f464:	89 c3                	mov    ebx,eax
c001f466:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001f46c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f470:	50                   	push   eax
c001f471:	e8 20 3f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c001f476:	83 c4 10             	add    esp,0x10
c001f479:	85 db                	test   ebx,ebx
c001f47b:	75 0a                	jne    c001f487 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f47d:	83 ec 0c             	sub    esp,0xc
c001f480:	68 03 d4 02 c0       	push   0xc002d403
c001f485:	eb 3e                	jmp    c001f4c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f487:	50                   	push   eax
c001f488:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f48c:	50                   	push   eax
c001f48d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f491:	50                   	push   eax
c001f492:	53                   	push   ebx
c001f493:	e8 0e 42 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c001f498:	83 c4 10             	add    esp,0x10
c001f49b:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f4a0:	74 0a                	je     c001f4ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	68 17 d4 02 c0       	push   0xc002d417
c001f4aa:	eb 19                	jmp    c001f4c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4ac:	51                   	push   ecx
c001f4ad:	51                   	push   ecx
c001f4ae:	6a 01                	push   0x1
c001f4b0:	53                   	push   ebx
c001f4b1:	e8 44 3f ff ff       	call   c00133fa <File::open(FileOpenMode)>
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	85 c0                	test   eax,eax
c001f4bb:	74 24                	je     c001f4e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f4bd:	83 ec 0c             	sub    esp,0xc
c001f4c0:	68 30 d4 02 c0       	push   0xc002d430
c001f4c5:	e8 07 b4 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c001f4ca:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	48                   	dec    eax
c001f4d3:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f4d8:	85 c0                	test   eax,eax
c001f4da:	75 01                	jne    c001f4dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f4dc:	fb                   	sti    
c001f4dd:	31 f6                	xor    esi,esi
c001f4df:	eb 58                	jmp    c001f539 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f4e1:	0f b7 ed             	movzx  ebp,bp
c001f4e4:	50                   	push   eax
c001f4e5:	0f b7 ff             	movzx  edi,di
c001f4e8:	50                   	push   eax
c001f4e9:	55                   	push   ebp
c001f4ea:	57                   	push   edi
c001f4eb:	e8 95 fd ff ff       	call   c001f285 <Vm::realToLinear(unsigned short, unsigned short)>
c001f4f0:	5a                   	pop    edx
c001f4f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f4f3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f4f7:	51                   	push   ecx
c001f4f8:	50                   	push   eax
c001f4f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f4fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f501:	53                   	push   ebx
c001f502:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f505:	83 c4 14             	add    esp,0x14
c001f508:	53                   	push   ebx
c001f509:	e8 4a 3f ff ff       	call   c0013458 <File::close()>
c001f50e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f513:	83 c4 10             	add    esp,0x10
c001f516:	48                   	dec    eax
c001f517:	c6 05 65 28 03 c0 00 	mov    BYTE PTR ds:0xc0032865,0x0
c001f51e:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f523:	85 c0                	test   eax,eax
c001f525:	75 01                	jne    c001f528 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f527:	fb                   	sti    
c001f528:	83 ec 0c             	sub    esp,0xc
c001f52b:	ff 35 68 28 03 c0    	push   DWORD PTR ds:0xc0032868
c001f531:	e8 12 f6 ff ff       	call   c001eb48 <unblockTask(ThreadControlBlock*)>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	83 c4 2c             	add    esp,0x2c
c001f53c:	89 f0                	mov    eax,esi
c001f53e:	5b                   	pop    ebx
c001f53f:	5e                   	pop    esi
c001f540:	5f                   	pop    edi
c001f541:	5d                   	pop    ebp
c001f542:	c3                   	ret    

c001f543 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f543:	57                   	push   edi
c001f544:	56                   	push   esi
c001f545:	53                   	push   ebx
c001f546:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f54e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f552:	83 e8 06             	sub    eax,0x6
c001f555:	0f b7 c0             	movzx  eax,ax
c001f558:	50                   	push   eax
c001f559:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f55e:	50                   	push   eax
c001f55f:	e8 21 fd ff ff       	call   c001f285 <Vm::realToLinear(unsigned short, unsigned short)>
c001f564:	5a                   	pop    edx
c001f565:	5e                   	pop    esi
c001f566:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f569:	8d 56 fa             	lea    edx,[esi-0x6]
c001f56c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f572:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f575:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f578:	83 c2 02             	add    edx,0x2
c001f57b:	66 89 10             	mov    WORD PTR [eax],dx
c001f57e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f581:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f585:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f588:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f58c:	89 d6                	mov    esi,edx
c001f58e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f594:	66 81 e6 ff fd       	and    si,0xfdff
c001f599:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f59d:	74 07                	je     c001f5a6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f59f:	89 d6                	mov    esi,edx
c001f5a1:	66 81 ce 00 02       	or     si,0x200
c001f5a6:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f5aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f5af:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f5b3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f5bb:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f5be:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f5c6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f5c9:	5b                   	pop    ebx
c001f5ca:	5e                   	pop    esi
c001f5cb:	5f                   	pop    edi
c001f5cc:	c3                   	ret    

c001f5cd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f5cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5d2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5d7:	c1 e0 04             	shl    eax,0x4
c001f5da:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f5dd:	c3                   	ret    

c001f5de <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f5de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5e8:	c1 e0 04             	shl    eax,0x4
c001f5eb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f5ef:	c3                   	ret    

c001f5f0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f5f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5fa:	c1 e0 04             	shl    eax,0x4
c001f5fd:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f600:	c3                   	ret    

c001f601 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f601:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f606:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f60b:	c1 e0 04             	shl    eax,0x4
c001f60e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f612:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f615:	c3                   	ret    

c001f616 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f616:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f61b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f620:	c1 e0 04             	shl    eax,0x4
c001f623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f627:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f62b:	c3                   	ret    

c001f62c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f62c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f631:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f636:	c1 e0 04             	shl    eax,0x4
c001f639:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f63d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f640:	c3                   	ret    

c001f641 <Vm::faultHandler(regs*)>:
c001f641:	55                   	push   ebp
c001f642:	57                   	push   edi
c001f643:	56                   	push   esi
c001f644:	53                   	push   ebx
c001f645:	83 ec 1c             	sub    esp,0x1c
c001f648:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f64c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f64f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f652:	0f b7 c1             	movzx  eax,cx
c001f655:	50                   	push   eax
c001f656:	0f b7 c3             	movzx  eax,bx
c001f659:	c1 e3 04             	shl    ebx,0x4
c001f65c:	50                   	push   eax
c001f65d:	e8 23 fc ff ff       	call   c001f285 <Vm::realToLinear(unsigned short, unsigned short)>
c001f662:	5a                   	pop    edx
c001f663:	89 c5                	mov    ebp,eax
c001f665:	5e                   	pop    esi
c001f666:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f66a:	50                   	push   eax
c001f66b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f66f:	50                   	push   eax
c001f670:	e8 10 fc ff ff       	call   c001f285 <Vm::realToLinear(unsigned short, unsigned short)>
c001f675:	01 cb                	add    ebx,ecx
c001f677:	89 c6                	mov    esi,eax
c001f679:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f67d:	50                   	push   eax
c001f67e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f682:	50                   	push   eax
c001f683:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f687:	50                   	push   eax
c001f688:	55                   	push   ebp
c001f689:	53                   	push   ebx
c001f68a:	b3 06                	mov    bl,0x6
c001f68c:	68 49 d4 02 c0       	push   0xc002d449
c001f691:	e8 a1 37 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f696:	83 c4 20             	add    esp,0x20
c001f699:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f69e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f6a3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6a7:	3c 9d                	cmp    al,0x9d
c001f6a9:	0f 84 d7 02 00 00    	je     c001f986 <Vm::faultHandler(regs*)+0x345>
c001f6af:	0f 87 a3 00 00 00    	ja     c001f758 <Vm::faultHandler(regs*)+0x117>
c001f6b5:	3c 66                	cmp    al,0x66
c001f6b7:	0f 84 15 02 00 00    	je     c001f8d2 <Vm::faultHandler(regs*)+0x291>
c001f6bd:	77 5f                	ja     c001f71e <Vm::faultHandler(regs*)+0xdd>
c001f6bf:	3c 36                	cmp    al,0x36
c001f6c1:	0f 84 f1 01 00 00    	je     c001f8b8 <Vm::faultHandler(regs*)+0x277>
c001f6c7:	77 28                	ja     c001f6f1 <Vm::faultHandler(regs*)+0xb0>
c001f6c9:	3c 26                	cmp    al,0x26
c001f6cb:	0f 84 99 01 00 00    	je     c001f86a <Vm::faultHandler(regs*)+0x229>
c001f6d1:	3c 2e                	cmp    al,0x2e
c001f6d3:	0f 85 3b 07 00 00    	jne    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f6d9:	83 ec 0c             	sub    esp,0xc
c001f6dc:	31 db                	xor    ebx,ebx
c001f6de:	68 5e d4 02 c0       	push   0xc002d45e
c001f6e3:	e8 4f 37 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f6e8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	45                   	inc    ebp
c001f6ef:	eb b2                	jmp    c001f6a3 <Vm::faultHandler(regs*)+0x62>
c001f6f1:	3c 64                	cmp    al,0x64
c001f6f3:	0f 84 8b 01 00 00    	je     c001f884 <Vm::faultHandler(regs*)+0x243>
c001f6f9:	0f 87 9f 01 00 00    	ja     c001f89e <Vm::faultHandler(regs*)+0x25d>
c001f6ff:	3c 3e                	cmp    al,0x3e
c001f701:	0f 85 0d 07 00 00    	jne    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f707:	83 ec 0c             	sub    esp,0xc
c001f70a:	b3 01                	mov    bl,0x1
c001f70c:	68 62 d4 02 c0       	push   0xc002d462
c001f711:	e8 21 37 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f716:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f719:	83 c4 10             	add    esp,0x10
c001f71c:	eb d0                	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f71e:	3c 6d                	cmp    al,0x6d
c001f720:	0f 84 af 03 00 00    	je     c001fad5 <Vm::faultHandler(regs*)+0x494>
c001f726:	77 15                	ja     c001f73d <Vm::faultHandler(regs*)+0xfc>
c001f728:	3c 67                	cmp    al,0x67
c001f72a:	0f 84 bf 01 00 00    	je     c001f8ef <Vm::faultHandler(regs*)+0x2ae>
c001f730:	3c 6c                	cmp    al,0x6c
c001f732:	0f 84 3f 03 00 00    	je     c001fa77 <Vm::faultHandler(regs*)+0x436>
c001f738:	e9 d7 06 00 00       	jmp    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f73d:	3c 6f                	cmp    al,0x6f
c001f73f:	0f 84 a4 04 00 00    	je     c001fbe9 <Vm::faultHandler(regs*)+0x5a8>
c001f745:	0f 82 11 04 00 00    	jb     c001fb5c <Vm::faultHandler(regs*)+0x51b>
c001f74b:	3c 9c                	cmp    al,0x9c
c001f74d:	0f 84 ba 01 00 00    	je     c001f90d <Vm::faultHandler(regs*)+0x2cc>
c001f753:	e9 bc 06 00 00       	jmp    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f758:	3c ec                	cmp    al,0xec
c001f75a:	0f 84 24 06 00 00    	je     c001fd84 <Vm::faultHandler(regs*)+0x743>
c001f760:	0f 87 93 00 00 00    	ja     c001f7f9 <Vm::faultHandler(regs*)+0x1b8>
c001f766:	3c e4                	cmp    al,0xe4
c001f768:	0f 84 5c 05 00 00    	je     c001fcca <Vm::faultHandler(regs*)+0x689>
c001f76e:	77 6a                	ja     c001f7da <Vm::faultHandler(regs*)+0x199>
c001f770:	3c cd                	cmp    al,0xcd
c001f772:	0f 84 7e 02 00 00    	je     c001f9f6 <Vm::faultHandler(regs*)+0x3b5>
c001f778:	3c cf                	cmp    al,0xcf
c001f77a:	0f 85 94 06 00 00    	jne    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f780:	83 ec 0c             	sub    esp,0xc
c001f783:	68 a6 d4 02 c0       	push   0xc002d4a6
c001f788:	e8 aa 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f78d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f790:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f793:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f797:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f79a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f79e:	0d 00 02 02 00       	or     eax,0x20200
c001f7a3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7a6:	56                   	push   esi
c001f7a7:	53                   	push   ebx
c001f7a8:	52                   	push   edx
c001f7a9:	68 ac d4 02 c0       	push   0xc002d4ac
c001f7ae:	e8 84 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f7b3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f7b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7bd:	66 c1 e8 09          	shr    ax,0x9
c001f7c1:	83 e0 01             	and    eax,0x1
c001f7c4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7c7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7ca:	83 c0 06             	add    eax,0x6
c001f7cd:	25 ff ff 00 00       	and    eax,0xffff
c001f7d2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7d5:	e9 95 02 00 00       	jmp    c001fa6f <Vm::faultHandler(regs*)+0x42e>
c001f7da:	3c e6                	cmp    al,0xe6
c001f7dc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f7e0:	0f 84 4e 05 00 00    	je     c001fd34 <Vm::faultHandler(regs*)+0x6f3>
c001f7e6:	0f 82 0a 05 00 00    	jb     c001fcf6 <Vm::faultHandler(regs*)+0x6b5>
c001f7ec:	3c e7                	cmp    al,0xe7
c001f7ee:	0f 84 69 05 00 00    	je     c001fd5d <Vm::faultHandler(regs*)+0x71c>
c001f7f4:	e9 1b 06 00 00       	jmp    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f7f9:	3c ef                	cmp    al,0xef
c001f7fb:	0f 84 e6 05 00 00    	je     c001fde7 <Vm::faultHandler(regs*)+0x7a6>
c001f801:	77 37                	ja     c001f83a <Vm::faultHandler(regs*)+0x1f9>
c001f803:	3c ed                	cmp    al,0xed
c001f805:	0f 84 a3 05 00 00    	je     c001fdae <Vm::faultHandler(regs*)+0x76d>
c001f80b:	3c ee                	cmp    al,0xee
c001f80d:	0f 85 01 06 00 00    	jne    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f813:	52                   	push   edx
c001f814:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f817:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f81a:	68 47 d5 02 c0       	push   0xc002d547
c001f81f:	e8 13 36 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f824:	59                   	pop    ecx
c001f825:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f829:	5b                   	pop    ebx
c001f82a:	50                   	push   eax
c001f82b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f82f:	50                   	push   eax
c001f830:	e8 fd f9 ff ff       	call   c001f232 <Vm::outbv(unsigned short, unsigned char)>
c001f835:	e9 a5 05 00 00       	jmp    c001fddf <Vm::faultHandler(regs*)+0x79e>
c001f83a:	3c fa                	cmp    al,0xfa
c001f83c:	0f 84 f7 01 00 00    	je     c001fa39 <Vm::faultHandler(regs*)+0x3f8>
c001f842:	3c fb                	cmp    al,0xfb
c001f844:	0f 84 0a 02 00 00    	je     c001fa54 <Vm::faultHandler(regs*)+0x413>
c001f84a:	3c f3                	cmp    al,0xf3
c001f84c:	0f 85 c2 05 00 00    	jne    c001fe14 <Vm::faultHandler(regs*)+0x7d3>
c001f852:	83 ec 0c             	sub    esp,0xc
c001f855:	68 7f d4 02 c0       	push   0xc002d47f
c001f85a:	e8 d8 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f85f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f862:	83 c4 10             	add    esp,0x10
c001f865:	e9 84 fe ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	b3 02                	mov    bl,0x2
c001f86f:	68 5a d4 02 c0       	push   0xc002d45a
c001f874:	e8 be 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f879:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f87c:	83 c4 10             	add    esp,0x10
c001f87f:	e9 6a fe ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	b3 03                	mov    bl,0x3
c001f889:	68 66 d4 02 c0       	push   0xc002d466
c001f88e:	e8 a4 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f893:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f896:	83 c4 10             	add    esp,0x10
c001f899:	e9 50 fe ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f89e:	83 ec 0c             	sub    esp,0xc
c001f8a1:	b3 04                	mov    bl,0x4
c001f8a3:	68 6a d4 02 c0       	push   0xc002d46a
c001f8a8:	e8 8a 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f8ad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8b0:	83 c4 10             	add    esp,0x10
c001f8b3:	e9 36 fe ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f8b8:	83 ec 0c             	sub    esp,0xc
c001f8bb:	b3 05                	mov    bl,0x5
c001f8bd:	68 6e d4 02 c0       	push   0xc002d46e
c001f8c2:	e8 70 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f8c7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8ca:	83 c4 10             	add    esp,0x10
c001f8cd:	e9 1c fe ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f8d2:	83 ec 0c             	sub    esp,0xc
c001f8d5:	68 72 d4 02 c0       	push   0xc002d472
c001f8da:	e8 58 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8e5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f8ea:	e9 ff fd ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f8ef:	50                   	push   eax
c001f8f0:	50                   	push   eax
c001f8f1:	6a 01                	push   0x1
c001f8f3:	68 77 d4 02 c0       	push   0xc002d477
c001f8f8:	e8 3a 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f8fd:	83 c4 10             	add    esp,0x10
c001f900:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f903:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f908:	e9 e1 fd ff ff       	jmp    c001f6ee <Vm::faultHandler(regs*)+0xad>
c001f90d:	83 ec 0c             	sub    esp,0xc
c001f910:	68 85 d4 02 c0       	push   0xc002d485
c001f915:	e8 1d 35 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f91a:	83 c4 10             	add    esp,0x10
c001f91d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f920:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f925:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f928:	74 2f                	je     c001f959 <Vm::faultHandler(regs*)+0x318>
c001f92a:	83 ea 04             	sub    edx,0x4
c001f92d:	25 ff 0d 00 00       	and    eax,0xdff
c001f932:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f938:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f93b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f93e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f944:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f948:	0f 84 bf 04 00 00    	je     c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001f94e:	80 cc 02             	or     ah,0x2
c001f951:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f954:	e9 b4 04 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001f959:	83 ea 02             	sub    edx,0x2
c001f95c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f962:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f965:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f969:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f96f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f973:	74 05                	je     c001f97a <Vm::faultHandler(regs*)+0x339>
c001f975:	80 cc 02             	or     ah,0x2
c001f978:	eb 03                	jmp    c001f97d <Vm::faultHandler(regs*)+0x33c>
c001f97a:	80 e4 fd             	and    ah,0xfd
c001f97d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f981:	e9 87 04 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001f986:	83 ec 0c             	sub    esp,0xc
c001f989:	68 8c d4 02 c0       	push   0xc002d48c
c001f98e:	e8 a4 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001f993:	83 c4 10             	add    esp,0x10
c001f996:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f99b:	74 28                	je     c001f9c5 <Vm::faultHandler(regs*)+0x384>
c001f99d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f99f:	25 ff 0d 00 00       	and    eax,0xdff
c001f9a4:	0d 00 02 02 00       	or     eax,0x20200
c001f9a9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9ac:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9b4:	c1 e8 09             	shr    eax,0x9
c001f9b7:	83 e0 01             	and    eax,0x1
c001f9ba:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f9bd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f9c0:	83 c0 04             	add    eax,0x4
c001f9c3:	eb 24                	jmp    c001f9e9 <Vm::faultHandler(regs*)+0x3a8>
c001f9c5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f9c8:	0d 00 02 02 00       	or     eax,0x20200
c001f9cd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9d0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f9d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9d9:	66 c1 e8 09          	shr    ax,0x9
c001f9dd:	83 e0 01             	and    eax,0x1
c001f9e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f9e3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f9e6:	83 c0 02             	add    eax,0x2
c001f9e9:	25 ff ff 00 00       	and    eax,0xffff
c001f9ee:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f9f1:	e9 17 04 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001f9f6:	53                   	push   ebx
c001f9f7:	53                   	push   ebx
c001f9f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9fc:	50                   	push   eax
c001f9fd:	68 92 d4 02 c0       	push   0xc002d492
c001fa02:	e8 30 34 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fa07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa0b:	83 c4 10             	add    esp,0x10
c001fa0e:	3c ee                	cmp    al,0xee
c001fa10:	75 10                	jne    c001fa22 <Vm::faultHandler(regs*)+0x3e1>
c001fa12:	83 ec 0c             	sub    esp,0xc
c001fa15:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fa18:	e8 cf f8 ff ff       	call   c001f2ec <Vm::mainloop3(unsigned long)>
c001fa1d:	e9 c0 03 00 00       	jmp    c001fde2 <Vm::faultHandler(regs*)+0x7a1>
c001fa22:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001fa26:	83 ec 0c             	sub    esp,0xc
c001fa29:	53                   	push   ebx
c001fa2a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001fa2e:	53                   	push   ebx
c001fa2f:	55                   	push   ebp
c001fa30:	50                   	push   eax
c001fa31:	57                   	push   edi
c001fa32:	e8 0c fb ff ff       	call   c001f543 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001fa37:	eb 36                	jmp    c001fa6f <Vm::faultHandler(regs*)+0x42e>
c001fa39:	83 ec 0c             	sub    esp,0xc
c001fa3c:	68 9c d4 02 c0       	push   0xc002d49c
c001fa41:	e8 f1 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fa46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa4b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fa4f:	e9 8b 03 00 00       	jmp    c001fddf <Vm::faultHandler(regs*)+0x79e>
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	68 a1 d4 02 c0       	push   0xc002d4a1
c001fa5c:	e8 d6 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fa61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa66:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fa6a:	e9 70 03 00 00       	jmp    c001fddf <Vm::faultHandler(regs*)+0x79e>
c001fa6f:	83 c4 20             	add    esp,0x20
c001fa72:	e9 99 03 00 00       	jmp    c001fe10 <Vm::faultHandler(regs*)+0x7cf>
c001fa77:	83 ec 0c             	sub    esp,0xc
c001fa7a:	68 df d4 02 c0       	push   0xc002d4df
c001fa7f:	e8 b3 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fa84:	83 c4 10             	add    esp,0x10
c001fa87:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa8a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa8f:	74 0d                	je     c001fa9e <Vm::faultHandler(regs*)+0x45d>
c001fa91:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fa98:	0f 87 9e 01 00 00    	ja     c001fc3c <Vm::faultHandler(regs*)+0x5fb>
c001fa9e:	83 ec 0c             	sub    esp,0xc
c001faa1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001faa5:	0f b7 db             	movzx  ebx,bx
c001faa8:	50                   	push   eax
c001faa9:	e8 71 f7 ff ff       	call   c001f21f <Vm::inbv(unsigned short)>
c001faae:	83 c4 0c             	add    esp,0xc
c001fab1:	0f b6 c0             	movzx  eax,al
c001fab4:	50                   	push   eax
c001fab5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fab9:	50                   	push   eax
c001faba:	53                   	push   ebx
c001fabb:	e8 41 fb ff ff       	call   c001f601 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fac6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001faca:	74 03                	je     c001facf <Vm::faultHandler(regs*)+0x48e>
c001facc:	48                   	dec    eax
c001facd:	eb 01                	jmp    c001fad0 <Vm::faultHandler(regs*)+0x48f>
c001facf:	40                   	inc    eax
c001fad0:	0f b7 c0             	movzx  eax,ax
c001fad3:	eb 7f                	jmp    c001fb54 <Vm::faultHandler(regs*)+0x513>
c001fad5:	83 ec 0c             	sub    esp,0xc
c001fad8:	68 11 d5 02 c0       	push   0xc002d511
c001fadd:	e8 55 33 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fae2:	83 c4 10             	add    esp,0x10
c001fae5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fae8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faed:	74 0d                	je     c001fafc <Vm::faultHandler(regs*)+0x4bb>
c001faef:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001faf6:	0f 87 40 01 00 00    	ja     c001fc3c <Vm::faultHandler(regs*)+0x5fb>
c001fafc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001faff:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fb03:	0f b7 db             	movzx  ebx,bx
c001fb06:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb0b:	74 20                	je     c001fb2d <Vm::faultHandler(regs*)+0x4ec>
c001fb0d:	ed                   	in     eax,dx
c001fb0e:	51                   	push   ecx
c001fb0f:	50                   	push   eax
c001fb10:	56                   	push   esi
c001fb11:	53                   	push   ebx
c001fb12:	e8 15 fb ff ff       	call   c001f62c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fb17:	83 c4 10             	add    esp,0x10
c001fb1a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb1d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb21:	74 05                	je     c001fb28 <Vm::faultHandler(regs*)+0x4e7>
c001fb23:	83 e8 04             	sub    eax,0x4
c001fb26:	eb 27                	jmp    c001fb4f <Vm::faultHandler(regs*)+0x50e>
c001fb28:	83 c0 04             	add    eax,0x4
c001fb2b:	eb 22                	jmp    c001fb4f <Vm::faultHandler(regs*)+0x50e>
c001fb2d:	66 ed                	in     ax,dx
c001fb2f:	0f b7 c0             	movzx  eax,ax
c001fb32:	52                   	push   edx
c001fb33:	50                   	push   eax
c001fb34:	56                   	push   esi
c001fb35:	53                   	push   ebx
c001fb36:	e8 db fa ff ff       	call   c001f616 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb41:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb45:	74 05                	je     c001fb4c <Vm::faultHandler(regs*)+0x50b>
c001fb47:	83 e8 02             	sub    eax,0x2
c001fb4a:	eb 03                	jmp    c001fb4f <Vm::faultHandler(regs*)+0x50e>
c001fb4c:	83 c0 02             	add    eax,0x2
c001fb4f:	25 ff ff 00 00       	and    eax,0xffff
c001fb54:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fb57:	e9 b1 02 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	4b                   	dec    ebx
c001fb60:	68 17 d5 02 c0       	push   0xc002d517
c001fb65:	e8 cd 32 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fb6a:	83 c4 10             	add    esp,0x10
c001fb6d:	80 fb 05             	cmp    bl,0x5
c001fb70:	77 0a                	ja     c001fb7c <Vm::faultHandler(regs*)+0x53b>
c001fb72:	0f b6 db             	movzx  ebx,bl
c001fb75:	ff 24 9d 88 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a78]
c001fb7c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fb80:	eb 1b                	jmp    c001fb9d <Vm::faultHandler(regs*)+0x55c>
c001fb82:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fb86:	eb 15                	jmp    c001fb9d <Vm::faultHandler(regs*)+0x55c>
c001fb88:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fb8c:	eb 0f                	jmp    c001fb9d <Vm::faultHandler(regs*)+0x55c>
c001fb8e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fb92:	eb 09                	jmp    c001fb9d <Vm::faultHandler(regs*)+0x55c>
c001fb94:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fb97:	eb 04                	jmp    c001fb9d <Vm::faultHandler(regs*)+0x55c>
c001fb99:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fb9d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fba2:	74 0d                	je     c001fbb1 <Vm::faultHandler(regs*)+0x570>
c001fba4:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fbab:	0f 87 8b 00 00 00    	ja     c001fc3c <Vm::faultHandler(regs*)+0x5fb>
c001fbb1:	53                   	push   ebx
c001fbb2:	53                   	push   ebx
c001fbb3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fbb7:	52                   	push   edx
c001fbb8:	50                   	push   eax
c001fbb9:	e8 0f fa ff ff       	call   c001f5cd <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fbbe:	5e                   	pop    esi
c001fbbf:	0f b6 c0             	movzx  eax,al
c001fbc2:	5d                   	pop    ebp
c001fbc3:	50                   	push   eax
c001fbc4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbc8:	50                   	push   eax
c001fbc9:	e8 64 f6 ff ff       	call   c001f232 <Vm::outbv(unsigned short, unsigned char)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fbd4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fbd8:	74 03                	je     c001fbdd <Vm::faultHandler(regs*)+0x59c>
c001fbda:	48                   	dec    eax
c001fbdb:	eb 01                	jmp    c001fbde <Vm::faultHandler(regs*)+0x59d>
c001fbdd:	40                   	inc    eax
c001fbde:	0f b7 c0             	movzx  eax,ax
c001fbe1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fbe4:	e9 24 02 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	4b                   	dec    ebx
c001fbed:	68 17 d5 02 c0       	push   0xc002d517
c001fbf2:	e8 40 32 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	80 fb 05             	cmp    bl,0x5
c001fbfd:	77 0a                	ja     c001fc09 <Vm::faultHandler(regs*)+0x5c8>
c001fbff:	0f b6 db             	movzx  ebx,bl
c001fc02:	ff 24 9d a0 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a60]
c001fc09:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc0d:	eb 1b                	jmp    c001fc2a <Vm::faultHandler(regs*)+0x5e9>
c001fc0f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc13:	eb 15                	jmp    c001fc2a <Vm::faultHandler(regs*)+0x5e9>
c001fc15:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc19:	eb 0f                	jmp    c001fc2a <Vm::faultHandler(regs*)+0x5e9>
c001fc1b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc1f:	eb 09                	jmp    c001fc2a <Vm::faultHandler(regs*)+0x5e9>
c001fc21:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc24:	eb 04                	jmp    c001fc2a <Vm::faultHandler(regs*)+0x5e9>
c001fc26:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc2a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fc2d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc32:	74 39                	je     c001fc6d <Vm::faultHandler(regs*)+0x62c>
c001fc34:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fc3a:	76 31                	jbe    c001fc6d <Vm::faultHandler(regs*)+0x62c>
c001fc3c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc40:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fc44:	51                   	push   ecx
c001fc45:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc49:	51                   	push   ecx
c001fc4a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc4e:	51                   	push   ecx
c001fc4f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc53:	51                   	push   ecx
c001fc54:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc58:	52                   	push   edx
c001fc59:	50                   	push   eax
c001fc5a:	50                   	push   eax
c001fc5b:	68 e4 d4 02 c0       	push   0xc002d4e4
c001fc60:	e8 d2 31 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fc65:	83 c4 20             	add    esp,0x20
c001fc68:	e9 fb 01 00 00       	jmp    c001fe68 <Vm::faultHandler(regs*)+0x827>
c001fc6d:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fc70:	0f b7 d3             	movzx  edx,bx
c001fc73:	81 e6 00 04 00 00    	and    esi,0x400
c001fc79:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fc7c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc81:	74 1d                	je     c001fca0 <Vm::faultHandler(regs*)+0x65f>
c001fc83:	51                   	push   ecx
c001fc84:	51                   	push   ecx
c001fc85:	52                   	push   edx
c001fc86:	50                   	push   eax
c001fc87:	e8 64 f9 ff ff       	call   c001f5f0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fc8c:	83 c4 10             	add    esp,0x10
c001fc8f:	89 ea                	mov    edx,ebp
c001fc91:	ef                   	out    dx,eax
c001fc92:	85 f6                	test   esi,esi
c001fc94:	74 05                	je     c001fc9b <Vm::faultHandler(regs*)+0x65a>
c001fc96:	83 eb 04             	sub    ebx,0x4
c001fc99:	eb 21                	jmp    c001fcbc <Vm::faultHandler(regs*)+0x67b>
c001fc9b:	83 c3 04             	add    ebx,0x4
c001fc9e:	eb 1c                	jmp    c001fcbc <Vm::faultHandler(regs*)+0x67b>
c001fca0:	51                   	push   ecx
c001fca1:	51                   	push   ecx
c001fca2:	52                   	push   edx
c001fca3:	50                   	push   eax
c001fca4:	e8 35 f9 ff ff       	call   c001f5de <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	89 ea                	mov    edx,ebp
c001fcae:	66 ef                	out    dx,ax
c001fcb0:	85 f6                	test   esi,esi
c001fcb2:	74 05                	je     c001fcb9 <Vm::faultHandler(regs*)+0x678>
c001fcb4:	83 eb 02             	sub    ebx,0x2
c001fcb7:	eb 03                	jmp    c001fcbc <Vm::faultHandler(regs*)+0x67b>
c001fcb9:	83 c3 02             	add    ebx,0x2
c001fcbc:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fcc2:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fcc5:	e9 43 01 00 00       	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001fcca:	53                   	push   ebx
c001fccb:	53                   	push   ebx
c001fccc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcd0:	50                   	push   eax
c001fcd1:	68 1d d5 02 c0       	push   0xc002d51d
c001fcd6:	e8 5c 31 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fcdb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fce2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fce9:	e8 31 f5 ff ff       	call   c001f21f <Vm::inbv(unsigned short)>
c001fcee:	0f b6 c0             	movzx  eax,al
c001fcf1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fcf4:	eb 5e                	jmp    c001fd54 <Vm::faultHandler(regs*)+0x713>
c001fcf6:	51                   	push   ecx
c001fcf7:	51                   	push   ecx
c001fcf8:	53                   	push   ebx
c001fcf9:	68 23 d5 02 c0       	push   0xc002d523
c001fcfe:	e8 34 31 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd0b:	74 07                	je     c001fd14 <Vm::faultHandler(regs*)+0x6d3>
c001fd0d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd11:	ed                   	in     eax,dx
c001fd12:	eb 14                	jmp    c001fd28 <Vm::faultHandler(regs*)+0x6e7>
c001fd14:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fd17:	66 31 db             	xor    bx,bx
c001fd1a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fd1d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd21:	66 ed                	in     ax,dx
c001fd23:	0f b7 c0             	movzx  eax,ax
c001fd26:	09 d8                	or     eax,ebx
c001fd28:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd2b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd2f:	e9 dc 00 00 00       	jmp    c001fe10 <Vm::faultHandler(regs*)+0x7cf>
c001fd34:	50                   	push   eax
c001fd35:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd38:	53                   	push   ebx
c001fd39:	68 29 d5 02 c0       	push   0xc002d529
c001fd3e:	e8 f4 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fd43:	58                   	pop    eax
c001fd44:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fd48:	5a                   	pop    edx
c001fd49:	50                   	push   eax
c001fd4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd4e:	50                   	push   eax
c001fd4f:	e8 de f4 ff ff       	call   c001f232 <Vm::outbv(unsigned short, unsigned char)>
c001fd54:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd58:	e9 85 00 00 00       	jmp    c001fde2 <Vm::faultHandler(regs*)+0x7a1>
c001fd5d:	50                   	push   eax
c001fd5e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd61:	53                   	push   ebx
c001fd62:	68 32 d5 02 c0       	push   0xc002d532
c001fd67:	e8 cb 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd73:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd78:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fd7b:	74 03                	je     c001fd80 <Vm::faultHandler(regs*)+0x73f>
c001fd7d:	ef                   	out    dx,eax
c001fd7e:	eb ab                	jmp    c001fd2b <Vm::faultHandler(regs*)+0x6ea>
c001fd80:	66 ef                	out    dx,ax
c001fd82:	eb a7                	jmp    c001fd2b <Vm::faultHandler(regs*)+0x6ea>
c001fd84:	55                   	push   ebp
c001fd85:	55                   	push   ebp
c001fd86:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd89:	68 3b d5 02 c0       	push   0xc002d53b
c001fd8e:	e8 a4 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fd93:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fd9a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fd9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fda1:	e8 79 f4 ff ff       	call   c001f21f <Vm::inbv(unsigned short)>
c001fda6:	0f b6 c0             	movzx  eax,al
c001fda9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fdac:	eb 31                	jmp    c001fddf <Vm::faultHandler(regs*)+0x79e>
c001fdae:	56                   	push   esi
c001fdaf:	56                   	push   esi
c001fdb0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fdb3:	68 41 d5 02 c0       	push   0xc002d541
c001fdb8:	e8 7a 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fdc3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fdc8:	74 03                	je     c001fdcd <Vm::faultHandler(regs*)+0x78c>
c001fdca:	ed                   	in     eax,dx
c001fdcb:	eb 0d                	jmp    c001fdda <Vm::faultHandler(regs*)+0x799>
c001fdcd:	66 ed                	in     ax,dx
c001fdcf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fdd2:	0f b7 c0             	movzx  eax,ax
c001fdd5:	66 31 d2             	xor    dx,dx
c001fdd8:	09 d0                	or     eax,edx
c001fdda:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fddd:	eb 2e                	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001fddf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fde2:	83 c4 10             	add    esp,0x10
c001fde5:	eb 29                	jmp    c001fe10 <Vm::faultHandler(regs*)+0x7cf>
c001fde7:	50                   	push   eax
c001fde8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fdeb:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fdee:	68 50 d5 02 c0       	push   0xc002d550
c001fdf3:	e8 3f 30 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fdf8:	83 c4 10             	add    esp,0x10
c001fdfb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fdfe:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe03:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe06:	74 03                	je     c001fe0b <Vm::faultHandler(regs*)+0x7ca>
c001fe08:	ef                   	out    dx,eax
c001fe09:	eb 02                	jmp    c001fe0d <Vm::faultHandler(regs*)+0x7cc>
c001fe0b:	66 ef                	out    dx,ax
c001fe0d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe10:	b0 01                	mov    al,0x1
c001fe12:	eb 56                	jmp    c001fe6a <Vm::faultHandler(regs*)+0x829>
c001fe14:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fe18:	51                   	push   ecx
c001fe19:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fe1d:	51                   	push   ecx
c001fe1e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fe22:	51                   	push   ecx
c001fe23:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fe27:	51                   	push   ecx
c001fe28:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe2c:	52                   	push   edx
c001fe2d:	50                   	push   eax
c001fe2e:	50                   	push   eax
c001fe2f:	68 59 d5 02 c0       	push   0xc002d559
c001fe34:	e8 fe 2f ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c001fe39:	83 c4 20             	add    esp,0x20
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	6a 60                	push   0x60
c001fe41:	e8 d9 f3 ff ff       	call   c001f21f <Vm::inbv(unsigned short)>
c001fe46:	83 c4 10             	add    esp,0x10
c001fe49:	3c 1c                	cmp    al,0x1c
c001fe4b:	74 04                	je     c001fe51 <Vm::faultHandler(regs*)+0x810>
c001fe4d:	3c 5a                	cmp    al,0x5a
c001fe4f:	75 eb                	jne    c001fe3c <Vm::faultHandler(regs*)+0x7fb>
c001fe51:	3c 1c                	cmp    al,0x1c
c001fe53:	74 04                	je     c001fe59 <Vm::faultHandler(regs*)+0x818>
c001fe55:	3c 5a                	cmp    al,0x5a
c001fe57:	75 0f                	jne    c001fe68 <Vm::faultHandler(regs*)+0x827>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	6a 60                	push   0x60
c001fe5e:	e8 bc f3 ff ff       	call   c001f21f <Vm::inbv(unsigned short)>
c001fe63:	83 c4 10             	add    esp,0x10
c001fe66:	eb e9                	jmp    c001fe51 <Vm::faultHandler(regs*)+0x810>
c001fe68:	31 c0                	xor    eax,eax
c001fe6a:	83 c4 1c             	add    esp,0x1c
c001fe6d:	5b                   	pop    ebx
c001fe6e:	5e                   	pop    esi
c001fe6f:	5f                   	pop    edi
c001fe70:	5d                   	pop    ebp
c001fe71:	c3                   	ret    

c001fe72 <Vm::fpuInternalTo32(unsigned long long)>:
c001fe72:	57                   	push   edi
c001fe73:	56                   	push   esi
c001fe74:	53                   	push   ebx
c001fe75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7d:	89 d6                	mov    esi,edx
c001fe7f:	89 d7                	mov    edi,edx
c001fe81:	89 c1                	mov    ecx,eax
c001fe83:	c1 ef 14             	shr    edi,0x14
c001fe86:	89 d3                	mov    ebx,edx
c001fe88:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fe8e:	31 d2                	xor    edx,edx
c001fe90:	89 f8                	mov    eax,edi
c001fe92:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fe98:	bf ff 00 00 00       	mov    edi,0xff
c001fe9d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fea2:	83 d2 ff             	adc    edx,0xffffffff
c001fea5:	39 c7                	cmp    edi,eax
c001fea7:	bf 00 00 00 00       	mov    edi,0x0
c001feac:	19 d7                	sbb    edi,edx
c001feae:	72 15                	jb     c001fec5 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001feb0:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001feb4:	c1 e0 17             	shl    eax,0x17
c001feb7:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001febd:	09 f1                	or     ecx,esi
c001febf:	09 c1                	or     ecx,eax
c001fec1:	89 cf                	mov    edi,ecx
c001fec3:	eb 02                	jmp    c001fec7 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fec5:	31 ff                	xor    edi,edi
c001fec7:	89 f8                	mov    eax,edi
c001fec9:	5b                   	pop    ebx
c001feca:	5e                   	pop    esi
c001fecb:	5f                   	pop    edi
c001fecc:	c3                   	ret    

c001fecd <Vm::fpuInternalTo64(unsigned long long)>:
c001fecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fed5:	c3                   	ret    

c001fed6 <Vm::fpu32ToInternal(unsigned int)>:
c001fed6:	57                   	push   edi
c001fed7:	31 ff                	xor    edi,edi
c001fed9:	56                   	push   esi
c001feda:	53                   	push   ebx
c001fedb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fedf:	89 cb                	mov    ebx,ecx
c001fee1:	89 ce                	mov    esi,ecx
c001fee3:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fee9:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001feef:	c1 e9 17             	shr    ecx,0x17
c001fef2:	89 f0                	mov    eax,esi
c001fef4:	0f b6 d1             	movzx  edx,cl
c001fef7:	81 c2 80 03 00 00    	add    edx,0x380
c001fefd:	89 d1                	mov    ecx,edx
c001feff:	89 fa                	mov    edx,edi
c001ff01:	c1 e1 14             	shl    ecx,0x14
c001ff04:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ff08:	c1 e0 1d             	shl    eax,0x1d
c001ff0b:	89 d7                	mov    edi,edx
c001ff0d:	89 c6                	mov    esi,eax
c001ff0f:	89 ca                	mov    edx,ecx
c001ff11:	89 f0                	mov    eax,esi
c001ff13:	09 fa                	or     edx,edi
c001ff15:	09 da                	or     edx,ebx
c001ff17:	5b                   	pop    ebx
c001ff18:	5e                   	pop    esi
c001ff19:	5f                   	pop    edi
c001ff1a:	c3                   	ret    

c001ff1b <Vm::fpu64ToInternal(unsigned long long)>:
c001ff1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff23:	c3                   	ret    

c001ff24 <Vm::fpuFloatToLong(unsigned long long)>:
c001ff24:	57                   	push   edi
c001ff25:	31 c0                	xor    eax,eax
c001ff27:	56                   	push   esi
c001ff28:	31 d2                	xor    edx,edx
c001ff2a:	53                   	push   ebx
c001ff2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff33:	89 d9                	mov    ecx,ebx
c001ff35:	c1 e9 14             	shr    ecx,0x14
c001ff38:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ff3e:	89 cf                	mov    edi,ecx
c001ff40:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ff46:	78 33                	js     c001ff7b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff48:	89 d9                	mov    ecx,ebx
c001ff4a:	89 f0                	mov    eax,esi
c001ff4c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff52:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ff58:	89 ca                	mov    edx,ecx
c001ff5a:	b9 34 00 00 00       	mov    ecx,0x34
c001ff5f:	29 f9                	sub    ecx,edi
c001ff61:	0f ad d0             	shrd   eax,edx,cl
c001ff64:	d3 fa                	sar    edx,cl
c001ff66:	f6 c1 20             	test   cl,0x20
c001ff69:	74 05                	je     c001ff70 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ff6b:	89 d0                	mov    eax,edx
c001ff6d:	c1 fa 1f             	sar    edx,0x1f
c001ff70:	85 db                	test   ebx,ebx
c001ff72:	79 07                	jns    c001ff7b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff74:	f7 d8                	neg    eax
c001ff76:	83 d2 00             	adc    edx,0x0
c001ff79:	f7 da                	neg    edx
c001ff7b:	5b                   	pop    ebx
c001ff7c:	5e                   	pop    esi
c001ff7d:	5f                   	pop    edi
c001ff7e:	c3                   	ret    

c001ff7f <Vm::fpuULongToFloat(unsigned long long)>:
c001ff7f:	57                   	push   edi
c001ff80:	31 c9                	xor    ecx,ecx
c001ff82:	56                   	push   esi
c001ff83:	53                   	push   ebx
c001ff84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff88:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ff8c:	0f ba e7 14          	bt     edi,0x14
c001ff90:	72 07                	jb     c001ff99 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ff92:	01 f6                	add    esi,esi
c001ff94:	11 ff                	adc    edi,edi
c001ff96:	41                   	inc    ecx
c001ff97:	eb f3                	jmp    c001ff8c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ff99:	89 fa                	mov    edx,edi
c001ff9b:	89 f0                	mov    eax,esi
c001ff9d:	bb 33 04 00 00       	mov    ebx,0x433
c001ffa2:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ffa8:	29 cb                	sub    ebx,ecx
c001ffaa:	89 d9                	mov    ecx,ebx
c001ffac:	5b                   	pop    ebx
c001ffad:	c1 e1 14             	shl    ecx,0x14
c001ffb0:	5e                   	pop    esi
c001ffb1:	09 ca                	or     edx,ecx
c001ffb3:	5f                   	pop    edi
c001ffb4:	c3                   	ret    

c001ffb5 <Vm::fpuLongToFloat(long long)>:
c001ffb5:	56                   	push   esi
c001ffb6:	31 c0                	xor    eax,eax
c001ffb8:	53                   	push   ebx
c001ffb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffc1:	39 c8                	cmp    eax,ecx
c001ffc3:	19 d8                	sbb    eax,ebx
c001ffc5:	7d 04                	jge    c001ffcb <Vm::fpuLongToFloat(long long)+0x16>
c001ffc7:	31 f6                	xor    esi,esi
c001ffc9:	eb 0c                	jmp    c001ffd7 <Vm::fpuLongToFloat(long long)+0x22>
c001ffcb:	f7 d9                	neg    ecx
c001ffcd:	be 01 00 00 00       	mov    esi,0x1
c001ffd2:	83 d3 00             	adc    ebx,0x0
c001ffd5:	f7 db                	neg    ebx
c001ffd7:	31 c0                	xor    eax,eax
c001ffd9:	0f ba e3 14          	bt     ebx,0x14
c001ffdd:	72 07                	jb     c001ffe6 <Vm::fpuLongToFloat(long long)+0x31>
c001ffdf:	01 c9                	add    ecx,ecx
c001ffe1:	11 db                	adc    ebx,ebx
c001ffe3:	40                   	inc    eax
c001ffe4:	eb f3                	jmp    c001ffd9 <Vm::fpuLongToFloat(long long)+0x24>
c001ffe6:	ba 33 04 00 00       	mov    edx,0x433
c001ffeb:	29 c2                	sub    edx,eax
c001ffed:	89 c8                	mov    eax,ecx
c001ffef:	c1 e2 14             	shl    edx,0x14
c001fff2:	89 d9                	mov    ecx,ebx
c001fff4:	89 f3                	mov    ebx,esi
c001fff6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fffc:	09 ca                	or     edx,ecx
c001fffe:	84 db                	test   bl,bl
c0020000:	74 06                	je     c0020008 <Vm::fpuLongToFloat(long long)+0x53>
c0020002:	81 ca 00 00 00 80    	or     edx,0x80000000
c0020008:	5b                   	pop    ebx
c0020009:	5e                   	pop    esi
c002000a:	c3                   	ret    

c002000b <Vm::fpuGet0()>:
c002000b:	31 c0                	xor    eax,eax
c002000d:	31 d2                	xor    edx,edx
c002000f:	c3                   	ret    

c0020010 <Vm::fpuGet1()>:
c0020010:	b8 01 00 00 00       	mov    eax,0x1
c0020015:	31 d2                	xor    edx,edx
c0020017:	c3                   	ret    

c0020018 <Vm::fpuGetPi()>:
c0020018:	b8 03 00 00 00       	mov    eax,0x3
c002001d:	31 d2                	xor    edx,edx
c002001f:	c3                   	ret    

c0020020 <Vm::fpuGetLog2E()>:
c0020020:	83 ec 18             	sub    esp,0x18
c0020023:	68 b8 d5 02 c0       	push   0xc002d5b8
c0020028:	e8 a4 a8 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c002002d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020032:	31 d2                	xor    edx,edx
c0020034:	83 c4 1c             	add    esp,0x1c
c0020037:	c3                   	ret    

c0020038 <Vm::fpuGetLogE2()>:
c0020038:	83 ec 18             	sub    esp,0x18
c002003b:	68 c4 d5 02 c0       	push   0xc002d5c4
c0020040:	e8 8c a8 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0020045:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002004a:	31 d2                	xor    edx,edx
c002004c:	83 c4 1c             	add    esp,0x1c
c002004f:	c3                   	ret    

c0020050 <Vm::fpuGetLog210()>:
c0020050:	83 ec 18             	sub    esp,0x18
c0020053:	68 d0 d5 02 c0       	push   0xc002d5d0
c0020058:	e8 74 a8 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c002005d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020062:	31 d2                	xor    edx,edx
c0020064:	83 c4 1c             	add    esp,0x1c
c0020067:	c3                   	ret    

c0020068 <Vm::fpuGetLog102()>:
c0020068:	83 ec 18             	sub    esp,0x18
c002006b:	68 dd d5 02 c0       	push   0xc002d5dd
c0020070:	e8 5c a8 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0020075:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002007a:	31 d2                	xor    edx,edx
c002007c:	83 c4 1c             	add    esp,0x1c
c002007f:	c3                   	ret    

c0020080 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0020080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020084:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0020088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002008c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0020090:	0f 92 c0             	setb   al
c0020093:	c3                   	ret    

c0020094 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0020094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00200a0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00200a4:	09 c2                	or     edx,eax
c00200a6:	0f 94 c0             	sete   al
c00200a9:	c3                   	ret    

c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00200aa:	57                   	push   edi
c00200ab:	56                   	push   esi
c00200ac:	53                   	push   ebx
c00200ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00200b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00200b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00200b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00200bd:	57                   	push   edi
c00200be:	56                   	push   esi
c00200bf:	53                   	push   ebx
c00200c0:	51                   	push   ecx
c00200c1:	e8 ce ff ff ff       	call   c0020094 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00200c6:	83 c4 10             	add    esp,0x10
c00200c9:	88 c2                	mov    dl,al
c00200cb:	31 c0                	xor    eax,eax
c00200cd:	84 d2                	test   dl,dl
c00200cf:	75 0c                	jne    c00200dd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c00200d1:	57                   	push   edi
c00200d2:	56                   	push   esi
c00200d3:	53                   	push   ebx
c00200d4:	51                   	push   ecx
c00200d5:	e8 a6 ff ff ff       	call   c0020080 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	83 e0 01             	and    eax,0x1
c00200e0:	5b                   	pop    ebx
c00200e1:	88 c1                	mov    cl,al
c00200e3:	83 e2 01             	and    edx,0x1
c00200e6:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c00200eb:	c1 e2 06             	shl    edx,0x6
c00200ee:	83 e0 ba             	and    eax,0xffffffba
c00200f1:	5e                   	pop    esi
c00200f2:	09 c8                	or     eax,ecx
c00200f4:	5f                   	pop    edi
c00200f5:	09 d0                	or     eax,edx
c00200f7:	a2 a1 28 03 c0       	mov    ds:0xc00328a1,al
c00200fc:	c3                   	ret    

c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00200fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020101:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020105:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0020109:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c002010d:	c3                   	ret    

c002010e <Vm::fpuAbs(unsigned long long)>:
c002010e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020116:	c3                   	ret    

c0020117 <Vm::fpuChs(unsigned long long)>:
c0020117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002011f:	f7 d8                	neg    eax
c0020121:	83 d2 00             	adc    edx,0x0
c0020124:	f7 da                	neg    edx
c0020126:	c3                   	ret    

c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0020127:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c002012b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020130:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0020134:	eb c7                	jmp    c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0020136:	53                   	push   ebx
c0020137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002013b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002013f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020143:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020147:	0f af ca             	imul   ecx,edx
c002014a:	0f af d8             	imul   ebx,eax
c002014d:	f7 e2                	mul    edx
c002014f:	01 d9                	add    ecx,ebx
c0020151:	5b                   	pop    ebx
c0020152:	01 ca                	add    edx,ecx
c0020154:	c3                   	ret    

c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0020155:	83 ec 0c             	sub    esp,0xc
c0020158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020168:	e8 87 74 00 00       	call   c00275f4 <__udivdi3>
c002016d:	83 c4 1c             	add    esp,0x1c
c0020170:	c3                   	ret    

c0020171 <Vm::fpuSquare(unsigned long long)>:
c0020171:	50                   	push   eax
c0020172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020176:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002017a:	52                   	push   edx
c002017b:	50                   	push   eax
c002017c:	52                   	push   edx
c002017d:	50                   	push   eax
c002017e:	e8 b3 ff ff ff       	call   c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020183:	83 c4 14             	add    esp,0x14
c0020186:	c3                   	ret    

c0020187 <Vm::fpuGetReg(int)>:
c0020187:	83 ec 0c             	sub    esp,0xc
c002018a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c002018f:	76 10                	jbe    c00201a1 <Vm::fpuGetReg(int)+0x1a>
c0020191:	83 ec 0c             	sub    esp,0xc
c0020194:	68 ea d5 02 c0       	push   0xc002d5ea
c0020199:	e8 33 a7 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c002019e:	83 c4 10             	add    esp,0x10
c00201a1:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c00201a6:	b9 08 00 00 00       	mov    ecx,0x8
c00201ab:	c0 e8 03             	shr    al,0x3
c00201ae:	83 e0 07             	and    eax,0x7
c00201b1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00201b5:	99                   	cdq    
c00201b6:	f7 f9                	idiv   ecx
c00201b8:	8b 04 d5 a4 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd75c]
c00201bf:	8b 14 d5 a8 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd758]
c00201c6:	83 c4 0c             	add    esp,0xc
c00201c9:	c3                   	ret    

c00201ca <Vm::fpuSetReg(int, unsigned long long)>:
c00201ca:	57                   	push   edi
c00201cb:	56                   	push   esi
c00201cc:	52                   	push   edx
c00201cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00201d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00201d5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00201da:	76 10                	jbe    c00201ec <Vm::fpuSetReg(int, unsigned long long)+0x22>
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	68 fd d5 02 c0       	push   0xc002d5fd
c00201e4:	e8 e8 a6 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c00201f1:	b9 08 00 00 00       	mov    ecx,0x8
c00201f6:	c0 e8 03             	shr    al,0x3
c00201f9:	83 e0 07             	and    eax,0x7
c00201fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020200:	99                   	cdq    
c0020201:	f7 f9                	idiv   ecx
c0020203:	89 34 d5 a4 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd75c],esi
c002020a:	89 3c d5 a8 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd758],edi
c0020211:	58                   	pop    eax
c0020212:	5e                   	pop    esi
c0020213:	5f                   	pop    edi
c0020214:	c3                   	ret    

c0020215 <Vm::fpuPush(unsigned long long)>:
c0020215:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c002021a:	c0 e8 03             	shr    al,0x3
c002021d:	83 e0 07             	and    eax,0x7
c0020220:	83 c0 07             	add    eax,0x7
c0020223:	88 c2                	mov    dl,al
c0020225:	83 e0 07             	and    eax,0x7
c0020228:	83 e2 07             	and    edx,0x7
c002022b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020232:	8a 15 a1 28 03 c0    	mov    dl,BYTE PTR ds:0xc00328a1
c0020238:	83 e2 c7             	and    edx,0xffffffc7
c002023b:	09 ca                	or     edx,ecx
c002023d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020241:	88 15 a1 28 03 c0    	mov    BYTE PTR ds:0xc00328a1,dl
c0020247:	89 0c c5 a8 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd758],ecx
c002024e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020252:	89 14 c5 a4 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd75c],edx
c0020259:	a1 e4 28 03 c0       	mov    eax,ds:0xc00328e4
c002025e:	83 f8 08             	cmp    eax,0x8
c0020261:	75 08                	jne    c002026b <Vm::fpuPush(unsigned long long)+0x56>
c0020263:	80 0d a0 28 03 c0 40 	or     BYTE PTR ds:0xc00328a0,0x40
c002026a:	c3                   	ret    
c002026b:	40                   	inc    eax
c002026c:	a3 e4 28 03 c0       	mov    ds:0xc00328e4,eax
c0020271:	c3                   	ret    

c0020272 <Vm::fpuPop()>:
c0020272:	8a 0d a1 28 03 c0    	mov    cl,BYTE PTR ds:0xc00328a1
c0020278:	53                   	push   ebx
c0020279:	c0 e9 03             	shr    cl,0x3
c002027c:	8a 1d a1 28 03 c0    	mov    bl,BYTE PTR ds:0xc00328a1
c0020282:	83 e1 07             	and    ecx,0x7
c0020285:	83 e3 c7             	and    ebx,0xffffffc7
c0020288:	8b 04 cd a4 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd75c]
c002028f:	8b 14 cd a8 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd758]
c0020296:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c002029d:	83 e1 38             	and    ecx,0x38
c00202a0:	09 d9                	or     ecx,ebx
c00202a2:	88 0d a1 28 03 c0    	mov    BYTE PTR ds:0xc00328a1,cl
c00202a8:	8b 0d e4 28 03 c0    	mov    ecx,DWORD PTR ds:0xc00328e4
c00202ae:	85 c9                	test   ecx,ecx
c00202b0:	74 09                	je     c00202bb <Vm::fpuPop()+0x49>
c00202b2:	49                   	dec    ecx
c00202b3:	89 0d e4 28 03 c0    	mov    DWORD PTR ds:0xc00328e4,ecx
c00202b9:	eb 07                	jmp    c00202c2 <Vm::fpuPop()+0x50>
c00202bb:	80 0d a0 28 03 c0 40 	or     BYTE PTR ds:0xc00328a0,0x40
c00202c2:	5b                   	pop    ebx
c00202c3:	c3                   	ret    

c00202c4 <Vm::x87Handler(regs*)>:
c00202c4:	55                   	push   ebp
c00202c5:	57                   	push   edi
c00202c6:	56                   	push   esi
c00202c7:	53                   	push   ebx
c00202c8:	83 ec 1c             	sub    esp,0x1c
c00202cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00202cf:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00202d4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00202d7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00202df:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00202e3:	50                   	push   eax
c00202e4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00202e8:	50                   	push   eax
c00202e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202ed:	50                   	push   eax
c00202ee:	53                   	push   ebx
c00202ef:	e8 aa 9c ff ff       	call   c0019f9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00202f4:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	89 c6                	mov    esi,eax
c00202fc:	80 fa d9             	cmp    dl,0xd9
c00202ff:	0f 85 52 01 00 00    	jne    c0020457 <Vm::x87Handler(regs*)+0x193>
c0020305:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020309:	8d 50 20             	lea    edx,[eax+0x20]
c002030c:	80 fa 0e             	cmp    dl,0xe
c002030f:	0f 87 86 00 00 00    	ja     c002039b <Vm::x87Handler(regs*)+0xd7>
c0020315:	0f b6 d2             	movzx  edx,dl
c0020318:	ff 24 95 10 d6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd29f0]
c002031f:	e8 e7 fc ff ff       	call   c002000b <Vm::fpuGet0()>
c0020324:	eb 05                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c0020326:	e8 e5 fc ff ff       	call   c0020010 <Vm::fpuGet1()>
c002032b:	57                   	push   edi
c002032c:	57                   	push   edi
c002032d:	52                   	push   edx
c002032e:	50                   	push   eax
c002032f:	e8 e1 fe ff ff       	call   c0020215 <Vm::fpuPush(unsigned long long)>
c0020334:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020338:	83 c4 10             	add    esp,0x10
c002033b:	b0 01                	mov    al,0x1
c002033d:	e9 e3 09 00 00       	jmp    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020342:	83 ec 0c             	sub    esp,0xc
c0020345:	6a 00                	push   0x0
c0020347:	e8 3b fe ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002034c:	59                   	pop    ecx
c002034d:	5e                   	pop    esi
c002034e:	52                   	push   edx
c002034f:	50                   	push   eax
c0020350:	e8 c2 fd ff ff       	call   c0020117 <Vm::fpuChs(unsigned long long)>
c0020355:	eb 13                	jmp    c002036a <Vm::x87Handler(regs*)+0xa6>
c0020357:	83 ec 0c             	sub    esp,0xc
c002035a:	6a 00                	push   0x0
c002035c:	e8 26 fe ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020361:	5f                   	pop    edi
c0020362:	5d                   	pop    ebp
c0020363:	52                   	push   edx
c0020364:	50                   	push   eax
c0020365:	e8 a4 fd ff ff       	call   c002010e <Vm::fpuAbs(unsigned long long)>
c002036a:	83 c4 0c             	add    esp,0xc
c002036d:	52                   	push   edx
c002036e:	50                   	push   eax
c002036f:	6a 00                	push   0x0
c0020371:	e8 54 fe ff ff       	call   c00201ca <Vm::fpuSetReg(int, unsigned long long)>
c0020376:	eb bc                	jmp    c0020334 <Vm::x87Handler(regs*)+0x70>
c0020378:	e8 d3 fc ff ff       	call   c0020050 <Vm::fpuGetLog210()>
c002037d:	eb ac                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c002037f:	e8 9c fc ff ff       	call   c0020020 <Vm::fpuGetLog2E()>
c0020384:	eb a5                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c0020386:	e8 8d fc ff ff       	call   c0020018 <Vm::fpuGetPi()>
c002038b:	eb 9e                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c002038d:	e8 d6 fc ff ff       	call   c0020068 <Vm::fpuGetLog102()>
c0020392:	eb 97                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c0020394:	e8 9f fc ff ff       	call   c0020038 <Vm::fpuGetLogE2()>
c0020399:	eb 90                	jmp    c002032b <Vm::x87Handler(regs*)+0x67>
c002039b:	8d 50 40             	lea    edx,[eax+0x40]
c002039e:	80 fa 07             	cmp    dl,0x7
c00203a1:	77 15                	ja     c00203b8 <Vm::x87Handler(regs*)+0xf4>
c00203a3:	83 ec 0c             	sub    esp,0xc
c00203a6:	2d c0 00 00 00       	sub    eax,0xc0
c00203ab:	50                   	push   eax
c00203ac:	e8 d6 fd ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00203b1:	59                   	pop    ecx
c00203b2:	5e                   	pop    esi
c00203b3:	e9 75 ff ff ff       	jmp    c002032d <Vm::x87Handler(regs*)+0x69>
c00203b8:	8d 50 38             	lea    edx,[eax+0x38]
c00203bb:	80 fa 07             	cmp    dl,0x7
c00203be:	77 3c                	ja     c00203fc <Vm::x87Handler(regs*)+0x138>
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	2d c8 00 00 00       	sub    eax,0xc8
c00203c8:	50                   	push   eax
c00203c9:	e8 b9 fd ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00203ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d5:	89 c6                	mov    esi,eax
c00203d7:	89 d7                	mov    edi,edx
c00203d9:	e8 a9 fd ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00203de:	83 c4 0c             	add    esp,0xc
c00203e1:	52                   	push   edx
c00203e2:	50                   	push   eax
c00203e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203e7:	2d c8 00 00 00       	sub    eax,0xc8
c00203ec:	50                   	push   eax
c00203ed:	e8 d8 fd ff ff       	call   c00201ca <Vm::fpuSetReg(int, unsigned long long)>
c00203f2:	83 c4 0c             	add    esp,0xc
c00203f5:	57                   	push   edi
c00203f6:	56                   	push   esi
c00203f7:	e9 73 ff ff ff       	jmp    c002036f <Vm::x87Handler(regs*)+0xab>
c00203fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020400:	84 d2                	test   dl,dl
c0020402:	75 0f                	jne    c0020413 <Vm::x87Handler(regs*)+0x14f>
c0020404:	83 ec 0c             	sub    esp,0xc
c0020407:	ff 36                	push   DWORD PTR [esi]
c0020409:	e8 c8 fa ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c002040e:	e9 bf 00 00 00       	jmp    c00204d2 <Vm::x87Handler(regs*)+0x20e>
c0020413:	80 fa 03             	cmp    dl,0x3
c0020416:	75 13                	jne    c002042b <Vm::x87Handler(regs*)+0x167>
c0020418:	e8 55 fe ff ff       	call   c0020272 <Vm::fpuPop()>
c002041d:	55                   	push   ebp
c002041e:	55                   	push   ebp
c002041f:	52                   	push   edx
c0020420:	50                   	push   eax
c0020421:	e8 4c fa ff ff       	call   c001fe72 <Vm::fpuInternalTo32(unsigned long long)>
c0020426:	e9 88 00 00 00       	jmp    c00204b3 <Vm::x87Handler(regs*)+0x1ef>
c002042b:	80 fa 05             	cmp    dl,0x5
c002042e:	75 0e                	jne    c002043e <Vm::x87Handler(regs*)+0x17a>
c0020430:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020433:	66 a3 a2 28 03 c0    	mov    ds:0xc00328a2,ax
c0020439:	e9 df 00 00 00       	jmp    c002051d <Vm::x87Handler(regs*)+0x259>
c002043e:	31 c0                	xor    eax,eax
c0020440:	80 fa 07             	cmp    dl,0x7
c0020443:	0f 85 dc 08 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020449:	66 a1 a2 28 03 c0    	mov    ax,ds:0xc00328a2
c002044f:	66 89 06             	mov    WORD PTR [esi],ax
c0020452:	e9 c6 00 00 00       	jmp    c002051d <Vm::x87Handler(regs*)+0x259>
c0020457:	80 fa d8             	cmp    dl,0xd8
c002045a:	0f 84 c9 00 00 00    	je     c0020529 <Vm::x87Handler(regs*)+0x265>
c0020460:	80 fa dc             	cmp    dl,0xdc
c0020463:	0f 84 0d 02 00 00    	je     c0020676 <Vm::x87Handler(regs*)+0x3b2>
c0020469:	80 fa de             	cmp    dl,0xde
c002046c:	0f 84 cd 02 00 00    	je     c002073f <Vm::x87Handler(regs*)+0x47b>
c0020472:	80 fa dd             	cmp    dl,0xdd
c0020475:	0f 84 5f 04 00 00    	je     c00208da <Vm::x87Handler(regs*)+0x616>
c002047b:	80 fa da             	cmp    dl,0xda
c002047e:	0f 84 24 05 00 00    	je     c00209a8 <Vm::x87Handler(regs*)+0x6e4>
c0020484:	80 fa df             	cmp    dl,0xdf
c0020487:	0f 84 68 05 00 00    	je     c00209f5 <Vm::x87Handler(regs*)+0x731>
c002048d:	31 c0                	xor    eax,eax
c002048f:	80 fa db             	cmp    dl,0xdb
c0020492:	0f 85 8d 08 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020498:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002049c:	80 fa 03             	cmp    dl,0x3
c002049f:	0f 85 70 06 00 00    	jne    c0020b15 <Vm::x87Handler(regs*)+0x851>
c00204a5:	e8 c8 fd ff ff       	call   c0020272 <Vm::fpuPop()>
c00204aa:	55                   	push   ebp
c00204ab:	55                   	push   ebp
c00204ac:	52                   	push   edx
c00204ad:	50                   	push   eax
c00204ae:	e8 71 fa ff ff       	call   c001ff24 <Vm::fpuFloatToLong(unsigned long long)>
c00204b3:	83 c4 10             	add    esp,0x10
c00204b6:	89 06                	mov    DWORD PTR [esi],eax
c00204b8:	eb 63                	jmp    c002051d <Vm::x87Handler(regs*)+0x259>
c00204ba:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204be:	84 d2                	test   dl,dl
c00204c0:	0f 85 e6 05 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0x7e8>
c00204c6:	57                   	push   edi
c00204c7:	57                   	push   edi
c00204c8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204cb:	ff 36                	push   DWORD PTR [esi]
c00204cd:	e8 49 fa ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c00204d2:	5e                   	pop    esi
c00204d3:	5f                   	pop    edi
c00204d4:	52                   	push   edx
c00204d5:	50                   	push   eax
c00204d6:	e8 3a fd ff ff       	call   c0020215 <Vm::fpuPush(unsigned long long)>
c00204db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204df:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00204e2:	e9 51 fe ff ff       	jmp    c0020338 <Vm::x87Handler(regs*)+0x74>
c00204e7:	80 fa 03             	cmp    dl,0x3
c00204ea:	0f 85 d7 06 00 00    	jne    c0020bc7 <Vm::x87Handler(regs*)+0x903>
c00204f0:	57                   	push   edi
c00204f1:	57                   	push   edi
c00204f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204f5:	ff 36                	push   DWORD PTR [esi]
c00204f7:	e8 1f fa ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c00204fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020503:	89 c6                	mov    esi,eax
c0020505:	89 d7                	mov    edi,edx
c0020507:	e8 7b fc ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002050c:	57                   	push   edi
c002050d:	56                   	push   esi
c002050e:	52                   	push   edx
c002050f:	50                   	push   eax
c0020510:	e8 95 fb ff ff       	call   c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020515:	83 c4 20             	add    esp,0x20
c0020518:	e8 55 fd ff ff       	call   c0020272 <Vm::fpuPop()>
c002051d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020521:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020524:	e9 12 fe ff ff       	jmp    c002033b <Vm::x87Handler(regs*)+0x77>
c0020529:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002052d:	8d 50 40             	lea    edx,[eax+0x40]
c0020530:	80 fa 07             	cmp    dl,0x7
c0020533:	77 29                	ja     c002055e <Vm::x87Handler(regs*)+0x29a>
c0020535:	83 ec 0c             	sub    esp,0xc
c0020538:	2d c0 00 00 00       	sub    eax,0xc0
c002053d:	50                   	push   eax
c002053e:	e8 44 fc ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020543:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002054a:	89 c6                	mov    esi,eax
c002054c:	89 d7                	mov    edi,edx
c002054e:	e8 34 fc ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020553:	57                   	push   edi
c0020554:	56                   	push   esi
c0020555:	52                   	push   edx
c0020556:	50                   	push   eax
c0020557:	e8 a1 fb ff ff       	call   c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002055c:	eb 2f                	jmp    c002058d <Vm::x87Handler(regs*)+0x2c9>
c002055e:	8d 50 38             	lea    edx,[eax+0x38]
c0020561:	80 fa 07             	cmp    dl,0x7
c0020564:	77 2f                	ja     c0020595 <Vm::x87Handler(regs*)+0x2d1>
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	2d c8 00 00 00       	sub    eax,0xc8
c002056e:	50                   	push   eax
c002056f:	e8 13 fc ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020574:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002057b:	89 c6                	mov    esi,eax
c002057d:	89 d7                	mov    edi,edx
c002057f:	e8 03 fc ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020584:	57                   	push   edi
c0020585:	56                   	push   esi
c0020586:	52                   	push   edx
c0020587:	50                   	push   eax
c0020588:	e8 a9 fb ff ff       	call   c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002058d:	83 c4 1c             	add    esp,0x1c
c0020590:	e9 d8 fd ff ff       	jmp    c002036d <Vm::x87Handler(regs*)+0xa9>
c0020595:	8d 50 30             	lea    edx,[eax+0x30]
c0020598:	80 fa 07             	cmp    dl,0x7
c002059b:	77 0d                	ja     c00205aa <Vm::x87Handler(regs*)+0x2e6>
c002059d:	83 ec 0c             	sub    esp,0xc
c00205a0:	2d d0 00 00 00       	sub    eax,0xd0
c00205a5:	e9 99 03 00 00       	jmp    c0020943 <Vm::x87Handler(regs*)+0x67f>
c00205aa:	8d 50 28             	lea    edx,[eax+0x28]
c00205ad:	80 fa 07             	cmp    dl,0x7
c00205b0:	77 0d                	ja     c00205bf <Vm::x87Handler(regs*)+0x2fb>
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	2d d8 00 00 00       	sub    eax,0xd8
c00205ba:	e9 c0 03 00 00       	jmp    c002097f <Vm::x87Handler(regs*)+0x6bb>
c00205bf:	8d 50 20             	lea    edx,[eax+0x20]
c00205c2:	80 fa 07             	cmp    dl,0x7
c00205c5:	77 1b                	ja     c00205e2 <Vm::x87Handler(regs*)+0x31e>
c00205c7:	83 ec 0c             	sub    esp,0xc
c00205ca:	2d e0 00 00 00       	sub    eax,0xe0
c00205cf:	50                   	push   eax
c00205d0:	e8 b2 fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00205d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205dc:	89 c6                	mov    esi,eax
c00205de:	89 d7                	mov    edi,edx
c00205e0:	eb 22                	jmp    c0020604 <Vm::x87Handler(regs*)+0x340>
c00205e2:	8d 50 18             	lea    edx,[eax+0x18]
c00205e5:	80 fa 07             	cmp    dl,0x7
c00205e8:	77 2d                	ja     c0020617 <Vm::x87Handler(regs*)+0x353>
c00205ea:	83 ec 0c             	sub    esp,0xc
c00205ed:	6a 00                	push   0x0
c00205ef:	e8 93 fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00205f4:	89 c6                	mov    esi,eax
c00205f6:	89 d7                	mov    edi,edx
c00205f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205fc:	2d e8 00 00 00       	sub    eax,0xe8
c0020601:	89 04 24             	mov    DWORD PTR [esp],eax
c0020604:	e8 7e fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020609:	57                   	push   edi
c002060a:	56                   	push   esi
c002060b:	52                   	push   edx
c002060c:	50                   	push   eax
c002060d:	e8 15 fb ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020612:	e9 76 ff ff ff       	jmp    c002058d <Vm::x87Handler(regs*)+0x2c9>
c0020617:	8d 50 10             	lea    edx,[eax+0x10]
c002061a:	80 fa 07             	cmp    dl,0x7
c002061d:	77 1b                	ja     c002063a <Vm::x87Handler(regs*)+0x376>
c002061f:	83 ec 0c             	sub    esp,0xc
c0020622:	2d f0 00 00 00       	sub    eax,0xf0
c0020627:	50                   	push   eax
c0020628:	e8 5a fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002062d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020634:	89 c6                	mov    esi,eax
c0020636:	89 d7                	mov    edi,edx
c0020638:	eb 22                	jmp    c002065c <Vm::x87Handler(regs*)+0x398>
c002063a:	3c f7                	cmp    al,0xf7
c002063c:	0f 86 d1 03 00 00    	jbe    c0020a13 <Vm::x87Handler(regs*)+0x74f>
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	6a 00                	push   0x0
c0020647:	e8 3b fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002064c:	89 c6                	mov    esi,eax
c002064e:	89 d7                	mov    edi,edx
c0020650:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020654:	2d f8 00 00 00       	sub    eax,0xf8
c0020659:	89 04 24             	mov    DWORD PTR [esp],eax
c002065c:	e8 26 fb ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020661:	57                   	push   edi
c0020662:	56                   	push   esi
c0020663:	52                   	push   edx
c0020664:	50                   	push   eax
c0020665:	e8 eb fa ff ff       	call   c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002066a:	83 c4 1c             	add    esp,0x1c
c002066d:	52                   	push   edx
c002066e:	50                   	push   eax
c002066f:	6a 00                	push   0x0
c0020671:	e9 51 02 00 00       	jmp    c00208c7 <Vm::x87Handler(regs*)+0x603>
c0020676:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002067a:	8d 50 40             	lea    edx,[eax+0x40]
c002067d:	80 fa 07             	cmp    dl,0x7
c0020680:	77 37                	ja     c00206b9 <Vm::x87Handler(regs*)+0x3f5>
c0020682:	83 ec 0c             	sub    esp,0xc
c0020685:	2d c0 00 00 00       	sub    eax,0xc0
c002068a:	50                   	push   eax
c002068b:	e8 f7 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020690:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020697:	89 c6                	mov    esi,eax
c0020699:	89 d7                	mov    edi,edx
c002069b:	e8 e7 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00206a0:	57                   	push   edi
c00206a1:	56                   	push   esi
c00206a2:	52                   	push   edx
c00206a3:	50                   	push   eax
c00206a4:	e8 54 fa ff ff       	call   c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00206a9:	83 c4 1c             	add    esp,0x1c
c00206ac:	52                   	push   edx
c00206ad:	50                   	push   eax
c00206ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206b2:	2d c0 00 00 00       	sub    eax,0xc0
c00206b7:	eb 3d                	jmp    c00206f6 <Vm::x87Handler(regs*)+0x432>
c00206b9:	8d 50 38             	lea    edx,[eax+0x38]
c00206bc:	80 fa 07             	cmp    dl,0x7
c00206bf:	77 3b                	ja     c00206fc <Vm::x87Handler(regs*)+0x438>
c00206c1:	83 ec 0c             	sub    esp,0xc
c00206c4:	2d c8 00 00 00       	sub    eax,0xc8
c00206c9:	50                   	push   eax
c00206ca:	e8 b8 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00206cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206d6:	89 c6                	mov    esi,eax
c00206d8:	89 d7                	mov    edi,edx
c00206da:	e8 a8 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00206df:	57                   	push   edi
c00206e0:	56                   	push   esi
c00206e1:	52                   	push   edx
c00206e2:	50                   	push   eax
c00206e3:	e8 4e fa ff ff       	call   c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00206e8:	83 c4 1c             	add    esp,0x1c
c00206eb:	52                   	push   edx
c00206ec:	50                   	push   eax
c00206ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f1:	2d c8 00 00 00       	sub    eax,0xc8
c00206f6:	50                   	push   eax
c00206f7:	e9 75 fc ff ff       	jmp    c0020371 <Vm::x87Handler(regs*)+0xad>
c00206fc:	83 c0 18             	add    eax,0x18
c00206ff:	3c 07                	cmp    al,0x7
c0020701:	0f 87 3b 04 00 00    	ja     c0020b42 <Vm::x87Handler(regs*)+0x87e>
c0020707:	83 ec 0c             	sub    esp,0xc
c002070a:	6a 00                	push   0x0
c002070c:	e8 76 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020711:	89 c6                	mov    esi,eax
c0020713:	89 d7                	mov    edi,edx
c0020715:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020719:	2d e8 00 00 00       	sub    eax,0xe8
c002071e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020721:	e8 61 fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020726:	57                   	push   edi
c0020727:	56                   	push   esi
c0020728:	52                   	push   edx
c0020729:	50                   	push   eax
c002072a:	e8 f8 f9 ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002072f:	83 c4 1c             	add    esp,0x1c
c0020732:	52                   	push   edx
c0020733:	50                   	push   eax
c0020734:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020738:	2d e8 00 00 00       	sub    eax,0xe8
c002073d:	eb b7                	jmp    c00206f6 <Vm::x87Handler(regs*)+0x432>
c002073f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020743:	8d 50 40             	lea    edx,[eax+0x40]
c0020746:	80 fa 07             	cmp    dl,0x7
c0020749:	77 3a                	ja     c0020785 <Vm::x87Handler(regs*)+0x4c1>
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	2d c0 00 00 00       	sub    eax,0xc0
c0020753:	50                   	push   eax
c0020754:	e8 2e fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020759:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020760:	89 c6                	mov    esi,eax
c0020762:	89 d7                	mov    edi,edx
c0020764:	e8 1e fa ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020769:	57                   	push   edi
c002076a:	56                   	push   esi
c002076b:	52                   	push   edx
c002076c:	50                   	push   eax
c002076d:	e8 8b f9 ff ff       	call   c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020772:	83 c4 1c             	add    esp,0x1c
c0020775:	52                   	push   edx
c0020776:	50                   	push   eax
c0020777:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002077b:	2d c0 00 00 00       	sub    eax,0xc0
c0020780:	e9 9e 01 00 00       	jmp    c0020923 <Vm::x87Handler(regs*)+0x65f>
c0020785:	8d 50 20             	lea    edx,[eax+0x20]
c0020788:	80 fa 07             	cmp    dl,0x7
c002078b:	77 3a                	ja     c00207c7 <Vm::x87Handler(regs*)+0x503>
c002078d:	83 ec 0c             	sub    esp,0xc
c0020790:	2d e0 00 00 00       	sub    eax,0xe0
c0020795:	50                   	push   eax
c0020796:	e8 ec f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002079b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207a2:	89 c6                	mov    esi,eax
c00207a4:	89 d7                	mov    edi,edx
c00207a6:	e8 dc f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00207ab:	57                   	push   edi
c00207ac:	56                   	push   esi
c00207ad:	52                   	push   edx
c00207ae:	50                   	push   eax
c00207af:	e8 73 f9 ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207b4:	83 c4 1c             	add    esp,0x1c
c00207b7:	52                   	push   edx
c00207b8:	50                   	push   eax
c00207b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207bd:	2d e0 00 00 00       	sub    eax,0xe0
c00207c2:	e9 5c 01 00 00       	jmp    c0020923 <Vm::x87Handler(regs*)+0x65f>
c00207c7:	8d 50 18             	lea    edx,[eax+0x18]
c00207ca:	80 fa 07             	cmp    dl,0x7
c00207cd:	77 3b                	ja     c002080a <Vm::x87Handler(regs*)+0x546>
c00207cf:	83 ec 0c             	sub    esp,0xc
c00207d2:	6a 00                	push   0x0
c00207d4:	e8 ae f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00207d9:	89 c6                	mov    esi,eax
c00207db:	89 d7                	mov    edi,edx
c00207dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207e1:	2d e8 00 00 00       	sub    eax,0xe8
c00207e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00207e9:	e8 99 f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00207ee:	57                   	push   edi
c00207ef:	56                   	push   esi
c00207f0:	52                   	push   edx
c00207f1:	50                   	push   eax
c00207f2:	e8 30 f9 ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207f7:	83 c4 1c             	add    esp,0x1c
c00207fa:	52                   	push   edx
c00207fb:	50                   	push   eax
c00207fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020800:	2d e8 00 00 00       	sub    eax,0xe8
c0020805:	e9 19 01 00 00       	jmp    c0020923 <Vm::x87Handler(regs*)+0x65f>
c002080a:	8d 50 38             	lea    edx,[eax+0x38]
c002080d:	80 fa 07             	cmp    dl,0x7
c0020810:	77 37                	ja     c0020849 <Vm::x87Handler(regs*)+0x585>
c0020812:	83 ec 0c             	sub    esp,0xc
c0020815:	2d c8 00 00 00       	sub    eax,0xc8
c002081a:	50                   	push   eax
c002081b:	e8 67 f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020820:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020827:	89 c6                	mov    esi,eax
c0020829:	89 d7                	mov    edi,edx
c002082b:	e8 57 f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020830:	57                   	push   edi
c0020831:	56                   	push   esi
c0020832:	52                   	push   edx
c0020833:	50                   	push   eax
c0020834:	e8 fd f8 ff ff       	call   c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020839:	83 c4 1c             	add    esp,0x1c
c002083c:	52                   	push   edx
c002083d:	50                   	push   eax
c002083e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020842:	2d c8 00 00 00       	sub    eax,0xc8
c0020847:	eb 7d                	jmp    c00208c6 <Vm::x87Handler(regs*)+0x602>
c0020849:	3c f7                	cmp    al,0xf7
c002084b:	76 38                	jbe    c0020885 <Vm::x87Handler(regs*)+0x5c1>
c002084d:	83 ec 0c             	sub    esp,0xc
c0020850:	6a 00                	push   0x0
c0020852:	e8 30 f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020857:	89 c6                	mov    esi,eax
c0020859:	89 d7                	mov    edi,edx
c002085b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002085f:	2d f8 00 00 00       	sub    eax,0xf8
c0020864:	89 04 24             	mov    DWORD PTR [esp],eax
c0020867:	e8 1b f9 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002086c:	57                   	push   edi
c002086d:	56                   	push   esi
c002086e:	52                   	push   edx
c002086f:	50                   	push   eax
c0020870:	e8 e0 f8 ff ff       	call   c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020875:	83 c4 1c             	add    esp,0x1c
c0020878:	52                   	push   edx
c0020879:	50                   	push   eax
c002087a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002087e:	2d f8 00 00 00       	sub    eax,0xf8
c0020883:	eb 41                	jmp    c00208c6 <Vm::x87Handler(regs*)+0x602>
c0020885:	8d 50 10             	lea    edx,[eax+0x10]
c0020888:	80 fa 07             	cmp    dl,0x7
c002088b:	0f 87 5a 01 00 00    	ja     c00209eb <Vm::x87Handler(regs*)+0x727>
c0020891:	83 ec 0c             	sub    esp,0xc
c0020894:	2d f0 00 00 00       	sub    eax,0xf0
c0020899:	50                   	push   eax
c002089a:	e8 e8 f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c002089f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208a6:	89 c6                	mov    esi,eax
c00208a8:	89 d7                	mov    edi,edx
c00208aa:	e8 d8 f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00208af:	57                   	push   edi
c00208b0:	56                   	push   esi
c00208b1:	52                   	push   edx
c00208b2:	50                   	push   eax
c00208b3:	e8 9d f8 ff ff       	call   c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208b8:	83 c4 1c             	add    esp,0x1c
c00208bb:	52                   	push   edx
c00208bc:	50                   	push   eax
c00208bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208c1:	2d f0 00 00 00       	sub    eax,0xf0
c00208c6:	50                   	push   eax
c00208c7:	e8 fe f8 ff ff       	call   c00201ca <Vm::fpuSetReg(int, unsigned long long)>
c00208cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208d0:	e8 9d f9 ff ff       	call   c0020272 <Vm::fpuPop()>
c00208d5:	e9 5e fa ff ff       	jmp    c0020338 <Vm::x87Handler(regs*)+0x74>
c00208da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208de:	8d 50 30             	lea    edx,[eax+0x30]
c00208e1:	80 fa 07             	cmp    dl,0x7
c00208e4:	77 1d                	ja     c0020903 <Vm::x87Handler(regs*)+0x63f>
c00208e6:	83 ec 0c             	sub    esp,0xc
c00208e9:	6a 00                	push   0x0
c00208eb:	e8 97 f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00208f0:	83 c4 0c             	add    esp,0xc
c00208f3:	52                   	push   edx
c00208f4:	50                   	push   eax
c00208f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208f9:	2d d0 00 00 00       	sub    eax,0xd0
c00208fe:	e9 f3 fd ff ff       	jmp    c00206f6 <Vm::x87Handler(regs*)+0x432>
c0020903:	8d 50 28             	lea    edx,[eax+0x28]
c0020906:	80 fa 07             	cmp    dl,0x7
c0020909:	77 28                	ja     c0020933 <Vm::x87Handler(regs*)+0x66f>
c002090b:	83 ec 0c             	sub    esp,0xc
c002090e:	6a 00                	push   0x0
c0020910:	e8 72 f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020915:	83 c4 0c             	add    esp,0xc
c0020918:	52                   	push   edx
c0020919:	50                   	push   eax
c002091a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002091e:	2d d8 00 00 00       	sub    eax,0xd8
c0020923:	50                   	push   eax
c0020924:	e8 a1 f8 ff ff       	call   c00201ca <Vm::fpuSetReg(int, unsigned long long)>
c0020929:	e8 44 f9 ff ff       	call   c0020272 <Vm::fpuPop()>
c002092e:	e9 01 fa ff ff       	jmp    c0020334 <Vm::x87Handler(regs*)+0x70>
c0020933:	8d 50 20             	lea    edx,[eax+0x20]
c0020936:	80 fa 07             	cmp    dl,0x7
c0020939:	77 30                	ja     c002096b <Vm::x87Handler(regs*)+0x6a7>
c002093b:	83 ec 0c             	sub    esp,0xc
c002093e:	2d e0 00 00 00       	sub    eax,0xe0
c0020943:	50                   	push   eax
c0020944:	e8 3e f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020949:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020950:	89 c6                	mov    esi,eax
c0020952:	89 d7                	mov    edi,edx
c0020954:	e8 2e f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020959:	57                   	push   edi
c002095a:	56                   	push   esi
c002095b:	52                   	push   edx
c002095c:	50                   	push   eax
c002095d:	e8 48 f7 ff ff       	call   c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020962:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020966:	e9 54 02 00 00       	jmp    c0020bbf <Vm::x87Handler(regs*)+0x8fb>
c002096b:	8d 50 18             	lea    edx,[eax+0x18]
c002096e:	80 fa 07             	cmp    dl,0x7
c0020971:	0f 87 43 fb ff ff    	ja     c00204ba <Vm::x87Handler(regs*)+0x1f6>
c0020977:	83 ec 0c             	sub    esp,0xc
c002097a:	2d e8 00 00 00       	sub    eax,0xe8
c002097f:	50                   	push   eax
c0020980:	e8 02 f8 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020985:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002098c:	89 c6                	mov    esi,eax
c002098e:	89 d7                	mov    edi,edx
c0020990:	e8 f2 f7 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020995:	57                   	push   edi
c0020996:	56                   	push   esi
c0020997:	52                   	push   edx
c0020998:	50                   	push   eax
c0020999:	e8 0c f7 ff ff       	call   c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002099e:	83 c4 20             	add    esp,0x20
c00209a1:	e8 cc f8 ff ff       	call   c0020272 <Vm::fpuPop()>
c00209a6:	eb 62                	jmp    c0020a0a <Vm::x87Handler(regs*)+0x746>
c00209a8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00209ac:	0f 85 0f 01 00 00    	jne    c0020ac1 <Vm::x87Handler(regs*)+0x7fd>
c00209b2:	83 ec 0c             	sub    esp,0xc
c00209b5:	6a 01                	push   0x1
c00209b7:	e8 cb f7 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00209bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209c3:	89 c6                	mov    esi,eax
c00209c5:	89 d7                	mov    edi,edx
c00209c7:	e8 bb f7 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c00209cc:	57                   	push   edi
c00209cd:	56                   	push   esi
c00209ce:	52                   	push   edx
c00209cf:	50                   	push   eax
c00209d0:	e8 d5 f6 ff ff       	call   c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209d5:	83 c4 20             	add    esp,0x20
c00209d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209dc:	e8 91 f8 ff ff       	call   c0020272 <Vm::fpuPop()>
c00209e1:	e8 8c f8 ff ff       	call   c0020272 <Vm::fpuPop()>
c00209e6:	e9 50 f9 ff ff       	jmp    c002033b <Vm::x87Handler(regs*)+0x77>
c00209eb:	3c d9                	cmp    al,0xd9
c00209ed:	0f 85 b5 02 00 00    	jne    c0020ca8 <Vm::x87Handler(regs*)+0x9e4>
c00209f3:	eb bd                	jmp    c00209b2 <Vm::x87Handler(regs*)+0x6ee>
c00209f5:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00209f9:	0f 85 ea 02 00 00    	jne    c0020ce9 <Vm::x87Handler(regs*)+0xa25>
c00209ff:	0f b7 05 a0 28 03 c0 	movzx  eax,WORD PTR ds:0xc00328a0
c0020a06:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020a0a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a0e:	e9 28 f9 ff ff       	jmp    c002033b <Vm::x87Handler(regs*)+0x77>
c0020a13:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a17:	84 d2                	test   dl,dl
c0020a19:	75 0f                	jne    c0020a2a <Vm::x87Handler(regs*)+0x766>
c0020a1b:	83 ec 0c             	sub    esp,0xc
c0020a1e:	ff 36                	push   DWORD PTR [esi]
c0020a20:	e8 b1 f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020a25:	e9 2c 01 00 00       	jmp    c0020b56 <Vm::x87Handler(regs*)+0x892>
c0020a2a:	80 fa 01             	cmp    dl,0x1
c0020a2d:	75 0f                	jne    c0020a3e <Vm::x87Handler(regs*)+0x77a>
c0020a2f:	83 ec 0c             	sub    esp,0xc
c0020a32:	ff 36                	push   DWORD PTR [esi]
c0020a34:	e8 9d f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020a39:	e9 81 02 00 00       	jmp    c0020cbf <Vm::x87Handler(regs*)+0x9fb>
c0020a3e:	80 fa 04             	cmp    dl,0x4
c0020a41:	75 0f                	jne    c0020a52 <Vm::x87Handler(regs*)+0x78e>
c0020a43:	83 ec 0c             	sub    esp,0xc
c0020a46:	ff 36                	push   DWORD PTR [esi]
c0020a48:	e8 89 f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020a4d:	e9 86 01 00 00       	jmp    c0020bd8 <Vm::x87Handler(regs*)+0x914>
c0020a52:	80 fa 05             	cmp    dl,0x5
c0020a55:	75 1b                	jne    c0020a72 <Vm::x87Handler(regs*)+0x7ae>
c0020a57:	83 ec 0c             	sub    esp,0xc
c0020a5a:	6a 00                	push   0x0
c0020a5c:	e8 26 f7 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020a61:	89 c7                	mov    edi,eax
c0020a63:	89 d5                	mov    ebp,edx
c0020a65:	58                   	pop    eax
c0020a66:	ff 36                	push   DWORD PTR [esi]
c0020a68:	e8 69 f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020a6d:	e9 a3 01 00 00       	jmp    c0020c15 <Vm::x87Handler(regs*)+0x951>
c0020a72:	80 fa 06             	cmp    dl,0x6
c0020a75:	75 0f                	jne    c0020a86 <Vm::x87Handler(regs*)+0x7c2>
c0020a77:	83 ec 0c             	sub    esp,0xc
c0020a7a:	ff 36                	push   DWORD PTR [esi]
c0020a7c:	e8 55 f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020a81:	e9 ae 01 00 00       	jmp    c0020c34 <Vm::x87Handler(regs*)+0x970>
c0020a86:	31 c0                	xor    eax,eax
c0020a88:	80 fa 07             	cmp    dl,0x7
c0020a8b:	0f 85 94 02 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020a91:	83 ec 0c             	sub    esp,0xc
c0020a94:	6a 00                	push   0x0
c0020a96:	e8 ec f6 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020a9b:	89 c7                	mov    edi,eax
c0020a9d:	89 d5                	mov    ebp,edx
c0020a9f:	58                   	pop    eax
c0020aa0:	ff 36                	push   DWORD PTR [esi]
c0020aa2:	e8 2f f4 ff ff       	call   c001fed6 <Vm::fpu32ToInternal(unsigned int)>
c0020aa7:	e9 cb 01 00 00       	jmp    c0020c77 <Vm::x87Handler(regs*)+0x9b3>
c0020aac:	80 fa 03             	cmp    dl,0x3
c0020aaf:	0f 85 d3 01 00 00    	jne    c0020c88 <Vm::x87Handler(regs*)+0x9c4>
c0020ab5:	e8 b8 f7 ff ff       	call   c0020272 <Vm::fpuPop()>
c0020aba:	51                   	push   ecx
c0020abb:	51                   	push   ecx
c0020abc:	e9 de 01 00 00       	jmp    c0020c9f <Vm::x87Handler(regs*)+0x9db>
c0020ac1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020ac5:	80 fa 01             	cmp    dl,0x1
c0020ac8:	75 09                	jne    c0020ad3 <Vm::x87Handler(regs*)+0x80f>
c0020aca:	57                   	push   edi
c0020acb:	57                   	push   edi
c0020acc:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ace:	e9 e3 01 00 00       	jmp    c0020cb6 <Vm::x87Handler(regs*)+0x9f2>
c0020ad3:	80 fa 04             	cmp    dl,0x4
c0020ad6:	75 12                	jne    c0020aea <Vm::x87Handler(regs*)+0x826>
c0020ad8:	31 d2                	xor    edx,edx
c0020ada:	51                   	push   ecx
c0020adb:	51                   	push   ecx
c0020adc:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ade:	52                   	push   edx
c0020adf:	50                   	push   eax
c0020ae0:	e8 d0 f4 ff ff       	call   c001ffb5 <Vm::fpuLongToFloat(long long)>
c0020ae5:	e9 ee 00 00 00       	jmp    c0020bd8 <Vm::x87Handler(regs*)+0x914>
c0020aea:	31 c0                	xor    eax,eax
c0020aec:	80 fa 07             	cmp    dl,0x7
c0020aef:	0f 85 30 02 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020af5:	83 ec 0c             	sub    esp,0xc
c0020af8:	6a 00                	push   0x0
c0020afa:	e8 88 f6 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020aff:	89 c7                	mov    edi,eax
c0020b01:	89 d5                	mov    ebp,edx
c0020b03:	58                   	pop    eax
c0020b04:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b06:	5a                   	pop    edx
c0020b07:	31 d2                	xor    edx,edx
c0020b09:	52                   	push   edx
c0020b0a:	50                   	push   eax
c0020b0b:	e8 a5 f4 ff ff       	call   c001ffb5 <Vm::fpuLongToFloat(long long)>
c0020b10:	e9 62 01 00 00       	jmp    c0020c77 <Vm::x87Handler(regs*)+0x9b3>
c0020b15:	84 d2                	test   dl,dl
c0020b17:	75 0d                	jne    c0020b26 <Vm::x87Handler(regs*)+0x862>
c0020b19:	31 d2                	xor    edx,edx
c0020b1b:	55                   	push   ebp
c0020b1c:	55                   	push   ebp
c0020b1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b1f:	52                   	push   edx
c0020b20:	50                   	push   eax
c0020b21:	e9 d3 01 00 00       	jmp    c0020cf9 <Vm::x87Handler(regs*)+0xa35>
c0020b26:	31 c0                	xor    eax,eax
c0020b28:	80 fa 02             	cmp    dl,0x2
c0020b2b:	0f 85 f4 01 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020b31:	83 ec 0c             	sub    esp,0xc
c0020b34:	6a 00                	push   0x0
c0020b36:	e8 4c f6 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020b3b:	59                   	pop    ecx
c0020b3c:	5f                   	pop    edi
c0020b3d:	e9 6a f9 ff ff       	jmp    c00204ac <Vm::x87Handler(regs*)+0x1e8>
c0020b42:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b46:	84 d2                	test   dl,dl
c0020b48:	75 2a                	jne    c0020b74 <Vm::x87Handler(regs*)+0x8b0>
c0020b4a:	50                   	push   eax
c0020b4b:	50                   	push   eax
c0020b4c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b4f:	ff 36                	push   DWORD PTR [esi]
c0020b51:	e8 c5 f3 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020b56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b5d:	89 c6                	mov    esi,eax
c0020b5f:	89 d7                	mov    edi,edx
c0020b61:	e8 21 f6 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020b66:	57                   	push   edi
c0020b67:	56                   	push   esi
c0020b68:	52                   	push   edx
c0020b69:	50                   	push   eax
c0020b6a:	e8 8e f5 ff ff       	call   c00200fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020b6f:	e9 64 01 00 00       	jmp    c0020cd8 <Vm::x87Handler(regs*)+0xa14>
c0020b74:	80 fa 01             	cmp    dl,0x1
c0020b77:	75 11                	jne    c0020b8a <Vm::x87Handler(regs*)+0x8c6>
c0020b79:	50                   	push   eax
c0020b7a:	50                   	push   eax
c0020b7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b7e:	ff 36                	push   DWORD PTR [esi]
c0020b80:	e8 96 f3 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020b85:	e9 35 01 00 00       	jmp    c0020cbf <Vm::x87Handler(regs*)+0x9fb>
c0020b8a:	80 fa 02             	cmp    dl,0x2
c0020b8d:	0f 85 54 f9 ff ff    	jne    c00204e7 <Vm::x87Handler(regs*)+0x223>
c0020b93:	55                   	push   ebp
c0020b94:	55                   	push   ebp
c0020b95:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b98:	ff 36                	push   DWORD PTR [esi]
c0020b9a:	e8 7c f3 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020b9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ba6:	89 c6                	mov    esi,eax
c0020ba8:	89 d7                	mov    edi,edx
c0020baa:	e8 d8 f5 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020baf:	57                   	push   edi
c0020bb0:	56                   	push   esi
c0020bb1:	52                   	push   edx
c0020bb2:	50                   	push   eax
c0020bb3:	e8 f2 f4 ff ff       	call   c00200aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020bbc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020bbf:	83 c4 20             	add    esp,0x20
c0020bc2:	e9 74 f7 ff ff       	jmp    c002033b <Vm::x87Handler(regs*)+0x77>
c0020bc7:	80 fa 04             	cmp    dl,0x4
c0020bca:	75 2a                	jne    c0020bf6 <Vm::x87Handler(regs*)+0x932>
c0020bcc:	51                   	push   ecx
c0020bcd:	51                   	push   ecx
c0020bce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bd1:	ff 36                	push   DWORD PTR [esi]
c0020bd3:	e8 43 f3 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020bd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bdf:	89 c6                	mov    esi,eax
c0020be1:	89 d7                	mov    edi,edx
c0020be3:	e8 9f f5 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020be8:	57                   	push   edi
c0020be9:	56                   	push   esi
c0020bea:	52                   	push   edx
c0020beb:	50                   	push   eax
c0020bec:	e8 36 f5 ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020bf1:	e9 e2 00 00 00       	jmp    c0020cd8 <Vm::x87Handler(regs*)+0xa14>
c0020bf6:	80 fa 05             	cmp    dl,0x5
c0020bf9:	75 28                	jne    c0020c23 <Vm::x87Handler(regs*)+0x95f>
c0020bfb:	83 ec 0c             	sub    esp,0xc
c0020bfe:	6a 00                	push   0x0
c0020c00:	e8 82 f5 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020c05:	89 c7                	mov    edi,eax
c0020c07:	89 d5                	mov    ebp,edx
c0020c09:	58                   	pop    eax
c0020c0a:	5a                   	pop    edx
c0020c0b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c0e:	ff 36                	push   DWORD PTR [esi]
c0020c10:	e8 06 f3 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020c15:	83 c4 10             	add    esp,0x10
c0020c18:	55                   	push   ebp
c0020c19:	57                   	push   edi
c0020c1a:	52                   	push   edx
c0020c1b:	50                   	push   eax
c0020c1c:	e8 06 f5 ff ff       	call   c0020127 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c21:	eb 60                	jmp    c0020c83 <Vm::x87Handler(regs*)+0x9bf>
c0020c23:	80 fa 06             	cmp    dl,0x6
c0020c26:	75 2a                	jne    c0020c52 <Vm::x87Handler(regs*)+0x98e>
c0020c28:	51                   	push   ecx
c0020c29:	51                   	push   ecx
c0020c2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c2d:	ff 36                	push   DWORD PTR [esi]
c0020c2f:	e8 e7 f2 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020c34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c3b:	89 c6                	mov    esi,eax
c0020c3d:	89 d7                	mov    edi,edx
c0020c3f:	e8 43 f5 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020c44:	57                   	push   edi
c0020c45:	56                   	push   esi
c0020c46:	52                   	push   edx
c0020c47:	50                   	push   eax
c0020c48:	e8 08 f5 ff ff       	call   c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c4d:	e9 86 00 00 00       	jmp    c0020cd8 <Vm::x87Handler(regs*)+0xa14>
c0020c52:	31 c0                	xor    eax,eax
c0020c54:	80 fa 07             	cmp    dl,0x7
c0020c57:	0f 85 c8 00 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020c5d:	83 ec 0c             	sub    esp,0xc
c0020c60:	6a 00                	push   0x0
c0020c62:	e8 20 f5 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020c67:	89 c7                	mov    edi,eax
c0020c69:	89 d5                	mov    ebp,edx
c0020c6b:	58                   	pop    eax
c0020c6c:	5a                   	pop    edx
c0020c6d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c70:	ff 36                	push   DWORD PTR [esi]
c0020c72:	e8 a4 f2 ff ff       	call   c001ff1b <Vm::fpu64ToInternal(unsigned long long)>
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	55                   	push   ebp
c0020c7b:	57                   	push   edi
c0020c7c:	52                   	push   edx
c0020c7d:	50                   	push   eax
c0020c7e:	e8 d2 f4 ff ff       	call   c0020155 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c83:	83 c4 0c             	add    esp,0xc
c0020c86:	eb 53                	jmp    c0020cdb <Vm::x87Handler(regs*)+0xa17>
c0020c88:	31 c0                	xor    eax,eax
c0020c8a:	80 fa 02             	cmp    dl,0x2
c0020c8d:	0f 85 92 00 00 00    	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020c93:	83 ec 0c             	sub    esp,0xc
c0020c96:	6a 00                	push   0x0
c0020c98:	e8 ea f4 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020c9d:	59                   	pop    ecx
c0020c9e:	5f                   	pop    edi
c0020c9f:	52                   	push   edx
c0020ca0:	50                   	push   eax
c0020ca1:	e8 27 f2 ff ff       	call   c001fecd <Vm::fpuInternalTo64(unsigned long long)>
c0020ca6:	eb 70                	jmp    c0020d18 <Vm::x87Handler(regs*)+0xa54>
c0020ca8:	31 c0                	xor    eax,eax
c0020caa:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020caf:	75 74                	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020cb1:	50                   	push   eax
c0020cb2:	50                   	push   eax
c0020cb3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020cb6:	31 d2                	xor    edx,edx
c0020cb8:	52                   	push   edx
c0020cb9:	50                   	push   eax
c0020cba:	e8 f6 f2 ff ff       	call   c001ffb5 <Vm::fpuLongToFloat(long long)>
c0020cbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020cc6:	89 c6                	mov    esi,eax
c0020cc8:	89 d7                	mov    edi,edx
c0020cca:	e8 b8 f4 ff ff       	call   c0020187 <Vm::fpuGetReg(int)>
c0020ccf:	57                   	push   edi
c0020cd0:	56                   	push   esi
c0020cd1:	52                   	push   edx
c0020cd2:	50                   	push   eax
c0020cd3:	e8 5e f4 ff ff       	call   c0020136 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020cd8:	83 c4 1c             	add    esp,0x1c
c0020cdb:	52                   	push   edx
c0020cdc:	50                   	push   eax
c0020cdd:	6a 00                	push   0x0
c0020cdf:	e8 e6 f4 ff ff       	call   c00201ca <Vm::fpuSetReg(int, unsigned long long)>
c0020ce4:	e9 f2 f7 ff ff       	jmp    c00204db <Vm::x87Handler(regs*)+0x217>
c0020ce9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020ced:	80 fa 05             	cmp    dl,0x5
c0020cf0:	75 11                	jne    c0020d03 <Vm::x87Handler(regs*)+0xa3f>
c0020cf2:	55                   	push   ebp
c0020cf3:	55                   	push   ebp
c0020cf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020cf7:	ff 36                	push   DWORD PTR [esi]
c0020cf9:	e8 81 f2 ff ff       	call   c001ff7f <Vm::fpuULongToFloat(unsigned long long)>
c0020cfe:	e9 cf f7 ff ff       	jmp    c00204d2 <Vm::x87Handler(regs*)+0x20e>
c0020d03:	31 c0                	xor    eax,eax
c0020d05:	80 fa 07             	cmp    dl,0x7
c0020d08:	75 1b                	jne    c0020d25 <Vm::x87Handler(regs*)+0xa61>
c0020d0a:	e8 63 f5 ff ff       	call   c0020272 <Vm::fpuPop()>
c0020d0f:	51                   	push   ecx
c0020d10:	51                   	push   ecx
c0020d11:	52                   	push   edx
c0020d12:	50                   	push   eax
c0020d13:	e8 0c f2 ff ff       	call   c001ff24 <Vm::fpuFloatToLong(unsigned long long)>
c0020d18:	83 c4 10             	add    esp,0x10
c0020d1b:	89 06                	mov    DWORD PTR [esi],eax
c0020d1d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020d20:	e9 f8 f7 ff ff       	jmp    c002051d <Vm::x87Handler(regs*)+0x259>
c0020d25:	83 c4 1c             	add    esp,0x1c
c0020d28:	5b                   	pop    ebx
c0020d29:	5e                   	pop    esi
c0020d2a:	5f                   	pop    edi
c0020d2b:	5d                   	pop    ebp
c0020d2c:	c3                   	ret    

c0020d2d <__static_initialization_and_destruction_0(int, int)>:
c0020d2d:	83 ec 0c             	sub    esp,0xc
c0020d30:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020d35:	75 1a                	jne    c0020d51 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d37:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020d3f:	75 10                	jne    c0020d51 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d41:	83 ec 0c             	sub    esp,0xc
c0020d44:	68 a0 28 03 c0       	push   0xc00328a0
c0020d49:	e8 ee 8c 00 00       	call   c0029a3c <Vm::_FPUState::_FPUState()>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	90                   	nop
c0020d52:	83 c4 0c             	add    esp,0xc
c0020d55:	c3                   	ret    

c0020d56 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020d56:	83 ec 0c             	sub    esp,0xc
c0020d59:	83 ec 08             	sub    esp,0x8
c0020d5c:	68 ff ff 00 00       	push   0xffff
c0020d61:	6a 01                	push   0x1
c0020d63:	e8 c5 ff ff ff       	call   c0020d2d <__static_initialization_and_destruction_0(int, int)>
c0020d68:	83 c4 10             	add    esp,0x10
c0020d6b:	83 c4 0c             	add    esp,0xc
c0020d6e:	c3                   	ret    
c0020d6f:	90                   	nop

c0020d70 <FAT::getName()>:
c0020d70:	b8 4c d6 02 c0       	mov    eax,0xc002d64c
c0020d75:	c3                   	ret    

c0020d76 <FAT::tell(void*, unsigned long long*)>:
c0020d76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d7b:	75 06                	jne    c0020d83 <FAT::tell(void*, unsigned long long*)+0xd>
c0020d7d:	b8 04 00 00 00       	mov    eax,0x4
c0020d82:	c3                   	ret    
c0020d83:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d88:	75 06                	jne    c0020d90 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020d8a:	b8 04 00 00 00       	mov    eax,0x4
c0020d8f:	c3                   	ret    
c0020d90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d94:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020d97:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020d9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d9e:	89 01                	mov    DWORD PTR [ecx],eax
c0020da0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020da3:	b8 00 00 00 00       	mov    eax,0x0
c0020da8:	c3                   	ret    
c0020da9:	90                   	nop

c0020daa <FAT::stat(void*, unsigned long long*)>:
c0020daa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020daf:	75 06                	jne    c0020db7 <FAT::stat(void*, unsigned long long*)+0xd>
c0020db1:	b8 04 00 00 00       	mov    eax,0x4
c0020db6:	c3                   	ret    
c0020db7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020dbc:	75 06                	jne    c0020dc4 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020dbe:	b8 04 00 00 00       	mov    eax,0x4
c0020dc3:	c3                   	ret    
c0020dc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020dc8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020dcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020dce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020dd2:	89 01                	mov    DWORD PTR [ecx],eax
c0020dd4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dd7:	b8 00 00 00 00       	mov    eax,0x0
c0020ddc:	c3                   	ret    
c0020ddd:	90                   	nop

c0020dde <FAT::~FAT()>:
c0020dde:	83 ec 0c             	sub    esp,0xc
c0020de1:	ba dc d6 02 c0       	mov    edx,0xc002d6dc
c0020de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dea:	89 10                	mov    DWORD PTR [eax],edx
c0020dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df0:	83 ec 0c             	sub    esp,0xc
c0020df3:	50                   	push   eax
c0020df4:	e8 6d 23 ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0020df9:	83 c4 10             	add    esp,0x10
c0020dfc:	90                   	nop
c0020dfd:	83 c4 0c             	add    esp,0xc
c0020e00:	c3                   	ret    
c0020e01:	90                   	nop

c0020e02 <FAT::~FAT()>:
c0020e02:	83 ec 0c             	sub    esp,0xc
c0020e05:	83 ec 0c             	sub    esp,0xc
c0020e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e0c:	e8 cd ff ff ff       	call   c0020dde <FAT::~FAT()>
c0020e11:	83 c4 10             	add    esp,0x10
c0020e14:	83 ec 08             	sub    esp,0x8
c0020e17:	6a 08                	push   0x8
c0020e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e1d:	e8 35 1f ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	83 c4 0c             	add    esp,0xc
c0020e28:	c3                   	ret    
c0020e29:	90                   	nop

c0020e2a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020e2a:	83 ec 1c             	sub    esp,0x1c
c0020e2d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020e34:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e3d:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020e44:	83 f8 ff             	cmp    eax,0xffffffff
c0020e47:	75 34                	jne    c0020e7d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020e49:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e4d:	88 c2                	mov    dl,al
c0020e4f:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020e54:	01 d0                	add    eax,edx
c0020e56:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e5a:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0020e60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e64:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020e6b:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020e70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e74:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0020e7b:	eb 17                	jmp    c0020e94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020e7d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e81:	88 c2                	mov    dl,al
c0020e83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e87:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020e8e:	01 d0                	add    eax,edx
c0020e90:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e94:	83 ec 04             	sub    esp,0x4
c0020e97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e9f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020ea3:	50                   	push   eax
c0020ea4:	e8 55 5e fe ff       	call   c0006cfe <f_getlabel>
c0020ea9:	83 c4 10             	add    esp,0x10
c0020eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020eb5:	75 07                	jne    c0020ebe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020eb7:	b8 00 00 00 00       	mov    eax,0x0
c0020ebc:	eb 05                	jmp    c0020ec3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020ebe:	b8 01 00 00 00       	mov    eax,0x1
c0020ec3:	83 c4 1c             	add    esp,0x1c
c0020ec6:	c3                   	ret    
c0020ec7:	90                   	nop

c0020ec8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020ec8:	57                   	push   edi
c0020ec9:	83 ec 58             	sub    esp,0x58
c0020ecc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020ed4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ed8:	b9 0f 00 00 00       	mov    ecx,0xf
c0020edd:	b8 00 00 00 00       	mov    eax,0x0
c0020ee2:	fc                   	cld    
c0020ee3:	89 d7                	mov    edi,edx
c0020ee5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ee7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020eeb:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020ef2:	83 f8 ff             	cmp    eax,0xffffffff
c0020ef5:	75 34                	jne    c0020f2b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020ef7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020efb:	88 c2                	mov    dl,al
c0020efd:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020f02:	01 d0                	add    eax,edx
c0020f04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f08:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0020f0e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f12:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020f19:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020f1e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020f22:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0020f29:	eb 17                	jmp    c0020f42 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020f2b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f2f:	88 c2                	mov    dl,al
c0020f31:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f35:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020f3c:	01 d0                	add    eax,edx
c0020f3e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f42:	83 ec 08             	sub    esp,0x8
c0020f45:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020f49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f4d:	50                   	push   eax
c0020f4e:	e8 f9 f9 fd ff       	call   c000094c <strcat>
c0020f53:	83 c4 10             	add    esp,0x10
c0020f56:	83 ec 0c             	sub    esp,0xc
c0020f59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f5d:	50                   	push   eax
c0020f5e:	e8 89 5f fe ff       	call   c0006eec <f_setlabel>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f6a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020f6f:	75 07                	jne    c0020f78 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020f71:	b8 00 00 00 00       	mov    eax,0x0
c0020f76:	eb 05                	jmp    c0020f7d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020f78:	b8 01 00 00 00       	mov    eax,0x1
c0020f7d:	83 c4 58             	add    esp,0x58
c0020f80:	5f                   	pop    edi
c0020f81:	c3                   	ret    

c0020f82 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020f82:	83 ec 2c             	sub    esp,0x2c
c0020f85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020f8d:	83 ec 08             	sub    esp,0x8
c0020f90:	68 70 d6 02 c0       	push   0xc002d670
c0020f95:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f99:	e8 fa f8 fd ff       	call   c0000898 <strcmp>
c0020f9e:	83 c4 10             	add    esp,0x10
c0020fa1:	85 c0                	test   eax,eax
c0020fa3:	0f 94 c0             	sete   al
c0020fa6:	84 c0                	test   al,al
c0020fa8:	74 0d                	je     c0020fb7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020faa:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020fb2:	e9 a6 00 00 00       	jmp    c002105d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fb7:	83 ec 08             	sub    esp,0x8
c0020fba:	68 62 d6 02 c0       	push   0xc002d662
c0020fbf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fc3:	e8 d0 f8 fd ff       	call   c0000898 <strcmp>
c0020fc8:	83 c4 10             	add    esp,0x10
c0020fcb:	85 c0                	test   eax,eax
c0020fcd:	0f 94 c0             	sete   al
c0020fd0:	84 c0                	test   al,al
c0020fd2:	74 0a                	je     c0020fde <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020fd4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020fdc:	eb 7f                	jmp    c002105d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fde:	83 ec 08             	sub    esp,0x8
c0020fe1:	68 68 d6 02 c0       	push   0xc002d668
c0020fe6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fea:	e8 a9 f8 fd ff       	call   c0000898 <strcmp>
c0020fef:	83 c4 10             	add    esp,0x10
c0020ff2:	85 c0                	test   eax,eax
c0020ff4:	0f 94 c0             	sete   al
c0020ff7:	84 c0                	test   al,al
c0020ff9:	74 0a                	je     c0021005 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020ffb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0021003:	eb 58                	jmp    c002105d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021005:	83 ec 08             	sub    esp,0x8
c0021008:	68 ac a1 02 c0       	push   0xc002a1ac
c002100d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021011:	e8 82 f8 fd ff       	call   c0000898 <strcmp>
c0021016:	83 c4 10             	add    esp,0x10
c0021019:	85 c0                	test   eax,eax
c002101b:	0f 94 c0             	sete   al
c002101e:	84 c0                	test   al,al
c0021020:	74 0a                	je     c002102c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0021022:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002102a:	eb 31                	jmp    c002105d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002102c:	83 ec 08             	sub    esp,0x8
c002102f:	68 6e d6 02 c0       	push   0xc002d66e
c0021034:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021038:	e8 5b f8 fd ff       	call   c0000898 <strcmp>
c002103d:	83 c4 10             	add    esp,0x10
c0021040:	85 c0                	test   eax,eax
c0021042:	0f 94 c0             	sete   al
c0021045:	84 c0                	test   al,al
c0021047:	74 0a                	je     c0021053 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0021049:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0021051:	eb 0a                	jmp    c002105d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021053:	b8 08 00 00 00       	mov    eax,0x8
c0021058:	e9 04 01 00 00       	jmp    c0021161 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002105d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0021064:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0021069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002106d:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0021074:	83 f8 ff             	cmp    eax,0xffffffff
c0021077:	75 34                	jne    c00210ad <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0021079:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002107d:	88 c2                	mov    dl,al
c002107f:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021084:	01 d0                	add    eax,edx
c0021086:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002108a:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0021090:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021094:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c002109b:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c00210a0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00210a4:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c00210ab:	eb 17                	jmp    c00210c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00210ad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00210b1:	88 c2                	mov    dl,al
c00210b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210b7:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c00210be:	01 d0                	add    eax,edx
c00210c0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210c8:	88 04 24             	mov    BYTE PTR [esp],al
c00210cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00210cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00210db:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00210e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00210e8:	83 ec 0c             	sub    esp,0xc
c00210eb:	68 00 20 00 00       	push   0x2000
c00210f0:	e8 97 e7 fe ff       	call   c000f88c <malloc>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210fc:	68 00 20 00 00       	push   0x2000
c0021101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021105:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021109:	50                   	push   eax
c002110a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002110e:	50                   	push   eax
c002110f:	e8 23 62 fe ff       	call   c0007337 <f_mkfs>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002111b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021120:	75 07                	jne    c0021129 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0021122:	b8 00 00 00 00       	mov    eax,0x0
c0021127:	eb 38                	jmp    c0021161 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021129:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002112e:	75 17                	jne    c0021147 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	68 ac d6 02 c0       	push   0xc002d6ac
c0021138:	e8 fa 1c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002113d:	83 c4 10             	add    esp,0x10
c0021140:	b8 09 00 00 00       	mov    eax,0x9
c0021145:	eb 1a                	jmp    c0021161 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021147:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002114b:	83 ec 08             	sub    esp,0x8
c002114e:	50                   	push   eax
c002114f:	68 74 d6 02 c0       	push   0xc002d674
c0021154:	e8 de 1c ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0021159:	83 c4 10             	add    esp,0x10
c002115c:	b8 01 00 00 00       	mov    eax,0x1
c0021161:	83 c4 2c             	add    esp,0x2c
c0021164:	c3                   	ret    
c0021165:	90                   	nop

c0021166 <FAT::tryMount(LogicalDisk*, int)>:
c0021166:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002116c:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021171:	83 f8 14             	cmp    eax,0x14
c0021174:	75 17                	jne    c002118d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0021176:	83 ec 0c             	sub    esp,0xc
c0021179:	68 86 d6 02 c0       	push   0xc002d686
c002117e:	e8 4e 97 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	b0 00                	mov    al,0x0
c0021188:	e9 d7 01 00 00       	jmp    c0021364 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002118d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0021194:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002119a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00211a0:	3d 00 02 00 00       	cmp    eax,0x200
c00211a5:	74 07                	je     c00211ae <FAT::tryMount(LogicalDisk*, int)+0x48>
c00211a7:	b0 00                	mov    al,0x0
c00211a9:	e9 b6 01 00 00       	jmp    c0021364 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211ae:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00211b6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00211bd:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c00211c4:	83 f8 ff             	cmp    eax,0xffffffff
c00211c7:	74 07                	je     c00211d0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00211c9:	b0 01                	mov    al,0x1
c00211cb:	e9 94 01 00 00       	jmp    c0021364 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211d0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00211da:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00211e2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00211e9:	88 c2                	mov    dl,al
c00211eb:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c00211f0:	01 d0                	add    eax,edx
c00211f2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00211f9:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c00211ff:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021206:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c002120d:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021212:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021219:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	68 54 02 00 00       	push   0x254
c0021228:	e8 5f e6 fe ff       	call   c000f88c <malloc>
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021237:	83 ec 04             	sub    esp,0x4
c002123a:	6a 00                	push   0x0
c002123c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021243:	50                   	push   eax
c0021244:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002124b:	e8 a5 3c fe ff       	call   c0004ef5 <f_mount>
c0021250:	83 c4 10             	add    esp,0x10
c0021253:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002125a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021262:	74 19                	je     c002127d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021264:	83 ec 0c             	sub    esp,0xc
c0021267:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002126e:	e8 39 e6 fe ff       	call   c000f8ac <rfree>
c0021273:	83 c4 10             	add    esp,0x10
c0021276:	b0 00                	mov    al,0x0
c0021278:	e9 e7 00 00 00       	jmp    c0021364 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002127d:	83 ec 04             	sub    esp,0x4
c0021280:	68 00 01 00 00       	push   0x100
c0021285:	6a 00                	push   0x0
c0021287:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002128e:	50                   	push   eax
c002128f:	e8 bc f4 fd ff       	call   c0000750 <memset>
c0021294:	83 c4 10             	add    esp,0x10
c0021297:	83 ec 08             	sub    esp,0x8
c002129a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212a1:	50                   	push   eax
c00212a2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212a9:	50                   	push   eax
c00212aa:	e8 9d f6 fd ff       	call   c000094c <strcat>
c00212af:	83 c4 10             	add    esp,0x10
c00212b2:	83 ec 08             	sub    esp,0x8
c00212b5:	68 94 d6 02 c0       	push   0xc002d694
c00212ba:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212c1:	50                   	push   eax
c00212c2:	e8 85 f6 fd ff       	call   c000094c <strcat>
c00212c7:	83 c4 10             	add    esp,0x10
c00212ca:	83 ec 04             	sub    esp,0x4
c00212cd:	6a 01                	push   0x1
c00212cf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00212d6:	50                   	push   eax
c00212d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212db:	50                   	push   eax
c00212dc:	e8 76 3c fe ff       	call   c0004f57 <f_open>
c00212e1:	83 c4 10             	add    esp,0x10
c00212e4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00212eb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00212f2:	85 c0                	test   eax,eax
c00212f4:	74 0a                	je     c0021300 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00212f6:	78 2d                	js     c0021325 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00212f8:	83 e8 04             	sub    eax,0x4
c00212fb:	83 f8 01             	cmp    eax,0x1
c00212fe:	77 25                	ja     c0021325 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021300:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021308:	83 ec 0c             	sub    esp,0xc
c002130b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002130f:	50                   	push   eax
c0021310:	e8 94 47 fe ff       	call   c0005aa9 <f_close>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	90                   	nop
c0021319:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021321:	74 3a                	je     c002135d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021323:	eb 2d                	jmp    c0021352 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002132f:	e8 78 e5 fe ff       	call   c000f8ac <rfree>
c0021334:	83 c4 10             	add    esp,0x10
c0021337:	83 ec 04             	sub    esp,0x4
c002133a:	6a 00                	push   0x0
c002133c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021343:	50                   	push   eax
c0021344:	6a 00                	push   0x0
c0021346:	e8 aa 3b fe ff       	call   c0004ef5 <f_mount>
c002134b:	83 c4 10             	add    esp,0x10
c002134e:	b0 00                	mov    al,0x0
c0021350:	eb 12                	jmp    c0021364 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021352:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021357:	40                   	inc    eax
c0021358:	a3 00 29 03 c0       	mov    ds:0xc0032900,eax
c002135d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021364:	81 c4 6c 03 00 00    	add    esp,0x36c
c002136a:	c3                   	ret    
c002136b:	90                   	nop

c002136c <FAT::getFileFirstSector(char const*)>:
c002136c:	53                   	push   ebx
c002136d:	83 ec 28             	sub    esp,0x28
c0021370:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021378:	83 ec 0c             	sub    esp,0xc
c002137b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002137f:	e8 08 e5 fe ff       	call   c000f88c <malloc>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	89 c3                	mov    ebx,eax
c0021389:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c002138e:	83 ec 04             	sub    esp,0x4
c0021391:	50                   	push   eax
c0021392:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021396:	53                   	push   ebx
c0021397:	e8 fa 1f ff ff       	call   c0013396 <File::File(char const*, Process*)>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00213a3:	83 ec 08             	sub    esp,0x8
c00213a6:	6a 01                	push   0x1
c00213a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00213ac:	e8 49 20 ff ff       	call   c00133fa <File::open(FileOpenMode)>
c00213b1:	83 c4 10             	add    esp,0x10
c00213b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ba:	83 c0 0c             	add    eax,0xc
c00213bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00213bf:	83 ec 0c             	sub    esp,0xc
c00213c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213c6:	52                   	push   edx
c00213c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213cb:	52                   	push   edx
c00213cc:	6a 00                	push   0x0
c00213ce:	6a 04                	push   0x4
c00213d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00213d4:	ff d0                	call   eax
c00213d6:	83 c4 20             	add    esp,0x20
c00213d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00213e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00213e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213eb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00213ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00213f1:	83 ec 04             	sub    esp,0x4
c00213f4:	52                   	push   edx
c00213f5:	50                   	push   eax
c00213f6:	68 9f d6 02 c0       	push   0xc002d69f
c00213fb:	e8 37 1a ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0021400:	83 c4 10             	add    esp,0x10
c0021403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021407:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002140a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002140d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021411:	83 ec 0c             	sub    esp,0xc
c0021414:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021418:	e8 3b 20 ff ff       	call   c0013458 <File::close()>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021424:	ba 00 00 00 00       	mov    edx,0x0
c0021429:	83 c4 28             	add    esp,0x28
c002142c:	5b                   	pop    ebx
c002142d:	c3                   	ret    

c002142e <FAT::readDir(void*, unsigned long, void*, int*)>:
c002142e:	57                   	push   edi
c002142f:	56                   	push   esi
c0021430:	53                   	push   ebx
c0021431:	81 ec 50 02 00 00    	sub    esp,0x250
c0021437:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002143f:	74 0a                	je     c002144b <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0021441:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021449:	75 0a                	jne    c0021455 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002144b:	b8 04 00 00 00       	mov    eax,0x4
c0021450:	e9 29 01 00 00       	jmp    c002157e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021455:	83 ec 08             	sub    esp,0x8
c0021458:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002145f:	50                   	push   eax
c0021460:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0021467:	e8 47 4c fe ff       	call   c00060b3 <f_readdir>
c002146c:	83 c4 10             	add    esp,0x10
c002146f:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0021476:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002147d:	83 ec 0c             	sub    esp,0xc
c0021480:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0021487:	83 c0 1a             	add    eax,0x1a
c002148a:	50                   	push   eax
c002148b:	e8 dc f2 fd ff       	call   c000076c <strlen>
c0021490:	83 c4 10             	add    esp,0x10
c0021493:	ba 00 00 00 00       	mov    edx,0x0
c0021498:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002149c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00214a0:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00214a7:	0f b6 c0             	movzx  eax,al
c00214aa:	83 e0 10             	and    eax,0x10
c00214ad:	74 07                	je     c00214b6 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00214af:	b8 02 00 00 00       	mov    eax,0x2
c00214b4:	eb 05                	jmp    c00214bb <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00214b6:	b8 01 00 00 00       	mov    eax,0x1
c00214bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00214bf:	83 ec 08             	sub    esp,0x8
c00214c2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00214c9:	83 c0 1a             	add    eax,0x1a
c00214cc:	50                   	push   eax
c00214cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00214d1:	83 c0 10             	add    eax,0x10
c00214d4:	50                   	push   eax
c00214d5:	e8 32 f3 fd ff       	call   c000080c <strcpy>
c00214da:	83 c4 10             	add    esp,0x10
c00214dd:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00214e4:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00214eb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00214ef:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00214f6:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00214fd:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0021504:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002150b:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021512:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021519:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0021520:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0021527:	89 c6                	mov    esi,eax
c0021529:	89 d7                	mov    edi,edx
c002152b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002152d:	89 c8                	mov    eax,ecx
c002152f:	89 fa                	mov    edx,edi
c0021531:	89 f3                	mov    ebx,esi
c0021533:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002153a:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0021541:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021548:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002154f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021555:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002155c:	84 c0                	test   al,al
c002155e:	75 07                	jne    c0021567 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021560:	b8 07 00 00 00       	mov    eax,0x7
c0021565:	eb 17                	jmp    c002157e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021567:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002156e:	85 c0                	test   eax,eax
c0021570:	75 07                	jne    c0021579 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0021572:	b8 00 00 00 00       	mov    eax,0x0
c0021577:	eb 05                	jmp    c002157e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0021579:	b8 01 00 00 00       	mov    eax,0x1
c002157e:	81 c4 50 02 00 00    	add    esp,0x250
c0021584:	5b                   	pop    ebx
c0021585:	5e                   	pop    esi
c0021586:	5f                   	pop    edi
c0021587:	c3                   	ret    

c0021588 <FAT::read(void*, unsigned long, void*, int*)>:
c0021588:	83 ec 1c             	sub    esp,0x1c
c002158b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021590:	74 07                	je     c0021599 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021592:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021597:	75 07                	jne    c00215a0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021599:	b8 04 00 00 00       	mov    eax,0x4
c002159e:	eb 3d                	jmp    c00215dd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00215a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215a4:	50                   	push   eax
c00215a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00215a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00215ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215b1:	e8 dd 3d fe ff       	call   c0005393 <f_read>
c00215b6:	83 c4 10             	add    esp,0x10
c00215b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215c1:	89 c2                	mov    edx,eax
c00215c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215c7:	89 10                	mov    DWORD PTR [eax],edx
c00215c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215cd:	85 c0                	test   eax,eax
c00215cf:	75 07                	jne    c00215d8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00215d1:	b8 00 00 00 00       	mov    eax,0x0
c00215d6:	eb 05                	jmp    c00215dd <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00215d8:	b8 01 00 00 00       	mov    eax,0x1
c00215dd:	83 c4 1c             	add    esp,0x1c
c00215e0:	c3                   	ret    
c00215e1:	90                   	nop

c00215e2 <FAT::write(void*, unsigned long, void*, int*)>:
c00215e2:	83 ec 1c             	sub    esp,0x1c
c00215e5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215ea:	74 07                	je     c00215f3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00215ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00215f1:	75 07                	jne    c00215fa <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00215f3:	b8 04 00 00 00       	mov    eax,0x4
c00215f8:	eb 3d                	jmp    c0021637 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00215fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215fe:	50                   	push   eax
c00215ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021603:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002160b:	e8 03 40 fe ff       	call   c0005613 <f_write>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002161b:	89 c2                	mov    edx,eax
c002161d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021621:	89 10                	mov    DWORD PTR [eax],edx
c0021623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021627:	85 c0                	test   eax,eax
c0021629:	75 07                	jne    c0021632 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002162b:	b8 00 00 00 00       	mov    eax,0x0
c0021630:	eb 05                	jmp    c0021637 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021632:	b8 01 00 00 00       	mov    eax,0x1
c0021637:	83 c4 1c             	add    esp,0x1c
c002163a:	c3                   	ret    
c002163b:	90                   	nop

c002163c <FAT::close(void*)>:
c002163c:	83 ec 1c             	sub    esp,0x1c
c002163f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021644:	75 07                	jne    c002164d <FAT::close(void*)+0x11>
c0021646:	b8 04 00 00 00       	mov    eax,0x4
c002164b:	eb 36                	jmp    c0021683 <FAT::close(void*)+0x47>
c002164d:	83 ec 0c             	sub    esp,0xc
c0021650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021654:	e8 50 44 fe ff       	call   c0005aa9 <f_close>
c0021659:	83 c4 10             	add    esp,0x10
c002165c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021660:	83 ec 0c             	sub    esp,0xc
c0021663:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021667:	e8 30 e2 fe ff       	call   c000f89c <free>
c002166c:	83 c4 10             	add    esp,0x10
c002166f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021673:	85 c0                	test   eax,eax
c0021675:	75 07                	jne    c002167e <FAT::close(void*)+0x42>
c0021677:	b8 00 00 00 00       	mov    eax,0x0
c002167c:	eb 05                	jmp    c0021683 <FAT::close(void*)+0x47>
c002167e:	b8 01 00 00 00       	mov    eax,0x1
c0021683:	83 c4 1c             	add    esp,0x1c
c0021686:	c3                   	ret    
c0021687:	90                   	nop

c0021688 <FAT::closeDir(void*)>:
c0021688:	83 ec 1c             	sub    esp,0x1c
c002168b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021690:	75 07                	jne    c0021699 <FAT::closeDir(void*)+0x11>
c0021692:	b8 04 00 00 00       	mov    eax,0x4
c0021697:	eb 36                	jmp    c00216cf <FAT::closeDir(void*)+0x47>
c0021699:	83 ec 0c             	sub    esp,0xc
c002169c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216a0:	e8 ec 49 fe ff       	call   c0006091 <f_closedir>
c00216a5:	83 c4 10             	add    esp,0x10
c00216a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216b3:	e8 e4 e1 fe ff       	call   c000f89c <free>
c00216b8:	83 c4 10             	add    esp,0x10
c00216bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216bf:	85 c0                	test   eax,eax
c00216c1:	75 07                	jne    c00216ca <FAT::closeDir(void*)+0x42>
c00216c3:	b8 00 00 00 00       	mov    eax,0x0
c00216c8:	eb 05                	jmp    c00216cf <FAT::closeDir(void*)+0x47>
c00216ca:	b8 01 00 00 00       	mov    eax,0x1
c00216cf:	83 c4 1c             	add    esp,0x1c
c00216d2:	c3                   	ret    
c00216d3:	90                   	nop

c00216d4 <FAT::seek(void*, unsigned long long)>:
c00216d4:	83 ec 2c             	sub    esp,0x2c
c00216d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00216e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216e7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00216ec:	75 07                	jne    c00216f5 <FAT::seek(void*, unsigned long long)+0x21>
c00216ee:	b8 04 00 00 00       	mov    eax,0x4
c00216f3:	eb 2f                	jmp    c0021724 <FAT::seek(void*, unsigned long long)+0x50>
c00216f5:	83 ec 04             	sub    esp,0x4
c00216f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021700:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021704:	e8 cf 43 fe ff       	call   c0005ad8 <f_lseek>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021714:	85 c0                	test   eax,eax
c0021716:	75 07                	jne    c002171f <FAT::seek(void*, unsigned long long)+0x4b>
c0021718:	b8 00 00 00 00       	mov    eax,0x0
c002171d:	eb 05                	jmp    c0021724 <FAT::seek(void*, unsigned long long)+0x50>
c002171f:	b8 01 00 00 00       	mov    eax,0x1
c0021724:	83 c4 2c             	add    esp,0x2c
c0021727:	c3                   	ret    

c0021728 <fatWrapperReadDisk>:
c0021728:	83 ec 1c             	sub    esp,0x1c
c002172b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002172f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021737:	89 04 24             	mov    DWORD PTR [esp],eax
c002173a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002173e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021742:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021747:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c002174e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021752:	83 ec 0c             	sub    esp,0xc
c0021755:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021759:	52                   	push   edx
c002175a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002175e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021762:	50                   	push   eax
c0021763:	e8 46 50 ff ff       	call   c00167ae <LogicalDisk::read(unsigned long long, int, void*)>
c0021768:	83 c4 20             	add    esp,0x20
c002176b:	83 c4 1c             	add    esp,0x1c
c002176e:	c3                   	ret    

c002176f <fatWrapperWriteDisk>:
c002176f:	83 ec 1c             	sub    esp,0x1c
c0021772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021776:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002177a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002177e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021781:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021785:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021789:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002178e:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0021795:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021799:	83 ec 0c             	sub    esp,0xc
c002179c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00217a0:	52                   	push   edx
c00217a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217a9:	50                   	push   eax
c00217aa:	e8 6b 50 ff ff       	call   c001681a <LogicalDisk::write(unsigned long long, int, void*)>
c00217af:	83 c4 20             	add    esp,0x20
c00217b2:	83 c4 1c             	add    esp,0x1c
c00217b5:	c3                   	ret    

c00217b6 <fatWrapperIoctl>:
c00217b6:	53                   	push   ebx
c00217b7:	83 ec 28             	sub    esp,0x28
c00217ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00217c2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00217c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00217ca:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00217cf:	75 31                	jne    c0021802 <fatWrapperIoctl+0x4c>
c00217d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00217d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217de:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c00217e5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00217eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00217f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00217f5:	66 89 02             	mov    WORD PTR [edx],ax
c00217f8:	b8 00 00 00 00       	mov    eax,0x0
c00217fd:	e9 b2 00 00 00       	jmp    c00218b4 <fatWrapperIoctl+0xfe>
c0021802:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021807:	75 6a                	jne    c0021873 <fatWrapperIoctl+0xbd>
c0021809:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002180d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021811:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021816:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c002181d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021823:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021829:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002182f:	89 c8                	mov    eax,ecx
c0021831:	89 da                	mov    edx,ebx
c0021833:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021837:	c1 e0 0a             	shl    eax,0xa
c002183a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002183f:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0021846:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002184c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021852:	89 cb                	mov    ebx,ecx
c0021854:	c1 fb 1f             	sar    ebx,0x1f
c0021857:	53                   	push   ebx
c0021858:	51                   	push   ecx
c0021859:	52                   	push   edx
c002185a:	50                   	push   eax
c002185b:	e8 94 5d 00 00       	call   c00275f4 <__udivdi3>
c0021860:	83 c4 10             	add    esp,0x10
c0021863:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021867:	89 01                	mov    DWORD PTR [ecx],eax
c0021869:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002186c:	b8 00 00 00 00       	mov    eax,0x0
c0021871:	eb 41                	jmp    c00218b4 <fatWrapperIoctl+0xfe>
c0021873:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021878:	75 07                	jne    c0021881 <fatWrapperIoctl+0xcb>
c002187a:	b8 00 00 00 00       	mov    eax,0x0
c002187f:	eb 33                	jmp    c00218b4 <fatWrapperIoctl+0xfe>
c0021881:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021886:	75 19                	jne    c00218a1 <fatWrapperIoctl+0xeb>
c0021888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002188c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021894:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002189a:	b8 00 00 00 00       	mov    eax,0x0
c002189f:	eb 13                	jmp    c00218b4 <fatWrapperIoctl+0xfe>
c00218a1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00218a6:	75 07                	jne    c00218af <fatWrapperIoctl+0xf9>
c00218a8:	b8 00 00 00 00       	mov    eax,0x0
c00218ad:	eb 05                	jmp    c00218b4 <fatWrapperIoctl+0xfe>
c00218af:	b8 04 00 00 00       	mov    eax,0x4
c00218b4:	83 c4 28             	add    esp,0x28
c00218b7:	5b                   	pop    ebx
c00218b8:	c3                   	ret    
c00218b9:	90                   	nop

c00218ba <FAT::FAT()>:
c00218ba:	83 ec 1c             	sub    esp,0x1c
c00218bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218c1:	83 ec 0c             	sub    esp,0xc
c00218c4:	50                   	push   eax
c00218c5:	e8 78 18 ff ff       	call   c0013142 <Filesystem::Filesystem()>
c00218ca:	83 c4 10             	add    esp,0x10
c00218cd:	ba dc d6 02 c0       	mov    edx,0xc002d6dc
c00218d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218d6:	89 10                	mov    DWORD PTR [eax],edx
c00218d8:	c7 05 00 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032900,0x0
c00218e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218ea:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00218ef:	7f 15                	jg     c0021906 <FAT::FAT()+0x4c>
c00218f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f5:	c7 04 85 20 29 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd6e0],0xffffffff
c0021900:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021904:	eb e4                	jmp    c00218ea <FAT::FAT()+0x30>
c0021906:	90                   	nop
c0021907:	83 c4 1c             	add    esp,0x1c
c002190a:	c3                   	ret    
c002190b:	90                   	nop

c002190c <FAT::fixFilepath(char*)>:
c002190c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021910:	8a 00                	mov    al,BYTE PTR [eax]
c0021912:	3c 40                	cmp    al,0x40
c0021914:	7e 2c                	jle    c0021942 <FAT::fixFilepath(char*)+0x36>
c0021916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002191a:	8a 00                	mov    al,BYTE PTR [eax]
c002191c:	83 e8 41             	sub    eax,0x41
c002191f:	88 c2                	mov    dl,al
c0021921:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021925:	88 10                	mov    BYTE PTR [eax],dl
c0021927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002192b:	8a 00                	mov    al,BYTE PTR [eax]
c002192d:	0f be c0             	movsx  eax,al
c0021930:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0021937:	83 c0 30             	add    eax,0x30
c002193a:	88 c2                	mov    dl,al
c002193c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021940:	88 10                	mov    BYTE PTR [eax],dl
c0021942:	90                   	nop
c0021943:	c3                   	ret    

c0021944 <FAT::open(char const*, void**, FileOpenMode)>:
c0021944:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002194a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021952:	74 0a                	je     c002195e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021954:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002195c:	75 0a                	jne    c0021968 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002195e:	b8 04 00 00 00       	mov    eax,0x4
c0021963:	e9 fd 00 00 00       	jmp    c0021a65 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021968:	83 ec 08             	sub    esp,0x8
c002196b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021972:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021976:	50                   	push   eax
c0021977:	e8 90 ee fd ff       	call   c000080c <strcpy>
c002197c:	83 c4 10             	add    esp,0x10
c002197f:	83 ec 08             	sub    esp,0x8
c0021982:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021986:	50                   	push   eax
c0021987:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002198e:	e8 79 ff ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021993:	83 c4 10             	add    esp,0x10
c0021996:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002199e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219a5:	83 e0 01             	and    eax,0x1
c00219a8:	74 08                	je     c00219b2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00219aa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00219b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219b9:	83 e0 04             	and    eax,0x4
c00219bc:	74 10                	je     c00219ce <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00219be:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00219c6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00219ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219d5:	83 e0 02             	and    eax,0x2
c00219d8:	74 08                	je     c00219e2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00219da:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00219e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219e9:	83 e0 08             	and    eax,0x8
c00219ec:	74 08                	je     c00219f6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00219ee:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00219f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219fd:	83 e0 10             	and    eax,0x10
c0021a00:	74 08                	je     c0021a0a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021a02:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021a0a:	83 ec 0c             	sub    esp,0xc
c0021a0d:	68 50 02 00 00       	push   0x250
c0021a12:	e8 75 de fe ff       	call   c000f88c <malloc>
c0021a17:	83 c4 10             	add    esp,0x10
c0021a1a:	89 c2                	mov    edx,eax
c0021a1c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a23:	89 10                	mov    DWORD PTR [eax],edx
c0021a25:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021a2d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a36:	83 ec 04             	sub    esp,0x4
c0021a39:	52                   	push   edx
c0021a3a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021a3e:	52                   	push   edx
c0021a3f:	50                   	push   eax
c0021a40:	e8 12 35 fe ff       	call   c0004f57 <f_open>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021a4f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021a57:	74 07                	je     c0021a60 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021a59:	b8 01 00 00 00       	mov    eax,0x1
c0021a5e:	eb 05                	jmp    c0021a65 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a60:	b8 00 00 00 00       	mov    eax,0x0
c0021a65:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a6b:	c3                   	ret    

c0021a6c <FAT::openDir(char const*, void**)>:
c0021a6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a7a:	74 0a                	je     c0021a86 <FAT::openDir(char const*, void**)+0x1a>
c0021a7c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021a84:	75 07                	jne    c0021a8d <FAT::openDir(char const*, void**)+0x21>
c0021a86:	b8 04 00 00 00       	mov    eax,0x4
c0021a8b:	eb 7d                	jmp    c0021b0a <FAT::openDir(char const*, void**)+0x9e>
c0021a8d:	83 ec 08             	sub    esp,0x8
c0021a90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a9b:	50                   	push   eax
c0021a9c:	e8 6b ed fd ff       	call   c000080c <strcpy>
c0021aa1:	83 c4 10             	add    esp,0x10
c0021aa4:	83 ec 08             	sub    esp,0x8
c0021aa7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021aab:	50                   	push   eax
c0021aac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ab3:	e8 54 fe ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021ab8:	83 c4 10             	add    esp,0x10
c0021abb:	83 ec 0c             	sub    esp,0xc
c0021abe:	6a 4c                	push   0x4c
c0021ac0:	e8 c7 dd fe ff       	call   c000f88c <malloc>
c0021ac5:	83 c4 10             	add    esp,0x10
c0021ac8:	89 c2                	mov    edx,eax
c0021aca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021ad1:	89 10                	mov    DWORD PTR [eax],edx
c0021ad3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0021adc:	83 ec 08             	sub    esp,0x8
c0021adf:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021ae3:	52                   	push   edx
c0021ae4:	50                   	push   eax
c0021ae5:	e8 a5 44 fe ff       	call   c0005f8f <f_opendir>
c0021aea:	83 c4 10             	add    esp,0x10
c0021aed:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021af4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021afc:	74 07                	je     c0021b05 <FAT::openDir(char const*, void**)+0x99>
c0021afe:	b8 01 00 00 00       	mov    eax,0x1
c0021b03:	eb 05                	jmp    c0021b0a <FAT::openDir(char const*, void**)+0x9e>
c0021b05:	b8 00 00 00 00       	mov    eax,0x0
c0021b0a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b10:	c3                   	ret    
c0021b11:	90                   	nop

c0021b12 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021b12:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b18:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021b20:	75 0a                	jne    c0021b2c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021b22:	b8 04 00 00 00       	mov    eax,0x4
c0021b27:	e9 c9 00 00 00       	jmp    c0021bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b2c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021b34:	75 0a                	jne    c0021b40 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021b36:	b8 04 00 00 00       	mov    eax,0x4
c0021b3b:	e9 b5 00 00 00       	jmp    c0021bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b40:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021b48:	75 0a                	jne    c0021b54 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021b4a:	b8 04 00 00 00       	mov    eax,0x4
c0021b4f:	e9 a1 00 00 00       	jmp    c0021bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b54:	83 ec 08             	sub    esp,0x8
c0021b57:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b5e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b65:	50                   	push   eax
c0021b66:	e8 a1 ec fd ff       	call   c000080c <strcpy>
c0021b6b:	83 c4 10             	add    esp,0x10
c0021b6e:	83 ec 08             	sub    esp,0x8
c0021b71:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021b78:	50                   	push   eax
c0021b79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b80:	e8 87 fd ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021b85:	83 c4 10             	add    esp,0x10
c0021b88:	83 ec 08             	sub    esp,0x8
c0021b8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b8f:	50                   	push   eax
c0021b90:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b97:	50                   	push   eax
c0021b98:	e8 b1 45 fe ff       	call   c000614e <f_stat>
c0021b9d:	83 c4 10             	add    esp,0x10
c0021ba0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ba7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021bae:	85 c0                	test   eax,eax
c0021bb0:	74 07                	je     c0021bb9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021bb2:	83 f8 04             	cmp    eax,0x4
c0021bb5:	74 32                	je     c0021be9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021bb7:	eb 37                	jmp    c0021bf0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021bb9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021bbd:	0f b6 c0             	movzx  eax,al
c0021bc0:	83 e0 10             	and    eax,0x10
c0021bc3:	0f 95 c2             	setne  dl
c0021bc6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021bcd:	88 10                	mov    BYTE PTR [eax],dl
c0021bcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bd6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021bdd:	89 01                	mov    DWORD PTR [ecx],eax
c0021bdf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021be2:	b8 00 00 00 00       	mov    eax,0x0
c0021be7:	eb 0c                	jmp    c0021bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021be9:	b8 02 00 00 00       	mov    eax,0x2
c0021bee:	eb 05                	jmp    c0021bf5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021bf0:	b8 01 00 00 00       	mov    eax,0x1
c0021bf5:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021bfb:	c3                   	ret    

c0021bfc <FAT::unlink(char const*)>:
c0021bfc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c0a:	75 07                	jne    c0021c13 <FAT::unlink(char const*)+0x17>
c0021c0c:	b8 04 00 00 00       	mov    eax,0x4
c0021c11:	eb 5c                	jmp    c0021c6f <FAT::unlink(char const*)+0x73>
c0021c13:	83 ec 08             	sub    esp,0x8
c0021c16:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c21:	50                   	push   eax
c0021c22:	e8 e5 eb fd ff       	call   c000080c <strcpy>
c0021c27:	83 c4 10             	add    esp,0x10
c0021c2a:	83 ec 08             	sub    esp,0x8
c0021c2d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c31:	50                   	push   eax
c0021c32:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c39:	e8 ce fc ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021c3e:	83 c4 10             	add    esp,0x10
c0021c41:	83 ec 0c             	sub    esp,0xc
c0021c44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c48:	50                   	push   eax
c0021c49:	e8 52 48 fe ff       	call   c00064a0 <f_unlink>
c0021c4e:	83 c4 10             	add    esp,0x10
c0021c51:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c58:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c5f:	85 c0                	test   eax,eax
c0021c61:	75 07                	jne    c0021c6a <FAT::unlink(char const*)+0x6e>
c0021c63:	b8 00 00 00 00       	mov    eax,0x0
c0021c68:	eb 05                	jmp    c0021c6f <FAT::unlink(char const*)+0x73>
c0021c6a:	b8 01 00 00 00       	mov    eax,0x1
c0021c6f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c75:	c3                   	ret    

c0021c76 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c76:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021c7c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021c83:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021c8a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021c8e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021c92:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021c9a:	75 0a                	jne    c0021ca6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021c9c:	b8 04 00 00 00       	mov    eax,0x4
c0021ca1:	e9 1c 01 00 00       	jmp    c0021dc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021ca6:	83 ec 08             	sub    esp,0x8
c0021ca9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021cb4:	50                   	push   eax
c0021cb5:	e8 52 eb fd ff       	call   c000080c <strcpy>
c0021cba:	83 c4 10             	add    esp,0x10
c0021cbd:	83 ec 08             	sub    esp,0x8
c0021cc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021cc4:	50                   	push   eax
c0021cc5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021ccc:	e8 3b fc ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021cdc:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021ce4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ce9:	83 e0 01             	and    eax,0x1
c0021cec:	74 08                	je     c0021cf6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021cee:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cfb:	83 e0 02             	and    eax,0x2
c0021cfe:	74 08                	je     c0021d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021d00:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021d08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d0d:	83 e0 04             	and    eax,0x4
c0021d10:	74 08                	je     c0021d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021d12:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021d1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d1f:	83 e0 08             	and    eax,0x8
c0021d22:	74 08                	je     c0021d2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021d24:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021d2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d31:	83 e0 01             	and    eax,0x1
c0021d34:	74 08                	je     c0021d3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021d36:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021d3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d43:	83 e0 02             	and    eax,0x2
c0021d46:	74 08                	je     c0021d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021d48:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021d50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d55:	83 e0 04             	and    eax,0x4
c0021d58:	74 08                	je     c0021d62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021d5a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021d62:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d67:	83 e0 08             	and    eax,0x8
c0021d6a:	74 08                	je     c0021d74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021d6c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021d74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021d7b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021d82:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021d8a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021d92:	83 ec 04             	sub    esp,0x4
c0021d95:	52                   	push   edx
c0021d96:	50                   	push   eax
c0021d97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d9b:	50                   	push   eax
c0021d9c:	e8 a1 4d fe ff       	call   c0006b42 <f_chmod>
c0021da1:	83 c4 10             	add    esp,0x10
c0021da4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021dab:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021db2:	85 c0                	test   eax,eax
c0021db4:	75 07                	jne    c0021dbd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021db6:	b8 00 00 00 00       	mov    eax,0x0
c0021dbb:	eb 05                	jmp    c0021dc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021dbd:	b8 01 00 00 00       	mov    eax,0x1
c0021dc2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021dc8:	c3                   	ret    
c0021dc9:	90                   	nop

c0021dca <FAT::rename(char const*, char const*)>:
c0021dca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021dd0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021dd8:	74 0a                	je     c0021de4 <FAT::rename(char const*, char const*)+0x1a>
c0021dda:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021de2:	75 0a                	jne    c0021dee <FAT::rename(char const*, char const*)+0x24>
c0021de4:	b8 04 00 00 00       	mov    eax,0x4
c0021de9:	e9 98 00 00 00       	jmp    c0021e86 <FAT::rename(char const*, char const*)+0xbc>
c0021dee:	83 ec 08             	sub    esp,0x8
c0021df1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021df8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021dff:	50                   	push   eax
c0021e00:	e8 07 ea fd ff       	call   c000080c <strcpy>
c0021e05:	83 c4 10             	add    esp,0x10
c0021e08:	83 ec 08             	sub    esp,0x8
c0021e0b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021e12:	50                   	push   eax
c0021e13:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e1a:	e8 ed fa ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021e1f:	83 c4 10             	add    esp,0x10
c0021e22:	83 ec 08             	sub    esp,0x8
c0021e25:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021e2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e30:	50                   	push   eax
c0021e31:	e8 d6 e9 fd ff       	call   c000080c <strcpy>
c0021e36:	83 c4 10             	add    esp,0x10
c0021e39:	83 ec 08             	sub    esp,0x8
c0021e3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e40:	50                   	push   eax
c0021e41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e48:	e8 bf fa ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	83 ec 08             	sub    esp,0x8
c0021e53:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e57:	50                   	push   eax
c0021e58:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e5f:	50                   	push   eax
c0021e60:	e8 ea 49 fe ff       	call   c000684f <f_rename>
c0021e65:	83 c4 10             	add    esp,0x10
c0021e68:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021e6f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021e76:	85 c0                	test   eax,eax
c0021e78:	75 07                	jne    c0021e81 <FAT::rename(char const*, char const*)+0xb7>
c0021e7a:	b8 00 00 00 00       	mov    eax,0x0
c0021e7f:	eb 05                	jmp    c0021e86 <FAT::rename(char const*, char const*)+0xbc>
c0021e81:	b8 01 00 00 00       	mov    eax,0x1
c0021e86:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021e8c:	c3                   	ret    
c0021e8d:	90                   	nop

c0021e8e <FAT::mkdir(char const*)>:
c0021e8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021e9c:	75 07                	jne    c0021ea5 <FAT::mkdir(char const*)+0x17>
c0021e9e:	b8 04 00 00 00       	mov    eax,0x4
c0021ea3:	eb 5c                	jmp    c0021f01 <FAT::mkdir(char const*)+0x73>
c0021ea5:	83 ec 08             	sub    esp,0x8
c0021ea8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021eaf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021eb3:	50                   	push   eax
c0021eb4:	e8 53 e9 fd ff       	call   c000080c <strcpy>
c0021eb9:	83 c4 10             	add    esp,0x10
c0021ebc:	83 ec 08             	sub    esp,0x8
c0021ebf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ec3:	50                   	push   eax
c0021ec4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ecb:	e8 3c fa ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021ed0:	83 c4 10             	add    esp,0x10
c0021ed3:	83 ec 0c             	sub    esp,0xc
c0021ed6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021eda:	50                   	push   eax
c0021edb:	e8 43 47 fe ff       	call   c0006623 <f_mkdir>
c0021ee0:	83 c4 10             	add    esp,0x10
c0021ee3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021eea:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ef1:	85 c0                	test   eax,eax
c0021ef3:	75 07                	jne    c0021efc <FAT::mkdir(char const*)+0x6e>
c0021ef5:	b8 00 00 00 00       	mov    eax,0x0
c0021efa:	eb 05                	jmp    c0021f01 <FAT::mkdir(char const*)+0x73>
c0021efc:	b8 01 00 00 00       	mov    eax,0x1
c0021f01:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f07:	c3                   	ret    

c0021f08 <FAT::exists(char const*)>:
c0021f08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021f0e:	83 ec 08             	sub    esp,0x8
c0021f11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f1c:	50                   	push   eax
c0021f1d:	e8 ea e8 fd ff       	call   c000080c <strcpy>
c0021f22:	83 c4 10             	add    esp,0x10
c0021f25:	83 ec 08             	sub    esp,0x8
c0021f28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f2c:	50                   	push   eax
c0021f2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f34:	e8 d3 f9 ff ff       	call   c002190c <FAT::fixFilepath(char*)>
c0021f39:	83 c4 10             	add    esp,0x10
c0021f3c:	83 ec 08             	sub    esp,0x8
c0021f3f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021f46:	50                   	push   eax
c0021f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f4b:	50                   	push   eax
c0021f4c:	e8 fd 41 fe ff       	call   c000614e <f_stat>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021f5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021f62:	85 c0                	test   eax,eax
c0021f64:	75 04                	jne    c0021f6a <FAT::exists(char const*)+0x62>
c0021f66:	b0 01                	mov    al,0x1
c0021f68:	eb 02                	jmp    c0021f6c <FAT::exists(char const*)+0x64>
c0021f6a:	b0 00                	mov    al,0x0
c0021f6c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021f72:	c3                   	ret    
c0021f73:	90                   	nop

c0021f74 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021f74:	b8 08 00 00 00       	mov    eax,0x8
c0021f79:	c3                   	ret    

c0021f7a <ISO9660::seek(void*, unsigned long long)>:
c0021f7a:	53                   	push   ebx
c0021f7b:	b8 04 00 00 00       	mov    eax,0x4
c0021f80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021f8c:	85 d2                	test   edx,edx
c0021f8e:	74 17                	je     c0021fa7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f90:	89 c8                	mov    eax,ecx
c0021f92:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021f95:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021f98:	b8 01 00 00 00       	mov    eax,0x1
c0021f9d:	73 08                	jae    c0021fa7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f9f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021fa2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021fa5:	31 c0                	xor    eax,eax
c0021fa7:	5b                   	pop    ebx
c0021fa8:	c3                   	ret    
c0021fa9:	90                   	nop

c0021faa <ISO9660::tell(void*, unsigned long long*)>:
c0021faa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fb2:	85 d2                	test   edx,edx
c0021fb4:	74 12                	je     c0021fc8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fb6:	85 c0                	test   eax,eax
c0021fb8:	74 0e                	je     c0021fc8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fba:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021fbd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021fc0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021fc3:	89 10                	mov    DWORD PTR [eax],edx
c0021fc5:	31 c0                	xor    eax,eax
c0021fc7:	c3                   	ret    
c0021fc8:	b8 04 00 00 00       	mov    eax,0x4
c0021fcd:	c3                   	ret    

c0021fce <ISO9660::getName()>:
c0021fce:	b8 3c d7 02 c0       	mov    eax,0xc002d73c
c0021fd3:	c3                   	ret    

c0021fd4 <ISO9660::stat(void*, unsigned long long*)>:
c0021fd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fdc:	85 d2                	test   edx,edx
c0021fde:	74 12                	je     c0021ff2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021fe0:	85 c0                	test   eax,eax
c0021fe2:	74 0e                	je     c0021ff2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021fe4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021fe7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021fea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021fed:	89 10                	mov    DWORD PTR [eax],edx
c0021fef:	31 c0                	xor    eax,eax
c0021ff1:	c3                   	ret    
c0021ff2:	b8 04 00 00 00       	mov    eax,0x4
c0021ff7:	c3                   	ret    

c0021ff8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021ff8:	b8 01 00 00 00       	mov    eax,0x1
c0021ffd:	c3                   	ret    

c0021ffe <ISO9660::unlink(char const*)>:
c0021ffe:	b8 01 00 00 00       	mov    eax,0x1
c0022003:	c3                   	ret    

c0022004 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0022004:	b8 01 00 00 00       	mov    eax,0x1
c0022009:	c3                   	ret    

c002200a <ISO9660::rename(char const*, char const*)>:
c002200a:	b8 01 00 00 00       	mov    eax,0x1
c002200f:	c3                   	ret    

c0022010 <ISO9660::mkdir(char const*)>:
c0022010:	b8 01 00 00 00       	mov    eax,0x1
c0022015:	c3                   	ret    

c0022016 <ISO9660::close(void*)>:
c0022016:	83 ec 0c             	sub    esp,0xc
c0022019:	b8 04 00 00 00       	mov    eax,0x4
c002201e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022022:	85 d2                	test   edx,edx
c0022024:	74 0e                	je     c0022034 <ISO9660::close(void*)+0x1e>
c0022026:	83 ec 0c             	sub    esp,0xc
c0022029:	52                   	push   edx
c002202a:	e8 6d d8 fe ff       	call   c000f89c <free>
c002202f:	83 c4 10             	add    esp,0x10
c0022032:	31 c0                	xor    eax,eax
c0022034:	83 c4 0c             	add    esp,0xc
c0022037:	c3                   	ret    

c0022038 <ISO9660::closeDir(void*)>:
c0022038:	83 ec 0c             	sub    esp,0xc
c002203b:	b8 04 00 00 00       	mov    eax,0x4
c0022040:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022044:	85 d2                	test   edx,edx
c0022046:	74 0e                	je     c0022056 <ISO9660::closeDir(void*)+0x1e>
c0022048:	83 ec 0c             	sub    esp,0xc
c002204b:	52                   	push   edx
c002204c:	e8 4b d8 fe ff       	call   c000f89c <free>
c0022051:	83 c4 10             	add    esp,0x10
c0022054:	31 c0                	xor    eax,eax
c0022056:	83 c4 0c             	add    esp,0xc
c0022059:	c3                   	ret    

c002205a <ISO9660::~ISO9660()>:
c002205a:	83 ec 0c             	sub    esp,0xc
c002205d:	ba a0 d7 02 c0       	mov    edx,0xc002d7a0
c0022062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022066:	89 10                	mov    DWORD PTR [eax],edx
c0022068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206c:	83 ec 0c             	sub    esp,0xc
c002206f:	50                   	push   eax
c0022070:	e8 f1 10 ff ff       	call   c0013166 <Filesystem::~Filesystem()>
c0022075:	83 c4 10             	add    esp,0x10
c0022078:	90                   	nop
c0022079:	83 c4 0c             	add    esp,0xc
c002207c:	c3                   	ret    
c002207d:	90                   	nop

c002207e <ISO9660::~ISO9660()>:
c002207e:	83 ec 0c             	sub    esp,0xc
c0022081:	83 ec 0c             	sub    esp,0xc
c0022084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022088:	e8 cd ff ff ff       	call   c002205a <ISO9660::~ISO9660()>
c002208d:	83 c4 10             	add    esp,0x10
c0022090:	83 ec 08             	sub    esp,0x8
c0022093:	6a 08                	push   0x8
c0022095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022099:	e8 b9 0c ff ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c002209e:	83 c4 10             	add    esp,0x10
c00220a1:	83 c4 0c             	add    esp,0xc
c00220a4:	c3                   	ret    

c00220a5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00220a5:	55                   	push   ebp
c00220a6:	31 c9                	xor    ecx,ecx
c00220a8:	57                   	push   edi
c00220a9:	56                   	push   esi
c00220aa:	53                   	push   ebx
c00220ab:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00220af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00220b3:	89 eb                	mov    ebx,ebp
c00220b5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00220b9:	39 ce                	cmp    esi,ecx
c00220bb:	7e 17                	jle    c00220d4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00220bd:	31 d2                	xor    edx,edx
c00220bf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00220c3:	7d 13                	jge    c00220d8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00220c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220c9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00220cc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00220cf:	75 0d                	jne    c00220de <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00220d1:	42                   	inc    edx
c00220d2:	eb eb                	jmp    c00220bf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00220d4:	31 c0                	xor    eax,eax
c00220d6:	eb 0a                	jmp    c00220e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00220d8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00220dc:	eb 04                	jmp    c00220e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00220de:	41                   	inc    ecx
c00220df:	43                   	inc    ebx
c00220e0:	eb d7                	jmp    c00220b9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00220e2:	5b                   	pop    ebx
c00220e3:	5e                   	pop    esi
c00220e4:	5f                   	pop    edi
c00220e5:	5d                   	pop    ebp
c00220e6:	c3                   	ret    

c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00220e7:	57                   	push   edi
c00220e8:	56                   	push   esi
c00220e9:	53                   	push   ebx
c00220ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00220f2:	39 0d 00 2a 03 c0    	cmp    DWORD PTR ds:0xc0032a00,ecx
c00220f8:	75 08                	jne    c0022102 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00220fa:	38 05 54 e8 02 c0    	cmp    BYTE PTR ds:0xc002e854,al
c0022100:	74 2b                	je     c002212d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0022102:	83 ec 0c             	sub    esp,0xc
c0022105:	a2 54 e8 02 c0       	mov    ds:0xc002e854,al
c002210a:	68 20 2a 03 c0       	push   0xc0032a20
c002210f:	0f be c0             	movsx  eax,al
c0022112:	6a 01                	push   0x1
c0022114:	89 0d 00 2a 03 c0    	mov    DWORD PTR ds:0xc0032a00,ecx
c002211a:	31 db                	xor    ebx,ebx
c002211c:	53                   	push   ebx
c002211d:	51                   	push   ecx
c002211e:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c0022125:	e8 84 46 ff ff       	call   c00167ae <LogicalDisk::read(unsigned long long, int, void*)>
c002212a:	83 c4 20             	add    esp,0x20
c002212d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022131:	be 20 2a 03 c0       	mov    esi,0xc0032a20
c0022136:	b9 00 08 00 00       	mov    ecx,0x800
c002213b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002213d:	5b                   	pop    ebx
c002213e:	5e                   	pop    esi
c002213f:	5f                   	pop    edi
c0022140:	c3                   	ret    
c0022141:	90                   	nop

c0022142 <ISO9660::tryMount(LogicalDisk*, int)>:
c0022142:	81 ec 10 08 00 00    	sub    esp,0x810
c0022148:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002214f:	83 c0 41             	add    eax,0x41
c0022152:	0f be c0             	movsx  eax,al
c0022155:	50                   	push   eax
c0022156:	8d 44 24 08          	lea    eax,[esp+0x8]
c002215a:	50                   	push   eax
c002215b:	6a 10                	push   0x10
c002215d:	e8 85 ff ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022162:	83 c4 10             	add    esp,0x10
c0022165:	31 c0                	xor    eax,eax
c0022167:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002216c:	75 1d                	jne    c002218b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002216e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0022173:	75 16                	jne    c002218b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022175:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002217a:	75 0f                	jne    c002218b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002217c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022181:	75 08                	jne    c002218b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022183:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0022188:	0f 94 c0             	sete   al
c002218b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022191:	c3                   	ret    

c0022192 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0022192:	55                   	push   ebp
c0022193:	57                   	push   edi
c0022194:	56                   	push   esi
c0022195:	53                   	push   ebx
c0022196:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002219c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00221a3:	85 ed                	test   ebp,ebp
c00221a5:	0f 84 da 01 00 00    	je     c0022385 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221ab:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00221b3:	0f 84 cc 01 00 00    	je     c0022385 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221b9:	b8 01 00 00 00       	mov    eax,0x1
c00221be:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00221c2:	0f 85 c2 01 00 00    	jne    c002238a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00221c8:	31 d2                	xor    edx,edx
c00221ca:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00221d1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00221d4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00221d7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00221da:	89 04 24             	mov    DWORD PTR [esp],eax
c00221dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221e1:	01 c8                	add    eax,ecx
c00221e3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00221e6:	11 da                	adc    edx,ebx
c00221e8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00221ec:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00221f0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00221f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00221f8:	19 d7                	sbb    edi,edx
c00221fa:	72 11                	jb     c002220d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00221fc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00221ff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022203:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022207:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002220b:	eb 0c                	jmp    c0022219 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002220d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0022211:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022215:	29 ce                	sub    esi,ecx
c0022217:	19 df                	sbb    edi,ebx
c0022219:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002221c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002221f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0022223:	c1 e0 0b             	shl    eax,0xb
c0022226:	01 c8                	add    eax,ecx
c0022228:	11 da                	adc    edx,ebx
c002222a:	89 04 24             	mov    DWORD PTR [esp],eax
c002222d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022231:	51                   	push   ecx
c0022232:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022236:	50                   	push   eax
c0022237:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002223b:	53                   	push   ebx
c002223c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022244:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022248:	50                   	push   eax
c0022249:	e8 99 fe ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002224e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022251:	b8 00 08 00 00       	mov    eax,0x800
c0022256:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002225c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022260:	29 d0                	sub    eax,edx
c0022262:	83 c4 10             	add    esp,0x10
c0022265:	89 f9                	mov    ecx,edi
c0022267:	39 c6                	cmp    esi,eax
c0022269:	83 d9 00             	sbb    ecx,0x0
c002226c:	7d 1b                	jge    c0022289 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002226e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022273:	75 12                	jne    c0022287 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0022275:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002227c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022282:	e9 fa 00 00 00       	jmp    c0022381 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0022287:	89 f0                	mov    eax,esi
c0022289:	01 d3                	add    ebx,edx
c002228b:	31 d2                	xor    edx,edx
c002228d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022291:	39 c2                	cmp    edx,eax
c0022293:	7d 14                	jge    c00222a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0022295:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002229c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00222a0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00222a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00222a6:	42                   	inc    edx
c00222a7:	eb e8                	jmp    c0022291 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00222a9:	89 c2                	mov    edx,eax
c00222ab:	85 c0                	test   eax,eax
c00222ad:	79 02                	jns    c00222b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00222af:	31 d2                	xor    edx,edx
c00222b1:	01 c2                	add    edx,eax
c00222b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00222b6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00222bd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00222c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00222c5:	99                   	cdq    
c00222c6:	01 c1                	add    ecx,eax
c00222c8:	11 d3                	adc    ebx,edx
c00222ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00222ce:	29 c6                	sub    esi,eax
c00222d0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00222d4:	19 d7                	sbb    edi,edx
c00222d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00222d9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00222dd:	b8 ff 07 00 00       	mov    eax,0x7ff
c00222e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00222e5:	b8 00 00 00 00       	mov    eax,0x0
c00222ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00222ee:	7d 43                	jge    c0022333 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00222f0:	52                   	push   edx
c00222f1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222f5:	50                   	push   eax
c00222f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00222fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022302:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022306:	50                   	push   eax
c0022307:	e8 db fd ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002230c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022314:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022319:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0022321:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022329:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002232e:	83 c4 10             	add    esp,0x10
c0022331:	eb aa                	jmp    c00222dd <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0022333:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022337:	0b 04 24             	or     eax,DWORD PTR [esp]
c002233a:	74 2a                	je     c0022366 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002233c:	50                   	push   eax
c002233d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022341:	50                   	push   eax
c0022342:	8d 74 24 28          	lea    esi,[esp+0x28]
c0022346:	56                   	push   esi
c0022347:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002234b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002234f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022353:	51                   	push   ecx
c0022354:	e8 8e fd ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022359:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002235d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022361:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022363:	83 c4 10             	add    esp,0x10
c0022366:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002236d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022371:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022375:	89 18                	mov    DWORD PTR [eax],ebx
c0022377:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002237b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002237e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022381:	31 c0                	xor    eax,eax
c0022383:	eb 05                	jmp    c002238a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0022385:	b8 04 00 00 00       	mov    eax,0x4
c002238a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022390:	5b                   	pop    ebx
c0022391:	5e                   	pop    esi
c0022392:	5f                   	pop    edi
c0022393:	5d                   	pop    ebp
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022396:	55                   	push   ebp
c0022397:	57                   	push   edi
c0022398:	56                   	push   esi
c0022399:	53                   	push   ebx
c002239a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00223a0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00223a7:	85 ed                	test   ebp,ebp
c00223a9:	0f 84 51 02 00 00    	je     c0022600 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223af:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00223b7:	0f 84 43 02 00 00    	je     c0022600 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223c0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00223c3:	75 0a                	jne    c00223cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00223c5:	b8 07 00 00 00       	mov    eax,0x7
c00223ca:	e9 36 02 00 00       	jmp    c0022605 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223cf:	50                   	push   eax
c00223d0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223d4:	50                   	push   eax
c00223d5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00223dc:	53                   	push   ebx
c00223dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00223e0:	c1 e0 0b             	shl    eax,0xb
c00223e3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00223e6:	c1 e8 0b             	shr    eax,0xb
c00223e9:	50                   	push   eax
c00223ea:	e8 f8 fc ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223f2:	83 c4 10             	add    esp,0x10
c00223f5:	89 c1                	mov    ecx,eax
c00223f7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00223fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022400:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0022403:	84 db                	test   bl,bl
c0022405:	0f 85 8b 00 00 00    	jne    c0022496 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002240b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0022411:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022414:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002241a:	29 c6                	sub    esi,eax
c002241c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0022420:	89 f3                	mov    ebx,esi
c0022422:	89 f1                	mov    ecx,esi
c0022424:	c1 fb 1f             	sar    ebx,0x1f
c0022427:	01 f0                	add    eax,esi
c0022429:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002242c:	11 da                	adc    edx,ebx
c002242e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022431:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022435:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022438:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002243b:	89 d8                	mov    eax,ebx
c002243d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022441:	ba 00 00 00 00       	mov    edx,0x0
c0022446:	19 f8                	sbb    eax,edi
c0022448:	b8 00 00 00 00       	mov    eax,0x0
c002244d:	73 08                	jae    c0022457 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002244f:	89 f0                	mov    eax,esi
c0022451:	89 fa                	mov    edx,edi
c0022453:	29 c8                	sub    eax,ecx
c0022455:	19 da                	sbb    edx,ebx
c0022457:	89 d7                	mov    edi,edx
c0022459:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002245c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002245f:	09 c7                	or     edi,eax
c0022461:	0f 84 5e ff ff ff    	je     c00223c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022467:	57                   	push   edi
c0022468:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002246c:	50                   	push   eax
c002246d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022474:	53                   	push   ebx
c0022475:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022478:	c1 e0 0b             	shl    eax,0xb
c002247b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002247f:	c1 e8 0b             	shr    eax,0xb
c0022482:	50                   	push   eax
c0022483:	e8 5f fc ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022488:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002248b:	83 c4 10             	add    esp,0x10
c002248e:	25 ff 07 00 00       	and    eax,0x7ff
c0022493:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022496:	31 ff                	xor    edi,edi
c0022498:	56                   	push   esi
c0022499:	6a 28                	push   0x28
c002249b:	6a 00                	push   0x0
c002249d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224a1:	50                   	push   eax
c00224a2:	e8 a9 e2 fd ff       	call   c0000750 <memset>
c00224a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224aa:	25 ff 07 00 00       	and    eax,0x7ff
c00224af:	89 c6                	mov    esi,eax
c00224b1:	83 c6 21             	add    esi,0x21
c00224b4:	83 d7 00             	adc    edi,0x0
c00224b7:	83 c4 10             	add    esp,0x10
c00224ba:	31 c9                	xor    ecx,ecx
c00224bc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00224c3:	83 f9 28             	cmp    ecx,0x28
c00224c6:	88 04 24             	mov    BYTE PTR [esp],al
c00224c9:	0f 94 c2             	sete   dl
c00224cc:	88 d0                	mov    al,dl
c00224ce:	ba ff 07 00 00       	mov    edx,0x7ff
c00224d3:	39 f2                	cmp    edx,esi
c00224d5:	ba 00 00 00 00       	mov    edx,0x0
c00224da:	19 fa                	sbb    edx,edi
c00224dc:	0f 92 c2             	setb   dl
c00224df:	09 c2                	or     edx,eax
c00224e1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00224e5:	0f 94 c0             	sete   al
c00224e8:	08 d0                	or     al,dl
c00224ea:	75 16                	jne    c0022502 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00224ec:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00224f0:	74 10                	je     c0022502 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00224f2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00224f5:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00224f9:	41                   	inc    ecx
c00224fa:	83 c6 01             	add    esi,0x1
c00224fd:	83 d7 00             	adc    edi,0x0
c0022500:	eb ba                	jmp    c00224bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0022502:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022509:	83 ec 0c             	sub    esp,0xc
c002250c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0022510:	56                   	push   esi
c0022511:	e8 56 e2 fd ff       	call   c000076c <strlen>
c0022516:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002251d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022521:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022529:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002252c:	5a                   	pop    edx
c002252d:	25 ff 07 00 00       	and    eax,0x7ff
c0022532:	59                   	pop    ecx
c0022533:	01 f8                	add    eax,edi
c0022535:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002253b:	83 e0 02             	and    eax,0x2
c002253e:	3c 01                	cmp    al,0x1
c0022540:	19 c0                	sbb    eax,eax
c0022542:	83 c0 02             	add    eax,0x2
c0022545:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022549:	56                   	push   esi
c002254a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002254e:	50                   	push   eax
c002254f:	e8 b8 e2 fd ff       	call   c000080c <strcpy>
c0022554:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022558:	83 c4 10             	add    esp,0x10
c002255b:	84 c0                	test   al,al
c002255d:	75 21                	jne    c0022580 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002255f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022567:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002256f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022577:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002257e:	eb 28                	jmp    c00225a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022580:	fe c8                	dec    al
c0022582:	75 24                	jne    c00225a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022584:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002258c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022594:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002259c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00225a3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00225a8:	8d 74 24 40          	lea    esi,[esp+0x40]
c00225ac:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00225b3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00225ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00225bc:	0f b6 f3             	movzx  esi,bl
c00225bf:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00225c6:	31 db                	xor    ebx,ebx
c00225c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00225ce:	89 df                	mov    edi,ebx
c00225d0:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00225d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225d6:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00225d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00225dc:	39 c6                	cmp    esi,eax
c00225de:	19 d7                	sbb    edi,edx
c00225e0:	72 10                	jb     c00225f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00225e2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00225e9:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00225f0:	eb 0a                	jmp    c00225fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00225f2:	29 f0                	sub    eax,esi
c00225f4:	19 da                	sbb    edx,ebx
c00225f6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00225f9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00225fc:	31 c0                	xor    eax,eax
c00225fe:	eb 05                	jmp    c0022605 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022600:	b8 04 00 00 00       	mov    eax,0x4
c0022605:	81 c4 5c 09 00 00    	add    esp,0x95c
c002260b:	5b                   	pop    ebx
c002260c:	5e                   	pop    esi
c002260d:	5f                   	pop    edi
c002260e:	5d                   	pop    ebp
c002260f:	c3                   	ret    

c0022610 <readRoot(unsigned int*, unsigned int*, char)>:
c0022610:	57                   	push   edi
c0022611:	56                   	push   esi
c0022612:	81 ec 38 08 00 00    	sub    esp,0x838
c0022618:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022620:	50                   	push   eax
c0022621:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022625:	50                   	push   eax
c0022626:	6a 10                	push   0x10
c0022628:	e8 ba fa ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002262d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022634:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022638:	b9 22 00 00 00       	mov    ecx,0x22
c002263d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002263f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022646:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002264a:	89 10                	mov    DWORD PTR [eax],edx
c002264c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022653:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022657:	89 10                	mov    DWORD PTR [eax],edx
c0022659:	81 c4 44 08 00 00    	add    esp,0x844
c002265f:	b0 01                	mov    al,0x1
c0022661:	5e                   	pop    esi
c0022662:	5f                   	pop    edi
c0022663:	c3                   	ret    

c0022664 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022664:	55                   	push   ebp
c0022665:	57                   	push   edi
c0022666:	56                   	push   esi
c0022667:	53                   	push   ebx
c0022668:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002266e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022675:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002267c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022680:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022684:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022688:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002268c:	75 03                	jne    c0022691 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002268e:	83 c3 02             	add    ebx,0x2
c0022691:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022694:	75 03                	jne    c0022699 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022696:	43                   	inc    ebx
c0022697:	eb f8                	jmp    c0022691 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022699:	51                   	push   ecx
c002269a:	68 00 01 00 00       	push   0x100
c002269f:	6a 00                	push   0x0
c00226a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226a5:	50                   	push   eax
c00226a6:	e8 a5 e0 fd ff       	call   c0000750 <memset>
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	31 d2                	xor    edx,edx
c00226b0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00226b3:	84 c0                	test   al,al
c00226b5:	74 21                	je     c00226d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00226b7:	3c 2f                	cmp    al,0x2f
c00226b9:	75 0b                	jne    c00226c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00226bb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00226bf:	bd 01 00 00 00       	mov    ebp,0x1
c00226c4:	eb 14                	jmp    c00226da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00226c6:	8d 48 9f             	lea    ecx,[eax-0x61]
c00226c9:	80 f9 19             	cmp    cl,0x19
c00226cc:	77 03                	ja     c00226d1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00226ce:	83 e8 20             	sub    eax,0x20
c00226d1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00226d5:	42                   	inc    edx
c00226d6:	eb d8                	jmp    c00226b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00226d8:	31 ed                	xor    ebp,ebp
c00226da:	83 ec 0c             	sub    esp,0xc
c00226dd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00226e4:	e8 a3 d1 fe ff       	call   c000f88c <malloc>
c00226e9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00226f0:	89 c6                	mov    esi,eax
c00226f2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00226f8:	c1 ef 0b             	shr    edi,0xb
c00226fb:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022702:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022706:	83 c4 10             	add    esp,0x10
c0022709:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002270e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022712:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022719:	74 28                	je     c0022743 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002271b:	52                   	push   edx
c002271c:	57                   	push   edi
c002271d:	50                   	push   eax
c002271e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022722:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022729:	e8 b9 f9 ff ff       	call   c00220e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002272e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022732:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022739:	05 00 08 00 00       	add    eax,0x800
c002273e:	83 c4 10             	add    esp,0x10
c0022741:	eb cb                	jmp    c002270e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022743:	83 ec 0c             	sub    esp,0xc
c0022746:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002274a:	57                   	push   edi
c002274b:	e8 1c e0 fd ff       	call   c000076c <strlen>
c0022750:	50                   	push   eax
c0022751:	57                   	push   edi
c0022752:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022759:	56                   	push   esi
c002275a:	e8 46 f9 ff ff       	call   c00220a5 <__memmem(unsigned char*, int, unsigned char*, int)>
c002275f:	83 c4 20             	add    esp,0x20
c0022762:	85 c0                	test   eax,eax
c0022764:	75 13                	jne    c0022779 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022766:	83 ec 0c             	sub    esp,0xc
c0022769:	56                   	push   esi
c002276a:	e8 2d d1 fe ff       	call   c000f89c <free>
c002276f:	83 c4 10             	add    esp,0x10
c0022772:	31 c0                	xor    eax,eax
c0022774:	e9 b3 00 00 00       	jmp    c002282c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022779:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002277d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022781:	c1 e7 08             	shl    edi,0x8
c0022784:	c1 e2 10             	shl    edx,0x10
c0022787:	09 d7                	or     edi,edx
c0022789:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002278d:	09 d7                	or     edi,edx
c002278f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022793:	c1 e2 18             	shl    edx,0x18
c0022796:	09 d7                	or     edi,edx
c0022798:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002279c:	89 d1                	mov    ecx,edx
c002279e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00227a2:	c1 e1 08             	shl    ecx,0x8
c00227a5:	c1 e2 10             	shl    edx,0x10
c00227a8:	09 ca                	or     edx,ecx
c00227aa:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00227ae:	09 ca                	or     edx,ecx
c00227b0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00227b4:	c1 e1 18             	shl    ecx,0x18
c00227b7:	09 ca                	or     edx,ecx
c00227b9:	89 e9                	mov    ecx,ebp
c00227bb:	84 c9                	test   cl,cl
c00227bd:	74 3c                	je     c00227fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00227bf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00227c3:	83 ec 0c             	sub    esp,0xc
c00227c6:	56                   	push   esi
c00227c7:	e8 d0 d0 fe ff       	call   c000f89c <free>
c00227cc:	83 c4 0c             	add    esp,0xc
c00227cf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227d6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00227db:	50                   	push   eax
c00227dc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00227ee:	52                   	push   edx
c00227ef:	57                   	push   edi
c00227f0:	53                   	push   ebx
c00227f1:	e8 6e fe ff ff       	call   c0022664 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00227f6:	83 c4 20             	add    esp,0x20
c00227f9:	eb 31                	jmp    c002282c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00227fb:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00227fe:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022805:	d0 e8                	shr    al,1
c0022807:	89 3b                	mov    DWORD PTR [ebx],edi
c0022809:	83 e0 01             	and    eax,0x1
c002280c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022813:	83 ec 0c             	sub    esp,0xc
c0022816:	89 13                	mov    DWORD PTR [ebx],edx
c0022818:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002281f:	89 03                	mov    DWORD PTR [ebx],eax
c0022821:	56                   	push   esi
c0022822:	e8 75 d0 fe ff       	call   c000f89c <free>
c0022827:	83 c4 10             	add    esp,0x10
c002282a:	b0 01                	mov    al,0x1
c002282c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022832:	5b                   	pop    ebx
c0022833:	5e                   	pop    esi
c0022834:	5f                   	pop    edi
c0022835:	5d                   	pop    ebp
c0022836:	c3                   	ret    

c0022837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022837:	55                   	push   ebp
c0022838:	57                   	push   edi
c0022839:	56                   	push   esi
c002283a:	53                   	push   ebx
c002283b:	83 ec 20             	sub    esp,0x20
c002283e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022842:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022846:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002284a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022852:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002285a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002285f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022865:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002286b:	57                   	push   edi
c002286c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022870:	50                   	push   eax
c0022871:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022875:	50                   	push   eax
c0022876:	e8 95 fd ff ff       	call   c0022610 <readRoot(unsigned int*, unsigned int*, char)>
c002287b:	5a                   	pop    edx
c002287c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022880:	e8 e7 de fd ff       	call   c000076c <strlen>
c0022885:	83 c4 10             	add    esp,0x10
c0022888:	83 f8 03             	cmp    eax,0x3
c002288b:	77 17                	ja     c00228a4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002288d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022891:	89 03                	mov    DWORD PTR [ebx],eax
c0022893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022897:	89 06                	mov    DWORD PTR [esi],eax
c0022899:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00228a0:	b0 01                	mov    al,0x1
c00228a2:	eb 19                	jmp    c00228bd <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00228a4:	50                   	push   eax
c00228a5:	55                   	push   ebp
c00228a6:	57                   	push   edi
c00228a7:	56                   	push   esi
c00228a8:	53                   	push   ebx
c00228a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228b5:	e8 aa fd ff ff       	call   c0022664 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00228ba:	83 c4 20             	add    esp,0x20
c00228bd:	83 c4 1c             	add    esp,0x1c
c00228c0:	5b                   	pop    ebx
c00228c1:	5e                   	pop    esi
c00228c2:	5f                   	pop    edi
c00228c3:	5d                   	pop    ebp
c00228c4:	c3                   	ret    
c00228c5:	90                   	nop

c00228c6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00228c6:	57                   	push   edi
c00228c7:	56                   	push   esi
c00228c8:	53                   	push   ebx
c00228c9:	83 ec 10             	sub    esp,0x10
c00228cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00228d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00228d4:	85 ff                	test   edi,edi
c00228d6:	0f 84 9d 00 00 00    	je     c0022979 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00228dc:	85 f6                	test   esi,esi
c00228de:	0f 84 95 00 00 00    	je     c0022979 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00228e4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00228e9:	74 17                	je     c0022902 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00228eb:	83 ec 0c             	sub    esp,0xc
c00228ee:	68 57 d7 02 c0       	push   0xc002d757
c00228f3:	e8 3f 05 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00228f8:	83 c4 10             	add    esp,0x10
c00228fb:	b8 03 00 00 00       	mov    eax,0x3
c0022900:	eb 7c                	jmp    c002297e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022902:	83 ec 0c             	sub    esp,0xc
c0022905:	6a 1c                	push   0x1c
c0022907:	e8 80 cf fe ff       	call   c000f88c <malloc>
c002290c:	89 07                	mov    DWORD PTR [edi],eax
c002290e:	89 c3                	mov    ebx,eax
c0022910:	58                   	pop    eax
c0022911:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022915:	50                   	push   eax
c0022916:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022919:	50                   	push   eax
c002291a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002291e:	50                   	push   eax
c002291f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022923:	50                   	push   eax
c0022924:	56                   	push   esi
c0022925:	e8 0d ff ff ff       	call   c0022837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002292a:	83 c4 20             	add    esp,0x20
c002292d:	84 c0                	test   al,al
c002292f:	74 07                	je     c0022938 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022931:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022936:	74 0b                	je     c0022943 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022938:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002293c:	b8 01 00 00 00       	mov    eax,0x1
c0022941:	eb 3b                	jmp    c002297e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022947:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002294b:	89 03                	mov    DWORD PTR [ebx],eax
c002294d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022958:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002295f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022966:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022969:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022970:	8a 06                	mov    al,BYTE PTR [esi]
c0022972:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022975:	31 c0                	xor    eax,eax
c0022977:	eb 05                	jmp    c002297e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022979:	b8 04 00 00 00       	mov    eax,0x4
c002297e:	83 c4 10             	add    esp,0x10
c0022981:	5b                   	pop    ebx
c0022982:	5e                   	pop    esi
c0022983:	5f                   	pop    edi
c0022984:	c3                   	ret    
c0022985:	90                   	nop

c0022986 <ISO9660::exists(char const*)>:
c0022986:	83 ec 28             	sub    esp,0x28
c0022989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002298d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022991:	52                   	push   edx
c0022992:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022995:	52                   	push   edx
c0022996:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002299a:	52                   	push   edx
c002299b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002299f:	52                   	push   edx
c00229a0:	50                   	push   eax
c00229a1:	e8 91 fe ff ff       	call   c0022837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229a6:	83 c4 3c             	add    esp,0x3c
c00229a9:	c3                   	ret    

c00229aa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00229aa:	56                   	push   esi
c00229ab:	53                   	push   ebx
c00229ac:	83 ec 14             	sub    esp,0x14
c00229af:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00229b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00229b7:	85 db                	test   ebx,ebx
c00229b9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00229bd:	0f 94 c2             	sete   dl
c00229c0:	85 f6                	test   esi,esi
c00229c2:	0f 94 c0             	sete   al
c00229c5:	08 c2                	or     dl,al
c00229c7:	75 68                	jne    c0022a31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229c9:	85 c9                	test   ecx,ecx
c00229cb:	74 64                	je     c0022a31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229cd:	83 ec 0c             	sub    esp,0xc
c00229d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00229d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00229dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229e4:	50                   	push   eax
c00229e5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00229e8:	50                   	push   eax
c00229e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229ed:	50                   	push   eax
c00229ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229f2:	50                   	push   eax
c00229f3:	51                   	push   ecx
c00229f4:	e8 3e fe ff ff       	call   c0022837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229f9:	83 c4 20             	add    esp,0x20
c00229fc:	ba 01 00 00 00       	mov    edx,0x1
c0022a01:	84 c0                	test   al,al
c0022a03:	74 31                	je     c0022a36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a09:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a10:	89 03                	mov    DWORD PTR [ebx],eax
c0022a12:	ba 00 00 00 00       	mov    edx,0x0
c0022a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a1b:	85 c0                	test   eax,eax
c0022a1d:	0f 95 06             	setne  BYTE PTR [esi]
c0022a20:	74 14                	je     c0022a36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a22:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022a28:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a2f:	eb 05                	jmp    c0022a36 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a31:	ba 04 00 00 00       	mov    edx,0x4
c0022a36:	83 c4 14             	add    esp,0x14
c0022a39:	89 d0                	mov    eax,edx
c0022a3b:	5b                   	pop    ebx
c0022a3c:	5e                   	pop    esi
c0022a3d:	c3                   	ret    

c0022a3e <ISO9660::openDir(char const*, void**)>:
c0022a3e:	57                   	push   edi
c0022a3f:	56                   	push   esi
c0022a40:	53                   	push   ebx
c0022a41:	83 ec 10             	sub    esp,0x10
c0022a44:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022a48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022a4c:	85 ff                	test   edi,edi
c0022a4e:	0f 84 95 00 00 00    	je     c0022ae9 <ISO9660::openDir(char const*, void**)+0xab>
c0022a54:	85 f6                	test   esi,esi
c0022a56:	0f 84 8d 00 00 00    	je     c0022ae9 <ISO9660::openDir(char const*, void**)+0xab>
c0022a5c:	83 ec 0c             	sub    esp,0xc
c0022a5f:	6a 1c                	push   0x1c
c0022a61:	e8 26 ce fe ff       	call   c000f88c <malloc>
c0022a66:	89 07                	mov    DWORD PTR [edi],eax
c0022a68:	89 c3                	mov    ebx,eax
c0022a6a:	59                   	pop    ecx
c0022a6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a6f:	50                   	push   eax
c0022a70:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022a73:	50                   	push   eax
c0022a74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a78:	50                   	push   eax
c0022a79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a7d:	50                   	push   eax
c0022a7e:	56                   	push   esi
c0022a7f:	e8 b3 fd ff ff       	call   c0022837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a84:	83 c4 20             	add    esp,0x20
c0022a87:	84 c0                	test   al,al
c0022a89:	74 07                	je     c0022a92 <ISO9660::openDir(char const*, void**)+0x54>
c0022a8b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022a90:	75 21                	jne    c0022ab3 <ISO9660::openDir(char const*, void**)+0x75>
c0022a92:	0f b6 c0             	movzx  eax,al
c0022a95:	52                   	push   edx
c0022a96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a9a:	50                   	push   eax
c0022a9b:	68 7d d7 02 c0       	push   0xc002d77d
c0022aa0:	e8 92 03 ff ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0022aa5:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022aa9:	83 c4 10             	add    esp,0x10
c0022aac:	b8 01 00 00 00       	mov    eax,0x1
c0022ab1:	eb 3b                	jmp    c0022aee <ISO9660::openDir(char const*, void**)+0xb0>
c0022ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022abb:	89 03                	mov    DWORD PTR [ebx],eax
c0022abd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022ac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ac8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022acf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ad6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022ad9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022ae0:	8a 06                	mov    al,BYTE PTR [esi]
c0022ae2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022ae5:	31 c0                	xor    eax,eax
c0022ae7:	eb 05                	jmp    c0022aee <ISO9660::openDir(char const*, void**)+0xb0>
c0022ae9:	b8 04 00 00 00       	mov    eax,0x4
c0022aee:	83 c4 10             	add    esp,0x10
c0022af1:	5b                   	pop    ebx
c0022af2:	5e                   	pop    esi
c0022af3:	5f                   	pop    edi
c0022af4:	c3                   	ret    
c0022af5:	90                   	nop

c0022af6 <ISO9660::ISO9660()>:
c0022af6:	83 ec 0c             	sub    esp,0xc
c0022af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022afd:	83 ec 0c             	sub    esp,0xc
c0022b00:	50                   	push   eax
c0022b01:	e8 3c 06 ff ff       	call   c0013142 <Filesystem::Filesystem()>
c0022b06:	83 c4 10             	add    esp,0x10
c0022b09:	ba a0 d7 02 c0       	mov    edx,0xc002d7a0
c0022b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b12:	89 10                	mov    DWORD PTR [eax],edx
c0022b14:	90                   	nop
c0022b15:	83 c4 0c             	add    esp,0xc
c0022b18:	c3                   	ret    
c0022b19:	90                   	nop

c0022b1a <SoundChannel::~SoundChannel()>:
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b21:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022b24:	83 ec 0c             	sub    esp,0xc
c0022b27:	50                   	push   eax
c0022b28:	e8 6f cd fe ff       	call   c000f89c <free>
c0022b2d:	83 c4 10             	add    esp,0x10
c0022b30:	90                   	nop
c0022b31:	83 c4 0c             	add    esp,0xc
c0022b34:	c3                   	ret    
c0022b35:	90                   	nop

c0022b36 <SoundChannel::setSpeed(float)>:
c0022b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b3e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022b41:	c3                   	ret    

c0022b42 <SoundChannel::getSpeed()>:
c0022b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b46:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022b49:	c3                   	ret    

c0022b4a <SoundChannel::setVolume(int)>:
c0022b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b4e:	83 f8 64             	cmp    eax,0x64
c0022b51:	7e 05                	jle    c0022b58 <SoundChannel::setVolume(int)+0xe>
c0022b53:	b8 64 00 00 00       	mov    eax,0x64
c0022b58:	85 c0                	test   eax,eax
c0022b5a:	79 02                	jns    c0022b5e <SoundChannel::setVolume(int)+0x14>
c0022b5c:	31 c0                	xor    eax,eax
c0022b5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b62:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022b65:	c3                   	ret    

c0022b66 <SoundChannel::getVolume()>:
c0022b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b6a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022b6d:	c3                   	ret    

c0022b6e <SoundChannel::pause()>:
c0022b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b72:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022b76:	c3                   	ret    
c0022b77:	90                   	nop

c0022b78 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022b78:	83 ec 1c             	sub    esp,0x1c
c0022b7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022b7f:	e8 ea ff ff ff       	call   c0022b6e <SoundChannel::pause()>
c0022b84:	83 c4 04             	add    esp,0x4
c0022b87:	6a 50                	push   0x50
c0022b89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b8d:	e8 b8 ff ff ff       	call   c0022b4a <SoundChannel::setVolume(int)>
c0022b92:	83 c4 08             	add    esp,0x8
c0022b95:	a1 1c d8 02 c0       	mov    eax,ds:0xc002d81c
c0022b9a:	50                   	push   eax
c0022b9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b9f:	e8 92 ff ff ff       	call   c0022b36 <SoundChannel::setSpeed(float)>
c0022ba4:	83 c4 08             	add    esp,0x8
c0022ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022baf:	89 10                	mov    DWORD PTR [eax],edx
c0022bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022bb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022bc4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022bc7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022bcc:	75 23                	jne    c0022bf1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0022bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bdb:	0f af c2             	imul   eax,edx
c0022bde:	85 c0                	test   eax,eax
c0022be0:	79 03                	jns    c0022be5 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022be2:	83 c0 03             	add    eax,0x3
c0022be5:	c1 f8 02             	sar    eax,0x2
c0022be8:	05 a0 0f 00 00       	add    eax,0xfa0
c0022bed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022bf9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c00:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c0b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c16:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022c19:	c1 e0 02             	shl    eax,0x2
c0022c1c:	83 ec 0c             	sub    esp,0xc
c0022c1f:	50                   	push   eax
c0022c20:	e8 67 cc fe ff       	call   c000f88c <malloc>
c0022c25:	83 c4 10             	add    esp,0x10
c0022c28:	89 c2                	mov    edx,eax
c0022c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022c31:	83 ec 04             	sub    esp,0x4
c0022c34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022c38:	50                   	push   eax
c0022c39:	6a 01                	push   0x1
c0022c3b:	6a 04                	push   0x4
c0022c3d:	e8 23 5f fe ff       	call   c0008b65 <src_new>
c0022c42:	83 c4 10             	add    esp,0x10
c0022c45:	89 c2                	mov    edx,eax
c0022c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c4b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c52:	85 c0                	test   eax,eax
c0022c54:	74 10                	je     c0022c66 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022c56:	83 ec 0c             	sub    esp,0xc
c0022c59:	68 00 d8 02 c0       	push   0xc002d800
c0022c5e:	e8 6e 7c ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0022c63:	83 c4 10             	add    esp,0x10
c0022c66:	a0 20 36 03 c0       	mov    al,ds:0xc0033620
c0022c6b:	83 f0 01             	xor    eax,0x1
c0022c6e:	84 c0                	test   al,al
c0022c70:	74 57                	je     c0022cc9 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022c72:	a1 20 d8 02 c0       	mov    eax,ds:0xc002d820
c0022c77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c83:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022c8b:	7f 35                	jg     c0022cc2 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022c8d:	83 ec 0c             	sub    esp,0xc
c0022c90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c94:	e8 86 52 00 00       	call   c0027f1f <__floatsisf>
c0022c99:	83 c4 10             	add    esp,0x10
c0022c9c:	8b 15 20 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d820
c0022ca2:	83 ec 08             	sub    esp,0x8
c0022ca5:	52                   	push   edx
c0022ca6:	50                   	push   eax
c0022ca7:	e8 85 4e 00 00       	call   c0027b31 <__mulsf3>
c0022cac:	83 c4 10             	add    esp,0x10
c0022caf:	89 c2                	mov    edx,eax
c0022cb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cb5:	89 14 85 20 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccde0],edx
c0022cbc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cc0:	eb c1                	jmp    c0022c83 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022cc2:	c6 05 20 36 03 c0 01 	mov    BYTE PTR ds:0xc0033620,0x1
c0022cc9:	90                   	nop
c0022cca:	83 c4 1c             	add    esp,0x1c
c0022ccd:	c3                   	ret    

c0022cce <SoundChannel::play()>:
c0022cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cd2:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022cd6:	c3                   	ret    
c0022cd7:	90                   	nop

c0022cd8 <SoundChannel::paused()>:
c0022cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cdc:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022cdf:	c3                   	ret    

c0022ce0 <SoundChannel::getSampleRate()>:
c0022ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ce6:	c3                   	ret    
c0022ce7:	90                   	nop

c0022ce8 <SoundChannel::getBits()>:
c0022ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cef:	c3                   	ret    

c0022cf0 <SoundChannel::getBufferUsed()>:
c0022cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cf4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022cf7:	c3                   	ret    

c0022cf8 <SoundChannel::getBufferSize()>:
c0022cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cfc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022cff:	c3                   	ret    

c0022d00 <SoundChannel::unbuffer(float*, int, int)>:
c0022d00:	56                   	push   esi
c0022d01:	53                   	push   ebx
c0022d02:	83 ec 40             	sub    esp,0x40
c0022d05:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022d09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022d0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d10:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022d13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d17:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022d1b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022d1f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022d23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022d2b:	e8 ef 51 00 00       	call   c0027f1f <__floatsisf>
c0022d30:	5a                   	pop    edx
c0022d31:	89 c6                	mov    esi,eax
c0022d33:	ff 33                	push   DWORD PTR [ebx]
c0022d35:	e8 e5 51 00 00       	call   c0027f1f <__floatsisf>
c0022d3a:	59                   	pop    ecx
c0022d3b:	5a                   	pop    edx
c0022d3c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d3f:	50                   	push   eax
c0022d40:	e8 ec 4d 00 00       	call   c0027b31 <__mulsf3>
c0022d45:	59                   	pop    ecx
c0022d46:	5a                   	pop    edx
c0022d47:	50                   	push   eax
c0022d48:	56                   	push   esi
c0022d49:	e8 a6 4f 00 00       	call   c0027cf4 <__divsf3>
c0022d4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d51:	e8 99 64 00 00       	call   c00291ef <__extendsfdf2>
c0022d56:	59                   	pop    ecx
c0022d57:	5e                   	pop    esi
c0022d58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022d60:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022d68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022d6c:	50                   	push   eax
c0022d6d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022d70:	e8 e5 59 fe ff       	call   c000875a <src_process>
c0022d75:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d79:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022d7c:	83 c4 0c             	add    esp,0xc
c0022d7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022d82:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022d85:	29 d0                	sub    eax,edx
c0022d87:	c1 e0 02             	shl    eax,0x2
c0022d8a:	50                   	push   eax
c0022d8b:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022d8e:	50                   	push   eax
c0022d8f:	51                   	push   ecx
c0022d90:	e8 f3 d8 fd ff       	call   c0000688 <memmove>
c0022d95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d99:	83 c4 44             	add    esp,0x44
c0022d9c:	5b                   	pop    ebx
c0022d9d:	5e                   	pop    esi
c0022d9e:	c3                   	ret    
c0022d9f:	90                   	nop

c0022da0 <SoundChannel::buffer8(unsigned char*, int)>:
c0022da0:	55                   	push   ebp
c0022da1:	57                   	push   edi
c0022da2:	56                   	push   esi
c0022da3:	53                   	push   ebx
c0022da4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022da8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022dac:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022daf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022db3:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022db6:	74 7a                	je     c0022e32 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022db8:	85 ff                	test   edi,edi
c0022dba:	7e 76                	jle    c0022e32 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022dbc:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022dc0:	8d 70 01             	lea    esi,[eax+0x1]
c0022dc3:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022dc6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022dc9:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022dd0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022dd3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022dd6:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022dd9:	74 5e                	je     c0022e39 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022ddb:	83 ff 01             	cmp    edi,0x1
c0022dde:	74 4b                	je     c0022e2b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022de0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022de4:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022de7:	8d 70 01             	lea    esi,[eax+0x1]
c0022dea:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ded:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022df4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022df7:	b8 02 00 00 00       	mov    eax,0x2
c0022dfc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022dff:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e02:	75 23                	jne    c0022e27 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022e04:	eb 27                	jmp    c0022e2d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e06:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022e0b:	8d 71 01             	lea    esi,[ecx+0x1]
c0022e0e:	40                   	inc    eax
c0022e0f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e12:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022e15:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022e1c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022e1f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e22:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e25:	74 06                	je     c0022e2d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e27:	39 c7                	cmp    edi,eax
c0022e29:	75 db                	jne    c0022e06 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022e2b:	89 f8                	mov    eax,edi
c0022e2d:	5b                   	pop    ebx
c0022e2e:	5e                   	pop    esi
c0022e2f:	5f                   	pop    edi
c0022e30:	5d                   	pop    ebp
c0022e31:	c3                   	ret    
c0022e32:	5b                   	pop    ebx
c0022e33:	31 c0                	xor    eax,eax
c0022e35:	5e                   	pop    esi
c0022e36:	5f                   	pop    edi
c0022e37:	5d                   	pop    ebp
c0022e38:	c3                   	ret    
c0022e39:	b8 01 00 00 00       	mov    eax,0x1
c0022e3e:	eb ed                	jmp    c0022e2d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022e40 <SoundDevice::SoundDevice(char const*)>:
c0022e40:	83 ec 1c             	sub    esp,0x1c
c0022e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e47:	83 ec 08             	sub    esp,0x8
c0022e4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e4e:	50                   	push   eax
c0022e4f:	e8 f4 15 ff ff       	call   c0014448 <Device::Device(char const*)>
c0022e54:	83 c4 10             	add    esp,0x10
c0022e57:	ba 2c d8 02 c0       	mov    edx,0xc002d82c
c0022e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e60:	89 10                	mov    DWORD PTR [eax],edx
c0022e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e66:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e74:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022e7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e86:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e8b:	7f 19                	jg     c0022ea6 <SoundDevice::SoundDevice(char const*)+0x66>
c0022e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e95:	83 c2 54             	add    edx,0x54
c0022e98:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022ea0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ea4:	eb e0                	jmp    c0022e86 <SoundDevice::SoundDevice(char const*)+0x46>
c0022ea6:	90                   	nop
c0022ea7:	83 c4 1c             	add    esp,0x1c
c0022eaa:	c3                   	ret    
c0022eab:	90                   	nop

c0022eac <SoundDevice::~SoundDevice()>:
c0022eac:	53                   	push   ebx
c0022ead:	83 ec 18             	sub    esp,0x18
c0022eb0:	ba 2c d8 02 c0       	mov    edx,0xc002d82c
c0022eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eb9:	89 10                	mov    DWORD PTR [eax],edx
c0022ebb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022ec3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ec8:	7f 46                	jg     c0022f10 <SoundDevice::~SoundDevice()+0x64>
c0022eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ece:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ed2:	83 c2 54             	add    edx,0x54
c0022ed5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022ed9:	85 c0                	test   eax,eax
c0022edb:	74 2d                	je     c0022f0a <SoundDevice::~SoundDevice()+0x5e>
c0022edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ee1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ee5:	83 c2 54             	add    edx,0x54
c0022ee8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022eec:	85 db                	test   ebx,ebx
c0022eee:	74 1a                	je     c0022f0a <SoundDevice::~SoundDevice()+0x5e>
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	53                   	push   ebx
c0022ef4:	e8 21 fc ff ff       	call   c0022b1a <SoundChannel::~SoundChannel()>
c0022ef9:	83 c4 10             	add    esp,0x10
c0022efc:	83 ec 08             	sub    esp,0x8
c0022eff:	6a 2c                	push   0x2c
c0022f01:	53                   	push   ebx
c0022f02:	e8 50 fe fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0022f07:	83 c4 10             	add    esp,0x10
c0022f0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f0e:	eb b3                	jmp    c0022ec3 <SoundDevice::~SoundDevice()+0x17>
c0022f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f14:	83 ec 0c             	sub    esp,0xc
c0022f17:	50                   	push   eax
c0022f18:	e8 21 12 ff ff       	call   c001413e <Device::~Device()>
c0022f1d:	83 c4 10             	add    esp,0x10
c0022f20:	90                   	nop
c0022f21:	83 c4 18             	add    esp,0x18
c0022f24:	5b                   	pop    ebx
c0022f25:	c3                   	ret    

c0022f26 <SoundDevice::~SoundDevice()>:
c0022f26:	83 ec 0c             	sub    esp,0xc
c0022f29:	83 ec 0c             	sub    esp,0xc
c0022f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f30:	e8 77 ff ff ff       	call   c0022eac <SoundDevice::~SoundDevice()>
c0022f35:	83 c4 10             	add    esp,0x10
c0022f38:	83 ec 08             	sub    esp,0x8
c0022f3b:	68 e4 01 00 00       	push   0x1e4
c0022f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f44:	e8 0e fe fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0022f49:	83 c4 10             	add    esp,0x10
c0022f4c:	83 c4 0c             	add    esp,0xc
c0022f4f:	c3                   	ret    

c0022f50 <SoundDevice::getFreeChannelNum()>:
c0022f50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f54:	31 c0                	xor    eax,eax
c0022f56:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022f5e:	74 09                	je     c0022f69 <SoundDevice::getFreeChannelNum()+0x19>
c0022f60:	40                   	inc    eax
c0022f61:	83 f8 20             	cmp    eax,0x20
c0022f64:	75 f0                	jne    c0022f56 <SoundDevice::getFreeChannelNum()+0x6>
c0022f66:	83 c8 ff             	or     eax,0xffffffff
c0022f69:	c3                   	ret    

c0022f6a <SoundDevice::addChannel(SoundChannel*)>:
c0022f6a:	56                   	push   esi
c0022f6b:	53                   	push   ebx
c0022f6c:	51                   	push   ecx
c0022f6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022f75:	53                   	push   ebx
c0022f76:	e8 d5 ff ff ff       	call   c0022f50 <SoundDevice::getFreeChannelNum()>
c0022f7b:	5a                   	pop    edx
c0022f7c:	83 f8 ff             	cmp    eax,0xffffffff
c0022f7f:	74 51                	je     c0022fd2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f81:	85 f6                	test   esi,esi
c0022f83:	74 4d                	je     c0022fd2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f85:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022f8c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022f93:	75 30                	jne    c0022fc5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022f95:	83 ec 0c             	sub    esp,0xc
c0022f98:	56                   	push   esi
c0022f99:	e8 42 fd ff ff       	call   c0022ce0 <SoundChannel::getSampleRate()>
c0022f9e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022fa4:	89 34 24             	mov    DWORD PTR [esp],esi
c0022fa7:	e8 3c fd ff ff       	call   c0022ce8 <SoundChannel::getBits()>
c0022fac:	83 c4 0c             	add    esp,0xc
c0022faf:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022fb5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022fb7:	50                   	push   eax
c0022fb8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022fbe:	53                   	push   ebx
c0022fbf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022fc2:	83 c4 10             	add    esp,0x10
c0022fc5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022fcb:	b8 01 00 00 00       	mov    eax,0x1
c0022fd0:	eb 03                	jmp    c0022fd5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022fd2:	83 c8 ff             	or     eax,0xffffffff
c0022fd5:	5a                   	pop    edx
c0022fd6:	5b                   	pop    ebx
c0022fd7:	5e                   	pop    esi
c0022fd8:	c3                   	ret    
c0022fd9:	90                   	nop

c0022fda <SoundDevice::removeChannel(int)>:
c0022fda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe2:	83 fa 1f             	cmp    edx,0x1f
c0022fe5:	77 23                	ja     c002300a <SoundDevice::removeChannel(int)+0x30>
c0022fe7:	8d 14 90             	lea    edx,[eax+edx*4]
c0022fea:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022ff1:	74 17                	je     c002300a <SoundDevice::removeChannel(int)+0x30>
c0022ff3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022ffd:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0023003:	75 05                	jne    c002300a <SoundDevice::removeChannel(int)+0x30>
c0023005:	8b 00                	mov    eax,DWORD PTR [eax]
c0023007:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002300a:	c3                   	ret    
c002300b:	90                   	nop

c002300c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002300c:	57                   	push   edi
c002300d:	56                   	push   esi
c002300e:	53                   	push   ebx
c002300f:	31 db                	xor    ebx,ebx
c0023011:	83 ec 10             	sub    esp,0x10
c0023014:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0023018:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002301c:	0f 8d cb 00 00 00    	jge    c00230ed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0023022:	83 ec 0c             	sub    esp,0xc
c0023025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023029:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002302c:	e8 be 61 00 00       	call   c00291ef <__extendsfdf2>
c0023031:	83 c4 10             	add    esp,0x10
c0023034:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023038:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002303c:	68 00 00 f0 3f       	push   0x3ff00000
c0023041:	6a 00                	push   0x0
c0023043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023047:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002304b:	e8 2b 51 00 00       	call   c002817b <__adddf3>
c0023050:	83 c4 10             	add    esp,0x10
c0023053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002305b:	68 00 00 e0 3f       	push   0x3fe00000
c0023060:	6a 00                	push   0x0
c0023062:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023066:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002306a:	e8 89 57 00 00       	call   c00287f8 <__muldf3>
c002306f:	83 c4 10             	add    esp,0x10
c0023072:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023076:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002307a:	68 00 00 60 40       	push   0x40600000
c002307f:	6a 00                	push   0x0
c0023081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023089:	e8 6a 57 00 00       	call   c00287f8 <__muldf3>
c002308e:	59                   	pop    ecx
c002308f:	5f                   	pop    edi
c0023090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002309c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230a0:	e8 26 60 00 00       	call   c00290cb <__truncdfsf2>
c00230a5:	5a                   	pop    edx
c00230a6:	89 c7                	mov    edi,eax
c00230a8:	59                   	pop    ecx
c00230a9:	68 00 00 fe 42       	push   0x42fe0000
c00230ae:	50                   	push   eax
c00230af:	e8 c1 50 00 00       	call   c0028175 <__gesf2>
c00230b4:	83 c4 10             	add    esp,0x10
c00230b7:	85 c0                	test   eax,eax
c00230b9:	78 06                	js     c00230c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00230bb:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00230bf:	eb 26                	jmp    c00230e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00230c1:	50                   	push   eax
c00230c2:	50                   	push   eax
c00230c3:	6a 00                	push   0x0
c00230c5:	57                   	push   edi
c00230c6:	e8 ae 50 00 00       	call   c0028179 <__lesf2>
c00230cb:	83 c4 10             	add    esp,0x10
c00230ce:	85 c0                	test   eax,eax
c00230d0:	7f 06                	jg     c00230d8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00230d2:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00230d6:	eb 0f                	jmp    c00230e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	57                   	push   edi
c00230dc:	e8 ab 61 00 00       	call   c002928c <lrintf>
c00230e1:	83 c4 10             	add    esp,0x10
c00230e4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00230e7:	43                   	inc    ebx
c00230e8:	e9 2b ff ff ff       	jmp    c0023018 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00230ed:	83 c4 10             	add    esp,0x10
c00230f0:	5b                   	pop    ebx
c00230f1:	5e                   	pop    esi
c00230f2:	5f                   	pop    edi
c00230f3:	c3                   	ret    

c00230f4 <SoundDevice::getAudio(int, float*, float*)>:
c00230f4:	55                   	push   ebp
c00230f5:	57                   	push   edi
c00230f6:	56                   	push   esi
c00230f7:	53                   	push   ebx
c00230f8:	31 db                	xor    ebx,ebx
c00230fa:	83 ec 20             	sub    esp,0x20
c00230fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023101:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023105:	c1 e0 02             	shl    eax,0x2
c0023108:	50                   	push   eax
c0023109:	6a 00                	push   0x0
c002310b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002310f:	e8 3c d6 fd ff       	call   c0000750 <memset>
c0023114:	83 c4 10             	add    esp,0x10
c0023117:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002311b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0023122:	85 c0                	test   eax,eax
c0023124:	0f 84 d7 00 00 00    	je     c0023201 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002312a:	83 ec 0c             	sub    esp,0xc
c002312d:	50                   	push   eax
c002312e:	e8 a5 fb ff ff       	call   c0022cd8 <SoundChannel::paused()>
c0023133:	83 c4 10             	add    esp,0x10
c0023136:	84 c0                	test   al,al
c0023138:	0f 85 c3 00 00 00    	jne    c0023201 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002313e:	83 ec 0c             	sub    esp,0xc
c0023141:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023148:	e8 19 fa ff ff       	call   c0022b66 <SoundChannel::getVolume()>
c002314d:	83 c4 10             	add    esp,0x10
c0023150:	85 c0                	test   eax,eax
c0023152:	0f 84 a9 00 00 00    	je     c0023201 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023162:	e8 ff f9 ff ff       	call   c0022b66 <SoundChannel::getVolume()>
c0023167:	83 ec 0c             	sub    esp,0xc
c002316a:	50                   	push   eax
c002316b:	e8 af 4d 00 00       	call   c0027f1f <__floatsisf>
c0023170:	59                   	pop    ecx
c0023171:	5d                   	pop    ebp
c0023172:	31 ed                	xor    ebp,ebp
c0023174:	68 00 00 c8 42       	push   0x42c80000
c0023179:	50                   	push   eax
c002317a:	e8 75 4b 00 00       	call   c0027cf4 <__divsf3>
c002317f:	83 c4 10             	add    esp,0x10
c0023182:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023186:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002318a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0023190:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0023194:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002319b:	e8 60 fb ff ff       	call   c0022d00 <SoundChannel::unbuffer(float*, int, int)>
c00231a0:	83 c4 20             	add    esp,0x20
c00231a3:	89 c1                	mov    ecx,eax
c00231a5:	39 cd                	cmp    ebp,ecx
c00231a7:	7d 52                	jge    c00231fb <SoundDevice::getAudio(int, float*, float*)+0x107>
c00231a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00231ad:	50                   	push   eax
c00231ae:	50                   	push   eax
c00231af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00231b3:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00231b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00231ba:	e8 72 49 00 00       	call   c0027b31 <__mulsf3>
c00231bf:	5a                   	pop    edx
c00231c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00231c4:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00231ca:	e8 50 4d 00 00       	call   c0027f1f <__floatsisf>
c00231cf:	59                   	pop    ecx
c00231d0:	5a                   	pop    edx
c00231d1:	50                   	push   eax
c00231d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231d6:	e8 19 4b 00 00       	call   c0027cf4 <__divsf3>
c00231db:	59                   	pop    ecx
c00231dc:	5a                   	pop    edx
c00231dd:	50                   	push   eax
c00231de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231e2:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00231e5:	e8 24 46 00 00       	call   c002780e <__addsf3>
c00231ea:	83 c4 10             	add    esp,0x10
c00231ed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00231f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00231f5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00231f8:	45                   	inc    ebp
c00231f9:	eb aa                	jmp    c00231a5 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00231fb:	39 cf                	cmp    edi,ecx
c00231fd:	7e 02                	jle    c0023201 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231ff:	89 cf                	mov    edi,ecx
c0023201:	43                   	inc    ebx
c0023202:	83 fb 20             	cmp    ebx,0x20
c0023205:	0f 85 10 ff ff ff    	jne    c002311b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002320b:	83 c4 1c             	add    esp,0x1c
c002320e:	89 f8                	mov    eax,edi
c0023210:	5b                   	pop    ebx
c0023211:	5e                   	pop    esi
c0023212:	5f                   	pop    edi
c0023213:	5d                   	pop    ebp
c0023214:	c3                   	ret    
c0023215:	90                   	nop

c0023216 <PCI::open(int, int, void*)>:
c0023216:	83 ec 18             	sub    esp,0x18
c0023219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002321d:	8b 10                	mov    edx,DWORD PTR [eax]
c002321f:	50                   	push   eax
c0023220:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0023223:	31 c0                	xor    eax,eax
c0023225:	83 c4 1c             	add    esp,0x1c
c0023228:	c3                   	ret    
c0023229:	90                   	nop

c002322a <PCI::close(int, int, void*)>:
c002322a:	31 c0                	xor    eax,eax
c002322c:	c3                   	ret    
c002322d:	90                   	nop

c002322e <PCI::PCI()>:
c002322e:	83 ec 0c             	sub    esp,0xc
c0023231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023235:	83 ec 08             	sub    esp,0x8
c0023238:	68 5c d8 02 c0       	push   0xc002d85c
c002323d:	50                   	push   eax
c002323e:	e8 95 08 ff ff       	call   c0013ad8 <Bus::Bus(char const*)>
c0023243:	83 c4 10             	add    esp,0x10
c0023246:	ba 10 d9 02 c0       	mov    edx,0xc002d910
c002324b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002324f:	89 10                	mov    DWORD PTR [eax],edx
c0023251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023255:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002325b:	0f b6 d0             	movzx  edx,al
c002325e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023262:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023273:	0f b6 d0             	movzx  edx,al
c0023276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002327f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023283:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023289:	8d 50 01             	lea    edx,[eax+0x1]
c002328c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023290:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023296:	0f b6 d0             	movzx  edx,al
c0023299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002329d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00232a1:	83 c9 c0             	or     ecx,0xffffffc0
c00232a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00232a8:	90                   	nop
c00232a9:	83 c4 0c             	add    esp,0xc
c00232ac:	c3                   	ret    
c00232ad:	90                   	nop

c00232ae <PCI::readBAR8(unsigned int, int)>:
c00232ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232b6:	f6 c2 01             	test   dl,0x1
c00232b9:	74 07                	je     c00232c2 <PCI::readBAR8(unsigned int, int)+0x14>
c00232bb:	83 e2 fc             	and    edx,0xfffffffc
c00232be:	01 c2                	add    edx,eax
c00232c0:	ec                   	in     al,dx
c00232c1:	c3                   	ret    
c00232c2:	83 e2 f0             	and    edx,0xfffffff0
c00232c5:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00232c8:	c3                   	ret    
c00232c9:	90                   	nop

c00232ca <PCI::readBAR16(unsigned int, int)>:
c00232ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232d2:	f6 c2 01             	test   dl,0x1
c00232d5:	74 08                	je     c00232df <PCI::readBAR16(unsigned int, int)+0x15>
c00232d7:	83 e2 fc             	and    edx,0xfffffffc
c00232da:	01 c2                	add    edx,eax
c00232dc:	66 ed                	in     ax,dx
c00232de:	c3                   	ret    
c00232df:	83 e2 f0             	and    edx,0xfffffff0
c00232e2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00232e6:	c3                   	ret    
c00232e7:	90                   	nop

c00232e8 <PCI::readBAR32(unsigned int, int)>:
c00232e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232f0:	f6 c2 01             	test   dl,0x1
c00232f3:	74 07                	je     c00232fc <PCI::readBAR32(unsigned int, int)+0x14>
c00232f5:	83 e2 fc             	and    edx,0xfffffffc
c00232f8:	01 c2                	add    edx,eax
c00232fa:	ed                   	in     eax,dx
c00232fb:	c3                   	ret    
c00232fc:	83 e2 f0             	and    edx,0xfffffff0
c00232ff:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023302:	c3                   	ret    
c0023303:	90                   	nop

c0023304 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002330c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023310:	f6 c2 01             	test   dl,0x1
c0023313:	74 07                	je     c002331c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023315:	83 e2 fc             	and    edx,0xfffffffc
c0023318:	01 ca                	add    edx,ecx
c002331a:	ee                   	out    dx,al
c002331b:	c3                   	ret    
c002331c:	83 e2 f0             	and    edx,0xfffffff0
c002331f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023322:	c3                   	ret    
c0023323:	90                   	nop

c0023324 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002332c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023330:	f6 c2 01             	test   dl,0x1
c0023333:	74 08                	je     c002333d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023335:	83 e2 fc             	and    edx,0xfffffffc
c0023338:	01 ca                	add    edx,ecx
c002333a:	66 ef                	out    dx,ax
c002333c:	c3                   	ret    
c002333d:	83 e2 f0             	and    edx,0xfffffff0
c0023340:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023344:	c3                   	ret    
c0023345:	90                   	nop

c0023346 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002334e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023352:	f6 c2 01             	test   dl,0x1
c0023355:	74 07                	je     c002335e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023357:	83 e2 fc             	and    edx,0xfffffffc
c002335a:	01 ca                	add    edx,ecx
c002335c:	ef                   	out    dx,eax
c002335d:	c3                   	ret    
c002335e:	83 e2 f0             	and    edx,0xfffffff0
c0023361:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023364:	c3                   	ret    
c0023365:	90                   	nop

c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023366:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002336a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002336f:	89 ca                	mov    edx,ecx
c0023371:	c1 e0 10             	shl    eax,0x10
c0023374:	81 e2 fc 00 00 00    	and    edx,0xfc
c002337a:	09 d0                	or     eax,edx
c002337c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023381:	c1 e2 08             	shl    edx,0x8
c0023384:	09 d0                	or     eax,edx
c0023386:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002338b:	c1 e2 0b             	shl    edx,0xb
c002338e:	09 d0                	or     eax,edx
c0023390:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023395:	0d 00 00 00 80       	or     eax,0x80000000
c002339a:	ef                   	out    dx,eax
c002339b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233a0:	ed                   	in     eax,dx
c00233a1:	83 e1 02             	and    ecx,0x2
c00233a4:	0f b6 c9             	movzx  ecx,cl
c00233a7:	c1 e1 03             	shl    ecx,0x3
c00233aa:	d3 e8                	shr    eax,cl
c00233ac:	c3                   	ret    
c00233ad:	90                   	nop

c00233ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00233ae:	6a 00                	push   0x0
c00233b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233b5:	50                   	push   eax
c00233b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233bb:	50                   	push   eax
c00233bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233c1:	50                   	push   eax
c00233c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233c6:	e8 9b ff ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233cb:	83 c4 14             	add    esp,0x14
c00233ce:	c3                   	ret    
c00233cf:	90                   	nop

c00233d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00233d0:	6a 0e                	push   0xe
c00233d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233d7:	50                   	push   eax
c00233d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233dd:	50                   	push   eax
c00233de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233e3:	50                   	push   eax
c00233e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233e8:	e8 79 ff ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233ed:	83 c4 14             	add    esp,0x14
c00233f0:	0f b6 c0             	movzx  eax,al
c00233f3:	c3                   	ret    

c00233f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00233f4:	55                   	push   ebp
c00233f5:	57                   	push   edi
c00233f6:	56                   	push   esi
c00233f7:	53                   	push   ebx
c00233f8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00233fd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023402:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023407:	6a 0a                	push   0xa
c0023409:	56                   	push   esi
c002340a:	55                   	push   ebp
c002340b:	57                   	push   edi
c002340c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023410:	e8 51 ff ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023415:	6a 0a                	push   0xa
c0023417:	89 c3                	mov    ebx,eax
c0023419:	56                   	push   esi
c002341a:	0f b6 db             	movzx  ebx,bl
c002341d:	55                   	push   ebp
c002341e:	57                   	push   edi
c002341f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023423:	e8 3e ff ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023428:	83 c4 28             	add    esp,0x28
c002342b:	25 00 ff 00 00       	and    eax,0xff00
c0023430:	09 d8                	or     eax,ebx
c0023432:	5b                   	pop    ebx
c0023433:	5e                   	pop    esi
c0023434:	5f                   	pop    edi
c0023435:	5d                   	pop    ebp
c0023436:	c3                   	ret    
c0023437:	90                   	nop

c0023438 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023438:	6a 08                	push   0x8
c002343a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002343f:	50                   	push   eax
c0023440:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023445:	50                   	push   eax
c0023446:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002344b:	50                   	push   eax
c002344c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023450:	e8 11 ff ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023455:	83 c4 14             	add    esp,0x14
c0023458:	0f b6 c4             	movzx  eax,ah
c002345b:	c3                   	ret    

c002345c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002345c:	6a 08                	push   0x8
c002345e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023463:	50                   	push   eax
c0023464:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023469:	50                   	push   eax
c002346a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002346f:	50                   	push   eax
c0023470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023474:	e8 ed fe ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023479:	83 c4 14             	add    esp,0x14
c002347c:	c3                   	ret    
c002347d:	90                   	nop

c002347e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002347e:	6a 3c                	push   0x3c
c0023480:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023485:	50                   	push   eax
c0023486:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002348b:	50                   	push   eax
c002348c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023491:	50                   	push   eax
c0023492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023496:	e8 cb fe ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002349b:	83 c4 14             	add    esp,0x14
c002349e:	c3                   	ret    
c002349f:	90                   	nop

c00234a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00234a0:	6a 18                	push   0x18
c00234a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234a7:	50                   	push   eax
c00234a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234ad:	50                   	push   eax
c00234ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234b3:	50                   	push   eax
c00234b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234b8:	e8 a9 fe ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234bd:	83 c4 14             	add    esp,0x14
c00234c0:	0f b6 c4             	movzx  eax,ah
c00234c3:	c3                   	ret    

c00234c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00234c4:	55                   	push   ebp
c00234c5:	57                   	push   edi
c00234c6:	56                   	push   esi
c00234c7:	53                   	push   ebx
c00234c8:	50                   	push   eax
c00234c9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00234cd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00234d2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00234d7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00234dc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00234e3:	8d 43 12             	lea    eax,[ebx+0x12]
c00234e6:	83 c3 10             	add    ebx,0x10
c00234e9:	0f b6 c0             	movzx  eax,al
c00234ec:	0f b6 db             	movzx  ebx,bl
c00234ef:	50                   	push   eax
c00234f0:	51                   	push   ecx
c00234f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00234f5:	57                   	push   edi
c00234f6:	55                   	push   ebp
c00234f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00234fb:	e8 66 fe ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023500:	53                   	push   ebx
c0023501:	89 c6                	mov    esi,eax
c0023503:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023507:	c1 e6 10             	shl    esi,0x10
c002350a:	51                   	push   ecx
c002350b:	57                   	push   edi
c002350c:	55                   	push   ebp
c002350d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023511:	e8 50 fe ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023516:	83 c4 2c             	add    esp,0x2c
c0023519:	0f b7 c0             	movzx  eax,ax
c002351c:	5b                   	pop    ebx
c002351d:	09 f0                	or     eax,esi
c002351f:	5e                   	pop    esi
c0023520:	5f                   	pop    edi
c0023521:	5d                   	pop    ebp
c0023522:	c3                   	ret    
c0023523:	90                   	nop

c0023524 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023524:	53                   	push   ebx
c0023525:	ba f8 0c 00 00       	mov    edx,0xcf8
c002352a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002352f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023533:	c1 e1 10             	shl    ecx,0x10
c0023536:	25 fc 00 00 00       	and    eax,0xfc
c002353b:	09 c1                	or     ecx,eax
c002353d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023542:	c1 e0 08             	shl    eax,0x8
c0023545:	09 c1                	or     ecx,eax
c0023547:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002354c:	c1 e0 0b             	shl    eax,0xb
c002354f:	09 c1                	or     ecx,eax
c0023551:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023557:	89 c8                	mov    eax,ecx
c0023559:	ef                   	out    dx,eax
c002355a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002355f:	ed                   	in     eax,dx
c0023560:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023565:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002356a:	74 0a                	je     c0023576 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002356c:	0f b7 d8             	movzx  ebx,ax
c002356f:	89 d0                	mov    eax,edx
c0023571:	c1 e0 10             	shl    eax,0x10
c0023574:	eb 05                	jmp    c002357b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023576:	66 31 c0             	xor    ax,ax
c0023579:	89 d3                	mov    ebx,edx
c002357b:	09 c3                	or     ebx,eax
c002357d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023582:	89 c8                	mov    eax,ecx
c0023584:	ef                   	out    dx,eax
c0023585:	ba fc 0c 00 00       	mov    edx,0xcfc
c002358a:	89 d8                	mov    eax,ebx
c002358c:	ef                   	out    dx,eax
c002358d:	5b                   	pop    ebx
c002358e:	c3                   	ret    
c002358f:	90                   	nop

c0023590 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0023590:	55                   	push   ebp
c0023591:	57                   	push   edi
c0023592:	56                   	push   esi
c0023593:	53                   	push   ebx
c0023594:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002359a:	80 3d 2c 36 03 c0 00 	cmp    BYTE PTR ds:0xc003362c,0x0
c00235a1:	0f 85 96 00 00 00    	jne    c002363d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00235a7:	83 ec 0c             	sub    esp,0xc
c00235aa:	68 14 01 00 00       	push   0x114
c00235af:	e8 d8 c2 fe ff       	call   c000f88c <malloc>
c00235b4:	83 c4 0c             	add    esp,0xc
c00235b7:	89 c3                	mov    ebx,eax
c00235b9:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c00235bf:	68 64 d8 02 c0       	push   0xc002d864
c00235c4:	50                   	push   eax
c00235c5:	e8 cc fd fe ff       	call   c0013396 <File::File(char const*, Process*)>
c00235ca:	5a                   	pop    edx
c00235cb:	59                   	pop    ecx
c00235cc:	6a 01                	push   0x1
c00235ce:	53                   	push   ebx
c00235cf:	e8 26 fe fe ff       	call   c00133fa <File::open(FileOpenMode)>
c00235d4:	83 c4 0c             	add    esp,0xc
c00235d7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00235db:	50                   	push   eax
c00235dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00235e0:	50                   	push   eax
c00235e1:	53                   	push   ebx
c00235e2:	e8 bf 00 ff ff       	call   c00136a6 <File::stat(unsigned long long*, bool*)>
c00235e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00235eb:	40                   	inc    eax
c00235ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00235ef:	e8 98 c2 fe ff       	call   c000f88c <malloc>
c00235f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00235f8:	a3 28 36 03 c0       	mov    ds:0xc0033628,eax
c00235fd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023601:	5e                   	pop    esi
c0023602:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023604:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023608:	51                   	push   ecx
c0023609:	50                   	push   eax
c002360a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002360e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023612:	53                   	push   ebx
c0023613:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023616:	83 c4 14             	add    esp,0x14
c0023619:	53                   	push   ebx
c002361a:	e8 39 fe fe ff       	call   c0013458 <File::close()>
c002361f:	5f                   	pop    edi
c0023620:	5d                   	pop    ebp
c0023621:	ff 35 28 36 03 c0    	push   DWORD PTR ds:0xc0033628
c0023627:	68 7d d8 02 c0       	push   0xc002d87d
c002362c:	e8 06 f8 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023635:	83 c4 10             	add    esp,0x10
c0023638:	a3 24 36 03 c0       	mov    ds:0xc0033624,eax
c002363d:	a1 24 36 03 c0       	mov    eax,ds:0xc0033624
c0023642:	8b 1d 28 36 03 c0    	mov    ebx,DWORD PTR ds:0xc0033628
c0023648:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002364c:	66 8b bc 24 42 01 00 00 	mov    di,WORD PTR [esp+0x142]
c0023654:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002365b:	31 f6                	xor    esi,esi
c002365d:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023661:	31 d2                	xor    edx,edx
c0023663:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002366a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002366e:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0023672:	0f 8e 08 01 00 00    	jle    c0023780 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f0>
c0023678:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002367b:	d4 40                	aam    0x40
c002367d:	d5 39                	aad    0x39
c002367f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023683:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c0023687:	d4 40                	aam    0x40
c0023689:	d5 39                	aad    0x39
c002368b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002368f:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c0023693:	d4 40                	aam    0x40
c0023695:	d5 39                	aad    0x39
c0023697:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002369b:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002369f:	d4 40                	aam    0x40
c00236a1:	d5 39                	aad    0x39
c00236a3:	8a 4c 33 06          	mov    cl,BYTE PTR [ebx+esi*1+0x6]
c00236a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00236ab:	80 f9 58             	cmp    cl,0x58
c00236ae:	74 47                	je     c00236f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x167>
c00236b0:	88 c8                	mov    al,cl
c00236b2:	d4 40                	aam    0x40
c00236b4:	d5 39                	aad    0x39
c00236b6:	83 e8 30             	sub    eax,0x30
c00236b9:	0f b6 e8             	movzx  ebp,al
c00236bc:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c00236c0:	c1 e5 04             	shl    ebp,0x4
c00236c3:	d4 40                	aam    0x40
c00236c5:	d5 39                	aad    0x39
c00236c7:	8d 50 d0             	lea    edx,[eax-0x30]
c00236ca:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c00236ce:	0f b6 d2             	movzx  edx,dl
c00236d1:	09 ea                	or     edx,ebp
c00236d3:	c1 e2 04             	shl    edx,0x4
c00236d6:	d4 40                	aam    0x40
c00236d8:	d5 39                	aad    0x39
c00236da:	83 e8 30             	sub    eax,0x30
c00236dd:	0f b6 e8             	movzx  ebp,al
c00236e0:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c00236e4:	09 ea                	or     edx,ebp
c00236e6:	c1 e2 04             	shl    edx,0x4
c00236e9:	89 d5                	mov    ebp,edx
c00236eb:	d4 40                	aam    0x40
c00236ed:	d5 39                	aad    0x39
c00236ef:	8d 50 d0             	lea    edx,[eax-0x30]
c00236f2:	0f b6 d2             	movzx  edx,dl
c00236f5:	09 ea                	or     edx,ebp
c00236f7:	83 c6 0b             	add    esi,0xb
c00236fa:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00236fe:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c0023701:	3c 0a                	cmp    al,0xa
c0023703:	74 0b                	je     c0023710 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x180>
c0023705:	45                   	inc    ebp
c0023706:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002370a:	75 15                	jne    c0023721 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x191>
c002370c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0023710:	3c 0a                	cmp    al,0xa
c0023712:	0f 94 c0             	sete   al
c0023715:	0f b6 c0             	movzx  eax,al
c0023718:	01 c6                	add    esi,eax
c002371a:	80 f9 58             	cmp    cl,0x58
c002371d:	75 0c                	jne    c002372b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x19b>
c002371f:	eb 13                	jmp    c0023734 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a4>
c0023721:	46                   	inc    esi
c0023722:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023725:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023729:	eb d3                	jmp    c00236fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x16e>
c002372b:	66 39 d7             	cmp    di,dx
c002372e:	0f 85 3a ff ff ff    	jne    c002366e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c0023734:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023738:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002373c:	c1 e1 04             	shl    ecx,0x4
c002373f:	83 e8 30             	sub    eax,0x30
c0023742:	09 c8                	or     eax,ecx
c0023744:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023748:	0f 85 20 ff ff ff    	jne    c002366e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c002374e:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023752:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023756:	c1 e1 04             	shl    ecx,0x4
c0023759:	83 e8 30             	sub    eax,0x30
c002375c:	09 c8                	or     eax,ecx
c002375e:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023762:	0f 85 06 ff ff ff    	jne    c002366e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xde>
c0023768:	50                   	push   eax
c0023769:	50                   	push   eax
c002376a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002376e:	50                   	push   eax
c002376f:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023776:	e8 91 d0 fd ff       	call   c000080c <strcpy>
c002377b:	83 c4 10             	add    esp,0x10
c002377e:	eb 15                	jmp    c0023795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c0023780:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023787:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023792:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023795:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002379c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00237a2:	5b                   	pop    ebx
c00237a3:	5e                   	pop    esi
c00237a4:	5f                   	pop    edi
c00237a5:	5d                   	pop    ebp
c00237a6:	c3                   	ret    
c00237a7:	90                   	nop

c00237a8 <PCI::checkBus(unsigned char)>:
c00237a8:	56                   	push   esi
c00237a9:	53                   	push   ebx
c00237aa:	31 db                	xor    ebx,ebx
c00237ac:	51                   	push   ecx
c00237ad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237b2:	52                   	push   edx
c00237b3:	53                   	push   ebx
c00237b4:	43                   	inc    ebx
c00237b5:	56                   	push   esi
c00237b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237ba:	e8 41 03 00 00       	call   c0023b00 <PCI::checkDevice(unsigned char, unsigned char)>
c00237bf:	83 c4 10             	add    esp,0x10
c00237c2:	83 fb 20             	cmp    ebx,0x20
c00237c5:	75 eb                	jne    c00237b2 <PCI::checkBus(unsigned char)+0xa>
c00237c7:	58                   	pop    eax
c00237c8:	5b                   	pop    ebx
c00237c9:	5e                   	pop    esi
c00237ca:	c3                   	ret    
c00237cb:	90                   	nop

c00237cc <PCI::foundDevice(PCIDeviceInfo)>:
c00237cc:	55                   	push   ebp
c00237cd:	57                   	push   edi
c00237ce:	56                   	push   esi
c00237cf:	53                   	push   ebx
c00237d0:	83 ec 1c             	sub    esp,0x1c
c00237d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237d7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00237dd:	0f 84 68 01 00 00    	je     c002394b <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00237e3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00237e7:	66 81 f9 06 04       	cmp    cx,0x406
c00237ec:	75 2c                	jne    c002381a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00237ee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00237f3:	50                   	push   eax
c00237f4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00237f9:	50                   	push   eax
c00237fa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00237ff:	50                   	push   eax
c0023800:	56                   	push   esi
c0023801:	e8 9a fc ff ff       	call   c00234a0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023806:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002380a:	0f b6 c0             	movzx  eax,al
c002380d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023811:	83 c4 2c             	add    esp,0x2c
c0023814:	5b                   	pop    ebx
c0023815:	5e                   	pop    esi
c0023816:	5f                   	pop    edi
c0023817:	5d                   	pop    ebp
c0023818:	eb 8e                	jmp    c00237a8 <PCI::checkBus(unsigned char)>
c002381a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002381e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023824:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023828:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002382c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023830:	88 d3                	mov    bl,dl
c0023832:	85 c0                	test   eax,eax
c0023834:	74 33                	je     c0023869 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023836:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023839:	85 d2                	test   edx,edx
c002383b:	74 28                	je     c0023865 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002383d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023843:	31 ef                	xor    edi,ebp
c0023845:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002384b:	75 18                	jne    c0023865 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002384d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023851:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023857:	75 0c                	jne    c0023865 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023859:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002385f:	0f 84 e6 00 00 00    	je     c002394b <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023865:	8b 00                	mov    eax,DWORD PTR [eax]
c0023867:	eb c9                	jmp    c0023832 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023869:	66 81 f9 01 06       	cmp    cx,0x601
c002386e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023872:	75 19                	jne    c002388d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023874:	83 ec 0c             	sub    esp,0xc
c0023877:	68 64 01 00 00       	push   0x164
c002387c:	e8 0b c0 fe ff       	call   c000f88c <malloc>
c0023881:	89 c5                	mov    ebp,eax
c0023883:	89 04 24             	mov    DWORD PTR [esp],eax
c0023886:	e8 ab 0f 00 00       	call   c0024836 <SATABus::SATABus()>
c002388b:	eb 1e                	jmp    c00238ab <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002388d:	66 81 f9 01 01       	cmp    cx,0x101
c0023892:	75 60                	jne    c00238f4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023894:	83 ec 0c             	sub    esp,0xc
c0023897:	68 70 02 00 00       	push   0x270
c002389c:	e8 eb bf fe ff       	call   c000f88c <malloc>
c00238a1:	89 c5                	mov    ebp,eax
c00238a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00238a6:	e8 19 03 00 00       	call   c0023bc4 <IDE::IDE()>
c00238ab:	58                   	pop    eax
c00238ac:	5a                   	pop    edx
c00238ad:	55                   	push   ebp
c00238ae:	56                   	push   esi
c00238af:	e8 a4 09 ff ff       	call   c0014258 <Device::addChild(Device*)>
c00238b4:	83 ec 1c             	sub    esp,0x1c
c00238b7:	b9 09 00 00 00       	mov    ecx,0x9
c00238bc:	fc                   	cld    
c00238bd:	89 e7                	mov    edi,esp
c00238bf:	89 de                	mov    esi,ebx
c00238c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00238c3:	55                   	push   ebp
c00238c4:	e8 ad 08 ff ff       	call   c0014176 <Device::preOpenPCI(PCIDeviceInfo)>
c00238c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00238cc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00238d0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00238d8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00238e0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00238e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00238eb:	83 c4 4c             	add    esp,0x4c
c00238ee:	5b                   	pop    ebx
c00238ef:	5e                   	pop    esi
c00238f0:	5f                   	pop    edi
c00238f1:	5d                   	pop    ebp
c00238f2:	ff e0                	jmp    eax
c00238f4:	50                   	push   eax
c00238f5:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00238fa:	50                   	push   eax
c00238fb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023900:	50                   	push   eax
c0023901:	68 8f d8 02 c0       	push   0xc002d88f
c0023906:	e8 2c f5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002390b:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023912:	e8 75 bf fe ff       	call   c000f88c <malloc>
c0023917:	5a                   	pop    edx
c0023918:	89 c5                	mov    ebp,eax
c002391a:	59                   	pop    ecx
c002391b:	68 ab d8 02 c0       	push   0xc002d8ab
c0023920:	50                   	push   eax
c0023921:	e8 28 0c ff ff       	call   c001454e <DriverlessDevice::DriverlessDevice(char const*)>
c0023926:	5f                   	pop    edi
c0023927:	58                   	pop    eax
c0023928:	55                   	push   ebp
c0023929:	56                   	push   esi
c002392a:	e8 29 09 ff ff       	call   c0014258 <Device::addChild(Device*)>
c002392f:	b9 09 00 00 00       	mov    ecx,0x9
c0023934:	fc                   	cld    
c0023935:	89 df                	mov    edi,ebx
c0023937:	89 de                	mov    esi,ebx
c0023939:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002393b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002393f:	83 c4 2c             	add    esp,0x2c
c0023942:	5b                   	pop    ebx
c0023943:	5e                   	pop    esi
c0023944:	5f                   	pop    edi
c0023945:	5d                   	pop    ebp
c0023946:	e9 2b 08 ff ff       	jmp    c0014176 <Device::preOpenPCI(PCIDeviceInfo)>
c002394b:	83 c4 1c             	add    esp,0x1c
c002394e:	5b                   	pop    ebx
c002394f:	5e                   	pop    esi
c0023950:	5f                   	pop    edi
c0023951:	5d                   	pop    ebp
c0023952:	c3                   	ret    
c0023953:	90                   	nop

c0023954 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023954:	55                   	push   ebp
c0023955:	57                   	push   edi
c0023956:	56                   	push   esi
c0023957:	53                   	push   ebx
c0023958:	83 ec 5c             	sub    esp,0x5c
c002395b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002395f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023963:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023967:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002396c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023970:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023974:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002397d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023982:	6a 0c                	push   0xc
c0023984:	55                   	push   ebp
c0023985:	53                   	push   ebx
c0023986:	57                   	push   edi
c0023987:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002398e:	e8 d3 f9 ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023993:	55                   	push   ebp
c0023994:	53                   	push   ebx
c0023995:	57                   	push   edi
c0023996:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002399d:	e8 52 fa ff ff       	call   c00233f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00239a2:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00239a7:	83 c4 24             	add    esp,0x24
c00239aa:	55                   	push   ebp
c00239ab:	53                   	push   ebx
c00239ac:	57                   	push   edi
c00239ad:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00239b1:	e8 c8 fa ff ff       	call   c002347e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00239b6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00239ba:	6a 3c                	push   0x3c
c00239bc:	55                   	push   ebp
c00239bd:	53                   	push   ebx
c00239be:	57                   	push   edi
c00239bf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00239c6:	e8 9b f9 ff ff       	call   c0023366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00239cb:	0f b6 c4             	movzx  eax,ah
c00239ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00239d2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00239d6:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00239da:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00239df:	83 c4 24             	add    esp,0x24
c00239e2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00239e8:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00239ef:	74 6c                	je     c0023a5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00239f1:	31 f6                	xor    esi,esi
c00239f3:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c00239f9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00239ff:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0023a05:	7e 56                	jle    c0023a5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023a07:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023a0a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023a11:	39 cb                	cmp    ebx,ecx
c0023a13:	75 45                	jne    c0023a5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a15:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023a1c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023a20:	75 38                	jne    c0023a5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a22:	83 ec 0c             	sub    esp,0xc
c0023a25:	68 c5 d8 02 c0       	push   0xc002d8c5
c0023a2a:	e8 08 f4 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023a2f:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023a35:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023a3b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023a43:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023a47:	52                   	push   edx
c0023a48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023a4c:	53                   	push   ebx
c0023a4d:	68 ea d8 02 c0       	push   0xc002d8ea
c0023a52:	e8 e0 f3 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0023a57:	83 c4 20             	add    esp,0x20
c0023a5a:	46                   	inc    esi
c0023a5b:	eb 96                	jmp    c00239f3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a5d:	31 d2                	xor    edx,edx
c0023a5f:	83 ec 0c             	sub    esp,0xc
c0023a62:	55                   	push   ebp
c0023a63:	53                   	push   ebx
c0023a64:	57                   	push   edi
c0023a65:	52                   	push   edx
c0023a66:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023a6a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023a71:	e8 4e fa ff ff       	call   c00234c4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023a76:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023a7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023a7e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023a82:	42                   	inc    edx
c0023a83:	83 c4 20             	add    esp,0x20
c0023a86:	83 fa 06             	cmp    edx,0x6
c0023a89:	75 d4                	jne    c0023a5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023a8b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023a8f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023a93:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023a97:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023a9b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023a9f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023aa3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023aa8:	86 e0                	xchg   al,ah
c0023aaa:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023aaf:	55                   	push   ebp
c0023ab0:	53                   	push   ebx
c0023ab1:	57                   	push   edi
c0023ab2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023ab6:	e8 7d f9 ff ff       	call   c0023438 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023abb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023abf:	55                   	push   ebp
c0023ac0:	53                   	push   ebx
c0023ac1:	57                   	push   edi
c0023ac2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023ac9:	e8 e0 f8 ff ff       	call   c00233ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023ace:	83 ec 0c             	sub    esp,0xc
c0023ad1:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023ad6:	b9 09 00 00 00       	mov    ecx,0x9
c0023adb:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023adf:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023ae3:	fc                   	cld    
c0023ae4:	89 e7                	mov    edi,esp
c0023ae6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023ae8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023aef:	e8 d8 fc ff ff       	call   c00237cc <PCI::foundDevice(PCIDeviceInfo)>
c0023af4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023afa:	5b                   	pop    ebx
c0023afb:	5e                   	pop    esi
c0023afc:	5f                   	pop    edi
c0023afd:	5d                   	pop    ebp
c0023afe:	c3                   	ret    
c0023aff:	90                   	nop

c0023b00 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023b00:	55                   	push   ebp
c0023b01:	57                   	push   edi
c0023b02:	56                   	push   esi
c0023b03:	53                   	push   ebx
c0023b04:	83 ec 0c             	sub    esp,0xc
c0023b07:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023b0b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023b10:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023b15:	6a 00                	push   0x0
c0023b17:	56                   	push   esi
c0023b18:	57                   	push   edi
c0023b19:	55                   	push   ebp
c0023b1a:	e8 8f f8 ff ff       	call   c00233ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b1f:	6a 00                	push   0x0
c0023b21:	56                   	push   esi
c0023b22:	57                   	push   edi
c0023b23:	55                   	push   ebp
c0023b24:	e8 2b fe ff ff       	call   c0023954 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b29:	83 c4 20             	add    esp,0x20
c0023b2c:	6a 00                	push   0x0
c0023b2e:	56                   	push   esi
c0023b2f:	57                   	push   edi
c0023b30:	55                   	push   ebp
c0023b31:	e8 9a f8 ff ff       	call   c00233d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023b36:	83 c4 10             	add    esp,0x10
c0023b39:	84 c0                	test   al,al
c0023b3b:	79 27                	jns    c0023b64 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023b3d:	bb 01 00 00 00       	mov    ebx,0x1
c0023b42:	53                   	push   ebx
c0023b43:	56                   	push   esi
c0023b44:	57                   	push   edi
c0023b45:	55                   	push   ebp
c0023b46:	e8 63 f8 ff ff       	call   c00233ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b4b:	83 c4 10             	add    esp,0x10
c0023b4e:	66 40                	inc    ax
c0023b50:	74 0c                	je     c0023b5e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023b52:	53                   	push   ebx
c0023b53:	56                   	push   esi
c0023b54:	57                   	push   edi
c0023b55:	55                   	push   ebp
c0023b56:	e8 f9 fd ff ff       	call   c0023954 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b5b:	83 c4 10             	add    esp,0x10
c0023b5e:	43                   	inc    ebx
c0023b5f:	83 fb 08             	cmp    ebx,0x8
c0023b62:	75 de                	jne    c0023b42 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023b64:	83 c4 0c             	add    esp,0xc
c0023b67:	5b                   	pop    ebx
c0023b68:	5e                   	pop    esi
c0023b69:	5f                   	pop    edi
c0023b6a:	5d                   	pop    ebp
c0023b6b:	c3                   	ret    

c0023b6c <PCI::detect()>:
c0023b6c:	56                   	push   esi
c0023b6d:	53                   	push   ebx
c0023b6e:	53                   	push   ebx
c0023b6f:	31 db                	xor    ebx,ebx
c0023b71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023b75:	6a 00                	push   0x0
c0023b77:	6a 00                	push   0x0
c0023b79:	6a 00                	push   0x0
c0023b7b:	56                   	push   esi
c0023b7c:	e8 4f f8 ff ff       	call   c00233d0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023b81:	83 c4 10             	add    esp,0x10
c0023b84:	a8 80                	test   al,0x80
c0023b86:	75 21                	jne    c0023ba9 <PCI::detect()+0x3d>
c0023b88:	51                   	push   ecx
c0023b89:	51                   	push   ecx
c0023b8a:	6a 00                	push   0x0
c0023b8c:	56                   	push   esi
c0023b8d:	e8 16 fc ff ff       	call   c00237a8 <PCI::checkBus(unsigned char)>
c0023b92:	83 c4 10             	add    esp,0x10
c0023b95:	eb 24                	jmp    c0023bbb <PCI::detect()+0x4f>
c0023b97:	52                   	push   edx
c0023b98:	52                   	push   edx
c0023b99:	53                   	push   ebx
c0023b9a:	43                   	inc    ebx
c0023b9b:	56                   	push   esi
c0023b9c:	e8 07 fc ff ff       	call   c00237a8 <PCI::checkBus(unsigned char)>
c0023ba1:	83 c4 10             	add    esp,0x10
c0023ba4:	83 fb 08             	cmp    ebx,0x8
c0023ba7:	74 12                	je     c0023bbb <PCI::detect()+0x4f>
c0023ba9:	53                   	push   ebx
c0023baa:	6a 00                	push   0x0
c0023bac:	6a 00                	push   0x0
c0023bae:	56                   	push   esi
c0023baf:	e8 fa f7 ff ff       	call   c00233ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023bb4:	83 c4 10             	add    esp,0x10
c0023bb7:	66 40                	inc    ax
c0023bb9:	74 dc                	je     c0023b97 <PCI::detect()+0x2b>
c0023bbb:	58                   	pop    eax
c0023bbc:	5b                   	pop    ebx
c0023bbd:	5e                   	pop    esi
c0023bbe:	c3                   	ret    
c0023bbf:	90                   	nop

c0023bc0 <IDE::close(int, int, void*)>:
c0023bc0:	83 c8 ff             	or     eax,0xffffffff
c0023bc3:	c3                   	ret    

c0023bc4 <IDE::IDE()>:
c0023bc4:	83 ec 0c             	sub    esp,0xc
c0023bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bcb:	83 ec 08             	sub    esp,0x8
c0023bce:	68 34 d9 02 c0       	push   0xc002d934
c0023bd3:	50                   	push   eax
c0023bd4:	e8 19 0a ff ff       	call   c00145f2 <HardDiskController::HardDiskController(char const*)>
c0023bd9:	83 c4 10             	add    esp,0x10
c0023bdc:	ba 74 db 02 c0       	mov    edx,0xc002db74
c0023be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be5:	89 10                	mov    DWORD PTR [eax],edx
c0023be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023beb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023bf2:	90                   	nop
c0023bf3:	83 c4 0c             	add    esp,0xc
c0023bf6:	c3                   	ret    
c0023bf7:	90                   	nop

c0023bf8 <IDE::prepareInterrupt(unsigned char)>:
c0023bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023bfd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c01:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023c09:	c3                   	ret    

c0023c0a <selectDrive(unsigned char, unsigned char)>:
c0023c0a:	c3                   	ret    
c0023c0b:	90                   	nop

c0023c0c <IDE::getBase(unsigned char)>:
c0023c0c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023c11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023c15:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023c1d:	c3                   	ret    

c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023c1e:	55                   	push   ebp
c0023c1f:	57                   	push   edi
c0023c20:	56                   	push   esi
c0023c21:	53                   	push   ebx
c0023c22:	83 ec 1c             	sub    esp,0x1c
c0023c25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023c29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023c2d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023c30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023c34:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023c38:	80 f9 03             	cmp    cl,0x3
c0023c3b:	77 51                	ja     c0023c8e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c41:	0f b6 f2             	movzx  esi,dl
c0023c44:	0f b6 db             	movzx  ebx,bl
c0023c47:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023c4a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023c4e:	83 ca 80             	or     edx,0xffffff80
c0023c51:	0f b6 d2             	movzx  edx,dl
c0023c54:	52                   	push   edx
c0023c55:	6a 0c                	push   0xc
c0023c57:	56                   	push   esi
c0023c58:	57                   	push   edi
c0023c59:	e8 c0 ff ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c5e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023c63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c67:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023c6b:	ee                   	out    dx,al
c0023c6c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023c71:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023c75:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023c79:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023c7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023c85:	83 c4 2c             	add    esp,0x2c
c0023c88:	5b                   	pop    ebx
c0023c89:	5e                   	pop    esi
c0023c8a:	5f                   	pop    edi
c0023c8b:	5d                   	pop    ebp
c0023c8c:	eb 90                	jmp    c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c8e:	80 fb 07             	cmp    bl,0x7
c0023c91:	77 12                	ja     c0023ca5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023c93:	0f b6 d2             	movzx  edx,dl
c0023c96:	0f b6 db             	movzx  ebx,bl
c0023c99:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023ca1:	89 da                	mov    edx,ebx
c0023ca3:	eb 2f                	jmp    c0023cd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023ca5:	80 fb 0d             	cmp    bl,0xd
c0023ca8:	77 13                	ja     c0023cbd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023caa:	0f b6 d2             	movzx  edx,dl
c0023cad:	0f b6 db             	movzx  ebx,bl
c0023cb0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023cb7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023cbb:	eb 17                	jmp    c0023cd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023cbd:	80 fb 15             	cmp    bl,0x15
c0023cc0:	77 13                	ja     c0023cd5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023cc2:	0f b6 d2             	movzx  edx,dl
c0023cc5:	0f b6 db             	movzx  ebx,bl
c0023cc8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023cd0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023cd4:	ee                   	out    dx,al
c0023cd5:	83 c4 1c             	add    esp,0x1c
c0023cd8:	5b                   	pop    ebx
c0023cd9:	5e                   	pop    esi
c0023cda:	5f                   	pop    edi
c0023cdb:	5d                   	pop    ebp
c0023cdc:	c3                   	ret    
c0023cdd:	90                   	nop

c0023cde <IDE::read(unsigned char, unsigned char)>:
c0023cde:	55                   	push   ebp
c0023cdf:	57                   	push   edi
c0023ce0:	56                   	push   esi
c0023ce1:	53                   	push   ebx
c0023ce2:	83 ec 1c             	sub    esp,0x1c
c0023ce5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023ce9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ced:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023cf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023cf4:	3c 03                	cmp    al,0x3
c0023cf6:	77 43                	ja     c0023d3b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023cf8:	0f b6 f2             	movzx  esi,dl
c0023cfb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023cfe:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023d02:	83 c8 80             	or     eax,0xffffff80
c0023d05:	0f b6 c0             	movzx  eax,al
c0023d08:	50                   	push   eax
c0023d09:	6a 0c                	push   0xc
c0023d0b:	56                   	push   esi
c0023d0c:	57                   	push   edi
c0023d0d:	e8 0c ff ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d12:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023d17:	0f b6 c3             	movzx  eax,bl
c0023d1a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023d1e:	ec                   	in     al,dx
c0023d1f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d23:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023d28:	52                   	push   edx
c0023d29:	6a 0c                	push   0xc
c0023d2b:	56                   	push   esi
c0023d2c:	57                   	push   edi
c0023d2d:	e8 ec fe ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d32:	83 c4 20             	add    esp,0x20
c0023d35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023d39:	eb 49                	jmp    c0023d84 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d3b:	80 fb 07             	cmp    bl,0x7
c0023d3e:	77 12                	ja     c0023d52 <IDE::read(unsigned char, unsigned char)+0x74>
c0023d40:	0f b6 d2             	movzx  edx,dl
c0023d43:	0f b6 c3             	movzx  eax,bl
c0023d46:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023d4e:	89 c2                	mov    edx,eax
c0023d50:	eb 31                	jmp    c0023d83 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d52:	80 fb 0d             	cmp    bl,0xd
c0023d55:	77 13                	ja     c0023d6a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023d57:	0f b6 d2             	movzx  edx,dl
c0023d5a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023d61:	0f b6 d3             	movzx  edx,bl
c0023d64:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023d68:	eb 19                	jmp    c0023d83 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d6a:	31 c0                	xor    eax,eax
c0023d6c:	80 fb 15             	cmp    bl,0x15
c0023d6f:	77 13                	ja     c0023d84 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d71:	0f b6 d2             	movzx  edx,dl
c0023d74:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023d7c:	0f b6 d3             	movzx  edx,bl
c0023d7f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023d83:	ec                   	in     al,dx
c0023d84:	83 c4 1c             	add    esp,0x1c
c0023d87:	5b                   	pop    ebx
c0023d88:	5e                   	pop    esi
c0023d89:	5f                   	pop    edi
c0023d8a:	5d                   	pop    ebp
c0023d8b:	c3                   	ret    

c0023d8c <IDE::waitInterrupt(unsigned char)>:
c0023d8c:	55                   	push   ebp
c0023d8d:	57                   	push   edi
c0023d8e:	56                   	push   esi
c0023d8f:	53                   	push   ebx
c0023d90:	31 db                	xor    ebx,ebx
c0023d92:	83 ec 0c             	sub    esp,0xc
c0023d95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023d99:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023d9e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023da6:	89 e8                	mov    eax,ebp
c0023da8:	84 c0                	test   al,al
c0023daa:	75 34                	jne    c0023de0 <IDE::waitInterrupt(unsigned char)+0x54>
c0023dac:	52                   	push   edx
c0023dad:	6a 0c                	push   0xc
c0023daf:	56                   	push   esi
c0023db0:	57                   	push   edi
c0023db1:	e8 28 ff ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0023db6:	83 c4 10             	add    esp,0x10
c0023db9:	a8 01                	test   al,0x1
c0023dbb:	75 2b                	jne    c0023de8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023dbd:	f6 c3 04             	test   bl,0x4
c0023dc0:	75 16                	jne    c0023dd8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023dc2:	83 fb 32             	cmp    ebx,0x32
c0023dc5:	7e 11                	jle    c0023dd8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023dc7:	50                   	push   eax
c0023dc8:	50                   	push   eax
c0023dc9:	6a 00                	push   0x0
c0023dcb:	68 80 96 98 00       	push   0x989680
c0023dd0:	e8 b2 ab ff ff       	call   c001e987 <nanoSleep(unsigned long long)>
c0023dd5:	83 c4 10             	add    esp,0x10
c0023dd8:	83 fb 3c             	cmp    ebx,0x3c
c0023ddb:	74 0b                	je     c0023de8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ddd:	43                   	inc    ebx
c0023dde:	eb be                	jmp    c0023d9e <IDE::waitInterrupt(unsigned char)+0x12>
c0023de0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023de8:	83 c4 0c             	add    esp,0xc
c0023deb:	89 e8                	mov    eax,ebp
c0023ded:	5b                   	pop    ebx
c0023dee:	5e                   	pop    esi
c0023def:	5f                   	pop    edi
c0023df0:	5d                   	pop    ebp
c0023df1:	c3                   	ret    

c0023df2 <ideChannel0IRQHandler(regs*, void*)>:
c0023df2:	83 ec 10             	sub    esp,0x10
c0023df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023df9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023e00:	6a 07                	push   0x7
c0023e02:	6a 00                	push   0x0
c0023e04:	50                   	push   eax
c0023e05:	e8 d4 fe ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0023e0a:	83 c4 1c             	add    esp,0x1c
c0023e0d:	c3                   	ret    

c0023e0e <ideChannel1IRQHandler(regs*, void*)>:
c0023e0e:	83 ec 10             	sub    esp,0x10
c0023e11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e15:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023e1c:	6a 07                	push   0x7
c0023e1e:	6a 01                	push   0x1
c0023e20:	50                   	push   eax
c0023e21:	e8 b8 fe ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0023e26:	83 c4 1c             	add    esp,0x1c
c0023e29:	c3                   	ret    

c0023e2a <IDE::enableIRQs(unsigned char, bool)>:
c0023e2a:	57                   	push   edi
c0023e2b:	56                   	push   esi
c0023e2c:	be 04 00 00 00       	mov    esi,0x4
c0023e31:	53                   	push   ebx
c0023e32:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023e37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e3b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023e40:	0f 94 c0             	sete   al
c0023e43:	d1 e0                	shl    eax,1
c0023e45:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023e4c:	0f b6 c0             	movzx  eax,al
c0023e4f:	50                   	push   eax
c0023e50:	6a 0c                	push   0xc
c0023e52:	57                   	push   edi
c0023e53:	53                   	push   ebx
c0023e54:	e8 c5 fd ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e59:	83 c4 10             	add    esp,0x10
c0023e5c:	50                   	push   eax
c0023e5d:	6a 0c                	push   0xc
c0023e5f:	57                   	push   edi
c0023e60:	53                   	push   ebx
c0023e61:	e8 78 fe ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0023e66:	83 c4 10             	add    esp,0x10
c0023e69:	4e                   	dec    esi
c0023e6a:	75 f0                	jne    c0023e5c <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023e6c:	5b                   	pop    ebx
c0023e6d:	5e                   	pop    esi
c0023e6e:	5f                   	pop    edi
c0023e6f:	c3                   	ret    

c0023e70 <IDE::open(int, int, void*)>:
c0023e70:	55                   	push   ebp
c0023e71:	57                   	push   edi
c0023e72:	56                   	push   esi
c0023e73:	53                   	push   ebx
c0023e74:	83 ec 1c             	sub    esp,0x1c
c0023e77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023e7b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023e84:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023e8d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023e94:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023e9b:	0f 85 b0 02 00 00    	jne    c0024151 <IDE::open(int, int, void*)+0x2e1>
c0023ea1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023ea7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023eab:	83 e0 7f             	and    eax,0x7f
c0023eae:	3c 05                	cmp    al,0x5
c0023eb0:	74 04                	je     c0023eb6 <IDE::open(int, int, void*)+0x46>
c0023eb2:	3c 0f                	cmp    al,0xf
c0023eb4:	75 32                	jne    c0023ee8 <IDE::open(int, int, void*)+0x78>
c0023eb6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023ebc:	83 e0 fc             	and    eax,0xfffffffc
c0023ebf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023ec6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023ecc:	83 e0 fc             	and    eax,0xfffffffc
c0023ecf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ed6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023edc:	83 e0 fc             	and    eax,0xfffffffc
c0023edf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ee6:	eb 14                	jmp    c0023efc <IDE::open(int, int, void*)+0x8c>
c0023ee8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ef2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023efc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023f03:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023f0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f0e:	89 c6                	mov    esi,eax
c0023f10:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023f15:	c1 e6 10             	shl    esi,0x10
c0023f18:	89 e8                	mov    eax,ebp
c0023f1a:	89 fa                	mov    edx,edi
c0023f1c:	c1 e0 0b             	shl    eax,0xb
c0023f1f:	09 f0                	or     eax,esi
c0023f21:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023f28:	c1 e6 08             	shl    esi,0x8
c0023f2b:	09 c6                	or     esi,eax
c0023f2d:	89 f0                	mov    eax,esi
c0023f2f:	0d 08 00 00 80       	or     eax,0x80000008
c0023f34:	ef                   	out    dx,eax
c0023f35:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023f3a:	89 ca                	mov    edx,ecx
c0023f3c:	ed                   	in     eax,dx
c0023f3d:	c1 e8 10             	shr    eax,0x10
c0023f40:	3d ff ff 00 00       	cmp    eax,0xffff
c0023f45:	0f 84 f5 00 00 00    	je     c0024040 <IDE::open(int, int, void*)+0x1d0>
c0023f4b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023f51:	89 fa                	mov    edx,edi
c0023f53:	89 f0                	mov    eax,esi
c0023f55:	ef                   	out    dx,eax
c0023f56:	b0 fe                	mov    al,0xfe
c0023f58:	89 ca                	mov    edx,ecx
c0023f5a:	ee                   	out    dx,al
c0023f5b:	89 f0                	mov    eax,esi
c0023f5d:	89 fa                	mov    edx,edi
c0023f5f:	ef                   	out    dx,eax
c0023f60:	89 ca                	mov    edx,ecx
c0023f62:	ed                   	in     eax,dx
c0023f63:	3c fe                	cmp    al,0xfe
c0023f65:	0f 85 a9 00 00 00    	jne    c0024014 <IDE::open(int, int, void*)+0x1a4>
c0023f6b:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023f71:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023f78:	74 33                	je     c0023fad <IDE::open(int, int, void*)+0x13d>
c0023f7a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023f80:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023f84:	40                   	inc    eax
c0023f85:	83 ec 0c             	sub    esp,0xc
c0023f88:	0f b6 c0             	movzx  eax,al
c0023f8b:	50                   	push   eax
c0023f8c:	55                   	push   ebp
c0023f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f91:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023f97:	51                   	push   ecx
c0023f98:	e8 93 43 ff ff       	call   c0018330 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023f9d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023fa2:	83 c4 1c             	add    esp,0x1c
c0023fa5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023fab:	eb 0a                	jmp    c0023fb7 <IDE::open(int, int, void*)+0x147>
c0023fad:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023fb7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023fbe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023fc5:	c1 e1 10             	shl    ecx,0x10
c0023fc8:	c1 e0 08             	shl    eax,0x8
c0023fcb:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023fd0:	09 c1                	or     ecx,eax
c0023fd2:	89 fa                	mov    edx,edi
c0023fd4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023fdb:	c1 e0 0b             	shl    eax,0xb
c0023fde:	09 c1                	or     ecx,eax
c0023fe0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023fe6:	89 c8                	mov    eax,ecx
c0023fe8:	ef                   	out    dx,eax
c0023fe9:	be fc 0c 00 00       	mov    esi,0xcfc
c0023fee:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023ff4:	89 f2                	mov    edx,esi
c0023ff6:	ee                   	out    dx,al
c0023ff7:	89 c8                	mov    eax,ecx
c0023ff9:	89 fa                	mov    edx,edi
c0023ffb:	ef                   	out    dx,eax
c0023ffc:	89 f2                	mov    edx,esi
c0023ffe:	ed                   	in     eax,dx
c0023fff:	0f b6 c0             	movzx  eax,al
c0024002:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0024008:	74 46                	je     c0024050 <IDE::open(int, int, void*)+0x1e0>
c002400a:	83 ec 0c             	sub    esp,0xc
c002400d:	68 4c d9 02 c0       	push   0xc002d94c
c0024012:	eb 34                	jmp    c0024048 <IDE::open(int, int, void*)+0x1d8>
c0024014:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002401d:	75 17                	jne    c0024036 <IDE::open(int, int, void*)+0x1c6>
c002401f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0024024:	74 07                	je     c002402d <IDE::open(int, int, void*)+0x1bd>
c0024026:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002402b:	75 09                	jne    c0024036 <IDE::open(int, int, void*)+0x1c6>
c002402d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024034:	eb 1a                	jmp    c0024050 <IDE::open(int, int, void*)+0x1e0>
c0024036:	83 ec 0c             	sub    esp,0xc
c0024039:	68 54 d9 02 c0       	push   0xc002d954
c002403e:	eb 08                	jmp    c0024048 <IDE::open(int, int, void*)+0x1d8>
c0024040:	83 ec 0c             	sub    esp,0xc
c0024043:	68 85 d9 02 c0       	push   0xc002d985
c0024048:	e8 84 68 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c002404d:	83 c4 10             	add    esp,0x10
c0024050:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0024057:	79 1a                	jns    c0024073 <IDE::open(int, int, void*)+0x203>
c0024059:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002405f:	83 e0 fc             	and    eax,0xfffffffc
c0024062:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0024069:	83 c0 08             	add    eax,0x8
c002406c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0024073:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0024079:	89 c2                	mov    edx,eax
c002407b:	83 e2 0f             	and    edx,0xf
c002407e:	66 83 fa 08          	cmp    dx,0x8
c0024082:	75 0a                	jne    c002408e <IDE::open(int, int, void*)+0x21e>
c0024084:	83 e8 02             	sub    eax,0x2
c0024087:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002408e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0024094:	89 c2                	mov    edx,eax
c0024096:	83 e2 0f             	and    edx,0xf
c0024099:	66 83 fa 08          	cmp    dx,0x8
c002409d:	75 0a                	jne    c00240a9 <IDE::open(int, int, void*)+0x239>
c002409f:	83 e8 02             	sub    eax,0x2
c00240a2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00240a9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00240b0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00240b7:	89 d0                	mov    eax,edx
c00240b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00240bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00240c0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00240c4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00240c7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00240cc:	0f b6 c9             	movzx  ecx,cl
c00240cf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00240d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00240d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00240dd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00240e1:	8d 50 02             	lea    edx,[eax+0x2]
c00240e4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00240e9:	0f b6 d2             	movzx  edx,dl
c00240ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00240f2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00240f5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00240f9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00240fd:	8d 48 03             	lea    ecx,[eax+0x3]
c0024100:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024105:	0f b6 c9             	movzx  ecx,cl
c0024108:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002410e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0024111:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0024115:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0024119:	8d 50 04             	lea    edx,[eax+0x4]
c002411c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0024122:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024127:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002412e:	66 85 f6             	test   si,si
c0024131:	74 3e                	je     c0024171 <IDE::open(int, int, void*)+0x301>
c0024133:	0f b6 d2             	movzx  edx,dl
c0024136:	83 c0 05             	add    eax,0x5
c0024139:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002413c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024140:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0024144:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002414a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002414f:	eb 20                	jmp    c0024171 <IDE::open(int, int, void*)+0x301>
c0024151:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002415b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0024165:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002416c:	e9 02 ff ff ff       	jmp    c0024073 <IDE::open(int, int, void*)+0x203>
c0024171:	52                   	push   edx
c0024172:	52                   	push   edx
c0024173:	6a 00                	push   0x0
c0024175:	53                   	push   ebx
c0024176:	e8 7d fa ff ff       	call   c0023bf8 <IDE::prepareInterrupt(unsigned char)>
c002417b:	59                   	pop    ecx
c002417c:	5e                   	pop    esi
c002417d:	6a 01                	push   0x1
c002417f:	53                   	push   ebx
c0024180:	e8 73 fa ff ff       	call   c0023bf8 <IDE::prepareInterrupt(unsigned char)>
c0024185:	83 c4 0c             	add    esp,0xc
c0024188:	6a 00                	push   0x0
c002418a:	6a 00                	push   0x0
c002418c:	53                   	push   ebx
c002418d:	e8 98 fc ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c0024192:	83 c4 0c             	add    esp,0xc
c0024195:	6a 00                	push   0x0
c0024197:	6a 01                	push   0x1
c0024199:	53                   	push   ebx
c002419a:	e8 8b fc ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c002419f:	83 c4 10             	add    esp,0x10
c00241a2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00241a9:	74 40                	je     c00241eb <IDE::open(int, int, void*)+0x37b>
c00241ab:	83 ec 0c             	sub    esp,0xc
c00241ae:	68 af d9 02 c0       	push   0xc002d9af
c00241b3:	e8 7f ec fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00241b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241bb:	6a 01                	push   0x1
c00241bd:	68 f2 3d 02 c0       	push   0xc0023df2
c00241c2:	6a 0e                	push   0xe
c00241c4:	53                   	push   ebx
c00241c5:	e8 12 00 ff ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00241ca:	83 c4 14             	add    esp,0x14
c00241cd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00241d3:	53                   	push   ebx
c00241d4:	6a 01                	push   0x1
c00241d6:	68 0e 3e 02 c0       	push   0xc0023e0e
c00241db:	6a 0f                	push   0xf
c00241dd:	53                   	push   ebx
c00241de:	e8 f9 ff fe ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00241e3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00241e9:	eb 4a                	jmp    c0024235 <IDE::open(int, int, void*)+0x3c5>
c00241eb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00241f5:	50                   	push   eax
c00241f6:	6a 0f                	push   0xf
c00241f8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00241fe:	68 cb d9 02 c0       	push   0xc002d9cb
c0024203:	e8 2f ec fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002420b:	6a 00                	push   0x0
c002420d:	68 f2 3d 02 c0       	push   0xc0023df2
c0024212:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024218:	53                   	push   ebx
c0024219:	e8 be ff fe ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002421e:	83 c4 14             	add    esp,0x14
c0024221:	53                   	push   ebx
c0024222:	6a 00                	push   0x0
c0024224:	68 0e 3e 02 c0       	push   0xc0023e0e
c0024229:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002422f:	53                   	push   ebx
c0024230:	e8 a7 ff fe ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024235:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024237:	83 c4 20             	add    esp,0x20
c002423a:	83 ec 0c             	sub    esp,0xc
c002423d:	53                   	push   ebx
c002423e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0024241:	83 c4 0c             	add    esp,0xc
c0024244:	6a 07                	push   0x7
c0024246:	6a 00                	push   0x0
c0024248:	53                   	push   ebx
c0024249:	e8 90 fa ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c002424e:	83 c4 0c             	add    esp,0xc
c0024251:	6a 07                	push   0x7
c0024253:	6a 01                	push   0x1
c0024255:	53                   	push   ebx
c0024256:	e8 83 fa ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c002425b:	83 c4 0c             	add    esp,0xc
c002425e:	6a 01                	push   0x1
c0024260:	6a 00                	push   0x0
c0024262:	53                   	push   ebx
c0024263:	e8 c2 fb ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c0024268:	83 c4 0c             	add    esp,0xc
c002426b:	6a 01                	push   0x1
c002426d:	6a 01                	push   0x1
c002426f:	53                   	push   ebx
c0024270:	e8 b5 fb ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c0024275:	83 c4 2c             	add    esp,0x2c
c0024278:	31 c0                	xor    eax,eax
c002427a:	5b                   	pop    ebx
c002427b:	5e                   	pop    esi
c002427c:	5f                   	pop    edi
c002427d:	5d                   	pop    ebp
c002427e:	c3                   	ret    
c002427f:	90                   	nop

c0024280 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024280:	55                   	push   ebp
c0024281:	57                   	push   edi
c0024282:	56                   	push   esi
c0024283:	53                   	push   ebx
c0024284:	83 ec 1c             	sub    esp,0x1c
c0024287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002428b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002428f:	8d 50 f8             	lea    edx,[eax-0x8]
c0024292:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024296:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002429a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002429e:	80 fa 03             	cmp    dl,0x3
c00242a1:	77 5d                	ja     c0024300 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00242a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00242a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00242ab:	0f b6 db             	movzx  ebx,bl
c00242ae:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00242b1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00242b5:	83 ca 80             	or     edx,0xffffff80
c00242b8:	0f b6 d2             	movzx  edx,dl
c00242bb:	52                   	push   edx
c00242bc:	6a 0c                	push   0xc
c00242be:	53                   	push   ebx
c00242bf:	56                   	push   esi
c00242c0:	e8 59 f9 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00242ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00242d2:	0f b6 c0             	movzx  eax,al
c00242d5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00242d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00242db:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00242e0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00242e4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00242e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00242ec:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00242f4:	83 c4 2c             	add    esp,0x2c
c00242f7:	5b                   	pop    ebx
c00242f8:	5e                   	pop    esi
c00242f9:	5f                   	pop    edi
c00242fa:	5d                   	pop    ebp
c00242fb:	e9 1e f9 ff ff       	jmp    c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024300:	3c 07                	cmp    al,0x7
c0024302:	77 10                	ja     c0024314 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024304:	0f b6 db             	movzx  ebx,bl
c0024307:	0f b6 d0             	movzx  edx,al
c002430a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024312:	eb 2d                	jmp    c0024341 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024314:	3c 0d                	cmp    al,0xd
c0024316:	77 13                	ja     c002432b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024318:	0f b6 db             	movzx  ebx,bl
c002431b:	0f b6 c0             	movzx  eax,al
c002431e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0024325:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024329:	eb 16                	jmp    c0024341 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002432b:	3c 15                	cmp    al,0x15
c002432d:	77 14                	ja     c0024343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002432f:	0f b6 db             	movzx  ebx,bl
c0024332:	0f b6 c0             	movzx  eax,al
c0024335:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002433d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024341:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024343:	83 c4 1c             	add    esp,0x1c
c0024346:	5b                   	pop    ebx
c0024347:	5e                   	pop    esi
c0024348:	5f                   	pop    edi
c0024349:	5d                   	pop    ebp
c002434a:	c3                   	ret    
c002434b:	90                   	nop

c002434c <IDE::detect()>:
c002434c:	55                   	push   ebp
c002434d:	57                   	push   edi
c002434e:	56                   	push   esi
c002434f:	53                   	push   ebx
c0024350:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0024356:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002435d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0024364:	0f 85 be 02 00 00    	jne    c0024628 <IDE::detect()+0x2dc>
c002436a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024371:	31 f6                	xor    esi,esi
c0024373:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002437b:	31 ed                	xor    ebp,ebp
c002437d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024381:	c1 e0 06             	shl    eax,0x6
c0024384:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002438c:	89 e8                	mov    eax,ebp
c002438e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024392:	c1 e0 04             	shl    eax,0x4
c0024395:	83 c8 a0             	or     eax,0xffffffa0
c0024398:	0f b6 c0             	movzx  eax,al
c002439b:	50                   	push   eax
c002439c:	6a 06                	push   0x6
c002439e:	56                   	push   esi
c002439f:	53                   	push   ebx
c00243a0:	e8 79 f8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243a5:	83 c4 0c             	add    esp,0xc
c00243a8:	6a 0c                	push   0xc
c00243aa:	56                   	push   esi
c00243ab:	53                   	push   ebx
c00243ac:	e8 2d f9 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243b1:	83 c4 0c             	add    esp,0xc
c00243b4:	6a 0c                	push   0xc
c00243b6:	56                   	push   esi
c00243b7:	53                   	push   ebx
c00243b8:	e8 21 f9 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243bd:	83 c4 0c             	add    esp,0xc
c00243c0:	6a 0c                	push   0xc
c00243c2:	56                   	push   esi
c00243c3:	53                   	push   ebx
c00243c4:	e8 15 f9 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243c9:	83 c4 0c             	add    esp,0xc
c00243cc:	6a 0c                	push   0xc
c00243ce:	56                   	push   esi
c00243cf:	53                   	push   ebx
c00243d0:	e8 09 f9 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243d5:	68 ec 00 00 00       	push   0xec
c00243da:	6a 07                	push   0x7
c00243dc:	56                   	push   esi
c00243dd:	53                   	push   ebx
c00243de:	e8 3b f8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243e3:	83 c4 1c             	add    esp,0x1c
c00243e6:	6a 0c                	push   0xc
c00243e8:	56                   	push   esi
c00243e9:	53                   	push   ebx
c00243ea:	e8 ef f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243ef:	83 c4 0c             	add    esp,0xc
c00243f2:	6a 0c                	push   0xc
c00243f4:	56                   	push   esi
c00243f5:	53                   	push   ebx
c00243f6:	e8 e3 f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00243fb:	83 c4 0c             	add    esp,0xc
c00243fe:	6a 0c                	push   0xc
c0024400:	56                   	push   esi
c0024401:	53                   	push   ebx
c0024402:	e8 d7 f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0024407:	83 c4 0c             	add    esp,0xc
c002440a:	6a 0c                	push   0xc
c002440c:	56                   	push   esi
c002440d:	53                   	push   ebx
c002440e:	e8 cb f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0024413:	83 c4 0c             	add    esp,0xc
c0024416:	6a 0c                	push   0xc
c0024418:	56                   	push   esi
c0024419:	53                   	push   ebx
c002441a:	e8 bf f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c002441f:	83 c4 10             	add    esp,0x10
c0024422:	84 c0                	test   al,al
c0024424:	0f 84 8b 01 00 00    	je     c00245b5 <IDE::detect()+0x269>
c002442a:	31 ff                	xor    edi,edi
c002442c:	50                   	push   eax
c002442d:	6a 0c                	push   0xc
c002442f:	56                   	push   esi
c0024430:	53                   	push   ebx
c0024431:	e8 a8 f8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	a8 01                	test   al,0x1
c002443b:	0f 85 8e 01 00 00    	jne    c00245cf <IDE::detect()+0x283>
c0024441:	84 c0                	test   al,al
c0024443:	78 04                	js     c0024449 <IDE::detect()+0xfd>
c0024445:	a8 08                	test   al,0x8
c0024447:	75 27                	jne    c0024470 <IDE::detect()+0x124>
c0024449:	47                   	inc    edi
c002444a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024450:	7e da                	jle    c002442c <IDE::detect()+0xe0>
c0024452:	50                   	push   eax
c0024453:	50                   	push   eax
c0024454:	6a 00                	push   0x0
c0024456:	68 40 4b 4c 00       	push   0x4c4b40
c002445b:	e8 27 a5 ff ff       	call   c001e987 <nanoSleep(unsigned long long)>
c0024460:	83 c4 10             	add    esp,0x10
c0024463:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024469:	75 c1                	jne    c002442c <IDE::detect()+0xe0>
c002446b:	e9 5f 01 00 00       	jmp    c00245cf <IDE::detect()+0x283>
c0024470:	31 c9                	xor    ecx,ecx
c0024472:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024476:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002447a:	83 ec 0c             	sub    esp,0xc
c002447d:	68 80 00 00 00       	push   0x80
c0024482:	57                   	push   edi
c0024483:	6a 00                	push   0x0
c0024485:	56                   	push   esi
c0024486:	53                   	push   ebx
c0024487:	e8 f4 fd ff ff       	call   c0024280 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002448c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024491:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024495:	89 d1                	mov    ecx,edx
c0024497:	c1 e0 06             	shl    eax,0x6
c002449a:	01 d8                	add    eax,ebx
c002449c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00244a3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00244aa:	89 f2                	mov    edx,esi
c00244ac:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00244b2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00244b6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00244bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244c0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00244c7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00244cf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00244d6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00244de:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00244e4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00244eb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00244f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00244f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00244f9:	83 c4 20             	add    esp,0x20
c00244fc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00244ff:	83 c0 02             	add    eax,0x2
c0024502:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024508:	83 c7 02             	add    edi,0x2
c002450b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002450e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024514:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024518:	75 e2                	jne    c00244fc <IDE::detect()+0x1b0>
c002451a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002451e:	c1 e0 06             	shl    eax,0x6
c0024521:	01 d8                	add    eax,ebx
c0024523:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024529:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024530:	66 c1 ea 09          	shr    dx,0x9
c0024534:	83 e2 01             	and    edx,0x1
c0024537:	84 c9                	test   cl,cl
c0024539:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002453f:	75 2f                	jne    c0024570 <IDE::detect()+0x224>
c0024541:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024547:	85 c0                	test   eax,eax
c0024549:	74 66                	je     c00245b1 <IDE::detect()+0x265>
c002454b:	50                   	push   eax
c002454c:	55                   	push   ebp
c002454d:	56                   	push   esi
c002454e:	68 e7 d9 02 c0       	push   0xc002d9e7
c0024553:	e8 df e8 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024558:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002455f:	e8 28 b3 fe ff       	call   c000f88c <malloc>
c0024564:	89 c7                	mov    edi,eax
c0024566:	89 04 24             	mov    DWORD PTR [esp],eax
c0024569:	e8 78 06 00 00       	call   c0024be6 <ATA::ATA()>
c002456e:	eb 28                	jmp    c0024598 <IDE::detect()+0x24c>
c0024570:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024576:	55                   	push   ebp
c0024577:	56                   	push   esi
c0024578:	68 16 da 02 c0       	push   0xc002da16
c002457d:	e8 b5 e8 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024582:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024589:	e8 fe b2 fe ff       	call   c000f88c <malloc>
c002458e:	89 c7                	mov    edi,eax
c0024590:	89 04 24             	mov    DWORD PTR [esp],eax
c0024593:	e8 8e 0c 00 00       	call   c0025226 <ATAPI::ATAPI()>
c0024598:	5a                   	pop    edx
c0024599:	59                   	pop    ecx
c002459a:	57                   	push   edi
c002459b:	53                   	push   ebx
c002459c:	e8 b7 fc fe ff       	call   c0014258 <Device::addChild(Device*)>
c00245a1:	8b 07                	mov    eax,DWORD PTR [edi]
c00245a3:	53                   	push   ebx
c00245a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245a8:	6a 00                	push   0x0
c00245aa:	57                   	push   edi
c00245ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245ae:	83 c4 20             	add    esp,0x20
c00245b1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00245b5:	4d                   	dec    ebp
c00245b6:	74 0a                	je     c00245c2 <IDE::detect()+0x276>
c00245b8:	bd 01 00 00 00       	mov    ebp,0x1
c00245bd:	e9 bb fd ff ff       	jmp    c002437d <IDE::detect()+0x31>
c00245c2:	4e                   	dec    esi
c00245c3:	74 63                	je     c0024628 <IDE::detect()+0x2dc>
c00245c5:	be 01 00 00 00       	mov    esi,0x1
c00245ca:	e9 ac fd ff ff       	jmp    c002437b <IDE::detect()+0x2f>
c00245cf:	50                   	push   eax
c00245d0:	6a 04                	push   0x4
c00245d2:	56                   	push   esi
c00245d3:	53                   	push   ebx
c00245d4:	e8 05 f7 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00245d9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00245dd:	83 c4 0c             	add    esp,0xc
c00245e0:	6a 05                	push   0x5
c00245e2:	56                   	push   esi
c00245e3:	53                   	push   ebx
c00245e4:	e8 f5 f6 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00245e9:	83 c4 10             	add    esp,0x10
c00245ec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00245f0:	80 fa 14             	cmp    dl,0x14
c00245f3:	75 04                	jne    c00245f9 <IDE::detect()+0x2ad>
c00245f5:	3c eb                	cmp    al,0xeb
c00245f7:	eb 07                	jmp    c0024600 <IDE::detect()+0x2b4>
c00245f9:	3c 96                	cmp    al,0x96
c00245fb:	75 b8                	jne    c00245b5 <IDE::detect()+0x269>
c00245fd:	80 fa 69             	cmp    dl,0x69
c0024600:	75 b3                	jne    c00245b5 <IDE::detect()+0x269>
c0024602:	68 a1 00 00 00       	push   0xa1
c0024607:	6a 07                	push   0x7
c0024609:	56                   	push   esi
c002460a:	53                   	push   ebx
c002460b:	e8 0e f6 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024610:	5f                   	pop    edi
c0024611:	58                   	pop    eax
c0024612:	6a 00                	push   0x0
c0024614:	68 40 42 0f 00       	push   0xf4240
c0024619:	e8 69 a3 ff ff       	call   c001e987 <nanoSleep(unsigned long long)>
c002461e:	83 c4 10             	add    esp,0x10
c0024621:	b1 01                	mov    cl,0x1
c0024623:	e9 4a fe ff ff       	jmp    c0024472 <IDE::detect()+0x126>
c0024628:	81 c4 1c 02 00 00    	add    esp,0x21c
c002462e:	5b                   	pop    ebx
c002462f:	5e                   	pop    esi
c0024630:	5f                   	pop    edi
c0024631:	5d                   	pop    ebp
c0024632:	c3                   	ret    
c0024633:	90                   	nop

c0024634 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0024634:	55                   	push   ebp
c0024635:	57                   	push   edi
c0024636:	56                   	push   esi
c0024637:	53                   	push   ebx
c0024638:	83 ec 1c             	sub    esp,0x1c
c002463b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002463f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024643:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024647:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002464b:	88 c3                	mov    bl,al
c002464d:	84 c0                	test   al,al
c002464f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024653:	0f 84 67 01 00 00    	je     c00247c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024659:	83 ec 0c             	sub    esp,0xc
c002465c:	68 47 da 02 c0       	push   0xc002da47
c0024661:	e8 d1 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024666:	83 c4 10             	add    esp,0x10
c0024669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002466d:	3c 01                	cmp    al,0x1
c002466f:	75 17                	jne    c0024688 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024671:	83 ec 0c             	sub    esp,0xc
c0024674:	b3 13                	mov    bl,0x13
c0024676:	68 53 da 02 c0       	push   0xc002da53
c002467b:	e8 b7 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024680:	83 c4 10             	add    esp,0x10
c0024683:	e9 25 01 00 00       	jmp    c00247ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024688:	3c 02                	cmp    al,0x2
c002468a:	0f 85 ef 00 00 00    	jne    c002477f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024690:	d1 e6                	shl    esi,1
c0024692:	09 ee                	or     esi,ebp
c0024694:	52                   	push   edx
c0024695:	89 f0                	mov    eax,esi
c0024697:	6a 01                	push   0x1
c0024699:	0f b6 f0             	movzx  esi,al
c002469c:	c1 e6 06             	shl    esi,0x6
c002469f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00246a7:	50                   	push   eax
c00246a8:	57                   	push   edi
c00246a9:	e8 30 f6 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00246ae:	83 c4 10             	add    esp,0x10
c00246b1:	89 c6                	mov    esi,eax
c00246b3:	a8 01                	test   al,0x1
c00246b5:	74 12                	je     c00246c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00246b7:	83 ec 0c             	sub    esp,0xc
c00246ba:	b3 07                	mov    bl,0x7
c00246bc:	68 68 da 02 c0       	push   0xc002da68
c00246c1:	e8 71 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00246c6:	83 c4 10             	add    esp,0x10
c00246c9:	f7 c6 02 00 00 00    	test   esi,0x2
c00246cf:	74 12                	je     c00246e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00246d1:	83 ec 0c             	sub    esp,0xc
c00246d4:	b3 03                	mov    bl,0x3
c00246d6:	68 86 da 02 c0       	push   0xc002da86
c00246db:	e8 57 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00246e0:	83 c4 10             	add    esp,0x10
c00246e3:	f7 c6 04 00 00 00    	test   esi,0x4
c00246e9:	74 12                	je     c00246fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00246eb:	83 ec 0c             	sub    esp,0xc
c00246ee:	b3 14                	mov    bl,0x14
c00246f0:	68 a6 da 02 c0       	push   0xc002daa6
c00246f5:	e8 3d e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00246fa:	83 c4 10             	add    esp,0x10
c00246fd:	f7 c6 08 00 00 00    	test   esi,0x8
c0024703:	74 12                	je     c0024717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024705:	83 ec 0c             	sub    esp,0xc
c0024708:	b3 03                	mov    bl,0x3
c002470a:	68 86 da 02 c0       	push   0xc002da86
c002470f:	e8 23 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024714:	83 c4 10             	add    esp,0x10
c0024717:	f7 c6 10 00 00 00    	test   esi,0x10
c002471d:	74 12                	je     c0024731 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002471f:	83 ec 0c             	sub    esp,0xc
c0024722:	b3 15                	mov    bl,0x15
c0024724:	68 be da 02 c0       	push   0xc002dabe
c0024729:	e8 09 e7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002472e:	83 c4 10             	add    esp,0x10
c0024731:	f7 c6 20 00 00 00    	test   esi,0x20
c0024737:	74 12                	je     c002474b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024739:	83 ec 0c             	sub    esp,0xc
c002473c:	b3 03                	mov    bl,0x3
c002473e:	68 86 da 02 c0       	push   0xc002da86
c0024743:	e8 ef e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024748:	83 c4 10             	add    esp,0x10
c002474b:	f7 c6 40 00 00 00    	test   esi,0x40
c0024751:	74 12                	je     c0024765 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024753:	83 ec 0c             	sub    esp,0xc
c0024756:	b3 16                	mov    bl,0x16
c0024758:	68 d8 da 02 c0       	push   0xc002dad8
c002475d:	e8 d5 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024762:	83 c4 10             	add    esp,0x10
c0024765:	89 f0                	mov    eax,esi
c0024767:	84 c0                	test   al,al
c0024769:	79 42                	jns    c00247ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002476b:	83 ec 0c             	sub    esp,0xc
c002476e:	b3 0d                	mov    bl,0xd
c0024770:	68 f9 da 02 c0       	push   0xc002daf9
c0024775:	e8 bd e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002477a:	83 c4 10             	add    esp,0x10
c002477d:	eb 2e                	jmp    c00247ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002477f:	3c 03                	cmp    al,0x3
c0024781:	75 14                	jne    c0024797 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024783:	83 ec 0c             	sub    esp,0xc
c0024786:	b3 17                	mov    bl,0x17
c0024788:	68 0d db 02 c0       	push   0xc002db0d
c002478d:	e8 a5 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024792:	83 c4 10             	add    esp,0x10
c0024795:	eb 16                	jmp    c00247ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024797:	3c 04                	cmp    al,0x4
c0024799:	75 12                	jne    c00247ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002479b:	83 ec 0c             	sub    esp,0xc
c002479e:	b3 08                	mov    bl,0x8
c00247a0:	68 23 db 02 c0       	push   0xc002db23
c00247a5:	e8 8d e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00247aa:	83 c4 10             	add    esp,0x10
c00247ad:	50                   	push   eax
c00247ae:	50                   	push   eax
c00247af:	0f b6 c3             	movzx  eax,bl
c00247b2:	50                   	push   eax
c00247b3:	68 3b db 02 c0       	push   0xc002db3b
c00247b8:	e8 7a e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00247bd:	83 c4 10             	add    esp,0x10
c00247c0:	83 c4 1c             	add    esp,0x1c
c00247c3:	88 d8                	mov    al,bl
c00247c5:	5b                   	pop    ebx
c00247c6:	5e                   	pop    esi
c00247c7:	5f                   	pop    edi
c00247c8:	5d                   	pop    ebp
c00247c9:	c3                   	ret    

c00247ca <IDE::polling(unsigned char, unsigned int)>:
c00247ca:	57                   	push   edi
c00247cb:	56                   	push   esi
c00247cc:	53                   	push   ebx
c00247cd:	bb 04 00 00 00       	mov    ebx,0x4
c00247d2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00247d6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00247db:	52                   	push   edx
c00247dc:	6a 0c                	push   0xc
c00247de:	56                   	push   esi
c00247df:	57                   	push   edi
c00247e0:	e8 f9 f4 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00247e5:	83 c4 10             	add    esp,0x10
c00247e8:	4b                   	dec    ebx
c00247e9:	75 f0                	jne    c00247db <IDE::polling(unsigned char, unsigned int)+0x11>
c00247eb:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247f0:	50                   	push   eax
c00247f1:	6a 0c                	push   0xc
c00247f3:	56                   	push   esi
c00247f4:	57                   	push   edi
c00247f5:	e8 e4 f4 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c00247fa:	83 c4 10             	add    esp,0x10
c00247fd:	a8 01                	test   al,0x1
c00247ff:	74 12                	je     c0024813 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024801:	83 ec 0c             	sub    esp,0xc
c0024804:	68 55 db 02 c0       	push   0xc002db55
c0024809:	e8 29 e6 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c002480e:	83 c4 10             	add    esp,0x10
c0024811:	eb 17                	jmp    c002482a <IDE::polling(unsigned char, unsigned int)+0x60>
c0024813:	a8 20                	test   al,0x20
c0024815:	75 0f                	jne    c0024826 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024817:	4b                   	dec    ebx
c0024818:	74 10                	je     c002482a <IDE::polling(unsigned char, unsigned int)+0x60>
c002481a:	84 c0                	test   al,al
c002481c:	78 d2                	js     c00247f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c002481e:	a8 08                	test   al,0x8
c0024820:	74 ce                	je     c00247f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024822:	31 c0                	xor    eax,eax
c0024824:	eb 06                	jmp    c002482c <IDE::polling(unsigned char, unsigned int)+0x62>
c0024826:	b0 01                	mov    al,0x1
c0024828:	eb 02                	jmp    c002482c <IDE::polling(unsigned char, unsigned int)+0x62>
c002482a:	b0 02                	mov    al,0x2
c002482c:	5b                   	pop    ebx
c002482d:	5e                   	pop    esi
c002482e:	5f                   	pop    edi
c002482f:	c3                   	ret    

c0024830 <SATABus::close(int, int, void*)>:
c0024830:	31 c0                	xor    eax,eax
c0024832:	c3                   	ret    
c0024833:	90                   	nop

c0024834 <SATABus::detect()>:
c0024834:	c3                   	ret    
c0024835:	90                   	nop

c0024836 <SATABus::SATABus()>:
c0024836:	83 ec 0c             	sub    esp,0xc
c0024839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002483d:	83 ec 08             	sub    esp,0x8
c0024840:	68 98 db 02 c0       	push   0xc002db98
c0024845:	50                   	push   eax
c0024846:	e8 a7 fd fe ff       	call   c00145f2 <HardDiskController::HardDiskController(char const*)>
c002484b:	83 c4 10             	add    esp,0x10
c002484e:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c0024853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024857:	89 10                	mov    DWORD PTR [eax],edx
c0024859:	83 ec 0c             	sub    esp,0xc
c002485c:	6a 50                	push   0x50
c002485e:	e8 7a b7 fe ff       	call   c000ffdd <Phys::allocateContiguousPages(int)>
c0024863:	83 c4 10             	add    esp,0x10
c0024866:	89 c2                	mov    edx,eax
c0024868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002486c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024872:	83 ec 0c             	sub    esp,0xc
c0024875:	6a 50                	push   0x50
c0024877:	e8 b5 d1 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	89 c2                	mov    edx,eax
c0024881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024885:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002488b:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0024890:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024894:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002489a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002489e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00248a4:	83 ec 0c             	sub    esp,0xc
c00248a7:	6a 03                	push   0x3
c00248a9:	6a 50                	push   0x50
c00248ab:	51                   	push   ecx
c00248ac:	52                   	push   edx
c00248ad:	50                   	push   eax
c00248ae:	e8 ab dc fe ff       	call   c001255e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00248b3:	83 c4 20             	add    esp,0x20
c00248b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ba:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00248c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00248ca:	83 ec 04             	sub    esp,0x4
c00248cd:	52                   	push   edx
c00248ce:	50                   	push   eax
c00248cf:	68 bc db 02 c0       	push   0xc002dbbc
c00248d4:	e8 5e e5 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00248d9:	83 c4 10             	add    esp,0x10
c00248dc:	90                   	nop
c00248dd:	83 c4 0c             	add    esp,0xc
c00248e0:	c3                   	ret    
c00248e1:	90                   	nop

c00248e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00248e2:	83 ec 0c             	sub    esp,0xc
c00248e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00248e9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00248ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00248ef:	09 c2                	or     edx,eax
c00248f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00248fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00248fd:	31 c0                	xor    eax,eax
c00248ff:	c1 e9 08             	shr    ecx,0x8
c0024902:	83 e1 0f             	and    ecx,0xf
c0024905:	39 c8                	cmp    eax,ecx
c0024907:	74 0a                	je     c0024913 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024909:	f6 c2 01             	test   dl,0x1
c002490c:	74 18                	je     c0024926 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002490e:	d1 ea                	shr    edx,1
c0024910:	40                   	inc    eax
c0024911:	eb f2                	jmp    c0024905 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024913:	83 ec 0c             	sub    esp,0xc
c0024916:	68 e0 db 02 c0       	push   0xc002dbe0
c002491b:	e8 b1 5f ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0024920:	83 c4 10             	add    esp,0x10
c0024923:	83 c8 ff             	or     eax,0xffffffff
c0024926:	83 c4 0c             	add    esp,0xc
c0024929:	c3                   	ret    

c002492a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002492a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002492e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024931:	89 c2                	mov    edx,eax
c0024933:	c1 ea 08             	shr    edx,0x8
c0024936:	83 e2 0f             	and    edx,0xf
c0024939:	fe ca                	dec    dl
c002493b:	75 31                	jne    c002496e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002493d:	83 e0 0f             	and    eax,0xf
c0024940:	3c 03                	cmp    al,0x3
c0024942:	75 2a                	jne    c002496e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024944:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024947:	b8 02 00 00 00       	mov    eax,0x2
c002494c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024952:	74 1c                	je     c0024970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024954:	b8 04 00 00 00       	mov    eax,0x4
c0024959:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002495f:	74 0f                	je     c0024970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024961:	31 c0                	xor    eax,eax
c0024963:	83 fa 03             	cmp    edx,0x3
c0024966:	0f 94 c0             	sete   al
c0024969:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002496d:	c3                   	ret    
c002496e:	31 c0                	xor    eax,eax
c0024970:	c3                   	ret    
c0024971:	90                   	nop

c0024972 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024976:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024979:	0f ba e2 0f          	bt     edx,0xf
c002497d:	72 f7                	jb     c0024976 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002497f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024982:	83 ca 10             	or     edx,0x10
c0024985:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024988:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002498b:	83 ca 01             	or     edx,0x1
c002498e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024991:	c3                   	ret    

c0024992 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024996:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024999:	83 e2 fe             	and    edx,0xfffffffe
c002499c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002499f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249a2:	83 e2 ef             	and    edx,0xffffffef
c00249a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249a8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249ab:	0f ba e2 0e          	bt     edx,0xe
c00249af:	72 f7                	jb     c00249a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249b1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249b4:	0f ba e2 0f          	bt     edx,0xf
c00249b8:	72 ee                	jb     c00249a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249ba:	c3                   	ret    
c00249bb:	90                   	nop

c00249bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00249bc:	55                   	push   ebp
c00249bd:	57                   	push   edi
c00249be:	56                   	push   esi
c00249bf:	53                   	push   ebx
c00249c0:	83 ec 1c             	sub    esp,0x1c
c00249c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00249cf:	53                   	push   ebx
c00249d0:	89 fd                	mov    ebp,edi
c00249d2:	56                   	push   esi
c00249d3:	c1 e5 0a             	shl    ebp,0xa
c00249d6:	e8 b7 ff ff ff       	call   c0024992 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00249db:	83 ec 0c             	sub    esp,0xc
c00249de:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00249e4:	01 e8                	add    eax,ebp
c00249e6:	89 03                	mov    DWORD PTR [ebx],eax
c00249e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249ea:	68 00 04 00 00       	push   0x400
c00249ef:	6a 00                	push   0x0
c00249f1:	50                   	push   eax
c00249f2:	e8 59 bd fd ff       	call   c0000750 <memset>
c00249f7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00249fd:	89 fa                	mov    edx,edi
c00249ff:	01 e8                	add    eax,ebp
c0024a01:	c1 e7 0d             	shl    edi,0xd
c0024a04:	89 03                	mov    DWORD PTR [ebx],eax
c0024a06:	c1 e2 08             	shl    edx,0x8
c0024a09:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024a10:	81 c2 00 80 00 00    	add    edx,0x8000
c0024a16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024a1a:	89 d0                	mov    eax,edx
c0024a1c:	83 c4 1c             	add    esp,0x1c
c0024a1f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024a28:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024a2b:	68 00 01 00 00       	push   0x100
c0024a30:	6a 00                	push   0x0
c0024a32:	50                   	push   eax
c0024a33:	e8 18 bd fd ff       	call   c0000750 <memset>
c0024a38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a3c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024a42:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024a48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024a4c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024a4f:	83 c4 10             	add    esp,0x10
c0024a52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024a59:	31 ff                	xor    edi,edi
c0024a5b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024a61:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024a6b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a71:	83 c5 20             	add    ebp,0x20
c0024a74:	01 f8                	add    eax,edi
c0024a76:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024a79:	52                   	push   edx
c0024a7a:	68 00 01 00 00       	push   0x100
c0024a7f:	6a 00                	push   0x0
c0024a81:	50                   	push   eax
c0024a82:	e8 c9 bc fd ff       	call   c0000750 <memset>
c0024a87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a8b:	83 c4 10             	add    esp,0x10
c0024a8e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024a94:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024a9b:	01 f8                	add    eax,edi
c0024a9d:	81 c7 00 01 00 00    	add    edi,0x100
c0024aa3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024aa6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024aac:	75 b3                	jne    c0024a61 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024aae:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024ab2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024ab6:	83 c4 1c             	add    esp,0x1c
c0024ab9:	5b                   	pop    ebx
c0024aba:	5e                   	pop    esi
c0024abb:	5f                   	pop    edi
c0024abc:	5d                   	pop    ebp
c0024abd:	e9 b0 fe ff ff       	jmp    c0024972 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024ac2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024ac2:	55                   	push   ebp
c0024ac3:	57                   	push   edi
c0024ac4:	56                   	push   esi
c0024ac5:	53                   	push   ebx
c0024ac6:	31 db                	xor    ebx,ebx
c0024ac8:	83 ec 0c             	sub    esp,0xc
c0024acb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024acf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ad3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024ad6:	f7 c7 01 00 00 00    	test   edi,0x1
c0024adc:	0f 84 aa 00 00 00    	je     c0024b8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024ae2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ae6:	89 d8                	mov    eax,ebx
c0024ae8:	c1 e0 07             	shl    eax,0x7
c0024aeb:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024af2:	55                   	push   ebp
c0024af3:	56                   	push   esi
c0024af4:	e8 31 fe ff ff       	call   c002492a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024af9:	5a                   	pop    edx
c0024afa:	83 f8 01             	cmp    eax,0x1
c0024afd:	59                   	pop    ecx
c0024afe:	75 30                	jne    c0024b30 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024b00:	50                   	push   eax
c0024b01:	50                   	push   eax
c0024b02:	53                   	push   ebx
c0024b03:	68 05 dc 02 c0       	push   0xc002dc05
c0024b08:	e8 2a e3 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024b0d:	83 c4 0c             	add    esp,0xc
c0024b10:	53                   	push   ebx
c0024b11:	55                   	push   ebp
c0024b12:	56                   	push   esi
c0024b13:	e8 a4 fe ff ff       	call   c00249bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b18:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024b1f:	e8 68 ad fe ff       	call   c000f88c <malloc>
c0024b24:	89 c5                	mov    ebp,eax
c0024b26:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b29:	e8 5c 0d 00 00       	call   c002588a <SATA::SATA()>
c0024b2e:	eb 33                	jmp    c0024b63 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024b30:	83 f8 04             	cmp    eax,0x4
c0024b33:	75 47                	jne    c0024b7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024b35:	50                   	push   eax
c0024b36:	50                   	push   eax
c0024b37:	53                   	push   ebx
c0024b38:	68 1c dc 02 c0       	push   0xc002dc1c
c0024b3d:	e8 f5 e2 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024b42:	83 c4 0c             	add    esp,0xc
c0024b45:	53                   	push   ebx
c0024b46:	55                   	push   ebp
c0024b47:	56                   	push   esi
c0024b48:	e8 6f fe ff ff       	call   c00249bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b4d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024b54:	e8 33 ad fe ff       	call   c000f88c <malloc>
c0024b59:	89 c5                	mov    ebp,eax
c0024b5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b5e:	e8 d3 10 00 00       	call   c0025c36 <SATAPI::SATAPI()>
c0024b63:	5a                   	pop    edx
c0024b64:	59                   	pop    ecx
c0024b65:	55                   	push   ebp
c0024b66:	56                   	push   esi
c0024b67:	e8 ec f6 fe ff       	call   c0014258 <Device::addChild(Device*)>
c0024b6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024b6f:	56                   	push   esi
c0024b70:	6a 00                	push   0x0
c0024b72:	53                   	push   ebx
c0024b73:	55                   	push   ebp
c0024b74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024b77:	83 c4 20             	add    esp,0x20
c0024b7a:	eb 10                	jmp    c0024b8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024b7c:	50                   	push   eax
c0024b7d:	50                   	push   eax
c0024b7e:	53                   	push   ebx
c0024b7f:	68 35 dc 02 c0       	push   0xc002dc35
c0024b84:	e8 ae e2 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024b89:	83 c4 10             	add    esp,0x10
c0024b8c:	d1 ef                	shr    edi,1
c0024b8e:	43                   	inc    ebx
c0024b8f:	83 fb 20             	cmp    ebx,0x20
c0024b92:	0f 85 3e ff ff ff    	jne    c0024ad6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024b98:	83 c4 0c             	add    esp,0xc
c0024b9b:	5b                   	pop    ebx
c0024b9c:	5e                   	pop    esi
c0024b9d:	5f                   	pop    edi
c0024b9e:	5d                   	pop    ebp
c0024b9f:	c3                   	ret    

c0024ba0 <SATABus::open(int, int, void*)>:
c0024ba0:	83 ec 14             	sub    esp,0x14
c0024ba3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ba7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024bad:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024bb3:	52                   	push   edx
c0024bb4:	50                   	push   eax
c0024bb5:	e8 08 ff ff ff       	call   c0024ac2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024bba:	31 c0                	xor    eax,eax
c0024bbc:	83 c4 1c             	add    esp,0x1c
c0024bbf:	c3                   	ret    

c0024bc0 <ATA::close(int, int, void*)>:
c0024bc0:	83 ec 0c             	sub    esp,0xc
c0024bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bcd:	85 c0                	test   eax,eax
c0024bcf:	74 0c                	je     c0024bdd <ATA::close(int, int, void*)+0x1d>
c0024bd1:	83 ec 0c             	sub    esp,0xc
c0024bd4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bd6:	50                   	push   eax
c0024bd7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	31 c0                	xor    eax,eax
c0024bdf:	83 c4 0c             	add    esp,0xc
c0024be2:	c3                   	ret    
c0024be3:	90                   	nop

c0024be4 <ATA::powerSaving(PowerSavingLevel)>:
c0024be4:	c3                   	ret    
c0024be5:	90                   	nop

c0024be6 <ATA::ATA()>:
c0024be6:	83 ec 0c             	sub    esp,0xc
c0024be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bed:	83 ec 04             	sub    esp,0x4
c0024bf0:	68 00 02 00 00       	push   0x200
c0024bf5:	68 1d dd 02 c0       	push   0xc002dd1d
c0024bfa:	50                   	push   eax
c0024bfb:	e8 8a fa fe ff       	call   c001468a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c00:	83 c4 10             	add    esp,0x10
c0024c03:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c0024c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c0c:	89 10                	mov    DWORD PTR [eax],edx
c0024c0e:	90                   	nop
c0024c0f:	83 c4 0c             	add    esp,0xc
c0024c12:	c3                   	ret    
c0024c13:	90                   	nop

c0024c14 <ATA::flush(bool)>:
c0024c14:	53                   	push   ebx
c0024c15:	83 ec 08             	sub    esp,0x8
c0024c18:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024c1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c21:	19 c0                	sbb    eax,eax
c0024c23:	83 e0 fd             	and    eax,0xfffffffd
c0024c26:	05 ea 00 00 00       	add    eax,0xea
c0024c2b:	50                   	push   eax
c0024c2c:	6a 07                	push   0x7
c0024c2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c35:	50                   	push   eax
c0024c36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c3c:	e8 dd ef ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c41:	83 c4 0c             	add    esp,0xc
c0024c44:	6a 00                	push   0x0
c0024c46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c4d:	50                   	push   eax
c0024c4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c54:	e8 71 fb ff ff       	call   c00247ca <IDE::polling(unsigned char, unsigned int)>
c0024c59:	83 c4 18             	add    esp,0x18
c0024c5c:	5b                   	pop    ebx
c0024c5d:	c3                   	ret    

c0024c5e <ATA::readyForCommand()>:
c0024c5e:	56                   	push   esi
c0024c5f:	53                   	push   ebx
c0024c60:	31 db                	xor    ebx,ebx
c0024c62:	50                   	push   eax
c0024c63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024c67:	50                   	push   eax
c0024c68:	6a 0c                	push   0xc
c0024c6a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024c71:	50                   	push   eax
c0024c72:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024c78:	e8 61 f0 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0024c7d:	83 c4 10             	add    esp,0x10
c0024c80:	a8 88                	test   al,0x88
c0024c82:	74 23                	je     c0024ca7 <ATA::readyForCommand()+0x49>
c0024c84:	43                   	inc    ebx
c0024c85:	83 fb 63             	cmp    ebx,0x63
c0024c88:	7e dd                	jle    c0024c67 <ATA::readyForCommand()+0x9>
c0024c8a:	51                   	push   ecx
c0024c8b:	51                   	push   ecx
c0024c8c:	6a 00                	push   0x0
c0024c8e:	68 40 42 0f 00       	push   0xf4240
c0024c93:	e8 ef 9c ff ff       	call   c001e987 <nanoSleep(unsigned long long)>
c0024c98:	83 c4 10             	add    esp,0x10
c0024c9b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ca1:	75 c4                	jne    c0024c67 <ATA::readyForCommand()+0x9>
c0024ca3:	31 c0                	xor    eax,eax
c0024ca5:	eb 02                	jmp    c0024ca9 <ATA::readyForCommand()+0x4b>
c0024ca7:	b0 01                	mov    al,0x1
c0024ca9:	5a                   	pop    edx
c0024caa:	5b                   	pop    ebx
c0024cab:	5e                   	pop    esi
c0024cac:	c3                   	ret    
c0024cad:	90                   	nop

c0024cae <ATA::access(unsigned long long, int, void*, bool)>:
c0024cae:	55                   	push   ebp
c0024caf:	57                   	push   edi
c0024cb0:	56                   	push   esi
c0024cb1:	53                   	push   ebx
c0024cb2:	83 ec 2c             	sub    esp,0x2c
c0024cb5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024cb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cbd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024cc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024cc5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024cc9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024ccd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024cd1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024cdb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024ce1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024ce5:	c1 e0 06             	shl    eax,0x6
c0024ce8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024cf0:	74 5d                	je     c0024d4f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024cf2:	89 fa                	mov    edx,edi
c0024cf4:	89 f0                	mov    eax,esi
c0024cf6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024cfa:	c1 ea 1c             	shr    edx,0x1c
c0024cfd:	89 d1                	mov    ecx,edx
c0024cff:	09 c1                	or     ecx,eax
c0024d01:	74 25                	je     c0024d28 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024d03:	31 ed                	xor    ebp,ebp
c0024d05:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024d0c:	89 fa                	mov    edx,edi
c0024d0e:	89 f0                	mov    eax,esi
c0024d10:	0f ad d0             	shrd   eax,edx,cl
c0024d13:	d3 ea                	shr    edx,cl
c0024d15:	f6 c1 20             	test   cl,0x20
c0024d18:	74 02                	je     c0024d1c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024d1a:	89 d0                	mov    eax,edx
c0024d1c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024d20:	45                   	inc    ebp
c0024d21:	83 fd 06             	cmp    ebp,0x6
c0024d24:	75 df                	jne    c0024d05 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024d26:	eb 76                	jmp    c0024d9e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024d28:	89 f0                	mov    eax,esi
c0024d2a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024d2f:	89 fa                	mov    edx,edi
c0024d31:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024d38:	0f ac d0 10          	shrd   eax,edx,0x10
c0024d3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024d41:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024d45:	c1 ee 18             	shr    esi,0x18
c0024d48:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024d4d:	eb 56                	jmp    c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024d4f:	6a 00                	push   0x0
c0024d51:	6a 3f                	push   0x3f
c0024d53:	57                   	push   edi
c0024d54:	56                   	push   esi
c0024d55:	e8 9a 29 00 00       	call   c00276f4 <__umoddi3>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	40                   	inc    eax
c0024d5e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024d62:	6a 00                	push   0x0
c0024d64:	68 f0 03 00 00       	push   0x3f0
c0024d69:	57                   	push   edi
c0024d6a:	56                   	push   esi
c0024d6b:	e8 84 28 00 00       	call   c00275f4 <__udivdi3>
c0024d70:	83 c4 10             	add    esp,0x10
c0024d73:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024d78:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024d7f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024d84:	6a 00                	push   0x0
c0024d86:	6a 3f                	push   0x3f
c0024d88:	57                   	push   edi
c0024d89:	56                   	push   esi
c0024d8a:	e8 65 28 00 00       	call   c00275f4 <__udivdi3>
c0024d8f:	83 c4 10             	add    esp,0x10
c0024d92:	89 c6                	mov    esi,eax
c0024d94:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024d99:	83 e6 0f             	and    esi,0xf
c0024d9c:	eb 07                	jmp    c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024d9e:	31 f6                	xor    esi,esi
c0024da0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024da5:	bf 01 00 00 00       	mov    edi,0x1
c0024daa:	50                   	push   eax
c0024dab:	6a 00                	push   0x0
c0024dad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db4:	50                   	push   eax
c0024db5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024db9:	e8 6c f0 ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c0024dbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dc1:	e8 98 fe ff ff       	call   c0024c5e <ATA::readyForCommand()>
c0024dc6:	83 c4 10             	add    esp,0x10
c0024dc9:	84 c0                	test   al,al
c0024dcb:	0f 84 5a 02 00 00    	je     c002502b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024dd1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024dd7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ddd:	c1 e0 04             	shl    eax,0x4
c0024de0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024de7:	09 c6                	or     esi,eax
c0024de9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024dee:	75 05                	jne    c0024df5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024df0:	83 ce a0             	or     esi,0xffffffa0
c0024df3:	eb 03                	jmp    c0024df8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024df5:	83 ce e0             	or     esi,0xffffffe0
c0024df8:	89 f0                	mov    eax,esi
c0024dfa:	0f b6 f0             	movzx  esi,al
c0024dfd:	56                   	push   esi
c0024dfe:	6a 06                	push   0x6
c0024e00:	51                   	push   ecx
c0024e01:	52                   	push   edx
c0024e02:	e8 17 ee ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e07:	83 c4 10             	add    esp,0x10
c0024e0a:	6a 00                	push   0x0
c0024e0c:	6a 01                	push   0x1
c0024e0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e15:	50                   	push   eax
c0024e16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e1c:	e8 fd ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e21:	83 c4 10             	add    esp,0x10
c0024e24:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024e29:	75 6e                	jne    c0024e99 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024e2b:	6a 00                	push   0x0
c0024e2d:	6a 08                	push   0x8
c0024e2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e36:	50                   	push   eax
c0024e37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e3d:	e8 dc ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e42:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024e47:	50                   	push   eax
c0024e48:	6a 09                	push   0x9
c0024e4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e51:	50                   	push   eax
c0024e52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e58:	e8 c1 ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e5d:	83 c4 20             	add    esp,0x20
c0024e60:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024e65:	50                   	push   eax
c0024e66:	6a 0a                	push   0xa
c0024e68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e6f:	50                   	push   eax
c0024e70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e76:	e8 a3 ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e7b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024e80:	50                   	push   eax
c0024e81:	6a 0b                	push   0xb
c0024e83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e8a:	50                   	push   eax
c0024e8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e91:	e8 88 ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e96:	83 c4 20             	add    esp,0x20
c0024e99:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024e9e:	50                   	push   eax
c0024e9f:	6a 02                	push   0x2
c0024ea1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ea8:	50                   	push   eax
c0024ea9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024eaf:	e8 6a ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eb4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024eb9:	50                   	push   eax
c0024eba:	6a 03                	push   0x3
c0024ebc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ec3:	50                   	push   eax
c0024ec4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024eca:	e8 4f ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ecf:	83 c4 20             	add    esp,0x20
c0024ed2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024ed7:	50                   	push   eax
c0024ed8:	6a 04                	push   0x4
c0024eda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ee1:	50                   	push   eax
c0024ee2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ee8:	e8 31 ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024ef2:	50                   	push   eax
c0024ef3:	6a 05                	push   0x5
c0024ef5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024efc:	50                   	push   eax
c0024efd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f03:	e8 16 ed ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f08:	83 c4 20             	add    esp,0x20
c0024f0b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024f10:	0f 94 c0             	sete   al
c0024f13:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024f18:	74 09                	je     c0024f23 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024f1a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024f21:	eb 07                	jmp    c0024f2a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024f23:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024f2a:	0f b6 c0             	movzx  eax,al
c0024f2d:	50                   	push   eax
c0024f2e:	6a 07                	push   0x7
c0024f30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f37:	50                   	push   eax
c0024f38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f3e:	e8 db ec ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f43:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024f47:	83 c4 10             	add    esp,0x10
c0024f4a:	85 f6                	test   esi,esi
c0024f4c:	0f 84 ba 00 00 00    	je     c002500c <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024f52:	50                   	push   eax
c0024f53:	6a 01                	push   0x1
c0024f55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f5c:	50                   	push   eax
c0024f5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f63:	e8 62 f8 ff ff       	call   c00247ca <IDE::polling(unsigned char, unsigned int)>
c0024f68:	83 c4 10             	add    esp,0x10
c0024f6b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024f71:	84 c0                	test   al,al
c0024f73:	74 2c                	je     c0024fa1 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024f75:	0f b6 f8             	movzx  edi,al
c0024f78:	0f b6 d2             	movzx  edx,dl
c0024f7b:	57                   	push   edi
c0024f7c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024f83:	50                   	push   eax
c0024f84:	52                   	push   edx
c0024f85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f8b:	e8 a4 f6 ff ff       	call   c0024634 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f90:	c7 04 24 78 dc 02 c0 	mov    DWORD PTR [esp],0xc002dc78
c0024f97:	e8 9b de fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0024f9c:	e9 87 00 00 00       	jmp    c0025028 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024fa1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024fa6:	74 33                	je     c0024fdb <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024fa8:	31 ed                	xor    ebp,ebp
c0024faa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024fae:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024fb2:	50                   	push   eax
c0024fb3:	50                   	push   eax
c0024fb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fbb:	50                   	push   eax
c0024fbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fc2:	e8 45 ec ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c0024fc7:	89 c2                	mov    edx,eax
c0024fc9:	89 f8                	mov    eax,edi
c0024fcb:	66 ef                	out    dx,ax
c0024fcd:	45                   	inc    ebp
c0024fce:	83 c4 10             	add    esp,0x10
c0024fd1:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024fd7:	75 d1                	jne    c0024faa <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024fd9:	eb 23                	jmp    c0024ffe <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024fdb:	0f b6 d2             	movzx  edx,dl
c0024fde:	51                   	push   ecx
c0024fdf:	51                   	push   ecx
c0024fe0:	52                   	push   edx
c0024fe1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fe7:	e8 20 ec ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c0024fec:	b9 00 01 00 00       	mov    ecx,0x100
c0024ff1:	89 c2                	mov    edx,eax
c0024ff3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024ff7:	fc                   	cld    
c0024ff8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024ffb:	83 c4 10             	add    esp,0x10
c0024ffe:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0025006:	4e                   	dec    esi
c0025007:	e9 3e ff ff ff       	jmp    c0024f4a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002500c:	31 ff                	xor    edi,edi
c002500e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0025013:	74 16                	je     c002502b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0025015:	50                   	push   eax
c0025016:	50                   	push   eax
c0025017:	31 c0                	xor    eax,eax
c0025019:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002501e:	0f 94 c0             	sete   al
c0025021:	50                   	push   eax
c0025022:	53                   	push   ebx
c0025023:	e8 ec fb ff ff       	call   c0024c14 <ATA::flush(bool)>
c0025028:	83 c4 10             	add    esp,0x10
c002502b:	83 c4 2c             	add    esp,0x2c
c002502e:	89 f8                	mov    eax,edi
c0025030:	5b                   	pop    ebx
c0025031:	5e                   	pop    esi
c0025032:	5f                   	pop    edi
c0025033:	5d                   	pop    ebp
c0025034:	c3                   	ret    
c0025035:	90                   	nop

c0025036 <ATA::read(unsigned long long, int, void*)>:
c0025036:	57                   	push   edi
c0025037:	b8 04 00 00 00       	mov    eax,0x4
c002503c:	56                   	push   esi
c002503d:	53                   	push   ebx
c002503e:	83 ec 10             	sub    esp,0x10
c0025041:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025045:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025049:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002504c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025050:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025054:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002505a:	77 3b                	ja     c0025097 <ATA::read(unsigned long long, int, void*)+0x61>
c002505c:	b8 06 00 00 00       	mov    eax,0x6
c0025061:	85 d2                	test   edx,edx
c0025063:	74 32                	je     c0025097 <ATA::read(unsigned long long, int, void*)+0x61>
c0025065:	50                   	push   eax
c0025066:	50                   	push   eax
c0025067:	6a 00                	push   0x0
c0025069:	52                   	push   edx
c002506a:	53                   	push   ebx
c002506b:	57                   	push   edi
c002506c:	56                   	push   esi
c002506d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025071:	e8 38 fc ff ff       	call   c0024cae <ATA::access(unsigned long long, int, void*, bool)>
c0025076:	83 c4 20             	add    esp,0x20
c0025079:	85 c0                	test   eax,eax
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	75 11                	jne    c0025092 <ATA::read(unsigned long long, int, void*)+0x5c>
c0025081:	01 1d 34 36 03 c0    	add    DWORD PTR ds:0xc0033634,ebx
c0025087:	e8 b0 b8 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c002508c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025090:	eb 05                	jmp    c0025097 <ATA::read(unsigned long long, int, void*)+0x61>
c0025092:	b8 01 00 00 00       	mov    eax,0x1
c0025097:	83 c4 10             	add    esp,0x10
c002509a:	5b                   	pop    ebx
c002509b:	5e                   	pop    esi
c002509c:	5f                   	pop    edi
c002509d:	c3                   	ret    

c002509e <ATA::write(unsigned long long, int, void*)>:
c002509e:	57                   	push   edi
c002509f:	b8 04 00 00 00       	mov    eax,0x4
c00250a4:	56                   	push   esi
c00250a5:	53                   	push   ebx
c00250a6:	83 ec 10             	sub    esp,0x10
c00250a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250ad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00250b1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00250b4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00250b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00250bc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00250c2:	77 3b                	ja     c00250ff <ATA::write(unsigned long long, int, void*)+0x61>
c00250c4:	b8 06 00 00 00       	mov    eax,0x6
c00250c9:	85 d2                	test   edx,edx
c00250cb:	74 32                	je     c00250ff <ATA::write(unsigned long long, int, void*)+0x61>
c00250cd:	50                   	push   eax
c00250ce:	50                   	push   eax
c00250cf:	6a 01                	push   0x1
c00250d1:	52                   	push   edx
c00250d2:	53                   	push   ebx
c00250d3:	57                   	push   edi
c00250d4:	56                   	push   esi
c00250d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250d9:	e8 d0 fb ff ff       	call   c0024cae <ATA::access(unsigned long long, int, void*, bool)>
c00250de:	83 c4 20             	add    esp,0x20
c00250e1:	85 c0                	test   eax,eax
c00250e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250e7:	75 11                	jne    c00250fa <ATA::write(unsigned long long, int, void*)+0x5c>
c00250e9:	01 1d 30 36 03 c0    	add    DWORD PTR ds:0xc0033630,ebx
c00250ef:	e8 48 b8 fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c00250f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250f8:	eb 05                	jmp    c00250ff <ATA::write(unsigned long long, int, void*)+0x61>
c00250fa:	b8 01 00 00 00       	mov    eax,0x1
c00250ff:	83 c4 10             	add    esp,0x10
c0025102:	5b                   	pop    ebx
c0025103:	5e                   	pop    esi
c0025104:	5f                   	pop    edi
c0025105:	c3                   	ret    

c0025106 <ATA::detectCHS()>:
c0025106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002510a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0025110:	c1 e0 06             	shl    eax,0x6
c0025113:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0025119:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0025123:	c7 44 24 04 83 dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dc83
c002512b:	e9 a1 57 ff ff       	jmp    c001a8d1 <Krnl::panic(char const*)>

c0025130 <ATA::open(int, int, void*)>:
c0025130:	53                   	push   ebx
c0025131:	83 ec 08             	sub    esp,0x8
c0025134:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025138:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002513c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025140:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025146:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002514c:	c1 e0 06             	shl    eax,0x6
c002514f:	01 d0                	add    eax,edx
c0025151:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0025158:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002515e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0025165:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002516f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0025175:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002517c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0025183:	75 0c                	jne    c0025191 <ATA::open(int, int, void*)+0x61>
c0025185:	83 ec 0c             	sub    esp,0xc
c0025188:	53                   	push   ebx
c0025189:	e8 78 ff ff ff       	call   c0025106 <ATA::detectCHS()>
c002518e:	83 c4 10             	add    esp,0x10
c0025191:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025197:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002519d:	c1 e0 06             	shl    eax,0x6
c00251a0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00251a7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251b1:	d1 e8                	shr    eax,1
c00251b3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00251b9:	6a 04                	push   0x4
c00251bb:	6a 0c                	push   0xc
c00251bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251c4:	50                   	push   eax
c00251c5:	52                   	push   edx
c00251c6:	e8 53 ea ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251cb:	90                   	nop
c00251cc:	90                   	nop
c00251cd:	6a 00                	push   0x0
c00251cf:	6a 0c                	push   0xc
c00251d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251d8:	50                   	push   eax
c00251d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00251df:	e8 3a ea ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251e4:	83 c4 14             	add    esp,0x14
c00251e7:	53                   	push   ebx
c00251e8:	e8 05 f5 fe ff       	call   c00146f2 <PhysicalDisk::startCache()>
c00251ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251f0:	e8 dd 17 ff ff       	call   c00169d2 <createPartitionsForDisk(PhysicalDisk*)>
c00251f5:	31 c0                	xor    eax,eax
c00251f7:	83 c4 18             	add    esp,0x18
c00251fa:	5b                   	pop    ebx
c00251fb:	c3                   	ret    

c00251fc <ATAPI::write(unsigned long long, int, void*)>:
c00251fc:	b8 03 00 00 00       	mov    eax,0x3
c0025201:	c3                   	ret    

c0025202 <ATAPI::close(int, int, void*)>:
c0025202:	83 ec 0c             	sub    esp,0xc
c0025205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025209:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002520f:	85 c0                	test   eax,eax
c0025211:	74 0c                	je     c002521f <ATAPI::close(int, int, void*)+0x1d>
c0025213:	83 ec 0c             	sub    esp,0xc
c0025216:	8b 10                	mov    edx,DWORD PTR [eax]
c0025218:	50                   	push   eax
c0025219:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002521c:	83 c4 10             	add    esp,0x10
c002521f:	31 c0                	xor    eax,eax
c0025221:	83 c4 0c             	add    esp,0xc
c0025224:	c3                   	ret    
c0025225:	90                   	nop

c0025226 <ATAPI::ATAPI()>:
c0025226:	83 ec 0c             	sub    esp,0xc
c0025229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522d:	83 ec 04             	sub    esp,0x4
c0025230:	68 00 08 00 00       	push   0x800
c0025235:	68 bd dd 02 c0       	push   0xc002ddbd
c002523a:	50                   	push   eax
c002523b:	e8 4a f4 fe ff       	call   c001468a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025240:	83 c4 10             	add    esp,0x10
c0025243:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0025248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524c:	89 10                	mov    DWORD PTR [eax],edx
c002524e:	90                   	nop
c002524f:	83 c4 0c             	add    esp,0xc
c0025252:	c3                   	ret    
c0025253:	90                   	nop

c0025254 <ATAPI::readyForCommand()>:
c0025254:	56                   	push   esi
c0025255:	53                   	push   ebx
c0025256:	31 db                	xor    ebx,ebx
c0025258:	50                   	push   eax
c0025259:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002525d:	50                   	push   eax
c002525e:	6a 0c                	push   0xc
c0025260:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0025267:	50                   	push   eax
c0025268:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002526e:	e8 6b ea ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0025273:	83 c4 10             	add    esp,0x10
c0025276:	a8 88                	test   al,0x88
c0025278:	74 23                	je     c002529d <ATAPI::readyForCommand()+0x49>
c002527a:	43                   	inc    ebx
c002527b:	83 fb 63             	cmp    ebx,0x63
c002527e:	7e dd                	jle    c002525d <ATAPI::readyForCommand()+0x9>
c0025280:	51                   	push   ecx
c0025281:	51                   	push   ecx
c0025282:	6a 00                	push   0x0
c0025284:	68 40 42 0f 00       	push   0xf4240
c0025289:	e8 f9 96 ff ff       	call   c001e987 <nanoSleep(unsigned long long)>
c002528e:	83 c4 10             	add    esp,0x10
c0025291:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025297:	75 c4                	jne    c002525d <ATAPI::readyForCommand()+0x9>
c0025299:	31 c0                	xor    eax,eax
c002529b:	eb 02                	jmp    c002529f <ATAPI::readyForCommand()+0x4b>
c002529d:	b0 01                	mov    al,0x1
c002529f:	5a                   	pop    edx
c00252a0:	5b                   	pop    ebx
c00252a1:	5e                   	pop    esi
c00252a2:	c3                   	ret    
c00252a3:	90                   	nop

c00252a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00252a4:	55                   	push   ebp
c00252a5:	57                   	push   edi
c00252a6:	56                   	push   esi
c00252a7:	53                   	push   ebx
c00252a8:	83 ec 20             	sub    esp,0x20
c00252ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00252af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00252b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00252b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00252bf:	6a 01                	push   0x1
c00252c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c8:	50                   	push   eax
c00252c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252cf:	e8 56 eb ff ff       	call   c0023e2a <IDE::enableIRQs(unsigned char, bool)>
c00252d4:	5e                   	pop    esi
c00252d5:	58                   	pop    eax
c00252d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252dd:	50                   	push   eax
c00252de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252e4:	e8 0f e9 ff ff       	call   c0023bf8 <IDE::prepareInterrupt(unsigned char)>
c00252e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00252ec:	e8 63 ff ff ff       	call   c0025254 <ATAPI::readyForCommand()>
c00252f1:	83 c4 10             	add    esp,0x10
c00252f4:	84 c0                	test   al,al
c00252f6:	75 0a                	jne    c0025302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00252f8:	bb 01 00 00 00       	mov    ebx,0x1
c00252fd:	e9 57 02 00 00       	jmp    c0025559 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025302:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025308:	c1 e0 04             	shl    eax,0x4
c002530b:	0f b6 c0             	movzx  eax,al
c002530e:	50                   	push   eax
c002530f:	6a 06                	push   0x6
c0025311:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025318:	50                   	push   eax
c0025319:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002531f:	e8 fa e8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025324:	6a 00                	push   0x0
c0025326:	6a 01                	push   0x1
c0025328:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002532f:	50                   	push   eax
c0025330:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025336:	e8 e3 e8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002533b:	83 c4 20             	add    esp,0x20
c002533e:	0f b6 c3             	movzx  eax,bl
c0025341:	0f b6 df             	movzx  ebx,bh
c0025344:	50                   	push   eax
c0025345:	6a 04                	push   0x4
c0025347:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002534e:	50                   	push   eax
c002534f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025355:	e8 c4 e8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002535a:	53                   	push   ebx
c002535b:	6a 05                	push   0x5
c002535d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025364:	50                   	push   eax
c0025365:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002536b:	e8 ae e8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025370:	83 c4 20             	add    esp,0x20
c0025373:	68 a0 00 00 00       	push   0xa0
c0025378:	6a 07                	push   0x7
c002537a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025381:	50                   	push   eax
c0025382:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025388:	e8 91 e8 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002538d:	83 c4 0c             	add    esp,0xc
c0025390:	6a 01                	push   0x1
c0025392:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025399:	50                   	push   eax
c002539a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253a0:	e8 25 f4 ff ff       	call   c00247ca <IDE::polling(unsigned char, unsigned int)>
c00253a5:	83 c4 10             	add    esp,0x10
c00253a8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00253ae:	84 c0                	test   al,al
c00253b0:	74 23                	je     c00253d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00253b2:	0f b6 d8             	movzx  ebx,al
c00253b5:	0f b6 d2             	movzx  edx,dl
c00253b8:	53                   	push   ebx
c00253b9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00253c0:	50                   	push   eax
c00253c1:	52                   	push   edx
c00253c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253c8:	e8 67 f2 ff ff       	call   c0024634 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00253cd:	83 c4 10             	add    esp,0x10
c00253d0:	e9 84 01 00 00       	jmp    c0025559 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253d5:	0f b6 d2             	movzx  edx,dl
c00253d8:	53                   	push   ebx
c00253d9:	53                   	push   ebx
c00253da:	52                   	push   edx
c00253db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253e1:	e8 26 e8 ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c00253e6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00253ea:	b9 06 00 00 00       	mov    ecx,0x6
c00253ef:	89 c2                	mov    edx,eax
c00253f1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00253f4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00253f8:	83 c4 10             	add    esp,0x10
c00253fb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025401:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025408:	85 db                	test   ebx,ebx
c002540a:	0f 84 ec 00 00 00    	je     c00254fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025410:	51                   	push   ecx
c0025411:	51                   	push   ecx
c0025412:	52                   	push   edx
c0025413:	50                   	push   eax
c0025414:	e8 73 e9 ff ff       	call   c0023d8c <IDE::waitInterrupt(unsigned char)>
c0025419:	83 c4 10             	add    esp,0x10
c002541c:	84 c0                	test   al,al
c002541e:	0f 84 d4 fe ff ff    	je     c00252f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025424:	56                   	push   esi
c0025425:	56                   	push   esi
c0025426:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002542d:	50                   	push   eax
c002542e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025434:	e8 bf e7 ff ff       	call   c0023bf8 <IDE::prepareInterrupt(unsigned char)>
c0025439:	83 c4 0c             	add    esp,0xc
c002543c:	6a 04                	push   0x4
c002543e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025445:	50                   	push   eax
c0025446:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002544c:	e8 8d e8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c0025451:	83 c4 0c             	add    esp,0xc
c0025454:	89 c6                	mov    esi,eax
c0025456:	6a 05                	push   0x5
c0025458:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002545f:	50                   	push   eax
c0025460:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025466:	e8 73 e8 ff ff       	call   c0023cde <IDE::read(unsigned char, unsigned char)>
c002546b:	89 f1                	mov    ecx,esi
c002546d:	0f b6 c0             	movzx  eax,al
c0025470:	0f b6 f1             	movzx  esi,cl
c0025473:	c1 e0 08             	shl    eax,0x8
c0025476:	09 c6                	or     esi,eax
c0025478:	d1 fe                	sar    esi,1
c002547a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025486:	74 41                	je     c00254c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025488:	31 c9                	xor    ecx,ecx
c002548a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025490:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025497:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002549b:	75 0a                	jne    c00254a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002549d:	01 c9                	add    ecx,ecx
c002549f:	01 cd                	add    ebp,ecx
c00254a1:	4b                   	dec    ebx
c00254a2:	e9 54 ff ff ff       	jmp    c00253fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00254a7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00254ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00254b0:	51                   	push   ecx
c00254b1:	51                   	push   ecx
c00254b2:	52                   	push   edx
c00254b3:	50                   	push   eax
c00254b4:	e8 53 e7 ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c00254b9:	89 c2                	mov    edx,eax
c00254bb:	89 f0                	mov    eax,esi
c00254bd:	66 ef                	out    dx,ax
c00254bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00254c3:	83 c4 10             	add    esp,0x10
c00254c6:	41                   	inc    ecx
c00254c7:	eb c1                	jmp    c002548a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00254c9:	31 f6                	xor    esi,esi
c00254cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00254d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00254d8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00254dc:	75 06                	jne    c00254e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00254de:	01 f6                	add    esi,esi
c00254e0:	01 f5                	add    ebp,esi
c00254e2:	eb bd                	jmp    c00254a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00254e4:	51                   	push   ecx
c00254e5:	51                   	push   ecx
c00254e6:	52                   	push   edx
c00254e7:	50                   	push   eax
c00254e8:	e8 1f e7 ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c00254ed:	89 c2                	mov    edx,eax
c00254ef:	66 ed                	in     ax,dx
c00254f1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	46                   	inc    esi
c00254fa:	eb cf                	jmp    c00254cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00254fc:	51                   	push   ecx
c00254fd:	51                   	push   ecx
c00254fe:	52                   	push   edx
c00254ff:	50                   	push   eax
c0025500:	e8 87 e8 ff ff       	call   c0023d8c <IDE::waitInterrupt(unsigned char)>
c0025505:	83 c4 10             	add    esp,0x10
c0025508:	84 c0                	test   al,al
c002550a:	0f 84 e8 fd ff ff    	je     c00252f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025510:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025515:	52                   	push   edx
c0025516:	52                   	push   edx
c0025517:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002551e:	50                   	push   eax
c002551f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025525:	e8 ce e6 ff ff       	call   c0023bf8 <IDE::prepareInterrupt(unsigned char)>
c002552a:	83 c4 10             	add    esp,0x10
c002552d:	50                   	push   eax
c002552e:	50                   	push   eax
c002552f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025536:	50                   	push   eax
c0025537:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002553d:	e8 ca e6 ff ff       	call   c0023c0c <IDE::getBase(unsigned char)>
c0025542:	8d 50 07             	lea    edx,[eax+0x7]
c0025545:	ec                   	in     al,dx
c0025546:	83 c4 10             	add    esp,0x10
c0025549:	a8 88                	test   al,0x88
c002554b:	74 0a                	je     c0025557 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002554d:	4b                   	dec    ebx
c002554e:	75 dd                	jne    c002552d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025550:	bb 02 00 00 00       	mov    ebx,0x2
c0025555:	eb 02                	jmp    c0025559 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025557:	31 db                	xor    ebx,ebx
c0025559:	83 c4 1c             	add    esp,0x1c
c002555c:	89 d8                	mov    eax,ebx
c002555e:	5b                   	pop    ebx
c002555f:	5e                   	pop    esi
c0025560:	5f                   	pop    edi
c0025561:	5d                   	pop    ebp
c0025562:	c3                   	ret    
c0025563:	90                   	nop

c0025564 <ATAPI::diskRemoved()>:
c0025564:	83 ec 18             	sub    esp,0x18
c0025567:	68 c9 dd 02 c0       	push   0xc002ddc9
c002556c:	e8 c6 d8 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025575:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002557c:	83 c4 1c             	add    esp,0x1c
c002557f:	c3                   	ret    

c0025580 <ATAPI::eject()>:
c0025580:	57                   	push   edi
c0025581:	b9 03 00 00 00       	mov    ecx,0x3
c0025586:	53                   	push   ebx
c0025587:	83 ec 14             	sub    esp,0x14
c002558a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002558e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025592:	fc                   	cld    
c0025593:	31 c0                	xor    eax,eax
c0025595:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025597:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002559c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00255a1:	50                   	push   eax
c00255a2:	50                   	push   eax
c00255a3:	6a 00                	push   0x0
c00255a5:	6a 00                	push   0x0
c00255a7:	6a 00                	push   0x0
c00255a9:	6a 02                	push   0x2
c00255ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255af:	50                   	push   eax
c00255b0:	53                   	push   ebx
c00255b1:	e8 ee fc ff ff       	call   c00252a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00255b6:	83 c4 14             	add    esp,0x14
c00255b9:	53                   	push   ebx
c00255ba:	e8 a5 ff ff ff       	call   c0025564 <ATAPI::diskRemoved()>
c00255bf:	83 c4 24             	add    esp,0x24
c00255c2:	31 c0                	xor    eax,eax
c00255c4:	5b                   	pop    ebx
c00255c5:	5f                   	pop    edi
c00255c6:	c3                   	ret    
c00255c7:	90                   	nop

c00255c8 <ATAPI::diskInserted()>:
c00255c8:	53                   	push   ebx
c00255c9:	83 ec 14             	sub    esp,0x14
c00255cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00255d0:	68 e0 dd 02 c0       	push   0xc002dde0
c00255d5:	e8 5d d8 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00255da:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00255e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00255e4:	e8 09 f1 fe ff       	call   c00146f2 <PhysicalDisk::startCache()>
c00255e9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00255ed:	83 c4 18             	add    esp,0x18
c00255f0:	5b                   	pop    ebx
c00255f1:	e9 dc 13 ff ff       	jmp    c00169d2 <createPartitionsForDisk(PhysicalDisk*)>

c00255f6 <ATAPI::detectMedia()>:
c00255f6:	56                   	push   esi
c00255f7:	53                   	push   ebx
c00255f8:	83 ec 28             	sub    esp,0x28
c00255fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255ff:	6a 0c                	push   0xc
c0025601:	6a 00                	push   0x0
c0025603:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025607:	56                   	push   esi
c0025608:	e8 43 b1 fd ff       	call   c0000750 <memset>
c002560d:	58                   	pop    eax
c002560e:	5a                   	pop    edx
c002560f:	6a 00                	push   0x0
c0025611:	6a 00                	push   0x0
c0025613:	6a 00                	push   0x0
c0025615:	6a 00                	push   0x0
c0025617:	56                   	push   esi
c0025618:	53                   	push   ebx
c0025619:	e8 86 fc ff ff       	call   c00252a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002561e:	83 c4 1c             	add    esp,0x1c
c0025621:	6a 0c                	push   0xc
c0025623:	6a 00                	push   0x0
c0025625:	56                   	push   esi
c0025626:	e8 25 b1 fd ff       	call   c0000750 <memset>
c002562b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025630:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025635:	59                   	pop    ecx
c0025636:	58                   	pop    eax
c0025637:	6a 01                	push   0x1
c0025639:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002563d:	50                   	push   eax
c002563e:	6a 00                	push   0x0
c0025640:	6a 12                	push   0x12
c0025642:	56                   	push   esi
c0025643:	53                   	push   ebx
c0025644:	e8 5b fc ff ff       	call   c00252a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025649:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002564d:	83 c4 20             	add    esp,0x20
c0025650:	83 e0 7f             	and    eax,0x7f
c0025653:	3c 70                	cmp    al,0x70
c0025655:	74 15                	je     c002566c <ATAPI::detectMedia()+0x76>
c0025657:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002565e:	75 0c                	jne    c002566c <ATAPI::detectMedia()+0x76>
c0025660:	83 ec 0c             	sub    esp,0xc
c0025663:	53                   	push   ebx
c0025664:	e8 5f ff ff ff       	call   c00255c8 <ATAPI::diskInserted()>
c0025669:	83 c4 10             	add    esp,0x10
c002566c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025670:	83 e0 0f             	and    eax,0xf
c0025673:	3c 02                	cmp    al,0x2
c0025675:	75 1b                	jne    c0025692 <ATAPI::detectMedia()+0x9c>
c0025677:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002567c:	75 2d                	jne    c00256ab <ATAPI::detectMedia()+0xb5>
c002567e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025685:	74 24                	je     c00256ab <ATAPI::detectMedia()+0xb5>
c0025687:	83 ec 0c             	sub    esp,0xc
c002568a:	53                   	push   ebx
c002568b:	e8 d4 fe ff ff       	call   c0025564 <ATAPI::diskRemoved()>
c0025690:	eb 16                	jmp    c00256a8 <ATAPI::detectMedia()+0xb2>
c0025692:	84 c0                	test   al,al
c0025694:	75 15                	jne    c00256ab <ATAPI::detectMedia()+0xb5>
c0025696:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002569d:	75 0c                	jne    c00256ab <ATAPI::detectMedia()+0xb5>
c002569f:	83 ec 0c             	sub    esp,0xc
c00256a2:	53                   	push   ebx
c00256a3:	e8 20 ff ff ff       	call   c00255c8 <ATAPI::diskInserted()>
c00256a8:	83 c4 10             	add    esp,0x10
c00256ab:	83 c4 24             	add    esp,0x24
c00256ae:	5b                   	pop    ebx
c00256af:	5e                   	pop    esi
c00256b0:	c3                   	ret    
c00256b1:	90                   	nop

c00256b2 <ATAPI::open(int, int, void*)>:
c00256b2:	53                   	push   ebx
c00256b3:	83 ec 08             	sub    esp,0x8
c00256b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00256ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256c2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256c8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00256ce:	c1 e0 06             	shl    eax,0x6
c00256d1:	01 d0                	add    eax,edx
c00256d3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00256da:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00256e0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00256e7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00256f1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00256f7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00256fe:	6a 04                	push   0x4
c0025700:	6a 0c                	push   0xc
c0025702:	51                   	push   ecx
c0025703:	52                   	push   edx
c0025704:	e8 15 e5 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025709:	90                   	nop
c002570a:	90                   	nop
c002570b:	6a 00                	push   0x0
c002570d:	6a 0c                	push   0xc
c002570f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025716:	50                   	push   eax
c0025717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002571d:	e8 fc e4 ff ff       	call   c0023c1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025722:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025729:	83 c4 14             	add    esp,0x14
c002572c:	53                   	push   ebx
c002572d:	e8 c4 fe ff ff       	call   c00255f6 <ATAPI::detectMedia()>
c0025732:	31 c0                	xor    eax,eax
c0025734:	83 c4 18             	add    esp,0x18
c0025737:	5b                   	pop    ebx
c0025738:	c3                   	ret    
c0025739:	90                   	nop

c002573a <ATAPI::read(unsigned long long, int, void*)>:
c002573a:	55                   	push   ebp
c002573b:	57                   	push   edi
c002573c:	56                   	push   esi
c002573d:	53                   	push   ebx
c002573e:	83 ec 1c             	sub    esp,0x1c
c0025741:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025745:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025749:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002574d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025754:	74 41                	je     c0025797 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025756:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002575a:	b9 03 00 00 00       	mov    ecx,0x3
c002575f:	fc                   	cld    
c0025760:	31 c0                	xor    eax,eax
c0025762:	86 fb                	xchg   bl,bh
c0025764:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025766:	c1 c3 10             	rol    ebx,0x10
c0025769:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002576e:	89 e8                	mov    eax,ebp
c0025770:	86 fb                	xchg   bl,bh
c0025772:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025776:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002577a:	50                   	push   eax
c002577b:	50                   	push   eax
c002577c:	55                   	push   ebp
c002577d:	c1 e5 0b             	shl    ebp,0xb
c0025780:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025784:	6a 00                	push   0x0
c0025786:	55                   	push   ebp
c0025787:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002578b:	50                   	push   eax
c002578c:	56                   	push   esi
c002578d:	e8 12 fb ff ff       	call   c00252a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025792:	83 c4 20             	add    esp,0x20
c0025795:	eb 1a                	jmp    c00257b1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025797:	83 ec 0c             	sub    esp,0xc
c002579a:	56                   	push   esi
c002579b:	e8 56 fe ff ff       	call   c00255f6 <ATAPI::detectMedia()>
c00257a0:	83 c4 10             	add    esp,0x10
c00257a3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00257aa:	75 aa                	jne    c0025756 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00257ac:	b8 02 00 00 00       	mov    eax,0x2
c00257b1:	83 c4 1c             	add    esp,0x1c
c00257b4:	5b                   	pop    ebx
c00257b5:	5e                   	pop    esi
c00257b6:	5f                   	pop    edi
c00257b7:	5d                   	pop    ebp
c00257b8:	c3                   	ret    
c00257b9:	90                   	nop

c00257ba <SATA::close(int, int, void*)>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257c7:	85 c0                	test   eax,eax
c00257c9:	74 0c                	je     c00257d7 <SATA::close(int, int, void*)+0x1d>
c00257cb:	83 ec 0c             	sub    esp,0xc
c00257ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00257d0:	50                   	push   eax
c00257d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257d4:	83 c4 10             	add    esp,0x10
c00257d7:	31 c0                	xor    eax,eax
c00257d9:	83 c4 0c             	add    esp,0xc
c00257dc:	c3                   	ret    
c00257dd:	90                   	nop

c00257de <SATA::powerSaving(PowerSavingLevel)>:
c00257de:	c3                   	ret    
c00257df:	90                   	nop

c00257e0 <SATA::open(int, int, void*)>:
c00257e0:	56                   	push   esi
c00257e1:	53                   	push   ebx
c00257e2:	50                   	push   eax
c00257e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257eb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00257f5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00257fb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025805:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025809:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025813:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025819:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025820:	e8 d3 a6 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025825:	89 c6                	mov    esi,eax
c0025827:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002582d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025833:	e8 c0 a6 fe ff       	call   c000fef8 <Phys::allocatePage()>
c0025838:	39 c6                	cmp    esi,eax
c002583a:	74 10                	je     c002584c <SATA::open(int, int, void*)+0x6c>
c002583c:	83 ec 0c             	sub    esp,0xc
c002583f:	68 08 dd 02 c0       	push   0xc002dd08
c0025844:	e8 88 50 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0025849:	83 c4 10             	add    esp,0x10
c002584c:	83 ec 0c             	sub    esp,0xc
c002584f:	6a 02                	push   0x2
c0025851:	e8 db c1 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0025856:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002585c:	6a 03                	push   0x3
c002585e:	50                   	push   eax
c002585f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025865:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c002586b:	e8 f8 c9 fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025870:	83 c4 14             	add    esp,0x14
c0025873:	53                   	push   ebx
c0025874:	e8 79 ee fe ff       	call   c00146f2 <PhysicalDisk::startCache()>
c0025879:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002587c:	e8 51 11 ff ff       	call   c00169d2 <createPartitionsForDisk(PhysicalDisk*)>
c0025881:	83 c4 14             	add    esp,0x14
c0025884:	31 c0                	xor    eax,eax
c0025886:	5b                   	pop    ebx
c0025887:	5e                   	pop    esi
c0025888:	c3                   	ret    
c0025889:	90                   	nop

c002588a <SATA::SATA()>:
c002588a:	83 ec 0c             	sub    esp,0xc
c002588d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025891:	83 ec 04             	sub    esp,0x4
c0025894:	68 00 02 00 00       	push   0x200
c0025899:	68 1c dd 02 c0       	push   0xc002dd1c
c002589e:	50                   	push   eax
c002589f:	e8 e6 ed fe ff       	call   c001468a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00258a4:	83 c4 10             	add    esp,0x10
c00258a7:	ba 8c dd 02 c0       	mov    edx,0xc002dd8c
c00258ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b0:	89 10                	mov    DWORD PTR [eax],edx
c00258b2:	90                   	nop
c00258b3:	83 c4 0c             	add    esp,0xc
c00258b6:	c3                   	ret    
c00258b7:	90                   	nop

c00258b8 <SATA::access(unsigned long long, int, void*, bool)>:
c00258b8:	55                   	push   ebp
c00258b9:	57                   	push   edi
c00258ba:	56                   	push   esi
c00258bb:	53                   	push   ebx
c00258bc:	83 ec 2c             	sub    esp,0x2c
c00258bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00258c3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00258c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00258cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00258cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00258d3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00258d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258dc:	7e 10                	jle    c00258ee <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00258de:	83 ec 0c             	sub    esp,0xc
c00258e1:	68 2c dd 02 c0       	push   0xc002dd2c
c00258e6:	e8 e6 4f ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00258eb:	83 c4 10             	add    esp,0x10
c00258ee:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00258f4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00258fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025900:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025904:	89 d0                	mov    eax,edx
c0025906:	c1 e0 07             	shl    eax,0x7
c0025909:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002590d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025917:	51                   	push   ecx
c0025918:	8d 42 02             	lea    eax,[edx+0x2]
c002591b:	51                   	push   ecx
c002591c:	c1 e0 07             	shl    eax,0x7
c002591f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025923:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025927:	50                   	push   eax
c0025928:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002592e:	e8 af ef ff ff       	call   c00248e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025933:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	b8 01 00 00 00       	mov    eax,0x1
c002593f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025944:	0f 84 cb 01 00 00    	je     c0025b15 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002594a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002594e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025952:	c1 e0 09             	shl    eax,0x9
c0025955:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002595a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002595e:	74 0e                	je     c002596e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025960:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025966:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002596a:	89 c1                	mov    ecx,eax
c002596c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002596e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025972:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025978:	8d 42 02             	lea    eax,[edx+0x2]
c002597b:	c1 e0 07             	shl    eax,0x7
c002597e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025982:	8b 00                	mov    eax,DWORD PTR [eax]
c0025984:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002598a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025994:	c1 e1 05             	shl    ecx,0x5
c0025997:	01 c8                	add    eax,ecx
c0025999:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002599d:	83 e1 01             	and    ecx,0x1
c00259a0:	89 ce                	mov    esi,ecx
c00259a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00259a4:	c1 e6 06             	shl    esi,0x6
c00259a7:	83 e1 bf             	and    ecx,0xffffffbf
c00259aa:	09 f1                	or     ecx,esi
c00259ac:	88 08                	mov    BYTE PTR [eax],cl
c00259ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00259b0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00259b6:	81 c9 05 00 01 00    	or     ecx,0x10005
c00259bc:	89 08                	mov    DWORD PTR [eax],ecx
c00259be:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00259c4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00259ca:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00259d0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00259d3:	50                   	push   eax
c00259d4:	68 90 00 00 00       	push   0x90
c00259d9:	6a 00                	push   0x0
c00259db:	56                   	push   esi
c00259dc:	e8 6f ad fd ff       	call   c0000750 <memset>
c00259e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00259e7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00259eb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00259f1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00259f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00259f9:	83 c4 10             	add    esp,0x10
c00259fc:	48                   	dec    eax
c00259fd:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a02:	89 c1                	mov    ecx,eax
c0025a04:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025a0a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a0f:	09 c8                	or     eax,ecx
c0025a11:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025a17:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025a1a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025a21:	66 25 00 7f          	and    ax,0x7f00
c0025a25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025a29:	66 0d 27 80          	or     ax,0x8027
c0025a2d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025a32:	66 89 06             	mov    WORD PTR [esi],ax
c0025a35:	19 c0                	sbb    eax,eax
c0025a37:	83 e0 f0             	and    eax,0xfffffff0
c0025a3a:	83 c0 35             	add    eax,0x35
c0025a3d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025a40:	89 e8                	mov    eax,ebp
c0025a42:	c1 e8 10             	shr    eax,0x10
c0025a45:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025a48:	89 e8                	mov    eax,ebp
c0025a4a:	c1 e8 18             	shr    eax,0x18
c0025a4d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025a50:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025a54:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025a57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025a5b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025a5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025a62:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025a66:	89 d6                	mov    esi,edx
c0025a68:	31 c0                	xor    eax,eax
c0025a6a:	c1 e6 07             	shl    esi,0x7
c0025a6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025a71:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025a77:	80 e1 88             	and    cl,0x88
c0025a7a:	74 0a                	je     c0025a86 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025a7c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a81:	74 0a                	je     c0025a8d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025a83:	40                   	inc    eax
c0025a84:	eb eb                	jmp    c0025a71 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025a86:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a8b:	75 0a                	jne    c0025a97 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025a8d:	83 ec 0c             	sub    esp,0xc
c0025a90:	68 65 dd 02 c0       	push   0xc002dd65
c0025a95:	eb 56                	jmp    c0025aed <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025a97:	b8 01 00 00 00       	mov    eax,0x1
c0025a9c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025aa0:	c1 e2 07             	shl    edx,0x7
c0025aa3:	d3 e0                	shl    eax,cl
c0025aa5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025aa9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025aaf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025ab5:	85 c8                	test   eax,ecx
c0025ab7:	74 20                	je     c0025ad9 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025ab9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025abf:	0f ba e1 1e          	bt     ecx,0x1e
c0025ac3:	73 ea                	jae    c0025aaf <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025ac5:	83 ec 0c             	sub    esp,0xc
c0025ac8:	68 73 dd 02 c0       	push   0xc002dd73
c0025acd:	e8 ff 4d ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0025ad2:	83 c4 10             	add    esp,0x10
c0025ad5:	31 c0                	xor    eax,eax
c0025ad7:	eb 3c                	jmp    c0025b15 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025ad9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025adf:	0f ba e0 1e          	bt     eax,0x1e
c0025ae3:	73 17                	jae    c0025afc <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025ae5:	83 ec 0c             	sub    esp,0xc
c0025ae8:	68 73 dd 02 c0       	push   0xc002dd73
c0025aed:	e8 df 4d ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0025af2:	83 c4 10             	add    esp,0x10
c0025af5:	b8 01 00 00 00       	mov    eax,0x1
c0025afa:	eb 19                	jmp    c0025b15 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025afc:	31 c0                	xor    eax,eax
c0025afe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025b03:	75 10                	jne    c0025b15 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025b05:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025b0b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025b0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025b13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b15:	83 c4 2c             	add    esp,0x2c
c0025b18:	5b                   	pop    ebx
c0025b19:	5e                   	pop    esi
c0025b1a:	5f                   	pop    edi
c0025b1b:	5d                   	pop    ebp
c0025b1c:	c3                   	ret    
c0025b1d:	90                   	nop

c0025b1e <SATA::read(unsigned long long, int, void*)>:
c0025b1e:	57                   	push   edi
c0025b1f:	b8 04 00 00 00       	mov    eax,0x4
c0025b24:	56                   	push   esi
c0025b25:	53                   	push   ebx
c0025b26:	83 ec 10             	sub    esp,0x10
c0025b29:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025b31:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025b34:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025b38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025b3c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025b42:	77 3b                	ja     c0025b7f <SATA::read(unsigned long long, int, void*)+0x61>
c0025b44:	b8 06 00 00 00       	mov    eax,0x6
c0025b49:	85 d2                	test   edx,edx
c0025b4b:	74 32                	je     c0025b7f <SATA::read(unsigned long long, int, void*)+0x61>
c0025b4d:	50                   	push   eax
c0025b4e:	50                   	push   eax
c0025b4f:	6a 00                	push   0x0
c0025b51:	52                   	push   edx
c0025b52:	53                   	push   ebx
c0025b53:	57                   	push   edi
c0025b54:	56                   	push   esi
c0025b55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025b59:	e8 5a fd ff ff       	call   c00258b8 <SATA::access(unsigned long long, int, void*, bool)>
c0025b5e:	83 c4 20             	add    esp,0x20
c0025b61:	85 c0                	test   eax,eax
c0025b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025b67:	75 11                	jne    c0025b7a <SATA::read(unsigned long long, int, void*)+0x5c>
c0025b69:	01 1d 34 36 03 c0    	add    DWORD PTR ds:0xc0033634,ebx
c0025b6f:	e8 c8 ad fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025b78:	eb 05                	jmp    c0025b7f <SATA::read(unsigned long long, int, void*)+0x61>
c0025b7a:	b8 01 00 00 00       	mov    eax,0x1
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	5b                   	pop    ebx
c0025b83:	5e                   	pop    esi
c0025b84:	5f                   	pop    edi
c0025b85:	c3                   	ret    

c0025b86 <SATA::write(unsigned long long, int, void*)>:
c0025b86:	55                   	push   ebp
c0025b87:	b8 04 00 00 00       	mov    eax,0x4
c0025b8c:	57                   	push   edi
c0025b8d:	56                   	push   esi
c0025b8e:	53                   	push   ebx
c0025b8f:	83 ec 1c             	sub    esp,0x1c
c0025b92:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025b96:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025b9a:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025b9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025ba1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025ba5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025bab:	77 56                	ja     c0025c03 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025bad:	b8 06 00 00 00       	mov    eax,0x6
c0025bb2:	85 ff                	test   edi,edi
c0025bb4:	74 4d                	je     c0025c03 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025bb6:	89 ee                	mov    esi,ebp
c0025bb8:	c1 e6 09             	shl    esi,0x9
c0025bbb:	01 fe                	add    esi,edi
c0025bbd:	89 c8                	mov    eax,ecx
c0025bbf:	89 da                	mov    edx,ebx
c0025bc1:	83 c0 01             	add    eax,0x1
c0025bc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bc8:	83 d2 00             	adc    edx,0x0
c0025bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025bcf:	50                   	push   eax
c0025bd0:	50                   	push   eax
c0025bd1:	6a 01                	push   0x1
c0025bd3:	57                   	push   edi
c0025bd4:	81 c7 00 02 00 00    	add    edi,0x200
c0025bda:	6a 01                	push   0x1
c0025bdc:	53                   	push   ebx
c0025bdd:	51                   	push   ecx
c0025bde:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025be2:	e8 d1 fc ff ff       	call   c00258b8 <SATA::access(unsigned long long, int, void*, bool)>
c0025be7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025beb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025bef:	83 c4 20             	add    esp,0x20
c0025bf2:	39 f7                	cmp    edi,esi
c0025bf4:	75 c7                	jne    c0025bbd <SATA::write(unsigned long long, int, void*)+0x37>
c0025bf6:	01 2d 30 36 03 c0    	add    DWORD PTR ds:0xc0033630,ebp
c0025bfc:	e8 3b ad fe ff       	call   c001093c <VgaText::updateDiskUsage()>
c0025c01:	31 c0                	xor    eax,eax
c0025c03:	83 c4 1c             	add    esp,0x1c
c0025c06:	5b                   	pop    ebx
c0025c07:	5e                   	pop    esi
c0025c08:	5f                   	pop    edi
c0025c09:	5d                   	pop    ebp
c0025c0a:	c3                   	ret    
c0025c0b:	90                   	nop

c0025c0c <SATAPI::write(unsigned long long, int, void*)>:
c0025c0c:	b8 03 00 00 00       	mov    eax,0x3
c0025c11:	c3                   	ret    

c0025c12 <SATAPI::close(int, int, void*)>:
c0025c12:	83 ec 0c             	sub    esp,0xc
c0025c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c1f:	85 c0                	test   eax,eax
c0025c21:	74 0c                	je     c0025c2f <SATAPI::close(int, int, void*)+0x1d>
c0025c23:	83 ec 0c             	sub    esp,0xc
c0025c26:	8b 10                	mov    edx,DWORD PTR [eax]
c0025c28:	50                   	push   eax
c0025c29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025c2c:	83 c4 10             	add    esp,0x10
c0025c2f:	31 c0                	xor    eax,eax
c0025c31:	83 c4 0c             	add    esp,0xc
c0025c34:	c3                   	ret    
c0025c35:	90                   	nop

c0025c36 <SATAPI::SATAPI()>:
c0025c36:	83 ec 0c             	sub    esp,0xc
c0025c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3d:	83 ec 04             	sub    esp,0x4
c0025c40:	68 00 08 00 00       	push   0x800
c0025c45:	68 bc dd 02 c0       	push   0xc002ddbc
c0025c4a:	50                   	push   eax
c0025c4b:	e8 3a ea fe ff       	call   c001468a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025c50:	83 c4 10             	add    esp,0x10
c0025c53:	ba 68 de 02 c0       	mov    edx,0xc002de68
c0025c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5c:	89 10                	mov    DWORD PTR [eax],edx
c0025c5e:	90                   	nop
c0025c5f:	83 c4 0c             	add    esp,0xc
c0025c62:	c3                   	ret    
c0025c63:	90                   	nop

c0025c64 <SATAPI::diskRemoved()>:
c0025c64:	83 ec 18             	sub    esp,0x18
c0025c67:	68 c8 dd 02 c0       	push   0xc002ddc8
c0025c6c:	e8 c6 d1 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c75:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025c7c:	83 c4 1c             	add    esp,0x1c
c0025c7f:	c3                   	ret    

c0025c80 <SATAPI::diskInserted()>:
c0025c80:	53                   	push   ebx
c0025c81:	83 ec 14             	sub    esp,0x14
c0025c84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025c88:	68 df dd 02 c0       	push   0xc002dddf
c0025c8d:	e8 a5 d1 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025c92:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025c99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025c9c:	e8 51 ea fe ff       	call   c00146f2 <PhysicalDisk::startCache()>
c0025ca1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025ca5:	83 c4 18             	add    esp,0x18
c0025ca8:	5b                   	pop    ebx
c0025ca9:	e9 24 0d ff ff       	jmp    c00169d2 <createPartitionsForDisk(PhysicalDisk*)>

c0025cae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025cae:	55                   	push   ebp
c0025caf:	57                   	push   edi
c0025cb0:	56                   	push   esi
c0025cb1:	53                   	push   ebx
c0025cb2:	83 ec 34             	sub    esp,0x34
c0025cb5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025cb9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025cbd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025cc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025cc5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025cc9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025ccf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025cd9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025cdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025ce3:	c1 e0 07             	shl    eax,0x7
c0025ce6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025cea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025cee:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025cf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cfc:	8d 58 02             	lea    ebx,[eax+0x2]
c0025cff:	c1 e3 07             	shl    ebx,0x7
c0025d02:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025d06:	53                   	push   ebx
c0025d07:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025d0d:	e8 d0 eb ff ff       	call   c00248e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025d12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025d16:	83 c4 10             	add    esp,0x10
c0025d19:	b8 01 00 00 00       	mov    eax,0x1
c0025d1e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025d23:	0f 84 85 01 00 00    	je     c0025eae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025d29:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025d31:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025d37:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025d3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d41:	c1 e1 05             	shl    ecx,0x5
c0025d44:	01 c8                	add    eax,ecx
c0025d46:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025d48:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025d4e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025d54:	89 08                	mov    DWORD PTR [eax],ecx
c0025d56:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d5c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025d62:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025d68:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025d6b:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025d6e:	50                   	push   eax
c0025d6f:	68 90 00 00 00       	push   0x90
c0025d74:	6a 00                	push   0x0
c0025d76:	53                   	push   ebx
c0025d77:	e8 d4 a9 fd ff       	call   c0000750 <memset>
c0025d7c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025d80:	b9 0c 00 00 00       	mov    ecx,0xc
c0025d85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d87:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025d8d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025d91:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025d97:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025d9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025d9f:	48                   	dec    eax
c0025da0:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025da5:	89 c1                	mov    ecx,eax
c0025da7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025dad:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025db2:	09 c8                	or     eax,ecx
c0025db4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025dba:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025dbd:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025dc4:	66 25 00 7f          	and    ax,0x7f00
c0025dc8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025dcc:	66 0d 27 80          	or     ax,0x8027
c0025dd0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025dd4:	66 89 03             	mov    WORD PTR [ebx],ax
c0025dd7:	89 d0                	mov    eax,edx
c0025dd9:	c1 ea 18             	shr    edx,0x18
c0025ddc:	c1 e8 10             	shr    eax,0x10
c0025ddf:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025de2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025de5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025de9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025dec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025df0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025df3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025df7:	83 c4 10             	add    esp,0x10
c0025dfa:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025dfe:	31 c0                	xor    eax,eax
c0025e00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025e04:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025e0a:	80 e2 88             	and    dl,0x88
c0025e0d:	74 0a                	je     c0025e19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025e0f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e14:	74 0a                	je     c0025e20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025e16:	40                   	inc    eax
c0025e17:	eb eb                	jmp    c0025e04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025e19:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e1e:	75 0f                	jne    c0025e2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025e20:	83 ec 0c             	sub    esp,0xc
c0025e23:	68 65 dd 02 c0       	push   0xc002dd65
c0025e28:	e8 a4 4a ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0025e2d:	eb 3f                	jmp    c0025e6e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025e2f:	ba 01 00 00 00       	mov    edx,0x1
c0025e34:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e3c:	d3 e2                	shl    edx,cl
c0025e3e:	c1 e0 07             	shl    eax,0x7
c0025e41:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025e47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025e4b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025e51:	85 ca                	test   edx,ecx
c0025e53:	74 23                	je     c0025e78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025e55:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025e5b:	0f ba e1 1e          	bt     ecx,0x1e
c0025e5f:	73 ea                	jae    c0025e4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025e61:	83 ec 0c             	sub    esp,0xc
c0025e64:	68 f7 dd 02 c0       	push   0xc002ddf7
c0025e69:	e8 c9 cf fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0025e6e:	83 c4 10             	add    esp,0x10
c0025e71:	b8 01 00 00 00       	mov    eax,0x1
c0025e76:	eb 36                	jmp    c0025eae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025e78:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025e7e:	0f ba e0 1e          	bt     eax,0x1e
c0025e82:	73 0a                	jae    c0025e8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025e84:	83 ec 0c             	sub    esp,0xc
c0025e87:	68 0a de 02 c0       	push   0xc002de0a
c0025e8c:	eb db                	jmp    c0025e69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025e8e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025e93:	74 17                	je     c0025eac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025e95:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025e9a:	74 10                	je     c0025eac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025e9c:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025ea2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ea6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025eaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025eac:	31 c0                	xor    eax,eax
c0025eae:	83 c4 2c             	add    esp,0x2c
c0025eb1:	5b                   	pop    ebx
c0025eb2:	5e                   	pop    esi
c0025eb3:	5f                   	pop    edi
c0025eb4:	5d                   	pop    ebp
c0025eb5:	c3                   	ret    

c0025eb6 <SATAPI::eject()>:
c0025eb6:	57                   	push   edi
c0025eb7:	b9 03 00 00 00       	mov    ecx,0x3
c0025ebc:	53                   	push   ebx
c0025ebd:	83 ec 14             	sub    esp,0x14
c0025ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025ec4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ec8:	fc                   	cld    
c0025ec9:	31 c0                	xor    eax,eax
c0025ecb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ecd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ed2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ed7:	50                   	push   eax
c0025ed8:	6a 00                	push   0x0
c0025eda:	6a 00                	push   0x0
c0025edc:	6a 00                	push   0x0
c0025ede:	6a 00                	push   0x0
c0025ee0:	6a 02                	push   0x2
c0025ee2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025ee6:	50                   	push   eax
c0025ee7:	53                   	push   ebx
c0025ee8:	e8 c1 fd ff ff       	call   c0025cae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025eed:	83 c4 14             	add    esp,0x14
c0025ef0:	53                   	push   ebx
c0025ef1:	e8 6e fd ff ff       	call   c0025c64 <SATAPI::diskRemoved()>
c0025ef6:	83 c4 24             	add    esp,0x24
c0025ef9:	31 c0                	xor    eax,eax
c0025efb:	5b                   	pop    ebx
c0025efc:	5f                   	pop    edi
c0025efd:	c3                   	ret    

c0025efe <SATAPI::detectMedia()>:
c0025efe:	56                   	push   esi
c0025eff:	53                   	push   ebx
c0025f00:	83 ec 28             	sub    esp,0x28
c0025f03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f07:	6a 0c                	push   0xc
c0025f09:	6a 00                	push   0x0
c0025f0b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025f0f:	56                   	push   esi
c0025f10:	e8 3b a8 fd ff       	call   c0000750 <memset>
c0025f15:	83 c4 0c             	add    esp,0xc
c0025f18:	6a 00                	push   0x0
c0025f1a:	6a 00                	push   0x0
c0025f1c:	6a 00                	push   0x0
c0025f1e:	6a 00                	push   0x0
c0025f20:	6a 00                	push   0x0
c0025f22:	56                   	push   esi
c0025f23:	53                   	push   ebx
c0025f24:	e8 85 fd ff ff       	call   c0025cae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f29:	83 c4 1c             	add    esp,0x1c
c0025f2c:	6a 0c                	push   0xc
c0025f2e:	6a 00                	push   0x0
c0025f30:	56                   	push   esi
c0025f31:	e8 1a a8 fd ff       	call   c0000750 <memset>
c0025f36:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025f3b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025f40:	83 c4 0c             	add    esp,0xc
c0025f43:	6a 01                	push   0x1
c0025f45:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025f49:	50                   	push   eax
c0025f4a:	6a 00                	push   0x0
c0025f4c:	6a 00                	push   0x0
c0025f4e:	6a 12                	push   0x12
c0025f50:	56                   	push   esi
c0025f51:	53                   	push   ebx
c0025f52:	e8 57 fd ff ff       	call   c0025cae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f57:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025f5b:	83 c4 20             	add    esp,0x20
c0025f5e:	83 e0 7f             	and    eax,0x7f
c0025f61:	3c 70                	cmp    al,0x70
c0025f63:	74 15                	je     c0025f7a <SATAPI::detectMedia()+0x7c>
c0025f65:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025f6c:	75 0c                	jne    c0025f7a <SATAPI::detectMedia()+0x7c>
c0025f6e:	83 ec 0c             	sub    esp,0xc
c0025f71:	53                   	push   ebx
c0025f72:	e8 09 fd ff ff       	call   c0025c80 <SATAPI::diskInserted()>
c0025f77:	83 c4 10             	add    esp,0x10
c0025f7a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025f7e:	83 e0 0f             	and    eax,0xf
c0025f81:	3c 02                	cmp    al,0x2
c0025f83:	75 1b                	jne    c0025fa0 <SATAPI::detectMedia()+0xa2>
c0025f85:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025f8a:	75 2d                	jne    c0025fb9 <SATAPI::detectMedia()+0xbb>
c0025f8c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025f93:	74 24                	je     c0025fb9 <SATAPI::detectMedia()+0xbb>
c0025f95:	83 ec 0c             	sub    esp,0xc
c0025f98:	53                   	push   ebx
c0025f99:	e8 c6 fc ff ff       	call   c0025c64 <SATAPI::diskRemoved()>
c0025f9e:	eb 16                	jmp    c0025fb6 <SATAPI::detectMedia()+0xb8>
c0025fa0:	84 c0                	test   al,al
c0025fa2:	75 15                	jne    c0025fb9 <SATAPI::detectMedia()+0xbb>
c0025fa4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025fab:	75 0c                	jne    c0025fb9 <SATAPI::detectMedia()+0xbb>
c0025fad:	83 ec 0c             	sub    esp,0xc
c0025fb0:	53                   	push   ebx
c0025fb1:	e8 ca fc ff ff       	call   c0025c80 <SATAPI::diskInserted()>
c0025fb6:	83 c4 10             	add    esp,0x10
c0025fb9:	83 c4 24             	add    esp,0x24
c0025fbc:	5b                   	pop    ebx
c0025fbd:	5e                   	pop    esi
c0025fbe:	c3                   	ret    
c0025fbf:	90                   	nop

c0025fc0 <SATAPI::open(int, int, void*)>:
c0025fc0:	56                   	push   esi
c0025fc1:	53                   	push   ebx
c0025fc2:	50                   	push   eax
c0025fc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025fc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fcb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025fd5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025fdb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025fe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025ff3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025ff9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0026000:	e8 f3 9e fe ff       	call   c000fef8 <Phys::allocatePage()>
c0026005:	89 c6                	mov    esi,eax
c0026007:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002600d:	81 c6 00 10 00 00    	add    esi,0x1000
c0026013:	e8 e0 9e fe ff       	call   c000fef8 <Phys::allocatePage()>
c0026018:	39 c6                	cmp    esi,eax
c002601a:	74 10                	je     c002602c <SATAPI::open(int, int, void*)+0x6c>
c002601c:	83 ec 0c             	sub    esp,0xc
c002601f:	68 1f de 02 c0       	push   0xc002de1f
c0026024:	e8 a8 48 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0026029:	83 c4 10             	add    esp,0x10
c002602c:	83 ec 0c             	sub    esp,0xc
c002602f:	6a 02                	push   0x2
c0026031:	e8 fb b9 fe ff       	call   c0011a31 <Virt::allocateKernelVirtualPages(int)>
c0026036:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002603c:	6a 03                	push   0x3
c002603e:	50                   	push   eax
c002603f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0026045:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c002604b:	e8 18 c2 fe ff       	call   c0012268 <VAS::mapPage(unsigned long, unsigned long, int)>
c0026050:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0026057:	83 c4 14             	add    esp,0x14
c002605a:	53                   	push   ebx
c002605b:	e8 9e fe ff ff       	call   c0025efe <SATAPI::detectMedia()>
c0026060:	83 c4 14             	add    esp,0x14
c0026063:	31 c0                	xor    eax,eax
c0026065:	5b                   	pop    ebx
c0026066:	5e                   	pop    esi
c0026067:	c3                   	ret    

c0026068 <SATAPI::read(unsigned long long, int, void*)>:
c0026068:	55                   	push   ebp
c0026069:	57                   	push   edi
c002606a:	56                   	push   esi
c002606b:	53                   	push   ebx
c002606c:	83 ec 1c             	sub    esp,0x1c
c002606f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026073:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026077:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002607b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0026082:	74 19                	je     c002609d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0026084:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0026089:	7e 2e                	jle    c00260b9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002608b:	83 ec 0c             	sub    esp,0xc
c002608e:	68 35 de 02 c0       	push   0xc002de35
c0026093:	e8 39 48 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0026098:	83 c4 10             	add    esp,0x10
c002609b:	eb 1c                	jmp    c00260b9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002609d:	83 ec 0c             	sub    esp,0xc
c00260a0:	55                   	push   ebp
c00260a1:	e8 58 fe ff ff       	call   c0025efe <SATAPI::detectMedia()>
c00260a6:	83 c4 10             	add    esp,0x10
c00260a9:	b8 02 00 00 00       	mov    eax,0x2
c00260ae:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00260b5:	75 cd                	jne    c0026084 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00260b7:	eb 49                	jmp    c0026102 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00260b9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00260bd:	b9 03 00 00 00       	mov    ecx,0x3
c00260c2:	fc                   	cld    
c00260c3:	31 c0                	xor    eax,eax
c00260c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00260c7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00260cc:	89 d8                	mov    eax,ebx
c00260ce:	86 e0                	xchg   al,ah
c00260d0:	c1 c0 10             	rol    eax,0x10
c00260d3:	86 e0                	xchg   al,ah
c00260d5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00260d9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00260dd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00260e1:	50                   	push   eax
c00260e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00260e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260ea:	56                   	push   esi
c00260eb:	53                   	push   ebx
c00260ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00260f0:	c1 e0 0b             	shl    eax,0xb
c00260f3:	50                   	push   eax
c00260f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00260f8:	50                   	push   eax
c00260f9:	55                   	push   ebp
c00260fa:	e8 af fb ff ff       	call   c0025cae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00260ff:	83 c4 20             	add    esp,0x20
c0026102:	83 c4 1c             	add    esp,0x1c
c0026105:	5b                   	pop    ebx
c0026106:	5e                   	pop    esi
c0026107:	5f                   	pop    edi
c0026108:	5d                   	pop    ebp
c0026109:	c3                   	ret    

c002610a <AVX::open(int, int, void*)>:
c002610a:	83 ec 0c             	sub    esp,0xc
c002610d:	e8 46 11 00 00       	call   c0027258 <avxInit>
c0026112:	b8 00 00 00 00       	mov    eax,0x0
c0026117:	83 c4 0c             	add    esp,0xc
c002611a:	c3                   	ret    
c002611b:	90                   	nop

c002611c <AVX::close(int, int, void*)>:
c002611c:	83 ec 0c             	sub    esp,0xc
c002611f:	e8 35 11 00 00       	call   c0027259 <avxClose>
c0026124:	b8 00 00 00 00       	mov    eax,0x0
c0026129:	83 c4 0c             	add    esp,0xc
c002612c:	c3                   	ret    
c002612d:	90                   	nop

c002612e <AVX::available()>:
c002612e:	83 ec 0c             	sub    esp,0xc
c0026131:	e8 1a 11 00 00       	call   c0027250 <avxDetect>
c0026136:	85 c0                	test   eax,eax
c0026138:	0f 95 c0             	setne  al
c002613b:	83 c4 0c             	add    esp,0xc
c002613e:	c3                   	ret    
c002613f:	90                   	nop

c0026140 <AVX::save(void*)>:
c0026140:	83 ec 0c             	sub    esp,0xc
c0026143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026147:	83 ec 0c             	sub    esp,0xc
c002614a:	50                   	push   eax
c002614b:	e8 06 11 00 00       	call   c0027256 <avxSave>
c0026150:	83 c4 10             	add    esp,0x10
c0026153:	90                   	nop
c0026154:	83 c4 0c             	add    esp,0xc
c0026157:	c3                   	ret    

c0026158 <AVX::load(void*)>:
c0026158:	83 ec 0c             	sub    esp,0xc
c002615b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002615f:	83 ec 0c             	sub    esp,0xc
c0026162:	50                   	push   eax
c0026163:	e8 ef 10 00 00       	call   c0027257 <avxLoad>
c0026168:	83 c4 10             	add    esp,0x10
c002616b:	90                   	nop
c002616c:	83 c4 0c             	add    esp,0xc
c002616f:	c3                   	ret    

c0026170 <AVX::AVX()>:
c0026170:	83 ec 0c             	sub    esp,0xc
c0026173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026177:	83 ec 08             	sub    esp,0x8
c002617a:	68 98 de 02 c0       	push   0xc002de98
c002617f:	50                   	push   eax
c0026180:	e8 e3 e5 fe ff       	call   c0014768 <FPU::FPU(char const*)>
c0026185:	83 c4 10             	add    esp,0x10
c0026188:	ba a8 de 02 c0       	mov    edx,0xc002dea8
c002618d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026191:	89 10                	mov    DWORD PTR [eax],edx
c0026193:	90                   	nop
c0026194:	83 c4 0c             	add    esp,0xc
c0026197:	c3                   	ret    

c0026198 <MMX::available()>:
c0026198:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c002619d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00261a3:	83 e0 20             	and    eax,0x20
c00261a6:	84 c0                	test   al,al
c00261a8:	0f 95 c0             	setne  al
c00261ab:	c3                   	ret    

c00261ac <MMX::open(int, int, void*)>:
c00261ac:	83 ec 0c             	sub    esp,0xc
c00261af:	e8 2e 11 00 00       	call   c00272e2 <x87Init>
c00261b4:	b8 00 00 00 00       	mov    eax,0x0
c00261b9:	83 c4 0c             	add    esp,0xc
c00261bc:	c3                   	ret    
c00261bd:	90                   	nop

c00261be <MMX::close(int, int, void*)>:
c00261be:	83 ec 0c             	sub    esp,0xc
c00261c1:	e8 36 11 00 00       	call   c00272fc <x87Close>
c00261c6:	b8 00 00 00 00       	mov    eax,0x0
c00261cb:	83 c4 0c             	add    esp,0xc
c00261ce:	c3                   	ret    
c00261cf:	90                   	nop

c00261d0 <MMX::save(void*)>:
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261d7:	83 ec 0c             	sub    esp,0xc
c00261da:	50                   	push   eax
c00261db:	e8 f1 10 00 00       	call   c00272d1 <x87Save>
c00261e0:	83 c4 10             	add    esp,0x10
c00261e3:	90                   	nop
c00261e4:	83 c4 0c             	add    esp,0xc
c00261e7:	c3                   	ret    

c00261e8 <MMX::load(void*)>:
c00261e8:	83 ec 0c             	sub    esp,0xc
c00261eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261ef:	83 ec 0c             	sub    esp,0xc
c00261f2:	50                   	push   eax
c00261f3:	e8 e2 10 00 00       	call   c00272da <x87Load>
c00261f8:	83 c4 10             	add    esp,0x10
c00261fb:	90                   	nop
c00261fc:	83 c4 0c             	add    esp,0xc
c00261ff:	c3                   	ret    

c0026200 <MMX::MMX()>:
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026207:	83 ec 08             	sub    esp,0x8
c002620a:	68 d8 de 02 c0       	push   0xc002ded8
c002620f:	50                   	push   eax
c0026210:	e8 53 e5 fe ff       	call   c0014768 <FPU::FPU(char const*)>
c0026215:	83 c4 10             	add    esp,0x10
c0026218:	ba e8 de 02 c0       	mov    edx,0xc002dee8
c002621d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026221:	89 10                	mov    DWORD PTR [eax],edx
c0026223:	90                   	nop
c0026224:	83 c4 0c             	add    esp,0xc
c0026227:	c3                   	ret    

c0026228 <SSE::open(int, int, void*)>:
c0026228:	83 ec 0c             	sub    esp,0xc
c002622b:	e8 64 10 00 00       	call   c0027294 <sseInit>
c0026230:	b8 00 00 00 00       	mov    eax,0x0
c0026235:	83 c4 0c             	add    esp,0xc
c0026238:	c3                   	ret    
c0026239:	90                   	nop

c002623a <SSE::close(int, int, void*)>:
c002623a:	83 ec 0c             	sub    esp,0xc
c002623d:	e8 62 10 00 00       	call   c00272a4 <sseClose>
c0026242:	b8 00 00 00 00       	mov    eax,0x0
c0026247:	83 c4 0c             	add    esp,0xc
c002624a:	c3                   	ret    
c002624b:	90                   	nop

c002624c <SSE::available()>:
c002624c:	83 ec 1c             	sub    esp,0x1c
c002624f:	e8 1c 10 00 00       	call   c0027270 <absolutelyNoChanceInHell>
c0026254:	85 c0                	test   eax,eax
c0026256:	0f 95 c0             	setne  al
c0026259:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002625d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0026261:	83 c4 1c             	add    esp,0x1c
c0026264:	c3                   	ret    
c0026265:	90                   	nop

c0026266 <SSE::save(void*)>:
c0026266:	83 ec 0c             	sub    esp,0xc
c0026269:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002626d:	83 ec 0c             	sub    esp,0xc
c0026270:	50                   	push   eax
c0026271:	e8 12 10 00 00       	call   c0027288 <sseSave>
c0026276:	83 c4 10             	add    esp,0x10
c0026279:	90                   	nop
c002627a:	83 c4 0c             	add    esp,0xc
c002627d:	c3                   	ret    

c002627e <SSE::load(void*)>:
c002627e:	83 ec 0c             	sub    esp,0xc
c0026281:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026285:	83 ec 0c             	sub    esp,0xc
c0026288:	50                   	push   eax
c0026289:	e8 00 10 00 00       	call   c002728e <sseLoad>
c002628e:	83 c4 10             	add    esp,0x10
c0026291:	90                   	nop
c0026292:	83 c4 0c             	add    esp,0xc
c0026295:	c3                   	ret    

c0026296 <SSE::SSE()>:
c0026296:	83 ec 0c             	sub    esp,0xc
c0026299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629d:	83 ec 08             	sub    esp,0x8
c00262a0:	68 18 df 02 c0       	push   0xc002df18
c00262a5:	50                   	push   eax
c00262a6:	e8 bd e4 fe ff       	call   c0014768 <FPU::FPU(char const*)>
c00262ab:	83 c4 10             	add    esp,0x10
c00262ae:	ba 28 df 02 c0       	mov    edx,0xc002df28
c00262b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b7:	89 10                	mov    DWORD PTR [eax],edx
c00262b9:	90                   	nop
c00262ba:	83 c4 0c             	add    esp,0xc
c00262bd:	c3                   	ret    

c00262be <x87::open(int, int, void*)>:
c00262be:	83 ec 0c             	sub    esp,0xc
c00262c1:	e8 1c 10 00 00       	call   c00272e2 <x87Init>
c00262c6:	b8 00 00 00 00       	mov    eax,0x0
c00262cb:	83 c4 0c             	add    esp,0xc
c00262ce:	c3                   	ret    
c00262cf:	90                   	nop

c00262d0 <x87::close(int, int, void*)>:
c00262d0:	83 ec 0c             	sub    esp,0xc
c00262d3:	e8 24 10 00 00       	call   c00272fc <x87Close>
c00262d8:	b8 00 00 00 00       	mov    eax,0x0
c00262dd:	83 c4 0c             	add    esp,0xc
c00262e0:	c3                   	ret    
c00262e1:	90                   	nop

c00262e2 <x87::available()>:
c00262e2:	83 ec 0c             	sub    esp,0xc
c00262e5:	e8 cc 0f 00 00       	call   c00272b6 <x87Detect>
c00262ea:	85 c0                	test   eax,eax
c00262ec:	0f 95 c0             	setne  al
c00262ef:	83 c4 0c             	add    esp,0xc
c00262f2:	c3                   	ret    
c00262f3:	90                   	nop

c00262f4 <x87::save(void*)>:
c00262f4:	83 ec 0c             	sub    esp,0xc
c00262f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262fb:	83 ec 0c             	sub    esp,0xc
c00262fe:	50                   	push   eax
c00262ff:	e8 cd 0f 00 00       	call   c00272d1 <x87Save>
c0026304:	83 c4 10             	add    esp,0x10
c0026307:	90                   	nop
c0026308:	83 c4 0c             	add    esp,0xc
c002630b:	c3                   	ret    

c002630c <x87::load(void*)>:
c002630c:	83 ec 0c             	sub    esp,0xc
c002630f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026313:	83 ec 0c             	sub    esp,0xc
c0026316:	50                   	push   eax
c0026317:	e8 be 0f 00 00       	call   c00272da <x87Load>
c002631c:	83 c4 10             	add    esp,0x10
c002631f:	90                   	nop
c0026320:	83 c4 0c             	add    esp,0xc
c0026323:	c3                   	ret    

c0026324 <x87::x87()>:
c0026324:	83 ec 0c             	sub    esp,0xc
c0026327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632b:	83 ec 08             	sub    esp,0x8
c002632e:	68 58 df 02 c0       	push   0xc002df58
c0026333:	50                   	push   eax
c0026334:	e8 2f e4 fe ff       	call   c0014768 <FPU::FPU(char const*)>
c0026339:	83 c4 10             	add    esp,0x10
c002633c:	ba 68 df 02 c0       	mov    edx,0xc002df68
c0026341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026345:	89 10                	mov    DWORD PTR [eax],edx
c0026347:	90                   	nop
c0026348:	83 c4 0c             	add    esp,0xc
c002634b:	c3                   	ret    

c002634c <APIC::disable()>:
c002634c:	90                   	nop
c002634d:	c3                   	ret    

c002634e <APIC::close(int, int, void*)>:
c002634e:	55                   	push   ebp
c002634f:	89 e5                	mov    ebp,esp
c0026351:	83 ec 08             	sub    esp,0x8
c0026354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026357:	8b 00                	mov    eax,DWORD PTR [eax]
c0026359:	83 c0 3c             	add    eax,0x3c
c002635c:	8b 00                	mov    eax,DWORD PTR [eax]
c002635e:	83 ec 0c             	sub    esp,0xc
c0026361:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026364:	ff d0                	call   eax
c0026366:	83 c4 10             	add    esp,0x10
c0026369:	b8 00 00 00 00       	mov    eax,0x0
c002636e:	c9                   	leave  
c002636f:	c3                   	ret    

c0026370 <IOAPIC::close(int, int, void*)>:
c0026370:	b8 00 00 00 00       	mov    eax,0x0
c0026375:	c3                   	ret    

c0026376 <APIC::io_wait()>:
c0026376:	eb 00                	jmp    c0026378 <APIC::io_wait()+0x2>
c0026378:	eb 00                	jmp    c002637a <APIC::io_wait()+0x4>
c002637a:	90                   	nop
c002637b:	c3                   	ret    

c002637c <APIC::getBase()>:
c002637c:	55                   	push   ebp
c002637d:	89 e5                	mov    ebp,esp
c002637f:	83 ec 18             	sub    esp,0x18
c0026382:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026387:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002638d:	83 e0 08             	and    eax,0x8
c0026390:	84 c0                	test   al,al
c0026392:	75 07                	jne    c002639b <APIC::getBase()+0x1f>
c0026394:	b8 00 00 00 00       	mov    eax,0x0
c0026399:	eb 21                	jmp    c00263bc <APIC::getBase()+0x40>
c002639b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00263a0:	83 ec 08             	sub    esp,0x8
c00263a3:	6a 1b                	push   0x1b
c00263a5:	50                   	push   eax
c00263a6:	e8 87 8a fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00263ab:	83 c4 10             	add    esp,0x10
c00263ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00263bc:	c9                   	leave  
c00263bd:	c3                   	ret    

c00263be <APIC::eoi(unsigned char)>:
c00263be:	55                   	push   ebp
c00263bf:	89 e5                	mov    ebp,esp
c00263c1:	83 ec 28             	sub    esp,0x28
c00263c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263ca:	83 ec 0c             	sub    esp,0xc
c00263cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263d0:	e8 a7 ff ff ff       	call   c002637c <APIC::getBase()>
c00263d5:	83 c4 10             	add    esp,0x10
c00263d8:	05 b0 00 00 00       	add    eax,0xb0
c00263dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00263e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00263e3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00263e9:	90                   	nop
c00263ea:	c9                   	leave  
c00263eb:	c3                   	ret    

c00263ec <APIC::open(int, int, void*)>:
c00263ec:	55                   	push   ebp
c00263ed:	89 e5                	mov    ebp,esp
c00263ef:	57                   	push   edi
c00263f0:	56                   	push   esi
c00263f1:	53                   	push   ebx
c00263f2:	83 ec 2c             	sub    esp,0x2c
c00263f5:	83 ec 0c             	sub    esp,0xc
c00263f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263fb:	e8 7c ff ff ff       	call   c002637c <APIC::getBase()>
c0026400:	83 c4 10             	add    esp,0x10
c0026403:	89 c2                	mov    edx,eax
c0026405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026408:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002640e:	0f b6 f8             	movzx  edi,al
c0026411:	89 d0                	mov    eax,edx
c0026413:	ba 00 00 00 00       	mov    edx,0x0
c0026418:	89 c1                	mov    ecx,eax
c002641a:	80 e5 ff             	and    ch,0xff
c002641d:	89 cb                	mov    ebx,ecx
c002641f:	0f b6 f2             	movzx  esi,dl
c0026422:	89 d8                	mov    eax,ebx
c0026424:	89 f2                	mov    edx,esi
c0026426:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026429:	8d 5f 08             	lea    ebx,[edi+0x8]
c002642c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026430:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026434:	83 e0 00             	and    eax,0x0
c0026437:	09 d0                	or     eax,edx
c0026439:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002643d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026440:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026446:	8d 50 01             	lea    edx,[eax+0x1]
c0026449:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002644c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026452:	0f b6 d0             	movzx  edx,al
c0026455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026458:	83 c2 08             	add    edx,0x8
c002645b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002645f:	0f b6 c9             	movzx  ecx,cl
c0026462:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026468:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002646c:	83 ec 0c             	sub    esp,0xc
c002646f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026472:	e8 05 ff ff ff       	call   c002637c <APIC::getBase()>
c0026477:	83 c4 10             	add    esp,0x10
c002647a:	05 f0 00 00 00       	add    eax,0xf0
c002647f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026482:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026485:	8b 00                	mov    eax,DWORD PTR [eax]
c0026487:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002648a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026491:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026498:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002649b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002649e:	89 10                	mov    DWORD PTR [eax],edx
c00264a0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00264a7:	a1 b0 1b 03 c0       	mov    eax,ds:0xc0031bb0
c00264ac:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00264af:	7d 7c                	jge    c002652d <APIC::open(int, int, void*)+0x141>
c00264b1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264b4:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00264bb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00264be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264c1:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00264c8:	c1 e8 08             	shr    eax,0x8
c00264cb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00264cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264d2:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00264d9:	c1 e8 18             	shr    eax,0x18
c00264dc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00264df:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00264e3:	75 40                	jne    c0026525 <APIC::open(int, int, void*)+0x139>
c00264e5:	83 ec 0c             	sub    esp,0xc
c00264e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264eb:	e8 8c fe ff ff       	call   c002637c <APIC::getBase()>
c00264f0:	83 c4 10             	add    esp,0x10
c00264f3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00264f7:	75 07                	jne    c0026500 <APIC::open(int, int, void*)+0x114>
c00264f9:	ba 60 03 00 00       	mov    edx,0x360
c00264fe:	eb 05                	jmp    c0026505 <APIC::open(int, int, void*)+0x119>
c0026500:	ba 50 03 00 00       	mov    edx,0x350
c0026505:	01 d0                	add    eax,edx
c0026507:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002650a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002650d:	8b 00                	mov    eax,DWORD PTR [eax]
c002650f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026512:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026519:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002651d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026520:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026523:	89 10                	mov    DWORD PTR [eax],edx
c0026525:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026528:	e9 7a ff ff ff       	jmp    c00264a7 <APIC::open(int, int, void*)+0xbb>
c002652d:	b8 00 00 00 00       	mov    eax,0x0
c0026532:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026535:	5b                   	pop    ebx
c0026536:	5e                   	pop    esi
c0026537:	5f                   	pop    edi
c0026538:	5d                   	pop    ebp
c0026539:	c3                   	ret    

c002653a <IOAPIC::IOAPIC()>:
c002653a:	83 ec 0c             	sub    esp,0xc
c002653d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026541:	83 ec 08             	sub    esp,0x8
c0026544:	68 98 df 02 c0       	push   0xc002df98
c0026549:	50                   	push   eax
c002654a:	e8 f9 de fe ff       	call   c0014448 <Device::Device(char const*)>
c002654f:	83 c4 10             	add    esp,0x10
c0026552:	ba c0 e0 02 c0       	mov    edx,0xc002e0c0
c0026557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655b:	89 10                	mov    DWORD PTR [eax],edx
c002655d:	90                   	nop
c002655e:	83 c4 0c             	add    esp,0xc
c0026561:	c3                   	ret    

c0026562 <APIC::APIC()>:
c0026562:	53                   	push   ebx
c0026563:	83 ec 18             	sub    esp,0x18
c0026566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002656a:	83 ec 08             	sub    esp,0x8
c002656d:	68 a0 df 02 c0       	push   0xc002dfa0
c0026572:	50                   	push   eax
c0026573:	e8 4a e6 fe ff       	call   c0014bc2 <InterruptController::InterruptController(char const*)>
c0026578:	83 c4 10             	add    esp,0x10
c002657b:	ba 78 e0 02 c0       	mov    edx,0xc002e078
c0026580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026584:	89 10                	mov    DWORD PTR [eax],edx
c0026586:	a0 80 36 03 c0       	mov    al,ds:0xc0033680
c002658b:	83 f0 01             	xor    eax,0x1
c002658e:	84 c0                	test   al,al
c0026590:	0f 84 a1 00 00 00    	je     c0026637 <APIC::APIC()+0xd5>
c0026596:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002659b:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c00265a0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00265a4:	0f 83 86 00 00 00    	jae    c0026630 <APIC::APIC()+0xce>
c00265aa:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00265b2:	83 ec 0c             	sub    esp,0xc
c00265b5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00265b9:	e8 ce 92 fe ff       	call   c000f88c <malloc>
c00265be:	83 c4 10             	add    esp,0x10
c00265c1:	89 c3                	mov    ebx,eax
c00265c3:	83 ec 0c             	sub    esp,0xc
c00265c6:	53                   	push   ebx
c00265c7:	e8 6e ff ff ff       	call   c002653a <IOAPIC::IOAPIC()>
c00265cc:	83 c4 10             	add    esp,0x10
c00265cf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00265d3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00265d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00265dc:	89 14 85 60 36 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc9a0],edx
c00265e3:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c00265e8:	40                   	inc    eax
c00265e9:	a3 40 36 03 c0       	mov    ds:0xc0033640,eax
c00265ee:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00265f3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00265f9:	83 ec 08             	sub    esp,0x8
c00265fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026600:	50                   	push   eax
c0026601:	e8 52 dc fe ff       	call   c0014258 <Device::addChild(Device*)>
c0026606:	83 c4 10             	add    esp,0x10
c0026609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002660d:	8b 00                	mov    eax,DWORD PTR [eax]
c002660f:	83 c0 08             	add    eax,0x8
c0026612:	8b 00                	mov    eax,DWORD PTR [eax]
c0026614:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026619:	6a 00                	push   0x0
c002661b:	6a 00                	push   0x0
c002661d:	52                   	push   edx
c002661e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026622:	ff d0                	call   eax
c0026624:	83 c4 10             	add    esp,0x10
c0026627:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002662b:	e9 6b ff ff ff       	jmp    c002659b <APIC::APIC()+0x39>
c0026630:	c6 05 80 36 03 c0 01 	mov    BYTE PTR ds:0xc0033680,0x1
c0026637:	90                   	nop
c0026638:	83 c4 18             	add    esp,0x18
c002663b:	5b                   	pop    ebx
c002663c:	c3                   	ret    
c002663d:	90                   	nop

c002663e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002663e:	55                   	push   ebp
c002663f:	89 e5                	mov    ebp,esp
c0026641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026644:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002664a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002664d:	72 1d                	jb     c002666c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002664f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026652:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002665b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026661:	01 d0                	add    eax,edx
c0026663:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026666:	73 04                	jae    c002666c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026668:	b0 01                	mov    al,0x1
c002666a:	eb 02                	jmp    c002666e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002666c:	b0 00                	mov    al,0x0
c002666e:	5d                   	pop    ebp
c002666f:	c3                   	ret    

c0026670 <IOAPIC::read(int)>:
c0026670:	55                   	push   ebp
c0026671:	89 e5                	mov    ebp,esp
c0026673:	83 ec 10             	sub    esp,0x10
c0026676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026679:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002667f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026682:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026685:	0f b6 d0             	movzx  edx,al
c0026688:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002668b:	89 10                	mov    DWORD PTR [eax],edx
c002668d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026690:	83 c0 10             	add    eax,0x10
c0026693:	8b 00                	mov    eax,DWORD PTR [eax]
c0026695:	c9                   	leave  
c0026696:	c3                   	ret    
c0026697:	90                   	nop

c0026698 <IOAPIC::open(int, int, void*)>:
c0026698:	55                   	push   ebp
c0026699:	89 e5                	mov    ebp,esp
c002669b:	57                   	push   edi
c002669c:	56                   	push   esi
c002669d:	53                   	push   ebx
c002669e:	83 ec 0c             	sub    esp,0xc
c00266a1:	83 ec 0c             	sub    esp,0xc
c00266a4:	68 cb df 02 c0       	push   0xc002dfcb
c00266a9:	e8 89 c7 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c00266ae:	83 c4 10             	add    esp,0x10
c00266b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00266bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00266c6:	8b 14 85 a0 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce360]
c00266cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00266d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00266df:	8b 14 85 20 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce2e0]
c00266e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266e9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00266ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266f2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00266f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266fb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026701:	0f b6 f8             	movzx  edi,al
c0026704:	89 d0                	mov    eax,edx
c0026706:	ba 00 00 00 00       	mov    edx,0x0
c002670b:	89 c1                	mov    ecx,eax
c002670d:	80 e5 ff             	and    ch,0xff
c0026710:	89 cb                	mov    ebx,ecx
c0026712:	0f b6 f2             	movzx  esi,dl
c0026715:	89 d8                	mov    eax,ebx
c0026717:	89 f2                	mov    edx,esi
c0026719:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002671c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002671f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026723:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026727:	83 e0 00             	and    eax,0x0
c002672a:	09 d0                	or     eax,edx
c002672c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026733:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026739:	8d 50 01             	lea    edx,[eax+0x1]
c002673c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002673f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026745:	0f b6 d0             	movzx  edx,al
c0026748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002674b:	83 c2 08             	add    edx,0x8
c002674e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026752:	0f b6 c9             	movzx  ecx,cl
c0026755:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002675b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002675f:	83 ec 08             	sub    esp,0x8
c0026762:	6a 01                	push   0x1
c0026764:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026767:	e8 04 ff ff ff       	call   c0026670 <IOAPIC::read(int)>
c002676c:	83 c4 10             	add    esp,0x10
c002676f:	c1 f8 10             	sar    eax,0x10
c0026772:	0f b6 c0             	movzx  eax,al
c0026775:	8d 50 01             	lea    edx,[eax+0x1]
c0026778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002677b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026781:	b8 00 00 00 00       	mov    eax,0x0
c0026786:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026789:	5b                   	pop    ebx
c002678a:	5e                   	pop    esi
c002678b:	5f                   	pop    edi
c002678c:	5d                   	pop    ebp
c002678d:	c3                   	ret    

c002678e <IOAPIC::write(int, int)>:
c002678e:	55                   	push   ebp
c002678f:	89 e5                	mov    ebp,esp
c0026791:	83 ec 10             	sub    esp,0x10
c0026794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026797:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002679d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00267a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267a3:	0f b6 d0             	movzx  edx,al
c00267a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267a9:	89 10                	mov    DWORD PTR [eax],edx
c00267ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267ae:	8d 50 10             	lea    edx,[eax+0x10]
c00267b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267b4:	89 02                	mov    DWORD PTR [edx],eax
c00267b6:	90                   	nop
c00267b7:	c9                   	leave  
c00267b8:	c3                   	ret    
c00267b9:	90                   	nop

c00267ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00267ba:	55                   	push   ebp
c00267bb:	89 e5                	mov    ebp,esp
c00267bd:	53                   	push   ebx
c00267be:	83 ec 2c             	sub    esp,0x2c
c00267c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267c4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00267c7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00267ca:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00267cd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00267d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00267d6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00267d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267dc:	88 d8                	mov    al,bl
c00267de:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00267e1:	88 c8                	mov    al,cl
c00267e3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00267e6:	88 d0                	mov    al,dl
c00267e8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00267eb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00267ef:	83 c0 08             	add    eax,0x8
c00267f2:	01 c0                	add    eax,eax
c00267f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00267f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00267fb:	83 c0 08             	add    eax,0x8
c00267fe:	01 c0                	add    eax,eax
c0026800:	40                   	inc    eax
c0026801:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026804:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026807:	50                   	push   eax
c0026808:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002680b:	e8 60 fe ff ff       	call   c0026670 <IOAPIC::read(int)>
c0026810:	83 c4 08             	add    esp,0x8
c0026813:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026816:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002681d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026820:	c1 e0 18             	shl    eax,0x18
c0026823:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026826:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026829:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002682c:	52                   	push   edx
c002682d:	50                   	push   eax
c002682e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026831:	e8 58 ff ff ff       	call   c002678e <IOAPIC::write(int, int)>
c0026836:	83 c4 0c             	add    esp,0xc
c0026839:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002683c:	50                   	push   eax
c002683d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026840:	e8 2b fe ff ff       	call   c0026670 <IOAPIC::read(int)>
c0026845:	83 c4 08             	add    esp,0x8
c0026848:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002684b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026852:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026859:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026860:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026864:	74 09                	je     c002686f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026866:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002686d:	eb 07                	jmp    c0026876 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002686f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026876:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002687a:	74 09                	je     c0026885 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002687c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026883:	eb 07                	jmp    c002688c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026885:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002688c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026893:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026897:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002689a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002689d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268a0:	52                   	push   edx
c00268a1:	50                   	push   eax
c00268a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268a5:	e8 e4 fe ff ff       	call   c002678e <IOAPIC::write(int, int)>
c00268aa:	83 c4 0c             	add    esp,0xc
c00268ad:	90                   	nop
c00268ae:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00268b1:	c9                   	leave  
c00268b2:	c3                   	ret    
c00268b3:	90                   	nop

c00268b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00268b4:	55                   	push   ebp
c00268b5:	89 e5                	mov    ebp,esp
c00268b7:	57                   	push   edi
c00268b8:	56                   	push   esi
c00268b9:	53                   	push   ebx
c00268ba:	83 ec 2c             	sub    esp,0x2c
c00268bd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268c0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00268c3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00268c7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00268cb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00268cf:	74 5a                	je     c002692b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00268d1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00268d5:	7f 44                	jg     c002691b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00268d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268da:	05 20 e5 02 c0       	add    eax,0xc002e520
c00268df:	8a 00                	mov    al,BYTE PTR [eax]
c00268e1:	0f b6 c0             	movzx  eax,al
c00268e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00268e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268ea:	66 8b 84 00 40 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3c0]
c00268f2:	0f b7 c0             	movzx  eax,ax
c00268f5:	83 e0 02             	and    eax,0x2
c00268f8:	85 c0                	test   eax,eax
c00268fa:	74 04                	je     c0026900 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00268fc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026900:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026903:	66 8b 84 00 40 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3c0]
c002690b:	0f b7 c0             	movzx  eax,ax
c002690e:	83 e0 08             	and    eax,0x8
c0026911:	85 c0                	test   eax,eax
c0026913:	74 16                	je     c002692b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026915:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026919:	eb 10                	jmp    c002692b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002691b:	83 ec 0c             	sub    esp,0xc
c002691e:	68 dc df 02 c0       	push   0xc002dfdc
c0026923:	e8 a9 3f ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0026928:	83 c4 10             	add    esp,0x10
c002692b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002692f:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c0026934:	83 ec 08             	sub    esp,0x8
c0026937:	50                   	push   eax
c0026938:	68 14 e0 02 c0       	push   0xc002e014
c002693d:	e8 f5 c4 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0026942:	83 c4 10             	add    esp,0x10
c0026945:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002694c:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c0026951:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026954:	7d 67                	jge    c00269bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026956:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026959:	8b 04 85 60 36 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc9a0]
c0026960:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026963:	83 ec 08             	sub    esp,0x8
c0026966:	52                   	push   edx
c0026967:	50                   	push   eax
c0026968:	e8 d1 fc ff ff       	call   c002663e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002696d:	83 c4 10             	add    esp,0x10
c0026970:	84 c0                	test   al,al
c0026972:	74 44                	je     c00269b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026974:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026977:	8b 1c 85 60 36 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc9a0]
c002697e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026982:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026985:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026989:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002698c:	83 c0 20             	add    eax,0x20
c002698f:	0f b6 f0             	movzx  esi,al
c0026992:	b8 00 00 00 00       	mov    eax,0x0
c0026997:	99                   	cdq    
c0026998:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002699b:	0f b6 c9             	movzx  ecx,cl
c002699e:	83 ec 04             	sub    esp,0x4
c00269a1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00269a4:	57                   	push   edi
c00269a5:	56                   	push   esi
c00269a6:	52                   	push   edx
c00269a7:	50                   	push   eax
c00269a8:	51                   	push   ecx
c00269a9:	53                   	push   ebx
c00269aa:	e8 0b fe ff ff       	call   c00267ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00269af:	83 c4 20             	add    esp,0x20
c00269b2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00269b6:	eb 05                	jmp    c00269bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00269b8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00269bb:	eb 8f                	jmp    c002694c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00269bd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00269c0:	83 f0 01             	xor    eax,0x1
c00269c3:	84 c0                	test   al,al
c00269c5:	74 10                	je     c00269d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00269c7:	83 ec 0c             	sub    esp,0xc
c00269ca:	68 2b e0 02 c0       	push   0xc002e02b
c00269cf:	e8 fd 3e ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00269d4:	83 c4 10             	add    esp,0x10
c00269d7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00269db:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00269e2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00269e6:	7f 65                	jg     c0026a4d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00269e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00269ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00269f5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269f8:	01 ca                	add    edx,ecx
c00269fa:	83 c2 54             	add    edx,0x54
c00269fd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026a01:	85 c0                	test   eax,eax
c0026a03:	75 43                	jne    c0026a48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a0b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a12:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a15:	01 ca                	add    edx,ecx
c0026a17:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026a1a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026a1d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a24:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a2e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a31:	01 ca                	add    edx,ecx
c0026a33:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026a39:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026a3c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a43:	83 e8 20             	sub    eax,0x20
c0026a46:	eb 1a                	jmp    c0026a62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026a48:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026a4b:	eb 95                	jmp    c00269e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026a4d:	83 ec 0c             	sub    esp,0xc
c0026a50:	68 38 e0 02 c0       	push   0xc002e038
c0026a55:	e8 77 3e ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0026a5a:	83 c4 10             	add    esp,0x10
c0026a5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026a62:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a65:	5b                   	pop    ebx
c0026a66:	5e                   	pop    esi
c0026a67:	5f                   	pop    edi
c0026a68:	5d                   	pop    ebp
c0026a69:	c3                   	ret    

c0026a6a <PIC::disable()>:
c0026a6a:	55                   	push   ebp
c0026a6b:	89 e5                	mov    ebp,esp
c0026a6d:	83 ec 10             	sub    esp,0x10
c0026a70:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026a76:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026a7a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a7d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026a81:	ee                   	out    dx,al
c0026a82:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026a88:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026a8c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a8f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026a93:	ee                   	out    dx,al
c0026a94:	90                   	nop
c0026a95:	c9                   	leave  
c0026a96:	c3                   	ret    
c0026a97:	90                   	nop

c0026a98 <PIC::close(int, int, void*)>:
c0026a98:	55                   	push   ebp
c0026a99:	89 e5                	mov    ebp,esp
c0026a9b:	83 ec 08             	sub    esp,0x8
c0026a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aa3:	83 c0 3c             	add    eax,0x3c
c0026aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aa8:	83 ec 0c             	sub    esp,0xc
c0026aab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aae:	ff d0                	call   eax
c0026ab0:	83 c4 10             	add    esp,0x10
c0026ab3:	b8 00 00 00 00       	mov    eax,0x0
c0026ab8:	c9                   	leave  
c0026ab9:	c3                   	ret    

c0026aba <PIC::PIC()>:
c0026aba:	83 ec 0c             	sub    esp,0xc
c0026abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ac1:	83 ec 08             	sub    esp,0x8
c0026ac4:	68 e4 e0 02 c0       	push   0xc002e0e4
c0026ac9:	50                   	push   eax
c0026aca:	e8 f3 e0 fe ff       	call   c0014bc2 <InterruptController::InterruptController(char const*)>
c0026acf:	83 c4 10             	add    esp,0x10
c0026ad2:	ba 10 e1 02 c0       	mov    edx,0xc002e110
c0026ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026adb:	89 10                	mov    DWORD PTR [eax],edx
c0026add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ae7:	0f b6 d0             	movzx  edx,al
c0026aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aee:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026af9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026aff:	0f b6 d0             	movzx  edx,al
c0026b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b06:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b15:	8d 50 01             	lea    edx,[eax+0x1]
c0026b18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b1c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026b22:	0f b6 d0             	movzx  edx,al
c0026b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b29:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026b2d:	83 e1 3f             	and    ecx,0x3f
c0026b30:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b3e:	0f b6 d0             	movzx  edx,al
c0026b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b45:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b56:	0f b6 d0             	movzx  edx,al
c0026b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b5d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0026b6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b73:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026b79:	0f b6 d0             	movzx  edx,al
c0026b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b80:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026b84:	83 e1 3f             	and    ecx,0x3f
c0026b87:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026b8b:	90                   	nop
c0026b8c:	83 c4 0c             	add    esp,0xc
c0026b8f:	c3                   	ret    

c0026b90 <PIC::ioWait()>:
c0026b90:	eb 00                	jmp    c0026b92 <PIC::ioWait()+0x2>
c0026b92:	eb 00                	jmp    c0026b94 <PIC::ioWait()+0x4>
c0026b94:	90                   	nop
c0026b95:	c3                   	ret    

c0026b96 <PIC::getIRQReg(int)>:
c0026b96:	55                   	push   ebp
c0026b97:	89 e5                	mov    ebp,esp
c0026b99:	83 ec 10             	sub    esp,0x10
c0026b9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b9f:	0f b6 c0             	movzx  eax,al
c0026ba2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ba8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026bab:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026bae:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026bb2:	ee                   	out    dx,al
c0026bb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bb6:	0f b6 c0             	movzx  eax,al
c0026bb9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026bbf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026bc2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026bc5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026bc9:	ee                   	out    dx,al
c0026bca:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026bd0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026bd4:	89 c2                	mov    edx,eax
c0026bd6:	ec                   	in     al,dx
c0026bd7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026bda:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026bdd:	0f b6 c0             	movzx  eax,al
c0026be0:	c1 e0 08             	shl    eax,0x8
c0026be3:	89 c1                	mov    ecx,eax
c0026be5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026beb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026bef:	89 c2                	mov    edx,eax
c0026bf1:	ec                   	in     al,dx
c0026bf2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026bf5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026bf8:	0f b6 c0             	movzx  eax,al
c0026bfb:	09 c8                	or     eax,ecx
c0026bfd:	c9                   	leave  
c0026bfe:	c3                   	ret    
c0026bff:	90                   	nop

c0026c00 <PIC::eoi(unsigned char)>:
c0026c00:	55                   	push   ebp
c0026c01:	89 e5                	mov    ebp,esp
c0026c03:	83 ec 14             	sub    esp,0x14
c0026c06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c09:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026c0c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c10:	75 1e                	jne    c0026c30 <PIC::eoi(unsigned char)+0x30>
c0026c12:	6a 0b                	push   0xb
c0026c14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c17:	e8 7a ff ff ff       	call   c0026b96 <PIC::getIRQReg(int)>
c0026c1c:	83 c4 08             	add    esp,0x8
c0026c1f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026c23:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026c27:	25 80 00 00 00       	and    eax,0x80
c0026c2c:	85 c0                	test   eax,eax
c0026c2e:	74 5f                	je     c0026c8f <PIC::eoi(unsigned char)+0x8f>
c0026c30:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026c34:	75 2d                	jne    c0026c63 <PIC::eoi(unsigned char)+0x63>
c0026c36:	6a 0b                	push   0xb
c0026c38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c3b:	e8 56 ff ff ff       	call   c0026b96 <PIC::getIRQReg(int)>
c0026c40:	83 c4 08             	add    esp,0x8
c0026c43:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026c47:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026c4a:	66 85 c0             	test   ax,ax
c0026c4d:	78 14                	js     c0026c63 <PIC::eoi(unsigned char)+0x63>
c0026c4f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026c55:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026c59:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026c5c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026c60:	ee                   	out    dx,al
c0026c61:	eb 2d                	jmp    c0026c90 <PIC::eoi(unsigned char)+0x90>
c0026c63:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c67:	76 12                	jbe    c0026c7b <PIC::eoi(unsigned char)+0x7b>
c0026c69:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026c6f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026c73:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026c76:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026c7a:	ee                   	out    dx,al
c0026c7b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026c81:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026c85:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026c88:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026c8c:	ee                   	out    dx,al
c0026c8d:	eb 01                	jmp    c0026c90 <PIC::eoi(unsigned char)+0x90>
c0026c8f:	90                   	nop
c0026c90:	c9                   	leave  
c0026c91:	c3                   	ret    

c0026c92 <PIC::remap()>:
c0026c92:	55                   	push   ebp
c0026c93:	89 e5                	mov    ebp,esp
c0026c95:	83 ec 48             	sub    esp,0x48
c0026c98:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026c9f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026ca6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026cac:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026caf:	89 c2                	mov    edx,eax
c0026cb1:	ec                   	in     al,dx
c0026cb2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026cb5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026cb8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026cbb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026cc1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026cc4:	89 c2                	mov    edx,eax
c0026cc6:	ec                   	in     al,dx
c0026cc7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026cca:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026ccd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026cd0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026cd6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026cda:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026cdd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026ce0:	ee                   	out    dx,al
c0026ce1:	83 ec 0c             	sub    esp,0xc
c0026ce4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ce7:	e8 a4 fe ff ff       	call   c0026b90 <PIC::ioWait()>
c0026cec:	83 c4 10             	add    esp,0x10
c0026cef:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026cf5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026cf9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026cfc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026cff:	ee                   	out    dx,al
c0026d00:	83 ec 0c             	sub    esp,0xc
c0026d03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d06:	e8 85 fe ff ff       	call   c0026b90 <PIC::ioWait()>
c0026d0b:	83 c4 10             	add    esp,0x10
c0026d0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026d11:	0f b6 c0             	movzx  eax,al
c0026d14:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026d1a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026d1d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026d20:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026d23:	ee                   	out    dx,al
c0026d24:	83 ec 0c             	sub    esp,0xc
c0026d27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d2a:	e8 61 fe ff ff       	call   c0026b90 <PIC::ioWait()>
c0026d2f:	83 c4 10             	add    esp,0x10
c0026d32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d35:	0f b6 c0             	movzx  eax,al
c0026d38:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026d3e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026d41:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026d44:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026d47:	ee                   	out    dx,al
c0026d48:	83 ec 0c             	sub    esp,0xc
c0026d4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d4e:	e8 3d fe ff ff       	call   c0026b90 <PIC::ioWait()>
c0026d53:	83 c4 10             	add    esp,0x10
c0026d56:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026d5c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026d60:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026d63:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026d66:	ee                   	out    dx,al
c0026d67:	83 ec 0c             	sub    esp,0xc
c0026d6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d6d:	e8 1e fe ff ff       	call   c0026b90 <PIC::ioWait()>
c0026d72:	83 c4 10             	add    esp,0x10
c0026d75:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026d7b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026d7f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026d82:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026d85:	ee                   	out    dx,al
c0026d86:	83 ec 0c             	sub    esp,0xc
c0026d89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d8c:	e8 ff fd ff ff       	call   c0026b90 <PIC::ioWait()>
c0026d91:	83 c4 10             	add    esp,0x10
c0026d94:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026d9a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026d9e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026da1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026da4:	ee                   	out    dx,al
c0026da5:	83 ec 0c             	sub    esp,0xc
c0026da8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dab:	e8 e0 fd ff ff       	call   c0026b90 <PIC::ioWait()>
c0026db0:	83 c4 10             	add    esp,0x10
c0026db3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026db9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026dbd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026dc0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dc3:	ee                   	out    dx,al
c0026dc4:	83 ec 0c             	sub    esp,0xc
c0026dc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dca:	e8 c1 fd ff ff       	call   c0026b90 <PIC::ioWait()>
c0026dcf:	83 c4 10             	add    esp,0x10
c0026dd2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026dd6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026ddc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026ddf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026de2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026de5:	ee                   	out    dx,al
c0026de6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026dea:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026df0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026df3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026df6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026df9:	ee                   	out    dx,al
c0026dfa:	90                   	nop
c0026dfb:	c9                   	leave  
c0026dfc:	c3                   	ret    
c0026dfd:	90                   	nop

c0026dfe <PIC::open(int, int, void*)>:
c0026dfe:	55                   	push   ebp
c0026dff:	89 e5                	mov    ebp,esp
c0026e01:	83 ec 18             	sub    esp,0x18
c0026e04:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026e0a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026e0e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026e11:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026e15:	ee                   	out    dx,al
c0026e16:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026e1c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026e20:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026e23:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026e27:	ee                   	out    dx,al
c0026e28:	83 ec 0c             	sub    esp,0xc
c0026e2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e2e:	e8 5f fe ff ff       	call   c0026c92 <PIC::remap()>
c0026e33:	83 c4 10             	add    esp,0x10
c0026e36:	b8 00 00 00 00       	mov    eax,0x0
c0026e3b:	c9                   	leave  
c0026e3c:	c3                   	ret    
c0026e3d:	90                   	nop

c0026e3e <APICTimer::close(int, int, void*)>:
c0026e3e:	b8 00 00 00 00       	mov    eax,0x0
c0026e43:	c3                   	ret    

c0026e44 <apicTimerHandler(regs*, void*)>:
c0026e44:	83 ec 0c             	sub    esp,0xc
c0026e47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e4d:	99                   	cdq    
c0026e4e:	52                   	push   edx
c0026e4f:	50                   	push   eax
c0026e50:	6a 00                	push   0x0
c0026e52:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e57:	e8 98 07 00 00       	call   c00275f4 <__udivdi3>
c0026e5c:	83 c4 10             	add    esp,0x10
c0026e5f:	83 ec 08             	sub    esp,0x8
c0026e62:	52                   	push   edx
c0026e63:	50                   	push   eax
c0026e64:	e8 0e ff fe ff       	call   c0016d77 <timerHandler(unsigned long long)>
c0026e69:	83 c4 10             	add    esp,0x10
c0026e6c:	90                   	nop
c0026e6d:	83 c4 0c             	add    esp,0xc
c0026e70:	c3                   	ret    
c0026e71:	90                   	nop

c0026e72 <APICTimer::write(int)>:
c0026e72:	53                   	push   ebx
c0026e73:	83 ec 28             	sub    esp,0x28
c0026e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026e7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026e7e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026e84:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026e89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e8f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026e95:	83 ec 0c             	sub    esp,0xc
c0026e98:	50                   	push   eax
c0026e99:	e8 de f4 ff ff       	call   c002637c <APIC::getBase()>
c0026e9e:	83 c4 10             	add    esp,0x10
c0026ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ea5:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c0026eaa:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c0026eb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026eb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026eb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ebc:	05 e0 03 00 00       	add    eax,0x3e0
c0026ec1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ecb:	05 80 03 00 00       	add    eax,0x380
c0026ed0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ed6:	fb                   	sti    
c0026ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026edb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026edf:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026ee4:	83 d2 00             	adc    edx,0x0
c0026ee7:	89 c1                	mov    ecx,eax
c0026ee9:	89 d3                	mov    ebx,edx
c0026eeb:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c0026ef0:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c0026ef6:	39 c8                	cmp    eax,ecx
c0026ef8:	89 d0                	mov    eax,edx
c0026efa:	19 d8                	sbb    eax,ebx
c0026efc:	73 02                	jae    c0026f00 <APICTimer::write(int)+0x8e>
c0026efe:	eb d7                	jmp    c0026ed7 <APICTimer::write(int)+0x65>
c0026f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f04:	05 20 03 00 00       	add    eax,0x320
c0026f09:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026f0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f13:	05 90 03 00 00       	add    eax,0x390
c0026f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f1a:	f7 d0                	not    eax
c0026f1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f20:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f28:	ba 00 00 00 00       	mov    edx,0x0
c0026f2d:	f7 f3                	div    ebx
c0026f2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026f37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026f3d:	0d 00 00 02 00       	or     eax,0x20000
c0026f42:	89 c2                	mov    edx,eax
c0026f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f48:	05 20 03 00 00       	add    eax,0x320
c0026f4d:	89 10                	mov    DWORD PTR [eax],edx
c0026f4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f53:	05 e0 03 00 00       	add    eax,0x3e0
c0026f58:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f62:	05 80 03 00 00       	add    eax,0x380
c0026f67:	89 c2                	mov    edx,eax
c0026f69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f6d:	89 02                	mov    DWORD PTR [edx],eax
c0026f6f:	90                   	nop
c0026f70:	83 c4 28             	add    esp,0x28
c0026f73:	5b                   	pop    ebx
c0026f74:	c3                   	ret    
c0026f75:	90                   	nop

c0026f76 <APICTimer::open(int, int, void*)>:
c0026f76:	57                   	push   edi
c0026f77:	56                   	push   esi
c0026f78:	53                   	push   ebx
c0026f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f7f:	83 c0 24             	add    eax,0x24
c0026f82:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f84:	83 ec 08             	sub    esp,0x8
c0026f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f8f:	ff d0                	call   eax
c0026f91:	83 c4 10             	add    esp,0x10
c0026f94:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026f99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026f9f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026fa5:	83 ec 0c             	sub    esp,0xc
c0026fa8:	50                   	push   eax
c0026fa9:	e8 ce f3 ff ff       	call   c002637c <APIC::getBase()>
c0026fae:	83 c4 10             	add    esp,0x10
c0026fb1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fbb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026fc1:	0f b6 f8             	movzx  edi,al
c0026fc4:	89 d0                	mov    eax,edx
c0026fc6:	ba 00 00 00 00       	mov    edx,0x0
c0026fcb:	89 c1                	mov    ecx,eax
c0026fcd:	80 e5 ff             	and    ch,0xff
c0026fd0:	89 cb                	mov    ebx,ecx
c0026fd2:	0f b6 f2             	movzx  esi,dl
c0026fd5:	89 d8                	mov    eax,ebx
c0026fd7:	89 f2                	mov    edx,esi
c0026fd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026fdd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026fe0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026fe4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026fe8:	83 e0 00             	and    eax,0x0
c0026feb:	09 d0                	or     eax,edx
c0026fed:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ffb:	8d 50 01             	lea    edx,[eax+0x1]
c0026ffe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027002:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0027008:	0f b6 d0             	movzx  edx,al
c002700b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002700f:	83 c2 08             	add    edx,0x8
c0027012:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0027016:	0f b6 c9             	movzx  ecx,cl
c0027019:	81 c9 00 00 01 00    	or     ecx,0x10000
c002701f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0027023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027027:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002702b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0027031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027035:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027039:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002703f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027043:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0027049:	83 ec 0c             	sub    esp,0xc
c002704c:	51                   	push   ecx
c002704d:	6a 01                	push   0x1
c002704f:	68 44 6e 02 c0       	push   0xc0026e44
c0027054:	52                   	push   edx
c0027055:	50                   	push   eax
c0027056:	e8 81 d1 fe ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002705b:	83 c4 20             	add    esp,0x20
c002705e:	89 c2                	mov    edx,eax
c0027060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027064:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002706a:	b8 00 00 00 00       	mov    eax,0x0
c002706f:	5b                   	pop    ebx
c0027070:	5e                   	pop    esi
c0027071:	5f                   	pop    edi
c0027072:	c3                   	ret    
c0027073:	90                   	nop

c0027074 <APICTimer::APICTimer()>:
c0027074:	83 ec 0c             	sub    esp,0xc
c0027077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707b:	83 ec 08             	sub    esp,0x8
c002707e:	68 50 e1 02 c0       	push   0xc002e150
c0027083:	50                   	push   eax
c0027084:	e8 5f fc fe ff       	call   c0016ce8 <Timer::Timer(char const*)>
c0027089:	83 c4 10             	add    esp,0x10
c002708c:	ba 64 e1 02 c0       	mov    edx,0xc002e164
c0027091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027095:	89 10                	mov    DWORD PTR [eax],edx
c0027097:	90                   	nop
c0027098:	83 c4 0c             	add    esp,0xc
c002709b:	c3                   	ret    

c002709c <PIT::write(int)>:
c002709c:	83 ec 10             	sub    esp,0x10
c002709f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00270a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00270a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00270ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00270b1:	a3 84 36 03 c0       	mov    ds:0xc0033684,eax
c00270b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00270bb:	99                   	cdq    
c00270bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00270c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00270cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00270d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00270d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00270d9:	ee                   	out    dx,al
c00270da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00270de:	0f b6 c0             	movzx  eax,al
c00270e1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00270e8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00270ec:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00270f0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00270f5:	ee                   	out    dx,al
c00270f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00270fa:	c1 f8 08             	sar    eax,0x8
c00270fd:	0f b6 c0             	movzx  eax,al
c0027100:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0027107:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002710b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002710f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027114:	ee                   	out    dx,al
c0027115:	90                   	nop
c0027116:	83 c4 10             	add    esp,0x10
c0027119:	c3                   	ret    

c002711a <pitHandler(regs*, void*)>:
c002711a:	83 ec 0c             	sub    esp,0xc
c002711d:	a1 84 36 03 c0       	mov    eax,ds:0xc0033684
c0027122:	99                   	cdq    
c0027123:	52                   	push   edx
c0027124:	50                   	push   eax
c0027125:	6a 00                	push   0x0
c0027127:	68 00 ca 9a 3b       	push   0x3b9aca00
c002712c:	e8 c3 04 00 00       	call   c00275f4 <__udivdi3>
c0027131:	83 c4 10             	add    esp,0x10
c0027134:	83 ec 08             	sub    esp,0x8
c0027137:	52                   	push   edx
c0027138:	50                   	push   eax
c0027139:	e8 39 fc fe ff       	call   c0016d77 <timerHandler(unsigned long long)>
c002713e:	83 c4 10             	add    esp,0x10
c0027141:	90                   	nop
c0027142:	83 c4 0c             	add    esp,0xc
c0027145:	c3                   	ret    

c0027146 <PIT::open(int, int, void*)>:
c0027146:	83 ec 0c             	sub    esp,0xc
c0027149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714d:	8b 00                	mov    eax,DWORD PTR [eax]
c002714f:	83 c0 24             	add    eax,0x24
c0027152:	8b 00                	mov    eax,DWORD PTR [eax]
c0027154:	83 ec 08             	sub    esp,0x8
c0027157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002715b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002715f:	ff d0                	call   eax
c0027161:	83 c4 10             	add    esp,0x10
c0027164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027168:	83 ec 0c             	sub    esp,0xc
c002716b:	6a 00                	push   0x0
c002716d:	6a 01                	push   0x1
c002716f:	68 1a 71 02 c0       	push   0xc002711a
c0027174:	6a 00                	push   0x0
c0027176:	50                   	push   eax
c0027177:	e8 60 d0 fe ff       	call   c00141dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002717c:	83 c4 20             	add    esp,0x20
c002717f:	89 c2                	mov    edx,eax
c0027181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027185:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002718b:	b8 00 00 00 00       	mov    eax,0x0
c0027190:	83 c4 0c             	add    esp,0xc
c0027193:	c3                   	ret    

c0027194 <PIT::close(int, int, void*)>:
c0027194:	83 ec 0c             	sub    esp,0xc
c0027197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00271a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a9:	6a 01                	push   0x1
c00271ab:	68 1a 71 02 c0       	push   0xc002711a
c00271b0:	6a 00                	push   0x0
c00271b2:	50                   	push   eax
c00271b3:	e8 62 d0 fe ff       	call   c001421a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00271b8:	83 c4 10             	add    esp,0x10
c00271bb:	b8 00 00 00 00       	mov    eax,0x0
c00271c0:	83 c4 0c             	add    esp,0xc
c00271c3:	c3                   	ret    

c00271c4 <PIT::PIT()>:
c00271c4:	83 ec 0c             	sub    esp,0xc
c00271c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271cb:	83 ec 08             	sub    esp,0x8
c00271ce:	68 8c e1 02 c0       	push   0xc002e18c
c00271d3:	50                   	push   eax
c00271d4:	e8 0f fb fe ff       	call   c0016ce8 <Timer::Timer(char const*)>
c00271d9:	83 c4 10             	add    esp,0x10
c00271dc:	ba b4 e1 02 c0       	mov    edx,0xc002e1b4
c00271e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e5:	89 10                	mov    DWORD PTR [eax],edx
c00271e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00271f1:	0f b6 d0             	movzx  edx,al
c00271f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00271ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027203:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027209:	0f b6 d0             	movzx  edx,al
c002720c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027210:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0027215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027219:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002721f:	8d 50 01             	lea    edx,[eax+0x1]
c0027222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027226:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002722c:	0f b6 d0             	movzx  edx,al
c002722f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027233:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0027237:	83 e1 3f             	and    ecx,0x3f
c002723a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002723e:	90                   	nop
c002723f:	83 c4 0c             	add    esp,0xc
c0027242:	c3                   	ret    
c0027243:	66 90                	xchg   ax,ax
c0027245:	66 90                	xchg   ax,ax
c0027247:	66 90                	xchg   ax,ax
c0027249:	66 90                	xchg   ax,ax
c002724b:	66 90                	xchg   ax,ax
c002724d:	66 90                	xchg   ax,ax
c002724f:	90                   	nop

c0027250 <avxDetect>:
c0027250:	b8 00 00 00 00       	mov    eax,0x0
c0027255:	c3                   	ret    

c0027256 <avxSave>:
c0027256:	c3                   	ret    

c0027257 <avxLoad>:
c0027257:	c3                   	ret    

c0027258 <avxInit>:
c0027258:	c3                   	ret    

c0027259 <avxClose>:
c0027259:	c3                   	ret    

c002725a <wouldSheSayYes>:
c002725a:	c3                   	ret    
c002725b:	49                   	dec    ecx
c002725c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027260:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027264:	75 20                	jne    c0027286 <sseDetect.noSSE+0x1>
c0027266:	4e                   	dec    esi
c0027267:	79 61                	jns    c00272ca <x87Detect+0x14>
c0027269:	68 2e 2e 2e 00       	push   0x2e2e2e
c002726e:	66 90                	xchg   ax,ax

c0027270 <absolutelyNoChanceInHell>:
c0027270:	b8 01 00 00 00       	mov    eax,0x1
c0027275:	0f a2                	cpuid  
c0027277:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002727d:	74 06                	je     c0027285 <sseDetect.noSSE>
c002727f:	b8 01 00 00 00       	mov    eax,0x1
c0027284:	c3                   	ret    

c0027285 <sseDetect.noSSE>:
c0027285:	31 c0                	xor    eax,eax
c0027287:	c3                   	ret    

c0027288 <sseSave>:
c0027288:	0f ae 44 24 04       	fxsave [esp+0x4]
c002728d:	c3                   	ret    

c002728e <sseLoad>:
c002728e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027293:	c3                   	ret    

c0027294 <sseInit>:
c0027294:	e8 49 00 00 00       	call   c00272e2 <x87Init>
c0027299:	0f 20 e0             	mov    eax,cr4
c002729c:	66 0d 00 06          	or     ax,0x600
c00272a0:	0f 22 e0             	mov    cr4,eax
c00272a3:	c3                   	ret    

c00272a4 <sseClose>:
c00272a4:	c3                   	ret    
c00272a5:	66 90                	xchg   ax,ax
c00272a7:	66 90                	xchg   ax,ax
c00272a9:	66 90                	xchg   ax,ax
c00272ab:	66 90                	xchg   ax,ax
c00272ad:	66 90                	xchg   ax,ax
c00272af:	90                   	nop

c00272b0 <value_37F>:
c00272b0:	7f 03                	jg     c00272b5 <value_37A+0x1>

c00272b2 <value_37E>:
c00272b2:	7e 03                	jle    c00272b7 <x87Detect+0x1>

c00272b4 <value_37A>:
c00272b4:	7a 03                	jp     c00272b9 <x87Detect+0x3>

c00272b6 <x87Detect>:
c00272b6:	b8 01 00 00 00       	mov    eax,0x1
c00272bb:	0f a2                	cpuid  
c00272bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00272c3:	74 06                	je     c00272cb <x87Detect.nox87>
c00272c5:	b8 01 00 00 00       	mov    eax,0x1
c00272ca:	c3                   	ret    

c00272cb <x87Detect.nox87>:
c00272cb:	b8 00 00 00 00       	mov    eax,0x0
c00272d0:	c3                   	ret    

c00272d1 <x87Save>:
c00272d1:	55                   	push   ebp
c00272d2:	89 e5                	mov    ebp,esp
c00272d4:	9b dd 75 08          	fsave  [ebp+0x8]
c00272d8:	c9                   	leave  
c00272d9:	c3                   	ret    

c00272da <x87Load>:
c00272da:	55                   	push   ebp
c00272db:	89 e5                	mov    ebp,esp
c00272dd:	dd 65 08             	frstor [ebp+0x8]
c00272e0:	c9                   	leave  
c00272e1:	c3                   	ret    

c00272e2 <x87Init>:
c00272e2:	9b db e3             	finit  
c00272e5:	0f 20 c0             	mov    eax,cr0
c00272e8:	66 25 fb ff          	and    ax,0xfffb
c00272ec:	66 0d 22 00          	or     ax,0x22
c00272f0:	0f 22 c0             	mov    cr0,eax
c00272f3:	0f 06                	clts   
c00272f5:	d9 2d b4 72 02 c0    	fldcw  WORD PTR ds:0xc00272b4
c00272fb:	c3                   	ret    

c00272fc <x87Close>:
c00272fc:	c3                   	ret    
c00272fd:	66 90                	xchg   ax,ax
c00272ff:	90                   	nop

c0027300 <__do_global_ctors_aux>:
c0027300:	a1 38 9f 02 c0       	mov    eax,ds:0xc0029f38
c0027305:	83 f8 ff             	cmp    eax,0xffffffff
c0027308:	74 1a                	je     c0027324 <__do_global_ctors_aux+0x24>
c002730a:	55                   	push   ebp
c002730b:	89 e5                	mov    ebp,esp
c002730d:	53                   	push   ebx
c002730e:	52                   	push   edx
c002730f:	bb 38 9f 02 c0       	mov    ebx,0xc0029f38
c0027314:	ff d0                	call   eax
c0027316:	83 eb 04             	sub    ebx,0x4
c0027319:	8b 03                	mov    eax,DWORD PTR [ebx]
c002731b:	83 f8 ff             	cmp    eax,0xffffffff
c002731e:	75 f4                	jne    c0027314 <__do_global_ctors_aux+0x14>
c0027320:	58                   	pop    eax
c0027321:	5b                   	pop    ebx
c0027322:	5d                   	pop    ebp
c0027323:	c3                   	ret    
c0027324:	c3                   	ret    
c0027325:	66 90                	xchg   ax,ax
c0027327:	90                   	nop

c0027328 <__divdi3>:
c0027328:	55                   	push   ebp
c0027329:	57                   	push   edi
c002732a:	56                   	push   esi
c002732b:	53                   	push   ebx
c002732c:	83 ec 1c             	sub    esp,0x1c
c002732f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027337:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002733a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002733e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027342:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027346:	85 db                	test   ebx,ebx
c0027348:	0f 88 8e 00 00 00    	js     c00273dc <__divdi3+0xb4>
c002734e:	89 dd                	mov    ebp,ebx
c0027350:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027358:	89 d3                	mov    ebx,edx
c002735a:	85 d2                	test   edx,edx
c002735c:	79 0d                	jns    c002736b <__divdi3+0x43>
c002735e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027362:	f7 d8                	neg    eax
c0027364:	83 d2 00             	adc    edx,0x0
c0027367:	f7 da                	neg    edx
c0027369:	89 d3                	mov    ebx,edx
c002736b:	89 c7                	mov    edi,eax
c002736d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027370:	85 db                	test   ebx,ebx
c0027372:	75 48                	jne    c00273bc <__divdi3+0x94>
c0027374:	39 ef                	cmp    edi,ebp
c0027376:	76 24                	jbe    c002739c <__divdi3+0x74>
c0027378:	89 ea                	mov    edx,ebp
c002737a:	f7 f7                	div    edi
c002737c:	89 c1                	mov    ecx,eax
c002737e:	31 f6                	xor    esi,esi
c0027380:	89 c8                	mov    eax,ecx
c0027382:	89 f2                	mov    edx,esi
c0027384:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027388:	85 c9                	test   ecx,ecx
c002738a:	74 07                	je     c0027393 <__divdi3+0x6b>
c002738c:	f7 d8                	neg    eax
c002738e:	83 d2 00             	adc    edx,0x0
c0027391:	f7 da                	neg    edx
c0027393:	83 c4 1c             	add    esp,0x1c
c0027396:	5b                   	pop    ebx
c0027397:	5e                   	pop    esi
c0027398:	5f                   	pop    edi
c0027399:	5d                   	pop    ebp
c002739a:	c3                   	ret    
c002739b:	90                   	nop
c002739c:	85 ff                	test   edi,edi
c002739e:	75 0b                	jne    c00273ab <__divdi3+0x83>
c00273a0:	b8 01 00 00 00       	mov    eax,0x1
c00273a5:	31 d2                	xor    edx,edx
c00273a7:	f7 f3                	div    ebx
c00273a9:	89 c7                	mov    edi,eax
c00273ab:	31 d2                	xor    edx,edx
c00273ad:	89 e8                	mov    eax,ebp
c00273af:	f7 f7                	div    edi
c00273b1:	89 c6                	mov    esi,eax
c00273b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00273b6:	f7 f7                	div    edi
c00273b8:	89 c1                	mov    ecx,eax
c00273ba:	eb c4                	jmp    c0027380 <__divdi3+0x58>
c00273bc:	39 eb                	cmp    ebx,ebp
c00273be:	77 3c                	ja     c00273fc <__divdi3+0xd4>
c00273c0:	0f bd f3             	bsr    esi,ebx
c00273c3:	83 f6 1f             	xor    esi,0x1f
c00273c6:	75 40                	jne    c0027408 <__divdi3+0xe0>
c00273c8:	39 eb                	cmp    ebx,ebp
c00273ca:	72 09                	jb     c00273d5 <__divdi3+0xad>
c00273cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00273cf:	0f 87 97 00 00 00    	ja     c002746c <__divdi3+0x144>
c00273d5:	b9 01 00 00 00       	mov    ecx,0x1
c00273da:	eb a4                	jmp    c0027380 <__divdi3+0x58>
c00273dc:	f7 d9                	neg    ecx
c00273de:	83 d3 00             	adc    ebx,0x0
c00273e1:	f7 db                	neg    ebx
c00273e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00273e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00273ea:	89 dd                	mov    ebp,ebx
c00273ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00273f4:	e9 5f ff ff ff       	jmp    c0027358 <__divdi3+0x30>
c00273f9:	8d 76 00             	lea    esi,[esi+0x0]
c00273fc:	31 f6                	xor    esi,esi
c00273fe:	31 c9                	xor    ecx,ecx
c0027400:	e9 7b ff ff ff       	jmp    c0027380 <__divdi3+0x58>
c0027405:	8d 76 00             	lea    esi,[esi+0x0]
c0027408:	b8 20 00 00 00       	mov    eax,0x20
c002740d:	29 f0                	sub    eax,esi
c002740f:	89 f1                	mov    ecx,esi
c0027411:	d3 e3                	shl    ebx,cl
c0027413:	89 fa                	mov    edx,edi
c0027415:	88 c1                	mov    cl,al
c0027417:	d3 ea                	shr    edx,cl
c0027419:	09 da                	or     edx,ebx
c002741b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002741f:	89 f1                	mov    ecx,esi
c0027421:	d3 e7                	shl    edi,cl
c0027423:	89 eb                	mov    ebx,ebp
c0027425:	88 c1                	mov    cl,al
c0027427:	d3 eb                	shr    ebx,cl
c0027429:	89 f1                	mov    ecx,esi
c002742b:	d3 e5                	shl    ebp,cl
c002742d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027430:	88 c1                	mov    cl,al
c0027432:	d3 ea                	shr    edx,cl
c0027434:	09 d5                	or     ebp,edx
c0027436:	89 e8                	mov    eax,ebp
c0027438:	89 da                	mov    edx,ebx
c002743a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002743e:	89 d3                	mov    ebx,edx
c0027440:	89 c5                	mov    ebp,eax
c0027442:	f7 e7                	mul    edi
c0027444:	39 d3                	cmp    ebx,edx
c0027446:	72 18                	jb     c0027460 <__divdi3+0x138>
c0027448:	74 0a                	je     c0027454 <__divdi3+0x12c>
c002744a:	89 e9                	mov    ecx,ebp
c002744c:	31 f6                	xor    esi,esi
c002744e:	e9 2d ff ff ff       	jmp    c0027380 <__divdi3+0x58>
c0027453:	90                   	nop
c0027454:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027457:	89 f1                	mov    ecx,esi
c0027459:	d3 e7                	shl    edi,cl
c002745b:	39 c7                	cmp    edi,eax
c002745d:	73 eb                	jae    c002744a <__divdi3+0x122>
c002745f:	90                   	nop
c0027460:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027463:	31 f6                	xor    esi,esi
c0027465:	e9 16 ff ff ff       	jmp    c0027380 <__divdi3+0x58>
c002746a:	66 90                	xchg   ax,ax
c002746c:	31 c9                	xor    ecx,ecx
c002746e:	e9 0d ff ff ff       	jmp    c0027380 <__divdi3+0x58>
c0027473:	90                   	nop

c0027474 <__moddi3>:
c0027474:	55                   	push   ebp
c0027475:	57                   	push   edi
c0027476:	56                   	push   esi
c0027477:	53                   	push   ebx
c0027478:	83 ec 2c             	sub    esp,0x2c
c002747b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002747f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027483:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027487:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002748b:	85 db                	test   ebx,ebx
c002748d:	0f 88 85 00 00 00    	js     c0027518 <__moddi3+0xa4>
c0027493:	89 de                	mov    esi,ebx
c0027495:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002749d:	89 d7                	mov    edi,edx
c002749f:	85 d2                	test   edx,edx
c00274a1:	79 09                	jns    c00274ac <__moddi3+0x38>
c00274a3:	f7 d8                	neg    eax
c00274a5:	83 d2 00             	adc    edx,0x0
c00274a8:	f7 da                	neg    edx
c00274aa:	89 d7                	mov    edi,edx
c00274ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00274b0:	89 cd                	mov    ebp,ecx
c00274b2:	85 ff                	test   edi,edi
c00274b4:	75 52                	jne    c0027508 <__moddi3+0x94>
c00274b6:	89 c3                	mov    ebx,eax
c00274b8:	39 f0                	cmp    eax,esi
c00274ba:	76 24                	jbe    c00274e0 <__moddi3+0x6c>
c00274bc:	89 c8                	mov    eax,ecx
c00274be:	89 f2                	mov    edx,esi
c00274c0:	f7 f3                	div    ebx
c00274c2:	89 d6                	mov    esi,edx
c00274c4:	89 f0                	mov    eax,esi
c00274c6:	31 d2                	xor    edx,edx
c00274c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00274cc:	85 c9                	test   ecx,ecx
c00274ce:	74 07                	je     c00274d7 <__moddi3+0x63>
c00274d0:	f7 d8                	neg    eax
c00274d2:	83 d2 00             	adc    edx,0x0
c00274d5:	f7 da                	neg    edx
c00274d7:	83 c4 2c             	add    esp,0x2c
c00274da:	5b                   	pop    ebx
c00274db:	5e                   	pop    esi
c00274dc:	5f                   	pop    edi
c00274dd:	5d                   	pop    ebp
c00274de:	c3                   	ret    
c00274df:	90                   	nop
c00274e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00274e4:	85 db                	test   ebx,ebx
c00274e6:	75 0d                	jne    c00274f5 <__moddi3+0x81>
c00274e8:	b8 01 00 00 00       	mov    eax,0x1
c00274ed:	31 d2                	xor    edx,edx
c00274ef:	f7 f7                	div    edi
c00274f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00274f5:	89 f0                	mov    eax,esi
c00274f7:	31 d2                	xor    edx,edx
c00274f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00274fd:	f7 f7                	div    edi
c00274ff:	89 e8                	mov    eax,ebp
c0027501:	f7 f7                	div    edi
c0027503:	89 d6                	mov    esi,edx
c0027505:	eb bd                	jmp    c00274c4 <__moddi3+0x50>
c0027507:	90                   	nop
c0027508:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002750c:	39 f7                	cmp    edi,esi
c002750e:	76 20                	jbe    c0027530 <__moddi3+0xbc>
c0027510:	89 c8                	mov    eax,ecx
c0027512:	89 f2                	mov    edx,esi
c0027514:	eb b2                	jmp    c00274c8 <__moddi3+0x54>
c0027516:	66 90                	xchg   ax,ax
c0027518:	f7 d9                	neg    ecx
c002751a:	83 d3 00             	adc    ebx,0x0
c002751d:	f7 db                	neg    ebx
c002751f:	89 de                	mov    esi,ebx
c0027521:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027529:	e9 6f ff ff ff       	jmp    c002749d <__moddi3+0x29>
c002752e:	66 90                	xchg   ax,ax
c0027530:	0f bd c7             	bsr    eax,edi
c0027533:	83 f0 1f             	xor    eax,0x1f
c0027536:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002753a:	75 24                	jne    c0027560 <__moddi3+0xec>
c002753c:	39 f7                	cmp    edi,esi
c002753e:	72 06                	jb     c0027546 <__moddi3+0xd2>
c0027540:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027544:	77 0c                	ja     c0027552 <__moddi3+0xde>
c0027546:	89 e9                	mov    ecx,ebp
c0027548:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002754c:	19 fe                	sbb    esi,edi
c002754e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027556:	89 f2                	mov    edx,esi
c0027558:	e9 6b ff ff ff       	jmp    c00274c8 <__moddi3+0x54>
c002755d:	8d 76 00             	lea    esi,[esi+0x0]
c0027560:	b8 20 00 00 00       	mov    eax,0x20
c0027565:	89 c2                	mov    edx,eax
c0027567:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002756b:	29 da                	sub    edx,ebx
c002756d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027571:	88 d9                	mov    cl,bl
c0027573:	d3 e7                	shl    edi,cl
c0027575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027579:	88 d1                	mov    cl,dl
c002757b:	d3 e8                	shr    eax,cl
c002757d:	09 c7                	or     edi,eax
c002757f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027583:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027587:	89 d8                	mov    eax,ebx
c0027589:	88 d9                	mov    cl,bl
c002758b:	d3 e7                	shl    edi,cl
c002758d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027591:	89 f3                	mov    ebx,esi
c0027593:	88 d1                	mov    cl,dl
c0027595:	d3 eb                	shr    ebx,cl
c0027597:	89 c7                	mov    edi,eax
c0027599:	88 c1                	mov    cl,al
c002759b:	d3 e6                	shl    esi,cl
c002759d:	89 e8                	mov    eax,ebp
c002759f:	88 d1                	mov    cl,dl
c00275a1:	d3 e8                	shr    eax,cl
c00275a3:	09 f0                	or     eax,esi
c00275a5:	89 f9                	mov    ecx,edi
c00275a7:	d3 e5                	shl    ebp,cl
c00275a9:	89 da                	mov    edx,ebx
c00275ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00275af:	89 d3                	mov    ebx,edx
c00275b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00275b5:	89 c6                	mov    esi,eax
c00275b7:	89 d1                	mov    ecx,edx
c00275b9:	39 d3                	cmp    ebx,edx
c00275bb:	72 27                	jb     c00275e4 <__moddi3+0x170>
c00275bd:	74 21                	je     c00275e0 <__moddi3+0x16c>
c00275bf:	29 f5                	sub    ebp,esi
c00275c1:	19 cb                	sbb    ebx,ecx
c00275c3:	89 de                	mov    esi,ebx
c00275c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00275c9:	d3 e6                	shl    esi,cl
c00275cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00275cf:	89 f9                	mov    ecx,edi
c00275d1:	d3 ed                	shr    ebp,cl
c00275d3:	09 ee                	or     esi,ebp
c00275d5:	89 f0                	mov    eax,esi
c00275d7:	d3 eb                	shr    ebx,cl
c00275d9:	89 da                	mov    edx,ebx
c00275db:	e9 e8 fe ff ff       	jmp    c00274c8 <__moddi3+0x54>
c00275e0:	39 c5                	cmp    ebp,eax
c00275e2:	73 db                	jae    c00275bf <__moddi3+0x14b>
c00275e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00275e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00275ec:	89 d1                	mov    ecx,edx
c00275ee:	89 c6                	mov    esi,eax
c00275f0:	eb cd                	jmp    c00275bf <__moddi3+0x14b>
c00275f2:	66 90                	xchg   ax,ax

c00275f4 <__udivdi3>:
c00275f4:	55                   	push   ebp
c00275f5:	57                   	push   edi
c00275f6:	56                   	push   esi
c00275f7:	53                   	push   ebx
c00275f8:	83 ec 1c             	sub    esp,0x1c
c00275fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00275ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027603:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027607:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002760b:	85 d2                	test   edx,edx
c002760d:	75 41                	jne    c0027650 <__udivdi3+0x5c>
c002760f:	39 f7                	cmp    edi,esi
c0027611:	76 15                	jbe    c0027628 <__udivdi3+0x34>
c0027613:	89 e8                	mov    eax,ebp
c0027615:	89 f2                	mov    edx,esi
c0027617:	f7 f7                	div    edi
c0027619:	31 db                	xor    ebx,ebx
c002761b:	89 da                	mov    edx,ebx
c002761d:	83 c4 1c             	add    esp,0x1c
c0027620:	5b                   	pop    ebx
c0027621:	5e                   	pop    esi
c0027622:	5f                   	pop    edi
c0027623:	5d                   	pop    ebp
c0027624:	c3                   	ret    
c0027625:	8d 76 00             	lea    esi,[esi+0x0]
c0027628:	89 f9                	mov    ecx,edi
c002762a:	85 ff                	test   edi,edi
c002762c:	75 0b                	jne    c0027639 <__udivdi3+0x45>
c002762e:	b8 01 00 00 00       	mov    eax,0x1
c0027633:	31 d2                	xor    edx,edx
c0027635:	f7 f7                	div    edi
c0027637:	89 c1                	mov    ecx,eax
c0027639:	31 d2                	xor    edx,edx
c002763b:	89 f0                	mov    eax,esi
c002763d:	f7 f1                	div    ecx
c002763f:	89 c3                	mov    ebx,eax
c0027641:	89 e8                	mov    eax,ebp
c0027643:	f7 f1                	div    ecx
c0027645:	89 da                	mov    edx,ebx
c0027647:	83 c4 1c             	add    esp,0x1c
c002764a:	5b                   	pop    ebx
c002764b:	5e                   	pop    esi
c002764c:	5f                   	pop    edi
c002764d:	5d                   	pop    ebp
c002764e:	c3                   	ret    
c002764f:	90                   	nop
c0027650:	39 f2                	cmp    edx,esi
c0027652:	77 1c                	ja     c0027670 <__udivdi3+0x7c>
c0027654:	0f bd da             	bsr    ebx,edx
c0027657:	83 f3 1f             	xor    ebx,0x1f
c002765a:	75 24                	jne    c0027680 <__udivdi3+0x8c>
c002765c:	39 f2                	cmp    edx,esi
c002765e:	72 08                	jb     c0027668 <__udivdi3+0x74>
c0027660:	39 ef                	cmp    edi,ebp
c0027662:	0f 87 84 00 00 00    	ja     c00276ec <__udivdi3+0xf8>
c0027668:	b8 01 00 00 00       	mov    eax,0x1
c002766d:	eb ac                	jmp    c002761b <__udivdi3+0x27>
c002766f:	90                   	nop
c0027670:	31 db                	xor    ebx,ebx
c0027672:	31 c0                	xor    eax,eax
c0027674:	89 da                	mov    edx,ebx
c0027676:	83 c4 1c             	add    esp,0x1c
c0027679:	5b                   	pop    ebx
c002767a:	5e                   	pop    esi
c002767b:	5f                   	pop    edi
c002767c:	5d                   	pop    ebp
c002767d:	c3                   	ret    
c002767e:	66 90                	xchg   ax,ax
c0027680:	b8 20 00 00 00       	mov    eax,0x20
c0027685:	29 d8                	sub    eax,ebx
c0027687:	88 d9                	mov    cl,bl
c0027689:	d3 e2                	shl    edx,cl
c002768b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002768f:	89 fa                	mov    edx,edi
c0027691:	88 c1                	mov    cl,al
c0027693:	d3 ea                	shr    edx,cl
c0027695:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027699:	09 d1                	or     ecx,edx
c002769b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002769f:	88 d9                	mov    cl,bl
c00276a1:	d3 e7                	shl    edi,cl
c00276a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00276a7:	89 f7                	mov    edi,esi
c00276a9:	88 c1                	mov    cl,al
c00276ab:	d3 ef                	shr    edi,cl
c00276ad:	88 d9                	mov    cl,bl
c00276af:	d3 e6                	shl    esi,cl
c00276b1:	89 ea                	mov    edx,ebp
c00276b3:	88 c1                	mov    cl,al
c00276b5:	d3 ea                	shr    edx,cl
c00276b7:	09 d6                	or     esi,edx
c00276b9:	89 f0                	mov    eax,esi
c00276bb:	89 fa                	mov    edx,edi
c00276bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00276c1:	89 d7                	mov    edi,edx
c00276c3:	89 c6                	mov    esi,eax
c00276c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00276c9:	39 d7                	cmp    edi,edx
c00276cb:	72 13                	jb     c00276e0 <__udivdi3+0xec>
c00276cd:	74 09                	je     c00276d8 <__udivdi3+0xe4>
c00276cf:	89 f0                	mov    eax,esi
c00276d1:	31 db                	xor    ebx,ebx
c00276d3:	e9 43 ff ff ff       	jmp    c002761b <__udivdi3+0x27>
c00276d8:	88 d9                	mov    cl,bl
c00276da:	d3 e5                	shl    ebp,cl
c00276dc:	39 c5                	cmp    ebp,eax
c00276de:	73 ef                	jae    c00276cf <__udivdi3+0xdb>
c00276e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00276e3:	31 db                	xor    ebx,ebx
c00276e5:	e9 31 ff ff ff       	jmp    c002761b <__udivdi3+0x27>
c00276ea:	66 90                	xchg   ax,ax
c00276ec:	31 c0                	xor    eax,eax
c00276ee:	e9 28 ff ff ff       	jmp    c002761b <__udivdi3+0x27>
c00276f3:	90                   	nop

c00276f4 <__umoddi3>:
c00276f4:	55                   	push   ebp
c00276f5:	57                   	push   edi
c00276f6:	56                   	push   esi
c00276f7:	53                   	push   ebx
c00276f8:	83 ec 1c             	sub    esp,0x1c
c00276fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00276ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027703:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027707:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002770b:	89 da                	mov    edx,ebx
c002770d:	85 c0                	test   eax,eax
c002770f:	75 37                	jne    c0027748 <__umoddi3+0x54>
c0027711:	39 df                	cmp    edi,ebx
c0027713:	76 13                	jbe    c0027728 <__umoddi3+0x34>
c0027715:	89 f0                	mov    eax,esi
c0027717:	f7 f7                	div    edi
c0027719:	89 d0                	mov    eax,edx
c002771b:	31 d2                	xor    edx,edx
c002771d:	83 c4 1c             	add    esp,0x1c
c0027720:	5b                   	pop    ebx
c0027721:	5e                   	pop    esi
c0027722:	5f                   	pop    edi
c0027723:	5d                   	pop    ebp
c0027724:	c3                   	ret    
c0027725:	8d 76 00             	lea    esi,[esi+0x0]
c0027728:	89 fd                	mov    ebp,edi
c002772a:	85 ff                	test   edi,edi
c002772c:	75 0b                	jne    c0027739 <__umoddi3+0x45>
c002772e:	b8 01 00 00 00       	mov    eax,0x1
c0027733:	31 d2                	xor    edx,edx
c0027735:	f7 f7                	div    edi
c0027737:	89 c5                	mov    ebp,eax
c0027739:	89 d8                	mov    eax,ebx
c002773b:	31 d2                	xor    edx,edx
c002773d:	f7 f5                	div    ebp
c002773f:	89 f0                	mov    eax,esi
c0027741:	f7 f5                	div    ebp
c0027743:	89 d0                	mov    eax,edx
c0027745:	eb d4                	jmp    c002771b <__umoddi3+0x27>
c0027747:	90                   	nop
c0027748:	89 f1                	mov    ecx,esi
c002774a:	39 d8                	cmp    eax,ebx
c002774c:	76 0a                	jbe    c0027758 <__umoddi3+0x64>
c002774e:	89 f0                	mov    eax,esi
c0027750:	83 c4 1c             	add    esp,0x1c
c0027753:	5b                   	pop    ebx
c0027754:	5e                   	pop    esi
c0027755:	5f                   	pop    edi
c0027756:	5d                   	pop    ebp
c0027757:	c3                   	ret    
c0027758:	0f bd e8             	bsr    ebp,eax
c002775b:	83 f5 1f             	xor    ebp,0x1f
c002775e:	75 1c                	jne    c002777c <__umoddi3+0x88>
c0027760:	39 d8                	cmp    eax,ebx
c0027762:	72 04                	jb     c0027768 <__umoddi3+0x74>
c0027764:	39 f7                	cmp    edi,esi
c0027766:	77 08                	ja     c0027770 <__umoddi3+0x7c>
c0027768:	89 da                	mov    edx,ebx
c002776a:	29 fe                	sub    esi,edi
c002776c:	19 c2                	sbb    edx,eax
c002776e:	89 f1                	mov    ecx,esi
c0027770:	89 c8                	mov    eax,ecx
c0027772:	83 c4 1c             	add    esp,0x1c
c0027775:	5b                   	pop    ebx
c0027776:	5e                   	pop    esi
c0027777:	5f                   	pop    edi
c0027778:	5d                   	pop    ebp
c0027779:	c3                   	ret    
c002777a:	66 90                	xchg   ax,ax
c002777c:	ba 20 00 00 00       	mov    edx,0x20
c0027781:	29 ea                	sub    edx,ebp
c0027783:	89 e9                	mov    ecx,ebp
c0027785:	d3 e0                	shl    eax,cl
c0027787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002778b:	89 f8                	mov    eax,edi
c002778d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027791:	88 d1                	mov    cl,dl
c0027793:	d3 e8                	shr    eax,cl
c0027795:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027799:	09 c1                	or     ecx,eax
c002779b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002779f:	89 e9                	mov    ecx,ebp
c00277a1:	d3 e7                	shl    edi,cl
c00277a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00277a7:	89 d8                	mov    eax,ebx
c00277a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00277ad:	88 d1                	mov    cl,dl
c00277af:	d3 e8                	shr    eax,cl
c00277b1:	89 c7                	mov    edi,eax
c00277b3:	89 e9                	mov    ecx,ebp
c00277b5:	d3 e3                	shl    ebx,cl
c00277b7:	89 f0                	mov    eax,esi
c00277b9:	88 d1                	mov    cl,dl
c00277bb:	d3 e8                	shr    eax,cl
c00277bd:	09 d8                	or     eax,ebx
c00277bf:	89 e9                	mov    ecx,ebp
c00277c1:	d3 e6                	shl    esi,cl
c00277c3:	89 f3                	mov    ebx,esi
c00277c5:	89 fa                	mov    edx,edi
c00277c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00277cb:	89 d1                	mov    ecx,edx
c00277cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00277d1:	89 c6                	mov    esi,eax
c00277d3:	89 d7                	mov    edi,edx
c00277d5:	39 d1                	cmp    ecx,edx
c00277d7:	72 27                	jb     c0027800 <__umoddi3+0x10c>
c00277d9:	74 21                	je     c00277fc <__umoddi3+0x108>
c00277db:	89 ca                	mov    edx,ecx
c00277dd:	29 f3                	sub    ebx,esi
c00277df:	19 fa                	sbb    edx,edi
c00277e1:	89 d0                	mov    eax,edx
c00277e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00277e7:	d3 e0                	shl    eax,cl
c00277e9:	89 e9                	mov    ecx,ebp
c00277eb:	d3 eb                	shr    ebx,cl
c00277ed:	09 d8                	or     eax,ebx
c00277ef:	d3 ea                	shr    edx,cl
c00277f1:	83 c4 1c             	add    esp,0x1c
c00277f4:	5b                   	pop    ebx
c00277f5:	5e                   	pop    esi
c00277f6:	5f                   	pop    edi
c00277f7:	5d                   	pop    ebp
c00277f8:	c3                   	ret    
c00277f9:	8d 76 00             	lea    esi,[esi+0x0]
c00277fc:	39 c3                	cmp    ebx,eax
c00277fe:	73 db                	jae    c00277db <__umoddi3+0xe7>
c0027800:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027804:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027808:	89 d7                	mov    edi,edx
c002780a:	89 c6                	mov    esi,eax
c002780c:	eb cd                	jmp    c00277db <__umoddi3+0xe7>

c002780e <__addsf3>:
c002780e:	55                   	push   ebp
c002780f:	89 e5                	mov    ebp,esp
c0027811:	57                   	push   edi
c0027812:	56                   	push   esi
c0027813:	53                   	push   ebx
c0027814:	83 ec 08             	sub    esp,0x8
c0027817:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002781a:	89 fa                	mov    edx,edi
c002781c:	89 f8                	mov    eax,edi
c002781e:	c1 f8 17             	sar    eax,0x17
c0027821:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027824:	c1 e2 08             	shl    edx,0x8
c0027827:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002782d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027830:	89 de                	mov    esi,ebx
c0027832:	c1 fe 17             	sar    esi,0x17
c0027835:	c1 e3 08             	shl    ebx,0x8
c0027838:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002783e:	31 f0                	xor    eax,esi
c0027840:	0f 88 3b 01 00 00    	js     c0027981 <__addsf3+0x173>
c0027846:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027849:	29 f1                	sub    ecx,esi
c002784b:	85 c9                	test   ecx,ecx
c002784d:	7e 54                	jle    c00278a3 <__addsf3+0x95>
c002784f:	89 f0                	mov    eax,esi
c0027851:	84 c0                	test   al,al
c0027853:	75 10                	jne    c0027865 <__addsf3+0x57>
c0027855:	85 db                	test   ebx,ebx
c0027857:	0f 84 aa 02 00 00    	je     c0027b07 <__addsf3+0x2f9>
c002785d:	49                   	dec    ecx
c002785e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027861:	74 38                	je     c002789b <__addsf3+0x8d>
c0027863:	eb 13                	jmp    c0027878 <__addsf3+0x6a>
c0027865:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027868:	f7 d0                	not    eax
c002786a:	84 c0                	test   al,al
c002786c:	0f 84 95 02 00 00    	je     c0027b07 <__addsf3+0x2f9>
c0027872:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027878:	83 f9 1f             	cmp    ecx,0x1f
c002787b:	0f 8f 86 02 00 00    	jg     c0027b07 <__addsf3+0x2f9>
c0027881:	89 de                	mov    esi,ebx
c0027883:	d3 ee                	shr    esi,cl
c0027885:	b8 20 00 00 00       	mov    eax,0x20
c002788a:	29 c8                	sub    eax,ecx
c002788c:	89 c1                	mov    ecx,eax
c002788e:	d3 e3                	shl    ebx,cl
c0027890:	31 c0                	xor    eax,eax
c0027892:	85 db                	test   ebx,ebx
c0027894:	0f 95 c0             	setne  al
c0027897:	09 f0                	or     eax,esi
c0027899:	01 d0                	add    eax,edx
c002789b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002789e:	e9 b6 00 00 00       	jmp    c0027959 <__addsf3+0x14b>
c00278a3:	74 5c                	je     c0027901 <__addsf3+0xf3>
c00278a5:	89 f1                	mov    ecx,esi
c00278a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00278aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00278b1:	75 14                	jne    c00278c7 <__addsf3+0xb9>
c00278b3:	85 d2                	test   edx,edx
c00278b5:	0f 84 4c 02 00 00    	je     c0027b07 <__addsf3+0x2f9>
c00278bb:	49                   	dec    ecx
c00278bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00278bf:	0f 84 94 00 00 00    	je     c0027959 <__addsf3+0x14b>
c00278c5:	eb 12                	jmp    c00278d9 <__addsf3+0xcb>
c00278c7:	89 f0                	mov    eax,esi
c00278c9:	f7 d0                	not    eax
c00278cb:	84 c0                	test   al,al
c00278cd:	0f 84 34 02 00 00    	je     c0027b07 <__addsf3+0x2f9>
c00278d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278dc:	83 f9 1f             	cmp    ecx,0x1f
c00278df:	0f 8f 22 02 00 00    	jg     c0027b07 <__addsf3+0x2f9>
c00278e5:	89 d7                	mov    edi,edx
c00278e7:	d3 ef                	shr    edi,cl
c00278e9:	b8 20 00 00 00       	mov    eax,0x20
c00278ee:	29 c8                	sub    eax,ecx
c00278f0:	89 c1                	mov    ecx,eax
c00278f2:	d3 e2                	shl    edx,cl
c00278f4:	31 c0                	xor    eax,eax
c00278f6:	85 d2                	test   edx,edx
c00278f8:	0f 95 c0             	setne  al
c00278fb:	09 f8                	or     eax,edi
c00278fd:	01 d8                	add    eax,ebx
c00278ff:	eb 58                	jmp    c0027959 <__addsf3+0x14b>
c0027901:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027904:	8d 70 01             	lea    esi,[eax+0x1]
c0027907:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002790d:	75 32                	jne    c0027941 <__addsf3+0x133>
c002790f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027913:	75 1f                	jne    c0027934 <__addsf3+0x126>
c0027915:	85 d2                	test   edx,edx
c0027917:	0f 84 e0 01 00 00    	je     c0027afd <__addsf3+0x2ef>
c002791d:	85 db                	test   ebx,ebx
c002791f:	0f 84 e2 01 00 00    	je     c0027b07 <__addsf3+0x2f9>
c0027925:	89 d0                	mov    eax,edx
c0027927:	01 d8                	add    eax,ebx
c0027929:	0f 89 a9 01 00 00    	jns    c0027ad8 <__addsf3+0x2ca>
c002792f:	e9 9d 01 00 00       	jmp    c0027ad1 <__addsf3+0x2c3>
c0027934:	85 d2                	test   edx,edx
c0027936:	0f 85 cb 01 00 00    	jne    c0027b07 <__addsf3+0x2f9>
c002793c:	e9 bc 01 00 00       	jmp    c0027afd <__addsf3+0x2ef>
c0027941:	31 c0                	xor    eax,eax
c0027943:	89 f1                	mov    ecx,esi
c0027945:	f7 d1                	not    ecx
c0027947:	84 c9                	test   cl,cl
c0027949:	0f 84 90 01 00 00    	je     c0027adf <__addsf3+0x2d1>
c002794f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027952:	d1 e8                	shr    eax,1
c0027954:	e9 86 01 00 00       	jmp    c0027adf <__addsf3+0x2d1>
c0027959:	85 c0                	test   eax,eax
c002795b:	0f 89 7e 01 00 00    	jns    c0027adf <__addsf3+0x2d1>
c0027961:	46                   	inc    esi
c0027962:	89 f2                	mov    edx,esi
c0027964:	f7 d2                	not    edx
c0027966:	84 d2                	test   dl,dl
c0027968:	0f 84 6f 01 00 00    	je     c0027add <__addsf3+0x2cf>
c002796e:	89 c2                	mov    edx,eax
c0027970:	83 e2 01             	and    edx,0x1
c0027973:	d1 e8                	shr    eax,1
c0027975:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002797a:	09 d0                	or     eax,edx
c002797c:	e9 5e 01 00 00       	jmp    c0027adf <__addsf3+0x2d1>
c0027981:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027985:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027988:	89 f0                	mov    eax,esi
c002798a:	0f b6 c0             	movzx  eax,al
c002798d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027990:	29 c1                	sub    ecx,eax
c0027992:	85 c9                	test   ecx,ecx
c0027994:	7e 55                	jle    c00279eb <__addsf3+0x1dd>
c0027996:	85 c0                	test   eax,eax
c0027998:	75 11                	jne    c00279ab <__addsf3+0x19d>
c002799a:	85 db                	test   ebx,ebx
c002799c:	0f 84 65 01 00 00    	je     c0027b07 <__addsf3+0x2f9>
c00279a2:	49                   	dec    ecx
c00279a3:	75 19                	jne    c00279be <__addsf3+0x1b0>
c00279a5:	89 d0                	mov    eax,edx
c00279a7:	29 d8                	sub    eax,ebx
c00279a9:	eb 38                	jmp    c00279e3 <__addsf3+0x1d5>
c00279ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00279ae:	f7 d0                	not    eax
c00279b0:	84 c0                	test   al,al
c00279b2:	0f 84 4f 01 00 00    	je     c0027b07 <__addsf3+0x2f9>
c00279b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00279be:	83 f9 1f             	cmp    ecx,0x1f
c00279c1:	0f 8f 40 01 00 00    	jg     c0027b07 <__addsf3+0x2f9>
c00279c7:	89 de                	mov    esi,ebx
c00279c9:	d3 ee                	shr    esi,cl
c00279cb:	b8 20 00 00 00       	mov    eax,0x20
c00279d0:	29 c8                	sub    eax,ecx
c00279d2:	89 c1                	mov    ecx,eax
c00279d4:	d3 e3                	shl    ebx,cl
c00279d6:	31 c0                	xor    eax,eax
c00279d8:	85 db                	test   ebx,ebx
c00279da:	0f 95 c0             	setne  al
c00279dd:	09 f0                	or     eax,esi
c00279df:	29 c2                	sub    edx,eax
c00279e1:	89 d0                	mov    eax,edx
c00279e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00279e6:	e9 af 00 00 00       	jmp    c0027a9a <__addsf3+0x28c>
c00279eb:	74 5c                	je     c0027a49 <__addsf3+0x23b>
c00279ed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00279f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00279f3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00279f7:	75 14                	jne    c0027a0d <__addsf3+0x1ff>
c00279f9:	85 d2                	test   edx,edx
c00279fb:	0f 84 06 01 00 00    	je     c0027b07 <__addsf3+0x2f9>
c0027a01:	48                   	dec    eax
c0027a02:	75 1b                	jne    c0027a1f <__addsf3+0x211>
c0027a04:	89 d8                	mov    eax,ebx
c0027a06:	29 d0                	sub    eax,edx
c0027a08:	e9 8d 00 00 00       	jmp    c0027a9a <__addsf3+0x28c>
c0027a0d:	89 f1                	mov    ecx,esi
c0027a0f:	f7 d1                	not    ecx
c0027a11:	84 c9                	test   cl,cl
c0027a13:	0f 84 ee 00 00 00    	je     c0027b07 <__addsf3+0x2f9>
c0027a19:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a1f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a22:	83 f8 1f             	cmp    eax,0x1f
c0027a25:	0f 8f dc 00 00 00    	jg     c0027b07 <__addsf3+0x2f9>
c0027a2b:	89 d7                	mov    edi,edx
c0027a2d:	88 c1                	mov    cl,al
c0027a2f:	d3 ef                	shr    edi,cl
c0027a31:	b9 20 00 00 00       	mov    ecx,0x20
c0027a36:	29 c1                	sub    ecx,eax
c0027a38:	d3 e2                	shl    edx,cl
c0027a3a:	31 c0                	xor    eax,eax
c0027a3c:	85 d2                	test   edx,edx
c0027a3e:	0f 95 c0             	setne  al
c0027a41:	09 f8                	or     eax,edi
c0027a43:	29 c3                	sub    ebx,eax
c0027a45:	89 d8                	mov    eax,ebx
c0027a47:	eb 51                	jmp    c0027a9a <__addsf3+0x28c>
c0027a49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027a4c:	40                   	inc    eax
c0027a4d:	a8 fe                	test   al,0xfe
c0027a4f:	75 3d                	jne    c0027a8e <__addsf3+0x280>
c0027a51:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027a55:	0f 85 a7 00 00 00    	jne    c0027b02 <__addsf3+0x2f4>
c0027a5b:	85 d2                	test   edx,edx
c0027a5d:	75 12                	jne    c0027a71 <__addsf3+0x263>
c0027a5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a62:	85 db                	test   ebx,ebx
c0027a64:	0f 85 9d 00 00 00    	jne    c0027b07 <__addsf3+0x2f9>
c0027a6a:	31 ff                	xor    edi,edi
c0027a6c:	e9 96 00 00 00       	jmp    c0027b07 <__addsf3+0x2f9>
c0027a71:	85 db                	test   ebx,ebx
c0027a73:	0f 84 8e 00 00 00    	je     c0027b07 <__addsf3+0x2f9>
c0027a79:	89 d0                	mov    eax,edx
c0027a7b:	29 d8                	sub    eax,ebx
c0027a7d:	79 06                	jns    c0027a85 <__addsf3+0x277>
c0027a7f:	89 d8                	mov    eax,ebx
c0027a81:	29 d0                	sub    eax,edx
c0027a83:	eb 5a                	jmp    c0027adf <__addsf3+0x2d1>
c0027a85:	bf 00 00 00 00       	mov    edi,0x0
c0027a8a:	74 7b                	je     c0027b07 <__addsf3+0x2f9>
c0027a8c:	eb 4a                	jmp    c0027ad8 <__addsf3+0x2ca>
c0027a8e:	89 d0                	mov    eax,edx
c0027a90:	29 d8                	sub    eax,ebx
c0027a92:	79 12                	jns    c0027aa6 <__addsf3+0x298>
c0027a94:	89 d8                	mov    eax,ebx
c0027a96:	29 d0                	sub    eax,edx
c0027a98:	eb 09                	jmp    c0027aa3 <__addsf3+0x295>
c0027a9a:	85 c0                	test   eax,eax
c0027a9c:	79 41                	jns    c0027adf <__addsf3+0x2d1>
c0027a9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027aa3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027aa6:	31 f6                	xor    esi,esi
c0027aa8:	85 c0                	test   eax,eax
c0027aaa:	74 33                	je     c0027adf <__addsf3+0x2d1>
c0027aac:	0f bd c8             	bsr    ecx,eax
c0027aaf:	83 f1 1f             	xor    ecx,0x1f
c0027ab2:	d3 e0                	shl    eax,cl
c0027ab4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027ab8:	39 ca                	cmp    edx,ecx
c0027aba:	7f 10                	jg     c0027acc <__addsf3+0x2be>
c0027abc:	29 d1                	sub    ecx,edx
c0027abe:	41                   	inc    ecx
c0027abf:	d3 e8                	shr    eax,cl
c0027ac1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027ac4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027aca:	eb 13                	jmp    c0027adf <__addsf3+0x2d1>
c0027acc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027acf:	29 ce                	sub    esi,ecx
c0027ad1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ad6:	eb 07                	jmp    c0027adf <__addsf3+0x2d1>
c0027ad8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027adb:	eb 02                	jmp    c0027adf <__addsf3+0x2d1>
c0027add:	31 c0                	xor    eax,eax
c0027adf:	89 c2                	mov    edx,eax
c0027ae1:	c1 ea 08             	shr    edx,0x8
c0027ae4:	a8 7f                	test   al,0x7f
c0027ae6:	0f 95 c1             	setne  cl
c0027ae9:	09 d1                	or     ecx,edx
c0027aeb:	83 e1 01             	and    ecx,0x1
c0027aee:	c1 e8 07             	shr    eax,0x7
c0027af1:	21 c8                	and    eax,ecx
c0027af3:	c1 e6 17             	shl    esi,0x17
c0027af6:	09 d6                	or     esi,edx
c0027af8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027afb:	eb 0a                	jmp    c0027b07 <__addsf3+0x2f9>
c0027afd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b00:	eb 05                	jmp    c0027b07 <__addsf3+0x2f9>
c0027b02:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027b07:	89 f8                	mov    eax,edi
c0027b09:	5a                   	pop    edx
c0027b0a:	59                   	pop    ecx
c0027b0b:	5b                   	pop    ebx
c0027b0c:	5e                   	pop    esi
c0027b0d:	5f                   	pop    edi
c0027b0e:	5d                   	pop    ebp
c0027b0f:	c3                   	ret    

c0027b10 <__subsf3>:
c0027b10:	55                   	push   ebp
c0027b11:	89 e5                	mov    ebp,esp
c0027b13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b16:	05 00 00 00 80       	add    eax,0x80000000
c0027b1b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027b1e:	5d                   	pop    ebp
c0027b1f:	e9 ea fc ff ff       	jmp    c002780e <__addsf3>

c0027b24 <__negsf2>:
c0027b24:	55                   	push   ebp
c0027b25:	89 e5                	mov    ebp,esp
c0027b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b2a:	05 00 00 00 80       	add    eax,0x80000000
c0027b2f:	5d                   	pop    ebp
c0027b30:	c3                   	ret    

c0027b31 <__mulsf3>:
c0027b31:	55                   	push   ebp
c0027b32:	89 e5                	mov    ebp,esp
c0027b34:	57                   	push   edi
c0027b35:	56                   	push   esi
c0027b36:	53                   	push   ebx
c0027b37:	83 ec 1c             	sub    esp,0x1c
c0027b3a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027b3d:	89 f0                	mov    eax,esi
c0027b3f:	89 f1                	mov    ecx,esi
c0027b41:	c1 f9 17             	sar    ecx,0x17
c0027b44:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b47:	c1 e0 08             	shl    eax,0x8
c0027b4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b4f:	89 c1                	mov    ecx,eax
c0027b51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b54:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b57:	89 c7                	mov    edi,eax
c0027b59:	c1 ff 17             	sar    edi,0x17
c0027b5c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027b60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027b63:	89 f8                	mov    eax,edi
c0027b65:	0f b6 c0             	movzx  eax,al
c0027b68:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b6b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027b6f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027b72:	42                   	inc    edx
c0027b73:	80 e2 fe             	and    dl,0xfe
c0027b76:	75 7b                	jne    c0027bf3 <__mulsf3+0xc2>
c0027b78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b7c:	74 54                	je     c0027bd2 <__mulsf3+0xa1>
c0027b7e:	85 c9                	test   ecx,ecx
c0027b80:	0f 85 64 01 00 00    	jne    c0027cea <__mulsf3+0x1b9>
c0027b86:	8d 57 01             	lea    edx,[edi+0x1]
c0027b89:	80 e2 fe             	and    dl,0xfe
c0027b8c:	75 1f                	jne    c0027bad <__mulsf3+0x7c>
c0027b8e:	85 c0                	test   eax,eax
c0027b90:	b8 00 00 00 00       	mov    eax,0x0
c0027b95:	74 29                	je     c0027bc0 <__mulsf3+0x8f>
c0027b97:	53                   	push   ebx
c0027b98:	53                   	push   ebx
c0027b99:	50                   	push   eax
c0027b9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b9d:	e8 96 05 00 00       	call   c0028138 <__nesf2>
c0027ba2:	83 c4 10             	add    esp,0x10
c0027ba5:	85 c0                	test   eax,eax
c0027ba7:	0f 85 3a 01 00 00    	jne    c0027ce7 <__mulsf3+0x1b6>
c0027bad:	85 ff                	test   edi,edi
c0027baf:	0f 89 35 01 00 00    	jns    c0027cea <__mulsf3+0x1b9>
c0027bb5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027bbb:	e9 2a 01 00 00       	jmp    c0027cea <__mulsf3+0x1b9>
c0027bc0:	51                   	push   ecx
c0027bc1:	51                   	push   ecx
c0027bc2:	50                   	push   eax
c0027bc3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bc6:	e8 6d 05 00 00       	call   c0028138 <__nesf2>
c0027bcb:	83 c4 10             	add    esp,0x10
c0027bce:	85 c0                	test   eax,eax
c0027bd0:	eb 15                	jmp    c0027be7 <__mulsf3+0xb6>
c0027bd2:	85 c9                	test   ecx,ecx
c0027bd4:	74 0b                	je     c0027be1 <__mulsf3+0xb0>
c0027bd6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027bd9:	01 c9                	add    ecx,ecx
c0027bdb:	78 16                	js     c0027bf3 <__mulsf3+0xc2>
c0027bdd:	89 d3                	mov    ebx,edx
c0027bdf:	eb f5                	jmp    c0027bd6 <__mulsf3+0xa5>
c0027be1:	89 f8                	mov    eax,edi
c0027be3:	f7 d0                	not    eax
c0027be5:	84 c0                	test   al,al
c0027be7:	75 c4                	jne    c0027bad <__mulsf3+0x7c>
c0027be9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027bee:	e9 f7 00 00 00       	jmp    c0027cea <__mulsf3+0x1b9>
c0027bf3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027bf6:	c1 e6 08             	shl    esi,0x8
c0027bf9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027bff:	8d 57 01             	lea    edx,[edi+0x1]
c0027c02:	80 e2 fe             	and    dl,0xfe
c0027c05:	75 63                	jne    c0027c6a <__mulsf3+0x139>
c0027c07:	85 c0                	test   eax,eax
c0027c09:	74 2f                	je     c0027c3a <__mulsf3+0x109>
c0027c0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c0f:	0f 89 d2 00 00 00    	jns    c0027ce7 <__mulsf3+0x1b6>
c0027c15:	52                   	push   edx
c0027c16:	52                   	push   edx
c0027c17:	6a 00                	push   0x0
c0027c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c1c:	e8 dc 04 00 00       	call   c00280fd <__eqsf2>
c0027c21:	83 c4 10             	add    esp,0x10
c0027c24:	85 c0                	test   eax,eax
c0027c26:	0f 85 bb 00 00 00    	jne    c0027ce7 <__mulsf3+0x1b6>
c0027c2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c2f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027c35:	e9 b0 00 00 00       	jmp    c0027cea <__mulsf3+0x1b9>
c0027c3a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027c3d:	50                   	push   eax
c0027c3e:	50                   	push   eax
c0027c3f:	6a 00                	push   0x0
c0027c41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c44:	e8 b4 04 00 00       	call   c00280fd <__eqsf2>
c0027c49:	83 c4 10             	add    esp,0x10
c0027c4c:	85 c0                	test   eax,eax
c0027c4e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c51:	75 0c                	jne    c0027c5f <__mulsf3+0x12e>
c0027c53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c57:	0f 89 8a 00 00 00    	jns    c0027ce7 <__mulsf3+0x1b6>
c0027c5d:	eb cd                	jmp    c0027c2c <__mulsf3+0xfb>
c0027c5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c62:	01 f6                	add    esi,esi
c0027c64:	78 04                	js     c0027c6a <__mulsf3+0x139>
c0027c66:	89 c3                	mov    ebx,eax
c0027c68:	eb f5                	jmp    c0027c5f <__mulsf3+0x12e>
c0027c6a:	89 c8                	mov    eax,ecx
c0027c6c:	0d 00 00 00 80       	or     eax,0x80000000
c0027c71:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c77:	f7 e6                	mul    esi
c0027c79:	85 c0                	test   eax,eax
c0027c7b:	0f 95 c0             	setne  al
c0027c7e:	0f b6 c0             	movzx  eax,al
c0027c81:	09 c2                	or     edx,eax
c0027c83:	78 03                	js     c0027c88 <__mulsf3+0x157>
c0027c85:	01 d2                	add    edx,edx
c0027c87:	4b                   	dec    ebx
c0027c88:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027c8e:	7f 22                	jg     c0027cb2 <__mulsf3+0x181>
c0027c90:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027c96:	85 db                	test   ebx,ebx
c0027c98:	7f 23                	jg     c0027cbd <__mulsf3+0x18c>
c0027c9a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027c9d:	7c 1a                	jl     c0027cb9 <__mulsf3+0x188>
c0027c9f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ca5:	b9 01 00 00 00       	mov    ecx,0x1
c0027caa:	29 d9                	sub    ecx,ebx
c0027cac:	d3 ea                	shr    edx,cl
c0027cae:	31 db                	xor    ebx,ebx
c0027cb0:	eb 0b                	jmp    c0027cbd <__mulsf3+0x18c>
c0027cb2:	bb ff 00 00 00       	mov    ebx,0xff
c0027cb7:	eb 02                	jmp    c0027cbb <__mulsf3+0x18a>
c0027cb9:	31 db                	xor    ebx,ebx
c0027cbb:	31 d2                	xor    edx,edx
c0027cbd:	89 d0                	mov    eax,edx
c0027cbf:	c1 e8 08             	shr    eax,0x8
c0027cc2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027cc5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027ccb:	09 fb                	or     ebx,edi
c0027ccd:	c1 e3 17             	shl    ebx,0x17
c0027cd0:	09 c3                	or     ebx,eax
c0027cd2:	f6 c2 7f             	test   dl,0x7f
c0027cd5:	0f 95 c1             	setne  cl
c0027cd8:	09 c8                	or     eax,ecx
c0027cda:	83 e0 01             	and    eax,0x1
c0027cdd:	c1 ea 07             	shr    edx,0x7
c0027ce0:	21 c2                	and    edx,eax
c0027ce2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027ce5:	eb 03                	jmp    c0027cea <__mulsf3+0x1b9>
c0027ce7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027cea:	89 f0                	mov    eax,esi
c0027cec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cef:	5b                   	pop    ebx
c0027cf0:	5e                   	pop    esi
c0027cf1:	5f                   	pop    edi
c0027cf2:	5d                   	pop    ebp
c0027cf3:	c3                   	ret    

c0027cf4 <__divsf3>:
c0027cf4:	55                   	push   ebp
c0027cf5:	89 e5                	mov    ebp,esp
c0027cf7:	57                   	push   edi
c0027cf8:	56                   	push   esi
c0027cf9:	53                   	push   ebx
c0027cfa:	83 ec 1c             	sub    esp,0x1c
c0027cfd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d00:	89 d8                	mov    eax,ebx
c0027d02:	89 d9                	mov    ecx,ebx
c0027d04:	c1 f9 17             	sar    ecx,0x17
c0027d07:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027d0a:	c1 e0 08             	shl    eax,0x8
c0027d0d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d12:	89 c1                	mov    ecx,eax
c0027d14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d1a:	89 c7                	mov    edi,eax
c0027d1c:	c1 ff 17             	sar    edi,0x17
c0027d1f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027d23:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027d26:	89 f8                	mov    eax,edi
c0027d28:	0f b6 c0             	movzx  eax,al
c0027d2b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d2e:	29 c6                	sub    esi,eax
c0027d30:	83 c6 7f             	add    esi,0x7f
c0027d33:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027d36:	42                   	inc    edx
c0027d37:	80 e2 fe             	and    dl,0xfe
c0027d3a:	0f 85 9c 00 00 00    	jne    c0027ddc <__divsf3+0xe8>
c0027d40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027d44:	74 33                	je     c0027d79 <__divsf3+0x85>
c0027d46:	85 c9                	test   ecx,ecx
c0027d48:	0f 85 c7 01 00 00    	jne    c0027f15 <__divsf3+0x221>
c0027d4e:	8d 57 01             	lea    edx,[edi+0x1]
c0027d51:	80 e2 fe             	and    dl,0xfe
c0027d54:	75 2f                	jne    c0027d85 <__divsf3+0x91>
c0027d56:	85 c0                	test   eax,eax
c0027d58:	74 2b                	je     c0027d85 <__divsf3+0x91>
c0027d5a:	51                   	push   ecx
c0027d5b:	51                   	push   ecx
c0027d5c:	6a 00                	push   0x0
c0027d5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d61:	e8 d2 03 00 00       	call   c0028138 <__nesf2>
c0027d66:	83 c4 10             	add    esp,0x10
c0027d69:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d6c:	85 c0                	test   eax,eax
c0027d6e:	0f 85 a1 01 00 00    	jne    c0027f15 <__divsf3+0x221>
c0027d74:	e9 92 01 00 00       	jmp    c0027f0b <__divsf3+0x217>
c0027d79:	85 c9                	test   ecx,ecx
c0027d7b:	75 1b                	jne    c0027d98 <__divsf3+0xa4>
c0027d7d:	8d 57 01             	lea    edx,[edi+0x1]
c0027d80:	80 e2 fe             	and    dl,0xfe
c0027d83:	74 1e                	je     c0027da3 <__divsf3+0xaf>
c0027d85:	85 ff                	test   edi,edi
c0027d87:	0f 89 88 01 00 00    	jns    c0027f15 <__divsf3+0x221>
c0027d8d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027d93:	e9 7d 01 00 00       	jmp    c0027f15 <__divsf3+0x221>
c0027d98:	8d 56 ff             	lea    edx,[esi-0x1]
c0027d9b:	01 c9                	add    ecx,ecx
c0027d9d:	78 3d                	js     c0027ddc <__divsf3+0xe8>
c0027d9f:	89 d6                	mov    esi,edx
c0027da1:	eb f5                	jmp    c0027d98 <__divsf3+0xa4>
c0027da3:	85 c0                	test   eax,eax
c0027da5:	b8 00 00 00 00       	mov    eax,0x0
c0027daa:	74 18                	je     c0027dc4 <__divsf3+0xd0>
c0027dac:	52                   	push   edx
c0027dad:	52                   	push   edx
c0027dae:	50                   	push   eax
c0027daf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027db2:	e8 81 03 00 00       	call   c0028138 <__nesf2>
c0027db7:	83 c4 10             	add    esp,0x10
c0027dba:	85 c0                	test   eax,eax
c0027dbc:	0f 85 50 01 00 00    	jne    c0027f12 <__divsf3+0x21e>
c0027dc2:	eb c1                	jmp    c0027d85 <__divsf3+0x91>
c0027dc4:	56                   	push   esi
c0027dc5:	56                   	push   esi
c0027dc6:	50                   	push   eax
c0027dc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dca:	e8 69 03 00 00       	call   c0028138 <__nesf2>
c0027dcf:	83 c4 10             	add    esp,0x10
c0027dd2:	85 c0                	test   eax,eax
c0027dd4:	0f 84 31 01 00 00    	je     c0027f0b <__divsf3+0x217>
c0027dda:	eb a9                	jmp    c0027d85 <__divsf3+0x91>
c0027ddc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027ddf:	c1 e3 08             	shl    ebx,0x8
c0027de2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027de8:	8d 57 01             	lea    edx,[edi+0x1]
c0027deb:	80 e2 fe             	and    dl,0xfe
c0027dee:	75 71                	jne    c0027e61 <__divsf3+0x16d>
c0027df0:	85 c0                	test   eax,eax
c0027df2:	ba 00 00 00 00       	mov    edx,0x0
c0027df7:	74 2f                	je     c0027e28 <__divsf3+0x134>
c0027df9:	51                   	push   ecx
c0027dfa:	51                   	push   ecx
c0027dfb:	52                   	push   edx
c0027dfc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dff:	e8 f9 02 00 00       	call   c00280fd <__eqsf2>
c0027e04:	83 c4 10             	add    esp,0x10
c0027e07:	85 c0                	test   eax,eax
c0027e09:	0f 85 03 01 00 00    	jne    c0027f12 <__divsf3+0x21e>
c0027e0f:	31 d2                	xor    edx,edx
c0027e11:	89 d3                	mov    ebx,edx
c0027e13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e16:	31 f8                	xor    eax,edi
c0027e18:	0f 89 f7 00 00 00    	jns    c0027f15 <__divsf3+0x221>
c0027e1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027e23:	e9 ed 00 00 00       	jmp    c0027f15 <__divsf3+0x221>
c0027e28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027e2b:	50                   	push   eax
c0027e2c:	50                   	push   eax
c0027e2d:	52                   	push   edx
c0027e2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e31:	e8 c7 02 00 00       	call   c00280fd <__eqsf2>
c0027e36:	83 c4 10             	add    esp,0x10
c0027e39:	85 c0                	test   eax,eax
c0027e3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e3e:	75 16                	jne    c0027e56 <__divsf3+0x162>
c0027e40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e43:	31 fb                	xor    ebx,edi
c0027e45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027e4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027e51:	e9 bf 00 00 00       	jmp    c0027f15 <__divsf3+0x221>
c0027e56:	8d 46 01             	lea    eax,[esi+0x1]
c0027e59:	01 db                	add    ebx,ebx
c0027e5b:	78 04                	js     c0027e61 <__divsf3+0x16d>
c0027e5d:	89 c6                	mov    esi,eax
c0027e5f:	eb f5                	jmp    c0027e56 <__divsf3+0x162>
c0027e61:	89 c8                	mov    eax,ecx
c0027e63:	0d 00 00 00 80       	or     eax,0x80000000
c0027e68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027e6e:	31 d2                	xor    edx,edx
c0027e70:	39 d8                	cmp    eax,ebx
c0027e72:	72 07                	jb     c0027e7b <__divsf3+0x187>
c0027e74:	29 d8                	sub    eax,ebx
c0027e76:	ba 01 00 00 00       	mov    edx,0x1
c0027e7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027e82:	01 d2                	add    edx,edx
c0027e84:	89 c1                	mov    ecx,eax
c0027e86:	01 c0                	add    eax,eax
c0027e88:	85 c9                	test   ecx,ecx
c0027e8a:	78 04                	js     c0027e90 <__divsf3+0x19c>
c0027e8c:	39 c3                	cmp    ebx,eax
c0027e8e:	77 05                	ja     c0027e95 <__divsf3+0x1a1>
c0027e90:	29 d8                	sub    eax,ebx
c0027e92:	83 ca 01             	or     edx,0x1
c0027e95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027e98:	75 e8                	jne    c0027e82 <__divsf3+0x18e>
c0027e9a:	85 c0                	test   eax,eax
c0027e9c:	0f 95 c0             	setne  al
c0027e9f:	0f b6 c0             	movzx  eax,al
c0027ea2:	c1 e2 06             	shl    edx,0x6
c0027ea5:	09 c2                	or     edx,eax
c0027ea7:	78 03                	js     c0027eac <__divsf3+0x1b8>
c0027ea9:	01 d2                	add    edx,edx
c0027eab:	4e                   	dec    esi
c0027eac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027eb2:	7f 22                	jg     c0027ed6 <__divsf3+0x1e2>
c0027eb4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027eba:	85 f6                	test   esi,esi
c0027ebc:	7f 23                	jg     c0027ee1 <__divsf3+0x1ed>
c0027ebe:	83 fe e9             	cmp    esi,0xffffffe9
c0027ec1:	7c 1a                	jl     c0027edd <__divsf3+0x1e9>
c0027ec3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0027ece:	29 f1                	sub    ecx,esi
c0027ed0:	d3 ea                	shr    edx,cl
c0027ed2:	31 f6                	xor    esi,esi
c0027ed4:	eb 0b                	jmp    c0027ee1 <__divsf3+0x1ed>
c0027ed6:	be ff 00 00 00       	mov    esi,0xff
c0027edb:	eb 02                	jmp    c0027edf <__divsf3+0x1eb>
c0027edd:	31 f6                	xor    esi,esi
c0027edf:	31 d2                	xor    edx,edx
c0027ee1:	89 d0                	mov    eax,edx
c0027ee3:	c1 e8 08             	shr    eax,0x8
c0027ee6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ee9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027eef:	09 fe                	or     esi,edi
c0027ef1:	c1 e6 17             	shl    esi,0x17
c0027ef4:	09 c6                	or     esi,eax
c0027ef6:	f6 c2 7f             	test   dl,0x7f
c0027ef9:	0f 95 c1             	setne  cl
c0027efc:	09 c8                	or     eax,ecx
c0027efe:	83 e0 01             	and    eax,0x1
c0027f01:	c1 ea 07             	shr    edx,0x7
c0027f04:	21 c2                	and    edx,eax
c0027f06:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027f09:	eb 0a                	jmp    c0027f15 <__divsf3+0x221>
c0027f0b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027f10:	eb 03                	jmp    c0027f15 <__divsf3+0x221>
c0027f12:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027f15:	89 d8                	mov    eax,ebx
c0027f17:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f1a:	5b                   	pop    ebx
c0027f1b:	5e                   	pop    esi
c0027f1c:	5f                   	pop    edi
c0027f1d:	5d                   	pop    ebp
c0027f1e:	c3                   	ret    

c0027f1f <__floatsisf>:
c0027f1f:	55                   	push   ebp
c0027f20:	89 e5                	mov    ebp,esp
c0027f22:	53                   	push   ebx
c0027f23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027f26:	85 d2                	test   edx,edx
c0027f28:	7e 2b                	jle    c0027f55 <__floatsisf+0x36>
c0027f2a:	0f bd ca             	bsr    ecx,edx
c0027f2d:	83 f1 1f             	xor    ecx,0x1f
c0027f30:	d3 e2                	shl    edx,cl
c0027f32:	89 d0                	mov    eax,edx
c0027f34:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f39:	89 c3                	mov    ebx,eax
c0027f3b:	c1 eb 08             	shr    ebx,0x8
c0027f3e:	80 e2 7f             	and    dl,0x7f
c0027f41:	0f 95 c2             	setne  dl
c0027f44:	09 da                	or     edx,ebx
c0027f46:	83 e2 01             	and    edx,0x1
c0027f49:	c1 e8 07             	shr    eax,0x7
c0027f4c:	21 c2                	and    edx,eax
c0027f4e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027f53:	eb 32                	jmp    c0027f87 <__floatsisf+0x68>
c0027f55:	b8 00 00 00 00       	mov    eax,0x0
c0027f5a:	74 34                	je     c0027f90 <__floatsisf+0x71>
c0027f5c:	f7 da                	neg    edx
c0027f5e:	0f bd ca             	bsr    ecx,edx
c0027f61:	83 f1 1f             	xor    ecx,0x1f
c0027f64:	d3 e2                	shl    edx,cl
c0027f66:	89 d0                	mov    eax,edx
c0027f68:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f6d:	89 c3                	mov    ebx,eax
c0027f6f:	c1 eb 08             	shr    ebx,0x8
c0027f72:	80 e2 7f             	and    dl,0x7f
c0027f75:	0f 95 c2             	setne  dl
c0027f78:	09 da                	or     edx,ebx
c0027f7a:	83 e2 01             	and    edx,0x1
c0027f7d:	c1 e8 07             	shr    eax,0x7
c0027f80:	21 c2                	and    edx,eax
c0027f82:	b8 9e 01 00 00       	mov    eax,0x19e
c0027f87:	29 c8                	sub    eax,ecx
c0027f89:	c1 e0 17             	shl    eax,0x17
c0027f8c:	09 d8                	or     eax,ebx
c0027f8e:	01 d0                	add    eax,edx
c0027f90:	5b                   	pop    ebx
c0027f91:	5d                   	pop    ebp
c0027f92:	c3                   	ret    

c0027f93 <__floatunsisf>:
c0027f93:	55                   	push   ebp
c0027f94:	89 e5                	mov    ebp,esp
c0027f96:	53                   	push   ebx
c0027f97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027f9a:	31 c0                	xor    eax,eax
c0027f9c:	85 d2                	test   edx,edx
c0027f9e:	74 32                	je     c0027fd2 <__floatunsisf+0x3f>
c0027fa0:	0f bd ca             	bsr    ecx,edx
c0027fa3:	83 f1 1f             	xor    ecx,0x1f
c0027fa6:	d3 e2                	shl    edx,cl
c0027fa8:	89 d0                	mov    eax,edx
c0027faa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027faf:	89 c3                	mov    ebx,eax
c0027fb1:	c1 eb 08             	shr    ebx,0x8
c0027fb4:	80 e2 7f             	and    dl,0x7f
c0027fb7:	0f 95 c2             	setne  dl
c0027fba:	09 da                	or     edx,ebx
c0027fbc:	83 e2 01             	and    edx,0x1
c0027fbf:	c1 e8 07             	shr    eax,0x7
c0027fc2:	21 c2                	and    edx,eax
c0027fc4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027fc9:	29 c8                	sub    eax,ecx
c0027fcb:	c1 e0 17             	shl    eax,0x17
c0027fce:	09 d8                	or     eax,ebx
c0027fd0:	01 d0                	add    eax,edx
c0027fd2:	5b                   	pop    ebx
c0027fd3:	5d                   	pop    ebp
c0027fd4:	c3                   	ret    

c0027fd5 <__fixsfsi>:
c0027fd5:	55                   	push   ebp
c0027fd6:	89 e5                	mov    ebp,esp
c0027fd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027fdb:	89 d1                	mov    ecx,edx
c0027fdd:	c1 e1 08             	shl    ecx,0x8
c0027fe0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027fe6:	c1 fa 17             	sar    edx,0x17
c0027fe9:	78 1c                	js     c0028007 <__fixsfsi+0x32>
c0027feb:	83 ea 7f             	sub    edx,0x7f
c0027fee:	31 c0                	xor    eax,eax
c0027ff0:	83 fa 1e             	cmp    edx,0x1e
c0027ff3:	77 40                	ja     c0028035 <__fixsfsi+0x60>
c0027ff5:	89 c8                	mov    eax,ecx
c0027ff7:	0d 00 00 00 80       	or     eax,0x80000000
c0027ffc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028001:	29 d1                	sub    ecx,edx
c0028003:	d3 e8                	shr    eax,cl
c0028005:	eb 2e                	jmp    c0028035 <__fixsfsi+0x60>
c0028007:	31 c0                	xor    eax,eax
c0028009:	81 c2 81 00 00 00    	add    edx,0x81
c002800f:	78 24                	js     c0028035 <__fixsfsi+0x60>
c0028011:	83 fa 1e             	cmp    edx,0x1e
c0028014:	7e 09                	jle    c002801f <__fixsfsi+0x4a>
c0028016:	83 fa 1f             	cmp    edx,0x1f
c0028019:	75 18                	jne    c0028033 <__fixsfsi+0x5e>
c002801b:	85 c9                	test   ecx,ecx
c002801d:	75 14                	jne    c0028033 <__fixsfsi+0x5e>
c002801f:	89 c8                	mov    eax,ecx
c0028021:	0d 00 00 00 80       	or     eax,0x80000000
c0028026:	b9 1f 00 00 00       	mov    ecx,0x1f
c002802b:	29 d1                	sub    ecx,edx
c002802d:	d3 e8                	shr    eax,cl
c002802f:	f7 d8                	neg    eax
c0028031:	eb 02                	jmp    c0028035 <__fixsfsi+0x60>
c0028033:	31 c0                	xor    eax,eax
c0028035:	5d                   	pop    ebp
c0028036:	c3                   	ret    

c0028037 <__fixunssfsi>:
c0028037:	55                   	push   ebp
c0028038:	89 e5                	mov    ebp,esp
c002803a:	53                   	push   ebx
c002803b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002803e:	89 d3                	mov    ebx,edx
c0028040:	c1 fb 17             	sar    ebx,0x17
c0028043:	83 eb 7f             	sub    ebx,0x7f
c0028046:	31 c0                	xor    eax,eax
c0028048:	83 fb 1f             	cmp    ebx,0x1f
c002804b:	77 18                	ja     c0028065 <__fixunssfsi+0x2e>
c002804d:	89 d0                	mov    eax,edx
c002804f:	c1 e0 08             	shl    eax,0x8
c0028052:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028057:	0d 00 00 00 80       	or     eax,0x80000000
c002805c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028061:	29 d9                	sub    ecx,ebx
c0028063:	d3 e8                	shr    eax,cl
c0028065:	5b                   	pop    ebx
c0028066:	5d                   	pop    ebp
c0028067:	c3                   	ret    

c0028068 <__cmpsf2>:
c0028068:	55                   	push   ebp
c0028069:	89 e5                	mov    ebp,esp
c002806b:	57                   	push   edi
c002806c:	56                   	push   esi
c002806d:	53                   	push   ebx
c002806e:	83 ec 24             	sub    esp,0x24
c0028071:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028077:	e8 4f 10 00 00       	call   c00290cb <__truncdfsf2>
c002807c:	5a                   	pop    edx
c002807d:	59                   	pop    ecx
c002807e:	89 c3                	mov    ebx,eax
c0028080:	c1 e8 17             	shr    eax,0x17
c0028083:	0f b6 f0             	movzx  esi,al
c0028086:	89 d8                	mov    eax,ebx
c0028088:	c1 e8 1f             	shr    eax,0x1f
c002808b:	31 c6                	xor    esi,eax
c002808d:	c1 e3 08             	shl    ebx,0x8
c0028090:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028093:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028096:	e8 30 10 00 00       	call   c00290cb <__truncdfsf2>
c002809b:	83 c4 10             	add    esp,0x10
c002809e:	89 c1                	mov    ecx,eax
c00280a0:	c1 e9 17             	shr    ecx,0x17
c00280a3:	0f b6 c9             	movzx  ecx,cl
c00280a6:	89 c7                	mov    edi,eax
c00280a8:	c1 ef 1f             	shr    edi,0x1f
c00280ab:	89 ca                	mov    edx,ecx
c00280ad:	31 fa                	xor    edx,edi
c00280af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00280b2:	c1 e0 08             	shl    eax,0x8
c00280b5:	89 c2                	mov    edx,eax
c00280b7:	89 d8                	mov    eax,ebx
c00280b9:	09 d0                	or     eax,edx
c00280bb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00280c0:	09 f0                	or     eax,esi
c00280c2:	75 08                	jne    c00280cc <__cmpsf2+0x64>
c00280c4:	31 c0                	xor    eax,eax
c00280c6:	39 f9                	cmp    ecx,edi
c00280c8:	75 0c                	jne    c00280d6 <__cmpsf2+0x6e>
c00280ca:	eb 29                	jmp    c00280f5 <__cmpsf2+0x8d>
c00280cc:	b8 01 00 00 00       	mov    eax,0x1
c00280d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280d4:	7f 1f                	jg     c00280f5 <__cmpsf2+0x8d>
c00280d6:	83 c8 ff             	or     eax,0xffffffff
c00280d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280dc:	7c 17                	jl     c00280f5 <__cmpsf2+0x8d>
c00280de:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00280e4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00280ea:	b8 01 00 00 00       	mov    eax,0x1
c00280ef:	39 d3                	cmp    ebx,edx
c00280f1:	77 02                	ja     c00280f5 <__cmpsf2+0x8d>
c00280f3:	19 c0                	sbb    eax,eax
c00280f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00280f8:	5b                   	pop    ebx
c00280f9:	5e                   	pop    esi
c00280fa:	5f                   	pop    edi
c00280fb:	5d                   	pop    ebp
c00280fc:	c3                   	ret    

c00280fd <__eqsf2>:
c00280fd:	55                   	push   ebp
c00280fe:	89 e5                	mov    ebp,esp
c0028100:	83 ec 24             	sub    esp,0x24
c0028103:	6a 01                	push   0x1
c0028105:	83 ec 0c             	sub    esp,0xc
c0028108:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002810b:	e8 df 10 00 00       	call   c00291ef <__extendsfdf2>
c0028110:	83 c4 10             	add    esp,0x10
c0028113:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028116:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028119:	52                   	push   edx
c002811a:	50                   	push   eax
c002811b:	50                   	push   eax
c002811c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002811f:	e8 cb 10 00 00       	call   c00291ef <__extendsfdf2>
c0028124:	59                   	pop    ecx
c0028125:	59                   	pop    ecx
c0028126:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028129:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002812c:	52                   	push   edx
c002812d:	50                   	push   eax
c002812e:	e8 35 ff ff ff       	call   c0028068 <__cmpsf2>
c0028133:	83 c4 20             	add    esp,0x20
c0028136:	c9                   	leave  
c0028137:	c3                   	ret    

c0028138 <__nesf2>:
c0028138:	eb c3                	jmp    c00280fd <__eqsf2>

c002813a <__gtsf2>:
c002813a:	55                   	push   ebp
c002813b:	89 e5                	mov    ebp,esp
c002813d:	83 ec 24             	sub    esp,0x24
c0028140:	6a ff                	push   0xffffffff
c0028142:	83 ec 0c             	sub    esp,0xc
c0028145:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028148:	e8 a2 10 00 00       	call   c00291ef <__extendsfdf2>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028153:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028156:	52                   	push   edx
c0028157:	50                   	push   eax
c0028158:	50                   	push   eax
c0028159:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002815c:	e8 8e 10 00 00       	call   c00291ef <__extendsfdf2>
c0028161:	59                   	pop    ecx
c0028162:	59                   	pop    ecx
c0028163:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028166:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028169:	52                   	push   edx
c002816a:	50                   	push   eax
c002816b:	e8 f8 fe ff ff       	call   c0028068 <__cmpsf2>
c0028170:	83 c4 20             	add    esp,0x20
c0028173:	c9                   	leave  
c0028174:	c3                   	ret    

c0028175 <__gesf2>:
c0028175:	eb c3                	jmp    c002813a <__gtsf2>

c0028177 <__ltsf2>:
c0028177:	eb 84                	jmp    c00280fd <__eqsf2>

c0028179 <__lesf2>:
c0028179:	eb 82                	jmp    c00280fd <__eqsf2>

c002817b <__adddf3>:
c002817b:	55                   	push   ebp
c002817c:	89 e5                	mov    ebp,esp
c002817e:	57                   	push   edi
c002817f:	56                   	push   esi
c0028180:	53                   	push   ebx
c0028181:	83 ec 24             	sub    esp,0x24
c0028184:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028187:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002818a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002818d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028190:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028193:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028196:	89 c8                	mov    eax,ecx
c0028198:	89 ce                	mov    esi,ecx
c002819a:	c1 fe 14             	sar    esi,0x14
c002819d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00281a0:	89 fb                	mov    ebx,edi
c00281a2:	89 fa                	mov    edx,edi
c00281a4:	c1 e2 0b             	shl    edx,0xb
c00281a7:	c1 e0 0b             	shl    eax,0xb
c00281aa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281af:	c1 eb 15             	shr    ebx,0x15
c00281b2:	09 d8                	or     eax,ebx
c00281b4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00281b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00281ba:	c1 fe 14             	sar    esi,0x14
c00281bd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00281c0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00281c3:	89 f3                	mov    ebx,esi
c00281c5:	c1 e3 0b             	shl    ebx,0xb
c00281c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00281cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281ce:	c1 e3 0b             	shl    ebx,0xb
c00281d1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00281d7:	c1 ee 15             	shr    esi,0x15
c00281da:	09 f3                	or     ebx,esi
c00281dc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00281df:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281e2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00281e5:	0f 88 5f 02 00 00    	js     c002844a <__adddf3+0x2cf>
c00281eb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00281ee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00281f1:	85 db                	test   ebx,ebx
c00281f3:	0f 8e c7 00 00 00    	jle    c00282c0 <__adddf3+0x145>
c00281f9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028200:	75 1a                	jne    c002821c <__adddf3+0xa1>
c0028202:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028205:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028208:	0f 84 b2 05 00 00    	je     c00287c0 <__adddf3+0x645>
c002820e:	4b                   	dec    ebx
c002820f:	75 23                	jne    c0028234 <__adddf3+0xb9>
c0028211:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028214:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028217:	e9 99 00 00 00       	jmp    c00282b5 <__adddf3+0x13a>
c002821c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002821f:	f7 d6                	not    esi
c0028221:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028227:	0f 84 93 05 00 00    	je     c00287c0 <__adddf3+0x645>
c002822d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028234:	83 fb 1f             	cmp    ebx,0x1f
c0028237:	7e 42                	jle    c002827b <__adddf3+0x100>
c0028239:	83 fb 3f             	cmp    ebx,0x3f
c002823c:	0f 8f 7e 05 00 00    	jg     c00287c0 <__adddf3+0x645>
c0028242:	83 e3 1f             	and    ebx,0x1f
c0028245:	89 d9                	mov    ecx,ebx
c0028247:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002824a:	d3 ef                	shr    edi,cl
c002824c:	31 db                	xor    ebx,ebx
c002824e:	85 c9                	test   ecx,ecx
c0028250:	74 15                	je     c0028267 <__adddf3+0xec>
c0028252:	be 20 00 00 00       	mov    esi,0x20
c0028257:	29 ce                	sub    esi,ecx
c0028259:	89 f1                	mov    ecx,esi
c002825b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002825e:	d3 e6                	shl    esi,cl
c0028260:	31 db                	xor    ebx,ebx
c0028262:	85 f6                	test   esi,esi
c0028264:	0f 95 c3             	setne  bl
c0028267:	31 c9                	xor    ecx,ecx
c0028269:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002826d:	0f 95 c1             	setne  cl
c0028270:	09 cf                	or     edi,ecx
c0028272:	09 fb                	or     ebx,edi
c0028274:	01 da                	add    edx,ebx
c0028276:	83 d0 00             	adc    eax,0x0
c0028279:	eb 3a                	jmp    c00282b5 <__adddf3+0x13a>
c002827b:	bf 20 00 00 00       	mov    edi,0x20
c0028280:	29 df                	sub    edi,ebx
c0028282:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028285:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028288:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002828b:	d3 e6                	shl    esi,cl
c002828d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028290:	88 d9                	mov    cl,bl
c0028292:	d3 ef                	shr    edi,cl
c0028294:	09 fe                	or     esi,edi
c0028296:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028299:	88 d9                	mov    cl,bl
c002829b:	d3 ef                	shr    edi,cl
c002829d:	89 fb                	mov    ebx,edi
c002829f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00282a2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00282a5:	d3 e7                	shl    edi,cl
c00282a7:	85 ff                	test   edi,edi
c00282a9:	0f 95 c1             	setne  cl
c00282ac:	0f b6 c9             	movzx  ecx,cl
c00282af:	09 ce                	or     esi,ecx
c00282b1:	01 f2                	add    edx,esi
c00282b3:	11 d8                	adc    eax,ebx
c00282b5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282bb:	e9 52 01 00 00       	jmp    c0028412 <__adddf3+0x297>
c00282c0:	0f 84 d5 00 00 00    	je     c002839b <__adddf3+0x220>
c00282c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282c9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00282cc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282d2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00282d9:	75 20                	jne    c00282fb <__adddf3+0x180>
c00282db:	89 d6                	mov    esi,edx
c00282dd:	09 c6                	or     esi,eax
c00282df:	0f 84 db 04 00 00    	je     c00287c0 <__adddf3+0x645>
c00282e5:	4b                   	dec    ebx
c00282e6:	75 29                	jne    c0028311 <__adddf3+0x196>
c00282e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00282ee:	01 d1                	add    ecx,edx
c00282f0:	11 c6                	adc    esi,eax
c00282f2:	89 f0                	mov    eax,esi
c00282f4:	89 ca                	mov    edx,ecx
c00282f6:	e9 17 01 00 00       	jmp    c0028412 <__adddf3+0x297>
c00282fb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00282fe:	f7 d6                	not    esi
c0028300:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028306:	0f 84 b4 04 00 00    	je     c00287c0 <__adddf3+0x645>
c002830c:	0d 00 00 00 80       	or     eax,0x80000000
c0028311:	83 fb 1f             	cmp    ebx,0x1f
c0028314:	7e 48                	jle    c002835e <__adddf3+0x1e3>
c0028316:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028319:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002831c:	83 fb 3f             	cmp    ebx,0x3f
c002831f:	0f 8f 9b 04 00 00    	jg     c00287c0 <__adddf3+0x645>
c0028325:	83 e3 1f             	and    ebx,0x1f
c0028328:	89 d9                	mov    ecx,ebx
c002832a:	89 c7                	mov    edi,eax
c002832c:	d3 ef                	shr    edi,cl
c002832e:	31 db                	xor    ebx,ebx
c0028330:	85 c9                	test   ecx,ecx
c0028332:	74 12                	je     c0028346 <__adddf3+0x1cb>
c0028334:	be 20 00 00 00       	mov    esi,0x20
c0028339:	29 ce                	sub    esi,ecx
c002833b:	89 f1                	mov    ecx,esi
c002833d:	d3 e0                	shl    eax,cl
c002833f:	31 db                	xor    ebx,ebx
c0028341:	85 c0                	test   eax,eax
c0028343:	0f 95 c3             	setne  bl
c0028346:	31 c0                	xor    eax,eax
c0028348:	85 d2                	test   edx,edx
c002834a:	0f 95 c0             	setne  al
c002834d:	09 c7                	or     edi,eax
c002834f:	09 fb                	or     ebx,edi
c0028351:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028354:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028357:	01 da                	add    edx,ebx
c0028359:	83 d6 00             	adc    esi,0x0
c002835c:	eb 39                	jmp    c0028397 <__adddf3+0x21c>
c002835e:	be 20 00 00 00       	mov    esi,0x20
c0028363:	29 de                	sub    esi,ebx
c0028365:	89 c7                	mov    edi,eax
c0028367:	89 f1                	mov    ecx,esi
c0028369:	d3 e7                	shl    edi,cl
c002836b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002836e:	89 d7                	mov    edi,edx
c0028370:	88 d9                	mov    cl,bl
c0028372:	d3 ef                	shr    edi,cl
c0028374:	89 f9                	mov    ecx,edi
c0028376:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028379:	09 cf                	or     edi,ecx
c002837b:	88 d9                	mov    cl,bl
c002837d:	d3 e8                	shr    eax,cl
c002837f:	89 f1                	mov    ecx,esi
c0028381:	d3 e2                	shl    edx,cl
c0028383:	85 d2                	test   edx,edx
c0028385:	0f 95 c2             	setne  dl
c0028388:	0f b6 d2             	movzx  edx,dl
c002838b:	09 d7                	or     edi,edx
c002838d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028390:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028393:	01 fa                	add    edx,edi
c0028395:	11 c6                	adc    esi,eax
c0028397:	89 f0                	mov    eax,esi
c0028399:	eb 77                	jmp    c0028412 <__adddf3+0x297>
c002839b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002839e:	46                   	inc    esi
c002839f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00283a2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00283a8:	75 41                	jne    c00283eb <__adddf3+0x270>
c00283aa:	89 d3                	mov    ebx,edx
c00283ac:	09 c3                	or     ebx,eax
c00283ae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00283b5:	75 27                	jne    c00283de <__adddf3+0x263>
c00283b7:	85 db                	test   ebx,ebx
c00283b9:	0f 84 fb 03 00 00    	je     c00287ba <__adddf3+0x63f>
c00283bf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283c2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00283c5:	0f 84 f5 03 00 00    	je     c00287c0 <__adddf3+0x645>
c00283cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00283ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00283d1:	85 c0                	test   eax,eax
c00283d3:	0f 89 91 03 00 00    	jns    c002876a <__adddf3+0x5ef>
c00283d9:	e9 85 03 00 00       	jmp    c0028763 <__adddf3+0x5e8>
c00283de:	85 db                	test   ebx,ebx
c00283e0:	0f 85 da 03 00 00    	jne    c00287c0 <__adddf3+0x645>
c00283e6:	e9 cf 03 00 00       	jmp    c00287ba <__adddf3+0x63f>
c00283eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00283ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00283f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283f4:	f7 d1                	not    ecx
c00283f6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00283fc:	0f 84 70 03 00 00    	je     c0028772 <__adddf3+0x5f7>
c0028402:	d1 ea                	shr    edx,1
c0028404:	89 c1                	mov    ecx,eax
c0028406:	c1 e1 1f             	shl    ecx,0x1f
c0028409:	09 ca                	or     edx,ecx
c002840b:	d1 e8                	shr    eax,1
c002840d:	e9 6f 03 00 00       	jmp    c0028781 <__adddf3+0x606>
c0028412:	85 c0                	test   eax,eax
c0028414:	0f 89 67 03 00 00    	jns    c0028781 <__adddf3+0x606>
c002841a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002841d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028420:	f7 d1                	not    ecx
c0028422:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028428:	0f 84 44 03 00 00    	je     c0028772 <__adddf3+0x5f7>
c002842e:	89 d1                	mov    ecx,edx
c0028430:	d1 e9                	shr    ecx,1
c0028432:	83 e2 01             	and    edx,0x1
c0028435:	09 ca                	or     edx,ecx
c0028437:	89 c1                	mov    ecx,eax
c0028439:	c1 e1 1f             	shl    ecx,0x1f
c002843c:	09 ca                	or     edx,ecx
c002843e:	d1 e8                	shr    eax,1
c0028440:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028445:	e9 37 03 00 00       	jmp    c0028781 <__adddf3+0x606>
c002844a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002844d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028453:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028456:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028459:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002845f:	29 de                	sub    esi,ebx
c0028461:	85 f6                	test   esi,esi
c0028463:	0f 8e bd 00 00 00    	jle    c0028526 <__adddf3+0x3ab>
c0028469:	85 db                	test   ebx,ebx
c002846b:	75 17                	jne    c0028484 <__adddf3+0x309>
c002846d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028470:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028473:	0f 84 47 03 00 00    	je     c00287c0 <__adddf3+0x645>
c0028479:	4e                   	dec    esi
c002847a:	75 20                	jne    c002849c <__adddf3+0x321>
c002847c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002847f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028482:	eb 5b                	jmp    c00284df <__adddf3+0x364>
c0028484:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028487:	f7 d3                	not    ebx
c0028489:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002848f:	0f 84 2b 03 00 00    	je     c00287c0 <__adddf3+0x645>
c0028495:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002849c:	83 fe 1f             	cmp    esi,0x1f
c002849f:	7e 49                	jle    c00284ea <__adddf3+0x36f>
c00284a1:	83 fe 3f             	cmp    esi,0x3f
c00284a4:	0f 8f 16 03 00 00    	jg     c00287c0 <__adddf3+0x645>
c00284aa:	83 e6 1f             	and    esi,0x1f
c00284ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00284b0:	89 f1                	mov    ecx,esi
c00284b2:	d3 ef                	shr    edi,cl
c00284b4:	31 db                	xor    ebx,ebx
c00284b6:	85 f6                	test   esi,esi
c00284b8:	74 13                	je     c00284cd <__adddf3+0x352>
c00284ba:	b9 20 00 00 00       	mov    ecx,0x20
c00284bf:	29 f1                	sub    ecx,esi
c00284c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284c4:	d3 e6                	shl    esi,cl
c00284c6:	31 db                	xor    ebx,ebx
c00284c8:	85 f6                	test   esi,esi
c00284ca:	0f 95 c3             	setne  bl
c00284cd:	31 c9                	xor    ecx,ecx
c00284cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00284d3:	0f 95 c1             	setne  cl
c00284d6:	09 cf                	or     edi,ecx
c00284d8:	09 fb                	or     ebx,edi
c00284da:	29 da                	sub    edx,ebx
c00284dc:	83 d8 00             	sbb    eax,0x0
c00284df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284e5:	e9 aa 01 00 00       	jmp    c0028694 <__adddf3+0x519>
c00284ea:	bf 20 00 00 00       	mov    edi,0x20
c00284ef:	29 f7                	sub    edi,esi
c00284f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00284f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00284fa:	d3 e3                	shl    ebx,cl
c00284fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00284ff:	89 f1                	mov    ecx,esi
c0028501:	d3 ef                	shr    edi,cl
c0028503:	09 fb                	or     ebx,edi
c0028505:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028508:	89 f1                	mov    ecx,esi
c002850a:	d3 ef                	shr    edi,cl
c002850c:	89 fe                	mov    esi,edi
c002850e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028511:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028514:	d3 e7                	shl    edi,cl
c0028516:	85 ff                	test   edi,edi
c0028518:	0f 95 c1             	setne  cl
c002851b:	0f b6 c9             	movzx  ecx,cl
c002851e:	09 cb                	or     ebx,ecx
c0028520:	29 da                	sub    edx,ebx
c0028522:	19 f0                	sbb    eax,esi
c0028524:	eb b9                	jmp    c00284df <__adddf3+0x364>
c0028526:	0f 84 cd 00 00 00    	je     c00285f9 <__adddf3+0x47e>
c002852c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002852f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028532:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028535:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028539:	75 1b                	jne    c0028556 <__adddf3+0x3db>
c002853b:	89 d6                	mov    esi,edx
c002853d:	09 c6                	or     esi,eax
c002853f:	0f 84 7b 02 00 00    	je     c00287c0 <__adddf3+0x645>
c0028545:	4b                   	dec    ebx
c0028546:	75 24                	jne    c002856c <__adddf3+0x3f1>
c0028548:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002854b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002854e:	29 d1                	sub    ecx,edx
c0028550:	19 c6                	sbb    esi,eax
c0028552:	89 ca                	mov    edx,ecx
c0028554:	eb 61                	jmp    c00285b7 <__adddf3+0x43c>
c0028556:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028559:	f7 d6                	not    esi
c002855b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028561:	0f 84 59 02 00 00    	je     c00287c0 <__adddf3+0x645>
c0028567:	0d 00 00 00 80       	or     eax,0x80000000
c002856c:	83 fb 1f             	cmp    ebx,0x1f
c002856f:	7e 4d                	jle    c00285be <__adddf3+0x443>
c0028571:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028574:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028577:	83 fb 3f             	cmp    ebx,0x3f
c002857a:	0f 8f 40 02 00 00    	jg     c00287c0 <__adddf3+0x645>
c0028580:	83 e3 1f             	and    ebx,0x1f
c0028583:	89 d9                	mov    ecx,ebx
c0028585:	89 c7                	mov    edi,eax
c0028587:	d3 ef                	shr    edi,cl
c0028589:	31 db                	xor    ebx,ebx
c002858b:	85 c9                	test   ecx,ecx
c002858d:	74 12                	je     c00285a1 <__adddf3+0x426>
c002858f:	be 20 00 00 00       	mov    esi,0x20
c0028594:	29 ce                	sub    esi,ecx
c0028596:	89 f1                	mov    ecx,esi
c0028598:	d3 e0                	shl    eax,cl
c002859a:	31 db                	xor    ebx,ebx
c002859c:	85 c0                	test   eax,eax
c002859e:	0f 95 c3             	setne  bl
c00285a1:	31 c0                	xor    eax,eax
c00285a3:	85 d2                	test   edx,edx
c00285a5:	0f 95 c0             	setne  al
c00285a8:	09 c7                	or     edi,eax
c00285aa:	09 fb                	or     ebx,edi
c00285ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285b2:	29 da                	sub    edx,ebx
c00285b4:	83 de 00             	sbb    esi,0x0
c00285b7:	89 f0                	mov    eax,esi
c00285b9:	e9 d6 00 00 00       	jmp    c0028694 <__adddf3+0x519>
c00285be:	be 20 00 00 00       	mov    esi,0x20
c00285c3:	29 de                	sub    esi,ebx
c00285c5:	89 c7                	mov    edi,eax
c00285c7:	89 f1                	mov    ecx,esi
c00285c9:	d3 e7                	shl    edi,cl
c00285cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00285ce:	89 d7                	mov    edi,edx
c00285d0:	88 d9                	mov    cl,bl
c00285d2:	d3 ef                	shr    edi,cl
c00285d4:	89 f9                	mov    ecx,edi
c00285d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285d9:	09 cf                	or     edi,ecx
c00285db:	88 d9                	mov    cl,bl
c00285dd:	d3 e8                	shr    eax,cl
c00285df:	89 f1                	mov    ecx,esi
c00285e1:	d3 e2                	shl    edx,cl
c00285e3:	85 d2                	test   edx,edx
c00285e5:	0f 95 c2             	setne  dl
c00285e8:	0f b6 d2             	movzx  edx,dl
c00285eb:	09 d7                	or     edi,edx
c00285ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285f3:	29 fa                	sub    edx,edi
c00285f5:	19 c6                	sbb    esi,eax
c00285f7:	eb be                	jmp    c00285b7 <__adddf3+0x43c>
c00285f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00285fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00285ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028605:	75 6a                	jne    c0028671 <__adddf3+0x4f6>
c0028607:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002860b:	75 58                	jne    c0028665 <__adddf3+0x4ea>
c002860d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028610:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028613:	89 d6                	mov    esi,edx
c0028615:	09 c6                	or     esi,eax
c0028617:	75 17                	jne    c0028630 <__adddf3+0x4b5>
c0028619:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002861c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002861f:	85 db                	test   ebx,ebx
c0028621:	0f 85 99 01 00 00    	jne    c00287c0 <__adddf3+0x645>
c0028627:	31 ff                	xor    edi,edi
c0028629:	31 c9                	xor    ecx,ecx
c002862b:	e9 90 01 00 00       	jmp    c00287c0 <__adddf3+0x645>
c0028630:	85 db                	test   ebx,ebx
c0028632:	0f 84 88 01 00 00    	je     c00287c0 <__adddf3+0x645>
c0028638:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002863b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002863e:	85 c0                	test   eax,eax
c0028640:	79 10                	jns    c0028652 <__adddf3+0x4d7>
c0028642:	31 c9                	xor    ecx,ecx
c0028644:	f7 da                	neg    edx
c0028646:	0f 95 c1             	setne  cl
c0028649:	01 c8                	add    eax,ecx
c002864b:	f7 d8                	neg    eax
c002864d:	e9 2f 01 00 00       	jmp    c0028781 <__adddf3+0x606>
c0028652:	31 ff                	xor    edi,edi
c0028654:	31 c9                	xor    ecx,ecx
c0028656:	89 c3                	mov    ebx,eax
c0028658:	09 d3                	or     ebx,edx
c002865a:	0f 84 60 01 00 00    	je     c00287c0 <__adddf3+0x645>
c0028660:	e9 05 01 00 00       	jmp    c002876a <__adddf3+0x5ef>
c0028665:	31 ff                	xor    edi,edi
c0028667:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002866c:	e9 4f 01 00 00       	jmp    c00287c0 <__adddf3+0x645>
c0028671:	89 c1                	mov    ecx,eax
c0028673:	89 d0                	mov    eax,edx
c0028675:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028678:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002867b:	89 ca                	mov    edx,ecx
c002867d:	85 c9                	test   ecx,ecx
c002867f:	79 2c                	jns    c00286ad <__adddf3+0x532>
c0028681:	31 c9                	xor    ecx,ecx
c0028683:	f7 d8                	neg    eax
c0028685:	0f 95 c1             	setne  cl
c0028688:	01 ca                	add    edx,ecx
c002868a:	f7 da                	neg    edx
c002868c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002868f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028692:	eb 19                	jmp    c00286ad <__adddf3+0x532>
c0028694:	85 c0                	test   eax,eax
c0028696:	0f 89 e5 00 00 00    	jns    c0028781 <__adddf3+0x606>
c002869c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286a1:	89 c1                	mov    ecx,eax
c00286a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00286a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00286a9:	89 d0                	mov    eax,edx
c00286ab:	89 ca                	mov    edx,ecx
c00286ad:	85 d2                	test   edx,edx
c00286af:	74 59                	je     c002870a <__adddf3+0x58f>
c00286b1:	0f bd da             	bsr    ebx,edx
c00286b4:	83 f3 1f             	xor    ebx,0x1f
c00286b7:	88 d9                	mov    cl,bl
c00286b9:	d3 e2                	shl    edx,cl
c00286bb:	bf 20 00 00 00       	mov    edi,0x20
c00286c0:	89 f9                	mov    ecx,edi
c00286c2:	29 d9                	sub    ecx,ebx
c00286c4:	89 c6                	mov    esi,eax
c00286c6:	d3 ee                	shr    esi,cl
c00286c8:	09 d6                	or     esi,edx
c00286ca:	88 d9                	mov    cl,bl
c00286cc:	d3 e0                	shl    eax,cl
c00286ce:	89 c2                	mov    edx,eax
c00286d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286d3:	25 ff 07 00 00       	and    eax,0x7ff
c00286d8:	39 d8                	cmp    eax,ebx
c00286da:	7f 22                	jg     c00286fe <__adddf3+0x583>
c00286dc:	29 c3                	sub    ebx,eax
c00286de:	43                   	inc    ebx
c00286df:	88 d9                	mov    cl,bl
c00286e1:	d3 ea                	shr    edx,cl
c00286e3:	29 df                	sub    edi,ebx
c00286e5:	89 f9                	mov    ecx,edi
c00286e7:	89 f0                	mov    eax,esi
c00286e9:	d3 e0                	shl    eax,cl
c00286eb:	09 c2                	or     edx,eax
c00286ed:	89 f0                	mov    eax,esi
c00286ef:	88 d9                	mov    cl,bl
c00286f1:	d3 e8                	shr    eax,cl
c00286f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00286f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00286fc:	eb 6f                	jmp    c002876d <__adddf3+0x5f2>
c00286fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028701:	29 d8                	sub    eax,ebx
c0028703:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028706:	89 f0                	mov    eax,esi
c0028708:	eb 59                	jmp    c0028763 <__adddf3+0x5e8>
c002870a:	85 c0                	test   eax,eax
c002870c:	74 6a                	je     c0028778 <__adddf3+0x5fd>
c002870e:	0f bd c8             	bsr    ecx,eax
c0028711:	83 f1 1f             	xor    ecx,0x1f
c0028714:	d3 e0                	shl    eax,cl
c0028716:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028719:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002871f:	83 c1 20             	add    ecx,0x20
c0028722:	39 cb                	cmp    ebx,ecx
c0028724:	7f 35                	jg     c002875b <__adddf3+0x5e0>
c0028726:	29 d9                	sub    ecx,ebx
c0028728:	8d 71 01             	lea    esi,[ecx+0x1]
c002872b:	83 fe 1f             	cmp    esi,0x1f
c002872e:	7e 09                	jle    c0028739 <__adddf3+0x5be>
c0028730:	83 e9 1f             	sub    ecx,0x1f
c0028733:	d3 e8                	shr    eax,cl
c0028735:	89 c3                	mov    ebx,eax
c0028737:	eb 11                	jmp    c002874a <__adddf3+0x5cf>
c0028739:	b9 20 00 00 00       	mov    ecx,0x20
c002873e:	29 f1                	sub    ecx,esi
c0028740:	89 c3                	mov    ebx,eax
c0028742:	d3 e3                	shl    ebx,cl
c0028744:	89 f1                	mov    ecx,esi
c0028746:	d3 e8                	shr    eax,cl
c0028748:	89 c2                	mov    edx,eax
c002874a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002874d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028752:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028755:	89 d0                	mov    eax,edx
c0028757:	89 da                	mov    edx,ebx
c0028759:	eb 26                	jmp    c0028781 <__adddf3+0x606>
c002875b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002875e:	29 cf                	sub    edi,ecx
c0028760:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028763:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028768:	eb 17                	jmp    c0028781 <__adddf3+0x606>
c002876a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002876d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028770:	eb 0f                	jmp    c0028781 <__adddf3+0x606>
c0028772:	31 d2                	xor    edx,edx
c0028774:	31 c0                	xor    eax,eax
c0028776:	eb 09                	jmp    c0028781 <__adddf3+0x606>
c0028778:	89 c2                	mov    edx,eax
c002877a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028781:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028784:	c1 e1 14             	shl    ecx,0x14
c0028787:	89 c3                	mov    ebx,eax
c0028789:	c1 eb 0b             	shr    ebx,0xb
c002878c:	09 d9                	or     ecx,ebx
c002878e:	89 d3                	mov    ebx,edx
c0028790:	c1 eb 0b             	shr    ebx,0xb
c0028793:	c1 e0 15             	shl    eax,0x15
c0028796:	09 d8                	or     eax,ebx
c0028798:	89 c7                	mov    edi,eax
c002879a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00287a0:	0f 95 c0             	setne  al
c00287a3:	89 c6                	mov    esi,eax
c00287a5:	09 f3                	or     ebx,esi
c00287a7:	83 e3 01             	and    ebx,0x1
c00287aa:	c1 ea 0a             	shr    edx,0xa
c00287ad:	21 da                	and    edx,ebx
c00287af:	89 f8                	mov    eax,edi
c00287b1:	01 d0                	add    eax,edx
c00287b3:	83 d1 00             	adc    ecx,0x0
c00287b6:	89 c7                	mov    edi,eax
c00287b8:	eb 06                	jmp    c00287c0 <__adddf3+0x645>
c00287ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00287bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00287c0:	89 f8                	mov    eax,edi
c00287c2:	89 ca                	mov    edx,ecx
c00287c4:	83 c4 24             	add    esp,0x24
c00287c7:	5b                   	pop    ebx
c00287c8:	5e                   	pop    esi
c00287c9:	5f                   	pop    edi
c00287ca:	5d                   	pop    ebp
c00287cb:	c3                   	ret    

c00287cc <__subdf3>:
c00287cc:	55                   	push   ebp
c00287cd:	89 e5                	mov    ebp,esp
c00287cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00287de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00287e1:	5d                   	pop    ebp
c00287e2:	e9 94 f9 ff ff       	jmp    c002817b <__adddf3>

c00287e7 <__negdf2>:
c00287e7:	55                   	push   ebp
c00287e8:	89 e5                	mov    ebp,esp
c00287ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00287ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287f6:	5d                   	pop    ebp
c00287f7:	c3                   	ret    

c00287f8 <__muldf3>:
c00287f8:	55                   	push   ebp
c00287f9:	89 e5                	mov    ebp,esp
c00287fb:	57                   	push   edi
c00287fc:	56                   	push   esi
c00287fd:	53                   	push   ebx
c00287fe:	83 ec 24             	sub    esp,0x24
c0028801:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028804:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028807:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002880a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002880d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028810:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028813:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028816:	89 c8                	mov    eax,ecx
c0028818:	c1 f8 14             	sar    eax,0x14
c002881b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002881e:	89 f8                	mov    eax,edi
c0028820:	89 fb                	mov    ebx,edi
c0028822:	c1 e3 0b             	shl    ebx,0xb
c0028825:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028828:	c1 e1 0b             	shl    ecx,0xb
c002882b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028831:	c1 e8 15             	shr    eax,0x15
c0028834:	09 c1                	or     ecx,eax
c0028836:	89 d6                	mov    esi,edx
c0028838:	89 d0                	mov    eax,edx
c002883a:	c1 f8 14             	sar    eax,0x14
c002883d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028840:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028843:	89 c3                	mov    ebx,eax
c0028845:	c1 e3 0b             	shl    ebx,0xb
c0028848:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002884b:	c1 e6 0b             	shl    esi,0xb
c002884e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028854:	c1 e8 15             	shr    eax,0x15
c0028857:	09 c6                	or     esi,eax
c0028859:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002885c:	25 ff 07 00 00       	and    eax,0x7ff
c0028861:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028864:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028867:	25 ff 07 00 00       	and    eax,0x7ff
c002886c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002886f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028872:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028875:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002887c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002887f:	40                   	inc    eax
c0028880:	a9 fe 07 00 00       	test   eax,0x7fe
c0028885:	0f 85 8d 00 00 00    	jne    c0028918 <__muldf3+0x120>
c002888b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002888e:	09 c8                	or     eax,ecx
c0028890:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028894:	74 44                	je     c00288da <__muldf3+0xe2>
c0028896:	85 c0                	test   eax,eax
c0028898:	0f 85 31 02 00 00    	jne    c0028acf <__muldf3+0x2d7>
c002889e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288a1:	40                   	inc    eax
c00288a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00288a7:	75 13                	jne    c00288bc <__muldf3+0xc4>
c00288a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00288ac:	09 f1                	or     ecx,esi
c00288ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00288b2:	74 22                	je     c00288d6 <__muldf3+0xde>
c00288b4:	85 c9                	test   ecx,ecx
c00288b6:	0f 85 0d 02 00 00    	jne    c0028ac9 <__muldf3+0x2d1>
c00288bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00288c0:	0f 89 09 02 00 00    	jns    c0028acf <__muldf3+0x2d7>
c00288c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288c9:	05 00 00 00 80       	add    eax,0x80000000
c00288ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288d1:	e9 f9 01 00 00       	jmp    c0028acf <__muldf3+0x2d7>
c00288d6:	85 c9                	test   ecx,ecx
c00288d8:	eb 2e                	jmp    c0028908 <__muldf3+0x110>
c00288da:	85 c0                	test   eax,eax
c00288dc:	74 20                	je     c00288fe <__muldf3+0x106>
c00288de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00288e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00288e7:	c1 ef 1f             	shr    edi,0x1f
c00288ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00288ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00288f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00288f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288f6:	09 f9                	or     ecx,edi
c00288f8:	78 1e                	js     c0028918 <__muldf3+0x120>
c00288fa:	89 c3                	mov    ebx,eax
c00288fc:	eb e0                	jmp    c00288de <__muldf3+0xe6>
c00288fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028901:	f7 d0                	not    eax
c0028903:	a9 ff 07 00 00       	test   eax,0x7ff
c0028908:	75 b2                	jne    c00288bc <__muldf3+0xc4>
c002890a:	31 ff                	xor    edi,edi
c002890c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028913:	e9 b7 01 00 00       	jmp    c0028acf <__muldf3+0x2d7>
c0028918:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002891b:	40                   	inc    eax
c002891c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028921:	75 57                	jne    c002897a <__muldf3+0x182>
c0028923:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028926:	09 f0                	or     eax,esi
c0028928:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002892c:	74 23                	je     c0028951 <__muldf3+0x159>
c002892e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028932:	0f 89 91 01 00 00    	jns    c0028ac9 <__muldf3+0x2d1>
c0028938:	85 c0                	test   eax,eax
c002893a:	0f 85 89 01 00 00    	jne    c0028ac9 <__muldf3+0x2d1>
c0028940:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028943:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028949:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002894c:	e9 7e 01 00 00       	jmp    c0028acf <__muldf3+0x2d7>
c0028951:	85 c0                	test   eax,eax
c0028953:	75 0c                	jne    c0028961 <__muldf3+0x169>
c0028955:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028959:	0f 89 6a 01 00 00    	jns    c0028ac9 <__muldf3+0x2d1>
c002895f:	eb df                	jmp    c0028940 <__muldf3+0x148>
c0028961:	01 f6                	add    esi,esi
c0028963:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028966:	c1 ea 1f             	shr    edx,0x1f
c0028969:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002896c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002896f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028972:	09 d6                	or     esi,edx
c0028974:	78 04                	js     c002897a <__muldf3+0x182>
c0028976:	89 c3                	mov    ebx,eax
c0028978:	eb e7                	jmp    c0028961 <__muldf3+0x169>
c002897a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028980:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028986:	89 c8                	mov    eax,ecx
c0028988:	f7 e6                	mul    esi
c002898a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002898d:	89 c7                	mov    edi,eax
c002898f:	89 c8                	mov    eax,ecx
c0028991:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028994:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028997:	89 c1                	mov    ecx,eax
c0028999:	89 f0                	mov    eax,esi
c002899b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002899e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00289a1:	89 c6                	mov    esi,eax
c00289a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00289a6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00289a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00289ac:	31 c0                	xor    eax,eax
c00289ae:	01 f1                	add    ecx,esi
c00289b0:	0f 92 c0             	setb   al
c00289b3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00289b6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00289b9:	83 d6 00             	adc    esi,0x0
c00289bc:	01 c7                	add    edi,eax
c00289be:	83 d6 00             	adc    esi,0x0
c00289c1:	01 ca                	add    edx,ecx
c00289c3:	0f 92 c1             	setb   cl
c00289c6:	0f b6 c9             	movzx  ecx,cl
c00289c9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00289cc:	83 d6 00             	adc    esi,0x0
c00289cf:	01 cf                	add    edi,ecx
c00289d1:	83 d6 00             	adc    esi,0x0
c00289d4:	31 c9                	xor    ecx,ecx
c00289d6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00289d9:	0f 95 c1             	setne  cl
c00289dc:	09 cf                	or     edi,ecx
c00289de:	85 f6                	test   esi,esi
c00289e0:	78 0c                	js     c00289ee <__muldf3+0x1f6>
c00289e2:	01 f6                	add    esi,esi
c00289e4:	89 f8                	mov    eax,edi
c00289e6:	c1 e8 1f             	shr    eax,0x1f
c00289e9:	09 c6                	or     esi,eax
c00289eb:	01 ff                	add    edi,edi
c00289ed:	4b                   	dec    ebx
c00289ee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00289f4:	0f 8f 85 00 00 00    	jg     c0028a7f <__muldf3+0x287>
c00289fa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028a00:	85 db                	test   ebx,ebx
c0028a02:	0f 8f 84 00 00 00    	jg     c0028a8c <__muldf3+0x294>
c0028a08:	83 fb cc             	cmp    ebx,0xffffffcc
c0028a0b:	7c 79                	jl     c0028a86 <__muldf3+0x28e>
c0028a0d:	ba 01 00 00 00       	mov    edx,0x1
c0028a12:	29 da                	sub    edx,ebx
c0028a14:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a1a:	83 fa 1f             	cmp    edx,0x1f
c0028a1d:	7e 30                	jle    c0028a4f <__muldf3+0x257>
c0028a1f:	83 fa 20             	cmp    edx,0x20
c0028a22:	75 0b                	jne    c0028a2f <__muldf3+0x237>
c0028a24:	31 c0                	xor    eax,eax
c0028a26:	85 ff                	test   edi,edi
c0028a28:	0f 95 c0             	setne  al
c0028a2b:	89 c7                	mov    edi,eax
c0028a2d:	eb 1a                	jmp    c0028a49 <__muldf3+0x251>
c0028a2f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028a32:	89 f0                	mov    eax,esi
c0028a34:	d3 e0                	shl    eax,cl
c0028a36:	09 f8                	or     eax,edi
c0028a38:	0f 95 c0             	setne  al
c0028a3b:	0f b6 c0             	movzx  eax,al
c0028a3e:	89 c7                	mov    edi,eax
c0028a40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a45:	29 d9                	sub    ecx,ebx
c0028a47:	d3 ee                	shr    esi,cl
c0028a49:	09 f7                	or     edi,esi
c0028a4b:	31 db                	xor    ebx,ebx
c0028a4d:	eb 3b                	jmp    c0028a8a <__muldf3+0x292>
c0028a4f:	83 c3 1f             	add    ebx,0x1f
c0028a52:	89 f0                	mov    eax,esi
c0028a54:	88 d9                	mov    cl,bl
c0028a56:	d3 e0                	shl    eax,cl
c0028a58:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a5b:	89 f8                	mov    eax,edi
c0028a5d:	88 d1                	mov    cl,dl
c0028a5f:	d3 e8                	shr    eax,cl
c0028a61:	89 c1                	mov    ecx,eax
c0028a63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028a66:	09 c8                	or     eax,ecx
c0028a68:	88 d9                	mov    cl,bl
c0028a6a:	d3 e7                	shl    edi,cl
c0028a6c:	31 db                	xor    ebx,ebx
c0028a6e:	85 ff                	test   edi,edi
c0028a70:	0f 95 c3             	setne  bl
c0028a73:	89 df                	mov    edi,ebx
c0028a75:	09 c7                	or     edi,eax
c0028a77:	88 d1                	mov    cl,dl
c0028a79:	d3 ee                	shr    esi,cl
c0028a7b:	31 db                	xor    ebx,ebx
c0028a7d:	eb 0d                	jmp    c0028a8c <__muldf3+0x294>
c0028a7f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028a84:	eb 02                	jmp    c0028a88 <__muldf3+0x290>
c0028a86:	31 db                	xor    ebx,ebx
c0028a88:	31 ff                	xor    edi,edi
c0028a8a:	31 f6                	xor    esi,esi
c0028a8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028a8f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028a92:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028a97:	09 c3                	or     ebx,eax
c0028a99:	c1 e3 14             	shl    ebx,0x14
c0028a9c:	89 f0                	mov    eax,esi
c0028a9e:	c1 e8 0b             	shr    eax,0xb
c0028aa1:	09 c3                	or     ebx,eax
c0028aa3:	89 f8                	mov    eax,edi
c0028aa5:	c1 e8 0b             	shr    eax,0xb
c0028aa8:	c1 e6 15             	shl    esi,0x15
c0028aab:	09 c6                	or     esi,eax
c0028aad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028ab3:	0f 95 c1             	setne  cl
c0028ab6:	09 c8                	or     eax,ecx
c0028ab8:	83 e0 01             	and    eax,0x1
c0028abb:	c1 ef 0a             	shr    edi,0xa
c0028abe:	21 c7                	and    edi,eax
c0028ac0:	01 f7                	add    edi,esi
c0028ac2:	83 d3 00             	adc    ebx,0x0
c0028ac5:	89 da                	mov    edx,ebx
c0028ac7:	eb 03                	jmp    c0028acc <__muldf3+0x2d4>
c0028ac9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028acc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028acf:	89 f8                	mov    eax,edi
c0028ad1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028ad4:	83 c4 24             	add    esp,0x24
c0028ad7:	5b                   	pop    ebx
c0028ad8:	5e                   	pop    esi
c0028ad9:	5f                   	pop    edi
c0028ada:	5d                   	pop    ebp
c0028adb:	c3                   	ret    

c0028adc <__divdf3>:
c0028adc:	55                   	push   ebp
c0028add:	89 e5                	mov    ebp,esp
c0028adf:	57                   	push   edi
c0028ae0:	56                   	push   esi
c0028ae1:	53                   	push   ebx
c0028ae2:	83 ec 2c             	sub    esp,0x2c
c0028ae5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028ae8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028aeb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028aee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028af1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028af4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028af7:	89 ce                	mov    esi,ecx
c0028af9:	89 c8                	mov    eax,ecx
c0028afb:	c1 f8 14             	sar    eax,0x14
c0028afe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028b01:	89 f8                	mov    eax,edi
c0028b03:	89 fb                	mov    ebx,edi
c0028b05:	c1 e3 0b             	shl    ebx,0xb
c0028b08:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028b0b:	c1 e6 0b             	shl    esi,0xb
c0028b0e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028b14:	c1 e8 15             	shr    eax,0x15
c0028b17:	09 c6                	or     esi,eax
c0028b19:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028b1c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028b1f:	89 c2                	mov    edx,eax
c0028b21:	c1 fa 14             	sar    edx,0x14
c0028b24:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028b27:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028b2a:	89 de                	mov    esi,ebx
c0028b2c:	c1 e6 0b             	shl    esi,0xb
c0028b2f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028b32:	c1 e0 0b             	shl    eax,0xb
c0028b35:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b3a:	c1 eb 15             	shr    ebx,0x15
c0028b3d:	09 d8                	or     eax,ebx
c0028b3f:	89 c2                	mov    edx,eax
c0028b41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028b44:	25 ff 07 00 00       	and    eax,0x7ff
c0028b49:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028b4c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028b4f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028b55:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028b58:	29 d8                	sub    eax,ebx
c0028b5a:	05 ff 03 00 00       	add    eax,0x3ff
c0028b5f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028b62:	46                   	inc    esi
c0028b63:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028b69:	0f 85 a5 00 00 00    	jne    c0028c14 <__divdf3+0x138>
c0028b6f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028b72:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028b75:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028b79:	74 2a                	je     c0028ba5 <__divdf3+0xc9>
c0028b7b:	85 f6                	test   esi,esi
c0028b7d:	0f 85 cc 02 00 00    	jne    c0028e4f <__divdf3+0x373>
c0028b83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028b86:	40                   	inc    eax
c0028b87:	a9 fe 07 00 00       	test   eax,0x7fe
c0028b8c:	75 26                	jne    c0028bb4 <__divdf3+0xd8>
c0028b8e:	85 db                	test   ebx,ebx
c0028b90:	74 22                	je     c0028bb4 <__divdf3+0xd8>
c0028b92:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028b95:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028b98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028b9b:	09 d0                	or     eax,edx
c0028b9d:	0f 85 ac 02 00 00    	jne    c0028e4f <__divdf3+0x373>
c0028ba3:	eb 63                	jmp    c0028c08 <__divdf3+0x12c>
c0028ba5:	85 f6                	test   esi,esi
c0028ba7:	75 22                	jne    c0028bcb <__divdf3+0xef>
c0028ba9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028bac:	40                   	inc    eax
c0028bad:	a9 fe 07 00 00       	test   eax,0x7fe
c0028bb2:	74 36                	je     c0028bea <__divdf3+0x10e>
c0028bb4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028bb8:	0f 89 91 02 00 00    	jns    c0028e4f <__divdf3+0x373>
c0028bbe:	89 f8                	mov    eax,edi
c0028bc0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028bc6:	e9 80 02 00 00       	jmp    c0028e4b <__divdf3+0x36f>
c0028bcb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028bce:	01 f6                	add    esi,esi
c0028bd0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028bd3:	c1 ef 1f             	shr    edi,0x1f
c0028bd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bd9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028bdc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028bdf:	09 f7                	or     edi,esi
c0028be1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028be4:	78 2e                	js     c0028c14 <__divdf3+0x138>
c0028be6:	89 c8                	mov    eax,ecx
c0028be8:	eb e1                	jmp    c0028bcb <__divdf3+0xef>
c0028bea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028bed:	09 d0                	or     eax,edx
c0028bef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028bf3:	74 0f                	je     c0028c04 <__divdf3+0x128>
c0028bf5:	85 c0                	test   eax,eax
c0028bf7:	74 bb                	je     c0028bb4 <__divdf3+0xd8>
c0028bf9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028bfc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028bff:	e9 4b 02 00 00       	jmp    c0028e4f <__divdf3+0x373>
c0028c04:	85 c0                	test   eax,eax
c0028c06:	75 ac                	jne    c0028bb4 <__divdf3+0xd8>
c0028c08:	31 ff                	xor    edi,edi
c0028c0a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028c0f:	e9 3b 02 00 00       	jmp    c0028e4f <__divdf3+0x373>
c0028c14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028c17:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028c1a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028c20:	75 6b                	jne    c0028c8d <__divdf3+0x1b1>
c0028c22:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c25:	09 d6                	or     esi,edx
c0028c27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028c2b:	74 28                	je     c0028c55 <__divdf3+0x179>
c0028c2d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028c30:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028c33:	85 f6                	test   esi,esi
c0028c35:	0f 85 14 02 00 00    	jne    c0028e4f <__divdf3+0x373>
c0028c3b:	31 ff                	xor    edi,edi
c0028c3d:	31 c9                	xor    ecx,ecx
c0028c3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c42:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c45:	0f 89 04 02 00 00    	jns    c0028e4f <__divdf3+0x373>
c0028c4b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028c50:	e9 fa 01 00 00       	jmp    c0028e4f <__divdf3+0x373>
c0028c55:	85 f6                	test   esi,esi
c0028c57:	75 1b                	jne    c0028c74 <__divdf3+0x198>
c0028c59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c5c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c5f:	25 00 00 00 80       	and    eax,0x80000000
c0028c64:	31 c9                	xor    ecx,ecx
c0028c66:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028c6b:	89 cf                	mov    edi,ecx
c0028c6d:	89 c1                	mov    ecx,eax
c0028c6f:	e9 db 01 00 00       	jmp    c0028e4f <__divdf3+0x373>
c0028c74:	01 d2                	add    edx,edx
c0028c76:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028c79:	c1 eb 1f             	shr    ebx,0x1f
c0028c7c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c7f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028c82:	8d 48 01             	lea    ecx,[eax+0x1]
c0028c85:	09 da                	or     edx,ebx
c0028c87:	78 04                	js     c0028c8d <__divdf3+0x1b1>
c0028c89:	89 c8                	mov    eax,ecx
c0028c8b:	eb e7                	jmp    c0028c74 <__divdf3+0x198>
c0028c8d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028c90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028c96:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028c9c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028c9f:	39 d6                	cmp    esi,edx
c0028ca1:	77 0d                	ja     c0028cb0 <__divdf3+0x1d4>
c0028ca3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028ca6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028ca9:	72 1b                	jb     c0028cc6 <__divdf3+0x1ea>
c0028cab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028cae:	75 16                	jne    c0028cc6 <__divdf3+0x1ea>
c0028cb0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028cb3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028cb6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028cb9:	83 de 00             	sbb    esi,0x0
c0028cbc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028cbf:	ba 01 00 00 00       	mov    edx,0x1
c0028cc4:	eb 02                	jmp    c0028cc8 <__divdf3+0x1ec>
c0028cc6:	31 d2                	xor    edx,edx
c0028cc8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028ccf:	31 ff                	xor    edi,edi
c0028cd1:	01 ff                	add    edi,edi
c0028cd3:	89 d1                	mov    ecx,edx
c0028cd5:	c1 e9 1f             	shr    ecx,0x1f
c0028cd8:	09 cf                	or     edi,ecx
c0028cda:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028cdd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028ce0:	89 da                	mov    edx,ebx
c0028ce2:	89 f3                	mov    ebx,esi
c0028ce4:	8d 34 36             	lea    esi,[esi+esi*1]
c0028ce7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028cea:	c1 e9 1f             	shr    ecx,0x1f
c0028ced:	09 ce                	or     esi,ecx
c0028cef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028cf2:	01 c9                	add    ecx,ecx
c0028cf4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028cf7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028cfa:	85 db                	test   ebx,ebx
c0028cfc:	78 29                	js     c0028d27 <__divdf3+0x24b>
c0028cfe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028d01:	72 07                	jb     c0028d0a <__divdf3+0x22e>
c0028d03:	75 3c                	jne    c0028d41 <__divdf3+0x265>
c0028d05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d08:	77 37                	ja     c0028d41 <__divdf3+0x265>
c0028d0a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028d0d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028d10:	31 d2                	xor    edx,edx
c0028d12:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028d15:	0f 97 c2             	seta   dl
c0028d18:	29 d6                	sub    esi,edx
c0028d1a:	89 d9                	mov    ecx,ebx
c0028d1c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028d1f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028d22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028d25:	eb 17                	jmp    c0028d3e <__divdf3+0x262>
c0028d27:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028d2a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028d2d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d30:	0f 97 c1             	seta   cl
c0028d33:	0f b6 c9             	movzx  ecx,cl
c0028d36:	29 ce                	sub    esi,ecx
c0028d38:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028d3b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028d3e:	83 ca 01             	or     edx,0x1
c0028d41:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028d44:	75 8b                	jne    c0028cd1 <__divdf3+0x1f5>
c0028d46:	c1 e7 09             	shl    edi,0x9
c0028d49:	89 d1                	mov    ecx,edx
c0028d4b:	c1 e9 17             	shr    ecx,0x17
c0028d4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d51:	09 f3                	or     ebx,esi
c0028d53:	0f 95 c3             	setne  bl
c0028d56:	0f b6 db             	movzx  ebx,bl
c0028d59:	c1 e2 09             	shl    edx,0x9
c0028d5c:	09 d3                	or     ebx,edx
c0028d5e:	89 ca                	mov    edx,ecx
c0028d60:	09 fa                	or     edx,edi
c0028d62:	78 0c                	js     c0028d70 <__divdf3+0x294>
c0028d64:	01 d2                	add    edx,edx
c0028d66:	89 d9                	mov    ecx,ebx
c0028d68:	c1 e9 1f             	shr    ecx,0x1f
c0028d6b:	09 ca                	or     edx,ecx
c0028d6d:	01 db                	add    ebx,ebx
c0028d6f:	48                   	dec    eax
c0028d70:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028d75:	0f 8f 83 00 00 00    	jg     c0028dfe <__divdf3+0x322>
c0028d7b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028d81:	85 c0                	test   eax,eax
c0028d83:	0f 8f 82 00 00 00    	jg     c0028e0b <__divdf3+0x32f>
c0028d89:	83 f8 cc             	cmp    eax,0xffffffcc
c0028d8c:	7c 77                	jl     c0028e05 <__divdf3+0x329>
c0028d8e:	be 01 00 00 00       	mov    esi,0x1
c0028d93:	29 c6                	sub    esi,eax
c0028d95:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028d9b:	83 fe 1f             	cmp    esi,0x1f
c0028d9e:	7e 2f                	jle    c0028dcf <__divdf3+0x2f3>
c0028da0:	83 fe 20             	cmp    esi,0x20
c0028da3:	75 0a                	jne    c0028daf <__divdf3+0x2d3>
c0028da5:	85 db                	test   ebx,ebx
c0028da7:	0f 95 c3             	setne  bl
c0028daa:	0f b6 db             	movzx  ebx,bl
c0028dad:	eb 1a                	jmp    c0028dc9 <__divdf3+0x2ed>
c0028daf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028db2:	89 d7                	mov    edi,edx
c0028db4:	d3 e7                	shl    edi,cl
c0028db6:	89 f9                	mov    ecx,edi
c0028db8:	09 d9                	or     ecx,ebx
c0028dba:	0f 95 c3             	setne  bl
c0028dbd:	0f b6 db             	movzx  ebx,bl
c0028dc0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028dc5:	29 c1                	sub    ecx,eax
c0028dc7:	d3 ea                	shr    edx,cl
c0028dc9:	09 d3                	or     ebx,edx
c0028dcb:	31 c0                	xor    eax,eax
c0028dcd:	eb 3a                	jmp    c0028e09 <__divdf3+0x32d>
c0028dcf:	83 c0 1f             	add    eax,0x1f
c0028dd2:	89 d7                	mov    edi,edx
c0028dd4:	88 c1                	mov    cl,al
c0028dd6:	d3 e7                	shl    edi,cl
c0028dd8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028ddb:	89 df                	mov    edi,ebx
c0028ddd:	89 f1                	mov    ecx,esi
c0028ddf:	d3 ef                	shr    edi,cl
c0028de1:	89 f9                	mov    ecx,edi
c0028de3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028de6:	09 cf                	or     edi,ecx
c0028de8:	88 c1                	mov    cl,al
c0028dea:	d3 e3                	shl    ebx,cl
c0028dec:	85 db                	test   ebx,ebx
c0028dee:	0f 95 c3             	setne  bl
c0028df1:	0f b6 db             	movzx  ebx,bl
c0028df4:	09 fb                	or     ebx,edi
c0028df6:	89 f1                	mov    ecx,esi
c0028df8:	d3 ea                	shr    edx,cl
c0028dfa:	31 c0                	xor    eax,eax
c0028dfc:	eb 0d                	jmp    c0028e0b <__divdf3+0x32f>
c0028dfe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028e03:	eb 02                	jmp    c0028e07 <__divdf3+0x32b>
c0028e05:	31 c0                	xor    eax,eax
c0028e07:	31 db                	xor    ebx,ebx
c0028e09:	31 d2                	xor    edx,edx
c0028e0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028e0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028e11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028e17:	09 c8                	or     eax,ecx
c0028e19:	c1 e0 14             	shl    eax,0x14
c0028e1c:	89 d1                	mov    ecx,edx
c0028e1e:	c1 e9 0b             	shr    ecx,0xb
c0028e21:	09 c8                	or     eax,ecx
c0028e23:	89 c6                	mov    esi,eax
c0028e25:	89 d9                	mov    ecx,ebx
c0028e27:	c1 e9 0b             	shr    ecx,0xb
c0028e2a:	c1 e2 15             	shl    edx,0x15
c0028e2d:	09 ca                	or     edx,ecx
c0028e2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028e35:	0f 95 c0             	setne  al
c0028e38:	09 c1                	or     ecx,eax
c0028e3a:	83 e1 01             	and    ecx,0x1
c0028e3d:	c1 eb 0a             	shr    ebx,0xa
c0028e40:	21 cb                	and    ebx,ecx
c0028e42:	01 d3                	add    ebx,edx
c0028e44:	89 d8                	mov    eax,ebx
c0028e46:	83 d6 00             	adc    esi,0x0
c0028e49:	89 f2                	mov    edx,esi
c0028e4b:	89 c7                	mov    edi,eax
c0028e4d:	89 d1                	mov    ecx,edx
c0028e4f:	89 f8                	mov    eax,edi
c0028e51:	89 ca                	mov    edx,ecx
c0028e53:	83 c4 2c             	add    esp,0x2c
c0028e56:	5b                   	pop    ebx
c0028e57:	5e                   	pop    esi
c0028e58:	5f                   	pop    edi
c0028e59:	5d                   	pop    ebp
c0028e5a:	c3                   	ret    

c0028e5b <__floatsidf>:
c0028e5b:	55                   	push   ebp
c0028e5c:	89 e5                	mov    ebp,esp
c0028e5e:	56                   	push   esi
c0028e5f:	53                   	push   ebx
c0028e60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e63:	85 db                	test   ebx,ebx
c0028e65:	7e 15                	jle    c0028e7c <__floatsidf+0x21>
c0028e67:	0f bd cb             	bsr    ecx,ebx
c0028e6a:	83 f1 1f             	xor    ecx,0x1f
c0028e6d:	d3 e3                	shl    ebx,cl
c0028e6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028e75:	b8 1e 04 00 00       	mov    eax,0x41e
c0028e7a:	eb 21                	jmp    c0028e9d <__floatsidf+0x42>
c0028e7c:	b8 00 00 00 00       	mov    eax,0x0
c0028e81:	ba 00 00 00 00       	mov    edx,0x0
c0028e86:	74 2a                	je     c0028eb2 <__floatsidf+0x57>
c0028e88:	f7 db                	neg    ebx
c0028e8a:	0f bd cb             	bsr    ecx,ebx
c0028e8d:	83 f1 1f             	xor    ecx,0x1f
c0028e90:	d3 e3                	shl    ebx,cl
c0028e92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028e98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028e9d:	29 c8                	sub    eax,ecx
c0028e9f:	c1 e0 14             	shl    eax,0x14
c0028ea2:	89 c1                	mov    ecx,eax
c0028ea4:	89 de                	mov    esi,ebx
c0028ea6:	c1 ee 0b             	shr    esi,0xb
c0028ea9:	09 f1                	or     ecx,esi
c0028eab:	89 ca                	mov    edx,ecx
c0028ead:	c1 e3 15             	shl    ebx,0x15
c0028eb0:	89 d8                	mov    eax,ebx
c0028eb2:	5b                   	pop    ebx
c0028eb3:	5e                   	pop    esi
c0028eb4:	5d                   	pop    ebp
c0028eb5:	c3                   	ret    

c0028eb6 <__floatunsidf>:
c0028eb6:	55                   	push   ebp
c0028eb7:	89 e5                	mov    ebp,esp
c0028eb9:	56                   	push   esi
c0028eba:	53                   	push   ebx
c0028ebb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ebe:	85 db                	test   ebx,ebx
c0028ec0:	74 2a                	je     c0028eec <__floatunsidf+0x36>
c0028ec2:	0f bd cb             	bsr    ecx,ebx
c0028ec5:	83 f1 1f             	xor    ecx,0x1f
c0028ec8:	d3 e3                	shl    ebx,cl
c0028eca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ed0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ed5:	29 c8                	sub    eax,ecx
c0028ed7:	c1 e0 14             	shl    eax,0x14
c0028eda:	89 c1                	mov    ecx,eax
c0028edc:	89 de                	mov    esi,ebx
c0028ede:	c1 ee 0b             	shr    esi,0xb
c0028ee1:	09 f1                	or     ecx,esi
c0028ee3:	89 ca                	mov    edx,ecx
c0028ee5:	c1 e3 15             	shl    ebx,0x15
c0028ee8:	89 d8                	mov    eax,ebx
c0028eea:	eb 04                	jmp    c0028ef0 <__floatunsidf+0x3a>
c0028eec:	31 c0                	xor    eax,eax
c0028eee:	31 d2                	xor    edx,edx
c0028ef0:	5b                   	pop    ebx
c0028ef1:	5e                   	pop    esi
c0028ef2:	5d                   	pop    ebp
c0028ef3:	c3                   	ret    

c0028ef4 <__fixdfsi>:
c0028ef4:	55                   	push   ebp
c0028ef5:	89 e5                	mov    ebp,esp
c0028ef7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028efa:	89 d1                	mov    ecx,edx
c0028efc:	c1 e1 0b             	shl    ecx,0xb
c0028eff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028f08:	c1 e8 15             	shr    eax,0x15
c0028f0b:	09 c1                	or     ecx,eax
c0028f0d:	c1 fa 14             	sar    edx,0x14
c0028f10:	78 1f                	js     c0028f31 <__fixdfsi+0x3d>
c0028f12:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028f18:	31 c0                	xor    eax,eax
c0028f1a:	83 fa 1e             	cmp    edx,0x1e
c0028f1d:	77 40                	ja     c0028f5f <__fixdfsi+0x6b>
c0028f1f:	89 c8                	mov    eax,ecx
c0028f21:	0d 00 00 00 80       	or     eax,0x80000000
c0028f26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f2b:	29 d1                	sub    ecx,edx
c0028f2d:	d3 e8                	shr    eax,cl
c0028f2f:	eb 2e                	jmp    c0028f5f <__fixdfsi+0x6b>
c0028f31:	31 c0                	xor    eax,eax
c0028f33:	81 c2 01 04 00 00    	add    edx,0x401
c0028f39:	78 24                	js     c0028f5f <__fixdfsi+0x6b>
c0028f3b:	83 fa 1e             	cmp    edx,0x1e
c0028f3e:	7e 09                	jle    c0028f49 <__fixdfsi+0x55>
c0028f40:	83 fa 1f             	cmp    edx,0x1f
c0028f43:	75 18                	jne    c0028f5d <__fixdfsi+0x69>
c0028f45:	85 c9                	test   ecx,ecx
c0028f47:	75 14                	jne    c0028f5d <__fixdfsi+0x69>
c0028f49:	89 c8                	mov    eax,ecx
c0028f4b:	0d 00 00 00 80       	or     eax,0x80000000
c0028f50:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f55:	29 d1                	sub    ecx,edx
c0028f57:	d3 e8                	shr    eax,cl
c0028f59:	f7 d8                	neg    eax
c0028f5b:	eb 02                	jmp    c0028f5f <__fixdfsi+0x6b>
c0028f5d:	31 c0                	xor    eax,eax
c0028f5f:	5d                   	pop    ebp
c0028f60:	c3                   	ret    

c0028f61 <__fixunsdfsi>:
c0028f61:	55                   	push   ebp
c0028f62:	89 e5                	mov    ebp,esp
c0028f64:	53                   	push   ebx
c0028f65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028f68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f6b:	89 d3                	mov    ebx,edx
c0028f6d:	c1 fb 14             	sar    ebx,0x14
c0028f70:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028f76:	31 c0                	xor    eax,eax
c0028f78:	83 fb 1f             	cmp    ebx,0x1f
c0028f7b:	77 1d                	ja     c0028f9a <__fixunsdfsi+0x39>
c0028f7d:	89 d0                	mov    eax,edx
c0028f7f:	c1 e0 0b             	shl    eax,0xb
c0028f82:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f87:	c1 e9 15             	shr    ecx,0x15
c0028f8a:	09 c8                	or     eax,ecx
c0028f8c:	0d 00 00 00 80       	or     eax,0x80000000
c0028f91:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f96:	29 d9                	sub    ecx,ebx
c0028f98:	d3 e8                	shr    eax,cl
c0028f9a:	5b                   	pop    ebx
c0028f9b:	5d                   	pop    ebp
c0028f9c:	c3                   	ret    

c0028f9d <__cmpdf2>:
c0028f9d:	55                   	push   ebp
c0028f9e:	89 e5                	mov    ebp,esp
c0028fa0:	57                   	push   edi
c0028fa1:	56                   	push   esi
c0028fa2:	53                   	push   ebx
c0028fa3:	83 ec 0c             	sub    esp,0xc
c0028fa6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028fa9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028fac:	89 ca                	mov    edx,ecx
c0028fae:	c1 ea 14             	shr    edx,0x14
c0028fb1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028fb7:	89 cb                	mov    ebx,ecx
c0028fb9:	c1 fb 1f             	sar    ebx,0x1f
c0028fbc:	31 da                	xor    edx,ebx
c0028fbe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028fc1:	89 df                	mov    edi,ebx
c0028fc3:	c1 e7 0b             	shl    edi,0xb
c0028fc6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028fc9:	c1 e1 0b             	shl    ecx,0xb
c0028fcc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028fd2:	c1 eb 15             	shr    ebx,0x15
c0028fd5:	09 d9                	or     ecx,ebx
c0028fd7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028fda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028fdd:	89 ce                	mov    esi,ecx
c0028fdf:	c1 ee 14             	shr    esi,0x14
c0028fe2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028fe8:	89 cb                	mov    ebx,ecx
c0028fea:	c1 fb 1f             	sar    ebx,0x1f
c0028fed:	31 de                	xor    esi,ebx
c0028fef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028ff2:	89 df                	mov    edi,ebx
c0028ff4:	c1 e7 0b             	shl    edi,0xb
c0028ff7:	c1 e1 0b             	shl    ecx,0xb
c0028ffa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029000:	c1 eb 15             	shr    ebx,0x15
c0029003:	09 d9                	or     ecx,ebx
c0029005:	89 d3                	mov    ebx,edx
c0029007:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002900d:	43                   	inc    ebx
c002900e:	83 fb 01             	cmp    ebx,0x1
c0029011:	77 08                	ja     c002901b <__cmpdf2+0x7e>
c0029013:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029016:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029019:	75 68                	jne    c0029083 <__cmpdf2+0xe6>
c002901b:	89 f3                	mov    ebx,esi
c002901d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029023:	43                   	inc    ebx
c0029024:	83 fb 01             	cmp    ebx,0x1
c0029027:	77 06                	ja     c002902f <__cmpdf2+0x92>
c0029029:	89 fb                	mov    ebx,edi
c002902b:	09 cb                	or     ebx,ecx
c002902d:	75 54                	jne    c0029083 <__cmpdf2+0xe6>
c002902f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029032:	09 f8                	or     eax,edi
c0029034:	09 c8                	or     eax,ecx
c0029036:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029039:	75 12                	jne    c002904d <__cmpdf2+0xb0>
c002903b:	8d 42 01             	lea    eax,[edx+0x1]
c002903e:	83 f8 01             	cmp    eax,0x1
c0029041:	77 0a                	ja     c002904d <__cmpdf2+0xb0>
c0029043:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029046:	31 c0                	xor    eax,eax
c0029048:	83 fb 01             	cmp    ebx,0x1
c002904b:	76 36                	jbe    c0029083 <__cmpdf2+0xe6>
c002904d:	b8 01 00 00 00       	mov    eax,0x1
c0029052:	39 f2                	cmp    edx,esi
c0029054:	7f 2d                	jg     c0029083 <__cmpdf2+0xe6>
c0029056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002905b:	7c 26                	jl     c0029083 <__cmpdf2+0xe6>
c002905d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0029060:	77 07                	ja     c0029069 <__cmpdf2+0xcc>
c0029062:	72 16                	jb     c002907a <__cmpdf2+0xdd>
c0029064:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0029067:	76 0a                	jbe    c0029073 <__cmpdf2+0xd6>
c0029069:	89 d0                	mov    eax,edx
c002906b:	c1 f8 1f             	sar    eax,0x1f
c002906e:	83 c8 01             	or     eax,0x1
c0029071:	eb 10                	jmp    c0029083 <__cmpdf2+0xe6>
c0029073:	b8 00 00 00 00       	mov    eax,0x0
c0029078:	73 09                	jae    c0029083 <__cmpdf2+0xe6>
c002907a:	89 d0                	mov    eax,edx
c002907c:	c1 f8 1f             	sar    eax,0x1f
c002907f:	83 e0 02             	and    eax,0x2
c0029082:	48                   	dec    eax
c0029083:	83 c4 0c             	add    esp,0xc
c0029086:	5b                   	pop    ebx
c0029087:	5e                   	pop    esi
c0029088:	5f                   	pop    edi
c0029089:	5d                   	pop    ebp
c002908a:	c3                   	ret    

c002908b <__eqdf2>:
c002908b:	55                   	push   ebp
c002908c:	89 e5                	mov    ebp,esp
c002908e:	50                   	push   eax
c002908f:	6a 01                	push   0x1
c0029091:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0029094:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0029097:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002909a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002909d:	e8 fb fe ff ff       	call   c0028f9d <__cmpdf2>
c00290a2:	83 c4 18             	add    esp,0x18
c00290a5:	c9                   	leave  
c00290a6:	c3                   	ret    

c00290a7 <__nedf2>:
c00290a7:	eb e2                	jmp    c002908b <__eqdf2>

c00290a9 <__gtdf2>:
c00290a9:	55                   	push   ebp
c00290aa:	89 e5                	mov    ebp,esp
c00290ac:	50                   	push   eax
c00290ad:	6a ff                	push   0xffffffff
c00290af:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00290b2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00290b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00290b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00290bb:	e8 dd fe ff ff       	call   c0028f9d <__cmpdf2>
c00290c0:	83 c4 18             	add    esp,0x18
c00290c3:	c9                   	leave  
c00290c4:	c3                   	ret    

c00290c5 <__gedf2>:
c00290c5:	eb e2                	jmp    c00290a9 <__gtdf2>

c00290c7 <__ltdf2>:
c00290c7:	eb c2                	jmp    c002908b <__eqdf2>

c00290c9 <__ledf2>:
c00290c9:	eb c0                	jmp    c002908b <__eqdf2>

c00290cb <__truncdfsf2>:
c00290cb:	55                   	push   ebp
c00290cc:	89 e5                	mov    ebp,esp
c00290ce:	57                   	push   edi
c00290cf:	56                   	push   esi
c00290d0:	53                   	push   ebx
c00290d1:	83 ec 0c             	sub    esp,0xc
c00290d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00290d7:	89 d1                	mov    ecx,edx
c00290d9:	c1 f9 14             	sar    ecx,0x14
c00290dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290df:	89 df                	mov    edi,ebx
c00290e1:	c1 e7 0b             	shl    edi,0xb
c00290e4:	89 d0                	mov    eax,edx
c00290e6:	c1 e0 0b             	shl    eax,0xb
c00290e9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00290ee:	c1 eb 15             	shr    ebx,0x15
c00290f1:	09 d8                	or     eax,ebx
c00290f3:	89 cb                	mov    ebx,ecx
c00290f5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00290fb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0029101:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0029107:	0f 86 9e 00 00 00    	jbe    c00291ab <__truncdfsf2+0xe0>
c002910d:	85 db                	test   ebx,ebx
c002910f:	75 0a                	jne    c002911b <__truncdfsf2+0x50>
c0029111:	c1 fa 17             	sar    edx,0x17
c0029114:	30 d2                	xor    dl,dl
c0029116:	e9 84 00 00 00       	jmp    c002919f <__truncdfsf2+0xd4>
c002911b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029121:	83 fe 83             	cmp    esi,0xffffff83
c0029124:	7d 4b                	jge    c0029171 <__truncdfsf2+0xa6>
c0029126:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002912b:	29 f1                	sub    ecx,esi
c002912d:	83 f9 1f             	cmp    ecx,0x1f
c0029130:	7f 6b                	jg     c002919d <__truncdfsf2+0xd2>
c0029132:	0d 00 00 00 80       	or     eax,0x80000000
c0029137:	89 c3                	mov    ebx,eax
c0029139:	d3 eb                	shr    ebx,cl
c002913b:	be 01 00 00 00       	mov    esi,0x1
c0029140:	d3 e6                	shl    esi,cl
c0029142:	4e                   	dec    esi
c0029143:	21 f0                	and    eax,esi
c0029145:	09 f8                	or     eax,edi
c0029147:	0f 95 c0             	setne  al
c002914a:	0f b6 c0             	movzx  eax,al
c002914d:	09 c3                	or     ebx,eax
c002914f:	89 d9                	mov    ecx,ebx
c0029151:	c1 e9 08             	shr    ecx,0x8
c0029154:	f6 c3 7f             	test   bl,0x7f
c0029157:	0f 95 c0             	setne  al
c002915a:	09 c8                	or     eax,ecx
c002915c:	83 e0 01             	and    eax,0x1
c002915f:	c1 eb 07             	shr    ebx,0x7
c0029162:	21 c3                	and    ebx,eax
c0029164:	81 e2 00 00 00 80    	and    edx,0x80000000
c002916a:	09 d1                	or     ecx,edx
c002916c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002916f:	eb 76                	jmp    c00291e7 <__truncdfsf2+0x11c>
c0029171:	83 c6 80             	add    esi,0xffffff80
c0029174:	7e 1d                	jle    c0029193 <__truncdfsf2+0xc8>
c0029176:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002917c:	75 0b                	jne    c0029189 <__truncdfsf2+0xbe>
c002917e:	09 f8                	or     eax,edi
c0029180:	74 09                	je     c002918b <__truncdfsf2+0xc0>
c0029182:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029187:	eb 02                	jmp    c002918b <__truncdfsf2+0xc0>
c0029189:	31 c0                	xor    eax,eax
c002918b:	c1 fa 17             	sar    edx,0x17
c002918e:	80 ca ff             	or     dl,0xff
c0029191:	eb 0e                	jmp    c00291a1 <__truncdfsf2+0xd6>
c0029193:	c1 fa 1f             	sar    edx,0x1f
c0029196:	c1 e2 08             	shl    edx,0x8
c0029199:	09 ca                	or     edx,ecx
c002919b:	eb 04                	jmp    c00291a1 <__truncdfsf2+0xd6>
c002919d:	31 d2                	xor    edx,edx
c002919f:	31 c0                	xor    eax,eax
c00291a1:	c1 e2 17             	shl    edx,0x17
c00291a4:	c1 e8 08             	shr    eax,0x8
c00291a7:	09 d0                	or     eax,edx
c00291a9:	eb 3c                	jmp    c00291e7 <__truncdfsf2+0x11c>
c00291ab:	81 e9 80 03 00 00    	sub    ecx,0x380
c00291b1:	89 ca                	mov    edx,ecx
c00291b3:	c1 fa 0b             	sar    edx,0xb
c00291b6:	c1 e2 08             	shl    edx,0x8
c00291b9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00291bc:	31 db                	xor    ebx,ebx
c00291be:	85 ff                	test   edi,edi
c00291c0:	0f 95 c3             	setne  bl
c00291c3:	09 d8                	or     eax,ebx
c00291c5:	89 c3                	mov    ebx,eax
c00291c7:	c1 eb 08             	shr    ebx,0x8
c00291ca:	a8 7f                	test   al,0x7f
c00291cc:	0f 95 c2             	setne  dl
c00291cf:	89 d6                	mov    esi,edx
c00291d1:	09 de                	or     esi,ebx
c00291d3:	83 e6 01             	and    esi,0x1
c00291d6:	c1 e8 07             	shr    eax,0x7
c00291d9:	21 f0                	and    eax,esi
c00291db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00291de:	09 ca                	or     edx,ecx
c00291e0:	c1 e2 17             	shl    edx,0x17
c00291e3:	09 da                	or     edx,ebx
c00291e5:	01 d0                	add    eax,edx
c00291e7:	83 c4 0c             	add    esp,0xc
c00291ea:	5b                   	pop    ebx
c00291eb:	5e                   	pop    esi
c00291ec:	5f                   	pop    edi
c00291ed:	5d                   	pop    ebp
c00291ee:	c3                   	ret    

c00291ef <__extendsfdf2>:
c00291ef:	55                   	push   ebp
c00291f0:	89 e5                	mov    ebp,esp
c00291f2:	57                   	push   edi
c00291f3:	56                   	push   esi
c00291f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00291f7:	89 d1                	mov    ecx,edx
c00291f9:	c1 f9 17             	sar    ecx,0x17
c00291fc:	c1 e2 08             	shl    edx,0x8
c00291ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029205:	89 c8                	mov    eax,ecx
c0029207:	80 e4 f8             	and    ah,0xf8
c002920a:	8d 71 01             	lea    esi,[ecx+0x1]
c002920d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029213:	75 27                	jne    c002923c <__extendsfdf2+0x4d>
c0029215:	81 e1 ff 00 00 00    	and    ecx,0xff
c002921b:	75 18                	jne    c0029235 <__extendsfdf2+0x46>
c002921d:	85 d2                	test   edx,edx
c002921f:	74 20                	je     c0029241 <__extendsfdf2+0x52>
c0029221:	41                   	inc    ecx
c0029222:	01 d2                	add    edx,edx
c0029224:	79 fb                	jns    c0029221 <__extendsfdf2+0x32>
c0029226:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002922c:	29 c8                	sub    eax,ecx
c002922e:	05 81 03 00 00       	add    eax,0x381
c0029233:	eb 0c                	jmp    c0029241 <__extendsfdf2+0x52>
c0029235:	05 00 07 00 00       	add    eax,0x700
c002923a:	eb 05                	jmp    c0029241 <__extendsfdf2+0x52>
c002923c:	05 80 03 00 00       	add    eax,0x380
c0029241:	c1 e0 14             	shl    eax,0x14
c0029244:	89 c1                	mov    ecx,eax
c0029246:	89 d0                	mov    eax,edx
c0029248:	c1 e8 0b             	shr    eax,0xb
c002924b:	09 c1                	or     ecx,eax
c002924d:	c1 e2 15             	shl    edx,0x15
c0029250:	89 d0                	mov    eax,edx
c0029252:	89 ca                	mov    edx,ecx
c0029254:	5e                   	pop    esi
c0029255:	5f                   	pop    edi
c0029256:	5d                   	pop    ebp
c0029257:	c3                   	ret    
c0029258:	66 90                	xchg   ax,ax
c002925a:	66 90                	xchg   ax,ax
c002925c:	66 90                	xchg   ax,ax
c002925e:	66 90                	xchg   ax,ax

c0029260 <fabs>:
c0029260:	83 ec 0c             	sub    esp,0xc
c0029263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029267:	89 04 24             	mov    DWORD PTR [esp],eax
c002926a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002926e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029273:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029277:	dd 04 24             	fld    QWORD PTR [esp]
c002927a:	83 c4 0c             	add    esp,0xc
c002927d:	c3                   	ret    
c002927e:	66 90                	xchg   ax,ax

c0029280 <lrint>:
c0029280:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029284:	83 ec 04             	sub    esp,0x4
c0029287:	db 1c 24             	fistp  DWORD PTR [esp]
c002928a:	58                   	pop    eax
c002928b:	c3                   	ret    

c002928c <lrintf>:
c002928c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029290:	83 ec 04             	sub    esp,0x4
c0029293:	db 1c 24             	fistp  DWORD PTR [esp]
c0029296:	58                   	pop    eax
c0029297:	c3                   	ret    

Disassembly of section .init:

c0029298 <_init>:
c0029298:	55                   	push   ebp
c0029299:	89 e5                	mov    ebp,esp
c002929b:	e8 78 6e fd ff       	call   c0000118 <frame_dummy>
c00292a0:	e8 5b e0 ff ff       	call   c0027300 <__do_global_ctors_aux>
c00292a5:	5d                   	pop    ebp
c00292a6:	c3                   	ret    

Disassembly of section .fini:

c00292a7 <_fini>:
c00292a7:	55                   	push   ebp
c00292a8:	89 e5                	mov    ebp,esp
c00292aa:	e8 f9 6d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00292af:	5d                   	pop    ebp
c00292b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00292b2 <Computer::~Computer()>:
c00292b2:	83 ec 0c             	sub    esp,0xc
c00292b5:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c00292ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292be:	89 10                	mov    DWORD PTR [eax],edx
c00292c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c4:	83 ec 0c             	sub    esp,0xc
c00292c7:	50                   	push   eax
c00292c8:	e8 71 ae fe ff       	call   c001413e <Device::~Device()>
c00292cd:	83 c4 10             	add    esp,0x10
c00292d0:	90                   	nop
c00292d1:	83 c4 0c             	add    esp,0xc
c00292d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00292d6 <Computer::~Computer()>:
c00292d6:	83 ec 0c             	sub    esp,0xc
c00292d9:	83 ec 0c             	sub    esp,0xc
c00292dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e0:	e8 cd ff ff ff       	call   c00292b2 <Computer::~Computer()>
c00292e5:	83 c4 10             	add    esp,0x10
c00292e8:	83 ec 08             	sub    esp,0x8
c00292eb:	68 ec 01 00 00       	push   0x1ec
c00292f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f4:	e8 5e 9a fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c00292f9:	83 c4 10             	add    esp,0x10
c00292fc:	83 c4 0c             	add    esp,0xc
c00292ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029300 <idleCommon()>:
c0029300:	83 ec 0c             	sub    esp,0xc
c0029303:	fa                   	cli    
c0029304:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c002930a:	e8 75 53 ff ff       	call   c001e684 <schedule()>
c002930f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0029314:	48                   	dec    eax
c0029315:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c002931a:	75 01                	jne    c002931d <idleCommon()+0x1d>
c002931c:	fb                   	sti    
c002931d:	83 c4 0c             	add    esp,0xc
c0029320:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029322 <LinkedList<UnixFile>::~LinkedList()>:
c0029322:	90                   	nop
c0029323:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029324 <LinkedList<UnixFile>::LinkedList()>:
c0029324:	83 ec 0c             	sub    esp,0xc
c0029327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029335:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029340:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029355:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002935c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029360:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029367:	83 ec 0c             	sub    esp,0xc
c002936a:	68 a6 b1 02 c0       	push   0xc002b1a6
c002936f:	e8 c3 9a fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029374:	83 c4 10             	add    esp,0x10
c0029377:	90                   	nop
c0029378:	83 c4 0c             	add    esp,0xc
c002937b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002937c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029384:	75 10                	jne    c0029396 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	68 c0 b1 02 c0       	push   0xc002b1c0
c002938e:	e8 3e 15 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939a:	8b 00                	mov    eax,DWORD PTR [eax]
c002939c:	85 c0                	test   eax,eax
c002939e:	74 34                	je     c00293d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a7:	85 c0                	test   eax,eax
c00293a9:	74 29                	je     c00293d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293d2:	eb 65                	jmp    c0029439 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293da:	85 c0                	test   eax,eax
c00293dc:	75 4b                	jne    c0029429 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293e5:	85 c0                	test   eax,eax
c00293e7:	75 40                	jne    c0029429 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293f1:	89 10                	mov    DWORD PTR [eax],edx
c00293f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029405:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002940c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029410:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029413:	85 c0                	test   eax,eax
c0029415:	74 22                	je     c0029439 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029417:	83 ec 0c             	sub    esp,0xc
c002941a:	68 e2 b1 02 c0       	push   0xc002b1e2
c002941f:	e8 ad 14 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029424:	83 c4 10             	add    esp,0x10
c0029427:	eb 10                	jmp    c0029439 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029429:	83 ec 0c             	sub    esp,0xc
c002942c:	68 ec b1 02 c0       	push   0xc002b1ec
c0029431:	e8 9b 14 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029436:	83 c4 10             	add    esp,0x10
c0029439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029440:	8d 50 01             	lea    edx,[eax+0x1]
c0029443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029447:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002944a:	90                   	nop
c002944b:	83 c4 0c             	add    esp,0xc
c002944e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029450 <LinkedList<UnixFile>::getFirstElement()>:
c0029450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029454:	8b 00                	mov    eax,DWORD PTR [eax]
c0029456:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029458 <LinkedList<UnixFile>::removeFirst()>:
c0029458:	83 ec 0c             	sub    esp,0xc
c002945b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029461:	85 c0                	test   eax,eax
c0029463:	75 12                	jne    c0029477 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029465:	83 ec 0c             	sub    esp,0xc
c0029468:	68 f8 b1 02 c0       	push   0xc002b1f8
c002946d:	e8 5f 14 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029472:	83 c4 10             	add    esp,0x10
c0029475:	eb 7e                	jmp    c00294f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002947e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029481:	85 c0                	test   eax,eax
c0029483:	74 10                	je     c0029495 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029485:	83 ec 0c             	sub    esp,0xc
c0029488:	68 43 b2 02 c0       	push   0xc002b243
c002948d:	e8 3f 14 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029492:	83 c4 10             	add    esp,0x10
c0029495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029499:	8b 00                	mov    eax,DWORD PTR [eax]
c002949b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002949e:	85 c0                	test   eax,eax
c00294a0:	75 33                	jne    c00294d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00294a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294be:	83 f8 01             	cmp    eax,0x1
c00294c1:	74 21                	je     c00294e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294c3:	83 ec 0c             	sub    esp,0xc
c00294c6:	68 1c b2 02 c0       	push   0xc002b21c
c00294cb:	e8 01 14 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00294d0:	83 c4 10             	add    esp,0x10
c00294d3:	eb 0f                	jmp    c00294e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00294db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00294de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e2:	89 10                	mov    DWORD PTR [eax],edx
c00294e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00294ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294f5:	83 c4 0c             	add    esp,0xc
c00294f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00294fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00294fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00294fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029501:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029502 <DriverlessDevice::~DriverlessDevice()>:
c0029502:	ba c4 b9 02 c0       	mov    edx,0xc002b9c4
c0029507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002950b:	89 10                	mov    DWORD PTR [eax],edx
c002950d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029511:	50                   	push   eax
c0029512:	e8 27 ac fe ff       	call   c001413e <Device::~Device()>
c0029517:	83 c4 04             	add    esp,0x4
c002951a:	90                   	nop
c002951b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002951c <DriverlessDevice::~DriverlessDevice()>:
c002951c:	83 ec 0c             	sub    esp,0xc
c002951f:	83 ec 0c             	sub    esp,0xc
c0029522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029526:	e8 d7 ff ff ff       	call   c0029502 <DriverlessDevice::~DriverlessDevice()>
c002952b:	83 c4 10             	add    esp,0x10
c002952e:	83 ec 08             	sub    esp,0x8
c0029531:	68 58 01 00 00       	push   0x158
c0029536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002953a:	e8 18 98 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c002953f:	83 c4 10             	add    esp,0x10
c0029542:	83 c4 0c             	add    esp,0xc
c0029545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029546 <LinkedList<Device>::addElement(Device*)>:
c0029546:	83 ec 0c             	sub    esp,0xc
c0029549:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002954e:	75 10                	jne    c0029560 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029550:	83 ec 0c             	sub    esp,0xc
c0029553:	68 c0 b1 02 c0       	push   0xc002b1c0
c0029558:	e8 74 13 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c002955d:	83 c4 10             	add    esp,0x10
c0029560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029564:	8b 00                	mov    eax,DWORD PTR [eax]
c0029566:	85 c0                	test   eax,eax
c0029568:	74 3a                	je     c00295a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002956a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029571:	85 c0                	test   eax,eax
c0029573:	74 2f                	je     c00295a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002957c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029580:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002958e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029598:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00295a2:	eb 68                	jmp    c002960c <LinkedList<Device>::addElement(Device*)+0xc6>
c00295a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00295aa:	85 c0                	test   eax,eax
c00295ac:	75 4e                	jne    c00295fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00295ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295b5:	85 c0                	test   eax,eax
c00295b7:	75 43                	jne    c00295fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00295b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295c1:	89 10                	mov    DWORD PTR [eax],edx
c00295c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00295df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295e6:	85 c0                	test   eax,eax
c00295e8:	74 22                	je     c002960c <LinkedList<Device>::addElement(Device*)+0xc6>
c00295ea:	83 ec 0c             	sub    esp,0xc
c00295ed:	68 e2 b1 02 c0       	push   0xc002b1e2
c00295f2:	e8 da 12 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00295f7:	83 c4 10             	add    esp,0x10
c00295fa:	eb 10                	jmp    c002960c <LinkedList<Device>::addElement(Device*)+0xc6>
c00295fc:	83 ec 0c             	sub    esp,0xc
c00295ff:	68 ec b1 02 c0       	push   0xc002b1ec
c0029604:	e8 c8 12 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029609:	83 c4 10             	add    esp,0x10
c002960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029610:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029613:	8d 50 01             	lea    edx,[eax+0x1]
c0029616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002961d:	90                   	nop
c002961e:	83 c4 0c             	add    esp,0xc
c0029621:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029622 <LinkedList<Device>::LinkedList()>:
c0029622:	83 ec 0c             	sub    esp,0xc
c0029625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029629:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002962f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029633:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002963a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029649:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002964f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029653:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002965a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029665:	83 ec 0c             	sub    esp,0xc
c0029668:	68 a6 b1 02 c0       	push   0xc002b1a6
c002966d:	e8 c5 97 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029672:	83 c4 10             	add    esp,0x10
c0029675:	90                   	nop
c0029676:	83 c4 0c             	add    esp,0xc
c0029679:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002967a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002967a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002967e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029680:	85 c0                	test   eax,eax
c0029682:	75 0e                	jne    c0029692 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002968b:	85 c0                	test   eax,eax
c002968d:	75 03                	jne    c0029692 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002968f:	b0 01                	mov    al,0x1
c0029691:	c3                   	ret    
c0029692:	b0 00                	mov    al,0x0
c0029694:	90                   	nop
c0029695:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029696 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002969a:	8b 00                	mov    eax,DWORD PTR [eax]
c002969c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002969e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002969e:	83 ec 0c             	sub    esp,0xc
c00296a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00296a7:	85 c0                	test   eax,eax
c00296a9:	75 15                	jne    c00296c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00296ab:	83 ec 0c             	sub    esp,0xc
c00296ae:	68 f8 b1 02 c0       	push   0xc002b1f8
c00296b3:	e8 19 12 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00296b8:	83 c4 10             	add    esp,0x10
c00296bb:	e9 88 00 00 00       	jmp    c0029748 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00296c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296ca:	85 c0                	test   eax,eax
c00296cc:	0f 95 c0             	setne  al
c00296cf:	84 c0                	test   al,al
c00296d1:	74 10                	je     c00296e3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00296d3:	83 ec 0c             	sub    esp,0xc
c00296d6:	68 43 b2 02 c0       	push   0xc002b243
c00296db:	e8 f1 11 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00296e0:	83 c4 10             	add    esp,0x10
c00296e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00296e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296ec:	85 c0                	test   eax,eax
c00296ee:	0f 94 c0             	sete   al
c00296f1:	84 c0                	test   al,al
c00296f3:	74 33                	je     c0029728 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00296f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029703:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002970a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002970e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029711:	83 f8 01             	cmp    eax,0x1
c0029714:	74 21                	je     c0029737 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029716:	83 ec 0c             	sub    esp,0xc
c0029719:	68 1c b2 02 c0       	push   0xc002b21c
c002971e:	e8 ae 11 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029723:	83 c4 10             	add    esp,0x10
c0029726:	eb 0f                	jmp    c0029737 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972c:	8b 00                	mov    eax,DWORD PTR [eax]
c002972e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029735:	89 10                	mov    DWORD PTR [eax],edx
c0029737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002973e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029745:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029748:	83 c4 0c             	add    esp,0xc
c002974b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002974c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002974c:	83 ec 0c             	sub    esp,0xc
c002974f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029754:	75 10                	jne    c0029766 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	68 c0 b1 02 c0       	push   0xc002b1c0
c002975e:	e8 6e 11 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029763:	83 c4 10             	add    esp,0x10
c0029766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976a:	8b 00                	mov    eax,DWORD PTR [eax]
c002976c:	85 c0                	test   eax,eax
c002976e:	74 34                	je     c00297a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029777:	85 c0                	test   eax,eax
c0029779:	74 29                	je     c00297a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002977b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029786:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029791:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002979b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297a2:	eb 65                	jmp    c0029809 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00297aa:	85 c0                	test   eax,eax
c00297ac:	75 4b                	jne    c00297f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00297ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297b5:	85 c0                	test   eax,eax
c00297b7:	75 40                	jne    c00297f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00297b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297c1:	89 10                	mov    DWORD PTR [eax],edx
c00297c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00297ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297e3:	85 c0                	test   eax,eax
c00297e5:	74 22                	je     c0029809 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297e7:	83 ec 0c             	sub    esp,0xc
c00297ea:	68 e2 b1 02 c0       	push   0xc002b1e2
c00297ef:	e8 dd 10 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00297f4:	83 c4 10             	add    esp,0x10
c00297f7:	eb 10                	jmp    c0029809 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297f9:	83 ec 0c             	sub    esp,0xc
c00297fc:	68 ec b1 02 c0       	push   0xc002b1ec
c0029801:	e8 cb 10 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029806:	83 c4 10             	add    esp,0x10
c0029809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029810:	8d 50 01             	lea    edx,[eax+0x1]
c0029813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029817:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002981a:	90                   	nop
c002981b:	83 c4 0c             	add    esp,0xc
c002981e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029820 <ACPI::~ACPI()>:
c0029820:	83 ec 0c             	sub    esp,0xc
c0029823:	ba f0 c3 02 c0       	mov    edx,0xc002c3f0
c0029828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982c:	89 10                	mov    DWORD PTR [eax],edx
c002982e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029832:	83 ec 0c             	sub    esp,0xc
c0029835:	50                   	push   eax
c0029836:	e8 03 a9 fe ff       	call   c001413e <Device::~Device()>
c002983b:	83 c4 10             	add    esp,0x10
c002983e:	90                   	nop
c002983f:	83 c4 0c             	add    esp,0xc
c0029842:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029844 <ACPI::~ACPI()>:
c0029844:	83 ec 0c             	sub    esp,0xc
c0029847:	83 ec 0c             	sub    esp,0xc
c002984a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984e:	e8 cd ff ff ff       	call   c0029820 <ACPI::~ACPI()>
c0029853:	83 c4 10             	add    esp,0x10
c0029856:	83 ec 08             	sub    esp,0x8
c0029859:	68 68 12 00 00       	push   0x1268
c002985e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029862:	e8 f0 94 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029867:	83 c4 10             	add    esp,0x10
c002986a:	83 c4 0c             	add    esp,0xc
c002986d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002986e <LinkedList<Device>::~LinkedList()>:
c002986e:	90                   	nop
c002986f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029870 <LinkedList<Device>::isEmpty()>:
c0029870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029874:	8b 00                	mov    eax,DWORD PTR [eax]
c0029876:	85 c0                	test   eax,eax
c0029878:	75 0e                	jne    c0029888 <LinkedList<Device>::isEmpty()+0x18>
c002987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002987e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029881:	85 c0                	test   eax,eax
c0029883:	75 03                	jne    c0029888 <LinkedList<Device>::isEmpty()+0x18>
c0029885:	b0 01                	mov    al,0x1
c0029887:	c3                   	ret    
c0029888:	b0 00                	mov    al,0x0
c002988a:	90                   	nop
c002988b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002988c <LinkedList<Device>::getFirstElement()>:
c002988c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029890:	8b 00                	mov    eax,DWORD PTR [eax]
c0029892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029894 <LinkedList<Device>::removeFirst()>:
c0029894:	83 ec 0c             	sub    esp,0xc
c0029897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989b:	8b 00                	mov    eax,DWORD PTR [eax]
c002989d:	85 c0                	test   eax,eax
c002989f:	75 15                	jne    c00298b6 <LinkedList<Device>::removeFirst()+0x22>
c00298a1:	83 ec 0c             	sub    esp,0xc
c00298a4:	68 f8 b1 02 c0       	push   0xc002b1f8
c00298a9:	e8 23 10 ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00298ae:	83 c4 10             	add    esp,0x10
c00298b1:	e9 87 00 00 00       	jmp    c002993d <LinkedList<Device>::removeFirst()+0xa9>
c00298b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00298c3:	85 c0                	test   eax,eax
c00298c5:	74 10                	je     c00298d7 <LinkedList<Device>::removeFirst()+0x43>
c00298c7:	83 ec 0c             	sub    esp,0xc
c00298ca:	68 43 b2 02 c0       	push   0xc002b243
c00298cf:	e8 fd 0f ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c00298d4:	83 c4 10             	add    esp,0x10
c00298d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298db:	8b 00                	mov    eax,DWORD PTR [eax]
c00298dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00298e3:	85 c0                	test   eax,eax
c00298e5:	75 33                	jne    c002991a <LinkedList<Device>::removeFirst()+0x86>
c00298e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00298f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00298fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029900:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029903:	83 f8 01             	cmp    eax,0x1
c0029906:	74 24                	je     c002992c <LinkedList<Device>::removeFirst()+0x98>
c0029908:	83 ec 0c             	sub    esp,0xc
c002990b:	68 1c b2 02 c0       	push   0xc002b21c
c0029910:	e8 bc 0f ff ff       	call   c001a8d1 <Krnl::panic(char const*)>
c0029915:	83 c4 10             	add    esp,0x10
c0029918:	eb 12                	jmp    c002992c <LinkedList<Device>::removeFirst()+0x98>
c002991a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029920:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	89 10                	mov    DWORD PTR [eax],edx
c002992c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029930:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029933:	8d 50 ff             	lea    edx,[eax-0x1]
c0029936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002993d:	83 c4 0c             	add    esp,0xc
c0029940:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029942 <CPU::~CPU()>:
c0029942:	83 ec 0c             	sub    esp,0xc
c0029945:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c002994a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002994e:	89 10                	mov    DWORD PTR [eax],edx
c0029950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	50                   	push   eax
c0029958:	e8 e1 a7 fe ff       	call   c001413e <Device::~Device()>
c002995d:	83 c4 10             	add    esp,0x10
c0029960:	90                   	nop
c0029961:	83 c4 0c             	add    esp,0xc
c0029964:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029966 <CPU::~CPU()>:
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	83 ec 0c             	sub    esp,0xc
c002996c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029970:	e8 cd ff ff ff       	call   c0029942 <CPU::~CPU()>
c0029975:	83 c4 10             	add    esp,0x10
c0029978:	83 ec 08             	sub    esp,0x8
c002997b:	68 98 11 00 00       	push   0x1198
c0029980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029984:	e8 ce 93 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029989:	83 c4 10             	add    esp,0x10
c002998c:	83 c4 0c             	add    esp,0xc
c002998f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029990 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029990:	90                   	nop
c0029991:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029992 <ThreadControlBlock::ThreadControlBlock()>:
c0029992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029996:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002999d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00299a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299ac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00299b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299b7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00299be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299c2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00299c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299cd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00299d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299d5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00299d9:	90                   	nop
c00299da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00299dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00299dc:	83 ec 0c             	sub    esp,0xc
c00299df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00299e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00299f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00299ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029a1f:	83 ec 0c             	sub    esp,0xc
c0029a22:	68 a6 b1 02 c0       	push   0xc002b1a6
c0029a27:	e8 0b 94 fe ff       	call   c0012e37 <Dbg::kprintf(char const*, ...)>
c0029a2c:	83 c4 10             	add    esp,0x10
c0029a2f:	90                   	nop
c0029a30:	83 c4 0c             	add    esp,0xc
c0029a33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029a34 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029a34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029a38:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029a3b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029a3c <Vm::_FPUState::_FPUState()>:
c0029a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a40:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029a47:	90                   	nop
c0029a48:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029a4a <PCI::~PCI()>:
c0029a4a:	83 ec 0c             	sub    esp,0xc
c0029a4d:	ba 10 d9 02 c0       	mov    edx,0xc002d910
c0029a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a56:	89 10                	mov    DWORD PTR [eax],edx
c0029a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5c:	83 ec 0c             	sub    esp,0xc
c0029a5f:	50                   	push   eax
c0029a60:	e8 a9 a0 fe ff       	call   c0013b0e <Bus::~Bus()>
c0029a65:	83 c4 10             	add    esp,0x10
c0029a68:	90                   	nop
c0029a69:	83 c4 0c             	add    esp,0xc
c0029a6c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029a6e <PCI::~PCI()>:
c0029a6e:	83 ec 0c             	sub    esp,0xc
c0029a71:	83 ec 0c             	sub    esp,0xc
c0029a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a78:	e8 cd ff ff ff       	call   c0029a4a <PCI::~PCI()>
c0029a7d:	83 c4 10             	add    esp,0x10
c0029a80:	83 ec 08             	sub    esp,0x8
c0029a83:	68 58 01 00 00       	push   0x158
c0029a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a8c:	e8 c6 92 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029a91:	83 c4 10             	add    esp,0x10
c0029a94:	83 c4 0c             	add    esp,0xc
c0029a97:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029a98 <IDE::~IDE()>:
c0029a98:	83 ec 0c             	sub    esp,0xc
c0029a9b:	ba 74 db 02 c0       	mov    edx,0xc002db74
c0029aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa4:	89 10                	mov    DWORD PTR [eax],edx
c0029aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aaa:	83 ec 0c             	sub    esp,0xc
c0029aad:	50                   	push   eax
c0029aae:	e8 75 ab fe ff       	call   c0014628 <HardDiskController::~HardDiskController()>
c0029ab3:	83 c4 10             	add    esp,0x10
c0029ab6:	90                   	nop
c0029ab7:	83 c4 0c             	add    esp,0xc
c0029aba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029abc <IDE::~IDE()>:
c0029abc:	83 ec 0c             	sub    esp,0xc
c0029abf:	83 ec 0c             	sub    esp,0xc
c0029ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac6:	e8 cd ff ff ff       	call   c0029a98 <IDE::~IDE()>
c0029acb:	83 c4 10             	add    esp,0x10
c0029ace:	83 ec 08             	sub    esp,0x8
c0029ad1:	68 70 02 00 00       	push   0x270
c0029ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ada:	e8 78 92 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029adf:	83 c4 10             	add    esp,0x10
c0029ae2:	83 c4 0c             	add    esp,0xc
c0029ae5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029ae6 <SATABus::~SATABus()>:
c0029ae6:	83 ec 0c             	sub    esp,0xc
c0029ae9:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c0029aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af2:	89 10                	mov    DWORD PTR [eax],edx
c0029af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af8:	83 ec 0c             	sub    esp,0xc
c0029afb:	50                   	push   eax
c0029afc:	e8 27 ab fe ff       	call   c0014628 <HardDiskController::~HardDiskController()>
c0029b01:	83 c4 10             	add    esp,0x10
c0029b04:	90                   	nop
c0029b05:	83 c4 0c             	add    esp,0xc
c0029b08:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029b0a <SATABus::~SATABus()>:
c0029b0a:	83 ec 0c             	sub    esp,0xc
c0029b0d:	83 ec 0c             	sub    esp,0xc
c0029b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b14:	e8 cd ff ff ff       	call   c0029ae6 <SATABus::~SATABus()>
c0029b19:	83 c4 10             	add    esp,0x10
c0029b1c:	83 ec 08             	sub    esp,0x8
c0029b1f:	68 64 01 00 00       	push   0x164
c0029b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b28:	e8 2a 92 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029b2d:	83 c4 10             	add    esp,0x10
c0029b30:	83 c4 0c             	add    esp,0xc
c0029b33:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029b34 <ATA::~ATA()>:
c0029b34:	83 ec 0c             	sub    esp,0xc
c0029b37:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c0029b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b40:	89 10                	mov    DWORD PTR [eax],edx
c0029b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b46:	83 ec 0c             	sub    esp,0xc
c0029b49:	50                   	push   eax
c0029b4a:	e8 cb ab fe ff       	call   c001471a <PhysicalDisk::~PhysicalDisk()>
c0029b4f:	83 c4 10             	add    esp,0x10
c0029b52:	90                   	nop
c0029b53:	83 c4 0c             	add    esp,0xc
c0029b56:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029b58 <ATA::~ATA()>:
c0029b58:	83 ec 0c             	sub    esp,0xc
c0029b5b:	83 ec 0c             	sub    esp,0xc
c0029b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b62:	e8 cd ff ff ff       	call   c0029b34 <ATA::~ATA()>
c0029b67:	83 c4 10             	add    esp,0x10
c0029b6a:	83 ec 08             	sub    esp,0x8
c0029b6d:	68 7c 01 00 00       	push   0x17c
c0029b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b76:	e8 dc 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029b7b:	83 c4 10             	add    esp,0x10
c0029b7e:	83 c4 0c             	add    esp,0xc
c0029b81:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029b82 <ATAPI::~ATAPI()>:
c0029b82:	83 ec 0c             	sub    esp,0xc
c0029b85:	ba d8 dc 02 c0       	mov    edx,0xc002dcd8
c0029b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b8e:	89 10                	mov    DWORD PTR [eax],edx
c0029b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b94:	83 ec 0c             	sub    esp,0xc
c0029b97:	50                   	push   eax
c0029b98:	e8 7d ab fe ff       	call   c001471a <PhysicalDisk::~PhysicalDisk()>
c0029b9d:	83 c4 10             	add    esp,0x10
c0029ba0:	90                   	nop
c0029ba1:	83 c4 0c             	add    esp,0xc
c0029ba4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029ba6 <ATAPI::~ATAPI()>:
c0029ba6:	83 ec 0c             	sub    esp,0xc
c0029ba9:	83 ec 0c             	sub    esp,0xc
c0029bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb0:	e8 cd ff ff ff       	call   c0029b82 <ATAPI::~ATAPI()>
c0029bb5:	83 c4 10             	add    esp,0x10
c0029bb8:	83 ec 08             	sub    esp,0x8
c0029bbb:	68 80 01 00 00       	push   0x180
c0029bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc4:	e8 8e 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029bc9:	83 c4 10             	add    esp,0x10
c0029bcc:	83 c4 0c             	add    esp,0xc
c0029bcf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029bd0 <SATA::~SATA()>:
c0029bd0:	83 ec 0c             	sub    esp,0xc
c0029bd3:	ba 8c dd 02 c0       	mov    edx,0xc002dd8c
c0029bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bdc:	89 10                	mov    DWORD PTR [eax],edx
c0029bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be2:	83 ec 0c             	sub    esp,0xc
c0029be5:	50                   	push   eax
c0029be6:	e8 2f ab fe ff       	call   c001471a <PhysicalDisk::~PhysicalDisk()>
c0029beb:	83 c4 10             	add    esp,0x10
c0029bee:	90                   	nop
c0029bef:	83 c4 0c             	add    esp,0xc
c0029bf2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029bf4 <SATA::~SATA()>:
c0029bf4:	83 ec 0c             	sub    esp,0xc
c0029bf7:	83 ec 0c             	sub    esp,0xc
c0029bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bfe:	e8 cd ff ff ff       	call   c0029bd0 <SATA::~SATA()>
c0029c03:	83 c4 10             	add    esp,0x10
c0029c06:	83 ec 08             	sub    esp,0x8
c0029c09:	68 7c 01 00 00       	push   0x17c
c0029c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c12:	e8 40 91 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029c17:	83 c4 10             	add    esp,0x10
c0029c1a:	83 c4 0c             	add    esp,0xc
c0029c1d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029c1e <SATAPI::~SATAPI()>:
c0029c1e:	83 ec 0c             	sub    esp,0xc
c0029c21:	ba 68 de 02 c0       	mov    edx,0xc002de68
c0029c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c2a:	89 10                	mov    DWORD PTR [eax],edx
c0029c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c30:	83 ec 0c             	sub    esp,0xc
c0029c33:	50                   	push   eax
c0029c34:	e8 e1 aa fe ff       	call   c001471a <PhysicalDisk::~PhysicalDisk()>
c0029c39:	83 c4 10             	add    esp,0x10
c0029c3c:	90                   	nop
c0029c3d:	83 c4 0c             	add    esp,0xc
c0029c40:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029c42 <SATAPI::~SATAPI()>:
c0029c42:	83 ec 0c             	sub    esp,0xc
c0029c45:	83 ec 0c             	sub    esp,0xc
c0029c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c4c:	e8 cd ff ff ff       	call   c0029c1e <SATAPI::~SATAPI()>
c0029c51:	83 c4 10             	add    esp,0x10
c0029c54:	83 ec 08             	sub    esp,0x8
c0029c57:	68 80 01 00 00       	push   0x180
c0029c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c60:	e8 f2 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029c65:	83 c4 10             	add    esp,0x10
c0029c68:	83 c4 0c             	add    esp,0xc
c0029c6b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029c6c <AVX::~AVX()>:
c0029c6c:	83 ec 0c             	sub    esp,0xc
c0029c6f:	ba a8 de 02 c0       	mov    edx,0xc002dea8
c0029c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c78:	89 10                	mov    DWORD PTR [eax],edx
c0029c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c7e:	83 ec 0c             	sub    esp,0xc
c0029c81:	50                   	push   eax
c0029c82:	e8 17 ab fe ff       	call   c001479e <FPU::~FPU()>
c0029c87:	83 c4 10             	add    esp,0x10
c0029c8a:	90                   	nop
c0029c8b:	83 c4 0c             	add    esp,0xc
c0029c8e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029c90 <AVX::~AVX()>:
c0029c90:	83 ec 0c             	sub    esp,0xc
c0029c93:	83 ec 0c             	sub    esp,0xc
c0029c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c9a:	e8 cd ff ff ff       	call   c0029c6c <AVX::~AVX()>
c0029c9f:	83 c4 10             	add    esp,0x10
c0029ca2:	83 ec 08             	sub    esp,0x8
c0029ca5:	68 58 01 00 00       	push   0x158
c0029caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cae:	e8 a4 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029cb3:	83 c4 10             	add    esp,0x10
c0029cb6:	83 c4 0c             	add    esp,0xc
c0029cb9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029cba <MMX::~MMX()>:
c0029cba:	83 ec 0c             	sub    esp,0xc
c0029cbd:	ba e8 de 02 c0       	mov    edx,0xc002dee8
c0029cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cc6:	89 10                	mov    DWORD PTR [eax],edx
c0029cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ccc:	83 ec 0c             	sub    esp,0xc
c0029ccf:	50                   	push   eax
c0029cd0:	e8 c9 aa fe ff       	call   c001479e <FPU::~FPU()>
c0029cd5:	83 c4 10             	add    esp,0x10
c0029cd8:	90                   	nop
c0029cd9:	83 c4 0c             	add    esp,0xc
c0029cdc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029cde <MMX::~MMX()>:
c0029cde:	83 ec 0c             	sub    esp,0xc
c0029ce1:	83 ec 0c             	sub    esp,0xc
c0029ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ce8:	e8 cd ff ff ff       	call   c0029cba <MMX::~MMX()>
c0029ced:	83 c4 10             	add    esp,0x10
c0029cf0:	83 ec 08             	sub    esp,0x8
c0029cf3:	68 58 01 00 00       	push   0x158
c0029cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cfc:	e8 56 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029d01:	83 c4 10             	add    esp,0x10
c0029d04:	83 c4 0c             	add    esp,0xc
c0029d07:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029d08 <SSE::~SSE()>:
c0029d08:	83 ec 0c             	sub    esp,0xc
c0029d0b:	ba 28 df 02 c0       	mov    edx,0xc002df28
c0029d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d14:	89 10                	mov    DWORD PTR [eax],edx
c0029d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1a:	83 ec 0c             	sub    esp,0xc
c0029d1d:	50                   	push   eax
c0029d1e:	e8 7b aa fe ff       	call   c001479e <FPU::~FPU()>
c0029d23:	83 c4 10             	add    esp,0x10
c0029d26:	90                   	nop
c0029d27:	83 c4 0c             	add    esp,0xc
c0029d2a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029d2c <SSE::~SSE()>:
c0029d2c:	83 ec 0c             	sub    esp,0xc
c0029d2f:	83 ec 0c             	sub    esp,0xc
c0029d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d36:	e8 cd ff ff ff       	call   c0029d08 <SSE::~SSE()>
c0029d3b:	83 c4 10             	add    esp,0x10
c0029d3e:	83 ec 08             	sub    esp,0x8
c0029d41:	68 58 01 00 00       	push   0x158
c0029d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d4a:	e8 08 90 fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029d4f:	83 c4 10             	add    esp,0x10
c0029d52:	83 c4 0c             	add    esp,0xc
c0029d55:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029d56 <x87::~x87()>:
c0029d56:	83 ec 0c             	sub    esp,0xc
c0029d59:	ba 68 df 02 c0       	mov    edx,0xc002df68
c0029d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d62:	89 10                	mov    DWORD PTR [eax],edx
c0029d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d68:	83 ec 0c             	sub    esp,0xc
c0029d6b:	50                   	push   eax
c0029d6c:	e8 2d aa fe ff       	call   c001479e <FPU::~FPU()>
c0029d71:	83 c4 10             	add    esp,0x10
c0029d74:	90                   	nop
c0029d75:	83 c4 0c             	add    esp,0xc
c0029d78:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029d7a <x87::~x87()>:
c0029d7a:	83 ec 0c             	sub    esp,0xc
c0029d7d:	83 ec 0c             	sub    esp,0xc
c0029d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d84:	e8 cd ff ff ff       	call   c0029d56 <x87::~x87()>
c0029d89:	83 c4 10             	add    esp,0x10
c0029d8c:	83 ec 08             	sub    esp,0x8
c0029d8f:	68 58 01 00 00       	push   0x158
c0029d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d98:	e8 ba 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029d9d:	83 c4 10             	add    esp,0x10
c0029da0:	83 c4 0c             	add    esp,0xc
c0029da3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029da4 <IOAPIC::~IOAPIC()>:
c0029da4:	83 ec 0c             	sub    esp,0xc
c0029da7:	ba c0 e0 02 c0       	mov    edx,0xc002e0c0
c0029dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029db0:	89 10                	mov    DWORD PTR [eax],edx
c0029db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029db6:	83 ec 0c             	sub    esp,0xc
c0029db9:	50                   	push   eax
c0029dba:	e8 7f a3 fe ff       	call   c001413e <Device::~Device()>
c0029dbf:	83 c4 10             	add    esp,0x10
c0029dc2:	90                   	nop
c0029dc3:	83 c4 0c             	add    esp,0xc
c0029dc6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029dc8 <IOAPIC::~IOAPIC()>:
c0029dc8:	83 ec 0c             	sub    esp,0xc
c0029dcb:	83 ec 0c             	sub    esp,0xc
c0029dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dd2:	e8 cd ff ff ff       	call   c0029da4 <IOAPIC::~IOAPIC()>
c0029dd7:	83 c4 10             	add    esp,0x10
c0029dda:	83 ec 08             	sub    esp,0x8
c0029ddd:	68 68 01 00 00       	push   0x168
c0029de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029de6:	e8 6c 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029deb:	83 c4 10             	add    esp,0x10
c0029dee:	83 c4 0c             	add    esp,0xc
c0029df1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029df2 <APIC::~APIC()>:
c0029df2:	83 ec 0c             	sub    esp,0xc
c0029df5:	ba 78 e0 02 c0       	mov    edx,0xc002e078
c0029dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dfe:	89 10                	mov    DWORD PTR [eax],edx
c0029e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e04:	83 ec 0c             	sub    esp,0xc
c0029e07:	50                   	push   eax
c0029e08:	e8 5b ae fe ff       	call   c0014c68 <InterruptController::~InterruptController()>
c0029e0d:	83 c4 10             	add    esp,0x10
c0029e10:	90                   	nop
c0029e11:	83 c4 0c             	add    esp,0xc
c0029e14:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029e16 <APIC::~APIC()>:
c0029e16:	83 ec 0c             	sub    esp,0xc
c0029e19:	83 ec 0c             	sub    esp,0xc
c0029e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e20:	e8 cd ff ff ff       	call   c0029df2 <APIC::~APIC()>
c0029e25:	83 c4 10             	add    esp,0x10
c0029e28:	83 ec 08             	sub    esp,0x8
c0029e2b:	68 58 21 00 00       	push   0x2158
c0029e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e34:	e8 1e 8f fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029e39:	83 c4 10             	add    esp,0x10
c0029e3c:	83 c4 0c             	add    esp,0xc
c0029e3f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029e40 <PIC::~PIC()>:
c0029e40:	83 ec 0c             	sub    esp,0xc
c0029e43:	ba 10 e1 02 c0       	mov    edx,0xc002e110
c0029e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e4c:	89 10                	mov    DWORD PTR [eax],edx
c0029e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e52:	83 ec 0c             	sub    esp,0xc
c0029e55:	50                   	push   eax
c0029e56:	e8 0d ae fe ff       	call   c0014c68 <InterruptController::~InterruptController()>
c0029e5b:	83 c4 10             	add    esp,0x10
c0029e5e:	90                   	nop
c0029e5f:	83 c4 0c             	add    esp,0xc
c0029e62:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029e64 <PIC::~PIC()>:
c0029e64:	83 ec 0c             	sub    esp,0xc
c0029e67:	83 ec 0c             	sub    esp,0xc
c0029e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e6e:	e8 cd ff ff ff       	call   c0029e40 <PIC::~PIC()>
c0029e73:	83 c4 10             	add    esp,0x10
c0029e76:	83 ec 08             	sub    esp,0x8
c0029e79:	68 58 21 00 00       	push   0x2158
c0029e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e82:	e8 d0 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029e87:	83 c4 10             	add    esp,0x10
c0029e8a:	83 c4 0c             	add    esp,0xc
c0029e8d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029e8e <APICTimer::~APICTimer()>:
c0029e8e:	83 ec 0c             	sub    esp,0xc
c0029e91:	ba 64 e1 02 c0       	mov    edx,0xc002e164
c0029e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e9a:	89 10                	mov    DWORD PTR [eax],edx
c0029e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ea0:	83 ec 0c             	sub    esp,0xc
c0029ea3:	50                   	push   eax
c0029ea4:	e8 75 ce fe ff       	call   c0016d1e <Timer::~Timer()>
c0029ea9:	83 c4 10             	add    esp,0x10
c0029eac:	90                   	nop
c0029ead:	83 c4 0c             	add    esp,0xc
c0029eb0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029eb2 <APICTimer::~APICTimer()>:
c0029eb2:	83 ec 0c             	sub    esp,0xc
c0029eb5:	83 ec 0c             	sub    esp,0xc
c0029eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ebc:	e8 cd ff ff ff       	call   c0029e8e <APICTimer::~APICTimer()>
c0029ec1:	83 c4 10             	add    esp,0x10
c0029ec4:	83 ec 08             	sub    esp,0x8
c0029ec7:	68 60 01 00 00       	push   0x160
c0029ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ed0:	e8 82 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029ed5:	83 c4 10             	add    esp,0x10
c0029ed8:	83 c4 0c             	add    esp,0xc
c0029edb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029edc <PIT::~PIT()>:
c0029edc:	83 ec 0c             	sub    esp,0xc
c0029edf:	ba b4 e1 02 c0       	mov    edx,0xc002e1b4
c0029ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ee8:	89 10                	mov    DWORD PTR [eax],edx
c0029eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eee:	83 ec 0c             	sub    esp,0xc
c0029ef1:	50                   	push   eax
c0029ef2:	e8 27 ce fe ff       	call   c0016d1e <Timer::~Timer()>
c0029ef7:	83 c4 10             	add    esp,0x10
c0029efa:	90                   	nop
c0029efb:	83 c4 0c             	add    esp,0xc
c0029efe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029f00 <PIT::~PIT()>:
c0029f00:	83 ec 0c             	sub    esp,0xc
c0029f03:	83 ec 0c             	sub    esp,0xc
c0029f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f0a:	e8 cd ff ff ff       	call   c0029edc <PIT::~PIT()>
c0029f0f:	83 c4 10             	add    esp,0x10
c0029f12:	83 ec 08             	sub    esp,0x8
c0029f15:	68 5c 01 00 00       	push   0x15c
c0029f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f1e:	e8 34 8e fe ff       	call   c0012d57 <operator delete(void*, unsigned long)>
c0029f23:	83 c4 10             	add    esp,0x10
c0029f26:	83 c4 0c             	add    esp,0xc
c0029f29:	c3                   	ret    
