
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c1 7a 00 00       	call   c0007ae1 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000025:	3d e8 22 02 c0       	cmp    eax,0xc00222e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 22 02 c0       	push   0xc00222e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000051:	2d e8 22 02 c0       	sub    eax,0xc00222e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 22 02 c0       	push   0xc00222e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c f2 01 c0       	mov    ebx,0xc001f29c
c0000097:	81 eb 98 f2 01 c0    	sub    ebx,0xc001f298
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 f2 01 c0       	mov    esi,0xc001f298
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 22 02 c0       	push   0xc00222e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e8 22 02 c0       	push   0xc00222e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cf 45 01 00       	call   c001487c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3d a4 00 00       	call   c000a702 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ad 45 01 00       	call   c001487c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b6 4a 01 00       	call   c0014da4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 5d 51 01 00       	call   c0015454 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a3 04 01 00       	jmp    c0010822 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000395:	8a 08                	mov    cl,BYTE PTR [eax]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a3:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	74 7f                	je     c000046b <memmove+0x9b>
c00003ec:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ef:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f2:	39 cd                	cmp    ebp,ecx
c00003f4:	0f 93 c1             	setae  cl
c00003f7:	39 f3                	cmp    ebx,esi
c00003f9:	0f 93 c0             	setae  al
c00003fc:	89 c6                	mov    esi,eax
c00003fe:	31 c0                	xor    eax,eax
c0000400:	09 f1                	or     ecx,esi
c0000402:	8d 72 ff             	lea    esi,[edx-0x1]
c0000405:	83 fe 0c             	cmp    esi,0xc
c0000408:	0f 97 c0             	seta   al
c000040b:	89 c6                	mov    esi,eax
c000040d:	85 ce                	test   esi,ecx
c000040f:	0f 84 9b 00 00 00    	je     c00004b0 <memmove+0xe0>
c0000415:	89 e9                	mov    ecx,ebp
c0000417:	09 d9                	or     ecx,ebx
c0000419:	80 e1 03             	and    cl,0x3
c000041c:	0f 85 8e 00 00 00    	jne    c00004b0 <memmove+0xe0>
c0000422:	89 d7                	mov    edi,edx
c0000424:	89 d9                	mov    ecx,ebx
c0000426:	83 e7 fc             	and    edi,0xfffffffc
c0000429:	89 ee                	mov    esi,ebp
c000042b:	01 df                	add    edi,ebx
c000042d:	8d 76 00             	lea    esi,[esi+0x0]
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c1 04             	add    ecx,0x4
c0000435:	89 06                	mov    DWORD PTR [esi],eax
c0000437:	83 c6 04             	add    esi,0x4
c000043a:	39 f9                	cmp    ecx,edi
c000043c:	75 f2                	jne    c0000430 <memmove+0x60>
c000043e:	89 d1                	mov    ecx,edx
c0000440:	89 d7                	mov    edi,edx
c0000442:	83 e1 fc             	and    ecx,0xfffffffc
c0000445:	29 cf                	sub    edi,ecx
c0000447:	01 cb                	add    ebx,ecx
c0000449:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044d:	39 ca                	cmp    edx,ecx
c000044f:	74 1a                	je     c000046b <memmove+0x9b>
c0000451:	8a 03                	mov    al,BYTE PTR [ebx]
c0000453:	83 ff 01             	cmp    edi,0x1
c0000456:	88 06                	mov    BYTE PTR [esi],al
c0000458:	74 11                	je     c000046b <memmove+0x9b>
c000045a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045d:	83 ff 02             	cmp    edi,0x2
c0000460:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000463:	74 06                	je     c000046b <memmove+0x9b>
c0000465:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000468:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046b:	5b                   	pop    ebx
c000046c:	89 e8                	mov    eax,ebp
c000046e:	5e                   	pop    esi
c000046f:	5f                   	pop    edi
c0000470:	5d                   	pop    ebp
c0000471:	c3                   	ret    
c0000472:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 e9                	jbe    c000046b <memmove+0x9b>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e5                	je     c000046b <memmove+0x9b>
c0000486:	83 eb 01             	sub    ebx,0x1
c0000489:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	83 ea 01             	sub    edx,0x1
c0000499:	75 f5                	jne    c0000490 <memmove+0xc0>
c000049b:	5b                   	pop    ebx
c000049c:	89 e8                	mov    eax,ebp
c000049e:	5e                   	pop    esi
c000049f:	5f                   	pop    edi
c00004a0:	5d                   	pop    ebp
c00004a1:	c3                   	ret    
c00004a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	83 c1 01             	add    ecx,0x1
c00004c5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c8:	83 c3 01             	add    ebx,0x1
c00004cb:	39 d1                	cmp    ecx,edx
c00004cd:	75 f1                	jne    c00004c0 <memmove+0xf0>
c00004cf:	eb 9a                	jmp    c000046b <memmove+0x9b>
c00004d1:	eb 0d                	jmp    c00004e0 <memset>
c00004d3:	90                   	nop
c00004d4:	90                   	nop
c00004d5:	90                   	nop
c00004d6:	90                   	nop
c00004d7:	90                   	nop
c00004d8:	90                   	nop
c00004d9:	90                   	nop
c00004da:	90                   	nop
c00004db:	90                   	nop
c00004dc:	90                   	nop
c00004dd:	90                   	nop
c00004de:	90                   	nop
c00004df:	90                   	nop

c00004e0 <memset>:
c00004e0:	57                   	push   edi
c00004e1:	56                   	push   esi
c00004e2:	53                   	push   ebx
c00004e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004eb:	85 d2                	test   edx,edx
c00004ed:	74 1d                	je     c000050c <memset+0x2c>
c00004ef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00004f4:	89 f7                	mov    edi,esi
c00004f6:	83 fa 04             	cmp    edx,0x4
c00004f9:	73 25                	jae    c0000520 <memset+0x40>
c00004fb:	83 e2 03             	and    edx,0x3
c00004fe:	74 0c                	je     c000050c <memset+0x2c>
c0000500:	31 c0                	xor    eax,eax
c0000502:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000505:	83 c0 01             	add    eax,0x1
c0000508:	39 d0                	cmp    eax,edx
c000050a:	72 f6                	jb     c0000502 <memset+0x22>
c000050c:	5b                   	pop    ebx
c000050d:	89 f0                	mov    eax,esi
c000050f:	5e                   	pop    esi
c0000510:	5f                   	pop    edi
c0000511:	c3                   	ret    
c0000512:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000519:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000520:	0f b6 c3             	movzx  eax,bl
c0000523:	88 c4                	mov    ah,al
c0000525:	89 c1                	mov    ecx,eax
c0000527:	c1 e1 10             	shl    ecx,0x10
c000052a:	09 c8                	or     eax,ecx
c000052c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000532:	75 12                	jne    c0000546 <memset+0x66>
c0000534:	f7 c7 02 00 00 00    	test   edi,0x2
c000053a:	75 14                	jne    c0000550 <memset+0x70>
c000053c:	89 d1                	mov    ecx,edx
c000053e:	c1 e9 02             	shr    ecx,0x2
c0000541:	fc                   	cld    
c0000542:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000544:	eb b5                	jmp    c00004fb <memset+0x1b>
c0000546:	88 06                	mov    BYTE PTR [esi],al
c0000548:	8d 7e 01             	lea    edi,[esi+0x1]
c000054b:	83 ea 01             	sub    edx,0x1
c000054e:	eb e4                	jmp    c0000534 <memset+0x54>
c0000550:	66 89 07             	mov    WORD PTR [edi],ax
c0000553:	83 ea 02             	sub    edx,0x2
c0000556:	83 c7 02             	add    edi,0x2
c0000559:	eb e1                	jmp    c000053c <memset+0x5c>
c000055b:	90                   	nop
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	83 c0 01             	add    eax,0x1
c0000573:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000577:	75 f7                	jne    c0000570 <strlen+0x10>
c0000579:	c3                   	ret    
c000057a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c000059e:	85 db                	test   ebx,ebx
c00005a0:	74 36                	je     c00005d8 <strpbrk+0x48>
c00005a2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005a5:	85 f6                	test   esi,esi
c00005a7:	74 25                	je     c00005ce <strpbrk+0x3e>
c00005a9:	39 de                	cmp    esi,ebx
c00005ab:	74 2d                	je     c00005da <strpbrk+0x4a>
c00005ad:	89 fa                	mov    edx,edi
c00005af:	eb 13                	jmp    c00005c4 <strpbrk+0x34>
c00005b1:	eb 0d                	jmp    c00005c0 <strpbrk+0x30>
c00005b3:	90                   	nop
c00005b4:	90                   	nop
c00005b5:	90                   	nop
c00005b6:	90                   	nop
c00005b7:	90                   	nop
c00005b8:	90                   	nop
c00005b9:	90                   	nop
c00005ba:	90                   	nop
c00005bb:	90                   	nop
c00005bc:	90                   	nop
c00005bd:	90                   	nop
c00005be:	90                   	nop
c00005bf:	90                   	nop
c00005c0:	39 d9                	cmp    ecx,ebx
c00005c2:	74 16                	je     c00005da <strpbrk+0x4a>
c00005c4:	83 c2 01             	add    edx,0x1
c00005c7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ca:	85 c9                	test   ecx,ecx
c00005cc:	75 f2                	jne    c00005c0 <strpbrk+0x30>
c00005ce:	83 c0 01             	add    eax,0x1
c00005d1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005d4:	85 db                	test   ebx,ebx
c00005d6:	75 cd                	jne    c00005a5 <strpbrk+0x15>
c00005d8:	31 c0                	xor    eax,eax
c00005da:	5b                   	pop    ebx
c00005db:	5e                   	pop    esi
c00005dc:	5f                   	pop    edi
c00005dd:	c3                   	ret    
c00005de:	66 90                	xchg   ax,ax

c00005e0 <strtok>:
c00005e0:	56                   	push   esi
c00005e1:	53                   	push   ebx
c00005e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ea:	85 db                	test   ebx,ebx
c00005ec:	75 09                	jne    c00005f7 <strtok+0x17>
c00005ee:	eb 30                	jmp    c0000620 <strtok+0x40>
c00005f0:	83 c3 01             	add    ebx,0x1
c00005f3:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005f7:	56                   	push   esi
c00005f8:	53                   	push   ebx
c00005f9:	e8 92 ff ff ff       	call   c0000590 <strpbrk>
c00005fe:	5a                   	pop    edx
c00005ff:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000604:	59                   	pop    ecx
c0000605:	39 d8                	cmp    eax,ebx
c0000607:	74 e7                	je     c00005f0 <strtok+0x10>
c0000609:	85 c0                	test   eax,eax
c000060b:	74 1d                	je     c000062a <strtok+0x4a>
c000060d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000610:	8d 50 01             	lea    edx,[eax+0x1]
c0000613:	89 d8                	mov    eax,ebx
c0000615:	5b                   	pop    ebx
c0000616:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000061c:	5e                   	pop    esi
c000061d:	c3                   	ret    
c000061e:	66 90                	xchg   ax,ax
c0000620:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000626:	85 db                	test   ebx,ebx
c0000628:	75 cd                	jne    c00005f7 <strtok+0x17>
c000062a:	5b                   	pop    ebx
c000062b:	31 c0                	xor    eax,eax
c000062d:	5e                   	pop    esi
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strcpy>:
c0000630:	53                   	push   ebx
c0000631:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000639:	89 c3                	mov    ebx,eax
c000063b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063d:	84 d2                	test   dl,dl
c000063f:	74 1d                	je     c000065e <strcpy+0x2e>
c0000641:	eb 0d                	jmp    c0000650 <strcpy+0x20>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop
c0000650:	83 c1 01             	add    ecx,0x1
c0000653:	88 13                	mov    BYTE PTR [ebx],dl
c0000655:	83 c3 01             	add    ebx,0x1
c0000658:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065a:	84 d2                	test   dl,dl
c000065c:	75 f2                	jne    c0000650 <strcpy+0x20>
c000065e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000661:	5b                   	pop    ebx
c0000662:	c3                   	ret    
c0000663:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000669:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000670 <strncpy>:
c0000670:	57                   	push   edi
c0000671:	56                   	push   esi
c0000672:	53                   	push   ebx
c0000673:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000677:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000067b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000067f:	85 f6                	test   esi,esi
c0000681:	74 44                	je     c00006c7 <strncpy+0x57>
c0000683:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000685:	8d 46 ff             	lea    eax,[esi-0x1]
c0000688:	8d 7a 01             	lea    edi,[edx+0x1]
c000068b:	88 0a                	mov    BYTE PTR [edx],cl
c000068d:	84 c9                	test   cl,cl
c000068f:	74 3f                	je     c00006d0 <strncpy+0x60>
c0000691:	85 c0                	test   eax,eax
c0000693:	74 32                	je     c00006c7 <strncpy+0x57>
c0000695:	8d 4b 02             	lea    ecx,[ebx+0x2]
c0000698:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c000069b:	8d 46 fe             	lea    eax,[esi-0x2]
c000069e:	8d 7a 02             	lea    edi,[edx+0x2]
c00006a1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006a4:	84 db                	test   bl,bl
c00006a6:	75 1b                	jne    c00006c3 <strncpy+0x53>
c00006a8:	eb 26                	jmp    c00006d0 <strncpy+0x60>
c00006aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b0:	83 c1 01             	add    ecx,0x1
c00006b3:	83 c7 01             	add    edi,0x1
c00006b6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006b9:	83 e8 01             	sub    eax,0x1
c00006bc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006bf:	84 db                	test   bl,bl
c00006c1:	74 0d                	je     c00006d0 <strncpy+0x60>
c00006c3:	85 c0                	test   eax,eax
c00006c5:	75 e9                	jne    c00006b0 <strncpy+0x40>
c00006c7:	5b                   	pop    ebx
c00006c8:	89 d0                	mov    eax,edx
c00006ca:	5e                   	pop    esi
c00006cb:	5f                   	pop    edi
c00006cc:	c3                   	ret    
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	85 c0                	test   eax,eax
c00006d2:	74 f3                	je     c00006c7 <strncpy+0x57>
c00006d4:	89 c3                	mov    ebx,eax
c00006d6:	83 f8 04             	cmp    eax,0x4
c00006d9:	73 25                	jae    c0000700 <strncpy+0x90>
c00006db:	f6 c3 02             	test   bl,0x2
c00006de:	74 08                	je     c00006e8 <strncpy+0x78>
c00006e0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006e5:	83 c7 02             	add    edi,0x2
c00006e8:	80 e3 01             	and    bl,0x1
c00006eb:	74 da                	je     c00006c7 <strncpy+0x57>
c00006ed:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000700:	f7 c7 01 00 00 00    	test   edi,0x1
c0000706:	75 14                	jne    c000071c <strncpy+0xac>
c0000708:	f7 c7 02 00 00 00    	test   edi,0x2
c000070e:	75 17                	jne    c0000727 <strncpy+0xb7>
c0000710:	89 d9                	mov    ecx,ebx
c0000712:	c1 e9 02             	shr    ecx,0x2
c0000715:	fc                   	cld    
c0000716:	31 c0                	xor    eax,eax
c0000718:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000071a:	eb bf                	jmp    c00006db <strncpy+0x6b>
c000071c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071f:	83 eb 01             	sub    ebx,0x1
c0000722:	83 c7 01             	add    edi,0x1
c0000725:	eb e1                	jmp    c0000708 <strncpy+0x98>
c0000727:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000072c:	83 eb 02             	sub    ebx,0x2
c000072f:	83 c7 02             	add    edi,0x2
c0000732:	eb dc                	jmp    c0000710 <strncpy+0xa0>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000740 <strcmp>:
c0000740:	57                   	push   edi
c0000741:	56                   	push   esi
c0000742:	53                   	push   ebx
c0000743:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000747:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000074b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000074e:	8a 17                	mov    dl,BYTE PTR [edi]
c0000750:	38 c2                	cmp    dl,al
c0000752:	75 32                	jne    c0000786 <strcmp+0x46>
c0000754:	85 c0                	test   eax,eax
c0000756:	74 28                	je     c0000780 <strcmp+0x40>
c0000758:	b8 01 00 00 00       	mov    eax,0x1
c000075d:	eb 08                	jmp    c0000767 <strcmp+0x27>
c000075f:	90                   	nop
c0000760:	83 c0 01             	add    eax,0x1
c0000763:	85 db                	test   ebx,ebx
c0000765:	74 19                	je     c0000780 <strcmp+0x40>
c0000767:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000076b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000076e:	89 da                	mov    edx,ebx
c0000770:	38 d9                	cmp    cl,bl
c0000772:	74 ec                	je     c0000760 <strcmp+0x20>
c0000774:	5b                   	pop    ebx
c0000775:	0f b6 c2             	movzx  eax,dl
c0000778:	0f b6 c9             	movzx  ecx,cl
c000077b:	5e                   	pop    esi
c000077c:	29 c8                	sub    eax,ecx
c000077e:	5f                   	pop    edi
c000077f:	c3                   	ret    
c0000780:	5b                   	pop    ebx
c0000781:	31 c0                	xor    eax,eax
c0000783:	5e                   	pop    esi
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	89 c1                	mov    ecx,eax
c0000788:	eb ea                	jmp    c0000774 <strcmp+0x34>
c000078a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000790 <strchr>:
c0000790:	53                   	push   ebx
c0000791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000795:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c0000798:	85 db                	test   ebx,ebx
c000079a:	74 22                	je     c00007be <strchr+0x2e>
c000079c:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007a1:	39 d3                	cmp    ebx,edx
c00007a3:	74 1b                	je     c00007c0 <strchr+0x30>
c00007a5:	89 d1                	mov    ecx,edx
c00007a7:	eb 0b                	jmp    c00007b4 <strchr+0x24>
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	39 ca                	cmp    edx,ecx
c00007b2:	74 0c                	je     c00007c0 <strchr+0x30>
c00007b4:	83 c0 01             	add    eax,0x1
c00007b7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ba:	85 d2                	test   edx,edx
c00007bc:	75 f2                	jne    c00007b0 <strchr+0x20>
c00007be:	31 c0                	xor    eax,eax
c00007c0:	5b                   	pop    ebx
c00007c1:	c3                   	ret    
c00007c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007d0 <strncmp>:
c00007d0:	55                   	push   ebp
c00007d1:	57                   	push   edi
c00007d2:	56                   	push   esi
c00007d3:	53                   	push   ebx
c00007d4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007d8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007e0:	85 f6                	test   esi,esi
c00007e2:	74 35                	je     c0000819 <strncmp+0x49>
c00007e4:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007e7:	8a 17                	mov    dl,BYTE PTR [edi]
c00007e9:	89 e9                	mov    ecx,ebp
c00007eb:	38 ca                	cmp    dl,cl
c00007ed:	75 31                	jne    c0000820 <strncmp+0x50>
c00007ef:	8d 47 01             	lea    eax,[edi+0x1]
c00007f2:	85 ed                	test   ebp,ebp
c00007f4:	74 23                	je     c0000819 <strncmp+0x49>
c00007f6:	01 f7                	add    edi,esi
c00007f8:	eb 18                	jmp    c0000812 <strncmp+0x42>
c00007fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000800:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000803:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000805:	89 f2                	mov    edx,esi
c0000807:	38 d1                	cmp    cl,dl
c0000809:	75 15                	jne    c0000820 <strncmp+0x50>
c000080b:	83 c0 01             	add    eax,0x1
c000080e:	85 f6                	test   esi,esi
c0000810:	74 07                	je     c0000819 <strncmp+0x49>
c0000812:	83 c3 01             	add    ebx,0x1
c0000815:	39 c7                	cmp    edi,eax
c0000817:	75 e7                	jne    c0000800 <strncmp+0x30>
c0000819:	5b                   	pop    ebx
c000081a:	31 c0                	xor    eax,eax
c000081c:	5e                   	pop    esi
c000081d:	5f                   	pop    edi
c000081e:	5d                   	pop    ebp
c000081f:	c3                   	ret    
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	0f b6 c2             	movzx  eax,dl
c0000825:	0f b6 c9             	movzx  ecx,cl
c0000828:	5f                   	pop    edi
c0000829:	29 c8                	sub    eax,ecx
c000082b:	5d                   	pop    ebp
c000082c:	c3                   	ret    
c000082d:	8d 76 00             	lea    esi,[esi+0x0]

c0000830 <strcat>:
c0000830:	56                   	push   esi
c0000831:	53                   	push   ebx
c0000832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000836:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083a:	89 c3                	mov    ebx,eax
c000083c:	eb 04                	jmp    c0000842 <strcat+0x12>
c000083e:	66 90                	xchg   ax,ax
c0000840:	89 d3                	mov    ebx,edx
c0000842:	8d 53 01             	lea    edx,[ebx+0x1]
c0000845:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000849:	75 f5                	jne    c0000840 <strcat+0x10>
c000084b:	31 d2                	xor    edx,edx
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000853:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000856:	83 c2 01             	add    edx,0x1
c0000859:	84 c9                	test   cl,cl
c000085b:	75 f3                	jne    c0000850 <strcat+0x20>
c000085d:	5b                   	pop    ebx
c000085e:	5e                   	pop    esi
c000085f:	c3                   	ret    

c0000860 <strncat>:
c0000860:	56                   	push   esi
c0000861:	53                   	push   ebx
c0000862:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000866:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000086a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000086e:	85 f6                	test   esi,esi
c0000870:	74 32                	je     c00008a4 <strncat+0x44>
c0000872:	89 c2                	mov    edx,eax
c0000874:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000087a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000880:	83 c2 01             	add    edx,0x1
c0000883:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000887:	75 f7                	jne    c0000880 <strncat+0x20>
c0000889:	01 ce                	add    esi,ecx
c000088b:	eb 0a                	jmp    c0000897 <strncat+0x37>
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	39 f1                	cmp    ecx,esi
c0000892:	74 1c                	je     c00008b0 <strncat+0x50>
c0000894:	83 c2 01             	add    edx,0x1
c0000897:	83 c1 01             	add    ecx,0x1
c000089a:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000089d:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a0:	84 db                	test   bl,bl
c00008a2:	75 ec                	jne    c0000890 <strncat+0x30>
c00008a4:	5b                   	pop    ebx
c00008a5:	5e                   	pop    esi
c00008a6:	c3                   	ret    
c00008a7:	89 f6                	mov    esi,esi
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008b3:	5b                   	pop    ebx
c00008b4:	5e                   	pop    esi
c00008b5:	c3                   	ret    
c00008b6:	8d 76 00             	lea    esi,[esi+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <strstr>:
c00008c0:	57                   	push   edi
c00008c1:	56                   	push   esi
c00008c2:	53                   	push   ebx
c00008c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008cb:	57                   	push   edi
c00008cc:	e8 8f fc ff ff       	call   c0000560 <strlen>
c00008d1:	59                   	pop    ecx
c00008d2:	89 c6                	mov    esi,eax
c00008d4:	85 c0                	test   eax,eax
c00008d6:	75 1a                	jne    c00008f2 <strstr+0x32>
c00008d8:	eb 36                	jmp    c0000910 <strstr+0x50>
c00008da:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008e0:	56                   	push   esi
c00008e1:	57                   	push   edi
c00008e2:	53                   	push   ebx
c00008e3:	e8 98 fa ff ff       	call   c0000380 <memcmp>
c00008e8:	83 c4 0c             	add    esp,0xc
c00008eb:	85 c0                	test   eax,eax
c00008ed:	74 21                	je     c0000910 <strstr+0x50>
c00008ef:	83 c3 01             	add    ebx,0x1
c00008f2:	53                   	push   ebx
c00008f3:	e8 68 fc ff ff       	call   c0000560 <strlen>
c00008f8:	5a                   	pop    edx
c00008f9:	39 f0                	cmp    eax,esi
c00008fb:	73 e3                	jae    c00008e0 <strstr+0x20>
c00008fd:	5b                   	pop    ebx
c00008fe:	31 c0                	xor    eax,eax
c0000900:	5e                   	pop    esi
c0000901:	5f                   	pop    edi
c0000902:	c3                   	ret    
c0000903:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	89 d8                	mov    eax,ebx
c0000912:	5b                   	pop    ebx
c0000913:	5e                   	pop    esi
c0000914:	5f                   	pop    edi
c0000915:	c3                   	ret    
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000920 <toupper>:
c0000920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000924:	0f b6 d0             	movzx  edx,al
c0000927:	f6 82 a0 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d60],0x2
c000092e:	74 03                	je     c0000933 <toupper+0x13>
c0000930:	83 e8 20             	sub    eax,0x20
c0000933:	c3                   	ret    
c0000934:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000093a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 a0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d60],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    
c0000954:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000095a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000960 <simple_strtoul>:
c0000960:	55                   	push   ebp
c0000961:	57                   	push   edi
c0000962:	56                   	push   esi
c0000963:	53                   	push   ebx
c0000964:	83 ec 08             	sub    esp,0x8
c0000967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000096b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000096f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000973:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000976:	f6 82 a0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d60],0x8
c000097d:	75 11                	jne    c0000990 <simple_strtoul+0x30>
c000097f:	89 d0                	mov    eax,edx
c0000981:	eb 1e                	jmp    c00009a1 <simple_strtoul+0x41>
c0000983:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	89 d0                	mov    eax,edx
c0000998:	f6 82 a0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d60],0x8
c000099f:	75 ef                	jne    c0000990 <simple_strtoul+0x30>
c00009a1:	0f be c0             	movsx  eax,al
c00009a4:	83 f8 09             	cmp    eax,0x9
c00009a7:	74 e7                	je     c0000990 <simple_strtoul+0x30>
c00009a9:	83 f8 2d             	cmp    eax,0x2d
c00009ac:	0f 84 6e 01 00 00    	je     c0000b20 <simple_strtoul+0x1c0>
c00009b2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009ba:	83 f8 2b             	cmp    eax,0x2b
c00009bd:	0f 84 3d 01 00 00    	je     c0000b00 <simple_strtoul+0x1a0>
c00009c3:	85 ff                	test   edi,edi
c00009c5:	0f 85 d5 00 00 00    	jne    c0000aa0 <simple_strtoul+0x140>
c00009cb:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009ce:	bf 0a 00 00 00       	mov    edi,0xa
c00009d3:	89 d1                	mov    ecx,edx
c00009d5:	83 fa 30             	cmp    edx,0x30
c00009d8:	0f 84 ad 01 00 00    	je     c0000b8b <simple_strtoul+0x22b>
c00009de:	85 d2                	test   edx,edx
c00009e0:	0f 84 7a 01 00 00    	je     c0000b60 <simple_strtoul+0x200>
c00009e6:	31 ed                	xor    ebp,ebp
c00009e8:	31 f6                	xor    esi,esi
c00009ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009f1:	eb 3c                	jmp    c0000a2f <simple_strtoul+0xcf>
c00009f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f9                	cmp    ecx,edi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0x100>
c0000a07:	89 c8                	mov    eax,ecx
c0000a09:	31 d2                	xor    edx,edx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f7                	div    edi
c0000a0f:	39 f0                	cmp    eax,esi
c0000a11:	0f 82 f9 00 00 00    	jb     c0000b10 <simple_strtoul+0x1b0>
c0000a17:	0f af f7             	imul   esi,edi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 ce                	add    esi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0x100>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d60],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0xa0>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 df fe ff ff       	call   c0000920 <toupper>
c0000a41:	0f b6 d0             	movzx  edx,al
c0000a44:	59                   	pop    ecx
c0000a45:	f6 82 a0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d60],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0x100>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f9                	cmp    ecx,edi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0xa7>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000a64:	85 d2                	test   edx,edx
c0000a66:	74 11                	je     c0000a79 <simple_strtoul+0x119>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f0                	or     eax,esi
c0000a6d:	0f 84 cd 00 00 00    	je     c0000b40 <simple_strtoul+0x1e0>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	89 18                	mov    DWORD PTR [eax],ebx
c0000a79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000a7e:	83 fd 01             	cmp    ebp,0x1
c0000a81:	0f 44 f0             	cmove  esi,eax
c0000a84:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a89:	75 02                	jne    c0000a8d <simple_strtoul+0x12d>
c0000a8b:	f7 de                	neg    esi
c0000a8d:	83 c4 08             	add    esp,0x8
c0000a90:	89 f0                	mov    eax,esi
c0000a92:	5b                   	pop    ebx
c0000a93:	5e                   	pop    esi
c0000a94:	5f                   	pop    edi
c0000a95:	5d                   	pop    ebp
c0000a96:	c3                   	ret    
c0000a97:	89 f6                	mov    esi,esi
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000aa3:	83 f8 22             	cmp    eax,0x22
c0000aa6:	0f 87 b4 00 00 00    	ja     c0000b60 <simple_strtoul+0x200>
c0000aac:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000aae:	83 ff 08             	cmp    edi,0x8
c0000ab1:	0f 84 ff 00 00 00    	je     c0000bb6 <simple_strtoul+0x256>
c0000ab7:	83 ff 10             	cmp    edi,0x10
c0000aba:	0f 85 33 01 00 00    	jne    c0000bf3 <simple_strtoul+0x293>
c0000ac0:	0f be d1             	movsx  edx,cl
c0000ac3:	bf 10 00 00 00       	mov    edi,0x10
c0000ac8:	83 fa 30             	cmp    edx,0x30
c0000acb:	0f 85 0d ff ff ff    	jne    c00009de <simple_strtoul+0x7e>
c0000ad1:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ad5:	52                   	push   edx
c0000ad6:	89 d1                	mov    ecx,edx
c0000ad8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000adc:	e8 5f fe ff ff       	call   c0000940 <tolower>
c0000ae1:	5e                   	pop    esi
c0000ae2:	83 f8 78             	cmp    eax,0x78
c0000ae5:	0f 84 fa 00 00 00    	je     c0000be5 <simple_strtoul+0x285>
c0000aeb:	83 c3 01             	add    ebx,0x1
c0000aee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000af1:	e9 e8 fe ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000af6:	8d 76 00             	lea    esi,[esi+0x0]
c0000af9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b00:	83 c3 01             	add    ebx,0x1
c0000b03:	85 ff                	test   edi,edi
c0000b05:	75 99                	jne    c0000aa0 <simple_strtoul+0x140>
c0000b07:	e9 bf fe ff ff       	jmp    c00009cb <simple_strtoul+0x6b>
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	bd 01 00 00 00       	mov    ebp,0x1
c0000b15:	31 f6                	xor    esi,esi
c0000b17:	e9 07 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xc3>
c0000b1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b20:	83 c3 01             	add    ebx,0x1
c0000b23:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b2b:	85 ff                	test   edi,edi
c0000b2d:	0f 85 6d ff ff ff    	jne    c0000aa0 <simple_strtoul+0x140>
c0000b33:	e9 93 fe ff ff       	jmp    c00009cb <simple_strtoul+0x6b>
c0000b38:	90                   	nop
c0000b39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000b40:	85 db                	test   ebx,ebx
c0000b42:	74 39                	je     c0000b7d <simple_strtoul+0x21d>
c0000b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b48:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b4c:	31 f6                	xor    esi,esi
c0000b4e:	89 38                	mov    DWORD PTR [eax],edi
c0000b50:	e9 24 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x119>
c0000b55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b64:	85 c0                	test   eax,eax
c0000b66:	74 1c                	je     c0000b84 <simple_strtoul+0x224>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	85 db                	test   ebx,ebx
c0000b6e:	74 68                	je     c0000bd8 <simple_strtoul+0x278>
c0000b70:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b74:	31 f6                	xor    esi,esi
c0000b76:	89 38                	mov    DWORD PTR [eax],edi
c0000b78:	e9 07 ff ff ff       	jmp    c0000a84 <simple_strtoul+0x124>
c0000b7d:	31 f6                	xor    esi,esi
c0000b7f:	e9 ef fe ff ff       	jmp    c0000a73 <simple_strtoul+0x113>
c0000b84:	31 f6                	xor    esi,esi
c0000b86:	e9 f9 fe ff ff       	jmp    c0000a84 <simple_strtoul+0x124>
c0000b8b:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b8f:	52                   	push   edx
c0000b90:	89 d1                	mov    ecx,edx
c0000b92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b96:	e8 a5 fd ff ff       	call   c0000940 <tolower>
c0000b9b:	5f                   	pop    edi
c0000b9c:	83 f8 78             	cmp    eax,0x78
c0000b9f:	74 2c                	je     c0000bcd <simple_strtoul+0x26d>
c0000ba1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000ba4:	83 c3 01             	add    ebx,0x1
c0000ba7:	83 fa 30             	cmp    edx,0x30
c0000baa:	74 16                	je     c0000bc2 <simple_strtoul+0x262>
c0000bac:	bf 08 00 00 00       	mov    edi,0x8
c0000bb1:	e9 28 fe ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000bb6:	0f be d1             	movsx  edx,cl
c0000bb9:	83 fa 30             	cmp    edx,0x30
c0000bbc:	0f 85 1c fe ff ff    	jne    c00009de <simple_strtoul+0x7e>
c0000bc2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000bc6:	83 c3 01             	add    ebx,0x1
c0000bc9:	89 d1                	mov    ecx,edx
c0000bcb:	eb df                	jmp    c0000bac <simple_strtoul+0x24c>
c0000bcd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bd0:	83 c3 02             	add    ebx,0x2
c0000bd3:	e9 e8 fe ff ff       	jmp    c0000ac0 <simple_strtoul+0x160>
c0000bd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bde:	31 f6                	xor    esi,esi
c0000be0:	e9 9f fe ff ff       	jmp    c0000a84 <simple_strtoul+0x124>
c0000be5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000be9:	83 c3 02             	add    ebx,0x2
c0000bec:	89 d1                	mov    ecx,edx
c0000bee:	e9 eb fd ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000bf3:	0f be d1             	movsx  edx,cl
c0000bf6:	e9 e3 fd ff ff       	jmp    c00009de <simple_strtoul+0x7e>

c0000bfb <largebin_index>:
c0000bfb:	89 c2                	mov    edx,eax
c0000bfd:	c1 ea 08             	shr    edx,0x8
c0000c00:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c06:	77 10                	ja     c0000c18 <largebin_index+0x1d>
c0000c08:	0f bd d2             	bsr    edx,edx
c0000c0b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c0e:	d3 e8                	shr    eax,cl
c0000c10:	83 e0 03             	and    eax,0x3
c0000c13:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c17:	c3                   	ret    
c0000c18:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c1d:	c3                   	ret    

c0000c1e <malloc_init_state>:
c0000c1e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c21:	53                   	push   ebx
c0000c22:	89 d1                	mov    ecx,edx
c0000c24:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c2a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c2d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c30:	83 c2 08             	add    edx,0x8
c0000c33:	39 da                	cmp    edx,ebx
c0000c35:	75 f3                	jne    c0000c2a <malloc_init_state+0xc>
c0000c37:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c39:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c43:	83 e2 03             	and    edx,0x3
c0000c46:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c50:	83 ca 48             	or     edx,0x48
c0000c53:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c5d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c67:	89 10                	mov    DWORD PTR [eax],edx
c0000c69:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c70:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c73:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c7d:	5b                   	pop    ebx
c0000c7e:	c3                   	ret    

c0000c7f <malloc_consolidate>:
c0000c7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c81:	85 d2                	test   edx,edx
c0000c83:	0f 84 d8 00 00 00    	je     c0000d61 <malloc_consolidate+0xe2>
c0000c89:	55                   	push   ebp
c0000c8a:	83 e2 fd             	and    edx,0xfffffffd
c0000c8d:	57                   	push   edi
c0000c8e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c91:	56                   	push   esi
c0000c92:	89 c5                	mov    ebp,eax
c0000c94:	53                   	push   ebx
c0000c95:	83 ec 10             	sub    esp,0x10
c0000c98:	89 10                	mov    DWORD PTR [eax],edx
c0000c9a:	c1 ea 03             	shr    edx,0x3
c0000c9d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ca1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ca5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ca9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cac:	85 d2                	test   edx,edx
c0000cae:	0f 84 98 00 00 00    	je     c0000d4c <malloc_consolidate+0xcd>
c0000cb4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cbb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cbe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cc5:	89 f9                	mov    ecx,edi
c0000cc7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cca:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ccd:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cd0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cd3:	83 e7 01             	and    edi,0x1
c0000cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cd9:	75 14                	jne    c0000cef <malloc_consolidate+0x70>
c0000cdb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cdd:	29 fa                	sub    edx,edi
c0000cdf:	01 f9                	add    ecx,edi
c0000ce1:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ce4:	89 fb                	mov    ebx,edi
c0000ce6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ce9:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cec:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cef:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cf2:	74 40                	je     c0000d34 <malloc_consolidate+0xb5>
c0000cf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000cf7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000cfa:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000cfe:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	75 0e                	jne    c0000d14 <malloc_consolidate+0x95>
c0000d06:	01 d9                	add    ecx,ebx
c0000d08:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d0b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d0e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d11:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d14:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d17:	89 ce                	mov    esi,ecx
c0000d19:	83 ce 01             	or     esi,0x1
c0000d1c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d1f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d22:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d25:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d29:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d2c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d2f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d32:	eb 0c                	jmp    c0000d40 <malloc_consolidate+0xc1>
c0000d34:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d37:	83 c9 01             	or     ecx,0x1
c0000d3a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d3d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d44:	85 d2                	test   edx,edx
c0000d46:	0f 85 6f ff ff ff    	jne    c0000cbb <malloc_consolidate+0x3c>
c0000d4c:	83 c5 04             	add    ebp,0x4
c0000d4f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d53:	0f 85 50 ff ff ff    	jne    c0000ca9 <malloc_consolidate+0x2a>
c0000d59:	83 c4 10             	add    esp,0x10
c0000d5c:	5b                   	pop    ebx
c0000d5d:	5e                   	pop    esi
c0000d5e:	5f                   	pop    edi
c0000d5f:	5d                   	pop    ebp
c0000d60:	c3                   	ret    
c0000d61:	e9 b8 fe ff ff       	jmp    c0000c1e <malloc_init_state>

c0000d66 <dlfree>:
c0000d66:	57                   	push   edi
c0000d67:	56                   	push   esi
c0000d68:	53                   	push   ebx
c0000d69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d6d:	85 db                	test   ebx,ebx
c0000d6f:	0f 84 e2 00 00 00    	je     c0000e57 <dlfree+0xf1>
c0000d75:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d78:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d7e:	89 f0                	mov    eax,esi
c0000d80:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d83:	83 e0 fc             	and    eax,0xfffffffc
c0000d86:	39 c1                	cmp    ecx,eax
c0000d88:	72 24                	jb     c0000dae <dlfree+0x48>
c0000d8a:	c1 e8 03             	shr    eax,0x3
c0000d8d:	83 c9 03             	or     ecx,0x3
c0000d90:	83 e8 02             	sub    eax,0x2
c0000d93:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d99:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000da0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000da2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000da9:	e9 a9 00 00 00       	jmp    c0000e57 <dlfree+0xf1>
c0000dae:	83 e6 02             	and    esi,0x2
c0000db1:	0f 85 a0 00 00 00    	jne    c0000e57 <dlfree+0xf1>
c0000db7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dba:	83 c9 01             	or     ecx,0x1
c0000dbd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000dc3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000dc6:	83 e1 fc             	and    ecx,0xfffffffc
c0000dc9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dcd:	75 13                	jne    c0000de2 <dlfree+0x7c>
c0000dcf:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dd2:	29 da                	sub    edx,ebx
c0000dd4:	01 d8                	add    eax,ebx
c0000dd6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dd9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000ddc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ddf:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000de2:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000de8:	74 40                	je     c0000e2a <dlfree+0xc4>
c0000dea:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000dee:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000df1:	80 e3 01             	and    bl,0x1
c0000df4:	75 0e                	jne    c0000e04 <dlfree+0x9e>
c0000df6:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000df9:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000dfc:	01 c8                	add    eax,ecx
c0000dfe:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e01:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e04:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e0a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e11:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e14:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e1a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e1d:	89 c1                	mov    ecx,eax
c0000e1f:	83 c9 01             	or     ecx,0x1
c0000e22:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e25:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e28:	eb 10                	jmp    c0000e3a <dlfree+0xd4>
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 c1                	mov    ecx,eax
c0000e2e:	83 c9 01             	or     ecx,0x1
c0000e31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e34:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e3a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e3f:	76 16                	jbe    c0000e57 <dlfree+0xf1>
c0000e41:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e48:	74 0d                	je     c0000e57 <dlfree+0xf1>
c0000e4a:	5b                   	pop    ebx
c0000e4b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e50:	5e                   	pop    esi
c0000e51:	5f                   	pop    edi
c0000e52:	e9 28 fe ff ff       	jmp    c0000c7f <malloc_consolidate>
c0000e57:	5b                   	pop    ebx
c0000e58:	5e                   	pop    esi
c0000e59:	5f                   	pop    edi
c0000e5a:	c3                   	ret    

c0000e5b <sYSMALLOc>:
c0000e5b:	55                   	push   ebp
c0000e5c:	57                   	push   edi
c0000e5d:	56                   	push   esi
c0000e5e:	53                   	push   ebx
c0000e5f:	89 d3                	mov    ebx,edx
c0000e61:	83 ec 2c             	sub    esp,0x2c
c0000e64:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e6a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e71:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e78:	74 1f                	je     c0000e99 <sYSMALLOc+0x3e>
c0000e7a:	89 d0                	mov    eax,edx
c0000e7c:	e8 fe fd ff ff       	call   c0000c7f <malloc_consolidate>
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000e88:	83 e8 07             	sub    eax,0x7
c0000e8b:	50                   	push   eax
c0000e8c:	e8 33 02 00 00       	call   c00010c4 <dlmalloc>
c0000e91:	83 c4 10             	add    esp,0x10
c0000e94:	e9 23 02 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0000e99:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ea0:	83 c0 10             	add    eax,0x10
c0000ea3:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ea9:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000eac:	01 c2                	add    edx,eax
c0000eae:	83 e5 fc             	and    ebp,0xfffffffc
c0000eb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000eb5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ebc:	74 02                	je     c0000ec0 <sYSMALLOc+0x65>
c0000ebe:	29 ea                	sub    edx,ebp
c0000ec0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ec4:	f7 d9                	neg    ecx
c0000ec6:	21 ca                	and    edx,ecx
c0000ec8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ed0:	7f 07                	jg     c0000ed9 <sYSMALLOc+0x7e>
c0000ed2:	31 c0                	xor    eax,eax
c0000ed4:	e9 e3 01 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0000ed9:	83 ec 0c             	sub    esp,0xc
c0000edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ee0:	e8 77 6a 00 00       	call   c000795c <sbrk>
c0000ee5:	83 c4 10             	add    esp,0x10
c0000ee8:	89 c6                	mov    esi,eax
c0000eea:	83 f8 ff             	cmp    eax,0xffffffff
c0000eed:	74 e3                	je     c0000ed2 <sYSMALLOc+0x77>
c0000eef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ef3:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000ef6:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000efc:	39 c2                	cmp    edx,eax
c0000efe:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f04:	75 11                	jne    c0000f17 <sYSMALLOc+0xbc>
c0000f06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f0a:	01 e8                	add    eax,ebp
c0000f0c:	83 c8 01             	or     eax,0x1
c0000f0f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f12:	e9 93 00 00 00       	jmp    c0000faa <sYSMALLOc+0x14f>
c0000f17:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f1d:	a8 01                	test   al,0x1
c0000f1f:	0f 84 73 01 00 00    	je     c0001098 <sYSMALLOc+0x23d>
c0000f25:	85 ed                	test   ebp,ebp
c0000f27:	74 12                	je     c0000f3b <sYSMALLOc+0xe0>
c0000f29:	39 f2                	cmp    edx,esi
c0000f2b:	76 0e                	jbe    c0000f3b <sYSMALLOc+0xe0>
c0000f2d:	83 e0 fe             	and    eax,0xfffffffe
c0000f30:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f36:	e9 5d 01 00 00       	jmp    c0001098 <sYSMALLOc+0x23d>
c0000f3b:	85 ed                	test   ebp,ebp
c0000f3d:	74 0c                	je     c0000f4b <sYSMALLOc+0xf0>
c0000f3f:	89 f0                	mov    eax,esi
c0000f41:	29 d0                	sub    eax,edx
c0000f43:	01 c1                	add    ecx,eax
c0000f45:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f4b:	89 f2                	mov    edx,esi
c0000f4d:	83 e2 07             	and    edx,0x7
c0000f50:	0f 84 b1 00 00 00    	je     c0001007 <sYSMALLOc+0x1ac>
c0000f56:	b8 08 00 00 00       	mov    eax,0x8
c0000f5b:	29 d0                	sub    eax,edx
c0000f5d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f68:	01 e8                	add    eax,ebp
c0000f6a:	83 ec 0c             	sub    esp,0xc
c0000f6d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f74:	01 f2                	add    edx,esi
c0000f76:	01 d1                	add    ecx,edx
c0000f78:	29 d0                	sub    eax,edx
c0000f7a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f7e:	01 c1                	add    ecx,eax
c0000f80:	51                   	push   ecx
c0000f81:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f85:	e8 d2 69 00 00       	call   c000795c <sbrk>
c0000f8a:	83 c4 10             	add    esp,0x10
c0000f8d:	83 f8 ff             	cmp    eax,0xffffffff
c0000f90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000f94:	75 7c                	jne    c0001012 <sYSMALLOc+0x1b7>
c0000f96:	83 ec 0c             	sub    esp,0xc
c0000f99:	6a 00                	push   0x0
c0000f9b:	e8 bc 69 00 00       	call   c000795c <sbrk>
c0000fa0:	83 c4 10             	add    esp,0x10
c0000fa3:	31 c9                	xor    ecx,ecx
c0000fa5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fa8:	75 7e                	jne    c0001028 <sYSMALLOc+0x1cd>
c0000faa:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fb0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fb6:	73 06                	jae    c0000fbe <sYSMALLOc+0x163>
c0000fb8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fbe:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fc4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fca:	73 06                	jae    c0000fd2 <sYSMALLOc+0x177>
c0000fcc:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fd2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fd5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fd8:	83 e2 fc             	and    edx,0xfffffffc
c0000fdb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fdf:	0f 87 ed fe ff ff    	ja     c0000ed2 <sYSMALLOc+0x77>
c0000fe5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000fe9:	29 fa                	sub    edx,edi
c0000feb:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fee:	83 ca 01             	or     edx,0x1
c0000ff1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ff4:	89 fb                	mov    ebx,edi
c0000ff6:	83 cb 01             	or     ebx,0x1
c0000ff9:	83 c0 08             	add    eax,0x8
c0000ffc:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fff:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001002:	e9 b5 00 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0001007:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000100b:	31 c0                	xor    eax,eax
c000100d:	e9 52 ff ff ff       	jmp    c0000f64 <sYSMALLOc+0x109>
c0001012:	39 c6                	cmp    esi,eax
c0001014:	76 12                	jbe    c0001028 <sYSMALLOc+0x1cd>
c0001016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000101a:	01 f0                	add    eax,esi
c000101c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001023:	e9 7b ff ff ff       	jmp    c0000fa3 <sYSMALLOc+0x148>
c0001028:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000102c:	29 f0                	sub    eax,esi
c000102e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001031:	01 c8                	add    eax,ecx
c0001033:	83 c8 01             	or     eax,0x1
c0001036:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001039:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000103f:	85 ed                	test   ebp,ebp
c0001041:	0f 84 63 ff ff ff    	je     c0000faa <sYSMALLOc+0x14f>
c0001047:	8d 45 f4             	lea    eax,[ebp-0xc]
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	0f 86 3c ff ff ff    	jbe    c0000faa <sYSMALLOc+0x14f>
c000106e:	83 ec 0c             	sub    esp,0xc
c0001071:	83 c7 08             	add    edi,0x8
c0001074:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000107a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001084:	57                   	push   edi
c0001085:	e8 dc fc ff ff       	call   c0000d66 <dlfree>
c000108a:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001090:	83 c4 10             	add    esp,0x10
c0001093:	e9 12 ff ff ff       	jmp    c0000faa <sYSMALLOc+0x14f>
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	6a 00                	push   0x0
c000109d:	e8 ba 68 00 00       	call   c000795c <sbrk>
c00010a2:	89 c2                	mov    edx,eax
c00010a4:	29 f2                	sub    edx,esi
c00010a6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010b3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b7:	e9 e7 fe ff ff       	jmp    c0000fa3 <sYSMALLOc+0x148>
c00010bc:	83 c4 2c             	add    esp,0x2c
c00010bf:	5b                   	pop    ebx
c00010c0:	5e                   	pop    esi
c00010c1:	5f                   	pop    edi
c00010c2:	5d                   	pop    ebp
c00010c3:	c3                   	ret    

c00010c4 <dlmalloc>:
c00010c4:	55                   	push   ebp
c00010c5:	57                   	push   edi
c00010c6:	56                   	push   esi
c00010c7:	53                   	push   ebx
c00010c8:	83 ec 1c             	sub    esp,0x1c
c00010cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010cf:	83 f8 df             	cmp    eax,0xffffffdf
c00010d2:	0f 87 70 03 00 00    	ja     c0001448 <dlmalloc+0x384>
c00010d8:	83 c0 0b             	add    eax,0xb
c00010db:	be 10 00 00 00       	mov    esi,0x10
c00010e0:	83 f8 0f             	cmp    eax,0xf
c00010e3:	76 05                	jbe    c00010ea <dlmalloc+0x26>
c00010e5:	83 e0 f8             	and    eax,0xfffffff8
c00010e8:	89 c6                	mov    esi,eax
c00010ea:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00010f6:	75 17                	jne    c000110f <dlmalloc+0x4b>
c00010f8:	85 ff                	test   edi,edi
c00010fa:	0f 85 05 03 00 00    	jne    c0001405 <dlmalloc+0x341>
c0001100:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001105:	e8 75 fb ff ff       	call   c0000c7f <malloc_consolidate>
c000110a:	e9 f6 02 00 00       	jmp    c0001405 <dlmalloc+0x341>
c000110f:	39 f7                	cmp    edi,esi
c0001111:	72 1f                	jb     c0001132 <dlmalloc+0x6e>
c0001113:	89 f2                	mov    edx,esi
c0001115:	c1 ea 03             	shr    edx,0x3
c0001118:	83 ea 02             	sub    edx,0x2
c000111b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001122:	85 c0                	test   eax,eax
c0001124:	74 0c                	je     c0001132 <dlmalloc+0x6e>
c0001126:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001129:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001130:	eb 30                	jmp    c0001162 <dlmalloc+0x9e>
c0001132:	89 f0                	mov    eax,esi
c0001134:	81 fe ff 00 00 00    	cmp    esi,0xff
c000113a:	77 2e                	ja     c000116a <dlmalloc+0xa6>
c000113c:	c1 e8 03             	shr    eax,0x3
c000113f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001143:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000114a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000114d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001150:	39 c3                	cmp    ebx,eax
c0001152:	74 2e                	je     c0001182 <dlmalloc+0xbe>
c0001154:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001157:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000115c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000115f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001162:	83 c0 08             	add    eax,0x8
c0001165:	e9 e0 02 00 00       	jmp    c000144a <dlmalloc+0x386>
c000116a:	e8 8c fa ff ff       	call   c0000bfb <largebin_index>
c000116f:	83 e7 02             	and    edi,0x2
c0001172:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001176:	74 0a                	je     c0001182 <dlmalloc+0xbe>
c0001178:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000117d:	e8 fd fa ff ff       	call   c0000c7f <malloc_consolidate>
c0001182:	8d 46 10             	lea    eax,[esi+0x10]
c0001185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001189:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c000118f:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c0001195:	0f 84 13 01 00 00    	je     c00012ae <dlmalloc+0x1ea>
c000119b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000119e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011a1:	83 e7 fc             	and    edi,0xfffffffc
c00011a4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011aa:	77 4c                	ja     c00011f8 <dlmalloc+0x134>
c00011ac:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011b1:	75 45                	jne    c00011f8 <dlmalloc+0x134>
c00011b3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011b9:	75 3d                	jne    c00011f8 <dlmalloc+0x134>
c00011bb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011bf:	73 37                	jae    c00011f8 <dlmalloc+0x134>
c00011c1:	89 fa                	mov    edx,edi
c00011c3:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011c6:	29 f2                	sub    edx,esi
c00011c8:	83 ce 01             	or     esi,0x1
c00011cb:	89 d1                	mov    ecx,edx
c00011cd:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011d2:	83 c9 01             	or     ecx,0x1
c00011d5:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011da:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011df:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011e6:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011ed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011f0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011f3:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011f6:	eb 15                	jmp    c000120d <dlmalloc+0x149>
c00011f8:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011fd:	39 fe                	cmp    esi,edi
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	75 0d                	jne    c0001215 <dlmalloc+0x151>
c0001208:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000120d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001210:	e9 35 02 00 00       	jmp    c000144a <dlmalloc+0x386>
c0001215:	89 f8                	mov    eax,edi
c0001217:	81 ff ff 00 00 00    	cmp    edi,0xff
c000121d:	77 19                	ja     c0001238 <dlmalloc+0x174>
c000121f:	c1 e8 03             	shr    eax,0x3
c0001222:	8d 14 00             	lea    edx,[eax+eax*1]
c0001225:	83 c2 0d             	add    edx,0xd
c0001228:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000122f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001236:	eb 46                	jmp    c000127e <dlmalloc+0x1ba>
c0001238:	e8 be f9 ff ff       	call   c0000bfb <largebin_index>
c000123d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001240:	83 c2 0d             	add    edx,0xd
c0001243:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000124a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001251:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001254:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001258:	89 d5                	mov    ebp,edx
c000125a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000125e:	74 1e                	je     c000127e <dlmalloc+0x1ba>
c0001260:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001263:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001266:	77 12                	ja     c000127a <dlmalloc+0x1b6>
c0001268:	83 cf 01             	or     edi,0x1
c000126b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000126e:	76 05                	jbe    c0001275 <dlmalloc+0x1b1>
c0001270:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001273:	eb f6                	jmp    c000126b <dlmalloc+0x1a7>
c0001275:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001278:	eb 04                	jmp    c000127e <dlmalloc+0x1ba>
c000127a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000127e:	89 c7                	mov    edi,eax
c0001280:	88 c1                	mov    cl,al
c0001282:	c1 ff 05             	sar    edi,0x5
c0001285:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001289:	bf 01 00 00 00       	mov    edi,0x1
c000128e:	d3 e7                	shl    edi,cl
c0001290:	89 f8                	mov    eax,edi
c0001292:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001296:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c000129d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012a0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012a3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012a6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012a9:	e9 db fe ff ff       	jmp    c0001189 <dlmalloc+0xc5>
c00012ae:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012b4:	76 78                	jbe    c000132e <dlmalloc+0x26a>
c00012b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012ba:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012c1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012c7:	39 ca                	cmp    edx,ecx
c00012c9:	74 63                	je     c000132e <dlmalloc+0x26a>
c00012cb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ce:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012d1:	83 e3 fc             	and    ebx,0xfffffffc
c00012d4:	39 de                	cmp    esi,ebx
c00012d6:	77 52                	ja     c000132a <dlmalloc+0x266>
c00012d8:	89 df                	mov    edi,ebx
c00012da:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012dd:	29 f7                	sub    edi,esi
c00012df:	01 d3                	add    ebx,edx
c00012e1:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012e4:	83 ff 0f             	cmp    edi,0xf
c00012e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ea:	8d 42 08             	lea    eax,[edx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x234>
c00012ef:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012f3:	e9 52 01 00 00       	jmp    c000144a <dlmalloc+0x386>
c00012f8:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012fb:	83 ce 01             	or     esi,0x1
c00012fe:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001304:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000130a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001311:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001318:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000131b:	89 fa                	mov    edx,edi
c000131d:	83 ca 01             	or     edx,0x1
c0001320:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001323:	89 3b                	mov    DWORD PTR [ebx],edi
c0001325:	e9 20 01 00 00       	jmp    c000144a <dlmalloc+0x386>
c000132a:	89 c2                	mov    edx,eax
c000132c:	eb 99                	jmp    c00012c7 <dlmalloc+0x203>
c000132e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001332:	b8 01 00 00 00       	mov    eax,0x1
c0001337:	41                   	inc    ecx
c0001338:	89 cb                	mov    ebx,ecx
c000133a:	c1 eb 05             	shr    ebx,0x5
c000133d:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001344:	d3 e0                	shl    eax,cl
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	39 f8                	cmp    eax,edi
c000134f:	77 04                	ja     c0001355 <dlmalloc+0x291>
c0001351:	85 c0                	test   eax,eax
c0001353:	75 26                	jne    c000137b <dlmalloc+0x2b7>
c0001355:	43                   	inc    ebx
c0001356:	83 fb 02             	cmp    ebx,0x2
c0001359:	0f 87 a6 00 00 00    	ja     c0001405 <dlmalloc+0x341>
c000135f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001366:	85 ff                	test   edi,edi
c0001368:	74 eb                	je     c0001355 <dlmalloc+0x291>
c000136a:	89 d8                	mov    eax,ebx
c000136c:	c1 e0 06             	shl    eax,0x6
c000136f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001376:	b8 01 00 00 00       	mov    eax,0x1
c000137b:	85 f8                	test   eax,edi
c000137d:	75 07                	jne    c0001386 <dlmalloc+0x2c2>
c000137f:	83 c2 08             	add    edx,0x8
c0001382:	01 c0                	add    eax,eax
c0001384:	eb f5                	jmp    c000137b <dlmalloc+0x2b7>
c0001386:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001389:	39 ca                	cmp    edx,ecx
c000138b:	75 14                	jne    c00013a1 <dlmalloc+0x2dd>
c000138d:	89 c1                	mov    ecx,eax
c000138f:	83 c2 08             	add    edx,0x8
c0001392:	f7 d1                	not    ecx
c0001394:	21 cf                	and    edi,ecx
c0001396:	01 c0                	add    eax,eax
c0001398:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c000139f:	eb ac                	jmp    c000134d <dlmalloc+0x289>
c00013a1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013a4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013a7:	83 e0 fc             	and    eax,0xfffffffc
c00013aa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013ad:	89 c3                	mov    ebx,eax
c00013af:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013b2:	29 f3                	sub    ebx,esi
c00013b4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013b7:	83 fb 0f             	cmp    ebx,0xf
c00013ba:	8d 41 08             	lea    eax,[ecx+0x8]
c00013bd:	77 09                	ja     c00013c8 <dlmalloc+0x304>
c00013bf:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013c3:	e9 82 00 00 00       	jmp    c000144a <dlmalloc+0x386>
c00013c8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013cb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013d1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013d7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013dd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013e4:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013eb:	77 06                	ja     c00013f3 <dlmalloc+0x32f>
c00013ed:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013f3:	83 ce 01             	or     esi,0x1
c00013f6:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013f9:	89 d9                	mov    ecx,ebx
c00013fb:	83 c9 01             	or     ecx,0x1
c00013fe:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001401:	89 1a                	mov    DWORD PTR [edx],ebx
c0001403:	eb 45                	jmp    c000144a <dlmalloc+0x386>
c0001405:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000140a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000140d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001410:	83 e2 fc             	and    edx,0xfffffffc
c0001413:	39 d1                	cmp    ecx,edx
c0001415:	77 1e                	ja     c0001435 <dlmalloc+0x371>
c0001417:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000141a:	89 f3                	mov    ebx,esi
c000141c:	29 f2                	sub    edx,esi
c000141e:	83 cb 01             	or     ebx,0x1
c0001421:	83 ca 01             	or     edx,0x1
c0001424:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c000142a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000142d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001430:	e9 2d fd ff ff       	jmp    c0001162 <dlmalloc+0x9e>
c0001435:	83 c4 1c             	add    esp,0x1c
c0001438:	89 f0                	mov    eax,esi
c000143a:	ba 00 41 02 c0       	mov    edx,0xc0024100
c000143f:	5b                   	pop    ebx
c0001440:	5e                   	pop    esi
c0001441:	5f                   	pop    edi
c0001442:	5d                   	pop    ebp
c0001443:	e9 13 fa ff ff       	jmp    c0000e5b <sYSMALLOc>
c0001448:	31 c0                	xor    eax,eax
c000144a:	83 c4 1c             	add    esp,0x1c
c000144d:	5b                   	pop    ebx
c000144e:	5e                   	pop    esi
c000144f:	5f                   	pop    edi
c0001450:	5d                   	pop    ebp
c0001451:	c3                   	ret    

c0001452 <iALLOc>:
c0001452:	55                   	push   ebp
c0001453:	89 c5                	mov    ebp,eax
c0001455:	57                   	push   edi
c0001456:	56                   	push   esi
c0001457:	53                   	push   ebx
c0001458:	83 ec 2c             	sub    esp,0x2c
c000145b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001462:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001466:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000146a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000146e:	75 12                	jne    c0001482 <iALLOc+0x30>
c0001470:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001475:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001479:	e8 01 f8 ff ff       	call   c0000c7f <malloc_consolidate>
c000147e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001482:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001487:	74 12                	je     c000149b <iALLOc+0x49>
c0001489:	85 ed                	test   ebp,ebp
c000148b:	0f 84 64 01 00 00    	je     c00015f5 <iALLOc+0x1a3>
c0001491:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001499:	eb 33                	jmp    c00014ce <iALLOc+0x7c>
c000149b:	85 ed                	test   ebp,ebp
c000149d:	75 14                	jne    c00014b3 <iALLOc+0x61>
c000149f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014a7:	83 c4 2c             	add    esp,0x2c
c00014aa:	5b                   	pop    ebx
c00014ab:	5e                   	pop    esi
c00014ac:	5f                   	pop    edi
c00014ad:	5d                   	pop    ebp
c00014ae:	e9 11 fc ff ff       	jmp    c00010c4 <dlmalloc>
c00014b3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014ba:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014c2:	83 f8 0f             	cmp    eax,0xf
c00014c5:	76 07                	jbe    c00014ce <iALLOc+0x7c>
c00014c7:	83 e0 f8             	and    eax,0xfffffff8
c00014ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ce:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014d3:	75 09                	jne    c00014de <iALLOc+0x8c>
c00014d5:	89 d0                	mov    eax,edx
c00014d7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014da:	31 f6                	xor    esi,esi
c00014dc:	eb 3b                	jmp    c0001519 <iALLOc+0xc7>
c00014de:	8b 02                	mov    eax,DWORD PTR [edx]
c00014e0:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014e8:	83 c0 0b             	add    eax,0xb
c00014eb:	83 f8 0f             	cmp    eax,0xf
c00014ee:	76 07                	jbe    c00014f7 <iALLOc+0xa5>
c00014f0:	83 e0 f8             	and    eax,0xfffffff8
c00014f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014fb:	0f af f5             	imul   esi,ebp
c00014fe:	eb 25                	jmp    c0001525 <iALLOc+0xd3>
c0001500:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001502:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001505:	bb 10 00 00 00       	mov    ebx,0x10
c000150a:	83 f9 0f             	cmp    ecx,0xf
c000150d:	76 05                	jbe    c0001514 <iALLOc+0xc2>
c000150f:	83 e1 f8             	and    ecx,0xfffffff8
c0001512:	89 cb                	mov    ebx,ecx
c0001514:	01 de                	add    esi,ebx
c0001516:	83 c0 04             	add    eax,0x4
c0001519:	39 c7                	cmp    edi,eax
c000151b:	75 e3                	jne    c0001500 <iALLOc+0xae>
c000151d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001525:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001529:	83 ec 0c             	sub    esp,0xc
c000152c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001532:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000153c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001540:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001544:	50                   	push   eax
c0001545:	e8 7a fb ff ff       	call   c00010c4 <dlmalloc>
c000154a:	83 c4 10             	add    esp,0x10
c000154d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001553:	85 c0                	test   eax,eax
c0001555:	0f 84 92 00 00 00    	je     c00015ed <iALLOc+0x19b>
c000155b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000155e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001561:	83 e3 fc             	and    ebx,0xfffffffc
c0001564:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001568:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000156d:	74 1e                	je     c000158d <iALLOc+0x13b>
c000156f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001573:	89 d9                	mov    ecx,ebx
c0001575:	52                   	push   edx
c0001576:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000157a:	83 e9 04             	sub    ecx,0x4
c000157d:	51                   	push   ecx
c000157e:	6a 00                	push   0x0
c0001580:	50                   	push   eax
c0001581:	e8 5a ef ff ff       	call   c00004e0 <memset>
c0001586:	83 c4 10             	add    esp,0x10
c0001589:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000158d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001592:	75 14                	jne    c00015a8 <iALLOc+0x156>
c0001594:	8d 04 37             	lea    eax,[edi+esi*1]
c0001597:	29 f3                	sub    ebx,esi
c0001599:	83 cb 01             	or     ebx,0x1
c000159c:	8d 48 08             	lea    ecx,[eax+0x8]
c000159f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a6:	89 f3                	mov    ebx,esi
c00015a8:	31 c0                	xor    eax,eax
c00015aa:	4d                   	dec    ebp
c00015ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015af:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015b2:	39 c5                	cmp    ebp,eax
c00015b4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015b7:	74 2c                	je     c00015e5 <iALLOc+0x193>
c00015b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015bd:	85 c9                	test   ecx,ecx
c00015bf:	75 15                	jne    c00015d6 <iALLOc+0x184>
c00015c1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015c4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015c7:	b9 10 00 00 00       	mov    ecx,0x10
c00015cc:	83 fe 0f             	cmp    esi,0xf
c00015cf:	76 05                	jbe    c00015d6 <iALLOc+0x184>
c00015d1:	83 e6 f8             	and    esi,0xfffffff8
c00015d4:	89 f1                	mov    ecx,esi
c00015d6:	89 ce                	mov    esi,ecx
c00015d8:	29 cb                	sub    ebx,ecx
c00015da:	83 ce 01             	or     esi,0x1
c00015dd:	40                   	inc    eax
c00015de:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015e1:	01 cf                	add    edi,ecx
c00015e3:	eb c6                	jmp    c00015ab <iALLOc+0x159>
c00015e5:	83 cb 01             	or     ebx,0x1
c00015e8:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015eb:	eb 08                	jmp    c00015f5 <iALLOc+0x1a3>
c00015ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015f9:	83 c4 2c             	add    esp,0x2c
c00015fc:	5b                   	pop    ebx
c00015fd:	5e                   	pop    esi
c00015fe:	5f                   	pop    edi
c00015ff:	5d                   	pop    ebp
c0001600:	c3                   	ret    

c0001601 <dlrealloc>:
c0001601:	55                   	push   ebp
c0001602:	57                   	push   edi
c0001603:	56                   	push   esi
c0001604:	53                   	push   ebx
c0001605:	83 ec 1c             	sub    esp,0x1c
c0001608:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000160c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001610:	85 db                	test   ebx,ebx
c0001612:	75 10                	jne    c0001624 <dlrealloc+0x23>
c0001614:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001618:	83 c4 1c             	add    esp,0x1c
c000161b:	5b                   	pop    ebx
c000161c:	5e                   	pop    esi
c000161d:	5f                   	pop    edi
c000161e:	5d                   	pop    ebp
c000161f:	e9 a0 fa ff ff       	jmp    c00010c4 <dlmalloc>
c0001624:	83 f8 df             	cmp    eax,0xffffffdf
c0001627:	76 07                	jbe    c0001630 <dlrealloc+0x2f>
c0001629:	31 db                	xor    ebx,ebx
c000162b:	e9 6a 01 00 00       	jmp    c000179a <dlrealloc+0x199>
c0001630:	83 c0 0b             	add    eax,0xb
c0001633:	bd 10 00 00 00       	mov    ebp,0x10
c0001638:	83 f8 0f             	cmp    eax,0xf
c000163b:	76 05                	jbe    c0001642 <dlrealloc+0x41>
c000163d:	83 e0 f8             	and    eax,0xfffffff8
c0001640:	89 c5                	mov    ebp,eax
c0001642:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001645:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001648:	89 c6                	mov    esi,eax
c000164a:	83 e6 fc             	and    esi,0xfffffffc
c000164d:	a8 02                	test   al,0x2
c000164f:	75 d8                	jne    c0001629 <dlrealloc+0x28>
c0001651:	39 f5                	cmp    ebp,esi
c0001653:	0f 86 04 01 00 00    	jbe    c000175d <dlrealloc+0x15c>
c0001659:	8d 14 37             	lea    edx,[edi+esi*1]
c000165c:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001662:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001665:	75 33                	jne    c000169a <dlrealloc+0x99>
c0001667:	83 e1 fc             	and    ecx,0xfffffffc
c000166a:	01 f1                	add    ecx,esi
c000166c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001670:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001673:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001677:	77 49                	ja     c00016c2 <dlrealloc+0xc1>
c0001679:	83 e0 01             	and    eax,0x1
c000167c:	01 ef                	add    edi,ebp
c000167e:	09 e8                	or     eax,ebp
c0001680:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001687:	29 e8                	sub    eax,ebp
c0001689:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c000168f:	83 c8 01             	or     eax,0x1
c0001692:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001695:	e9 00 01 00 00       	jmp    c000179a <dlrealloc+0x199>
c000169a:	89 c8                	mov    eax,ecx
c000169c:	83 e0 fe             	and    eax,0xfffffffe
c000169f:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016a4:	75 1c                	jne    c00016c2 <dlrealloc+0xc1>
c00016a6:	83 e1 fc             	and    ecx,0xfffffffc
c00016a9:	01 f1                	add    ecx,esi
c00016ab:	39 cd                	cmp    ebp,ecx
c00016ad:	77 13                	ja     c00016c2 <dlrealloc+0xc1>
c00016af:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016b2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016b5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016b8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016bb:	89 ce                	mov    esi,ecx
c00016bd:	e9 9b 00 00 00       	jmp    c000175d <dlrealloc+0x15c>
c00016c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016c6:	83 ec 0c             	sub    esp,0xc
c00016c9:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016cc:	50                   	push   eax
c00016cd:	e8 f2 f9 ff ff       	call   c00010c4 <dlmalloc>
c00016d2:	83 c4 10             	add    esp,0x10
c00016d5:	85 c0                	test   eax,eax
c00016d7:	0f 84 4c ff ff ff    	je     c0001629 <dlrealloc+0x28>
c00016dd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016e4:	39 ca                	cmp    edx,ecx
c00016e6:	75 0a                	jne    c00016f2 <dlrealloc+0xf1>
c00016e8:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016eb:	83 e0 fc             	and    eax,0xfffffffc
c00016ee:	01 c6                	add    esi,eax
c00016f0:	eb 6b                	jmp    c000175d <dlrealloc+0x15c>
c00016f2:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016f5:	83 f9 27             	cmp    ecx,0x27
c00016f8:	76 08                	jbe    c0001702 <dlrealloc+0x101>
c00016fa:	89 de                	mov    esi,ebx
c00016fc:	89 c7                	mov    edi,eax
c00016fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001700:	eb 43                	jmp    c0001745 <dlrealloc+0x144>
c0001702:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001704:	83 f9 13             	cmp    ecx,0x13
c0001707:	89 10                	mov    DWORD PTR [eax],edx
c0001709:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000170c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000170f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001712:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001715:	76 2e                	jbe    c0001745 <dlrealloc+0x144>
c0001717:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000171a:	83 f9 1b             	cmp    ecx,0x1b
c000171d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001720:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001723:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001726:	76 1d                	jbe    c0001745 <dlrealloc+0x144>
c0001728:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000172b:	83 f9 23             	cmp    ecx,0x23
c000172e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001731:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001734:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001737:	76 0c                	jbe    c0001745 <dlrealloc+0x144>
c0001739:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000173c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000173f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001742:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001749:	83 ec 0c             	sub    esp,0xc
c000174c:	53                   	push   ebx
c000174d:	e8 14 f6 ff ff       	call   c0000d66 <dlfree>
c0001752:	83 c4 10             	add    esp,0x10
c0001755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001759:	89 c3                	mov    ebx,eax
c000175b:	eb 3d                	jmp    c000179a <dlrealloc+0x199>
c000175d:	89 f2                	mov    edx,esi
c000175f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001762:	29 ea                	sub    edx,ebp
c0001764:	83 e1 01             	and    ecx,0x1
c0001767:	8d 04 37             	lea    eax,[edi+esi*1]
c000176a:	83 fa 0f             	cmp    edx,0xf
c000176d:	77 0b                	ja     c000177a <dlrealloc+0x179>
c000176f:	09 ce                	or     esi,ecx
c0001771:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	eb 20                	jmp    c000179a <dlrealloc+0x199>
c000177a:	01 ef                	add    edi,ebp
c000177c:	83 ca 01             	or     edx,0x1
c000177f:	09 cd                	or     ebp,ecx
c0001781:	83 ec 0c             	sub    esp,0xc
c0001784:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001787:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000178a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000178e:	83 c7 08             	add    edi,0x8
c0001791:	57                   	push   edi
c0001792:	e8 cf f5 ff ff       	call   c0000d66 <dlfree>
c0001797:	83 c4 10             	add    esp,0x10
c000179a:	83 c4 1c             	add    esp,0x1c
c000179d:	89 d8                	mov    eax,ebx
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	c3                   	ret    

c00017a4 <dlmemalign>:
c00017a4:	55                   	push   ebp
c00017a5:	57                   	push   edi
c00017a6:	56                   	push   esi
c00017a7:	53                   	push   ebx
c00017a8:	83 ec 0c             	sub    esp,0xc
c00017ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017b3:	83 fa 08             	cmp    edx,0x8
c00017b6:	77 10                	ja     c00017c8 <dlmemalign+0x24>
c00017b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017bc:	83 c4 0c             	add    esp,0xc
c00017bf:	5b                   	pop    ebx
c00017c0:	5e                   	pop    esi
c00017c1:	5f                   	pop    edi
c00017c2:	5d                   	pop    ebp
c00017c3:	e9 fc f8 ff ff       	jmp    c00010c4 <dlmalloc>
c00017c8:	bf 10 00 00 00       	mov    edi,0x10
c00017cd:	83 fa 0f             	cmp    edx,0xf
c00017d0:	76 13                	jbe    c00017e5 <dlmemalign+0x41>
c00017d2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017d5:	85 d1                	test   ecx,edx
c00017d7:	75 04                	jne    c00017dd <dlmemalign+0x39>
c00017d9:	89 d7                	mov    edi,edx
c00017db:	eb 08                	jmp    c00017e5 <dlmemalign+0x41>
c00017dd:	39 d7                	cmp    edi,edx
c00017df:	73 04                	jae    c00017e5 <dlmemalign+0x41>
c00017e1:	01 ff                	add    edi,edi
c00017e3:	eb f8                	jmp    c00017dd <dlmemalign+0x39>
c00017e5:	83 f8 df             	cmp    eax,0xffffffdf
c00017e8:	76 07                	jbe    c00017f1 <dlmemalign+0x4d>
c00017ea:	31 c0                	xor    eax,eax
c00017ec:	e9 ce 00 00 00       	jmp    c00018bf <dlmemalign+0x11b>
c00017f1:	83 c0 0b             	add    eax,0xb
c00017f4:	bd 10 00 00 00       	mov    ebp,0x10
c00017f9:	83 f8 0f             	cmp    eax,0xf
c00017fc:	76 05                	jbe    c0001803 <dlmemalign+0x5f>
c00017fe:	83 e0 f8             	and    eax,0xfffffff8
c0001801:	89 c5                	mov    ebp,eax
c0001803:	83 ec 0c             	sub    esp,0xc
c0001806:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000180a:	50                   	push   eax
c000180b:	e8 b4 f8 ff ff       	call   c00010c4 <dlmalloc>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	89 c1                	mov    ecx,eax
c0001815:	85 c0                	test   eax,eax
c0001817:	74 d1                	je     c00017ea <dlmemalign+0x46>
c0001819:	31 d2                	xor    edx,edx
c000181b:	8d 70 f8             	lea    esi,[eax-0x8]
c000181e:	f7 f7                	div    edi
c0001820:	85 d2                	test   edx,edx
c0001822:	74 62                	je     c0001886 <dlmemalign+0xe2>
c0001824:	89 f8                	mov    eax,edi
c0001826:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000182a:	f7 d8                	neg    eax
c000182c:	21 c3                	and    ebx,eax
c000182e:	83 eb 08             	sub    ebx,0x8
c0001831:	89 d8                	mov    eax,ebx
c0001833:	29 f0                	sub    eax,esi
c0001835:	83 f8 0f             	cmp    eax,0xf
c0001838:	77 02                	ja     c000183c <dlmemalign+0x98>
c000183a:	01 fb                	add    ebx,edi
c000183c:	89 d8                	mov    eax,ebx
c000183e:	29 f0                	sub    eax,esi
c0001840:	89 c6                	mov    esi,eax
c0001842:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001845:	89 c2                	mov    edx,eax
c0001847:	83 e2 fc             	and    edx,0xfffffffc
c000184a:	29 f2                	sub    edx,esi
c000184c:	a8 02                	test   al,0x2
c000184e:	74 10                	je     c0001860 <dlmemalign+0xbc>
c0001850:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001853:	83 ca 02             	or     edx,0x2
c0001856:	8d 43 08             	lea    eax,[ebx+0x8]
c0001859:	89 33                	mov    DWORD PTR [ebx],esi
c000185b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000185e:	eb 5f                	jmp    c00018bf <dlmemalign+0x11b>
c0001860:	89 d0                	mov    eax,edx
c0001862:	83 ec 0c             	sub    esp,0xc
c0001865:	83 c8 01             	or     eax,0x1
c0001868:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000186b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001870:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001873:	83 e0 01             	and    eax,0x1
c0001876:	09 f0                	or     eax,esi
c0001878:	89 de                	mov    esi,ebx
c000187a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000187d:	51                   	push   ecx
c000187e:	e8 e3 f4 ff ff       	call   c0000d66 <dlfree>
c0001883:	83 c4 10             	add    esp,0x10
c0001886:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001889:	a8 02                	test   al,0x2
c000188b:	75 2f                	jne    c00018bc <dlmemalign+0x118>
c000188d:	83 e0 fc             	and    eax,0xfffffffc
c0001890:	8d 55 10             	lea    edx,[ebp+0x10]
c0001893:	39 c2                	cmp    edx,eax
c0001895:	73 25                	jae    c00018bc <dlmemalign+0x118>
c0001897:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000189a:	29 e8                	sub    eax,ebp
c000189c:	83 c8 01             	or     eax,0x1
c000189f:	83 ec 0c             	sub    esp,0xc
c00018a2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018a5:	83 c2 08             	add    edx,0x8
c00018a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ab:	83 e0 01             	and    eax,0x1
c00018ae:	09 c5                	or     ebp,eax
c00018b0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018b3:	52                   	push   edx
c00018b4:	e8 ad f4 ff ff       	call   c0000d66 <dlfree>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	8d 46 08             	lea    eax,[esi+0x8]
c00018bf:	83 c4 0c             	add    esp,0xc
c00018c2:	5b                   	pop    ebx
c00018c3:	5e                   	pop    esi
c00018c4:	5f                   	pop    edi
c00018c5:	5d                   	pop    ebp
c00018c6:	c3                   	ret    

c00018c7 <dlcalloc>:
c00018c7:	53                   	push   ebx
c00018c8:	83 ec 14             	sub    esp,0x14
c00018cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018cf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018d4:	50                   	push   eax
c00018d5:	e8 ea f7 ff ff       	call   c00010c4 <dlmalloc>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	89 c3                	mov    ebx,eax
c00018df:	85 c0                	test   eax,eax
c00018e1:	74 77                	je     c000195a <dlcalloc+0x93>
c00018e3:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018e6:	89 d0                	mov    eax,edx
c00018e8:	83 e0 fc             	and    eax,0xfffffffc
c00018eb:	80 e2 02             	and    dl,0x2
c00018ee:	75 5a                	jne    c000194a <dlcalloc+0x83>
c00018f0:	83 e8 04             	sub    eax,0x4
c00018f3:	83 f8 27             	cmp    eax,0x27
c00018f6:	76 03                	jbe    c00018fb <dlcalloc+0x34>
c00018f8:	51                   	push   ecx
c00018f9:	eb 53                	jmp    c000194e <dlcalloc+0x87>
c00018fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001901:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001908:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000190f:	83 f8 13             	cmp    eax,0x13
c0001912:	76 46                	jbe    c000195a <dlcalloc+0x93>
c0001914:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000191b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001922:	83 f8 1b             	cmp    eax,0x1b
c0001925:	76 33                	jbe    c000195a <dlcalloc+0x93>
c0001927:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000192e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001935:	83 f8 23             	cmp    eax,0x23
c0001938:	76 20                	jbe    c000195a <dlcalloc+0x93>
c000193a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001941:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001948:	eb 10                	jmp    c000195a <dlcalloc+0x93>
c000194a:	83 e8 08             	sub    eax,0x8
c000194d:	52                   	push   edx
c000194e:	50                   	push   eax
c000194f:	6a 00                	push   0x0
c0001951:	53                   	push   ebx
c0001952:	e8 89 eb ff ff       	call   c00004e0 <memset>
c0001957:	83 c4 10             	add    esp,0x10
c000195a:	83 c4 08             	add    esp,0x8
c000195d:	89 d8                	mov    eax,ebx
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlcfree>:
c0001961:	e9 00 f4 ff ff       	jmp    c0000d66 <dlfree>

c0001966 <dlindependent_calloc>:
c0001966:	83 ec 28             	sub    esp,0x28
c0001969:	b9 03 00 00 00       	mov    ecx,0x3
c000196e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001972:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001976:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000197a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000197e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001982:	e8 cb fa ff ff       	call   c0001452 <iALLOc>
c0001987:	83 c4 2c             	add    esp,0x2c
c000198a:	c3                   	ret    

c000198b <dlindependent_comalloc>:
c000198b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000198f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001993:	31 c9                	xor    ecx,ecx
c0001995:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001999:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000199d:	e9 b0 fa ff ff       	jmp    c0001452 <iALLOc>

c00019a2 <dlvalloc>:
c00019a2:	83 ec 0c             	sub    esp,0xc
c00019a5:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019ac:	75 0a                	jne    c00019b8 <dlvalloc+0x16>
c00019ae:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019b3:	e8 c7 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c00019b8:	50                   	push   eax
c00019b9:	50                   	push   eax
c00019ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019be:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019c4:	e8 db fd ff ff       	call   c00017a4 <dlmemalign>
c00019c9:	83 c4 1c             	add    esp,0x1c
c00019cc:	c3                   	ret    

c00019cd <dlpvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlpvalloc+0x16>
c00019d9:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019de:	e8 9c f2 ff ff       	call   c0000c7f <malloc_consolidate>
c00019e3:	52                   	push   edx
c00019e4:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019e9:	52                   	push   edx
c00019ea:	89 c1                	mov    ecx,eax
c00019ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019f0:	f7 d9                	neg    ecx
c00019f2:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019f6:	21 ca                	and    edx,ecx
c00019f8:	52                   	push   edx
c00019f9:	50                   	push   eax
c00019fa:	e8 a5 fd ff ff       	call   c00017a4 <dlmemalign>
c00019ff:	83 c4 1c             	add    esp,0x1c
c0001a02:	c3                   	ret    

c0001a03 <dlmalloc_trim>:
c0001a03:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a08:	e8 72 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c0001a0d:	31 c0                	xor    eax,eax
c0001a0f:	c3                   	ret    

c0001a10 <dlmalloc_usable_size>:
c0001a10:	53                   	push   ebx
c0001a11:	31 c0                	xor    eax,eax
c0001a13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a17:	85 c9                	test   ecx,ecx
c0001a19:	74 24                	je     c0001a3f <dlmalloc_usable_size+0x2f>
c0001a1b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a1e:	f6 c2 02             	test   dl,0x2
c0001a21:	74 08                	je     c0001a2b <dlmalloc_usable_size+0x1b>
c0001a23:	83 e2 fc             	and    edx,0xfffffffc
c0001a26:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a29:	eb 14                	jmp    c0001a3f <dlmalloc_usable_size+0x2f>
c0001a2b:	89 d3                	mov    ebx,edx
c0001a2d:	31 c0                	xor    eax,eax
c0001a2f:	83 e3 fe             	and    ebx,0xfffffffe
c0001a32:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a37:	74 06                	je     c0001a3f <dlmalloc_usable_size+0x2f>
c0001a39:	83 e2 fc             	and    edx,0xfffffffc
c0001a3c:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a3f:	5b                   	pop    ebx
c0001a40:	c3                   	ret    

c0001a41 <dlmallinfo>:
c0001a41:	55                   	push   ebp
c0001a42:	57                   	push   edi
c0001a43:	56                   	push   esi
c0001a44:	53                   	push   ebx
c0001a45:	83 ec 08             	sub    esp,0x8
c0001a48:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a4f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a53:	75 0a                	jne    c0001a5f <dlmallinfo+0x1e>
c0001a55:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5a:	e8 20 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c0001a5f:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a64:	31 ed                	xor    ebp,ebp
c0001a66:	31 c9                	xor    ecx,ecx
c0001a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a6b:	83 e0 fc             	and    eax,0xfffffffc
c0001a6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a7b:	85 d2                	test   edx,edx
c0001a7d:	74 0e                	je     c0001a8d <dlmallinfo+0x4c>
c0001a7f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a82:	45                   	inc    ebp
c0001a83:	83 e6 fc             	and    esi,0xfffffffc
c0001a86:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a89:	01 f1                	add    ecx,esi
c0001a8b:	eb ee                	jmp    c0001a7b <dlmallinfo+0x3a>
c0001a8d:	40                   	inc    eax
c0001a8e:	83 f8 0a             	cmp    eax,0xa
c0001a91:	75 e1                	jne    c0001a74 <dlmallinfo+0x33>
c0001a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a97:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a9e:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001aa1:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001aa6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aa9:	39 f0                	cmp    eax,esi
c0001aab:	74 10                	je     c0001abd <dlmallinfo+0x7c>
c0001aad:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ab0:	ff 04 24             	inc    DWORD PTR [esp]
c0001ab3:	83 e7 fc             	and    edi,0xfffffffc
c0001ab6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ab9:	01 fa                	add    edx,edi
c0001abb:	eb ec                	jmp    c0001aa9 <dlmallinfo+0x68>
c0001abd:	83 c0 08             	add    eax,0x8
c0001ac0:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ac5:	75 df                	jne    c0001aa6 <dlmallinfo+0x65>
c0001ac7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001acc:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0001ad4:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001ad7:	29 d0                	sub    eax,edx
c0001ad9:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001adf:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ae2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ae5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001ae8:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001af2:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001af5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001af8:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001afb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001afe:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b01:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b04:	83 c4 08             	add    esp,0x8
c0001b07:	89 d8                	mov    eax,ebx
c0001b09:	5b                   	pop    ebx
c0001b0a:	5e                   	pop    esi
c0001b0b:	5f                   	pop    edi
c0001b0c:	5d                   	pop    ebp
c0001b0d:	c2 04 00             	ret    0x4

c0001b10 <dlmalloc_stats>:
c0001b10:	83 ec 30             	sub    esp,0x30
c0001b13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b17:	50                   	push   eax
c0001b18:	e8 24 ff ff ff       	call   c0001a41 <dlmallinfo>
c0001b1d:	83 c4 30             	add    esp,0x30
c0001b20:	c3                   	ret    

c0001b21 <dlmallopt>:
c0001b21:	56                   	push   esi
c0001b22:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b27:	53                   	push   ebx
c0001b28:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b30:	e8 4a f1 ff ff       	call   c0000c7f <malloc_consolidate>
c0001b35:	8d 46 04             	lea    eax,[esi+0x4]
c0001b38:	83 f8 05             	cmp    eax,0x5
c0001b3b:	77 67                	ja     c0001ba4 <dlmallopt+0x83>
c0001b3d:	ff 24 85 a4 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c5c]
c0001b44:	83 fb 50             	cmp    ebx,0x50
c0001b47:	77 5b                	ja     c0001ba4 <dlmallopt+0x83>
c0001b49:	ba 08 00 00 00       	mov    edx,0x8
c0001b4e:	85 db                	test   ebx,ebx
c0001b50:	74 12                	je     c0001b64 <dlmallopt+0x43>
c0001b52:	83 c3 0b             	add    ebx,0xb
c0001b55:	ba 10 00 00 00       	mov    edx,0x10
c0001b5a:	83 fb 0f             	cmp    ebx,0xf
c0001b5d:	76 05                	jbe    c0001b64 <dlmallopt+0x43>
c0001b5f:	89 da                	mov    edx,ebx
c0001b61:	83 e2 f8             	and    edx,0xfffffff8
c0001b64:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b69:	83 e0 03             	and    eax,0x3
c0001b6c:	09 d0                	or     eax,edx
c0001b6e:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b73:	eb 31                	jmp    c0001ba6 <dlmallopt+0x85>
c0001b75:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b7b:	eb 06                	jmp    c0001b83 <dlmallopt+0x62>
c0001b7d:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b83:	be 01 00 00 00       	mov    esi,0x1
c0001b88:	eb 1c                	jmp    c0001ba6 <dlmallopt+0x85>
c0001b8a:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b90:	eb f1                	jmp    c0001b83 <dlmallopt+0x62>
c0001b92:	31 f6                	xor    esi,esi
c0001b94:	85 db                	test   ebx,ebx
c0001b96:	75 0e                	jne    c0001ba6 <dlmallopt+0x85>
c0001b98:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001ba2:	eb df                	jmp    c0001b83 <dlmallopt+0x62>
c0001ba4:	31 f6                	xor    esi,esi
c0001ba6:	5b                   	pop    ebx
c0001ba7:	89 f0                	mov    eax,esi
c0001ba9:	5e                   	pop    esi
c0001baa:	c3                   	ret    
c0001bab:	90                   	nop

c0001bac <isblank>:
c0001bac:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bb1:	74 09                	je     c0001bbc <isblank+0x10>
c0001bb3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bb8:	75 0a                	jne    c0001bc4 <isblank+0x18>
c0001bba:	66 90                	xchg   ax,ax
c0001bbc:	b8 01 00 00 00       	mov    eax,0x1
c0001bc1:	c3                   	ret    
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 00 00 00 00       	mov    eax,0x0
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax

c0001bcc <iscntrl>:
c0001bcc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bd1:	7e 09                	jle    c0001bdc <iscntrl+0x10>
c0001bd3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bd8:	75 0a                	jne    c0001be4 <iscntrl+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <isdigit>:
c0001bec:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bf1:	7e 0d                	jle    c0001c00 <isdigit+0x14>
c0001bf3:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001bf8:	7f 06                	jg     c0001c00 <isdigit+0x14>
c0001bfa:	b8 01 00 00 00       	mov    eax,0x1
c0001bff:	c3                   	ret    
c0001c00:	b8 00 00 00 00       	mov    eax,0x0
c0001c05:	c3                   	ret    
c0001c06:	66 90                	xchg   ax,ax

c0001c08 <islower>:
c0001c08:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c0d:	7e 0d                	jle    c0001c1c <islower+0x14>
c0001c0f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c14:	7f 06                	jg     c0001c1c <islower+0x14>
c0001c16:	b8 01 00 00 00       	mov    eax,0x1
c0001c1b:	c3                   	ret    
c0001c1c:	b8 00 00 00 00       	mov    eax,0x0
c0001c21:	c3                   	ret    
c0001c22:	66 90                	xchg   ax,ax

c0001c24 <isspace>:
c0001c24:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c29:	7c 19                	jl     c0001c44 <isspace+0x20>
c0001c2b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c30:	7e 0a                	jle    c0001c3c <isspace+0x18>
c0001c32:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c37:	75 0b                	jne    c0001c44 <isspace+0x20>
c0001c39:	8d 76 00             	lea    esi,[esi+0x0]
c0001c3c:	b8 01 00 00 00       	mov    eax,0x1
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax
c0001c44:	b8 00 00 00 00       	mov    eax,0x0
c0001c49:	c3                   	ret    
c0001c4a:	66 90                	xchg   ax,ax

c0001c4c <isupper>:
c0001c4c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c51:	7e 0d                	jle    c0001c60 <isupper+0x14>
c0001c53:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c58:	7f 06                	jg     c0001c60 <isupper+0x14>
c0001c5a:	b8 01 00 00 00       	mov    eax,0x1
c0001c5f:	c3                   	ret    
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isalpha>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 db ff ff ff       	call   c0001c4c <isupper>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 10                	jne    c0001c88 <isalpha+0x20>
c0001c78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c7c:	e8 87 ff ff ff       	call   c0001c08 <islower>
c0001c81:	83 c4 04             	add    esp,0x4
c0001c84:	85 c0                	test   eax,eax
c0001c86:	74 08                	je     c0001c90 <isalpha+0x28>
c0001c88:	b8 01 00 00 00       	mov    eax,0x1
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax
c0001c90:	b8 00 00 00 00       	mov    eax,0x0
c0001c95:	c3                   	ret    
c0001c96:	66 90                	xchg   ax,ax

c0001c98 <isalnum>:
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 c7 ff ff ff       	call   c0001c68 <isalpha>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	75 10                	jne    c0001cb8 <isalnum+0x20>
c0001ca8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cac:	e8 3b ff ff ff       	call   c0001bec <isdigit>
c0001cb1:	83 c4 04             	add    esp,0x4
c0001cb4:	85 c0                	test   eax,eax
c0001cb6:	74 08                	je     c0001cc0 <isalnum+0x28>
c0001cb8:	b8 01 00 00 00       	mov    eax,0x1
c0001cbd:	c3                   	ret    
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 00 00 00 00       	mov    eax,0x0
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax

c0001cc8 <ispunct>:
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 c7 ff ff ff       	call   c0001c98 <isalnum>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	75 28                	jne    c0001d00 <ispunct+0x38>
c0001cd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cdc:	e8 43 ff ff ff       	call   c0001c24 <isspace>
c0001ce1:	83 c4 04             	add    esp,0x4
c0001ce4:	85 c0                	test   eax,eax
c0001ce6:	75 18                	jne    c0001d00 <ispunct+0x38>
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 db fe ff ff       	call   c0001bcc <iscntrl>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 08                	jne    c0001d00 <ispunct+0x38>
c0001cf8:	b8 01 00 00 00       	mov    eax,0x1
c0001cfd:	c3                   	ret    
c0001cfe:	66 90                	xchg   ax,ax
c0001d00:	b8 00 00 00 00       	mov    eax,0x0
c0001d05:	c3                   	ret    
c0001d06:	66 90                	xchg   ax,ax

c0001d08 <isgraph>:
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 87 ff ff ff       	call   c0001c98 <isalnum>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 10                	jne    c0001d28 <isgraph+0x20>
c0001d18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d1c:	e8 a7 ff ff ff       	call   c0001cc8 <ispunct>
c0001d21:	83 c4 04             	add    esp,0x4
c0001d24:	85 c0                	test   eax,eax
c0001d26:	74 08                	je     c0001d30 <isgraph+0x28>
c0001d28:	b8 01 00 00 00       	mov    eax,0x1
c0001d2d:	c3                   	ret    
c0001d2e:	66 90                	xchg   ax,ax
c0001d30:	b8 00 00 00 00       	mov    eax,0x0
c0001d35:	c3                   	ret    
c0001d36:	66 90                	xchg   ax,ax

c0001d38 <isprint>:
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 c7 ff ff ff       	call   c0001d08 <isgraph>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	75 08                	jne    c0001d50 <isprint+0x18>
c0001d48:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d4d:	75 09                	jne    c0001d58 <isprint+0x20>
c0001d4f:	90                   	nop
c0001d50:	b8 01 00 00 00       	mov    eax,0x1
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 00 00 00 00       	mov    eax,0x0
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax

c0001d60 <isxdigit>:
c0001d60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d64:	e8 83 fe ff ff       	call   c0001bec <isdigit>
c0001d69:	83 c4 04             	add    esp,0x4
c0001d6c:	85 c0                	test   eax,eax
c0001d6e:	75 20                	jne    c0001d90 <isxdigit+0x30>
c0001d70:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d75:	7e 09                	jle    c0001d80 <isxdigit+0x20>
c0001d77:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d7c:	7e 12                	jle    c0001d90 <isxdigit+0x30>
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d85:	7e 11                	jle    c0001d98 <isxdigit+0x38>
c0001d87:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d8c:	7f 0a                	jg     c0001d98 <isxdigit+0x38>
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 01 00 00 00       	mov    eax,0x1
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    

c0001d9e <disk_status>:
c0001d9e:	31 c0                	xor    eax,eax
c0001da0:	c3                   	ret    

c0001da1 <disk_initialize>:
c0001da1:	31 c0                	xor    eax,eax
c0001da3:	c3                   	ret    

c0001da4 <disk_read>:
c0001da4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001db1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db5:	e9 4a 6b 01 00       	jmp    c0018904 <fatWrapperReadDisk>

c0001dba <disk_write>:
c0001dba:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dbf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dcb:	e9 74 6b 01 00       	jmp    c0018944 <fatWrapperWriteDisk>

c0001dd0 <disk_ioctl>:
c0001dd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dd9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dde:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dea:	e9 95 6b 01 00       	jmp    c0018984 <fatWrapperIoctl>

c0001def <ld_word>:
c0001def:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001df3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <ld_dword>:
c0001dfc:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e00:	89 d1                	mov    ecx,edx
c0001e02:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e06:	c1 e1 08             	shl    ecx,0x8
c0001e09:	09 ca                	or     edx,ecx
c0001e0b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e0e:	c1 e2 08             	shl    edx,0x8
c0001e11:	09 d0                	or     eax,edx
c0001e13:	c3                   	ret    

c0001e14 <st_word>:
c0001e14:	66 89 10             	mov    WORD PTR [eax],dx
c0001e17:	c3                   	ret    

c0001e18 <st_dword>:
c0001e18:	89 10                	mov    DWORD PTR [eax],edx
c0001e1a:	c3                   	ret    

c0001e1b <mem_cpy>:
c0001e1b:	85 c9                	test   ecx,ecx
c0001e1d:	74 10                	je     c0001e2f <mem_cpy+0x14>
c0001e1f:	57                   	push   edi
c0001e20:	01 c1                	add    ecx,eax
c0001e22:	56                   	push   esi
c0001e23:	89 c7                	mov    edi,eax
c0001e25:	89 d6                	mov    esi,edx
c0001e27:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e28:	39 f9                	cmp    ecx,edi
c0001e2a:	75 fb                	jne    c0001e27 <mem_cpy+0xc>
c0001e2c:	5e                   	pop    esi
c0001e2d:	5f                   	pop    edi
c0001e2e:	c3                   	ret    
c0001e2f:	c3                   	ret    

c0001e30 <mem_set>:
c0001e30:	01 c1                	add    ecx,eax
c0001e32:	40                   	inc    eax
c0001e33:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e36:	39 c8                	cmp    eax,ecx
c0001e38:	75 f8                	jne    c0001e32 <mem_set+0x2>
c0001e3a:	c3                   	ret    

c0001e3b <mem_cmp>:
c0001e3b:	57                   	push   edi
c0001e3c:	56                   	push   esi
c0001e3d:	89 c6                	mov    esi,eax
c0001e3f:	53                   	push   ebx
c0001e40:	46                   	inc    esi
c0001e41:	42                   	inc    edx
c0001e42:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e46:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e4a:	29 fb                	sub    ebx,edi
c0001e4c:	89 cf                	mov    edi,ecx
c0001e4e:	29 f7                	sub    edi,esi
c0001e50:	01 c7                	add    edi,eax
c0001e52:	74 04                	je     c0001e58 <mem_cmp+0x1d>
c0001e54:	85 db                	test   ebx,ebx
c0001e56:	74 e8                	je     c0001e40 <mem_cmp+0x5>
c0001e58:	89 d8                	mov    eax,ebx
c0001e5a:	5b                   	pop    ebx
c0001e5b:	5e                   	pop    esi
c0001e5c:	5f                   	pop    edi
c0001e5d:	c3                   	ret    

c0001e5e <chk_chr>:
c0001e5e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e61:	85 c9                	test   ecx,ecx
c0001e63:	74 07                	je     c0001e6c <chk_chr+0xe>
c0001e65:	39 d1                	cmp    ecx,edx
c0001e67:	74 03                	je     c0001e6c <chk_chr+0xe>
c0001e69:	40                   	inc    eax
c0001e6a:	eb f2                	jmp    c0001e5e <chk_chr>
c0001e6c:	89 c8                	mov    eax,ecx
c0001e6e:	c3                   	ret    

c0001e6f <dbc_1st>:
c0001e6f:	31 c0                	xor    eax,eax
c0001e71:	c3                   	ret    

c0001e72 <dbc_2nd>:
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	c3                   	ret    

c0001e75 <tchar2uni>:
c0001e75:	57                   	push   edi
c0001e76:	56                   	push   esi
c0001e77:	53                   	push   ebx
c0001e78:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e7a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e7c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e7f:	f6 c1 80             	test   cl,0x80
c0001e82:	75 0a                	jne    c0001e8e <tchar2uni+0x19>
c0001e84:	0f b6 d1             	movzx  edx,cl
c0001e87:	89 f3                	mov    ebx,esi
c0001e89:	e9 b2 00 00 00       	jmp    c0001f40 <tchar2uni+0xcb>
c0001e8e:	89 ca                	mov    edx,ecx
c0001e90:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e96:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e9c:	89 ca                	mov    edx,ecx
c0001e9e:	75 0a                	jne    c0001eaa <tchar2uni+0x35>
c0001ea0:	83 e2 1f             	and    edx,0x1f
c0001ea3:	b9 01 00 00 00       	mov    ecx,0x1
c0001ea8:	eb 37                	jmp    c0001ee1 <tchar2uni+0x6c>
c0001eaa:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001eb0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001eb6:	75 0c                	jne    c0001ec4 <tchar2uni+0x4f>
c0001eb8:	89 ca                	mov    edx,ecx
c0001eba:	b9 02 00 00 00       	mov    ecx,0x2
c0001ebf:	83 e2 0f             	and    edx,0xf
c0001ec2:	eb 1d                	jmp    c0001ee1 <tchar2uni+0x6c>
c0001ec4:	89 cf                	mov    edi,ecx
c0001ec6:	83 ca ff             	or     edx,0xffffffff
c0001ec9:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001ecf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ed5:	75 70                	jne    c0001f47 <tchar2uni+0xd2>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 03 00 00 00       	mov    ecx,0x3
c0001ede:	83 e2 07             	and    edx,0x7
c0001ee1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ee5:	46                   	inc    esi
c0001ee6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ee9:	89 cf                	mov    edi,ecx
c0001eeb:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ef1:	83 c7 80             	add    edi,0xffffff80
c0001ef4:	75 4e                	jne    c0001f44 <tchar2uni+0xcf>
c0001ef6:	c1 e2 06             	shl    edx,0x6
c0001ef9:	83 e1 3f             	and    ecx,0x3f
c0001efc:	09 ca                	or     edx,ecx
c0001efe:	39 de                	cmp    esi,ebx
c0001f00:	75 e3                	jne    c0001ee5 <tchar2uni+0x70>
c0001f02:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f08:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f0e:	76 34                	jbe    c0001f44 <tchar2uni+0xcf>
c0001f10:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f13:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f19:	77 29                	ja     c0001f44 <tchar2uni+0xcf>
c0001f1b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f21:	76 1d                	jbe    c0001f40 <tchar2uni+0xcb>
c0001f23:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f29:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f2f:	c1 e1 06             	shl    ecx,0x6
c0001f32:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f38:	09 ca                	or     edx,ecx
c0001f3a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f40:	89 18                	mov    DWORD PTR [eax],ebx
c0001f42:	eb 03                	jmp    c0001f47 <tchar2uni+0xd2>
c0001f44:	83 ca ff             	or     edx,0xffffffff
c0001f47:	5b                   	pop    ebx
c0001f48:	89 d0                	mov    eax,edx
c0001f4a:	5e                   	pop    esi
c0001f4b:	5f                   	pop    edi
c0001f4c:	c3                   	ret    

c0001f4d <put_utf>:
c0001f4d:	53                   	push   ebx
c0001f4e:	83 f8 7f             	cmp    eax,0x7f
c0001f51:	89 c3                	mov    ebx,eax
c0001f53:	b0 00                	mov    al,0x0
c0001f55:	77 11                	ja     c0001f68 <put_utf+0x1b>
c0001f57:	85 c9                	test   ecx,ecx
c0001f59:	0f 84 e5 00 00 00    	je     c0002044 <put_utf+0xf7>
c0001f5f:	88 1a                	mov    BYTE PTR [edx],bl
c0001f61:	b0 01                	mov    al,0x1
c0001f63:	e9 dc 00 00 00       	jmp    c0002044 <put_utf+0xf7>
c0001f68:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f6e:	77 23                	ja     c0001f93 <put_utf+0x46>
c0001f70:	83 f9 01             	cmp    ecx,0x1
c0001f73:	0f 86 cb 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001f79:	89 d8                	mov    eax,ebx
c0001f7b:	83 e3 3f             	and    ebx,0x3f
c0001f7e:	c1 e8 06             	shr    eax,0x6
c0001f81:	83 cb 80             	or     ebx,0xffffff80
c0001f84:	83 c8 c0             	or     eax,0xffffffc0
c0001f87:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f8a:	88 02                	mov    BYTE PTR [edx],al
c0001f8c:	b0 02                	mov    al,0x2
c0001f8e:	e9 b1 00 00 00       	jmp    c0002044 <put_utf+0xf7>
c0001f93:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f99:	77 40                	ja     c0001fdb <put_utf+0x8e>
c0001f9b:	83 f9 02             	cmp    ecx,0x2
c0001f9e:	0f 86 a0 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001fa4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001faa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fb0:	0f 86 8e 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001fb6:	89 d8                	mov    eax,ebx
c0001fb8:	c1 e8 0c             	shr    eax,0xc
c0001fbb:	83 c8 e0             	or     eax,0xffffffe0
c0001fbe:	88 02                	mov    BYTE PTR [edx],al
c0001fc0:	89 d8                	mov    eax,ebx
c0001fc2:	c1 e8 06             	shr    eax,0x6
c0001fc5:	83 e3 3f             	and    ebx,0x3f
c0001fc8:	83 e0 3f             	and    eax,0x3f
c0001fcb:	83 cb 80             	or     ebx,0xffffff80
c0001fce:	83 c8 80             	or     eax,0xffffff80
c0001fd1:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fd4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fd7:	b0 03                	mov    al,0x3
c0001fd9:	eb 69                	jmp    c0002044 <put_utf+0xf7>
c0001fdb:	83 f9 03             	cmp    ecx,0x3
c0001fde:	76 64                	jbe    c0002044 <put_utf+0xf7>
c0001fe0:	89 d9                	mov    ecx,ebx
c0001fe2:	66 31 c9             	xor    cx,cx
c0001fe5:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001feb:	0f b7 c3             	movzx  eax,bx
c0001fee:	c1 e9 06             	shr    ecx,0x6
c0001ff1:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ff7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ffd:	77 43                	ja     c0002042 <put_utf+0xf5>
c0001fff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002005:	77 3b                	ja     c0002042 <put_utf+0xf5>
c0002007:	09 cb                	or     ebx,ecx
c0002009:	81 c3 00 00 01 00    	add    ebx,0x10000
c000200f:	89 d8                	mov    eax,ebx
c0002011:	c1 e8 12             	shr    eax,0x12
c0002014:	83 c8 f0             	or     eax,0xfffffff0
c0002017:	88 02                	mov    BYTE PTR [edx],al
c0002019:	89 d8                	mov    eax,ebx
c000201b:	c1 e8 0c             	shr    eax,0xc
c000201e:	83 e0 3f             	and    eax,0x3f
c0002021:	83 c8 80             	or     eax,0xffffff80
c0002024:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002027:	89 d8                	mov    eax,ebx
c0002029:	c1 e8 06             	shr    eax,0x6
c000202c:	83 e3 3f             	and    ebx,0x3f
c000202f:	83 e0 3f             	and    eax,0x3f
c0002032:	83 cb 80             	or     ebx,0xffffff80
c0002035:	83 c8 80             	or     eax,0xffffff80
c0002038:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000203b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000203e:	b0 04                	mov    al,0x4
c0002040:	eb 02                	jmp    c0002044 <put_utf+0xf7>
c0002042:	31 c0                	xor    eax,eax
c0002044:	5b                   	pop    ebx
c0002045:	c3                   	ret    

c0002046 <clst2sect>:
c0002046:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002049:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000204c:	83 ea 02             	sub    edx,0x2
c000204f:	39 ca                	cmp    edx,ecx
c0002051:	76 0d                	jbe    c0002060 <clst2sect+0x1a>
c0002053:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002057:	0f af d1             	imul   edx,ecx
c000205a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000205d:	89 d0                	mov    eax,edx
c000205f:	c3                   	ret    
c0002060:	31 c0                	xor    eax,eax
c0002062:	c3                   	ret    

c0002063 <pick_lfn>:
c0002063:	55                   	push   ebp
c0002064:	57                   	push   edi
c0002065:	89 c7                	mov    edi,eax
c0002067:	56                   	push   esi
c0002068:	8d 42 1a             	lea    eax,[edx+0x1a]
c000206b:	53                   	push   ebx
c000206c:	89 d3                	mov    ebx,edx
c000206e:	e8 7c fd ff ff       	call   c0001def <ld_word>
c0002073:	66 85 c0             	test   ax,ax
c0002076:	74 04                	je     c000207c <pick_lfn+0x19>
c0002078:	31 c0                	xor    eax,eax
c000207a:	eb 62                	jmp    c00020de <pick_lfn+0x7b>
c000207c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000207f:	83 e1 bf             	and    ecx,0xffffffbf
c0002082:	bd 01 00 00 00       	mov    ebp,0x1
c0002087:	49                   	dec    ecx
c0002088:	31 f6                	xor    esi,esi
c000208a:	6b c9 0d             	imul   ecx,ecx,0xd
c000208d:	0f b6 86 00 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b00]
c0002094:	01 d8                	add    eax,ebx
c0002096:	e8 54 fd ff ff       	call   c0001def <ld_word>
c000209b:	66 85 ed             	test   bp,bp
c000209e:	74 11                	je     c00020b1 <pick_lfn+0x4e>
c00020a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020a6:	77 d0                	ja     c0002078 <pick_lfn+0x15>
c00020a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020ac:	89 c5                	mov    ebp,eax
c00020ae:	41                   	inc    ecx
c00020af:	eb 0a                	jmp    c00020bb <pick_lfn+0x58>
c00020b1:	0f b7 c0             	movzx  eax,ax
c00020b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00020b9:	75 bd                	jne    c0002078 <pick_lfn+0x15>
c00020bb:	46                   	inc    esi
c00020bc:	83 fe 0d             	cmp    esi,0xd
c00020bf:	75 cc                	jne    c000208d <pick_lfn+0x2a>
c00020c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020c4:	74 13                	je     c00020d9 <pick_lfn+0x76>
c00020c6:	66 85 ed             	test   bp,bp
c00020c9:	74 0e                	je     c00020d9 <pick_lfn+0x76>
c00020cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020d1:	77 a5                	ja     c0002078 <pick_lfn+0x15>
c00020d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020d9:	b8 01 00 00 00       	mov    eax,0x1
c00020de:	5b                   	pop    ebx
c00020df:	5e                   	pop    esi
c00020e0:	5f                   	pop    edi
c00020e1:	5d                   	pop    ebp
c00020e2:	c3                   	ret    

c00020e3 <put_lfn>:
c00020e3:	55                   	push   ebp
c00020e4:	57                   	push   edi
c00020e5:	89 d7                	mov    edi,edx
c00020e7:	56                   	push   esi
c00020e8:	31 f6                	xor    esi,esi
c00020ea:	53                   	push   ebx
c00020eb:	83 ec 0c             	sub    esp,0xc
c00020ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020f6:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020f9:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020ff:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002102:	31 d2                	xor    edx,edx
c0002104:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002108:	e8 07 fd ff ff       	call   c0001e14 <st_word>
c000210d:	0f b6 d9             	movzx  ebx,cl
c0002110:	4b                   	dec    ebx
c0002111:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002118:	6b db 0d             	imul   ebx,ebx,0xd
c000211b:	0f b7 c6             	movzx  eax,si
c000211e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002123:	74 09                	je     c000212e <put_lfn+0x4b>
c0002125:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002129:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000212d:	43                   	inc    ebx
c000212e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002131:	0f b7 ee             	movzx  ebp,si
c0002134:	0f b6 80 00 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b00]
c000213b:	89 ea                	mov    edx,ebp
c000213d:	01 f8                	add    eax,edi
c000213f:	e8 d0 fc ff ff       	call   c0001e14 <st_word>
c0002144:	85 ed                	test   ebp,ebp
c0002146:	75 05                	jne    c000214d <put_lfn+0x6a>
c0002148:	be ff ff 00 00       	mov    esi,0xffff
c000214d:	ff 04 24             	inc    DWORD PTR [esp]
c0002150:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002154:	75 c5                	jne    c000211b <put_lfn+0x38>
c0002156:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000215c:	74 0b                	je     c0002169 <put_lfn+0x86>
c000215e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002162:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002167:	75 07                	jne    c0002170 <put_lfn+0x8d>
c0002169:	83 c9 40             	or     ecx,0x40
c000216c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002170:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002174:	88 07                	mov    BYTE PTR [edi],al
c0002176:	83 c4 0c             	add    esp,0xc
c0002179:	5b                   	pop    ebx
c000217a:	5e                   	pop    esi
c000217b:	5f                   	pop    edi
c000217c:	5d                   	pop    ebp
c000217d:	c3                   	ret    

c000217e <gen_numname>:
c000217e:	57                   	push   edi
c000217f:	89 cf                	mov    edi,ecx
c0002181:	56                   	push   esi
c0002182:	b9 0b 00 00 00       	mov    ecx,0xb
c0002187:	53                   	push   ebx
c0002188:	89 c6                	mov    esi,eax
c000218a:	83 ec 10             	sub    esp,0x10
c000218d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002191:	e8 85 fc ff ff       	call   c0001e1b <mem_cpy>
c0002196:	83 fb 05             	cmp    ebx,0x5
c0002199:	76 30                	jbe    c00021cb <gen_numname+0x4d>
c000219b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000219e:	66 85 c0             	test   ax,ax
c00021a1:	74 28                	je     c00021cb <gen_numname+0x4d>
c00021a3:	83 c7 02             	add    edi,0x2
c00021a6:	ba 10 00 00 00       	mov    edx,0x10
c00021ab:	89 c1                	mov    ecx,eax
c00021ad:	01 db                	add    ebx,ebx
c00021af:	c1 e0 10             	shl    eax,0x10
c00021b2:	83 e1 01             	and    ecx,0x1
c00021b5:	c1 e8 11             	shr    eax,0x11
c00021b8:	01 cb                	add    ebx,ecx
c00021ba:	0f ba e3 10          	bt     ebx,0x10
c00021be:	73 06                	jae    c00021c6 <gen_numname+0x48>
c00021c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021c6:	4a                   	dec    edx
c00021c7:	75 e2                	jne    c00021ab <gen_numname+0x2d>
c00021c9:	eb d0                	jmp    c000219b <gen_numname+0x1d>
c00021cb:	b8 07 00 00 00       	mov    eax,0x7
c00021d0:	89 d9                	mov    ecx,ebx
c00021d2:	83 e1 0f             	and    ecx,0xf
c00021d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00021d8:	89 fa                	mov    edx,edi
c00021da:	83 ff 39             	cmp    edi,0x39
c00021dd:	76 03                	jbe    c00021e2 <gen_numname+0x64>
c00021df:	8d 51 37             	lea    edx,[ecx+0x37]
c00021e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021e9:	89 da                	mov    edx,ebx
c00021eb:	c1 ea 04             	shr    edx,0x4
c00021ee:	83 fb 0f             	cmp    ebx,0xf
c00021f1:	76 06                	jbe    c00021f9 <gen_numname+0x7b>
c00021f3:	89 c8                	mov    eax,ecx
c00021f5:	89 d3                	mov    ebx,edx
c00021f7:	eb d7                	jmp    c00021d0 <gen_numname+0x52>
c00021f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021fe:	31 d2                	xor    edx,edx
c0002200:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002203:	8d 04 16             	lea    eax,[esi+edx*1]
c0002206:	39 ca                	cmp    edx,ecx
c0002208:	73 19                	jae    c0002223 <gen_numname+0xa5>
c000220a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000220d:	83 f8 20             	cmp    eax,0x20
c0002210:	74 11                	je     c0002223 <gen_numname+0xa5>
c0002212:	e8 58 fc ff ff       	call   c0001e6f <dbc_1st>
c0002217:	85 c0                	test   eax,eax
c0002219:	74 05                	je     c0002220 <gen_numname+0xa2>
c000221b:	39 d3                	cmp    ebx,edx
c000221d:	74 04                	je     c0002223 <gen_numname+0xa5>
c000221f:	42                   	inc    edx
c0002220:	42                   	inc    edx
c0002221:	eb e0                	jmp    c0002203 <gen_numname+0x85>
c0002223:	b0 20                	mov    al,0x20
c0002225:	83 f9 07             	cmp    ecx,0x7
c0002228:	77 05                	ja     c000222f <gen_numname+0xb1>
c000222a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000222e:	41                   	inc    ecx
c000222f:	42                   	inc    edx
c0002230:	83 fa 07             	cmp    edx,0x7
c0002233:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002237:	76 ea                	jbe    c0002223 <gen_numname+0xa5>
c0002239:	83 c4 10             	add    esp,0x10
c000223c:	5b                   	pop    ebx
c000223d:	5e                   	pop    esi
c000223e:	5f                   	pop    edi
c000223f:	c3                   	ret    

c0002240 <sum_sfn>:
c0002240:	53                   	push   ebx
c0002241:	31 c9                	xor    ecx,ecx
c0002243:	31 db                	xor    ebx,ebx
c0002245:	0f b6 d1             	movzx  edx,cl
c0002248:	d1 ea                	shr    edx,1
c000224a:	c1 e1 07             	shl    ecx,0x7
c000224d:	09 ca                	or     edx,ecx
c000224f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002252:	01 ca                	add    edx,ecx
c0002254:	43                   	inc    ebx
c0002255:	88 d1                	mov    cl,dl
c0002257:	83 fb 0b             	cmp    ebx,0xb
c000225a:	75 e9                	jne    c0002245 <sum_sfn+0x5>
c000225c:	88 d0                	mov    al,dl
c000225e:	5b                   	pop    ebx
c000225f:	c3                   	ret    

c0002260 <get_ldnumber>:
c0002260:	55                   	push   ebp
c0002261:	57                   	push   edi
c0002262:	56                   	push   esi
c0002263:	83 ce ff             	or     esi,0xffffffff
c0002266:	53                   	push   ebx
c0002267:	8b 10                	mov    edx,DWORD PTR [eax]
c0002269:	85 d2                	test   edx,edx
c000226b:	74 39                	je     c00022a6 <get_ldnumber+0x46>
c000226d:	89 c5                	mov    ebp,eax
c000226f:	89 d1                	mov    ecx,edx
c0002271:	41                   	inc    ecx
c0002272:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002276:	80 79 ff 1f          	cmp    BYTE PTR [ecx-0x1],0x1f
c000227a:	76 05                	jbe    c0002281 <get_ldnumber+0x21>
c000227c:	83 fb 3a             	cmp    ebx,0x3a
c000227f:	75 f0                	jne    c0002271 <get_ldnumber+0x11>
c0002281:	31 f6                	xor    esi,esi
c0002283:	83 fb 3a             	cmp    ebx,0x3a
c0002286:	75 1e                	jne    c00022a6 <get_ldnumber+0x46>
c0002288:	8a 1a                	mov    bl,BYTE PTR [edx]
c000228a:	83 ce ff             	or     esi,0xffffffff
c000228d:	8d 7b d0             	lea    edi,[ebx-0x30]
c0002290:	89 f8                	mov    eax,edi
c0002292:	3c 09                	cmp    al,0x9
c0002294:	77 10                	ja     c00022a6 <get_ldnumber+0x46>
c0002296:	83 c2 02             	add    edx,0x2
c0002299:	39 d1                	cmp    ecx,edx
c000229b:	75 09                	jne    c00022a6 <get_ldnumber+0x46>
c000229d:	0f be f3             	movsx  esi,bl
c00022a0:	83 ee 30             	sub    esi,0x30
c00022a3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022a6:	5b                   	pop    ebx
c00022a7:	89 f0                	mov    eax,esi
c00022a9:	5e                   	pop    esi
c00022aa:	5f                   	pop    edi
c00022ab:	5d                   	pop    ebp
c00022ac:	c3                   	ret    

c00022ad <validate>:
c00022ad:	56                   	push   esi
c00022ae:	89 d6                	mov    esi,edx
c00022b0:	53                   	push   ebx
c00022b1:	85 c0                	test   eax,eax
c00022b3:	51                   	push   ecx
c00022b4:	75 09                	jne    c00022bf <validate+0x12>
c00022b6:	b8 09 00 00 00       	mov    eax,0x9
c00022bb:	31 c9                	xor    ecx,ecx
c00022bd:	eb 2e                	jmp    c00022ed <validate+0x40>
c00022bf:	89 c3                	mov    ebx,eax
c00022c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00022c3:	85 c0                	test   eax,eax
c00022c5:	74 ef                	je     c00022b6 <validate+0x9>
c00022c7:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022ca:	74 ea                	je     c00022b6 <validate+0x9>
c00022cc:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022cf:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022d3:	75 e1                	jne    c00022b6 <validate+0x9>
c00022d5:	83 ec 0c             	sub    esp,0xc
c00022d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022dc:	50                   	push   eax
c00022dd:	e8 bc fa ff ff       	call   c0001d9e <disk_status>
c00022e2:	83 c4 10             	add    esp,0x10
c00022e5:	a8 01                	test   al,0x1
c00022e7:	75 cd                	jne    c00022b6 <validate+0x9>
c00022e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022eb:	31 c0                	xor    eax,eax
c00022ed:	89 0e                	mov    DWORD PTR [esi],ecx
c00022ef:	5a                   	pop    edx
c00022f0:	5b                   	pop    ebx
c00022f1:	5e                   	pop    esi
c00022f2:	c3                   	ret    

c00022f3 <sync_window>:
c00022f3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022f7:	74 58                	je     c0002351 <sync_window+0x5e>
c00022f9:	56                   	push   esi
c00022fa:	8d 70 34             	lea    esi,[eax+0x34]
c00022fd:	53                   	push   ebx
c00022fe:	89 c3                	mov    ebx,eax
c0002300:	51                   	push   ecx
c0002301:	6a 01                	push   0x1
c0002303:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002306:	56                   	push   esi
c0002307:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000230b:	50                   	push   eax
c000230c:	e8 a9 fa ff ff       	call   c0001dba <disk_write>
c0002311:	83 c4 10             	add    esp,0x10
c0002314:	ba 01 00 00 00       	mov    edx,0x1
c0002319:	85 c0                	test   eax,eax
c000231b:	75 2e                	jne    c000234b <sync_window+0x58>
c000231d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002320:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002323:	89 c1                	mov    ecx,eax
c0002325:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002329:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000232c:	39 d1                	cmp    ecx,edx
c000232e:	73 19                	jae    c0002349 <sync_window+0x56>
c0002330:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002334:	75 13                	jne    c0002349 <sync_window+0x56>
c0002336:	6a 01                	push   0x1
c0002338:	01 d0                	add    eax,edx
c000233a:	50                   	push   eax
c000233b:	56                   	push   esi
c000233c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002340:	50                   	push   eax
c0002341:	e8 74 fa ff ff       	call   c0001dba <disk_write>
c0002346:	83 c4 10             	add    esp,0x10
c0002349:	31 d2                	xor    edx,edx
c000234b:	89 d0                	mov    eax,edx
c000234d:	5a                   	pop    edx
c000234e:	5b                   	pop    ebx
c000234f:	5e                   	pop    esi
c0002350:	c3                   	ret    
c0002351:	31 d2                	xor    edx,edx
c0002353:	89 d0                	mov    eax,edx
c0002355:	c3                   	ret    

c0002356 <move_window>:
c0002356:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002359:	74 3a                	je     c0002395 <move_window+0x3f>
c000235b:	56                   	push   esi
c000235c:	89 d6                	mov    esi,edx
c000235e:	53                   	push   ebx
c000235f:	89 c3                	mov    ebx,eax
c0002361:	51                   	push   ecx
c0002362:	e8 8c ff ff ff       	call   c00022f3 <sync_window>
c0002367:	85 c0                	test   eax,eax
c0002369:	75 2d                	jne    c0002398 <move_window+0x42>
c000236b:	6a 01                	push   0x1
c000236d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002370:	56                   	push   esi
c0002371:	50                   	push   eax
c0002372:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002376:	50                   	push   eax
c0002377:	e8 28 fa ff ff       	call   c0001da4 <disk_read>
c000237c:	89 c2                	mov    edx,eax
c000237e:	83 c4 10             	add    esp,0x10
c0002381:	31 c0                	xor    eax,eax
c0002383:	85 d2                	test   edx,edx
c0002385:	ba ff ff ff ff       	mov    edx,0xffffffff
c000238a:	0f 45 f2             	cmovne esi,edx
c000238d:	0f 95 c0             	setne  al
c0002390:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002393:	eb 03                	jmp    c0002398 <move_window+0x42>
c0002395:	31 c0                	xor    eax,eax
c0002397:	c3                   	ret    
c0002398:	5a                   	pop    edx
c0002399:	5b                   	pop    ebx
c000239a:	5e                   	pop    esi
c000239b:	c3                   	ret    

c000239c <check_fs>:
c000239c:	53                   	push   ebx
c000239d:	89 c3                	mov    ebx,eax
c000239f:	83 ec 08             	sub    esp,0x8
c00023a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023a6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023ad:	e8 a4 ff ff ff       	call   c0002356 <move_window>
c00023b2:	ba 04 00 00 00       	mov    edx,0x4
c00023b7:	85 c0                	test   eax,eax
c00023b9:	75 68                	jne    c0002423 <check_fs+0x87>
c00023bb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023c1:	e8 29 fa ff ff       	call   c0001def <ld_word>
c00023c6:	ba 03 00 00 00       	mov    edx,0x3
c00023cb:	66 3d 55 aa          	cmp    ax,0xaa55
c00023cf:	75 52                	jne    c0002423 <check_fs+0x87>
c00023d1:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023d4:	8d 50 18             	lea    edx,[eax+0x18]
c00023d7:	80 fa 01             	cmp    dl,0x1
c00023da:	76 09                	jbe    c00023e5 <check_fs+0x49>
c00023dc:	ba 02 00 00 00       	mov    edx,0x2
c00023e1:	3c eb                	cmp    al,0xeb
c00023e3:	75 3e                	jne    c0002423 <check_fs+0x87>
c00023e5:	ba e4 15 02 c0       	mov    edx,0xc00215e4
c00023ea:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023ed:	b9 03 00 00 00       	mov    ecx,0x3
c00023f2:	e8 44 fa ff ff       	call   c0001e3b <mem_cmp>
c00023f7:	31 d2                	xor    edx,edx
c00023f9:	85 c0                	test   eax,eax
c00023fb:	74 26                	je     c0002423 <check_fs+0x87>
c00023fd:	ba bc f3 01 c0       	mov    edx,0xc001f3bc
c0002402:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002408:	b9 05 00 00 00       	mov    ecx,0x5
c000240d:	e8 29 fa ff ff       	call   c0001e3b <mem_cmp>
c0002412:	31 d2                	xor    edx,edx
c0002414:	85 c0                	test   eax,eax
c0002416:	74 0b                	je     c0002423 <check_fs+0x87>
c0002418:	31 d2                	xor    edx,edx
c000241a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000241e:	0f 95 c2             	setne  dl
c0002421:	01 d2                	add    edx,edx
c0002423:	83 c4 08             	add    esp,0x8
c0002426:	89 d0                	mov    eax,edx
c0002428:	5b                   	pop    ebx
c0002429:	c3                   	ret    

c000242a <find_volume>:
c000242a:	55                   	push   ebp
c000242b:	57                   	push   edi
c000242c:	89 c7                	mov    edi,eax
c000242e:	56                   	push   esi
c000242f:	89 d6                	mov    esi,edx
c0002431:	53                   	push   ebx
c0002432:	31 d2                	xor    edx,edx
c0002434:	83 ec 2c             	sub    esp,0x2c
c0002437:	e8 60 ff ff ff       	call   c000239c <check_fs>
c000243c:	85 f6                	test   esi,esi
c000243e:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0002443:	83 f8 02             	cmp    eax,0x2
c0002446:	74 09                	je     c0002451 <find_volume+0x27>
c0002448:	77 5f                	ja     c00024a9 <find_volume+0x7f>
c000244a:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c000244f:	75 58                	jne    c00024a9 <find_volume+0x7f>
c0002451:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c0002457:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c000245d:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0002461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002465:	89 e8                	mov    eax,ebp
c0002467:	83 c5 10             	add    ebp,0x10
c000246a:	e8 8d f9 ff ff       	call   c0001dfc <ld_dword>
c000246f:	83 c3 04             	add    ebx,0x4
c0002472:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0002475:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002479:	75 ea                	jne    c0002465 <find_volume+0x3b>
c000247b:	83 fe 01             	cmp    esi,0x1
c000247e:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002483:	83 d6 ff             	adc    esi,0xffffffff
c0002486:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c000248a:	b8 03 00 00 00       	mov    eax,0x3
c000248f:	85 d2                	test   edx,edx
c0002491:	74 07                	je     c000249a <find_volume+0x70>
c0002493:	89 f8                	mov    eax,edi
c0002495:	e8 02 ff ff ff       	call   c000239c <check_fs>
c000249a:	83 f8 01             	cmp    eax,0x1
c000249d:	76 0a                	jbe    c00024a9 <find_volume+0x7f>
c000249f:	85 db                	test   ebx,ebx
c00024a1:	74 06                	je     c00024a9 <find_volume+0x7f>
c00024a3:	46                   	inc    esi
c00024a4:	83 fe 03             	cmp    esi,0x3
c00024a7:	76 dd                	jbe    c0002486 <find_volume+0x5c>
c00024a9:	83 c4 2c             	add    esp,0x2c
c00024ac:	5b                   	pop    ebx
c00024ad:	5e                   	pop    esi
c00024ae:	5f                   	pop    edi
c00024af:	5d                   	pop    ebp
c00024b0:	c3                   	ret    

c00024b1 <mount_volume>:
c00024b1:	55                   	push   ebp
c00024b2:	89 d5                	mov    ebp,edx
c00024b4:	57                   	push   edi
c00024b5:	89 cf                	mov    edi,ecx
c00024b7:	56                   	push   esi
c00024b8:	53                   	push   ebx
c00024b9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024be:	83 ec 1c             	sub    esp,0x1c
c00024c1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024c7:	e8 94 fd ff ff       	call   c0002260 <get_ldnumber>
c00024cc:	85 c0                	test   eax,eax
c00024ce:	0f 88 c5 02 00 00    	js     c0002799 <mount_volume+0x2e8>
c00024d4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024db:	89 c2                	mov    edx,eax
c00024dd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024e2:	85 f6                	test   esi,esi
c00024e4:	0f 84 af 02 00 00    	je     c0002799 <mount_volume+0x2e8>
c00024ea:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024ed:	83 e7 fe             	and    edi,0xfffffffe
c00024f0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024f3:	74 3a                	je     c000252f <mount_volume+0x7e>
c00024f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024f8:	83 ec 0c             	sub    esp,0xc
c00024fb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024ff:	50                   	push   eax
c0002500:	e8 99 f8 ff ff       	call   c0001d9e <disk_status>
c0002505:	83 c4 10             	add    esp,0x10
c0002508:	a8 01                	test   al,0x1
c000250a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000250d:	75 20                	jne    c000252f <mount_volume+0x7e>
c000250f:	31 db                	xor    ebx,ebx
c0002511:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002517:	0f 84 7c 02 00 00    	je     c0002799 <mount_volume+0x2e8>
c000251d:	a8 04                	test   al,0x4
c000251f:	0f 84 74 02 00 00    	je     c0002799 <mount_volume+0x2e8>
c0002525:	bb 0a 00 00 00       	mov    ebx,0xa
c000252a:	e9 6a 02 00 00       	jmp    c0002799 <mount_volume+0x2e8>
c000252f:	83 ec 0c             	sub    esp,0xc
c0002532:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002535:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002538:	bb 03 00 00 00       	mov    ebx,0x3
c000253d:	0f b6 c2             	movzx  eax,dl
c0002540:	50                   	push   eax
c0002541:	e8 5b f8 ff ff       	call   c0001da1 <disk_initialize>
c0002546:	83 c4 10             	add    esp,0x10
c0002549:	a8 01                	test   al,0x1
c000254b:	0f 85 48 02 00 00    	jne    c0002799 <mount_volume+0x2e8>
c0002551:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002557:	74 04                	je     c000255d <mount_volume+0xac>
c0002559:	a8 04                	test   al,0x4
c000255b:	75 c8                	jne    c0002525 <mount_volume+0x74>
c000255d:	31 d2                	xor    edx,edx
c000255f:	89 f0                	mov    eax,esi
c0002561:	e8 c4 fe ff ff       	call   c000242a <find_volume>
c0002566:	bb 01 00 00 00       	mov    ebx,0x1
c000256b:	83 f8 04             	cmp    eax,0x4
c000256e:	0f 84 25 02 00 00    	je     c0002799 <mount_volume+0x2e8>
c0002574:	83 f8 01             	cmp    eax,0x1
c0002577:	76 0a                	jbe    c0002583 <mount_volume+0xd2>
c0002579:	bb 0d 00 00 00       	mov    ebx,0xd
c000257e:	e9 16 02 00 00       	jmp    c0002799 <mount_volume+0x2e8>
c0002583:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002586:	e8 64 f8 ff ff       	call   c0001def <ld_word>
c000258b:	66 3d 00 02          	cmp    ax,0x200
c000258f:	75 e8                	jne    c0002579 <mount_volume+0xc8>
c0002591:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002594:	e8 56 f8 ff ff       	call   c0001def <ld_word>
c0002599:	0f b7 c0             	movzx  eax,ax
c000259c:	89 04 24             	mov    DWORD PTR [esp],eax
c000259f:	85 c0                	test   eax,eax
c00025a1:	75 0b                	jne    c00025ae <mount_volume+0xfd>
c00025a3:	8d 46 58             	lea    eax,[esi+0x58]
c00025a6:	e8 51 f8 ff ff       	call   c0001dfc <ld_dword>
c00025ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00025ae:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00025b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00025b8:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025bb:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00025be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025c2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025c9:	48                   	dec    eax
c00025ca:	3c 01                	cmp    al,0x1
c00025cc:	77 ab                	ja     c0002579 <mount_volume+0xc8>
c00025ce:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025d2:	89 c3                	mov    ebx,eax
c00025d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025d8:	66 85 c0             	test   ax,ax
c00025db:	74 9c                	je     c0002579 <mount_volume+0xc8>
c00025dd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e0:	85 d8                	test   eax,ebx
c00025e2:	75 95                	jne    c0002579 <mount_volume+0xc8>
c00025e4:	8d 46 45             	lea    eax,[esi+0x45]
c00025e7:	e8 03 f8 ff ff       	call   c0001def <ld_word>
c00025ec:	89 c7                	mov    edi,eax
c00025ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025f2:	a8 0f                	test   al,0xf
c00025f4:	75 83                	jne    c0002579 <mount_volume+0xc8>
c00025f6:	8d 46 47             	lea    eax,[esi+0x47]
c00025f9:	e8 f1 f7 ff ff       	call   c0001def <ld_word>
c00025fe:	0f b7 e8             	movzx  ebp,ax
c0002601:	85 ed                	test   ebp,ebp
c0002603:	75 0a                	jne    c000260f <mount_volume+0x15e>
c0002605:	8d 46 54             	lea    eax,[esi+0x54]
c0002608:	e8 ef f7 ff ff       	call   c0001dfc <ld_dword>
c000260d:	89 c5                	mov    ebp,eax
c000260f:	8d 46 42             	lea    eax,[esi+0x42]
c0002612:	e8 d8 f7 ff ff       	call   c0001def <ld_word>
c0002617:	0f b7 c8             	movzx  ecx,ax
c000261a:	85 c9                	test   ecx,ecx
c000261c:	0f 84 57 ff ff ff    	je     c0002579 <mount_volume+0xc8>
c0002622:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002627:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000262b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000262f:	0f b7 c7             	movzx  eax,di
c0002632:	c1 e8 04             	shr    eax,0x4
c0002635:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002639:	01 c8                	add    eax,ecx
c000263b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000263f:	39 c5                	cmp    ebp,eax
c0002641:	0f 82 32 ff ff ff    	jb     c0002579 <mount_volume+0xc8>
c0002647:	29 c5                	sub    ebp,eax
c0002649:	31 d2                	xor    edx,edx
c000264b:	89 e8                	mov    eax,ebp
c000264d:	f7 f3                	div    ebx
c000264f:	39 dd                	cmp    ebp,ebx
c0002651:	0f 82 22 ff ff ff    	jb     c0002579 <mount_volume+0xc8>
c0002657:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000265c:	0f 87 17 ff ff ff    	ja     c0002579 <mount_volume+0xc8>
c0002662:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002667:	0f 86 1d 01 00 00    	jbe    c000278a <mount_volume+0x2d9>
c000266d:	bb 03 00 00 00       	mov    ebx,0x3
c0002672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002676:	8d 68 02             	lea    ebp,[eax+0x2]
c0002679:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000267d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002681:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002684:	01 c8                	add    eax,ecx
c0002686:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002689:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000268c:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000268f:	83 fb 03             	cmp    ebx,0x3
c0002692:	75 23                	jne    c00026b7 <mount_volume+0x206>
c0002694:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002697:	e8 53 f7 ff ff       	call   c0001def <ld_word>
c000269c:	09 c7                	or     edi,eax
c000269e:	66 85 ff             	test   di,di
c00026a1:	0f 85 d2 fe ff ff    	jne    c0002579 <mount_volume+0xc8>
c00026a7:	c1 e5 02             	shl    ebp,0x2
c00026aa:	8d 46 60             	lea    eax,[esi+0x60]
c00026ad:	e8 4a f7 ff ff       	call   c0001dfc <ld_dword>
c00026b2:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026b5:	eb 25                	jmp    c00026dc <mount_volume+0x22b>
c00026b7:	66 85 ff             	test   di,di
c00026ba:	0f 84 b9 fe ff ff    	je     c0002579 <mount_volume+0xc8>
c00026c0:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026c8:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026cc:	83 e5 01             	and    ebp,0x1
c00026cf:	d1 ea                	shr    edx,1
c00026d1:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026d4:	01 d5                	add    ebp,edx
c00026d6:	83 fb 02             	cmp    ebx,0x2
c00026d9:	0f 44 ef             	cmove  ebp,edi
c00026dc:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026e2:	c1 ed 09             	shr    ebp,0x9
c00026e5:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026e8:	0f 87 8b fe ff ff    	ja     c0002579 <mount_volume+0xc8>
c00026ee:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026f5:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026fc:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002700:	83 fb 03             	cmp    ebx,0x3
c0002703:	75 6e                	jne    c0002773 <mount_volume+0x2c2>
c0002705:	8d 46 64             	lea    eax,[esi+0x64]
c0002708:	e8 e2 f6 ff ff       	call   c0001def <ld_word>
c000270d:	66 48                	dec    ax
c000270f:	75 62                	jne    c0002773 <mount_volume+0x2c2>
c0002711:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002715:	89 f0                	mov    eax,esi
c0002717:	42                   	inc    edx
c0002718:	e8 39 fc ff ff       	call   c0002356 <move_window>
c000271d:	85 c0                	test   eax,eax
c000271f:	75 52                	jne    c0002773 <mount_volume+0x2c2>
c0002721:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002725:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000272b:	e8 bf f6 ff ff       	call   c0001def <ld_word>
c0002730:	66 3d 55 aa          	cmp    ax,0xaa55
c0002734:	75 3d                	jne    c0002773 <mount_volume+0x2c2>
c0002736:	8d 46 34             	lea    eax,[esi+0x34]
c0002739:	e8 be f6 ff ff       	call   c0001dfc <ld_dword>
c000273e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002743:	75 2e                	jne    c0002773 <mount_volume+0x2c2>
c0002745:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000274b:	e8 ac f6 ff ff       	call   c0001dfc <ld_dword>
c0002750:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002755:	75 1c                	jne    c0002773 <mount_volume+0x2c2>
c0002757:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000275d:	e8 9a f6 ff ff       	call   c0001dfc <ld_dword>
c0002762:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002765:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000276b:	e8 8c f6 ff ff       	call   c0001dfc <ld_dword>
c0002770:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002773:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002779:	88 1e                	mov    BYTE PTR [esi],bl
c000277b:	40                   	inc    eax
c000277c:	31 db                	xor    ebx,ebx
c000277e:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002784:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002788:	eb 0f                	jmp    c0002799 <mount_volume+0x2e8>
c000278a:	3d f6 0f 00 00       	cmp    eax,0xff6
c000278f:	19 db                	sbb    ebx,ebx
c0002791:	83 c3 02             	add    ebx,0x2
c0002794:	e9 d9 fe ff ff       	jmp    c0002672 <mount_volume+0x1c1>
c0002799:	83 c4 1c             	add    esp,0x1c
c000279c:	89 d8                	mov    eax,ebx
c000279e:	5b                   	pop    ebx
c000279f:	5e                   	pop    esi
c00027a0:	5f                   	pop    edi
c00027a1:	5d                   	pop    ebp
c00027a2:	c3                   	ret    

c00027a3 <put_fat>:
c00027a3:	55                   	push   ebp
c00027a4:	bd 02 00 00 00       	mov    ebp,0x2
c00027a9:	57                   	push   edi
c00027aa:	56                   	push   esi
c00027ab:	53                   	push   ebx
c00027ac:	83 ec 1c             	sub    esp,0x1c
c00027af:	83 fa 01             	cmp    edx,0x1
c00027b2:	0f 86 38 01 00 00    	jbe    c00028f0 <put_fat+0x14d>
c00027b8:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027bb:	0f 86 2f 01 00 00    	jbe    c00028f0 <put_fat+0x14d>
c00027c1:	89 c6                	mov    esi,eax
c00027c3:	89 cf                	mov    edi,ecx
c00027c5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027c8:	89 d3                	mov    ebx,edx
c00027ca:	83 f8 02             	cmp    eax,0x2
c00027cd:	0f 84 b1 00 00 00    	je     c0002884 <put_fat+0xe1>
c00027d3:	83 f8 03             	cmp    eax,0x3
c00027d6:	0f 84 d5 00 00 00    	je     c00028b1 <put_fat+0x10e>
c00027dc:	48                   	dec    eax
c00027dd:	0f 85 0d 01 00 00    	jne    c00028f0 <put_fat+0x14d>
c00027e3:	89 d1                	mov    ecx,edx
c00027e5:	89 f0                	mov    eax,esi
c00027e7:	d1 e9                	shr    ecx,1
c00027e9:	01 d1                	add    ecx,edx
c00027eb:	89 ca                	mov    edx,ecx
c00027ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027f1:	c1 ea 09             	shr    edx,0x9
c00027f4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027f7:	e8 5a fb ff ff       	call   c0002356 <move_window>
c00027fc:	89 c5                	mov    ebp,eax
c00027fe:	85 c0                	test   eax,eax
c0002800:	0f 85 ea 00 00 00    	jne    c00028f0 <put_fat+0x14d>
c0002806:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000280a:	8d 46 34             	lea    eax,[esi+0x34]
c000280d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002811:	8d 41 01             	lea    eax,[ecx+0x1]
c0002814:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000281a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000281e:	83 e3 01             	and    ebx,0x1
c0002821:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002825:	89 f8                	mov    eax,edi
c0002827:	74 11                	je     c000283a <put_fat+0x97>
c0002829:	89 f8                	mov    eax,edi
c000282b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000282d:	c1 e0 04             	shl    eax,0x4
c0002830:	83 e2 0f             	and    edx,0xf
c0002833:	25 f0 0f 00 00       	and    eax,0xff0
c0002838:	09 d0                	or     eax,edx
c000283a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000283e:	88 01                	mov    BYTE PTR [ecx],al
c0002840:	c1 ea 09             	shr    edx,0x9
c0002843:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002847:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000284a:	89 f0                	mov    eax,esi
c000284c:	e8 05 fb ff ff       	call   c0002356 <move_window>
c0002851:	89 c5                	mov    ebp,eax
c0002853:	85 c0                	test   eax,eax
c0002855:	0f 85 95 00 00 00    	jne    c00028f0 <put_fat+0x14d>
c000285b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000285f:	25 ff 01 00 00       	and    eax,0x1ff
c0002864:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002868:	85 db                	test   ebx,ebx
c000286a:	74 07                	je     c0002873 <put_fat+0xd0>
c000286c:	c1 ef 04             	shr    edi,0x4
c000286f:	89 f9                	mov    ecx,edi
c0002871:	eb 0d                	jmp    c0002880 <put_fat+0xdd>
c0002873:	c1 ef 08             	shr    edi,0x8
c0002876:	8a 08                	mov    cl,BYTE PTR [eax]
c0002878:	83 e1 f0             	and    ecx,0xfffffff0
c000287b:	83 e7 0f             	and    edi,0xf
c000287e:	09 f9                	or     ecx,edi
c0002880:	88 08                	mov    BYTE PTR [eax],cl
c0002882:	eb 27                	jmp    c00028ab <put_fat+0x108>
c0002884:	c1 ea 08             	shr    edx,0x8
c0002887:	89 f0                	mov    eax,esi
c0002889:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000288c:	e8 c5 fa ff ff       	call   c0002356 <move_window>
c0002891:	89 c5                	mov    ebp,eax
c0002893:	85 c0                	test   eax,eax
c0002895:	75 59                	jne    c00028f0 <put_fat+0x14d>
c0002897:	01 db                	add    ebx,ebx
c0002899:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000289f:	0f b7 d7             	movzx  edx,di
c00028a2:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028a6:	e8 69 f5 ff ff       	call   c0001e14 <st_word>
c00028ab:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028af:	eb 3f                	jmp    c00028f0 <put_fat+0x14d>
c00028b1:	c1 ea 07             	shr    edx,0x7
c00028b4:	89 f0                	mov    eax,esi
c00028b6:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b9:	e8 98 fa ff ff       	call   c0002356 <move_window>
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	85 c0                	test   eax,eax
c00028c2:	75 2c                	jne    c00028f0 <put_fat+0x14d>
c00028c4:	c1 e3 02             	shl    ebx,0x2
c00028c7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028cd:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028d3:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028d7:	89 d8                	mov    eax,ebx
c00028d9:	e8 1e f5 ff ff       	call   c0001dfc <ld_dword>
c00028de:	25 00 00 00 f0       	and    eax,0xf0000000
c00028e3:	09 f8                	or     eax,edi
c00028e5:	89 c2                	mov    edx,eax
c00028e7:	89 d8                	mov    eax,ebx
c00028e9:	e8 2a f5 ff ff       	call   c0001e18 <st_dword>
c00028ee:	eb bb                	jmp    c00028ab <put_fat+0x108>
c00028f0:	83 c4 1c             	add    esp,0x1c
c00028f3:	89 e8                	mov    eax,ebp
c00028f5:	5b                   	pop    ebx
c00028f6:	5e                   	pop    esi
c00028f7:	5f                   	pop    edi
c00028f8:	5d                   	pop    ebp
c00028f9:	c3                   	ret    

c00028fa <dir_clear>:
c00028fa:	55                   	push   ebp
c00028fb:	57                   	push   edi
c00028fc:	56                   	push   esi
c00028fd:	89 c6                	mov    esi,eax
c00028ff:	53                   	push   ebx
c0002900:	83 ec 1c             	sub    esp,0x1c
c0002903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002907:	e8 e7 f9 ff ff       	call   c00022f3 <sync_window>
c000290c:	85 c0                	test   eax,eax
c000290e:	0f 85 c1 00 00 00    	jne    c00029d5 <dir_clear+0xdb>
c0002914:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002918:	89 f0                	mov    eax,esi
c000291a:	e8 27 f7 ff ff       	call   c0002046 <clst2sect>
c000291f:	31 d2                	xor    edx,edx
c0002921:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002924:	89 c5                	mov    ebp,eax
c0002926:	b9 00 02 00 00       	mov    ecx,0x200
c000292b:	8d 46 34             	lea    eax,[esi+0x34]
c000292e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002932:	e8 f9 f4 ff ff       	call   c0001e30 <mem_set>
c0002937:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000293b:	c1 e3 09             	shl    ebx,0x9
c000293e:	b8 00 80 00 00       	mov    eax,0x8000
c0002943:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002949:	0f 47 d8             	cmova  ebx,eax
c000294c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002952:	76 16                	jbe    c000296a <dir_clear+0x70>
c0002954:	83 ec 0c             	sub    esp,0xc
c0002957:	53                   	push   ebx
c0002958:	e8 cb 32 00 00       	call   c0005c28 <ff_memalloc>
c000295d:	83 c4 10             	add    esp,0x10
c0002960:	89 c7                	mov    edi,eax
c0002962:	85 c0                	test   eax,eax
c0002964:	75 76                	jne    c00029dc <dir_clear+0xe2>
c0002966:	d1 eb                	shr    ebx,1
c0002968:	eb e2                	jmp    c000294c <dir_clear+0x52>
c000296a:	31 db                	xor    ebx,ebx
c000296c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002970:	39 d8                	cmp    eax,ebx
c0002972:	76 53                	jbe    c00029c7 <dir_clear+0xcd>
c0002974:	6a 01                	push   0x1
c0002976:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002979:	50                   	push   eax
c000297a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000297e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002982:	50                   	push   eax
c0002983:	e8 32 f4 ff ff       	call   c0001dba <disk_write>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	75 38                	jne    c00029c7 <dir_clear+0xcd>
c000298f:	43                   	inc    ebx
c0002990:	eb da                	jmp    c000296c <dir_clear+0x72>
c0002992:	52                   	push   edx
c0002993:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002996:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000299a:	50                   	push   eax
c000299b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000299f:	57                   	push   edi
c00029a0:	50                   	push   eax
c00029a1:	e8 14 f4 ff ff       	call   c0001dba <disk_write>
c00029a6:	83 c4 10             	add    esp,0x10
c00029a9:	85 c0                	test   eax,eax
c00029ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029af:	75 0a                	jne    c00029bb <dir_clear+0xc1>
c00029b1:	01 d3                	add    ebx,edx
c00029b3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029b7:	39 d8                	cmp    eax,ebx
c00029b9:	77 d7                	ja     c0002992 <dir_clear+0x98>
c00029bb:	83 ec 0c             	sub    esp,0xc
c00029be:	57                   	push   edi
c00029bf:	e8 7c 32 00 00       	call   c0005c40 <ff_memfree>
c00029c4:	83 c4 10             	add    esp,0x10
c00029c7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029cb:	39 d8                	cmp    eax,ebx
c00029cd:	0f 95 c0             	setne  al
c00029d0:	0f b6 c0             	movzx  eax,al
c00029d3:	eb 19                	jmp    c00029ee <dir_clear+0xf4>
c00029d5:	b8 01 00 00 00       	mov    eax,0x1
c00029da:	eb 12                	jmp    c00029ee <dir_clear+0xf4>
c00029dc:	89 d9                	mov    ecx,ebx
c00029de:	31 d2                	xor    edx,edx
c00029e0:	e8 4b f4 ff ff       	call   c0001e30 <mem_set>
c00029e5:	89 da                	mov    edx,ebx
c00029e7:	c1 ea 09             	shr    edx,0x9
c00029ea:	31 db                	xor    ebx,ebx
c00029ec:	eb c5                	jmp    c00029b3 <dir_clear+0xb9>
c00029ee:	83 c4 1c             	add    esp,0x1c
c00029f1:	5b                   	pop    ebx
c00029f2:	5e                   	pop    esi
c00029f3:	5f                   	pop    edi
c00029f4:	5d                   	pop    ebp
c00029f5:	c3                   	ret    

c00029f6 <create_name>:
c00029f6:	55                   	push   ebp
c00029f7:	57                   	push   edi
c00029f8:	89 d7                	mov    edi,edx
c00029fa:	56                   	push   esi
c00029fb:	31 f6                	xor    esi,esi
c00029fd:	53                   	push   ebx
c00029fe:	83 ec 3c             	sub    esp,0x3c
c0002a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a05:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0002a11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a18:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a1c:	e8 54 f4 ff ff       	call   c0001e75 <tchar2uni>
c0002a21:	89 c3                	mov    ebx,eax
c0002a23:	83 f8 ff             	cmp    eax,0xffffffff
c0002a26:	75 0a                	jne    c0002a32 <create_name+0x3c>
c0002a28:	b8 06 00 00 00       	mov    eax,0x6
c0002a2d:	e9 7d 02 00 00       	jmp    c0002caf <create_name+0x2b9>
c0002a32:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a37:	76 0c                	jbe    c0002a45 <create_name+0x4f>
c0002a39:	c1 e8 10             	shr    eax,0x10
c0002a3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002a40:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a44:	46                   	inc    esi
c0002a45:	0f b7 d3             	movzx  edx,bx
c0002a48:	89 d8                	mov    eax,ebx
c0002a4a:	83 fa 1f             	cmp    edx,0x1f
c0002a4d:	76 30                	jbe    c0002a7f <create_name+0x89>
c0002a4f:	83 fa 2f             	cmp    edx,0x2f
c0002a52:	74 2b                	je     c0002a7f <create_name+0x89>
c0002a54:	83 fa 5c             	cmp    edx,0x5c
c0002a57:	74 35                	je     c0002a8e <create_name+0x98>
c0002a59:	83 fa 7f             	cmp    edx,0x7f
c0002a5c:	77 0e                	ja     c0002a6c <create_name+0x76>
c0002a5e:	b8 c2 f3 01 c0       	mov    eax,0xc001f3c2
c0002a63:	e8 f6 f3 ff ff       	call   c0001e5e <chk_chr>
c0002a68:	85 c0                	test   eax,eax
c0002a6a:	75 bc                	jne    c0002a28 <create_name+0x32>
c0002a6c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a72:	77 b4                	ja     c0002a28 <create_name+0x32>
c0002a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a78:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a7c:	46                   	inc    esi
c0002a7d:	eb 99                	jmp    c0002a18 <create_name+0x22>
c0002a7f:	66 83 f8 1f          	cmp    ax,0x1f
c0002a83:	b3 04                	mov    bl,0x4
c0002a85:	76 1a                	jbe    c0002aa1 <create_name+0xab>
c0002a87:	eb 05                	jmp    c0002a8e <create_name+0x98>
c0002a89:	40                   	inc    eax
c0002a8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a92:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a95:	83 fa 2f             	cmp    edx,0x2f
c0002a98:	74 ef                	je     c0002a89 <create_name+0x93>
c0002a9a:	83 fa 5c             	cmp    edx,0x5c
c0002a9d:	74 ea                	je     c0002a89 <create_name+0x93>
c0002a9f:	31 db                	xor    ebx,ebx
c0002aa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002aa5:	89 07                	mov    DWORD PTR [edi],eax
c0002aa7:	85 f6                	test   esi,esi
c0002aa9:	74 16                	je     c0002ac1 <create_name+0xcb>
c0002aab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aaf:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ab4:	83 f8 20             	cmp    eax,0x20
c0002ab7:	74 05                	je     c0002abe <create_name+0xc8>
c0002ab9:	83 f8 2e             	cmp    eax,0x2e
c0002abc:	75 03                	jne    c0002ac1 <create_name+0xcb>
c0002abe:	4e                   	dec    esi
c0002abf:	eb e6                	jmp    c0002aa7 <create_name+0xb1>
c0002ac1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac5:	31 ff                	xor    edi,edi
c0002ac7:	85 f6                	test   esi,esi
c0002ac9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002acf:	0f 84 53 ff ff ff    	je     c0002a28 <create_name+0x32>
c0002ad5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad9:	8d 57 01             	lea    edx,[edi+0x1]
c0002adc:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ae0:	83 f8 20             	cmp    eax,0x20
c0002ae3:	75 04                	jne    c0002ae9 <create_name+0xf3>
c0002ae5:	89 d7                	mov    edi,edx
c0002ae7:	eb ec                	jmp    c0002ad5 <create_name+0xdf>
c0002ae9:	85 ff                	test   edi,edi
c0002aeb:	75 05                	jne    c0002af2 <create_name+0xfc>
c0002aed:	83 f8 2e             	cmp    eax,0x2e
c0002af0:	75 08                	jne    c0002afa <create_name+0x104>
c0002af2:	83 cb 03             	or     ebx,0x3
c0002af5:	eb 03                	jmp    c0002afa <create_name+0x104>
c0002af7:	4e                   	dec    esi
c0002af8:	74 0c                	je     c0002b06 <create_name+0x110>
c0002afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002afe:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b04:	75 f1                	jne    c0002af7 <create_name+0x101>
c0002b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b0a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b0f:	83 c0 20             	add    eax,0x20
c0002b12:	ba 20 00 00 00       	mov    edx,0x20
c0002b17:	e8 14 f3 ff ff       	call   c0001e30 <mem_set>
c0002b1c:	31 ed                	xor    ebp,ebp
c0002b1e:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b26:	31 c9                	xor    ecx,ecx
c0002b28:	8d 47 01             	lea    eax,[edi+0x1]
c0002b2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b33:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b37:	89 c7                	mov    edi,eax
c0002b39:	85 c0                	test   eax,eax
c0002b3b:	0f 84 1f 01 00 00    	je     c0002c60 <create_name+0x26a>
c0002b41:	83 f8 20             	cmp    eax,0x20
c0002b44:	74 0b                	je     c0002b51 <create_name+0x15b>
c0002b46:	83 f8 2e             	cmp    eax,0x2e
c0002b49:	75 0f                	jne    c0002b5a <create_name+0x164>
c0002b4b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b4f:	74 09                	je     c0002b5a <create_name+0x164>
c0002b51:	83 cb 03             	or     ebx,0x3
c0002b54:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b58:	eb ce                	jmp    c0002b28 <create_name+0x132>
c0002b5a:	3b 6c 24 14          	cmp    ebp,DWORD PTR [esp+0x14]
c0002b5e:	73 06                	jae    c0002b66 <create_name+0x170>
c0002b60:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b64:	75 38                	jne    c0002b9e <create_name+0x1a8>
c0002b66:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b6b:	75 08                	jne    c0002b75 <create_name+0x17f>
c0002b6d:	83 cb 03             	or     ebx,0x3
c0002b70:	e9 eb 00 00 00       	jmp    c0002c60 <create_name+0x26a>
c0002b75:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b79:	74 0d                	je     c0002b88 <create_name+0x192>
c0002b7b:	83 cb 03             	or     ebx,0x3
c0002b7e:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b82:	0f 87 d8 00 00 00    	ja     c0002c60 <create_name+0x26a>
c0002b88:	c1 e1 02             	shl    ecx,0x2
c0002b8b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002b8f:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002b97:	bd 08 00 00 00       	mov    ebp,0x8
c0002b9c:	eb b6                	jmp    c0002b54 <create_name+0x15e>
c0002b9e:	0f b7 c7             	movzx  eax,di
c0002ba1:	83 f8 7f             	cmp    eax,0x7f
c0002ba4:	76 6a                	jbe    c0002c10 <create_name+0x21a>
c0002ba6:	88 4c 24 1f          	mov    BYTE PTR [esp+0x1f],cl
c0002baa:	89 d9                	mov    ecx,ebx
c0002bac:	83 c9 02             	or     ecx,0x2
c0002baf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bb3:	52                   	push   edx
c0002bb4:	52                   	push   edx
c0002bb5:	68 b5 01 00 00       	push   0x1b5
c0002bba:	50                   	push   eax
c0002bbb:	e8 98 30 00 00       	call   c0005c58 <ff_uni2oem>
c0002bc0:	83 c4 10             	add    esp,0x10
c0002bc3:	89 c7                	mov    edi,eax
c0002bc5:	a8 80                	test   al,0x80
c0002bc7:	8a 4c 24 1f          	mov    cl,BYTE PTR [esp+0x1f]
c0002bcb:	74 0c                	je     c0002bd9 <create_name+0x1e3>
c0002bcd:	83 e7 7f             	and    edi,0x7f
c0002bd0:	0f b6 bf 80 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b80]
c0002bd7:	eb 2e                	jmp    c0002c07 <create_name+0x211>
c0002bd9:	0f b7 c0             	movzx  eax,ax
c0002bdc:	3d ff 00 00 00       	cmp    eax,0xff
c0002be1:	76 24                	jbe    c0002c07 <create_name+0x211>
c0002be3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002be7:	4a                   	dec    edx
c0002be8:	39 ea                	cmp    edx,ebp
c0002bea:	77 0c                	ja     c0002bf8 <create_name+0x202>
c0002bec:	83 cb 03             	or     ebx,0x3
c0002bef:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002bf3:	e9 5c ff ff ff       	jmp    c0002b54 <create_name+0x15e>
c0002bf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bfc:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c00:	88 64 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],ah
c0002c04:	45                   	inc    ebp
c0002c05:	eb 49                	jmp    c0002c50 <create_name+0x25a>
c0002c07:	66 85 ff             	test   di,di
c0002c0a:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c0e:	74 19                	je     c0002c29 <create_name+0x233>
c0002c10:	0f b7 d7             	movzx  edx,di
c0002c13:	b8 cb f3 01 c0       	mov    eax,0xc001f3cb
c0002c18:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0002c1c:	e8 3d f2 ff ff       	call   c0001e5e <chk_chr>
c0002c21:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0002c25:	85 c0                	test   eax,eax
c0002c27:	74 0a                	je     c0002c33 <create_name+0x23d>
c0002c29:	83 cb 03             	or     ebx,0x3
c0002c2c:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c31:	eb 1d                	jmp    c0002c50 <create_name+0x25a>
c0002c33:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c36:	66 83 f8 19          	cmp    ax,0x19
c0002c3a:	77 05                	ja     c0002c41 <create_name+0x24b>
c0002c3c:	83 c9 02             	or     ecx,0x2
c0002c3f:	eb 0f                	jmp    c0002c50 <create_name+0x25a>
c0002c41:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c44:	66 83 f8 19          	cmp    ax,0x19
c0002c48:	77 06                	ja     c0002c50 <create_name+0x25a>
c0002c4a:	83 c9 01             	or     ecx,0x1
c0002c4d:	83 ef 20             	sub    edi,0x20
c0002c50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c54:	89 f8                	mov    eax,edi
c0002c56:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c5a:	45                   	inc    ebp
c0002c5b:	e9 f4 fe ff ff       	jmp    c0002b54 <create_name+0x15e>
c0002c60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c64:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c68:	75 04                	jne    c0002c6e <create_name+0x278>
c0002c6a:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c73:	75 03                	jne    c0002c78 <create_name+0x282>
c0002c75:	c1 e1 02             	shl    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	83 e0 0c             	and    eax,0xc
c0002c7d:	83 f8 0c             	cmp    eax,0xc
c0002c80:	74 0a                	je     c0002c8c <create_name+0x296>
c0002c82:	89 c8                	mov    eax,ecx
c0002c84:	83 e0 03             	and    eax,0x3
c0002c87:	83 f8 03             	cmp    eax,0x3
c0002c8a:	75 05                	jne    c0002c91 <create_name+0x29b>
c0002c8c:	83 cb 02             	or     ebx,0x2
c0002c8f:	eb 15                	jmp    c0002ca6 <create_name+0x2b0>
c0002c91:	f6 c3 02             	test   bl,0x2
c0002c94:	75 10                	jne    c0002ca6 <create_name+0x2b0>
c0002c96:	f6 c1 01             	test   cl,0x1
c0002c99:	74 03                	je     c0002c9e <create_name+0x2a8>
c0002c9b:	83 cb 10             	or     ebx,0x10
c0002c9e:	80 e1 04             	and    cl,0x4
c0002ca1:	74 03                	je     c0002ca6 <create_name+0x2b0>
c0002ca3:	83 cb 08             	or     ebx,0x8
c0002ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002caa:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002cad:	31 c0                	xor    eax,eax
c0002caf:	83 c4 3c             	add    esp,0x3c
c0002cb2:	5b                   	pop    ebx
c0002cb3:	5e                   	pop    esi
c0002cb4:	5f                   	pop    edi
c0002cb5:	5d                   	pop    ebp
c0002cb6:	c3                   	ret    

c0002cb7 <cmp_lfn>:
c0002cb7:	55                   	push   ebp
c0002cb8:	57                   	push   edi
c0002cb9:	89 d7                	mov    edi,edx
c0002cbb:	56                   	push   esi
c0002cbc:	53                   	push   ebx
c0002cbd:	83 ec 1c             	sub    esp,0x1c
c0002cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cc7:	e8 23 f1 ff ff       	call   c0001def <ld_word>
c0002ccc:	66 85 c0             	test   ax,ax
c0002ccf:	74 07                	je     c0002cd8 <cmp_lfn+0x21>
c0002cd1:	31 c0                	xor    eax,eax
c0002cd3:	e9 a1 00 00 00       	jmp    c0002d79 <cmp_lfn+0xc2>
c0002cd8:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cda:	bd 01 00 00 00       	mov    ebp,0x1
c0002cdf:	83 e3 3f             	and    ebx,0x3f
c0002ce2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cea:	4b                   	dec    ebx
c0002ceb:	6b db 0d             	imul   ebx,ebx,0xd
c0002cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cf2:	0f b6 80 00 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b00]
c0002cf9:	01 f8                	add    eax,edi
c0002cfb:	e8 ef f0 ff ff       	call   c0001def <ld_word>
c0002d00:	66 85 ed             	test   bp,bp
c0002d03:	89 c6                	mov    esi,eax
c0002d05:	74 3c                	je     c0002d43 <cmp_lfn+0x8c>
c0002d07:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d0d:	77 c2                	ja     c0002cd1 <cmp_lfn+0x1a>
c0002d0f:	83 ec 0c             	sub    esp,0xc
c0002d12:	0f b7 c0             	movzx  eax,ax
c0002d15:	50                   	push   eax
c0002d16:	e8 51 30 00 00       	call   c0005d6c <ff_wtoupper>
c0002d1b:	89 c5                	mov    ebp,eax
c0002d1d:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d28:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d2f:	e8 38 30 00 00       	call   c0005d6c <ff_wtoupper>
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	39 c5                	cmp    ebp,eax
c0002d39:	75 96                	jne    c0002cd1 <cmp_lfn+0x1a>
c0002d3b:	89 f5                	mov    ebp,esi
c0002d3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d41:	eb 0b                	jmp    c0002d4e <cmp_lfn+0x97>
c0002d43:	0f b7 c8             	movzx  ecx,ax
c0002d46:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d4c:	75 83                	jne    c0002cd1 <cmp_lfn+0x1a>
c0002d4e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d52:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d57:	75 95                	jne    c0002cee <cmp_lfn+0x37>
c0002d59:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d5c:	74 16                	je     c0002d74 <cmp_lfn+0xbd>
c0002d5e:	66 85 ed             	test   bp,bp
c0002d61:	74 11                	je     c0002d74 <cmp_lfn+0xbd>
c0002d63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d67:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d6c:	0f 94 c0             	sete   al
c0002d6f:	0f b6 c0             	movzx  eax,al
c0002d72:	eb 05                	jmp    c0002d79 <cmp_lfn+0xc2>
c0002d74:	b8 01 00 00 00       	mov    eax,0x1
c0002d79:	83 c4 1c             	add    esp,0x1c
c0002d7c:	5b                   	pop    ebx
c0002d7d:	5e                   	pop    esi
c0002d7e:	5f                   	pop    edi
c0002d7f:	5d                   	pop    ebp
c0002d80:	c3                   	ret    

c0002d81 <sync_fs>:
c0002d81:	56                   	push   esi
c0002d82:	53                   	push   ebx
c0002d83:	53                   	push   ebx
c0002d84:	89 c3                	mov    ebx,eax
c0002d86:	e8 68 f5 ff ff       	call   c00022f3 <sync_window>
c0002d8b:	85 c0                	test   eax,eax
c0002d8d:	0f 85 9a 00 00 00    	jne    c0002e2d <sync_fs+0xac>
c0002d93:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d96:	75 7b                	jne    c0002e13 <sync_fs+0x92>
c0002d98:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d9c:	75 75                	jne    c0002e13 <sync_fs+0x92>
c0002d9e:	8d 73 34             	lea    esi,[ebx+0x34]
c0002da1:	b9 00 02 00 00       	mov    ecx,0x200
c0002da6:	31 d2                	xor    edx,edx
c0002da8:	89 f0                	mov    eax,esi
c0002daa:	e8 81 f0 ff ff       	call   c0001e30 <mem_set>
c0002daf:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002db5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dba:	e8 55 f0 ff ff       	call   c0001e14 <st_word>
c0002dbf:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dc4:	89 f0                	mov    eax,esi
c0002dc6:	e8 4d f0 ff ff       	call   c0001e18 <st_dword>
c0002dcb:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dd1:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dd6:	e8 3d f0 ff ff       	call   c0001e18 <st_dword>
c0002ddb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dde:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002de4:	e8 2f f0 ff ff       	call   c0001e18 <st_dword>
c0002de9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002dec:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002df2:	e8 21 f0 ff ff       	call   c0001e18 <st_dword>
c0002df7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002dfa:	6a 01                	push   0x1
c0002dfc:	40                   	inc    eax
c0002dfd:	50                   	push   eax
c0002dfe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e01:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e05:	56                   	push   esi
c0002e06:	50                   	push   eax
c0002e07:	e8 ae ef ff ff       	call   c0001dba <disk_write>
c0002e0c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e10:	83 c4 10             	add    esp,0x10
c0002e13:	51                   	push   ecx
c0002e14:	6a 00                	push   0x0
c0002e16:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e1a:	6a 00                	push   0x0
c0002e1c:	50                   	push   eax
c0002e1d:	e8 ae ef ff ff       	call   c0001dd0 <disk_ioctl>
c0002e22:	83 c4 10             	add    esp,0x10
c0002e25:	85 c0                	test   eax,eax
c0002e27:	0f 95 c0             	setne  al
c0002e2a:	0f b6 c0             	movzx  eax,al
c0002e2d:	5a                   	pop    edx
c0002e2e:	5b                   	pop    ebx
c0002e2f:	5e                   	pop    esi
c0002e30:	c3                   	ret    

c0002e31 <create_partition>:
c0002e31:	55                   	push   ebp
c0002e32:	57                   	push   edi
c0002e33:	56                   	push   esi
c0002e34:	53                   	push   ebx
c0002e35:	83 ec 40             	sub    esp,0x40
c0002e38:	0f b6 c0             	movzx  eax,al
c0002e3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e3f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e4b:	50                   	push   eax
c0002e4c:	6a 01                	push   0x1
c0002e4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e52:	e8 79 ef ff ff       	call   c0001dd0 <disk_ioctl>
c0002e57:	83 c4 10             	add    esp,0x10
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	0f 85 73 01 00 00    	jne    c0002fd5 <create_partition+0x1a4>
c0002e62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e66:	b9 05 00 00 00       	mov    ecx,0x5
c0002e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e6f:	be 08 00 00 00       	mov    esi,0x8
c0002e74:	89 f0                	mov    eax,esi
c0002e76:	31 d2                	xor    edx,edx
c0002e78:	0f b6 d8             	movzx  ebx,al
c0002e7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e7f:	f7 f3                	div    ebx
c0002e81:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e86:	76 0a                	jbe    c0002e92 <create_partition+0x61>
c0002e88:	d1 e6                	shl    esi,1
c0002e8a:	49                   	dec    ecx
c0002e8b:	75 e7                	jne    c0002e74 <create_partition+0x43>
c0002e8d:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e92:	b9 00 02 00 00       	mov    ecx,0x200
c0002e97:	31 d2                	xor    edx,edx
c0002e99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e9d:	e8 8e ef ff ff       	call   c0001e30 <mem_set>
c0002ea2:	b9 64 00 00 00       	mov    ecx,0x64
c0002ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002eab:	31 d2                	xor    edx,edx
c0002ead:	f7 f1                	div    ecx
c0002eaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002ebc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ec4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eca:	89 f0                	mov    eax,esi
c0002ecc:	0f b6 c0             	movzx  eax,al
c0002ecf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ed3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ed8:	0f 96 c0             	setbe  al
c0002edb:	31 d2                	xor    edx,edx
c0002edd:	85 c9                	test   ecx,ecx
c0002edf:	0f 95 c2             	setne  dl
c0002ee2:	85 c2                	test   edx,eax
c0002ee4:	0f 84 ba 00 00 00    	je     c0002fa4 <create_partition+0x173>
c0002eea:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002eee:	0f 83 b0 00 00 00    	jae    c0002fa4 <create_partition+0x173>
c0002ef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ef8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002efc:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002eff:	83 fe 64             	cmp    esi,0x64
c0002f02:	77 0d                	ja     c0002f11 <create_partition+0xe0>
c0002f04:	74 07                	je     c0002f0d <create_partition+0xdc>
c0002f06:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f0b:	eb 04                	jmp    c0002f11 <create_partition+0xe0>
c0002f0d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f11:	89 ca                	mov    edx,ecx
c0002f13:	31 c0                	xor    eax,eax
c0002f15:	01 f2                	add    edx,esi
c0002f17:	0f 92 c0             	setb   al
c0002f1a:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f1e:	77 04                	ja     c0002f24 <create_partition+0xf3>
c0002f20:	85 c0                	test   eax,eax
c0002f22:	74 08                	je     c0002f2c <create_partition+0xfb>
c0002f24:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f28:	29 ce                	sub    esi,ecx
c0002f2a:	eb 04                	jmp    c0002f30 <create_partition+0xff>
c0002f2c:	85 f6                	test   esi,esi
c0002f2e:	74 74                	je     c0002fa4 <create_partition+0x173>
c0002f30:	89 ca                	mov    edx,ecx
c0002f32:	89 d8                	mov    eax,ebx
c0002f34:	e8 df ee ff ff       	call   c0001e18 <st_dword>
c0002f39:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f3c:	89 f2                	mov    edx,esi
c0002f3e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f43:	e8 d0 ee ff ff       	call   c0001e18 <st_dword>
c0002f48:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f4c:	88 43 fc             	mov    BYTE PTR [ebx-0x4],al
c0002f4f:	31 d2                	xor    edx,edx
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	01 f1                	add    ecx,esi
c0002f55:	f7 f7                	div    edi
c0002f57:	89 d5                	mov    ebp,edx
c0002f59:	31 d2                	xor    edx,edx
c0002f5b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f5f:	88 53 f9             	mov    BYTE PTR [ebx-0x7],dl
c0002f62:	89 c2                	mov    edx,eax
c0002f64:	c1 ea 02             	shr    edx,0x2
c0002f67:	45                   	inc    ebp
c0002f68:	83 e2 c0             	and    edx,0xffffffc0
c0002f6b:	88 43 fb             	mov    BYTE PTR [ebx-0x5],al
c0002f6e:	09 ea                	or     edx,ebp
c0002f70:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f73:	88 53 fa             	mov    BYTE PTR [ebx-0x6],dl
c0002f76:	31 d2                	xor    edx,edx
c0002f78:	f7 f7                	div    edi
c0002f7a:	89 d6                	mov    esi,edx
c0002f7c:	31 d2                	xor    edx,edx
c0002f7e:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f82:	89 c7                	mov    edi,eax
c0002f84:	46                   	inc    esi
c0002f85:	c1 ef 02             	shr    edi,0x2
c0002f88:	88 53 fd             	mov    BYTE PTR [ebx-0x3],dl
c0002f8b:	83 e7 c0             	and    edi,0xffffffc0
c0002f8e:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0002f91:	09 fe                	or     esi,edi
c0002f93:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f97:	89 f2                	mov    edx,esi
c0002f99:	83 c3 10             	add    ebx,0x10
c0002f9c:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002f9f:	e9 2f ff ff ff       	jmp    c0002ed3 <create_partition+0xa2>
c0002fa4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fa8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fad:	05 fe 01 00 00       	add    eax,0x1fe
c0002fb2:	e8 5d ee ff ff       	call   c0001e14 <st_word>
c0002fb7:	6a 01                	push   0x1
c0002fb9:	6a 00                	push   0x0
c0002fbb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fc3:	e8 f2 ed ff ff       	call   c0001dba <disk_write>
c0002fc8:	83 c4 10             	add    esp,0x10
c0002fcb:	85 c0                	test   eax,eax
c0002fcd:	0f 95 c0             	setne  al
c0002fd0:	0f b6 c0             	movzx  eax,al
c0002fd3:	eb 05                	jmp    c0002fda <create_partition+0x1a9>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 3c             	add    esp,0x3c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <get_fileinfo>:
c0002fe2:	55                   	push   ebp
c0002fe3:	57                   	push   edi
c0002fe4:	56                   	push   esi
c0002fe5:	53                   	push   ebx
c0002fe6:	83 ec 1c             	sub    esp,0x1c
c0002fe9:	8b 30                	mov    esi,DWORD PTR [eax]
c0002feb:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fef:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002ff3:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ff7:	0f 84 d7 01 00 00    	je     c00031d4 <get_fileinfo+0x1f2>
c0002ffd:	89 d3                	mov    ebx,edx
c0002fff:	89 c6                	mov    esi,eax
c0003001:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003005:	74 76                	je     c000307d <get_fileinfo+0x9b>
c0003007:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000300f:	31 ed                	xor    ebp,ebp
c0003011:	31 ff                	xor    edi,edi
c0003013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003017:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000301b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000301e:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003022:	89 c2                	mov    edx,eax
c0003024:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003028:	85 c0                	test   eax,eax
c000302a:	74 41                	je     c000306d <get_fileinfo+0x8b>
c000302c:	0f b7 c5             	movzx  eax,bp
c000302f:	85 c0                	test   eax,eax
c0003031:	75 0d                	jne    c0003040 <get_fileinfo+0x5e>
c0003033:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003039:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000303e:	76 22                	jbe    c0003062 <get_fileinfo+0x80>
c0003040:	c1 e0 10             	shl    eax,0x10
c0003043:	b9 ff 00 00 00       	mov    ecx,0xff
c0003048:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000304c:	29 f9                	sub    ecx,edi
c000304e:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003052:	e8 f6 ee ff ff       	call   c0001f4d <put_utf>
c0003057:	0f b6 c0             	movzx  eax,al
c000305a:	85 c0                	test   eax,eax
c000305c:	74 0d                	je     c000306b <get_fileinfo+0x89>
c000305e:	01 c7                	add    edi,eax
c0003060:	31 d2                	xor    edx,edx
c0003062:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003067:	89 d5                	mov    ebp,edx
c0003069:	eb a8                	jmp    c0003013 <get_fileinfo+0x31>
c000306b:	31 ff                	xor    edi,edi
c000306d:	66 85 ed             	test   bp,bp
c0003070:	b8 00 00 00 00       	mov    eax,0x0
c0003075:	0f 45 f8             	cmovne edi,eax
c0003078:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000307d:	31 ff                	xor    edi,edi
c000307f:	31 c9                	xor    ecx,ecx
c0003081:	83 f9 0a             	cmp    ecx,0xa
c0003084:	0f 87 ac 00 00 00    	ja     c0003136 <get_fileinfo+0x154>
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003090:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003094:	89 c2                	mov    edx,eax
c0003096:	83 f8 20             	cmp    eax,0x20
c0003099:	0f 84 90 00 00 00    	je     c000312f <get_fileinfo+0x14d>
c000309f:	83 f8 05             	cmp    eax,0x5
c00030a2:	75 05                	jne    c00030a9 <get_fileinfo+0xc7>
c00030a4:	ba e5 00 00 00       	mov    edx,0xe5
c00030a9:	83 fd 09             	cmp    ebp,0x9
c00030ac:	75 0b                	jne    c00030b9 <get_fileinfo+0xd7>
c00030ae:	83 ff 0b             	cmp    edi,0xb
c00030b1:	77 06                	ja     c00030b9 <get_fileinfo+0xd7>
c00030b3:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030b8:	47                   	inc    edi
c00030b9:	0f b7 c2             	movzx  eax,dx
c00030bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030c0:	e8 aa ed ff ff       	call   c0001e6f <dbc_1st>
c00030c5:	85 c0                	test   eax,eax
c00030c7:	74 2f                	je     c00030f8 <get_fileinfo+0x116>
c00030c9:	83 fd 08             	cmp    ebp,0x8
c00030cc:	74 2a                	je     c00030f8 <get_fileinfo+0x116>
c00030ce:	83 fd 0b             	cmp    ebp,0xb
c00030d1:	74 25                	je     c00030f8 <get_fileinfo+0x116>
c00030d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030d6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030de:	e8 8f ed ff ff       	call   c0001e72 <dbc_2nd>
c00030e3:	85 c0                	test   eax,eax
c00030e5:	74 11                	je     c00030f8 <get_fileinfo+0x116>
c00030e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030eb:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030ee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030f3:	c1 e0 08             	shl    eax,0x8
c00030f6:	09 c2                	or     edx,eax
c00030f8:	50                   	push   eax
c00030f9:	50                   	push   eax
c00030fa:	68 b5 01 00 00       	push   0x1b5
c00030ff:	0f b7 d2             	movzx  edx,dx
c0003102:	52                   	push   edx
c0003103:	e8 ec 2b 00 00       	call   c0005cf4 <ff_oem2uni>
c0003108:	0f b7 c0             	movzx  eax,ax
c000310b:	83 c4 10             	add    esp,0x10
c000310e:	85 c0                	test   eax,eax
c0003110:	75 04                	jne    c0003116 <get_fileinfo+0x134>
c0003112:	31 ff                	xor    edi,edi
c0003114:	eb 20                	jmp    c0003136 <get_fileinfo+0x154>
c0003116:	b9 0c 00 00 00       	mov    ecx,0xc
c000311b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000311f:	29 f9                	sub    ecx,edi
c0003121:	e8 27 ee ff ff       	call   c0001f4d <put_utf>
c0003126:	0f b6 c0             	movzx  eax,al
c0003129:	85 c0                	test   eax,eax
c000312b:	74 e5                	je     c0003112 <get_fileinfo+0x130>
c000312d:	01 c7                	add    edi,eax
c000312f:	89 e9                	mov    ecx,ebp
c0003131:	e9 4b ff ff ff       	jmp    c0003081 <get_fileinfo+0x9f>
c0003136:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000313b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000313f:	75 5f                	jne    c00031a0 <get_fileinfo+0x1be>
c0003141:	85 ff                	test   edi,edi
c0003143:	75 0b                	jne    c0003150 <get_fileinfo+0x16e>
c0003145:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003149:	ba 01 00 00 00       	mov    edx,0x1
c000314e:	eb 3e                	jmp    c000318e <get_fileinfo+0x1ac>
c0003150:	bf 08 00 00 00       	mov    edi,0x8
c0003155:	31 d2                	xor    edx,edx
c0003157:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000315d:	84 c0                	test   al,al
c000315f:	74 2d                	je     c000318e <get_fileinfo+0x1ac>
c0003161:	66 83 f8 2e          	cmp    ax,0x2e
c0003165:	74 1b                	je     c0003182 <get_fileinfo+0x1a0>
c0003167:	8d 48 bf             	lea    ecx,[eax-0x41]
c000316a:	66 83 f9 19          	cmp    cx,0x19
c000316e:	77 17                	ja     c0003187 <get_fileinfo+0x1a5>
c0003170:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003173:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003176:	21 f9                	and    ecx,edi
c0003178:	80 e1 18             	and    cl,0x18
c000317b:	74 0a                	je     c0003187 <get_fileinfo+0x1a5>
c000317d:	83 c0 20             	add    eax,0x20
c0003180:	eb 05                	jmp    c0003187 <get_fileinfo+0x1a5>
c0003182:	bf 10 00 00 00       	mov    edi,0x10
c0003187:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000318b:	42                   	inc    edx
c000318c:	eb c9                	jmp    c0003157 <get_fileinfo+0x175>
c000318e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003193:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003196:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000319a:	75 04                	jne    c00031a0 <get_fileinfo+0x1be>
c000319c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031a0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a3:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031a6:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ac:	83 c0 1c             	add    eax,0x1c
c00031af:	e8 48 ec ff ff       	call   c0001dfc <ld_dword>
c00031b4:	89 03                	mov    DWORD PTR [ebx],eax
c00031b6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031b9:	83 c0 16             	add    eax,0x16
c00031bc:	e8 2e ec ff ff       	call   c0001def <ld_word>
c00031c1:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031c5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c8:	83 c0 18             	add    eax,0x18
c00031cb:	e8 1f ec ff ff       	call   c0001def <ld_word>
c00031d0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031d4:	83 c4 1c             	add    esp,0x1c
c00031d7:	5b                   	pop    ebx
c00031d8:	5e                   	pop    esi
c00031d9:	5f                   	pop    edi
c00031da:	5d                   	pop    ebp
c00031db:	c3                   	ret    

c00031dc <ld_clust.isra.0>:
c00031dc:	56                   	push   esi
c00031dd:	89 c6                	mov    esi,eax
c00031df:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031e2:	53                   	push   ebx
c00031e3:	89 d3                	mov    ebx,edx
c00031e5:	e8 05 ec ff ff       	call   c0001def <ld_word>
c00031ea:	0f b7 c8             	movzx  ecx,ax
c00031ed:	89 f0                	mov    eax,esi
c00031ef:	3c 03                	cmp    al,0x3
c00031f1:	75 0d                	jne    c0003200 <ld_clust.isra.0+0x24>
c00031f3:	8d 43 14             	lea    eax,[ebx+0x14]
c00031f6:	e8 f4 eb ff ff       	call   c0001def <ld_word>
c00031fb:	c1 e0 10             	shl    eax,0x10
c00031fe:	09 c1                	or     ecx,eax
c0003200:	5b                   	pop    ebx
c0003201:	89 c8                	mov    eax,ecx
c0003203:	5e                   	pop    esi
c0003204:	c3                   	ret    

c0003205 <st_clust.isra.1>:
c0003205:	56                   	push   esi
c0003206:	89 c6                	mov    esi,eax
c0003208:	53                   	push   ebx
c0003209:	89 d3                	mov    ebx,edx
c000320b:	0f b7 d1             	movzx  edx,cx
c000320e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003211:	e8 fe eb ff ff       	call   c0001e14 <st_word>
c0003216:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003219:	75 0f                	jne    c000322a <st_clust.isra.1+0x25>
c000321b:	c1 e9 10             	shr    ecx,0x10
c000321e:	8d 43 14             	lea    eax,[ebx+0x14]
c0003221:	89 ca                	mov    edx,ecx
c0003223:	5b                   	pop    ebx
c0003224:	5e                   	pop    esi
c0003225:	e9 ea eb ff ff       	jmp    c0001e14 <st_word>
c000322a:	5b                   	pop    ebx
c000322b:	5e                   	pop    esi
c000322c:	c3                   	ret    

c000322d <get_fat.isra.2>:
c000322d:	b9 01 00 00 00       	mov    ecx,0x1
c0003232:	83 fa 01             	cmp    edx,0x1
c0003235:	0f 86 f3 00 00 00    	jbe    c000332e <get_fat.isra.2+0x101>
c000323b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000323e:	0f 83 ea 00 00 00    	jae    c000332e <get_fat.isra.2+0x101>
c0003244:	55                   	push   ebp
c0003245:	57                   	push   edi
c0003246:	89 c7                	mov    edi,eax
c0003248:	56                   	push   esi
c0003249:	89 d6                	mov    esi,edx
c000324b:	53                   	push   ebx
c000324c:	83 ec 0c             	sub    esp,0xc
c000324f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003252:	83 f8 02             	cmp    eax,0x2
c0003255:	74 78                	je     c00032cf <get_fat.isra.2+0xa2>
c0003257:	83 f8 03             	cmp    eax,0x3
c000325a:	0f 84 96 00 00 00    	je     c00032f6 <get_fat.isra.2+0xc9>
c0003260:	48                   	dec    eax
c0003261:	0f 85 bd 00 00 00    	jne    c0003324 <get_fat.isra.2+0xf7>
c0003267:	89 d3                	mov    ebx,edx
c0003269:	89 f8                	mov    eax,edi
c000326b:	d1 eb                	shr    ebx,1
c000326d:	01 d3                	add    ebx,edx
c000326f:	89 da                	mov    edx,ebx
c0003271:	c1 ea 09             	shr    edx,0x9
c0003274:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003277:	e8 da f0 ff ff       	call   c0002356 <move_window>
c000327c:	85 c0                	test   eax,eax
c000327e:	74 08                	je     c0003288 <get_fat.isra.2+0x5b>
c0003280:	83 c9 ff             	or     ecx,0xffffffff
c0003283:	e9 9c 00 00 00       	jmp    c0003324 <get_fat.isra.2+0xf7>
c0003288:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000328b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003291:	89 ea                	mov    edx,ebp
c0003293:	89 f8                	mov    eax,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000329c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000329f:	e8 b2 f0 ff ff       	call   c0002356 <move_window>
c00032a4:	85 c0                	test   eax,eax
c00032a6:	75 d8                	jne    c0003280 <get_fat.isra.2+0x53>
c00032a8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032ae:	0f b6 c3             	movzx  eax,bl
c00032b1:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00032b6:	c1 e3 08             	shl    ebx,0x8
c00032b9:	09 c3                	or     ebx,eax
c00032bb:	89 d9                	mov    ecx,ebx
c00032bd:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032c3:	83 e6 01             	and    esi,0x1
c00032c6:	74 5c                	je     c0003324 <get_fat.isra.2+0xf7>
c00032c8:	89 d9                	mov    ecx,ebx
c00032ca:	c1 e9 04             	shr    ecx,0x4
c00032cd:	eb 55                	jmp    c0003324 <get_fat.isra.2+0xf7>
c00032cf:	c1 ea 08             	shr    edx,0x8
c00032d2:	89 f8                	mov    eax,edi
c00032d4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032d7:	e8 7a f0 ff ff       	call   c0002356 <move_window>
c00032dc:	85 c0                	test   eax,eax
c00032de:	75 a0                	jne    c0003280 <get_fat.isra.2+0x53>
c00032e0:	01 f6                	add    esi,esi
c00032e2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032e8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ec:	e8 fe ea ff ff       	call   c0001def <ld_word>
c00032f1:	0f b7 c8             	movzx  ecx,ax
c00032f4:	eb 2e                	jmp    c0003324 <get_fat.isra.2+0xf7>
c00032f6:	c1 ea 07             	shr    edx,0x7
c00032f9:	89 f8                	mov    eax,edi
c00032fb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032fe:	e8 53 f0 ff ff       	call   c0002356 <move_window>
c0003303:	85 c0                	test   eax,eax
c0003305:	0f 85 75 ff ff ff    	jne    c0003280 <get_fat.isra.2+0x53>
c000330b:	c1 e6 02             	shl    esi,0x2
c000330e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003314:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003318:	e8 df ea ff ff       	call   c0001dfc <ld_dword>
c000331d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003322:	89 c1                	mov    ecx,eax
c0003324:	83 c4 0c             	add    esp,0xc
c0003327:	89 c8                	mov    eax,ecx
c0003329:	5b                   	pop    ebx
c000332a:	5e                   	pop    esi
c000332b:	5f                   	pop    edi
c000332c:	5d                   	pop    ebp
c000332d:	c3                   	ret    
c000332e:	89 c8                	mov    eax,ecx
c0003330:	c3                   	ret    

c0003331 <dir_sdi>:
c0003331:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003337:	0f 87 b6 00 00 00    	ja     c00033f3 <dir_sdi+0xc2>
c000333d:	55                   	push   ebp
c000333e:	57                   	push   edi
c000333f:	56                   	push   esi
c0003340:	53                   	push   ebx
c0003341:	89 d3                	mov    ebx,edx
c0003343:	83 ec 1c             	sub    esp,0x1c
c0003346:	f6 c2 1f             	test   dl,0x1f
c0003349:	74 0a                	je     c0003355 <dir_sdi+0x24>
c000334b:	b8 02 00 00 00       	mov    eax,0x2
c0003350:	e9 96 00 00 00       	jmp    c00033eb <dir_sdi+0xba>
c0003355:	89 c6                	mov    esi,eax
c0003357:	8b 38                	mov    edi,DWORD PTR [eax]
c0003359:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000335c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000335f:	85 c9                	test   ecx,ecx
c0003361:	75 23                	jne    c0003386 <dir_sdi+0x55>
c0003363:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003366:	76 07                	jbe    c000336f <dir_sdi+0x3e>
c0003368:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000336b:	85 c0                	test   eax,eax
c000336d:	75 15                	jne    c0003384 <dir_sdi+0x53>
c000336f:	89 da                	mov    edx,ebx
c0003371:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003375:	c1 ea 05             	shr    edx,0x5
c0003378:	39 c2                	cmp    edx,eax
c000337a:	73 cf                	jae    c000334b <dir_sdi+0x1a>
c000337c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000337f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003382:	eb 3d                	jmp    c00033c1 <dir_sdi+0x90>
c0003384:	89 c1                	mov    ecx,eax
c0003386:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000338a:	c1 e5 09             	shl    ebp,0x9
c000338d:	89 ca                	mov    edx,ecx
c000338f:	39 eb                	cmp    ebx,ebp
c0003391:	72 1c                	jb     c00033af <dir_sdi+0x7e>
c0003393:	8b 06                	mov    eax,DWORD PTR [esi]
c0003395:	e8 93 fe ff ff       	call   c000322d <get_fat.isra.2>
c000339a:	89 c1                	mov    ecx,eax
c000339c:	83 f8 ff             	cmp    eax,0xffffffff
c000339f:	74 45                	je     c00033e6 <dir_sdi+0xb5>
c00033a1:	83 f8 01             	cmp    eax,0x1
c00033a4:	76 a5                	jbe    c000334b <dir_sdi+0x1a>
c00033a6:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00033a9:	76 a0                	jbe    c000334b <dir_sdi+0x1a>
c00033ab:	29 eb                	sub    ebx,ebp
c00033ad:	eb de                	jmp    c000338d <dir_sdi+0x5c>
c00033af:	89 f8                	mov    eax,edi
c00033b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b5:	e8 8c ec ff ff       	call   c0002046 <clst2sect>
c00033ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033be:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c1:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033c4:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033c7:	85 d2                	test   edx,edx
c00033c9:	74 80                	je     c000334b <dir_sdi+0x1a>
c00033cb:	89 d8                	mov    eax,ebx
c00033cd:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033d3:	c1 e8 09             	shr    eax,0x9
c00033d6:	01 d0                	add    eax,edx
c00033d8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033db:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033df:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033e2:	31 c0                	xor    eax,eax
c00033e4:	eb 05                	jmp    c00033eb <dir_sdi+0xba>
c00033e6:	b8 01 00 00 00       	mov    eax,0x1
c00033eb:	83 c4 1c             	add    esp,0x1c
c00033ee:	5b                   	pop    ebx
c00033ef:	5e                   	pop    esi
c00033f0:	5f                   	pop    edi
c00033f1:	5d                   	pop    ebp
c00033f2:	c3                   	ret    
c00033f3:	b8 02 00 00 00       	mov    eax,0x2
c00033f8:	c3                   	ret    

c00033f9 <create_chain>:
c00033f9:	55                   	push   ebp
c00033fa:	89 c5                	mov    ebp,eax
c00033fc:	57                   	push   edi
c00033fd:	89 d7                	mov    edi,edx
c00033ff:	56                   	push   esi
c0003400:	53                   	push   ebx
c0003401:	83 ec 1c             	sub    esp,0x1c
c0003404:	85 d2                	test   edx,edx
c0003406:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003408:	75 0e                	jne    c0003418 <create_chain+0x1f>
c000340a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000340d:	85 c9                	test   ecx,ecx
c000340f:	74 32                	je     c0003443 <create_chain+0x4a>
c0003411:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003414:	77 32                	ja     c0003448 <create_chain+0x4f>
c0003416:	eb 2b                	jmp    c0003443 <create_chain+0x4a>
c0003418:	89 d8                	mov    eax,ebx
c000341a:	e8 0e fe ff ff       	call   c000322d <get_fat.isra.2>
c000341f:	83 f8 01             	cmp    eax,0x1
c0003422:	77 0a                	ja     c000342e <create_chain+0x35>
c0003424:	b8 01 00 00 00       	mov    eax,0x1
c0003429:	e9 fd 00 00 00       	jmp    c000352b <create_chain+0x132>
c000342e:	83 f8 ff             	cmp    eax,0xffffffff
c0003431:	0f 84 f1 00 00 00    	je     c0003528 <create_chain+0x12f>
c0003437:	89 f9                	mov    ecx,edi
c0003439:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000343c:	76 0a                	jbe    c0003448 <create_chain+0x4f>
c000343e:	e9 e8 00 00 00       	jmp    c000352b <create_chain+0x132>
c0003443:	b9 01 00 00 00       	mov    ecx,0x1
c0003448:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000344c:	75 07                	jne    c0003455 <create_chain+0x5c>
c000344e:	31 c0                	xor    eax,eax
c0003450:	e9 d6 00 00 00       	jmp    c000352b <create_chain+0x132>
c0003455:	39 f9                	cmp    ecx,edi
c0003457:	75 49                	jne    c00034a2 <create_chain+0xa9>
c0003459:	8d 71 01             	lea    esi,[ecx+0x1]
c000345c:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000345f:	77 05                	ja     c0003466 <create_chain+0x6d>
c0003461:	be 02 00 00 00       	mov    esi,0x2
c0003466:	89 f2                	mov    edx,esi
c0003468:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000346b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000346f:	e8 b9 fd ff ff       	call   c000322d <get_fat.isra.2>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	0f 84 ae 00 00 00    	je     c000352b <create_chain+0x132>
c000347d:	83 f8 ff             	cmp    eax,0xffffffff
c0003480:	0f 84 a5 00 00 00    	je     c000352b <create_chain+0x132>
c0003486:	85 c0                	test   eax,eax
c0003488:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000348c:	74 10                	je     c000349e <create_chain+0xa5>
c000348e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003491:	83 f8 01             	cmp    eax,0x1
c0003494:	76 0c                	jbe    c00034a2 <create_chain+0xa9>
c0003496:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003499:	0f 47 c8             	cmova  ecx,eax
c000349c:	eb 04                	jmp    c00034a2 <create_chain+0xa9>
c000349e:	85 f6                	test   esi,esi
c00034a0:	75 3b                	jne    c00034dd <create_chain+0xe4>
c00034a2:	89 ce                	mov    esi,ecx
c00034a4:	46                   	inc    esi
c00034a5:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034a8:	77 0a                	ja     c00034b4 <create_chain+0xbb>
c00034aa:	83 f9 01             	cmp    ecx,0x1
c00034ad:	76 9f                	jbe    c000344e <create_chain+0x55>
c00034af:	be 02 00 00 00       	mov    esi,0x2
c00034b4:	89 f2                	mov    edx,esi
c00034b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034bd:	e8 6b fd ff ff       	call   c000322d <get_fat.isra.2>
c00034c2:	85 c0                	test   eax,eax
c00034c4:	74 17                	je     c00034dd <create_chain+0xe4>
c00034c6:	83 f8 01             	cmp    eax,0x1
c00034c9:	74 60                	je     c000352b <create_chain+0x132>
c00034cb:	83 f8 ff             	cmp    eax,0xffffffff
c00034ce:	74 5b                	je     c000352b <create_chain+0x132>
c00034d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034d4:	39 ce                	cmp    esi,ecx
c00034d6:	75 cc                	jne    c00034a4 <create_chain+0xab>
c00034d8:	e9 71 ff ff ff       	jmp    c000344e <create_chain+0x55>
c00034dd:	83 c9 ff             	or     ecx,0xffffffff
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	89 d8                	mov    eax,ebx
c00034e4:	e8 ba f2 ff ff       	call   c00027a3 <put_fat>
c00034e9:	85 c0                	test   eax,eax
c00034eb:	75 0f                	jne    c00034fc <create_chain+0x103>
c00034ed:	85 ff                	test   edi,edi
c00034ef:	74 0b                	je     c00034fc <create_chain+0x103>
c00034f1:	89 f1                	mov    ecx,esi
c00034f3:	89 fa                	mov    edx,edi
c00034f5:	89 d8                	mov    eax,ebx
c00034f7:	e8 a7 f2 ff ff       	call   c00027a3 <put_fat>
c00034fc:	85 c0                	test   eax,eax
c00034fe:	75 21                	jne    c0003521 <create_chain+0x128>
c0003500:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0003503:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003506:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003509:	8d 57 fe             	lea    edx,[edi-0x2]
c000350c:	39 d0                	cmp    eax,edx
c000350e:	77 04                	ja     c0003514 <create_chain+0x11b>
c0003510:	48                   	dec    eax
c0003511:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003514:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003517:	83 c8 01             	or     eax,0x1
c000351a:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000351d:	89 f0                	mov    eax,esi
c000351f:	eb 0a                	jmp    c000352b <create_chain+0x132>
c0003521:	48                   	dec    eax
c0003522:	0f 85 fc fe ff ff    	jne    c0003424 <create_chain+0x2b>
c0003528:	83 c8 ff             	or     eax,0xffffffff
c000352b:	83 c4 1c             	add    esp,0x1c
c000352e:	5b                   	pop    ebx
c000352f:	5e                   	pop    esi
c0003530:	5f                   	pop    edi
c0003531:	5d                   	pop    ebp
c0003532:	c3                   	ret    

c0003533 <remove_chain>:
c0003533:	55                   	push   ebp
c0003534:	57                   	push   edi
c0003535:	56                   	push   esi
c0003536:	89 d6                	mov    esi,edx
c0003538:	53                   	push   ebx
c0003539:	83 ec 0c             	sub    esp,0xc
c000353c:	83 fa 01             	cmp    edx,0x1
c000353f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003541:	76 6a                	jbe    c00035ad <remove_chain+0x7a>
c0003543:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003546:	76 65                	jbe    c00035ad <remove_chain+0x7a>
c0003548:	89 c5                	mov    ebp,eax
c000354a:	89 ca                	mov    edx,ecx
c000354c:	85 c9                	test   ecx,ecx
c000354e:	74 0e                	je     c000355e <remove_chain+0x2b>
c0003550:	83 c9 ff             	or     ecx,0xffffffff
c0003553:	89 d8                	mov    eax,ebx
c0003555:	e8 49 f2 ff ff       	call   c00027a3 <put_fat>
c000355a:	85 c0                	test   eax,eax
c000355c:	75 5b                	jne    c00035b9 <remove_chain+0x86>
c000355e:	89 f2                	mov    edx,esi
c0003560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003563:	e8 c5 fc ff ff       	call   c000322d <get_fat.isra.2>
c0003568:	89 c7                	mov    edi,eax
c000356a:	85 c0                	test   eax,eax
c000356c:	75 04                	jne    c0003572 <remove_chain+0x3f>
c000356e:	31 c0                	xor    eax,eax
c0003570:	eb 47                	jmp    c00035b9 <remove_chain+0x86>
c0003572:	83 f8 01             	cmp    eax,0x1
c0003575:	74 36                	je     c00035ad <remove_chain+0x7a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	74 38                	je     c00035b4 <remove_chain+0x81>
c000357c:	31 c9                	xor    ecx,ecx
c000357e:	89 f2                	mov    edx,esi
c0003580:	89 d8                	mov    eax,ebx
c0003582:	e8 1c f2 ff ff       	call   c00027a3 <put_fat>
c0003587:	85 c0                	test   eax,eax
c0003589:	75 2e                	jne    c00035b9 <remove_chain+0x86>
c000358b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000358e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003591:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003594:	39 c8                	cmp    eax,ecx
c0003596:	73 0d                	jae    c00035a5 <remove_chain+0x72>
c0003598:	40                   	inc    eax
c0003599:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000359c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000359f:	83 c8 01             	or     eax,0x1
c00035a2:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035a5:	89 fe                	mov    esi,edi
c00035a7:	39 fa                	cmp    edx,edi
c00035a9:	77 b3                	ja     c000355e <remove_chain+0x2b>
c00035ab:	eb c1                	jmp    c000356e <remove_chain+0x3b>
c00035ad:	b8 02 00 00 00       	mov    eax,0x2
c00035b2:	eb 05                	jmp    c00035b9 <remove_chain+0x86>
c00035b4:	b8 01 00 00 00       	mov    eax,0x1
c00035b9:	83 c4 0c             	add    esp,0xc
c00035bc:	5b                   	pop    ebx
c00035bd:	5e                   	pop    esi
c00035be:	5f                   	pop    edi
c00035bf:	5d                   	pop    ebp
c00035c0:	c3                   	ret    

c00035c1 <dir_next>:
c00035c1:	55                   	push   ebp
c00035c2:	57                   	push   edi
c00035c3:	56                   	push   esi
c00035c4:	53                   	push   ebx
c00035c5:	83 ec 1c             	sub    esp,0x1c
c00035c8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035cb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035cd:	83 c7 20             	add    edi,0x20
c00035d0:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035d6:	76 07                	jbe    c00035df <dir_next+0x1e>
c00035d8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035df:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035e2:	b9 04 00 00 00       	mov    ecx,0x4
c00035e7:	85 f6                	test   esi,esi
c00035e9:	0f 84 cd 00 00 00    	je     c00036bc <dir_next+0xfb>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	89 f8                	mov    eax,edi
c00035f3:	25 ff 01 00 00       	and    eax,0x1ff
c00035f8:	89 d1                	mov    ecx,edx
c00035fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035fe:	0f 85 a8 00 00 00    	jne    c00036ac <dir_next+0xeb>
c0003604:	46                   	inc    esi
c0003605:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003608:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c000360b:	85 d2                	test   edx,edx
c000360d:	75 22                	jne    c0003631 <dir_next+0x70>
c000360f:	89 fa                	mov    edx,edi
c0003611:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003615:	c1 ea 05             	shr    edx,0x5
c0003618:	39 c2                	cmp    edx,eax
c000361a:	0f 82 8c 00 00 00    	jb     c00036ac <dir_next+0xeb>
c0003620:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003627:	b9 04 00 00 00       	mov    ecx,0x4
c000362c:	e9 8b 00 00 00       	jmp    c00036bc <dir_next+0xfb>
c0003631:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003635:	89 fe                	mov    esi,edi
c0003637:	48                   	dec    eax
c0003638:	c1 ee 09             	shr    esi,0x9
c000363b:	85 f0                	test   eax,esi
c000363d:	75 6d                	jne    c00036ac <dir_next+0xeb>
c000363f:	89 e8                	mov    eax,ebp
c0003641:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003645:	e8 e3 fb ff ff       	call   c000322d <get_fat.isra.2>
c000364a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000364e:	89 c6                	mov    esi,eax
c0003650:	83 f8 01             	cmp    eax,0x1
c0003653:	77 07                	ja     c000365c <dir_next+0x9b>
c0003655:	b9 02 00 00 00       	mov    ecx,0x2
c000365a:	eb 60                	jmp    c00036bc <dir_next+0xfb>
c000365c:	83 f8 ff             	cmp    eax,0xffffffff
c000365f:	75 07                	jne    c0003668 <dir_next+0xa7>
c0003661:	b9 01 00 00 00       	mov    ecx,0x1
c0003666:	eb 54                	jmp    c00036bc <dir_next+0xfb>
c0003668:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000366b:	77 30                	ja     c000369d <dir_next+0xdc>
c000366d:	85 c9                	test   ecx,ecx
c000366f:	74 af                	je     c0003620 <dir_next+0x5f>
c0003671:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003674:	89 d8                	mov    eax,ebx
c0003676:	e8 7e fd ff ff       	call   c00033f9 <create_chain>
c000367b:	b9 07 00 00 00       	mov    ecx,0x7
c0003680:	89 c6                	mov    esi,eax
c0003682:	85 c0                	test   eax,eax
c0003684:	74 36                	je     c00036bc <dir_next+0xfb>
c0003686:	83 f8 01             	cmp    eax,0x1
c0003689:	74 ca                	je     c0003655 <dir_next+0x94>
c000368b:	83 f8 ff             	cmp    eax,0xffffffff
c000368e:	74 d1                	je     c0003661 <dir_next+0xa0>
c0003690:	89 c2                	mov    edx,eax
c0003692:	89 e8                	mov    eax,ebp
c0003694:	e8 61 f2 ff ff       	call   c00028fa <dir_clear>
c0003699:	85 c0                	test   eax,eax
c000369b:	75 c4                	jne    c0003661 <dir_next+0xa0>
c000369d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036a0:	89 f2                	mov    edx,esi
c00036a2:	89 e8                	mov    eax,ebp
c00036a4:	e8 9d e9 ff ff       	call   c0002046 <clst2sect>
c00036a9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036b0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036b3:	31 c9                	xor    ecx,ecx
c00036b5:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036b9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036bc:	83 c4 1c             	add    esp,0x1c
c00036bf:	89 c8                	mov    eax,ecx
c00036c1:	5b                   	pop    ebx
c00036c2:	5e                   	pop    esi
c00036c3:	5f                   	pop    edi
c00036c4:	5d                   	pop    ebp
c00036c5:	c3                   	ret    

c00036c6 <dir_alloc>:
c00036c6:	55                   	push   ebp
c00036c7:	89 c5                	mov    ebp,eax
c00036c9:	57                   	push   edi
c00036ca:	89 d7                	mov    edi,edx
c00036cc:	56                   	push   esi
c00036cd:	31 d2                	xor    edx,edx
c00036cf:	53                   	push   ebx
c00036d0:	83 ec 0c             	sub    esp,0xc
c00036d3:	8b 30                	mov    esi,DWORD PTR [eax]
c00036d5:	e8 57 fc ff ff       	call   c0003331 <dir_sdi>
c00036da:	85 c0                	test   eax,eax
c00036dc:	75 3b                	jne    c0003719 <dir_alloc+0x53>
c00036de:	31 db                	xor    ebx,ebx
c00036e0:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036e3:	89 f0                	mov    eax,esi
c00036e5:	e8 6c ec ff ff       	call   c0002356 <move_window>
c00036ea:	85 c0                	test   eax,eax
c00036ec:	75 2b                	jne    c0003719 <dir_alloc+0x53>
c00036ee:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036f1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036f4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036fa:	74 04                	je     c0003700 <dir_alloc+0x3a>
c00036fc:	85 d2                	test   edx,edx
c00036fe:	75 07                	jne    c0003707 <dir_alloc+0x41>
c0003700:	43                   	inc    ebx
c0003701:	39 fb                	cmp    ebx,edi
c0003703:	75 04                	jne    c0003709 <dir_alloc+0x43>
c0003705:	eb 1c                	jmp    c0003723 <dir_alloc+0x5d>
c0003707:	31 db                	xor    ebx,ebx
c0003709:	ba 01 00 00 00       	mov    edx,0x1
c000370e:	89 e8                	mov    eax,ebp
c0003710:	e8 ac fe ff ff       	call   c00035c1 <dir_next>
c0003715:	85 c0                	test   eax,eax
c0003717:	74 c7                	je     c00036e0 <dir_alloc+0x1a>
c0003719:	83 f8 04             	cmp    eax,0x4
c000371c:	75 05                	jne    c0003723 <dir_alloc+0x5d>
c000371e:	b8 07 00 00 00       	mov    eax,0x7
c0003723:	83 c4 0c             	add    esp,0xc
c0003726:	5b                   	pop    ebx
c0003727:	5e                   	pop    esi
c0003728:	5f                   	pop    edi
c0003729:	5d                   	pop    ebp
c000372a:	c3                   	ret    

c000372b <dir_read>:
c000372b:	55                   	push   ebp
c000372c:	57                   	push   edi
c000372d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003732:	56                   	push   esi
c0003733:	be 04 00 00 00       	mov    esi,0x4
c0003738:	53                   	push   ebx
c0003739:	89 c3                	mov    ebx,eax
c000373b:	83 ec 1c             	sub    esp,0x1c
c000373e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003740:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003744:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003749:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000374c:	85 d2                	test   edx,edx
c000374e:	0f 84 e3 00 00 00    	je     c0003837 <dir_read+0x10c>
c0003754:	89 e8                	mov    eax,ebp
c0003756:	e8 fb eb ff ff       	call   c0002356 <move_window>
c000375b:	89 c6                	mov    esi,eax
c000375d:	85 c0                	test   eax,eax
c000375f:	0f 85 dd 00 00 00    	jne    c0003842 <dir_read+0x117>
c0003765:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003768:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000376b:	88 04 24             	mov    BYTE PTR [esp],al
c000376e:	85 c0                	test   eax,eax
c0003770:	0f 84 c7 00 00 00    	je     c000383d <dir_read+0x112>
c0003776:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003779:	83 e1 3f             	and    ecx,0x3f
c000377c:	3d e5 00 00 00       	cmp    eax,0xe5
c0003781:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003784:	0f 84 93 00 00 00    	je     c000381d <dir_read+0xf2>
c000378a:	83 f8 2e             	cmp    eax,0x2e
c000378d:	0f 84 8a 00 00 00    	je     c000381d <dir_read+0xf2>
c0003793:	0f b6 c9             	movzx  ecx,cl
c0003796:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000379a:	83 e1 df             	and    ecx,0xffffffdf
c000379d:	83 f9 08             	cmp    ecx,0x8
c00037a0:	0f 94 c1             	sete   cl
c00037a3:	0f b6 c9             	movzx  ecx,cl
c00037a6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037aa:	75 71                	jne    c000381d <dir_read+0xf2>
c00037ac:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037b1:	75 4a                	jne    c00037fd <dir_read+0xd2>
c00037b3:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037b7:	74 16                	je     c00037cf <dir_read+0xa4>
c00037b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037bc:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037c3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ca:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037cd:	eb 0e                	jmp    c00037dd <dir_read+0xb2>
c00037cf:	89 f9                	mov    ecx,edi
c00037d1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d6:	0f b6 c9             	movzx  ecx,cl
c00037d9:	39 c1                	cmp    ecx,eax
c00037db:	75 45                	jne    c0003822 <dir_read+0xf7>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037e6:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037e9:	75 37                	jne    c0003822 <dir_read+0xf7>
c00037eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037ee:	e8 70 e8 ff ff       	call   c0002063 <pick_lfn>
c00037f3:	85 c0                	test   eax,eax
c00037f5:	74 2b                	je     c0003822 <dir_read+0xf7>
c00037f7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037fa:	4f                   	dec    edi
c00037fb:	eb 25                	jmp    c0003822 <dir_read+0xf7>
c00037fd:	89 f8                	mov    eax,edi
c00037ff:	84 c0                	test   al,al
c0003801:	75 11                	jne    c0003814 <dir_read+0xe9>
c0003803:	89 d0                	mov    eax,edx
c0003805:	e8 36 ea ff ff       	call   c0002240 <sum_sfn>
c000380a:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c000380e:	75 04                	jne    c0003814 <dir_read+0xe9>
c0003810:	31 f6                	xor    esi,esi
c0003812:	eb 35                	jmp    c0003849 <dir_read+0x11e>
c0003814:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000381b:	eb 2c                	jmp    c0003849 <dir_read+0x11e>
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	31 d2                	xor    edx,edx
c0003824:	89 d8                	mov    eax,ebx
c0003826:	e8 96 fd ff ff       	call   c00035c1 <dir_next>
c000382b:	89 c6                	mov    esi,eax
c000382d:	85 c0                	test   eax,eax
c000382f:	0f 84 14 ff ff ff    	je     c0003749 <dir_read+0x1e>
c0003835:	eb 0b                	jmp    c0003842 <dir_read+0x117>
c0003837:	85 f6                	test   esi,esi
c0003839:	74 d5                	je     c0003810 <dir_read+0xe5>
c000383b:	eb 05                	jmp    c0003842 <dir_read+0x117>
c000383d:	be 04 00 00 00       	mov    esi,0x4
c0003842:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003849:	83 c4 1c             	add    esp,0x1c
c000384c:	89 f0                	mov    eax,esi
c000384e:	5b                   	pop    ebx
c000384f:	5e                   	pop    esi
c0003850:	5f                   	pop    edi
c0003851:	5d                   	pop    ebp
c0003852:	c3                   	ret    

c0003853 <dir_remove>:
c0003853:	57                   	push   edi
c0003854:	56                   	push   esi
c0003855:	53                   	push   ebx
c0003856:	89 c3                	mov    ebx,eax
c0003858:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000385b:	8b 30                	mov    esi,DWORD PTR [eax]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	83 fa ff             	cmp    edx,0xffffffff
c0003863:	74 09                	je     c000386e <dir_remove+0x1b>
c0003865:	e8 c7 fa ff ff       	call   c0003331 <dir_sdi>
c000386a:	85 c0                	test   eax,eax
c000386c:	75 34                	jne    c00038a2 <dir_remove+0x4f>
c000386e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003871:	89 f0                	mov    eax,esi
c0003873:	e8 de ea ff ff       	call   c0002356 <move_window>
c0003878:	85 c0                	test   eax,eax
c000387a:	75 1c                	jne    c0003898 <dir_remove+0x45>
c000387c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000387f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003882:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003886:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003889:	73 17                	jae    c00038a2 <dir_remove+0x4f>
c000388b:	31 d2                	xor    edx,edx
c000388d:	89 d8                	mov    eax,ebx
c000388f:	e8 2d fd ff ff       	call   c00035c1 <dir_next>
c0003894:	85 c0                	test   eax,eax
c0003896:	74 d6                	je     c000386e <dir_remove+0x1b>
c0003898:	83 f8 04             	cmp    eax,0x4
c000389b:	75 05                	jne    c00038a2 <dir_remove+0x4f>
c000389d:	b8 02 00 00 00       	mov    eax,0x2
c00038a2:	5b                   	pop    ebx
c00038a3:	5e                   	pop    esi
c00038a4:	5f                   	pop    edi
c00038a5:	c3                   	ret    

c00038a6 <dir_find>:
c00038a6:	55                   	push   ebp
c00038a7:	31 d2                	xor    edx,edx
c00038a9:	57                   	push   edi
c00038aa:	56                   	push   esi
c00038ab:	53                   	push   ebx
c00038ac:	89 c3                	mov    ebx,eax
c00038ae:	83 ec 1c             	sub    esp,0x1c
c00038b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00038b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	e8 73 fa ff ff       	call   c0003331 <dir_sdi>
c00038be:	89 c6                	mov    esi,eax
c00038c0:	85 c0                	test   eax,eax
c00038c2:	0f 85 1d 01 00 00    	jne    c00039e5 <dir_find+0x13f>
c00038c8:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038cf:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038d4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038e0:	e8 71 ea ff ff       	call   c0002356 <move_window>
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	85 c0                	test   eax,eax
c00038e9:	0f 85 f6 00 00 00    	jne    c00039e5 <dir_find+0x13f>
c00038ef:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038f2:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038f6:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038fa:	85 c9                	test   ecx,ecx
c00038fc:	0f 84 de 00 00 00    	je     c00039e0 <dir_find+0x13a>
c0003902:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003905:	89 d0                	mov    eax,edx
c0003907:	83 e0 3f             	and    eax,0x3f
c000390a:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003910:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003913:	0f 84 a6 00 00 00    	je     c00039bf <dir_find+0x119>
c0003919:	80 e2 08             	and    dl,0x8
c000391c:	0f b6 c0             	movzx  eax,al
c000391f:	74 0b                	je     c000392c <dir_find+0x86>
c0003921:	83 f8 0f             	cmp    eax,0xf
c0003924:	0f 85 95 00 00 00    	jne    c00039bf <dir_find+0x119>
c000392a:	eb 05                	jmp    c0003931 <dir_find+0x8b>
c000392c:	83 f8 0f             	cmp    eax,0xf
c000392f:	75 62                	jne    c0003993 <dir_find+0xed>
c0003931:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003935:	0f 85 90 00 00 00    	jne    c00039cb <dir_find+0x125>
c000393b:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003940:	74 17                	je     c0003959 <dir_find+0xb3>
c0003942:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003945:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003949:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000394c:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003954:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003957:	eb 13                	jmp    c000396c <dir_find+0xc6>
c0003959:	89 f8                	mov    eax,edi
c000395b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003960:	0f b6 d0             	movzx  edx,al
c0003963:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003968:	39 c2                	cmp    edx,eax
c000396a:	75 5f                	jne    c00039cb <dir_find+0x125>
c000396c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003970:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003975:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003978:	75 51                	jne    c00039cb <dir_find+0x125>
c000397a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000397e:	89 ea                	mov    edx,ebp
c0003980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003983:	e8 2f f3 ff ff       	call   c0002cb7 <cmp_lfn>
c0003988:	85 c0                	test   eax,eax
c000398a:	74 3f                	je     c00039cb <dir_find+0x125>
c000398c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003990:	4f                   	dec    edi
c0003991:	eb 38                	jmp    c00039cb <dir_find+0x125>
c0003993:	89 f8                	mov    eax,edi
c0003995:	84 c0                	test   al,al
c0003997:	75 0d                	jne    c00039a6 <dir_find+0x100>
c0003999:	89 e8                	mov    eax,ebp
c000399b:	e8 a0 e8 ff ff       	call   c0002240 <sum_sfn>
c00039a0:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00039a4:	74 3f                	je     c00039e5 <dir_find+0x13f>
c00039a6:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039aa:	75 13                	jne    c00039bf <dir_find+0x119>
c00039ac:	8d 53 20             	lea    edx,[ebx+0x20]
c00039af:	b9 0b 00 00 00       	mov    ecx,0xb
c00039b4:	89 e8                	mov    eax,ebp
c00039b6:	e8 80 e4 ff ff       	call   c0001e3b <mem_cmp>
c00039bb:	85 c0                	test   eax,eax
c00039bd:	74 26                	je     c00039e5 <dir_find+0x13f>
c00039bf:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039c6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039cb:	31 d2                	xor    edx,edx
c00039cd:	89 d8                	mov    eax,ebx
c00039cf:	e8 ed fb ff ff       	call   c00035c1 <dir_next>
c00039d4:	89 c6                	mov    esi,eax
c00039d6:	85 c0                	test   eax,eax
c00039d8:	0f 84 fb fe ff ff    	je     c00038d9 <dir_find+0x33>
c00039de:	eb 05                	jmp    c00039e5 <dir_find+0x13f>
c00039e0:	be 04 00 00 00       	mov    esi,0x4
c00039e5:	83 c4 1c             	add    esp,0x1c
c00039e8:	89 f0                	mov    eax,esi
c00039ea:	5b                   	pop    ebx
c00039eb:	5e                   	pop    esi
c00039ec:	5f                   	pop    edi
c00039ed:	5d                   	pop    ebp
c00039ee:	c3                   	ret    

c00039ef <follow_path>:
c00039ef:	56                   	push   esi
c00039f0:	53                   	push   ebx
c00039f1:	89 c3                	mov    ebx,eax
c00039f3:	83 ec 14             	sub    esp,0x14
c00039f6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a00:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a03:	83 fa 2f             	cmp    edx,0x2f
c0003a06:	75 07                	jne    c0003a0f <follow_path+0x20>
c0003a08:	40                   	inc    eax
c0003a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a0d:	eb ed                	jmp    c00039fc <follow_path+0xd>
c0003a0f:	83 fa 5c             	cmp    edx,0x5c
c0003a12:	74 f4                	je     c0003a08 <follow_path+0x19>
c0003a14:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a1b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a1e:	77 3e                	ja     c0003a5e <follow_path+0x6f>
c0003a20:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a24:	31 d2                	xor    edx,edx
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 04 f9 ff ff       	call   c0003331 <dir_sdi>
c0003a2d:	eb 57                	jmp    c0003a86 <follow_path+0x97>
c0003a2f:	89 d8                	mov    eax,ebx
c0003a31:	e8 70 fe ff ff       	call   c00038a6 <dir_find>
c0003a36:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a39:	85 c0                	test   eax,eax
c0003a3b:	75 32                	jne    c0003a6f <follow_path+0x80>
c0003a3d:	80 e2 04             	and    dl,0x4
c0003a40:	75 44                	jne    c0003a86 <follow_path+0x97>
c0003a42:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a46:	74 39                	je     c0003a81 <follow_path+0x92>
c0003a48:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a4b:	25 ff 01 00 00       	and    eax,0x1ff
c0003a50:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a54:	8a 06                	mov    al,BYTE PTR [esi]
c0003a56:	e8 81 f7 ff ff       	call   c00031dc <ld_clust.isra.0>
c0003a5b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a5e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 8d ef ff ff       	call   c00029f6 <create_name>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 c2                	je     c0003a2f <follow_path+0x40>
c0003a6d:	eb 17                	jmp    c0003a86 <follow_path+0x97>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 12                	jne    c0003a86 <follow_path+0x97>
c0003a74:	80 e2 04             	and    dl,0x4
c0003a77:	ba 05 00 00 00       	mov    edx,0x5
c0003a7c:	0f 44 c2             	cmove  eax,edx
c0003a7f:	eb 05                	jmp    c0003a86 <follow_path+0x97>
c0003a81:	b8 05 00 00 00       	mov    eax,0x5
c0003a86:	83 c4 14             	add    esp,0x14
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	c3                   	ret    

c0003a8c <dir_register>:
c0003a8c:	55                   	push   ebp
c0003a8d:	57                   	push   edi
c0003a8e:	56                   	push   esi
c0003a8f:	be 06 00 00 00       	mov    esi,0x6
c0003a94:	53                   	push   ebx
c0003a95:	83 ec 2c             	sub    esp,0x2c
c0003a98:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a9b:	80 e2 a0             	and    dl,0xa0
c0003a9e:	0f 85 66 01 00 00    	jne    c0003c0a <dir_register+0x17e>
c0003aa4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003aa6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003aae:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003ab1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ab5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003aba:	74 06                	je     c0003ac2 <dir_register+0x36>
c0003abc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ac0:	eb ef                	jmp    c0003ab1 <dir_register+0x25>
c0003ac2:	89 c3                	mov    ebx,eax
c0003ac4:	8d 40 20             	lea    eax,[eax+0x20]
c0003ac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003acb:	89 c2                	mov    edx,eax
c0003acd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003ad2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ad6:	e8 40 e3 ff ff       	call   c0001e1b <mem_cpy>
c0003adb:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ae0:	74 48                	je     c0003b2a <dir_register+0x9e>
c0003ae2:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003ae6:	bd 01 00 00 00       	mov    ebp,0x1
c0003aeb:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003aee:	55                   	push   ebp
c0003aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003af3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003af7:	e8 82 e6 ff ff       	call   c000217e <gen_numname>
c0003afc:	58                   	pop    eax
c0003afd:	89 d8                	mov    eax,ebx
c0003aff:	e8 a2 fd ff ff       	call   c00038a6 <dir_find>
c0003b04:	89 c6                	mov    esi,eax
c0003b06:	85 c0                	test   eax,eax
c0003b08:	75 10                	jne    c0003b1a <dir_register+0x8e>
c0003b0a:	45                   	inc    ebp
c0003b0b:	83 fd 64             	cmp    ebp,0x64
c0003b0e:	75 db                	jne    c0003aeb <dir_register+0x5f>
c0003b10:	be 07 00 00 00       	mov    esi,0x7
c0003b15:	e9 f0 00 00 00       	jmp    c0003c0a <dir_register+0x17e>
c0003b1a:	83 f8 04             	cmp    eax,0x4
c0003b1d:	0f 85 e7 00 00 00    	jne    c0003c0a <dir_register+0x17e>
c0003b23:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b27:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b2a:	bd 01 00 00 00       	mov    ebp,0x1
c0003b2f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b34:	74 13                	je     c0003b49 <dir_register+0xbd>
c0003b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b3a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b3f:	83 c0 0c             	add    eax,0xc
c0003b42:	31 d2                	xor    edx,edx
c0003b44:	f7 f1                	div    ecx
c0003b46:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b49:	89 ea                	mov    edx,ebp
c0003b4b:	89 d8                	mov    eax,ebx
c0003b4d:	e8 74 fb ff ff       	call   c00036c6 <dir_alloc>
c0003b52:	89 c6                	mov    esi,eax
c0003b54:	85 c0                	test   eax,eax
c0003b56:	0f 85 ae 00 00 00    	jne    c0003c0a <dir_register+0x17e>
c0003b5c:	4d                   	dec    ebp
c0003b5d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b61:	74 67                	je     c0003bca <dir_register+0x13e>
c0003b63:	89 e8                	mov    eax,ebp
c0003b65:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b68:	c1 e0 05             	shl    eax,0x5
c0003b6b:	29 c2                	sub    edx,eax
c0003b6d:	89 d8                	mov    eax,ebx
c0003b6f:	e8 bd f7 ff ff       	call   c0003331 <dir_sdi>
c0003b74:	89 c6                	mov    esi,eax
c0003b76:	85 c0                	test   eax,eax
c0003b78:	0f 85 8c 00 00 00    	jne    c0003c0a <dir_register+0x17e>
c0003b7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b82:	e8 b9 e6 ff ff       	call   c0002240 <sum_sfn>
c0003b87:	0f b6 e8             	movzx  ebp,al
c0003b8a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b8d:	89 f8                	mov    eax,edi
c0003b8f:	e8 c2 e7 ff ff       	call   c0002356 <move_window>
c0003b94:	89 c6                	mov    esi,eax
c0003b96:	85 c0                	test   eax,eax
c0003b98:	75 70                	jne    c0003c0a <dir_register+0x17e>
c0003b9a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b9f:	83 ec 0c             	sub    esp,0xc
c0003ba2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ba5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ba8:	55                   	push   ebp
c0003ba9:	e8 35 e5 ff ff       	call   c00020e3 <put_lfn>
c0003bae:	31 d2                	xor    edx,edx
c0003bb0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bb4:	89 d8                	mov    eax,ebx
c0003bb6:	e8 06 fa ff ff       	call   c00035c1 <dir_next>
c0003bbb:	83 c4 10             	add    esp,0x10
c0003bbe:	89 c6                	mov    esi,eax
c0003bc0:	85 c0                	test   eax,eax
c0003bc2:	75 46                	jne    c0003c0a <dir_register+0x17e>
c0003bc4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bc8:	75 c0                	jne    c0003b8a <dir_register+0xfe>
c0003bca:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bcd:	89 f8                	mov    eax,edi
c0003bcf:	e8 82 e7 ff ff       	call   c0002356 <move_window>
c0003bd4:	89 c6                	mov    esi,eax
c0003bd6:	85 c0                	test   eax,eax
c0003bd8:	75 30                	jne    c0003c0a <dir_register+0x17e>
c0003bda:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bdd:	b9 20 00 00 00       	mov    ecx,0x20
c0003be2:	31 d2                	xor    edx,edx
c0003be4:	e8 47 e2 ff ff       	call   c0001e30 <mem_set>
c0003be9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bf0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bf5:	e8 21 e2 ff ff       	call   c0001e1b <mem_cpy>
c0003bfa:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003bfd:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c00:	83 e0 18             	and    eax,0x18
c0003c03:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c06:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c0a:	83 c4 2c             	add    esp,0x2c
c0003c0d:	89 f0                	mov    eax,esi
c0003c0f:	5b                   	pop    ebx
c0003c10:	5e                   	pop    esi
c0003c11:	5f                   	pop    edi
c0003c12:	5d                   	pop    ebp
c0003c13:	c3                   	ret    

c0003c14 <f_mount>:
c0003c14:	53                   	push   ebx
c0003c15:	83 ec 18             	sub    esp,0x18
c0003c18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c1c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c28:	e8 33 e6 ff ff       	call   c0002260 <get_ldnumber>
c0003c2d:	89 c2                	mov    edx,eax
c0003c2f:	b8 0b 00 00 00       	mov    eax,0xb
c0003c34:	85 d2                	test   edx,edx
c0003c36:	78 39                	js     c0003c71 <f_mount+0x5d>
c0003c38:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c3f:	85 c0                	test   eax,eax
c0003c41:	74 03                	je     c0003c46 <f_mount+0x32>
c0003c43:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c4a:	85 c0                	test   eax,eax
c0003c4c:	74 03                	je     c0003c51 <f_mount+0x3d>
c0003c4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c55:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c5c:	31 c0                	xor    eax,eax
c0003c5e:	84 db                	test   bl,bl
c0003c60:	74 0f                	je     c0003c71 <f_mount+0x5d>
c0003c62:	31 c9                	xor    ecx,ecx
c0003c64:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c68:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c6c:	e8 40 e8 ff ff       	call   c00024b1 <mount_volume>
c0003c71:	83 c4 18             	add    esp,0x18
c0003c74:	5b                   	pop    ebx
c0003c75:	c3                   	ret    

c0003c76 <f_open>:
c0003c76:	55                   	push   ebp
c0003c77:	b8 09 00 00 00       	mov    eax,0x9
c0003c7c:	57                   	push   edi
c0003c7d:	56                   	push   esi
c0003c7e:	53                   	push   ebx
c0003c7f:	83 ec 5c             	sub    esp,0x5c
c0003c82:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c86:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c8a:	85 db                	test   ebx,ebx
c0003c8c:	0f 84 a0 02 00 00    	je     c0003f32 <f_open+0x2bc>
c0003c92:	89 fd                	mov    ebp,edi
c0003c94:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c98:	83 e5 3f             	and    ebp,0x3f
c0003c9b:	89 e8                	mov    eax,ebp
c0003c9d:	89 ee                	mov    esi,ebp
c0003c9f:	0f b6 c8             	movzx  ecx,al
c0003ca2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003ca6:	e8 06 e8 ff ff       	call   c00024b1 <mount_volume>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 85 79 02 00 00    	jne    c0003f2c <f_open+0x2b6>
c0003cb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cb7:	83 ec 0c             	sub    esp,0xc
c0003cba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbe:	68 00 02 00 00       	push   0x200
c0003cc3:	e8 60 1f 00 00       	call   c0005c28 <ff_memalloc>
c0003cc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	b8 11 00 00 00       	mov    eax,0x11
c0003cd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cd9:	0f 84 53 02 00 00    	je     c0003f32 <f_open+0x2bc>
c0003cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ce7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ceb:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cee:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cf2:	e8 f8 fc ff ff       	call   c00039ef <follow_path>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	75 0d                	jne    c0003d08 <f_open+0x92>
c0003cfb:	ba 06 00 00 00       	mov    edx,0x6
c0003d00:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d05:	0f 45 c2             	cmovne eax,edx
c0003d08:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d0e:	0f 84 d5 00 00 00    	je     c0003de9 <f_open+0x173>
c0003d14:	85 c0                	test   eax,eax
c0003d16:	74 21                	je     c0003d39 <f_open+0xc3>
c0003d18:	83 f8 04             	cmp    eax,0x4
c0003d1b:	0f 85 f0 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003d21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d25:	e8 62 fd ff ff       	call   c0003a8c <dir_register>
c0003d2a:	85 c0                	test   eax,eax
c0003d2c:	0f 85 df 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003d32:	83 cd 08             	or     ebp,0x8
c0003d35:	89 ee                	mov    esi,ebp
c0003d37:	eb 2c                	jmp    c0003d65 <f_open+0xef>
c0003d39:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d3d:	b8 07 00 00 00       	mov    eax,0x7
c0003d42:	80 e2 11             	and    dl,0x11
c0003d45:	0f 85 c6 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003d4b:	b8 08 00 00 00       	mov    eax,0x8
c0003d50:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d56:	0f 85 b5 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003d5c:	83 e7 08             	and    edi,0x8
c0003d5f:	0f 84 b1 00 00 00    	je     c0003e16 <f_open+0x1a0>
c0003d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d69:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d6d:	89 ea                	mov    edx,ebp
c0003d6f:	8a 00                	mov    al,BYTE PTR [eax]
c0003d71:	e8 66 f4 ff ff       	call   c00031dc <ld_clust.isra.0>
c0003d76:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d7b:	89 c7                	mov    edi,eax
c0003d7d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d80:	e8 93 e0 ff ff       	call   c0001e18 <st_dword>
c0003d85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d89:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d8d:	31 c9                	xor    ecx,ecx
c0003d8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d97:	e8 69 f4 ff ff       	call   c0003205 <st_clust.isra.1>
c0003d9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003da0:	83 c0 1c             	add    eax,0x1c
c0003da3:	31 d2                	xor    edx,edx
c0003da5:	e8 6e e0 ff ff       	call   c0001e18 <st_dword>
c0003daa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dae:	85 ff                	test   edi,edi
c0003db0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003db4:	74 60                	je     c0003e16 <f_open+0x1a0>
c0003db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dba:	31 c9                	xor    ecx,ecx
c0003dbc:	89 fa                	mov    edx,edi
c0003dbe:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003dc1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dc5:	e8 69 f7 ff ff       	call   c0003533 <remove_chain>
c0003dca:	85 c0                	test   eax,eax
c0003dcc:	0f 85 3f 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003dd2:	89 ea                	mov    edx,ebp
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	e8 79 e5 ff ff       	call   c0002356 <move_window>
c0003ddd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003de1:	4f                   	dec    edi
c0003de2:	85 c0                	test   eax,eax
c0003de4:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003de7:	eb 27                	jmp    c0003e10 <f_open+0x19a>
c0003de9:	85 c0                	test   eax,eax
c0003deb:	0f 85 20 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003df1:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003df5:	b8 04 00 00 00       	mov    eax,0x4
c0003dfa:	f6 c2 10             	test   dl,0x10
c0003dfd:	0f 85 0e 01 00 00    	jne    c0003f11 <f_open+0x29b>
c0003e03:	83 e7 02             	and    edi,0x2
c0003e06:	74 0e                	je     c0003e16 <f_open+0x1a0>
c0003e08:	b8 07 00 00 00       	mov    eax,0x7
c0003e0d:	80 e2 01             	and    dl,0x1
c0003e10:	0f 85 fb 00 00 00    	jne    c0003f11 <f_open+0x29b>
c0003e16:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e1c:	74 03                	je     c0003e21 <f_open+0x1ab>
c0003e1e:	83 ce 40             	or     esi,0x40
c0003e21:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e25:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e29:	89 fa                	mov    edx,edi
c0003e2b:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e2e:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e31:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e34:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e37:	e8 a0 f3 ff ff       	call   c00031dc <ld_clust.isra.0>
c0003e3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e3f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e42:	e8 b5 df ff ff       	call   c0001dfc <ld_dword>
c0003e47:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e4c:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e4f:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e53:	31 d2                	xor    edx,edx
c0003e55:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e59:	89 f0                	mov    eax,esi
c0003e5b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e5e:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e62:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e69:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e70:	b9 00 02 00 00       	mov    ecx,0x200
c0003e75:	89 f8                	mov    eax,edi
c0003e77:	e8 b4 df ff ff       	call   c0001e30 <mem_set>
c0003e7c:	83 e6 20             	and    esi,0x20
c0003e7f:	75 07                	jne    c0003e88 <f_open+0x212>
c0003e81:	31 c0                	xor    eax,eax
c0003e83:	e9 89 00 00 00       	jmp    c0003f11 <f_open+0x29b>
c0003e88:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e8b:	85 ed                	test   ebp,ebp
c0003e8d:	74 f2                	je     c0003e81 <f_open+0x20b>
c0003e8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e93:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e96:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e99:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e9d:	c1 e6 09             	shl    esi,0x9
c0003ea0:	31 c0                	xor    eax,eax
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	75 23                	jne    c0003ec9 <f_open+0x253>
c0003ea6:	39 f5                	cmp    ebp,esi
c0003ea8:	76 1f                	jbe    c0003ec9 <f_open+0x253>
c0003eaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003eac:	e8 7c f3 ff ff       	call   c000322d <get_fat.isra.2>
c0003eb1:	89 c2                	mov    edx,eax
c0003eb3:	b8 02 00 00 00       	mov    eax,0x2
c0003eb8:	83 fa 01             	cmp    edx,0x1
c0003ebb:	76 08                	jbe    c0003ec5 <f_open+0x24f>
c0003ebd:	31 c0                	xor    eax,eax
c0003ebf:	83 fa ff             	cmp    edx,0xffffffff
c0003ec2:	0f 94 c0             	sete   al
c0003ec5:	29 f5                	sub    ebp,esi
c0003ec7:	eb d9                	jmp    c0003ea2 <f_open+0x22c>
c0003ec9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 41                	jne    c0003f11 <f_open+0x29b>
c0003ed0:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003ed6:	74 a9                	je     c0003e81 <f_open+0x20b>
c0003ed8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003edc:	89 f0                	mov    eax,esi
c0003ede:	e8 63 e1 ff ff       	call   c0002046 <clst2sect>
c0003ee3:	89 c2                	mov    edx,eax
c0003ee5:	b8 02 00 00 00       	mov    eax,0x2
c0003eea:	85 d2                	test   edx,edx
c0003eec:	74 23                	je     c0003f11 <f_open+0x29b>
c0003eee:	c1 ed 09             	shr    ebp,0x9
c0003ef1:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ef5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003ef8:	6a 01                	push   0x1
c0003efa:	50                   	push   eax
c0003efb:	57                   	push   edi
c0003efc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003f00:	50                   	push   eax
c0003f01:	e8 9e de ff ff       	call   c0001da4 <disk_read>
c0003f06:	83 c4 10             	add    esp,0x10
c0003f09:	85 c0                	test   eax,eax
c0003f0b:	0f 95 c0             	setne  al
c0003f0e:	0f b6 c0             	movzx  eax,al
c0003f11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f15:	83 ec 0c             	sub    esp,0xc
c0003f18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f1c:	e8 1f 1d 00 00       	call   c0005c40 <ff_memfree>
c0003f21:	83 c4 10             	add    esp,0x10
c0003f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f28:	85 c0                	test   eax,eax
c0003f2a:	74 06                	je     c0003f32 <f_open+0x2bc>
c0003f2c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f32:	83 c4 5c             	add    esp,0x5c
c0003f35:	5b                   	pop    ebx
c0003f36:	5e                   	pop    esi
c0003f37:	5f                   	pop    edi
c0003f38:	5d                   	pop    ebp
c0003f39:	c3                   	ret    

c0003f3a <f_read>:
c0003f3a:	55                   	push   ebp
c0003f3b:	57                   	push   edi
c0003f3c:	56                   	push   esi
c0003f3d:	53                   	push   ebx
c0003f3e:	83 ec 2c             	sub    esp,0x2c
c0003f41:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f45:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f49:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f4d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f57:	89 d8                	mov    eax,ebx
c0003f59:	e8 4f e3 ff ff       	call   c00022ad <validate>
c0003f5e:	89 c5                	mov    ebp,eax
c0003f60:	85 c0                	test   eax,eax
c0003f62:	0f 85 a9 01 00 00    	jne    c0004111 <f_read+0x1d7>
c0003f68:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f6c:	85 ed                	test   ebp,ebp
c0003f6e:	0f 85 9d 01 00 00    	jne    c0004111 <f_read+0x1d7>
c0003f74:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f78:	0f 84 8e 01 00 00    	je     c000410c <f_read+0x1d2>
c0003f7e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f81:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f84:	39 f0                	cmp    eax,esi
c0003f86:	0f 46 f0             	cmovbe esi,eax
c0003f89:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f8d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0003f92:	0f 84 79 01 00 00    	je     c0004111 <f_read+0x1d7>
c0003f98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f9b:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fa0:	0f 85 29 01 00 00    	jne    c00040cf <f_read+0x195>
c0003fa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003faa:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003fae:	89 c2                	mov    edx,eax
c0003fb0:	4f                   	dec    edi
c0003fb1:	c1 ea 09             	shr    edx,0x9
c0003fb4:	21 d7                	and    edi,edx
c0003fb6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003fba:	75 3c                	jne    c0003ff8 <f_read+0xbe>
c0003fbc:	85 c0                	test   eax,eax
c0003fbe:	75 05                	jne    c0003fc5 <f_read+0x8b>
c0003fc0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fc3:	eb 0a                	jmp    c0003fcf <f_read+0x95>
c0003fc5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003fca:	e8 5e f2 ff ff       	call   c000322d <get_fat.isra.2>
c0003fcf:	83 f8 01             	cmp    eax,0x1
c0003fd2:	77 0e                	ja     c0003fe2 <f_read+0xa8>
c0003fd4:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003fd8:	bd 02 00 00 00       	mov    ebp,0x2
c0003fdd:	e9 2f 01 00 00       	jmp    c0004111 <f_read+0x1d7>
c0003fe2:	83 f8 ff             	cmp    eax,0xffffffff
c0003fe5:	75 0e                	jne    c0003ff5 <f_read+0xbb>
c0003fe7:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003feb:	bd 01 00 00 00       	mov    ebp,0x1
c0003ff0:	e9 1c 01 00 00       	jmp    c0004111 <f_read+0x1d7>
c0003ff5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003ff8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ffc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fff:	89 c8                	mov    eax,ecx
c0004001:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004005:	e8 3c e0 ff ff       	call   c0002046 <clst2sect>
c000400a:	85 c0                	test   eax,eax
c000400c:	74 c6                	je     c0003fd4 <f_read+0x9a>
c000400e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004012:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c000401a:	8d 3c 01             	lea    edi,[ecx+eax*1]
c000401d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004021:	76 5a                	jbe    c000407d <f_read+0x143>
c0004023:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004027:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000402b:	c1 ee 09             	shr    esi,0x9
c000402e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004032:	01 f2                	add    edx,esi
c0004034:	39 c2                	cmp    edx,eax
c0004036:	76 06                	jbe    c000403e <f_read+0x104>
c0004038:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000403c:	89 c6                	mov    esi,eax
c000403e:	56                   	push   esi
c000403f:	57                   	push   edi
c0004040:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004044:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004048:	50                   	push   eax
c0004049:	e8 56 dd ff ff       	call   c0001da4 <disk_read>
c000404e:	83 c4 10             	add    esp,0x10
c0004051:	85 c0                	test   eax,eax
c0004053:	75 92                	jne    c0003fe7 <f_read+0xad>
c0004055:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004059:	74 1d                	je     c0004078 <f_read+0x13e>
c000405b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000405e:	29 f8                	sub    eax,edi
c0004060:	39 f0                	cmp    eax,esi
c0004062:	73 14                	jae    c0004078 <f_read+0x13e>
c0004064:	c1 e0 09             	shl    eax,0x9
c0004067:	8d 53 28             	lea    edx,[ebx+0x28]
c000406a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000406e:	b9 00 02 00 00       	mov    ecx,0x200
c0004073:	e8 a3 dd ff ff       	call   c0001e1b <mem_cpy>
c0004078:	c1 e6 09             	shl    esi,0x9
c000407b:	eb 79                	jmp    c00040f6 <f_read+0x1bc>
c000407d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004080:	39 f8                	cmp    eax,edi
c0004082:	74 48                	je     c00040cc <f_read+0x192>
c0004084:	8d 73 28             	lea    esi,[ebx+0x28]
c0004087:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000408b:	74 22                	je     c00040af <f_read+0x175>
c000408d:	6a 01                	push   0x1
c000408f:	50                   	push   eax
c0004090:	56                   	push   esi
c0004091:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004095:	50                   	push   eax
c0004096:	e8 1f dd ff ff       	call   c0001dba <disk_write>
c000409b:	83 c4 10             	add    esp,0x10
c000409e:	85 c0                	test   eax,eax
c00040a0:	0f 85 41 ff ff ff    	jne    c0003fe7 <f_read+0xad>
c00040a6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040a9:	83 e0 7f             	and    eax,0x7f
c00040ac:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040af:	6a 01                	push   0x1
c00040b1:	57                   	push   edi
c00040b2:	56                   	push   esi
c00040b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 e3 dc ff ff       	call   c0001da4 <disk_read>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 1b ff ff ff    	jne    c0003fe7 <f_read+0xad>
c00040cc:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040d2:	be 00 02 00 00       	mov    esi,0x200
c00040d7:	25 ff 01 00 00       	and    eax,0x1ff
c00040dc:	29 c6                	sub    esi,eax
c00040de:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c00040e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040e6:	0f 46 74 24 04       	cmovbe esi,DWORD PTR [esp+0x4]
c00040eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00040ef:	89 f1                	mov    ecx,esi
c00040f1:	e8 25 dd ff ff       	call   c0001e1b <mem_cpy>
c00040f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040fa:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00040fe:	01 30                	add    DWORD PTR [eax],esi
c0004100:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004104:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004107:	e9 81 fe ff ff       	jmp    c0003f8d <f_read+0x53>
c000410c:	bd 07 00 00 00       	mov    ebp,0x7
c0004111:	83 c4 2c             	add    esp,0x2c
c0004114:	89 e8                	mov    eax,ebp
c0004116:	5b                   	pop    ebx
c0004117:	5e                   	pop    esi
c0004118:	5f                   	pop    edi
c0004119:	5d                   	pop    ebp
c000411a:	c3                   	ret    

c000411b <f_write>:
c000411b:	55                   	push   ebp
c000411c:	57                   	push   edi
c000411d:	56                   	push   esi
c000411e:	53                   	push   ebx
c000411f:	83 ec 2c             	sub    esp,0x2c
c0004122:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004126:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000412e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004134:	89 d8                	mov    eax,ebx
c0004136:	e8 72 e1 ff ff       	call   c00022ad <validate>
c000413b:	89 c5                	mov    ebp,eax
c000413d:	85 c0                	test   eax,eax
c000413f:	0f 85 11 02 00 00    	jne    c0004356 <f_write+0x23b>
c0004145:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004149:	85 ed                	test   ebp,ebp
c000414b:	0f 85 05 02 00 00    	jne    c0004356 <f_write+0x23b>
c0004151:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004155:	0f 84 f6 01 00 00    	je     c0004351 <f_write+0x236>
c000415b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415e:	89 c7                	mov    edi,eax
c0004160:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004164:	0f 83 ed 00 00 00    	jae    c0004257 <f_write+0x13c>
c000416a:	f7 d0                	not    eax
c000416c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004170:	e9 e2 00 00 00       	jmp    c0004257 <f_write+0x13c>
c0004175:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004178:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417e:	0f 85 98 01 00 00    	jne    c000431c <f_write+0x201>
c0004184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004188:	89 d1                	mov    ecx,edx
c000418a:	c1 e9 09             	shr    ecx,0x9
c000418d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004191:	48                   	dec    eax
c0004192:	21 c8                	and    eax,ecx
c0004194:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004198:	0f 84 c6 00 00 00    	je     c0004264 <f_write+0x149>
c000419e:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a2:	0f 85 20 01 00 00    	jne    c00042c8 <f_write+0x1ad>
c00041a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041af:	89 c8                	mov    eax,ecx
c00041b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b5:	e8 8c de ff ff       	call   c0002046 <clst2sect>
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 84 d0 00 00 00    	je     c0004292 <f_write+0x177>
c00041c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ca:	01 c7                	add    edi,eax
c00041cc:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d4:	0f 86 1a 01 00 00    	jbe    c00042f4 <f_write+0x1d9>
c00041da:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041e2:	c1 ee 09             	shr    esi,0x9
c00041e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e9:	01 f2                	add    edx,esi
c00041eb:	39 c2                	cmp    edx,eax
c00041ed:	76 06                	jbe    c00041f5 <f_write+0xda>
c00041ef:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f3:	89 c6                	mov    esi,eax
c00041f5:	56                   	push   esi
c00041f6:	57                   	push   edi
c00041f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041ff:	50                   	push   eax
c0004200:	e8 b5 db ff ff       	call   c0001dba <disk_write>
c0004205:	83 c4 10             	add    esp,0x10
c0004208:	85 c0                	test   eax,eax
c000420a:	0f 85 95 00 00 00    	jne    c00042a5 <f_write+0x18a>
c0004210:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004213:	29 fa                	sub    edx,edi
c0004215:	39 f2                	cmp    edx,esi
c0004217:	73 1d                	jae    c0004236 <f_write+0x11b>
c0004219:	c1 e2 09             	shl    edx,0x9
c000421c:	8d 43 28             	lea    eax,[ebx+0x28]
c000421f:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004223:	b9 00 02 00 00       	mov    ecx,0x200
c0004228:	e8 ee db ff ff       	call   c0001e1b <mem_cpy>
c000422d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004230:	83 e0 7f             	and    eax,0x7f
c0004233:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004236:	c1 e6 09             	shl    esi,0x9
c0004239:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000423d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004241:	01 30                	add    DWORD PTR [eax],esi
c0004243:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004247:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424a:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000424d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004250:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004254:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004257:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425c:	0f 85 13 ff ff ff    	jne    c0004175 <f_write+0x5a>
c0004262:	eb 1b                	jmp    c000427f <f_write+0x164>
c0004264:	85 d2                	test   edx,edx
c0004266:	75 09                	jne    c0004271 <f_write+0x156>
c0004268:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426b:	85 c0                	test   eax,eax
c000426d:	75 1e                	jne    c000428d <f_write+0x172>
c000426f:	eb 03                	jmp    c0004274 <f_write+0x159>
c0004271:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004274:	89 d8                	mov    eax,ebx
c0004276:	e8 7e f1 ff ff       	call   c00033f9 <create_chain>
c000427b:	85 c0                	test   eax,eax
c000427d:	75 0e                	jne    c000428d <f_write+0x172>
c000427f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004282:	83 c8 40             	or     eax,0x40
c0004285:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004288:	e9 c9 00 00 00       	jmp    c0004356 <f_write+0x23b>
c000428d:	83 f8 01             	cmp    eax,0x1
c0004290:	75 0e                	jne    c00042a0 <f_write+0x185>
c0004292:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004296:	bd 02 00 00 00       	mov    ebp,0x2
c000429b:	e9 b6 00 00 00       	jmp    c0004356 <f_write+0x23b>
c00042a0:	83 f8 ff             	cmp    eax,0xffffffff
c00042a3:	75 0e                	jne    c00042b3 <f_write+0x198>
c00042a5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042a9:	bd 01 00 00 00       	mov    ebp,0x1
c00042ae:	e9 a3 00 00 00       	jmp    c0004356 <f_write+0x23b>
c00042b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042ba:	0f 85 de fe ff ff    	jne    c000419e <f_write+0x83>
c00042c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c3:	e9 d6 fe ff ff       	jmp    c000419e <f_write+0x83>
c00042c8:	6a 01                	push   0x1
c00042ca:	8d 43 28             	lea    eax,[ebx+0x28]
c00042cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d0:	50                   	push   eax
c00042d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042d9:	50                   	push   eax
c00042da:	e8 db da ff ff       	call   c0001dba <disk_write>
c00042df:	83 c4 10             	add    esp,0x10
c00042e2:	85 c0                	test   eax,eax
c00042e4:	75 bf                	jne    c00042a5 <f_write+0x18a>
c00042e6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042e9:	83 e0 7f             	and    eax,0x7f
c00042ec:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ef:	e9 b4 fe ff ff       	jmp    c00041a8 <f_write+0x8d>
c00042f4:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042f7:	74 20                	je     c0004319 <f_write+0x1fe>
c00042f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042fc:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00042ff:	76 18                	jbe    c0004319 <f_write+0x1fe>
c0004301:	6a 01                	push   0x1
c0004303:	8d 43 28             	lea    eax,[ebx+0x28]
c0004306:	57                   	push   edi
c0004307:	50                   	push   eax
c0004308:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430c:	50                   	push   eax
c000430d:	e8 92 da ff ff       	call   c0001da4 <disk_read>
c0004312:	83 c4 10             	add    esp,0x10
c0004315:	85 c0                	test   eax,eax
c0004317:	75 8c                	jne    c00042a5 <f_write+0x18a>
c0004319:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000431f:	be 00 02 00 00       	mov    esi,0x200
c0004324:	25 ff 01 00 00       	and    eax,0x1ff
c0004329:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000432d:	29 c6                	sub    esi,eax
c000432f:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0004333:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004337:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	e8 d8 da ff ff       	call   c0001e1b <mem_cpy>
c0004343:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004346:	83 c8 80             	or     eax,0xffffff80
c0004349:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000434c:	e9 e8 fe ff ff       	jmp    c0004239 <f_write+0x11e>
c0004351:	bd 07 00 00 00       	mov    ebp,0x7
c0004356:	83 c4 2c             	add    esp,0x2c
c0004359:	89 e8                	mov    eax,ebp
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	5f                   	pop    edi
c000435e:	5d                   	pop    ebp
c000435f:	c3                   	ret    

c0004360 <f_sync>:
c0004360:	56                   	push   esi
c0004361:	53                   	push   ebx
c0004362:	83 ec 14             	sub    esp,0x14
c0004365:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004369:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000436d:	89 d8                	mov    eax,ebx
c000436f:	e8 39 df ff ff       	call   c00022ad <validate>
c0004374:	85 c0                	test   eax,eax
c0004376:	0f 85 a3 00 00 00    	jne    c000441f <f_sync+0xbf>
c000437c:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000437f:	f6 c2 40             	test   dl,0x40
c0004382:	0f 84 97 00 00 00    	je     c000441f <f_sync+0xbf>
c0004388:	80 e2 80             	and    dl,0x80
c000438b:	74 2e                	je     c00043bb <f_sync+0x5b>
c000438d:	6a 01                	push   0x1
c000438f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004392:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004395:	50                   	push   eax
c0004396:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000439e:	50                   	push   eax
c000439f:	e8 16 da ff ff       	call   c0001dba <disk_write>
c00043a4:	89 c2                	mov    edx,eax
c00043a6:	83 c4 10             	add    esp,0x10
c00043a9:	b8 01 00 00 00       	mov    eax,0x1
c00043ae:	85 d2                	test   edx,edx
c00043b0:	75 6d                	jne    c000441f <f_sync+0xbf>
c00043b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b5:	83 e0 7f             	and    eax,0x7f
c00043b8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c2:	e8 8f df ff ff       	call   c0002356 <move_window>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	75 54                	jne    c000441f <f_sync+0xbf>
c00043cb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043ce:	89 f2                	mov    edx,esi
c00043d0:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d3:	83 c8 20             	or     eax,0x20
c00043d6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043d9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043de:	e8 22 ee ff ff       	call   c0003205 <st_clust.isra.1>
c00043e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043e6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043e9:	e8 2a da ff ff       	call   c0001e18 <st_dword>
c00043ee:	8d 46 16             	lea    eax,[esi+0x16]
c00043f1:	ba 00 00 21 50       	mov    edx,0x50210000
c00043f6:	e8 1d da ff ff       	call   c0001e18 <st_dword>
c00043fb:	31 d2                	xor    edx,edx
c00043fd:	8d 46 12             	lea    eax,[esi+0x12]
c0004400:	e8 0f da ff ff       	call   c0001e14 <st_word>
c0004405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004409:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000440d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004411:	e8 6b e9 ff ff       	call   c0002d81 <sync_fs>
c0004416:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004419:	83 e2 bf             	and    edx,0xffffffbf
c000441c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000441f:	83 c4 14             	add    esp,0x14
c0004422:	5b                   	pop    ebx
c0004423:	5e                   	pop    esi
c0004424:	c3                   	ret    

c0004425 <f_close>:
c0004425:	53                   	push   ebx
c0004426:	83 ec 24             	sub    esp,0x24
c0004429:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000442d:	53                   	push   ebx
c000442e:	e8 2d ff ff ff       	call   c0004360 <f_sync>
c0004433:	83 c4 10             	add    esp,0x10
c0004436:	85 c0                	test   eax,eax
c0004438:	75 15                	jne    c000444f <f_close+0x2a>
c000443a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000443e:	89 d8                	mov    eax,ebx
c0004440:	e8 68 de ff ff       	call   c00022ad <validate>
c0004445:	85 c0                	test   eax,eax
c0004447:	75 06                	jne    c000444f <f_close+0x2a>
c0004449:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000444f:	83 c4 18             	add    esp,0x18
c0004452:	5b                   	pop    ebx
c0004453:	c3                   	ret    

c0004454 <f_lseek>:
c0004454:	55                   	push   ebp
c0004455:	57                   	push   edi
c0004456:	56                   	push   esi
c0004457:	53                   	push   ebx
c0004458:	83 ec 2c             	sub    esp,0x2c
c000445b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000445f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004463:	89 d8                	mov    eax,ebx
c0004465:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004469:	e8 3f de ff ff       	call   c00022ad <validate>
c000446e:	89 c5                	mov    ebp,eax
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 82 01 00 00    	jne    c00045fa <f_lseek+0x1a6>
c0004478:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000447c:	85 ed                	test   ebp,ebp
c000447e:	0f 85 76 01 00 00    	jne    c00045fa <f_lseek+0x1a6>
c0004484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004487:	39 f0                	cmp    eax,esi
c0004489:	73 07                	jae    c0004492 <f_lseek+0x3e>
c000448b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000448f:	0f 44 f0             	cmove  esi,eax
c0004492:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004495:	85 f6                	test   esi,esi
c0004497:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000449e:	75 07                	jne    c00044a7 <f_lseek+0x53>
c00044a0:	31 f6                	xor    esi,esi
c00044a2:	e9 e2 00 00 00       	jmp    c0004589 <f_lseek+0x135>
c00044a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044ab:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044af:	c1 e7 09             	shl    edi,0x9
c00044b2:	85 c9                	test   ecx,ecx
c00044b4:	74 28                	je     c00044de <f_lseek+0x8a>
c00044b6:	31 d2                	xor    edx,edx
c00044b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00044bb:	f7 f7                	div    edi
c00044bd:	49                   	dec    ecx
c00044be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c2:	31 d2                	xor    edx,edx
c00044c4:	89 c8                	mov    eax,ecx
c00044c6:	f7 f7                	div    edi
c00044c8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044cc:	72 10                	jb     c00044de <f_lseek+0x8a>
c00044ce:	89 f8                	mov    eax,edi
c00044d0:	f7 d8                	neg    eax
c00044d2:	21 c1                	and    ecx,eax
c00044d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044d7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044da:	29 ce                	sub    esi,ecx
c00044dc:	eb 3c                	jmp    c000451a <f_lseek+0xc6>
c00044de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e1:	85 c0                	test   eax,eax
c00044e3:	75 32                	jne    c0004517 <f_lseek+0xc3>
c00044e5:	31 d2                	xor    edx,edx
c00044e7:	89 d8                	mov    eax,ebx
c00044e9:	e8 0b ef ff ff       	call   c00033f9 <create_chain>
c00044ee:	83 f8 01             	cmp    eax,0x1
c00044f1:	75 0e                	jne    c0004501 <f_lseek+0xad>
c00044f3:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044f7:	bd 02 00 00 00       	mov    ebp,0x2
c00044fc:	e9 f9 00 00 00       	jmp    c00045fa <f_lseek+0x1a6>
c0004501:	83 f8 ff             	cmp    eax,0xffffffff
c0004504:	75 0e                	jne    c0004514 <f_lseek+0xc0>
c0004506:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450a:	bd 01 00 00 00       	mov    ebp,0x1
c000450f:	e9 e6 00 00 00       	jmp    c00045fa <f_lseek+0x1a6>
c0004514:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004517:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451a:	85 c0                	test   eax,eax
c000451c:	74 82                	je     c00044a0 <f_lseek+0x4c>
c000451e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004521:	39 fe                	cmp    esi,edi
c0004523:	76 3d                	jbe    c0004562 <f_lseek+0x10e>
c0004525:	01 fa                	add    edx,edi
c0004527:	29 fe                	sub    esi,edi
c0004529:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000452c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004530:	89 c2                	mov    edx,eax
c0004532:	74 0d                	je     c0004541 <f_lseek+0xed>
c0004534:	89 d8                	mov    eax,ebx
c0004536:	e8 be ee ff ff       	call   c00033f9 <create_chain>
c000453b:	85 c0                	test   eax,eax
c000453d:	75 09                	jne    c0004548 <f_lseek+0xf4>
c000453f:	eb 1f                	jmp    c0004560 <f_lseek+0x10c>
c0004541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004543:	e8 e5 ec ff ff       	call   c000322d <get_fat.isra.2>
c0004548:	83 f8 ff             	cmp    eax,0xffffffff
c000454b:	74 b9                	je     c0004506 <f_lseek+0xb2>
c000454d:	83 f8 01             	cmp    eax,0x1
c0004550:	76 a1                	jbe    c00044f3 <f_lseek+0x9f>
c0004552:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004556:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004559:	76 98                	jbe    c00044f3 <f_lseek+0x9f>
c000455b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000455e:	eb be                	jmp    c000451e <f_lseek+0xca>
c0004560:	31 f6                	xor    esi,esi
c0004562:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004565:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000456b:	0f 84 2f ff ff ff    	je     c00044a0 <f_lseek+0x4c>
c0004571:	89 c2                	mov    edx,eax
c0004573:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004577:	e8 ca da ff ff       	call   c0002046 <clst2sect>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 84 6f ff ff ff    	je     c00044f3 <f_lseek+0x9f>
c0004584:	c1 ee 09             	shr    esi,0x9
c0004587:	01 c6                	add    esi,eax
c0004589:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000458c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000458f:	76 0c                	jbe    c000459d <f_lseek+0x149>
c0004591:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004594:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004597:	83 ca 40             	or     edx,0x40
c000459a:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000459d:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a2:	74 56                	je     c00045fa <f_lseek+0x1a6>
c00045a4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045a7:	39 f0                	cmp    eax,esi
c00045a9:	74 4f                	je     c00045fa <f_lseek+0x1a6>
c00045ab:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b2:	74 26                	je     c00045da <f_lseek+0x186>
c00045b4:	6a 01                	push   0x1
c00045b6:	50                   	push   eax
c00045b7:	57                   	push   edi
c00045b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c0:	50                   	push   eax
c00045c1:	e8 f4 d7 ff ff       	call   c0001dba <disk_write>
c00045c6:	83 c4 10             	add    esp,0x10
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 35 ff ff ff    	jne    c0004506 <f_lseek+0xb2>
c00045d1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d4:	83 e0 7f             	and    eax,0x7f
c00045d7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045da:	6a 01                	push   0x1
c00045dc:	56                   	push   esi
c00045dd:	57                   	push   edi
c00045de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045e6:	50                   	push   eax
c00045e7:	e8 b8 d7 ff ff       	call   c0001da4 <disk_read>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	85 c0                	test   eax,eax
c00045f1:	0f 85 0f ff ff ff    	jne    c0004506 <f_lseek+0xb2>
c00045f7:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045fa:	83 c4 2c             	add    esp,0x2c
c00045fd:	89 e8                	mov    eax,ebp
c00045ff:	5b                   	pop    ebx
c0004600:	5e                   	pop    esi
c0004601:	5f                   	pop    edi
c0004602:	5d                   	pop    ebp
c0004603:	c3                   	ret    

c0004604 <f_opendir>:
c0004604:	56                   	push   esi
c0004605:	b8 09 00 00 00       	mov    eax,0x9
c000460a:	53                   	push   ebx
c000460b:	83 ec 24             	sub    esp,0x24
c000460e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004612:	85 db                	test   ebx,ebx
c0004614:	0f 84 af 00 00 00    	je     c00046c9 <f_opendir+0xc5>
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004620:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004624:	e8 88 de ff ff       	call   c00024b1 <mount_volume>
c0004629:	85 c0                	test   eax,eax
c000462b:	0f 85 92 00 00 00    	jne    c00046c3 <f_opendir+0xbf>
c0004631:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004635:	83 ec 0c             	sub    esp,0xc
c0004638:	89 03                	mov    DWORD PTR [ebx],eax
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 e4 15 00 00       	call   c0005c28 <ff_memalloc>
c0004644:	89 c6                	mov    esi,eax
c0004646:	83 c4 10             	add    esp,0x10
c0004649:	b8 11 00 00 00       	mov    eax,0x11
c000464e:	85 f6                	test   esi,esi
c0004650:	74 77                	je     c00046c9 <f_opendir+0xc5>
c0004652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004656:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000465d:	89 d8                	mov    eax,ebx
c000465f:	e8 8b f3 ff ff       	call   c00039ef <follow_path>
c0004664:	85 c0                	test   eax,eax
c0004666:	75 37                	jne    c000469f <f_opendir+0x9b>
c0004668:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000466c:	75 1c                	jne    c000468a <f_opendir+0x86>
c000466e:	b8 05 00 00 00       	mov    eax,0x5
c0004673:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004677:	74 26                	je     c000469f <f_opendir+0x9b>
c0004679:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000467d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004680:	8a 00                	mov    al,BYTE PTR [eax]
c0004682:	e8 55 eb ff ff       	call   c00031dc <ld_clust.isra.0>
c0004687:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468e:	31 d2                	xor    edx,edx
c0004690:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004694:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004698:	89 d8                	mov    eax,ebx
c000469a:	e8 92 ec ff ff       	call   c0003331 <dir_sdi>
c000469f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a3:	83 ec 0c             	sub    esp,0xc
c00046a6:	56                   	push   esi
c00046a7:	e8 94 15 00 00       	call   c0005c40 <ff_memfree>
c00046ac:	83 c4 10             	add    esp,0x10
c00046af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b3:	83 f8 04             	cmp    eax,0x4
c00046b6:	74 06                	je     c00046be <f_opendir+0xba>
c00046b8:	85 c0                	test   eax,eax
c00046ba:	74 0d                	je     c00046c9 <f_opendir+0xc5>
c00046bc:	eb 05                	jmp    c00046c3 <f_opendir+0xbf>
c00046be:	b8 05 00 00 00       	mov    eax,0x5
c00046c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046c9:	83 c4 24             	add    esp,0x24
c00046cc:	5b                   	pop    ebx
c00046cd:	5e                   	pop    esi
c00046ce:	c3                   	ret    

c00046cf <f_closedir>:
c00046cf:	53                   	push   ebx
c00046d0:	83 ec 18             	sub    esp,0x18
c00046d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046db:	89 d8                	mov    eax,ebx
c00046dd:	e8 cb db ff ff       	call   c00022ad <validate>
c00046e2:	85 c0                	test   eax,eax
c00046e4:	75 06                	jne    c00046ec <f_closedir+0x1d>
c00046e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ec:	83 c4 18             	add    esp,0x18
c00046ef:	5b                   	pop    ebx
c00046f0:	c3                   	ret    

c00046f1 <f_readdir>:
c00046f1:	57                   	push   edi
c00046f2:	56                   	push   esi
c00046f3:	53                   	push   ebx
c00046f4:	83 ec 20             	sub    esp,0x20
c00046f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00046fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ff:	89 d8                	mov    eax,ebx
c0004701:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004705:	e8 a3 db ff ff       	call   c00022ad <validate>
c000470a:	85 c0                	test   eax,eax
c000470c:	75 6e                	jne    c000477c <f_readdir+0x8b>
c000470e:	85 ff                	test   edi,edi
c0004710:	75 0b                	jne    c000471d <f_readdir+0x2c>
c0004712:	31 d2                	xor    edx,edx
c0004714:	89 d8                	mov    eax,ebx
c0004716:	e8 16 ec ff ff       	call   c0003331 <dir_sdi>
c000471b:	eb 5f                	jmp    c000477c <f_readdir+0x8b>
c000471d:	83 ec 0c             	sub    esp,0xc
c0004720:	68 00 02 00 00       	push   0x200
c0004725:	e8 fe 14 00 00       	call   c0005c28 <ff_memalloc>
c000472a:	89 c6                	mov    esi,eax
c000472c:	83 c4 10             	add    esp,0x10
c000472f:	b8 11 00 00 00       	mov    eax,0x11
c0004734:	85 f6                	test   esi,esi
c0004736:	74 44                	je     c000477c <f_readdir+0x8b>
c0004738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004741:	89 d8                	mov    eax,ebx
c0004743:	e8 e3 ef ff ff       	call   c000372b <dir_read>
c0004748:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000474d:	75 19                	jne    c0004768 <f_readdir+0x77>
c000474f:	89 fa                	mov    edx,edi
c0004751:	89 d8                	mov    eax,ebx
c0004753:	e8 8a e8 ff ff       	call   c0002fe2 <get_fileinfo>
c0004758:	31 d2                	xor    edx,edx
c000475a:	89 d8                	mov    eax,ebx
c000475c:	e8 60 ee ff ff       	call   c00035c1 <dir_next>
c0004761:	83 f8 04             	cmp    eax,0x4
c0004764:	75 02                	jne    c0004768 <f_readdir+0x77>
c0004766:	31 c0                	xor    eax,eax
c0004768:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000476c:	83 ec 0c             	sub    esp,0xc
c000476f:	56                   	push   esi
c0004770:	e8 cb 14 00 00       	call   c0005c40 <ff_memfree>
c0004775:	83 c4 10             	add    esp,0x10
c0004778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000477c:	83 c4 20             	add    esp,0x20
c000477f:	5b                   	pop    ebx
c0004780:	5e                   	pop    esi
c0004781:	5f                   	pop    edi
c0004782:	c3                   	ret    

c0004783 <f_stat>:
c0004783:	57                   	push   edi
c0004784:	31 c9                	xor    ecx,ecx
c0004786:	56                   	push   esi
c0004787:	53                   	push   ebx
c0004788:	83 ec 30             	sub    esp,0x30
c000478b:	89 e2                	mov    edx,esp
c000478d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004791:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004795:	e8 17 dd ff ff       	call   c00024b1 <mount_volume>
c000479a:	89 c3                	mov    ebx,eax
c000479c:	85 c0                	test   eax,eax
c000479e:	75 59                	jne    c00047f9 <f_stat+0x76>
c00047a0:	83 ec 0c             	sub    esp,0xc
c00047a3:	bb 11 00 00 00       	mov    ebx,0x11
c00047a8:	68 00 02 00 00       	push   0x200
c00047ad:	e8 76 14 00 00       	call   c0005c28 <ff_memalloc>
c00047b2:	83 c4 10             	add    esp,0x10
c00047b5:	89 c6                	mov    esi,eax
c00047b7:	85 c0                	test   eax,eax
c00047b9:	74 3e                	je     c00047f9 <f_stat+0x76>
c00047bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047be:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047c5:	89 e0                	mov    eax,esp
c00047c7:	e8 23 f2 ff ff       	call   c00039ef <follow_path>
c00047cc:	89 c3                	mov    ebx,eax
c00047ce:	85 c0                	test   eax,eax
c00047d0:	75 1b                	jne    c00047ed <f_stat+0x6a>
c00047d2:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047d7:	75 0f                	jne    c00047e8 <f_stat+0x65>
c00047d9:	85 ff                	test   edi,edi
c00047db:	74 10                	je     c00047ed <f_stat+0x6a>
c00047dd:	89 fa                	mov    edx,edi
c00047df:	89 e0                	mov    eax,esp
c00047e1:	e8 fc e7 ff ff       	call   c0002fe2 <get_fileinfo>
c00047e6:	eb 05                	jmp    c00047ed <f_stat+0x6a>
c00047e8:	bb 06 00 00 00       	mov    ebx,0x6
c00047ed:	83 ec 0c             	sub    esp,0xc
c00047f0:	56                   	push   esi
c00047f1:	e8 4a 14 00 00       	call   c0005c40 <ff_memfree>
c00047f6:	83 c4 10             	add    esp,0x10
c00047f9:	83 c4 30             	add    esp,0x30
c00047fc:	89 d8                	mov    eax,ebx
c00047fe:	5b                   	pop    ebx
c00047ff:	5e                   	pop    esi
c0004800:	5f                   	pop    edi
c0004801:	c3                   	ret    

c0004802 <f_getfree>:
c0004802:	55                   	push   ebp
c0004803:	31 c9                	xor    ecx,ecx
c0004805:	57                   	push   edi
c0004806:	56                   	push   esi
c0004807:	53                   	push   ebx
c0004808:	83 ec 2c             	sub    esp,0x2c
c000480b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004813:	e8 99 dc ff ff       	call   c00024b1 <mount_volume>
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 85 df 00 00 00    	jne    c0004901 <f_getfree+0xff>
c0004822:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004826:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482a:	89 30                	mov    DWORD PTR [eax],esi
c000482c:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c000482f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004832:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004835:	39 d0                	cmp    eax,edx
c0004837:	77 0b                	ja     c0004844 <f_getfree+0x42>
c0004839:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000483d:	89 01                	mov    DWORD PTR [ecx],eax
c000483f:	e9 bd 00 00 00       	jmp    c0004901 <f_getfree+0xff>
c0004844:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004847:	75 29                	jne    c0004872 <f_getfree+0x70>
c0004849:	bd 02 00 00 00       	mov    ebp,0x2
c000484e:	31 db                	xor    ebx,ebx
c0004850:	89 ea                	mov    edx,ebp
c0004852:	89 f0                	mov    eax,esi
c0004854:	e8 d4 e9 ff ff       	call   c000322d <get_fat.isra.2>
c0004859:	83 f8 ff             	cmp    eax,0xffffffff
c000485c:	74 7d                	je     c00048db <f_getfree+0xd9>
c000485e:	83 f8 01             	cmp    eax,0x1
c0004861:	74 7f                	je     c00048e2 <f_getfree+0xe0>
c0004863:	83 d3 00             	adc    ebx,0x0
c0004866:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486a:	45                   	inc    ebp
c000486b:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000486e:	77 e0                	ja     c0004850 <f_getfree+0x4e>
c0004870:	eb 79                	jmp    c00048eb <f_getfree+0xe9>
c0004872:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004875:	31 db                	xor    ebx,ebx
c0004877:	31 f6                	xor    esi,esi
c0004879:	85 f6                	test   esi,esi
c000487b:	75 18                	jne    c0004895 <f_getfree+0x93>
c000487d:	8d 42 01             	lea    eax,[edx+0x1]
c0004880:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004888:	e8 c9 da ff ff       	call   c0002356 <move_window>
c000488d:	85 c0                	test   eax,eax
c000488f:	75 58                	jne    c00048e9 <f_getfree+0xe7>
c0004891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004895:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000489d:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a1:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a4:	75 13                	jne    c00048b9 <f_getfree+0xb7>
c00048a6:	e8 44 d5 ff ff       	call   c0001def <ld_word>
c00048ab:	0f b7 c0             	movzx  eax,ax
c00048ae:	83 f8 01             	cmp    eax,0x1
c00048b1:	83 d3 00             	adc    ebx,0x0
c00048b4:	83 c6 02             	add    esi,0x2
c00048b7:	eb 13                	jmp    c00048cc <f_getfree+0xca>
c00048b9:	e8 3e d5 ff ff       	call   c0001dfc <ld_dword>
c00048be:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c3:	83 f8 01             	cmp    eax,0x1
c00048c6:	83 d3 00             	adc    ebx,0x0
c00048c9:	83 c6 04             	add    esi,0x4
c00048cc:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d2:	4d                   	dec    ebp
c00048d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048d7:	75 a0                	jne    c0004879 <f_getfree+0x77>
c00048d9:	eb 10                	jmp    c00048eb <f_getfree+0xe9>
c00048db:	bf 01 00 00 00       	mov    edi,0x1
c00048e0:	eb 09                	jmp    c00048eb <f_getfree+0xe9>
c00048e2:	bf 02 00 00 00       	mov    edi,0x2
c00048e7:	eb 02                	jmp    c00048eb <f_getfree+0xe9>
c00048e9:	89 c7                	mov    edi,eax
c00048eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048ef:	89 18                	mov    DWORD PTR [eax],ebx
c00048f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048f5:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048f8:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00048fb:	83 ca 01             	or     edx,0x1
c00048fe:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004901:	83 c4 2c             	add    esp,0x2c
c0004904:	89 f8                	mov    eax,edi
c0004906:	5b                   	pop    ebx
c0004907:	5e                   	pop    esi
c0004908:	5f                   	pop    edi
c0004909:	5d                   	pop    ebp
c000490a:	c3                   	ret    

c000490b <f_truncate>:
c000490b:	56                   	push   esi
c000490c:	53                   	push   ebx
c000490d:	83 ec 14             	sub    esp,0x14
c0004910:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004914:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004918:	89 d8                	mov    eax,ebx
c000491a:	e8 8e d9 ff ff       	call   c00022ad <validate>
c000491f:	89 c6                	mov    esi,eax
c0004921:	85 c0                	test   eax,eax
c0004923:	0f 85 c4 00 00 00    	jne    c00049ed <f_truncate+0xe2>
c0004929:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c000492d:	85 f6                	test   esi,esi
c000492f:	0f 85 b8 00 00 00    	jne    c00049ed <f_truncate+0xe2>
c0004935:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004939:	0f 84 a9 00 00 00    	je     c00049e8 <f_truncate+0xdd>
c000493f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004942:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004945:	0f 83 a2 00 00 00    	jae    c00049ed <f_truncate+0xe2>
c000494b:	85 c0                	test   eax,eax
c000494d:	75 15                	jne    c0004964 <f_truncate+0x59>
c000494f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004952:	31 c9                	xor    ecx,ecx
c0004954:	89 d8                	mov    eax,ebx
c0004956:	e8 d8 eb ff ff       	call   c0003533 <remove_chain>
c000495b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004962:	eb 35                	jmp    c0004999 <f_truncate+0x8e>
c0004964:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004967:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004969:	e8 bf e8 ff ff       	call   c000322d <get_fat.isra.2>
c000496e:	89 c2                	mov    edx,eax
c0004970:	b8 01 00 00 00       	mov    eax,0x1
c0004975:	83 fa ff             	cmp    edx,0xffffffff
c0004978:	74 1f                	je     c0004999 <f_truncate+0x8e>
c000497a:	b8 02 00 00 00       	mov    eax,0x2
c000497f:	83 fa 01             	cmp    edx,0x1
c0004982:	74 15                	je     c0004999 <f_truncate+0x8e>
c0004984:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004988:	31 c0                	xor    eax,eax
c000498a:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c000498d:	76 0a                	jbe    c0004999 <f_truncate+0x8e>
c000498f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004992:	89 d8                	mov    eax,ebx
c0004994:	e8 9a eb ff ff       	call   c0003533 <remove_chain>
c0004999:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000499c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000499f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a2:	83 ca 40             	or     edx,0x40
c00049a5:	85 c0                	test   eax,eax
c00049a7:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049aa:	75 35                	jne    c00049e1 <f_truncate+0xd6>
c00049ac:	80 e2 80             	and    dl,0x80
c00049af:	74 3c                	je     c00049ed <f_truncate+0xe2>
c00049b1:	6a 01                	push   0x1
c00049b3:	8d 43 28             	lea    eax,[ebx+0x28]
c00049b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049b9:	50                   	push   eax
c00049ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049be:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c2:	50                   	push   eax
c00049c3:	e8 f2 d3 ff ff       	call   c0001dba <disk_write>
c00049c8:	83 c4 10             	add    esp,0x10
c00049cb:	85 c0                	test   eax,eax
c00049cd:	75 0d                	jne    c00049dc <f_truncate+0xd1>
c00049cf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d2:	31 f6                	xor    esi,esi
c00049d4:	83 e0 7f             	and    eax,0x7f
c00049d7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049da:	eb 11                	jmp    c00049ed <f_truncate+0xe2>
c00049dc:	b8 01 00 00 00       	mov    eax,0x1
c00049e1:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e4:	89 c6                	mov    esi,eax
c00049e6:	eb 05                	jmp    c00049ed <f_truncate+0xe2>
c00049e8:	be 07 00 00 00       	mov    esi,0x7
c00049ed:	83 c4 14             	add    esp,0x14
c00049f0:	89 f0                	mov    eax,esi
c00049f2:	5b                   	pop    ebx
c00049f3:	5e                   	pop    esi
c00049f4:	c3                   	ret    

c00049f5 <f_unlink>:
c00049f5:	55                   	push   ebp
c00049f6:	b9 02 00 00 00       	mov    ecx,0x2
c00049fb:	57                   	push   edi
c00049fc:	56                   	push   esi
c00049fd:	53                   	push   ebx
c00049fe:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a04:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a08:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a0f:	e8 9d da ff ff       	call   c00024b1 <mount_volume>
c0004a14:	85 c0                	test   eax,eax
c0004a16:	0f 85 ee 00 00 00    	jne    c0004b0a <f_unlink+0x115>
c0004a1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a20:	83 ec 0c             	sub    esp,0xc
c0004a23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a27:	68 00 02 00 00       	push   0x200
c0004a2c:	e8 f7 11 00 00       	call   c0005c28 <ff_memalloc>
c0004a31:	89 c3                	mov    ebx,eax
c0004a33:	83 c4 10             	add    esp,0x10
c0004a36:	b8 11 00 00 00       	mov    eax,0x11
c0004a3b:	85 db                	test   ebx,ebx
c0004a3d:	0f 84 c7 00 00 00    	je     c0004b0a <f_unlink+0x115>
c0004a43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a47:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a4e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a51:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a55:	e8 95 ef ff ff       	call   c00039ef <follow_path>
c0004a5a:	85 c0                	test   eax,eax
c0004a5c:	0f 85 94 00 00 00    	jne    c0004af6 <f_unlink+0x101>
c0004a62:	b8 06 00 00 00       	mov    eax,0x6
c0004a67:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a6c:	0f 85 84 00 00 00    	jne    c0004af6 <f_unlink+0x101>
c0004a72:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a77:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a7d:	74 07                	je     c0004a86 <f_unlink+0x91>
c0004a7f:	b8 07 00 00 00       	mov    eax,0x7
c0004a84:	eb 70                	jmp    c0004af6 <f_unlink+0x101>
c0004a86:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a8e:	8a 07                	mov    al,BYTE PTR [edi]
c0004a90:	e8 47 e7 ff ff       	call   c00031dc <ld_clust.isra.0>
c0004a95:	83 e5 10             	and    ebp,0x10
c0004a98:	89 c6                	mov    esi,eax
c0004a9a:	75 20                	jne    c0004abc <f_unlink+0xc7>
c0004a9c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa0:	e8 ae ed ff ff       	call   c0003853 <dir_remove>
c0004aa5:	85 c0                	test   eax,eax
c0004aa7:	75 40                	jne    c0004ae9 <f_unlink+0xf4>
c0004aa9:	85 f6                	test   esi,esi
c0004aab:	74 3c                	je     c0004ae9 <f_unlink+0xf4>
c0004aad:	31 c9                	xor    ecx,ecx
c0004aaf:	89 f2                	mov    edx,esi
c0004ab1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab5:	e8 79 ea ff ff       	call   c0003533 <remove_chain>
c0004aba:	eb 2d                	jmp    c0004ae9 <f_unlink+0xf4>
c0004abc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ac0:	31 d2                	xor    edx,edx
c0004ac2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ac6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aca:	e8 62 e8 ff ff       	call   c0003331 <dir_sdi>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	75 23                	jne    c0004af6 <f_unlink+0x101>
c0004ad3:	31 d2                	xor    edx,edx
c0004ad5:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad9:	e8 4d ec ff ff       	call   c000372b <dir_read>
c0004ade:	85 c0                	test   eax,eax
c0004ae0:	74 9d                	je     c0004a7f <f_unlink+0x8a>
c0004ae2:	83 f8 04             	cmp    eax,0x4
c0004ae5:	75 0f                	jne    c0004af6 <f_unlink+0x101>
c0004ae7:	eb b3                	jmp    c0004a9c <f_unlink+0xa7>
c0004ae9:	85 c0                	test   eax,eax
c0004aeb:	75 09                	jne    c0004af6 <f_unlink+0x101>
c0004aed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af1:	e8 8b e2 ff ff       	call   c0002d81 <sync_fs>
c0004af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004afa:	83 ec 0c             	sub    esp,0xc
c0004afd:	53                   	push   ebx
c0004afe:	e8 3d 11 00 00       	call   c0005c40 <ff_memfree>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b0a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b10:	5b                   	pop    ebx
c0004b11:	5e                   	pop    esi
c0004b12:	5f                   	pop    edi
c0004b13:	5d                   	pop    ebp
c0004b14:	c3                   	ret    

c0004b15 <f_mkdir>:
c0004b15:	57                   	push   edi
c0004b16:	b9 02 00 00 00       	mov    ecx,0x2
c0004b1b:	56                   	push   esi
c0004b1c:	53                   	push   ebx
c0004b1d:	83 ec 50             	sub    esp,0x50
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b28:	e8 84 d9 ff ff       	call   c00024b1 <mount_volume>
c0004b2d:	89 c3                	mov    ebx,eax
c0004b2f:	85 c0                	test   eax,eax
c0004b31:	0f 85 70 01 00 00    	jne    c0004ca7 <f_mkdir+0x192>
c0004b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3b:	83 ec 0c             	sub    esp,0xc
c0004b3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	68 00 02 00 00       	push   0x200
c0004b4c:	e8 d7 10 00 00       	call   c0005c28 <ff_memalloc>
c0004b51:	83 c4 10             	add    esp,0x10
c0004b54:	89 c7                	mov    edi,eax
c0004b56:	85 c0                	test   eax,eax
c0004b58:	0f 84 49 01 00 00    	je     c0004ca7 <f_mkdir+0x192>
c0004b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b62:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b66:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b6d:	e8 7d ee ff ff       	call   c00039ef <follow_path>
c0004b72:	89 c3                	mov    ebx,eax
c0004b74:	85 c0                	test   eax,eax
c0004b76:	74 3e                	je     c0004bb6 <f_mkdir+0xa1>
c0004b78:	83 f8 04             	cmp    eax,0x4
c0004b7b:	75 3e                	jne    c0004bbb <f_mkdir+0xa6>
c0004b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b81:	31 d2                	xor    edx,edx
c0004b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b8b:	e8 69 e8 ff ff       	call   c00033f9 <create_chain>
c0004b90:	89 c6                	mov    esi,eax
c0004b92:	85 c0                	test   eax,eax
c0004b94:	74 0c                	je     c0004ba2 <f_mkdir+0x8d>
c0004b96:	bb 02 00 00 00       	mov    ebx,0x2
c0004b9b:	83 f8 01             	cmp    eax,0x1
c0004b9e:	74 07                	je     c0004ba7 <f_mkdir+0x92>
c0004ba0:	eb 2a                	jmp    c0004bcc <f_mkdir+0xb7>
c0004ba2:	bb 07 00 00 00       	mov    ebx,0x7
c0004ba7:	31 c9                	xor    ecx,ecx
c0004ba9:	89 f2                	mov    edx,esi
c0004bab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004baf:	e8 7f e9 ff ff       	call   c0003533 <remove_chain>
c0004bb4:	eb 05                	jmp    c0004bbb <f_mkdir+0xa6>
c0004bb6:	bb 08 00 00 00       	mov    ebx,0x8
c0004bbb:	83 ec 0c             	sub    esp,0xc
c0004bbe:	57                   	push   edi
c0004bbf:	e8 7c 10 00 00       	call   c0005c40 <ff_memfree>
c0004bc4:	83 c4 10             	add    esp,0x10
c0004bc7:	e9 db 00 00 00       	jmp    c0004ca7 <f_mkdir+0x192>
c0004bcc:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd1:	83 f8 ff             	cmp    eax,0xffffffff
c0004bd4:	74 d1                	je     c0004ba7 <f_mkdir+0x92>
c0004bd6:	89 f2                	mov    edx,esi
c0004bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bdc:	e8 19 dd ff ff       	call   c00028fa <dir_clear>
c0004be1:	89 c3                	mov    ebx,eax
c0004be3:	85 c0                	test   eax,eax
c0004be5:	75 c0                	jne    c0004ba7 <f_mkdir+0x92>
c0004be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004beb:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf0:	83 c0 34             	add    eax,0x34
c0004bf3:	ba 20 00 00 00       	mov    edx,0x20
c0004bf8:	e8 33 d2 ff ff       	call   c0001e30 <mem_set>
c0004bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c01:	83 c0 4a             	add    eax,0x4a
c0004c04:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0004c08:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c0c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c11:	e8 02 d2 ff ff       	call   c0001e18 <st_dword>
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	89 f1                	mov    ecx,esi
c0004c1c:	8d 50 34             	lea    edx,[eax+0x34]
c0004c1f:	e8 e1 e5 ff ff       	call   c0003205 <st_clust.isra.1>
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	b9 20 00 00 00       	mov    ecx,0x20
c0004c2d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c30:	83 c0 54             	add    eax,0x54
c0004c33:	e8 e3 d1 ff ff       	call   c0001e1b <mem_cpy>
c0004c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c40:	8d 50 54             	lea    edx,[eax+0x54]
c0004c43:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c47:	e8 b9 e5 ff ff       	call   c0003205 <st_clust.isra.1>
c0004c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c50:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c58:	e8 2f ee ff ff       	call   c0003a8c <dir_register>
c0004c5d:	89 c3                	mov    ebx,eax
c0004c5f:	85 c0                	test   eax,eax
c0004c61:	0f 85 40 ff ff ff    	jne    c0004ba7 <f_mkdir+0x92>
c0004c67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c6b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c70:	83 c0 16             	add    eax,0x16
c0004c73:	e8 a0 d1 ff ff       	call   c0001e18 <st_dword>
c0004c78:	89 f1                	mov    ecx,esi
c0004c7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c82:	e8 7e e5 ff ff       	call   c0003205 <st_clust.isra.1>
c0004c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c8b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9b:	e8 e1 e0 ff ff       	call   c0002d81 <sync_fs>
c0004ca0:	89 c3                	mov    ebx,eax
c0004ca2:	e9 14 ff ff ff       	jmp    c0004bbb <f_mkdir+0xa6>
c0004ca7:	83 c4 50             	add    esp,0x50
c0004caa:	89 d8                	mov    eax,ebx
c0004cac:	5b                   	pop    ebx
c0004cad:	5e                   	pop    esi
c0004cae:	5f                   	pop    edi
c0004caf:	c3                   	ret    

c0004cb0 <f_rename>:
c0004cb0:	57                   	push   edi
c0004cb1:	56                   	push   esi
c0004cb2:	53                   	push   ebx
c0004cb3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cb9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc0:	e8 9b d5 ff ff       	call   c0002260 <get_ldnumber>
c0004cc5:	b9 02 00 00 00       	mov    ecx,0x2
c0004cca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cce:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cd5:	e8 d7 d7 ff ff       	call   c00024b1 <mount_volume>
c0004cda:	85 c0                	test   eax,eax
c0004cdc:	0f 85 7c 01 00 00    	jne    c0004e5e <f_rename+0x1ae>
c0004ce2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce6:	83 ec 0c             	sub    esp,0xc
c0004ce9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ced:	68 00 02 00 00       	push   0x200
c0004cf2:	e8 31 0f 00 00       	call   c0005c28 <ff_memalloc>
c0004cf7:	89 c6                	mov    esi,eax
c0004cf9:	83 c4 10             	add    esp,0x10
c0004cfc:	b8 11 00 00 00       	mov    eax,0x11
c0004d01:	85 f6                	test   esi,esi
c0004d03:	0f 84 55 01 00 00    	je     c0004e5e <f_rename+0x1ae>
c0004d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0d:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d14:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d17:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d1b:	e8 cf ec ff ff       	call   c00039ef <follow_path>
c0004d20:	85 c0                	test   eax,eax
c0004d22:	0f 85 22 01 00 00    	jne    c0004e4a <f_rename+0x19a>
c0004d28:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d2c:	b8 06 00 00 00       	mov    eax,0x6
c0004d31:	80 e2 a0             	and    dl,0xa0
c0004d34:	0f 85 10 01 00 00    	jne    c0004e4a <f_rename+0x19a>
c0004d3a:	b9 20 00 00 00       	mov    ecx,0x20
c0004d3f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d43:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d47:	e8 cf d0 ff ff       	call   c0001e1b <mem_cpy>
c0004d4c:	b9 30 00 00 00       	mov    ecx,0x30
c0004d51:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d59:	e8 bd d0 ff ff       	call   c0001e1b <mem_cpy>
c0004d5e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d65:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d69:	e8 81 ec ff ff       	call   c00039ef <follow_path>
c0004d6e:	85 c0                	test   eax,eax
c0004d70:	75 20                	jne    c0004d92 <f_rename+0xe2>
c0004d72:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d76:	b8 08 00 00 00       	mov    eax,0x8
c0004d7b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d7f:	0f 85 c5 00 00 00    	jne    c0004e4a <f_rename+0x19a>
c0004d85:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d89:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d90:	eb 03                	jmp    c0004d95 <f_rename+0xe5>
c0004d92:	83 f8 04             	cmp    eax,0x4
c0004d95:	0f 85 af 00 00 00    	jne    c0004e4a <f_rename+0x19a>
c0004d9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d9f:	e8 e8 ec ff ff       	call   c0003a8c <dir_register>
c0004da4:	85 c0                	test   eax,eax
c0004da6:	0f 85 9e 00 00 00    	jne    c0004e4a <f_rename+0x19a>
c0004dac:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004db3:	b9 13 00 00 00       	mov    ecx,0x13
c0004db8:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dbc:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dbf:	e8 57 d0 ff ff       	call   c0001e1b <mem_cpy>
c0004dc4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dc8:	a8 10                	test   al,0x10
c0004dca:	75 03                	jne    c0004dcf <f_rename+0x11f>
c0004dcc:	83 c8 20             	or     eax,0x20
c0004dcf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004dda:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004dde:	74 54                	je     c0004e34 <f_rename+0x184>
c0004de0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004de4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004de8:	74 4a                	je     c0004e34 <f_rename+0x184>
c0004dea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004dee:	89 da                	mov    edx,ebx
c0004df0:	8a 07                	mov    al,BYTE PTR [edi]
c0004df2:	e8 e5 e3 ff ff       	call   c00031dc <ld_clust.isra.0>
c0004df7:	89 c2                	mov    edx,eax
c0004df9:	89 f8                	mov    eax,edi
c0004dfb:	e8 46 d2 ff ff       	call   c0002046 <clst2sect>
c0004e00:	89 c2                	mov    edx,eax
c0004e02:	b8 02 00 00 00       	mov    eax,0x2
c0004e07:	85 d2                	test   edx,edx
c0004e09:	74 3f                	je     c0004e4a <f_rename+0x19a>
c0004e0b:	89 f8                	mov    eax,edi
c0004e0d:	e8 44 d5 ff ff       	call   c0002356 <move_window>
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 34                	jne    c0004e4a <f_rename+0x19a>
c0004e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e1e:	75 14                	jne    c0004e34 <f_rename+0x184>
c0004e20:	8d 50 54             	lea    edx,[eax+0x54]
c0004e23:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e27:	e8 d9 e3 ff ff       	call   c0003205 <st_clust.isra.1>
c0004e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e30:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e34:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e38:	e8 16 ea ff ff       	call   c0003853 <dir_remove>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 09                	jne    c0004e4a <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	e8 37 df ff ff       	call   c0002d81 <sync_fs>
c0004e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4e:	83 ec 0c             	sub    esp,0xc
c0004e51:	56                   	push   esi
c0004e52:	e8 e9 0d 00 00       	call   c0005c40 <ff_memfree>
c0004e57:	83 c4 10             	add    esp,0x10
c0004e5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	5f                   	pop    edi
c0004e67:	c3                   	ret    

c0004e68 <f_chmod>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7f:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e83:	e8 29 d6 ff ff       	call   c00024b1 <mount_volume>
c0004e88:	85 c0                	test   eax,eax
c0004e8a:	0f 85 81 00 00 00    	jne    c0004f11 <f_chmod+0xa9>
c0004e90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e94:	83 ec 0c             	sub    esp,0xc
c0004e97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e9b:	68 00 02 00 00       	push   0x200
c0004ea0:	e8 83 0d 00 00       	call   c0005c28 <ff_memalloc>
c0004ea5:	89 c6                	mov    esi,eax
c0004ea7:	83 c4 10             	add    esp,0x10
c0004eaa:	b8 11 00 00 00       	mov    eax,0x11
c0004eaf:	85 f6                	test   esi,esi
c0004eb1:	74 5e                	je     c0004f11 <f_chmod+0xa9>
c0004eb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eb7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ebe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec2:	e8 28 eb ff ff       	call   c00039ef <follow_path>
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	75 32                	jne    c0004efd <f_chmod+0x95>
c0004ecb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ecf:	b8 06 00 00 00       	mov    eax,0x6
c0004ed4:	80 e2 a0             	and    dl,0xa0
c0004ed7:	75 24                	jne    c0004efd <f_chmod+0x95>
c0004ed9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004edd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee0:	31 d7                	xor    edi,edx
c0004ee2:	21 fb                	and    ebx,edi
c0004ee4:	83 e3 27             	and    ebx,0x27
c0004ee7:	31 d3                	xor    ebx,edx
c0004ee9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef8:	e8 84 de ff ff       	call   c0002d81 <sync_fs>
c0004efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f01:	83 ec 0c             	sub    esp,0xc
c0004f04:	56                   	push   esi
c0004f05:	e8 36 0d 00 00       	call   c0005c40 <ff_memfree>
c0004f0a:	83 c4 10             	add    esp,0x10
c0004f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f11:	83 c4 50             	add    esp,0x50
c0004f14:	5b                   	pop    ebx
c0004f15:	5e                   	pop    esi
c0004f16:	5f                   	pop    edi
c0004f17:	c3                   	ret    

c0004f18 <f_utime>:
c0004f18:	56                   	push   esi
c0004f19:	b9 02 00 00 00       	mov    ecx,0x2
c0004f1e:	53                   	push   ebx
c0004f1f:	83 ec 54             	sub    esp,0x54
c0004f22:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f26:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f2a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2e:	e8 7e d5 ff ff       	call   c00024b1 <mount_volume>
c0004f33:	85 c0                	test   eax,eax
c0004f35:	0f 85 87 00 00 00    	jne    c0004fc2 <f_utime+0xaa>
c0004f3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f3f:	83 ec 0c             	sub    esp,0xc
c0004f42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f46:	68 00 02 00 00       	push   0x200
c0004f4b:	e8 d8 0c 00 00       	call   c0005c28 <ff_memalloc>
c0004f50:	89 c3                	mov    ebx,eax
c0004f52:	83 c4 10             	add    esp,0x10
c0004f55:	b8 11 00 00 00       	mov    eax,0x11
c0004f5a:	85 db                	test   ebx,ebx
c0004f5c:	74 64                	je     c0004fc2 <f_utime+0xaa>
c0004f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f62:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f66:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f6d:	e8 7d ea ff ff       	call   c00039ef <follow_path>
c0004f72:	85 c0                	test   eax,eax
c0004f74:	75 38                	jne    c0004fae <f_utime+0x96>
c0004f76:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f7a:	b8 06 00 00 00       	mov    eax,0x6
c0004f7f:	80 e2 a0             	and    dl,0xa0
c0004f82:	75 2a                	jne    c0004fae <f_utime+0x96>
c0004f84:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f88:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8c:	c1 e2 10             	shl    edx,0x10
c0004f8f:	09 c2                	or     edx,eax
c0004f91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f95:	83 c0 16             	add    eax,0x16
c0004f98:	e8 7b ce ff ff       	call   c0001e18 <st_dword>
c0004f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa9:	e8 d3 dd ff ff       	call   c0002d81 <sync_fs>
c0004fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb2:	83 ec 0c             	sub    esp,0xc
c0004fb5:	53                   	push   ebx
c0004fb6:	e8 85 0c 00 00       	call   c0005c40 <ff_memfree>
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc2:	83 c4 54             	add    esp,0x54
c0004fc5:	5b                   	pop    ebx
c0004fc6:	5e                   	pop    esi
c0004fc7:	c3                   	ret    

c0004fc8 <f_getlabel>:
c0004fc8:	55                   	push   ebp
c0004fc9:	31 c9                	xor    ecx,ecx
c0004fcb:	57                   	push   edi
c0004fcc:	56                   	push   esi
c0004fcd:	53                   	push   ebx
c0004fce:	83 ec 5c             	sub    esp,0x5c
c0004fd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fd5:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fd9:	e8 d3 d4 ff ff       	call   c00024b1 <mount_volume>
c0004fde:	89 c3                	mov    ebx,eax
c0004fe0:	85 c0                	test   eax,eax
c0004fe2:	0f 85 e1 00 00 00    	jne    c00050c9 <f_getlabel+0x101>
c0004fe8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004fed:	0f 84 d6 00 00 00    	je     c00050c9 <f_getlabel+0x101>
c0004ff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ff7:	31 d2                	xor    edx,edx
c0004ff9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ffd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005001:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005009:	e8 23 e3 ff ff       	call   c0003331 <dir_sdi>
c000500e:	89 c3                	mov    ebx,eax
c0005010:	85 c0                	test   eax,eax
c0005012:	0f 85 a3 00 00 00    	jne    c00050bb <f_getlabel+0xf3>
c0005018:	ba 01 00 00 00       	mov    edx,0x1
c000501d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005021:	e8 05 e7 ff ff       	call   c000372b <dir_read>
c0005026:	89 c3                	mov    ebx,eax
c0005028:	85 c0                	test   eax,eax
c000502a:	0f 85 8b 00 00 00    	jne    c00050bb <f_getlabel+0xf3>
c0005030:	31 f6                	xor    esi,esi
c0005032:	31 c9                	xor    ecx,ecx
c0005034:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005038:	8d 79 01             	lea    edi,[ecx+0x1]
c000503b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005040:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005049:	e8 21 ce ff ff       	call   c0001e6f <dbc_1st>
c000504e:	85 c0                	test   eax,eax
c0005050:	74 16                	je     c0005068 <f_getlabel+0xa0>
c0005052:	83 ff 0b             	cmp    edi,0xb
c0005055:	74 11                	je     c0005068 <f_getlabel+0xa0>
c0005057:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005060:	8d 79 02             	lea    edi,[ecx+0x2]
c0005063:	c1 e0 08             	shl    eax,0x8
c0005066:	09 c2                	or     edx,eax
c0005068:	50                   	push   eax
c0005069:	50                   	push   eax
c000506a:	68 b5 01 00 00       	push   0x1b5
c000506f:	0f b7 d2             	movzx  edx,dx
c0005072:	52                   	push   edx
c0005073:	e8 7c 0c 00 00       	call   c0005cf4 <ff_oem2uni>
c0005078:	0f b7 c0             	movzx  eax,ax
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	85 c0                	test   eax,eax
c0005080:	74 22                	je     c00050a4 <f_getlabel+0xdc>
c0005082:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005086:	b9 04 00 00 00       	mov    ecx,0x4
c000508b:	01 f2                	add    edx,esi
c000508d:	e8 bb ce ff ff       	call   c0001f4d <put_utf>
c0005092:	0f b6 c0             	movzx  eax,al
c0005095:	85 c0                	test   eax,eax
c0005097:	74 0b                	je     c00050a4 <f_getlabel+0xdc>
c0005099:	01 c6                	add    esi,eax
c000509b:	83 ff 0b             	cmp    edi,0xb
c000509e:	74 06                	je     c00050a6 <f_getlabel+0xde>
c00050a0:	89 f9                	mov    ecx,edi
c00050a2:	eb 90                	jmp    c0005034 <f_getlabel+0x6c>
c00050a4:	31 f6                	xor    esi,esi
c00050a6:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050ad:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050b1:	74 16                	je     c00050c9 <f_getlabel+0x101>
c00050b3:	4e                   	dec    esi
c00050b4:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050b7:	74 f1                	je     c00050aa <f_getlabel+0xe2>
c00050b9:	eb 0e                	jmp    c00050c9 <f_getlabel+0x101>
c00050bb:	83 fb 04             	cmp    ebx,0x4
c00050be:	75 09                	jne    c00050c9 <f_getlabel+0x101>
c00050c0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c4:	31 db                	xor    ebx,ebx
c00050c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050c9:	85 db                	test   ebx,ebx
c00050cb:	75 49                	jne    c0005116 <f_getlabel+0x14e>
c00050cd:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050d2:	74 42                	je     c0005116 <f_getlabel+0x14e>
c00050d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050db:	e8 76 d2 ff ff       	call   c0002356 <move_window>
c00050e0:	89 c3                	mov    ebx,eax
c00050e2:	85 c0                	test   eax,eax
c00050e4:	75 30                	jne    c0005116 <f_getlabel+0x14e>
c00050e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050ea:	b8 43 00 00 00       	mov    eax,0x43
c00050ef:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050f2:	83 f9 03             	cmp    ecx,0x3
c00050f5:	74 10                	je     c0005107 <f_getlabel+0x13f>
c00050f7:	83 f9 04             	cmp    ecx,0x4
c00050fa:	b8 64 00 00 00       	mov    eax,0x64
c00050ff:	b9 27 00 00 00       	mov    ecx,0x27
c0005104:	0f 45 c1             	cmovne eax,ecx
c0005107:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c000510b:	e8 ec cc ff ff       	call   c0001dfc <ld_dword>
c0005110:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005114:	89 07                	mov    DWORD PTR [edi],eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 d8                	mov    eax,ebx
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 79 d3 ff ff       	call   c00024b1 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 d9 cc ff ff       	call   c0001e30 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 0c cd ff ff       	call   c0001e75 <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e9 0b 00 00       	call   c0005d6c <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c8 0a 00 00       	call   c0005c58 <ff_uni2oem>
c0005190:	0f b7 f0             	movzx  esi,ax
c0005193:	83 c4 10             	add    esp,0x10
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 f4 01 c0       	mov    eax,0xc001f450
c00051a3:	e8 b6 cc ff ff       	call   c0001e5e <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051e4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051ec:	e8 40 e1 ff ff       	call   c0003331 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 22 e5 ff ff       	call   c000372b <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 8a e4 ff ff       	call   c00036c6 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 de cb ff ff       	call   c0001e30 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525a:	b9 0b 00 00 00       	mov    ecx,0xb
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 af cb ff ff       	call   c0001e1b <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 04 db ff ff       	call   c0002d81 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 df cf ff ff       	call   c00022ad <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	0f b6 c0             	movzx  eax,al
c0005319:	89 c7                	mov    edi,eax
c000531b:	31 d2                	xor    edx,edx
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005346:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000534a:	e8 de de ff ff       	call   c000322d <get_fat.isra.2>
c000534f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005353:	45                   	inc    ebp
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 e3 d3 ff ff       	call   c00027a3 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8d 44 24 70          	lea    eax,[esp+0x70]
c000542d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005431:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005435:	e8 26 ce ff ff       	call   c0002260 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 dc 07 00 00    	js     c0005c1e <f_mkfs+0x801>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 f4 01 c0       	mov    ebx,0xc001f440
c0005459:	0f b6 c0             	movzx  eax,al
c000545c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005460:	83 ec 0c             	sub    esp,0xc
c0005463:	be 03 00 00 00       	mov    esi,0x3
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 30 c9 ff ff       	call   c0001da1 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 a2 07 00 00    	jne    c0005c1e <f_mkfs+0x801>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 95 07 00 00    	jne    c0005c1e <f_mkfs+0x801>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 2b c9 ff ff       	call   c0001dd0 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 15                	ja     c0005507 <f_mkfs+0xea>
c00054f2:	b8 00 02 00 00       	mov    eax,0x200
c00054f7:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00054fc:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005501:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005505:	eb 08                	jmp    c000550f <f_mkfs+0xf2>
c0005507:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c000550f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005512:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005518:	77 0f                	ja     c0005529 <f_mkfs+0x10c>
c000551a:	8d 47 ff             	lea    eax,[edi-0x1]
c000551d:	85 f8                	test   eax,edi
c000551f:	b8 00 00 00 00       	mov    eax,0x0
c0005524:	0f 45 f8             	cmovne edi,eax
c0005527:	eb 02                	jmp    c000552b <f_mkfs+0x10e>
c0005529:	31 ff                	xor    edi,edi
c000552b:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005533:	77 0a                	ja     c000553f <f_mkfs+0x122>
c0005535:	be 11 00 00 00       	mov    esi,0x11
c000553a:	e9 df 06 00 00       	jmp    c0005c1e <f_mkfs+0x801>
c000553f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005541:	85 ed                	test   ebp,ebp
c0005543:	89 eb                	mov    ebx,ebp
c0005545:	75 1e                	jne    c0005565 <f_mkfs+0x148>
c0005547:	83 ec 0c             	sub    esp,0xc
c000554a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005551:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005556:	50                   	push   eax
c0005557:	e8 cc 06 00 00       	call   c0005c28 <ff_memalloc>
c000555c:	83 c4 10             	add    esp,0x10
c000555f:	89 c3                	mov    ebx,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	74 d0                	je     c0005535 <f_mkfs+0x118>
c0005565:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000556d:	52                   	push   edx
c000556e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005572:	50                   	push   eax
c0005573:	6a 01                	push   0x1
c0005575:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005579:	e8 52 c8 ff ff       	call   c0001dd0 <disk_ioctl>
c000557e:	83 c4 10             	add    esp,0x10
c0005581:	85 c0                	test   eax,eax
c0005583:	0f 85 3e 06 00 00    	jne    c0005bc7 <f_mkfs+0x7aa>
c0005589:	89 f0                	mov    eax,esi
c000558b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005593:	83 e0 08             	and    eax,0x8
c0005596:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000559a:	75 18                	jne    c00055b4 <f_mkfs+0x197>
c000559c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a0:	83 f8 3f             	cmp    eax,0x3f
c00055a3:	76 0f                	jbe    c00055b4 <f_mkfs+0x197>
c00055a5:	83 e8 3f             	sub    eax,0x3f
c00055a8:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055b0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055bc:	83 f8 7f             	cmp    eax,0x7f
c00055bf:	0f 86 5b 02 00 00    	jbe    c0005820 <f_mkfs+0x403>
c00055c5:	b9 80 00 00 00       	mov    ecx,0x80
c00055ca:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055d0:	77 05                	ja     c00055d7 <f_mkfs+0x1ba>
c00055d2:	c1 ef 09             	shr    edi,0x9
c00055d5:	89 f9                	mov    ecx,edi
c00055d7:	89 f0                	mov    eax,esi
c00055d9:	89 f7                	mov    edi,esi
c00055db:	83 e0 01             	and    eax,0x1
c00055de:	83 e7 02             	and    edi,0x2
c00055e1:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055e5:	0f b6 c0             	movzx  eax,al
c00055e8:	74 0a                	je     c00055f4 <f_mkfs+0x1d7>
c00055ea:	85 c0                	test   eax,eax
c00055ec:	0f 84 4f 01 00 00    	je     c0005741 <f_mkfs+0x324>
c00055f2:	eb 37                	jmp    c000562b <f_mkfs+0x20e>
c00055f4:	be 13 00 00 00       	mov    esi,0x13
c00055f9:	85 c0                	test   eax,eax
c00055fb:	75 2e                	jne    c000562b <f_mkfs+0x20e>
c00055fd:	e9 dc 05 00 00       	jmp    c0005bde <f_mkfs+0x7c1>
c0005602:	83 f8 02             	cmp    eax,0x2
c0005605:	0f 85 0d 02 00 00    	jne    c0005818 <f_mkfs+0x3fb>
c000560b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005611:	0f 86 e4 01 00 00    	jbe    c00057fb <f_mkfs+0x3de>
c0005617:	85 c9                	test   ecx,ecx
c0005619:	0f 85 d1 05 00 00    	jne    c0005bf0 <f_mkfs+0x7d3>
c000561f:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005622:	83 f9 40             	cmp    ecx,0x40
c0005625:	0f 87 d5 05 00 00    	ja     c0005c00 <f_mkfs+0x7e3>
c000562b:	89 cf                	mov    edi,ecx
c000562d:	85 c9                	test   ecx,ecx
c000562f:	75 1c                	jne    c000564d <f_mkfs+0x230>
c0005631:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005635:	b8 20 f4 01 c0       	mov    eax,0xc001f420
c000563a:	c1 ee 0c             	shr    esi,0xc
c000563d:	bf 01 00 00 00       	mov    edi,0x1
c0005642:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005645:	85 d2                	test   edx,edx
c0005647:	0f 85 63 01 00 00    	jne    c00057b0 <f_mkfs+0x393>
c000564d:	31 d2                	xor    edx,edx
c000564f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005653:	f7 f7                	div    edi
c0005655:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565a:	0f 86 62 01 00 00    	jbe    c00057c2 <f_mkfs+0x3a5>
c0005660:	83 c0 02             	add    eax,0x2
c0005663:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005668:	01 c0                	add    eax,eax
c000566a:	05 ff 01 00 00       	add    eax,0x1ff
c000566f:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005677:	c1 e8 09             	shr    eax,0x9
c000567a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000567e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005682:	c1 e0 05             	shl    eax,0x5
c0005685:	c1 e8 09             	shr    eax,0x9
c0005688:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000568c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005691:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005695:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005699:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000569d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056a5:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056aa:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056ae:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056be:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056c2:	f7 d8                	neg    eax
c00056c4:	21 c6                	and    esi,eax
c00056c6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056cb:	29 d6                	sub    esi,edx
c00056cd:	83 f8 03             	cmp    eax,0x3
c00056d0:	0f 85 ff 00 00 00    	jne    c00057d5 <f_mkfs+0x3b8>
c00056d6:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056da:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056de:	89 f8                	mov    eax,edi
c00056e0:	c1 e0 04             	shl    eax,0x4
c00056e3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00056e7:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056eb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056ef:	0f 82 2b 01 00 00    	jb     c0005820 <f_mkfs+0x403>
c00056f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056fd:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005702:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005706:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c000570a:	29 d0                	sub    eax,edx
c000570c:	31 d2                	xor    edx,edx
c000570e:	f7 f7                	div    edi
c0005710:	89 c6                	mov    esi,eax
c0005712:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005717:	83 f8 03             	cmp    eax,0x3
c000571a:	0f 85 e2 fe ff ff    	jne    c0005602 <f_mkfs+0x1e5>
c0005720:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005726:	0f 87 03 01 00 00    	ja     c000582f <f_mkfs+0x412>
c000572c:	85 c9                	test   ecx,ecx
c000572e:	0f 85 ec 00 00 00    	jne    c0005820 <f_mkfs+0x403>
c0005734:	83 ff 01             	cmp    edi,0x1
c0005737:	0f 86 e3 00 00 00    	jbe    c0005820 <f_mkfs+0x403>
c000573d:	d1 ef                	shr    edi,1
c000573f:	89 f9                	mov    ecx,edi
c0005741:	89 ce                	mov    esi,ecx
c0005743:	85 c9                	test   ecx,ecx
c0005745:	75 25                	jne    c000576c <f_mkfs+0x34f>
c0005747:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000574b:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c0005750:	c1 ee 11             	shr    esi,0x11
c0005753:	b9 01 00 00 00       	mov    ecx,0x1
c0005758:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000575b:	85 d2                	test   edx,edx
c000575d:	74 0b                	je     c000576a <f_mkfs+0x34d>
c000575f:	83 c0 02             	add    eax,0x2
c0005762:	39 f2                	cmp    edx,esi
c0005764:	77 04                	ja     c000576a <f_mkfs+0x34d>
c0005766:	01 c9                	add    ecx,ecx
c0005768:	eb ee                	jmp    c0005758 <f_mkfs+0x33b>
c000576a:	31 f6                	xor    esi,esi
c000576c:	31 d2                	xor    edx,edx
c000576e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005772:	f7 f1                	div    ecx
c0005774:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000577b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005780:	c1 ea 09             	shr    edx,0x9
c0005783:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005788:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000578c:	0f 87 8e 00 00 00    	ja     c0005820 <f_mkfs+0x403>
c0005792:	89 cf                	mov    edi,ecx
c0005794:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000579c:	89 f1                	mov    ecx,esi
c000579e:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057a6:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057ab:	e9 dc fe ff ff       	jmp    c000568c <f_mkfs+0x26f>
c00057b0:	83 c0 02             	add    eax,0x2
c00057b3:	39 f2                	cmp    edx,esi
c00057b5:	0f 87 92 fe ff ff    	ja     c000564d <f_mkfs+0x230>
c00057bb:	01 ff                	add    edi,edi
c00057bd:	e9 80 fe ff ff       	jmp    c0005642 <f_mkfs+0x225>
c00057c2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057c5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057ca:	40                   	inc    eax
c00057cb:	d1 e8                	shr    eax,1
c00057cd:	83 c0 03             	add    eax,0x3
c00057d0:	e9 95 fe ff ff       	jmp    c000566a <f_mkfs+0x24d>
c00057d5:	31 d2                	xor    edx,edx
c00057d7:	89 f0                	mov    eax,esi
c00057d9:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dd:	85 d2                	test   edx,edx
c00057df:	74 09                	je     c00057ea <f_mkfs+0x3cd>
c00057e1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057e5:	4e                   	dec    esi
c00057e6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057ea:	89 f0                	mov    eax,esi
c00057ec:	31 d2                	xor    edx,edx
c00057ee:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057f2:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057f6:	e9 e3 fe ff ff       	jmp    c00056de <f_mkfs+0x2c1>
c00057fb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005801:	77 2c                	ja     c000582f <f_mkfs+0x412>
c0005803:	85 c9                	test   ecx,ecx
c0005805:	75 19                	jne    c0005820 <f_mkfs+0x403>
c0005807:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000580a:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005810:	0f 86 15 fe ff ff    	jbe    c000562b <f_mkfs+0x20e>
c0005816:	eb 08                	jmp    c0005820 <f_mkfs+0x403>
c0005818:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000581e:	76 0a                	jbe    c000582a <f_mkfs+0x40d>
c0005820:	be 0e 00 00 00       	mov    esi,0xe
c0005825:	e9 b4 03 00 00       	jmp    c0005bde <f_mkfs+0x7c1>
c000582a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000582f:	31 d2                	xor    edx,edx
c0005831:	b9 00 02 00 00       	mov    ecx,0x200
c0005836:	89 d8                	mov    eax,ebx
c0005838:	e8 f3 c5 ff ff       	call   c0001e30 <mem_set>
c000583d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005842:	ba d2 f3 01 c0       	mov    edx,0xc001f3d2
c0005847:	89 d8                	mov    eax,ebx
c0005849:	e8 cd c5 ff ff       	call   c0001e1b <mem_cpy>
c000584e:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005851:	ba 00 02 00 00       	mov    edx,0x200
c0005856:	e8 b9 c5 ff ff       	call   c0001e14 <st_word>
c000585b:	89 f8                	mov    eax,edi
c000585d:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005862:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005865:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005868:	e8 a7 c5 ff ff       	call   c0001e14 <st_word>
c000586d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005871:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005874:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005879:	83 f8 03             	cmp    eax,0x3
c000587c:	b8 00 00 00 00       	mov    eax,0x0
c0005881:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005886:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000588a:	8d 43 11             	lea    eax,[ebx+0x11]
c000588d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005891:	e8 7e c5 ff ff       	call   c0001e14 <st_word>
c0005896:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000589a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058a0:	77 0a                	ja     c00058ac <f_mkfs+0x48f>
c00058a2:	8d 43 13             	lea    eax,[ebx+0x13]
c00058a5:	e8 6a c5 ff ff       	call   c0001e14 <st_word>
c00058aa:	eb 08                	jmp    c00058b4 <f_mkfs+0x497>
c00058ac:	8d 43 20             	lea    eax,[ebx+0x20]
c00058af:	e8 64 c5 ff ff       	call   c0001e18 <st_dword>
c00058b4:	8d 43 18             	lea    eax,[ebx+0x18]
c00058b7:	ba 3f 00 00 00       	mov    edx,0x3f
c00058bc:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058c0:	e8 4f c5 ff ff       	call   c0001e14 <st_word>
c00058c5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058c8:	ba ff 00 00 00       	mov    edx,0xff
c00058cd:	e8 42 c5 ff ff       	call   c0001e14 <st_word>
c00058d2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00058d9:	e8 3a c5 ff ff       	call   c0001e18 <st_dword>
c00058de:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058e3:	83 f8 03             	cmp    eax,0x3
c00058e6:	75 57                	jne    c000593f <f_mkfs+0x522>
c00058e8:	8d 43 43             	lea    eax,[ebx+0x43]
c00058eb:	ba 00 00 21 50       	mov    edx,0x50210000
c00058f0:	e8 23 c5 ff ff       	call   c0001e18 <st_dword>
c00058f5:	8d 43 24             	lea    eax,[ebx+0x24]
c00058f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058fc:	e8 17 c5 ff ff       	call   c0001e18 <st_dword>
c0005901:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005904:	ba 02 00 00 00       	mov    edx,0x2
c0005909:	e8 0a c5 ff ff       	call   c0001e18 <st_dword>
c000590e:	8d 43 30             	lea    eax,[ebx+0x30]
c0005911:	ba 01 00 00 00       	mov    edx,0x1
c0005916:	e8 f9 c4 ff ff       	call   c0001e14 <st_word>
c000591b:	8d 43 32             	lea    eax,[ebx+0x32]
c000591e:	ba 06 00 00 00       	mov    edx,0x6
c0005923:	e8 ec c4 ff ff       	call   c0001e14 <st_word>
c0005928:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000592c:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005930:	8d 43 47             	lea    eax,[ebx+0x47]
c0005933:	b9 13 00 00 00       	mov    ecx,0x13
c0005938:	ba de f3 01 c0       	mov    edx,0xc001f3de
c000593d:	eb 2f                	jmp    c000596e <f_mkfs+0x551>
c000593f:	8d 43 27             	lea    eax,[ebx+0x27]
c0005942:	ba 00 00 21 50       	mov    edx,0x50210000
c0005947:	e8 cc c4 ff ff       	call   c0001e18 <st_dword>
c000594c:	8d 43 16             	lea    eax,[ebx+0x16]
c000594f:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005954:	e8 bb c4 ff ff       	call   c0001e14 <st_word>
c0005959:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c000595d:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005961:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005964:	b9 13 00 00 00       	mov    ecx,0x13
c0005969:	ba f2 f3 01 c0       	mov    edx,0xc001f3f2
c000596e:	e8 a8 c4 ff ff       	call   c0001e1b <mem_cpy>
c0005973:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005979:	ba 55 aa 00 00       	mov    edx,0xaa55
c000597e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005982:	e8 8d c4 ff ff       	call   c0001e14 <st_word>
c0005987:	6a 01                	push   0x1
c0005989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000598d:	53                   	push   ebx
c000598e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005992:	e8 23 c4 ff ff       	call   c0001dba <disk_write>
c0005997:	83 c4 10             	add    esp,0x10
c000599a:	85 c0                	test   eax,eax
c000599c:	0f 85 25 02 00 00    	jne    c0005bc7 <f_mkfs+0x7aa>
c00059a2:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059a7:	83 f8 03             	cmp    eax,0x3
c00059aa:	0f 85 98 00 00 00    	jne    c0005a48 <f_mkfs+0x62b>
c00059b0:	6a 01                	push   0x1
c00059b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059b6:	83 c0 06             	add    eax,0x6
c00059b9:	50                   	push   eax
c00059ba:	53                   	push   ebx
c00059bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bf:	e8 f6 c3 ff ff       	call   c0001dba <disk_write>
c00059c4:	b9 00 02 00 00       	mov    ecx,0x200
c00059c9:	31 d2                	xor    edx,edx
c00059cb:	89 d8                	mov    eax,ebx
c00059cd:	e8 5e c4 ff ff       	call   c0001e30 <mem_set>
c00059d2:	ba 52 52 61 41       	mov    edx,0x41615252
c00059d7:	89 d8                	mov    eax,ebx
c00059d9:	e8 3a c4 ff ff       	call   c0001e18 <st_dword>
c00059de:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059e4:	ba 72 72 41 61       	mov    edx,0x61417272
c00059e9:	e8 2a c4 ff ff       	call   c0001e18 <st_dword>
c00059ee:	8d 56 ff             	lea    edx,[esi-0x1]
c00059f1:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059f7:	e8 1c c4 ff ff       	call   c0001e18 <st_dword>
c00059fc:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a02:	ba 02 00 00 00       	mov    edx,0x2
c0005a07:	e8 0c c4 ff ff       	call   c0001e18 <st_dword>
c0005a0c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a11:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a17:	e8 f8 c3 ff ff       	call   c0001e14 <st_word>
c0005a1c:	6a 01                	push   0x1
c0005a1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a22:	83 c0 07             	add    eax,0x7
c0005a25:	50                   	push   eax
c0005a26:	53                   	push   ebx
c0005a27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a2b:	e8 8a c3 ff ff       	call   c0001dba <disk_write>
c0005a30:	83 c4 20             	add    esp,0x20
c0005a33:	6a 01                	push   0x1
c0005a35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a39:	40                   	inc    eax
c0005a3a:	50                   	push   eax
c0005a3b:	53                   	push   ebx
c0005a3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a40:	e8 75 c3 ff ff       	call   c0001dba <disk_write>
c0005a45:	83 c4 10             	add    esp,0x10
c0005a48:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a4c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a50:	c1 e8 09             	shr    eax,0x9
c0005a53:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a59:	31 d2                	xor    edx,edx
c0005a5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a5f:	89 d8                	mov    eax,ebx
c0005a61:	e8 ca c3 ff ff       	call   c0001e30 <mem_set>
c0005a66:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a6b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a70:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a75:	83 f8 01             	cmp    eax,0x1
c0005a78:	0f 44 d1             	cmove  edx,ecx
c0005a7b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005a7f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005a87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a8b:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a90:	75 21                	jne    c0005ab3 <f_mkfs+0x696>
c0005a92:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a97:	89 d8                	mov    eax,ebx
c0005a99:	e8 7a c3 ff ff       	call   c0001e18 <st_dword>
c0005a9e:	8d 43 04             	lea    eax,[ebx+0x4]
c0005aa1:	83 ca ff             	or     edx,0xffffffff
c0005aa4:	e8 6f c3 ff ff       	call   c0001e18 <st_dword>
c0005aa9:	8d 43 08             	lea    eax,[ebx+0x8]
c0005aac:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005ab1:	eb 06                	jmp    c0005ab9 <f_mkfs+0x69c>
c0005ab3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ab7:	89 d8                	mov    eax,ebx
c0005ab9:	e8 5a c3 ff ff       	call   c0001e18 <st_dword>
c0005abe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ac6:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005aca:	0f 46 c6             	cmovbe eax,esi
c0005acd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005ad1:	50                   	push   eax
c0005ad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ad6:	53                   	push   ebx
c0005ad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005adb:	e8 da c2 ff ff       	call   c0001dba <disk_write>
c0005ae0:	83 c4 10             	add    esp,0x10
c0005ae3:	85 c0                	test   eax,eax
c0005ae5:	0f 85 dc 00 00 00    	jne    c0005bc7 <f_mkfs+0x7aa>
c0005aeb:	b9 00 02 00 00       	mov    ecx,0x200
c0005af0:	31 d2                	xor    edx,edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	e8 37 c3 ff ff       	call   c0001e30 <mem_set>
c0005af9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005afd:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b01:	29 ce                	sub    esi,ecx
c0005b03:	75 bd                	jne    c0005ac2 <f_mkfs+0x6a5>
c0005b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b09:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b11:	40                   	inc    eax
c0005b12:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b16:	0f 87 6f ff ff ff    	ja     c0005a8b <f_mkfs+0x66e>
c0005b1c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b21:	83 f8 03             	cmp    eax,0x3
c0005b24:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b2d:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b31:	0f 46 f7             	cmovbe esi,edi
c0005b34:	56                   	push   esi
c0005b35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b39:	53                   	push   ebx
c0005b3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b3e:	e8 77 c2 ff ff       	call   c0001dba <disk_write>
c0005b43:	83 c4 10             	add    esp,0x10
c0005b46:	85 c0                	test   eax,eax
c0005b48:	75 7d                	jne    c0005bc7 <f_mkfs+0x7aa>
c0005b4a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b4e:	29 f7                	sub    edi,esi
c0005b50:	75 d7                	jne    c0005b29 <f_mkfs+0x70c>
c0005b52:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b57:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b5c:	83 f8 03             	cmp    eax,0x3
c0005b5f:	74 1e                	je     c0005b7f <f_mkfs+0x762>
c0005b61:	b9 06 00 00 00       	mov    ecx,0x6
c0005b66:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b6e:	77 0f                	ja     c0005b7f <f_mkfs+0x762>
c0005b70:	b9 04 00 00 00       	mov    ecx,0x4
c0005b75:	83 f8 02             	cmp    eax,0x2
c0005b78:	74 05                	je     c0005b7f <f_mkfs+0x762>
c0005b7a:	b9 01 00 00 00       	mov    ecx,0x1
c0005b7f:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b84:	75 2a                	jne    c0005bb0 <f_mkfs+0x793>
c0005b86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b8a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b96:	83 ec 0c             	sub    esp,0xc
c0005b99:	53                   	push   ebx
c0005b9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b9e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005ba2:	e8 8a d2 ff ff       	call   c0002e31 <create_partition>
c0005ba7:	83 c4 10             	add    esp,0x10
c0005baa:	89 c6                	mov    esi,eax
c0005bac:	85 c0                	test   eax,eax
c0005bae:	75 2e                	jne    c0005bde <f_mkfs+0x7c1>
c0005bb0:	50                   	push   eax
c0005bb1:	31 f6                	xor    esi,esi
c0005bb3:	6a 00                	push   0x0
c0005bb5:	6a 00                	push   0x0
c0005bb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bbb:	e8 10 c2 ff ff       	call   c0001dd0 <disk_ioctl>
c0005bc0:	83 c4 10             	add    esp,0x10
c0005bc3:	85 c0                	test   eax,eax
c0005bc5:	74 17                	je     c0005bde <f_mkfs+0x7c1>
c0005bc7:	85 ed                	test   ebp,ebp
c0005bc9:	75 0c                	jne    c0005bd7 <f_mkfs+0x7ba>
c0005bcb:	83 ec 0c             	sub    esp,0xc
c0005bce:	53                   	push   ebx
c0005bcf:	e8 6c 00 00 00       	call   c0005c40 <ff_memfree>
c0005bd4:	83 c4 10             	add    esp,0x10
c0005bd7:	be 01 00 00 00       	mov    esi,0x1
c0005bdc:	eb 40                	jmp    c0005c1e <f_mkfs+0x801>
c0005bde:	85 ed                	test   ebp,ebp
c0005be0:	75 3c                	jne    c0005c1e <f_mkfs+0x801>
c0005be2:	83 ec 0c             	sub    esp,0xc
c0005be5:	53                   	push   ebx
c0005be6:	e8 55 00 00 00       	call   c0005c40 <ff_memfree>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	eb 2e                	jmp    c0005c1e <f_mkfs+0x801>
c0005bf0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bf5:	0f 85 46 fb ff ff    	jne    c0005741 <f_mkfs+0x324>
c0005bfb:	e9 20 fc ff ff       	jmp    c0005820 <f_mkfs+0x403>
c0005c00:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c05:	0f 85 3c fb ff ff    	jne    c0005747 <f_mkfs+0x32a>
c0005c0b:	89 cf                	mov    edi,ecx
c0005c0d:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c13:	0f 86 34 fa ff ff    	jbe    c000564d <f_mkfs+0x230>
c0005c19:	e9 02 fc ff ff       	jmp    c0005820 <f_mkfs+0x403>
c0005c1e:	83 c4 5c             	add    esp,0x5c
c0005c21:	89 f0                	mov    eax,esi
c0005c23:	5b                   	pop    ebx
c0005c24:	5e                   	pop    esi
c0005c25:	5f                   	pop    edi
c0005c26:	5d                   	pop    ebp
c0005c27:	c3                   	ret    

c0005c28 <ff_memalloc>:
c0005c28:	83 ec 0c             	sub    esp,0xc
c0005c2b:	83 ec 0c             	sub    esp,0xc
c0005c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c32:	e8 50 1e 00 00       	call   c0007a87 <malloc>
c0005c37:	83 c4 10             	add    esp,0x10
c0005c3a:	83 c4 0c             	add    esp,0xc
c0005c3d:	c3                   	ret    
c0005c3e:	66 90                	xchg   ax,ax

c0005c40 <ff_memfree>:
c0005c40:	83 ec 0c             	sub    esp,0xc
c0005c43:	83 ec 0c             	sub    esp,0xc
c0005c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c4a:	e8 48 1e 00 00       	call   c0007a97 <free>
c0005c4f:	83 c4 10             	add    esp,0x10
c0005c52:	90                   	nop
c0005c53:	83 c4 0c             	add    esp,0xc
c0005c56:	c3                   	ret    
c0005c57:	90                   	nop

c0005c58 <ff_uni2oem>:
c0005c58:	83 ec 14             	sub    esp,0x14
c0005c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c5f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c63:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c6a:	c7 44 24 0c 20 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f820
c0005c72:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c77:	77 0b                	ja     c0005c84 <ff_uni2oem+0x2c>
c0005c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c7d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c82:	eb 64                	jmp    c0005ce8 <ff_uni2oem+0x90>
c0005c84:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c8c:	77 5a                	ja     c0005ce8 <ff_uni2oem+0x90>
c0005c8e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c92:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c97:	75 4f                	jne    c0005ce8 <ff_uni2oem+0x90>
c0005c99:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ca0:	eb 12                	jmp    c0005cb4 <ff_uni2oem+0x5c>
c0005ca2:	66 90                	xchg   ax,ax
c0005ca4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca9:	83 c0 01             	add    eax,0x1
c0005cac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cb4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb9:	83 f8 7f             	cmp    eax,0x7f
c0005cbc:	77 1a                	ja     c0005cd8 <ff_uni2oem+0x80>
c0005cbe:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cc3:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cca:	01 d0                	add    eax,edx
c0005ccc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccf:	0f b7 c0             	movzx  eax,ax
c0005cd2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005cd6:	75 cc                	jne    c0005ca4 <ff_uni2oem+0x4c>
c0005cd8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cdd:	83 e8 80             	sub    eax,0xffffff80
c0005ce0:	0f b6 c0             	movzx  eax,al
c0005ce3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ced:	83 c4 14             	add    esp,0x14
c0005cf0:	c3                   	ret    
c0005cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf4 <ff_oem2uni>:
c0005cf4:	83 ec 18             	sub    esp,0x18
c0005cf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cff:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d04:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d08:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0f:	c7 44 24 10 20 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f820
c0005d17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d1c:	83 f8 7f             	cmp    eax,0x7f
c0005d1f:	77 0b                	ja     c0005d2c <ff_oem2uni+0x38>
c0005d21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d25:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2a:	eb 34                	jmp    c0005d60 <ff_oem2uni+0x6c>
c0005d2c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d30:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d35:	75 29                	jne    c0005d60 <ff_oem2uni+0x6c>
c0005d37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d3c:	3d ff 00 00 00       	cmp    eax,0xff
c0005d41:	77 1d                	ja     c0005d60 <ff_oem2uni+0x6c>
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d54:	01 d0                	add    eax,edx
c0005d56:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d59:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5e:	66 90                	xchg   ax,ax
c0005d60:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d65:	83 c4 18             	add    esp,0x18
c0005d68:	c3                   	ret    
c0005d69:	8d 76 00             	lea    esi,[esi+0x0]

c0005d6c <ff_wtoupper>:
c0005d6c:	83 ec 10             	sub    esp,0x10
c0005d6f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d77:	0f 87 a7 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1b8>
c0005d7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d81:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d86:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d8b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d90:	77 0a                	ja     c0005d9c <ff_wtoupper+0x30>
c0005d92:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c0005d97:	eb 0b                	jmp    c0005da4 <ff_wtoupper+0x38>
c0005d99:	8d 76 00             	lea    esi,[esi+0x0]
c0005d9c:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c0005da1:	8d 76 00             	lea    esi,[esi+0x0]
c0005da4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dac:	8d 50 02             	lea    edx,[eax+0x2]
c0005daf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005dbb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dc0:	85 c0                	test   eax,eax
c0005dc2:	0f 84 50 01 00 00    	je     c0005f18 <ff_wtoupper+0x1ac>
c0005dc8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dcd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dd2:	39 c2                	cmp    edx,eax
c0005dd4:	0f 82 3e 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1ac>
c0005dda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dde:	8d 50 02             	lea    edx,[eax+0x2]
c0005de1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ded:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005df2:	c1 e8 08             	shr    eax,0x8
c0005df5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dfa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dff:	0f b6 c0             	movzx  eax,al
c0005e02:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e07:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e0c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e11:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e16:	01 ca                	add    edx,ecx
c0005e18:	39 d0                	cmp    eax,edx
c0005e1a:	0f 8d d4 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x188>
c0005e20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e25:	83 f8 08             	cmp    eax,0x8
c0005e28:	0f 87 e6 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1a8>
c0005e2e:	8b 04 85 20 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ae0]
c0005e35:	ff e0                	jmp    eax
c0005e37:	90                   	nop
c0005e38:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e3d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e42:	29 c2                	sub    edx,eax
c0005e44:	89 d0                	mov    eax,edx
c0005e46:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4d:	01 d0                	add    eax,edx
c0005e4f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e52:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e57:	e9 94 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x184>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1a8>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a7 fe ff ff    	jne    c0005da8 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	d1 e0                	shl    eax,1
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 97 fe ff ff       	jmp    c0005da8 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	89 de                	mov    esi,ebx
c0005f39:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	c1 e6 08             	shl    esi,0x8
c0005f69:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 df                	mov    edi,ebx
c0005f80:	89 de                	mov    esi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005fb8:	89 fb                	mov    ebx,edi
c0005fba:	88 58 02             	mov    BYTE PTR [eax+0x2],bl
c0005fbd:	83 c0 03             	add    eax,0x3
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 e1 a8 ff ff       	call   c0000940 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 d7 a8 ff ff       	call   c0000940 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	83 fb 2f             	cmp    ebx,0x2f
c0006080:	0f 95 c2             	setne  dl
c0006083:	31 c0                	xor    eax,eax
c0006085:	85 db                	test   ebx,ebx
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 6b a8 ff ff       	call   c0000940 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 5d a8 ff ff       	call   c0000940 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	83 fa 2f             	cmp    edx,0x2f
c00060f8:	0f 95 c1             	setne  cl
c00060fb:	31 c0                	xor    eax,eax
c00060fd:	85 d2                	test   edx,edx
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 f9 01 c0       	push   0xc001f920
c000611b:	e8 80 31 01 00       	call   c00192a0 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	83 f8 10             	cmp    eax,0x10
c000613d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e f9 01 c0       	push   0xc001f92e
c0006153:	e8 48 31 01 00       	call   c00192a0 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 b1 30 01 00       	call   c0019244 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	50                   	push   eax
c00061c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 f3 a6 ff ff       	call   c0000940 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 04 24             	mov    DWORD PTR [esp],eax
c0006256:	e8 e5 a6 ff ff       	call   c0000940 <tolower>
c000625b:	83 c4 10             	add    esp,0x10
c000625e:	29 c3                	sub    ebx,eax
c0006260:	89 ef                	mov    edi,ebp
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006287:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000628e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006292:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 47 01 00 00       	jmp    c0006410 <find_object+0x19e>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00062fd:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c0006303:	89 c8                	mov    eax,ecx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	74 31                	je     c000633a <find_object+0xc8>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 c5 00 00 00    	je     c00063e2 <find_object+0x170>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	7f bd                	jg     c00062eb <find_object+0x79>
c000632e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006332:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0006336:	7f 99                	jg     c00062d1 <find_object+0x5f>
c0006338:	eb b1                	jmp    c00062eb <find_object+0x79>
c000633a:	29 ce                	sub    esi,ecx
c000633c:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006340:	a8 01                	test   al,0x1
c0006342:	74 05                	je     c0006349 <find_object+0xd7>
c0006344:	83 ee 21             	sub    esi,0x21
c0006347:	eb 5a                	jmp    c00063a3 <find_object+0x131>
c0006349:	42                   	inc    edx
c000634a:	83 ee 22             	sub    esi,0x22
c000634d:	eb 54                	jmp    c00063a3 <find_object+0x131>
c000634f:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006352:	48                   	dec    eax
c0006353:	3c 01                	cmp    al,0x1
c0006355:	77 51                	ja     c00063a8 <find_object+0x136>
c0006357:	50                   	push   eax
c0006358:	6a 02                	push   0x2
c000635a:	68 3d f9 01 c0       	push   0xc001f93d
c000635f:	52                   	push   edx
c0006360:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006364:	e8 67 a4 ff ff       	call   c00007d0 <strncmp>
c0006369:	83 c4 10             	add    esp,0x10
c000636c:	85 c0                	test   eax,eax
c000636e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006372:	75 27                	jne    c000639b <find_object+0x129>
c0006374:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006378:	8d 68 fb             	lea    ebp,[eax-0x5]
c000637b:	50                   	push   eax
c000637c:	55                   	push   ebp
c000637d:	8d 42 05             	lea    eax,[edx+0x5]
c0006380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006384:	50                   	push   eax
c0006385:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006389:	50                   	push   eax
c000638a:	e8 e1 a2 ff ff       	call   c0000670 <strncpy>
c000638f:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006394:	83 c4 10             	add    esp,0x10
c0006397:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000639b:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000639f:	29 c6                	sub    esi,eax
c00063a1:	01 c2                	add    edx,eax
c00063a3:	83 fe 03             	cmp    esi,0x3
c00063a6:	7f a7                	jg     c000634f <find_object+0xdd>
c00063a8:	85 ed                	test   ebp,ebp
c00063aa:	7e 40                	jle    c00063ec <find_object+0x17a>
c00063ac:	51                   	push   ecx
c00063ad:	51                   	push   ecx
c00063ae:	6a 2f                	push   0x2f
c00063b0:	57                   	push   edi
c00063b1:	e8 da a3 ff ff       	call   c0000790 <strchr>
c00063b6:	83 c4 10             	add    esp,0x10
c00063b9:	85 c0                	test   eax,eax
c00063bb:	74 04                	je     c00063c1 <find_object+0x14f>
c00063bd:	29 f8                	sub    eax,edi
c00063bf:	eb 0c                	jmp    c00063cd <find_object+0x15b>
c00063c1:	83 ec 0c             	sub    esp,0xc
c00063c4:	57                   	push   edi
c00063c5:	e8 96 a1 ff ff       	call   c0000560 <strlen>
c00063ca:	83 c4 10             	add    esp,0x10
c00063cd:	52                   	push   edx
c00063ce:	50                   	push   eax
c00063cf:	57                   	push   edi
c00063d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063d4:	50                   	push   eax
c00063d5:	e8 38 fe ff ff       	call   c0006212 <strnicmp>
c00063da:	83 c4 10             	add    esp,0x10
c00063dd:	e9 33 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e6:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ea:	eb 1e                	jmp    c000640a <find_object+0x198>
c00063ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00063f3:	89 f9                	mov    ecx,edi
c00063f5:	e8 a1 fc ff ff       	call   c000609b <fncompare>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 85 1b ff ff ff    	jne    c000631d <find_object+0xab>
c0006402:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006406:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000640a:	0f 85 0d ff ff ff    	jne    c000631d <find_object+0xab>
c0006410:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006416:	89 d8                	mov    eax,ebx
c0006418:	5b                   	pop    ebx
c0006419:	5e                   	pop    esi
c000641a:	5f                   	pop    edi
c000641b:	5d                   	pop    ebp
c000641c:	c3                   	ret    

c000641d <find_object_path>:
c000641d:	55                   	push   ebp
c000641e:	57                   	push   edi
c000641f:	89 d7                	mov    edi,edx
c0006421:	56                   	push   esi
c0006422:	89 c6                	mov    esi,eax
c0006424:	53                   	push   ebx
c0006425:	89 cb                	mov    ebx,ecx
c0006427:	83 ec 0c             	sub    esp,0xc
c000642a:	50                   	push   eax
c000642b:	50                   	push   eax
c000642c:	6a 2f                	push   0x2f
c000642e:	56                   	push   esi
c000642f:	e8 5c a3 ff ff       	call   c0000790 <strchr>
c0006434:	83 c4 10             	add    esp,0x10
c0006437:	89 c5                	mov    ebp,eax
c0006439:	85 c0                	test   eax,eax
c000643b:	74 3a                	je     c0006477 <find_object_path+0x5a>
c000643d:	39 ee                	cmp    esi,ebp
c000643f:	74 31                	je     c0006472 <find_object_path+0x55>
c0006441:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006444:	e8 b5 fb ff ff       	call   c0005ffe <iso_733>
c0006449:	89 c2                	mov    edx,eax
c000644b:	8d 43 02             	lea    eax,[ebx+0x2]
c000644e:	e8 ab fb ff ff       	call   c0005ffe <iso_733>
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	89 c1                	mov    ecx,eax
c0006458:	52                   	push   edx
c0006459:	89 f0                	mov    eax,esi
c000645b:	ba 01 00 00 00       	mov    edx,0x1
c0006460:	e8 0d fe ff ff       	call   c0006272 <find_object>
c0006465:	83 c4 10             	add    esp,0x10
c0006468:	89 c3                	mov    ebx,eax
c000646a:	85 c0                	test   eax,eax
c000646c:	75 04                	jne    c0006472 <find_object_path+0x55>
c000646e:	31 db                	xor    ebx,ebx
c0006470:	eb 36                	jmp    c00064a8 <find_object_path+0x8b>
c0006472:	8d 75 01             	lea    esi,[ebp+0x1]
c0006475:	eb b3                	jmp    c000642a <find_object_path+0xd>
c0006477:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000647a:	74 28                	je     c00064a4 <find_object_path+0x87>
c000647c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000647f:	e8 7a fb ff ff       	call   c0005ffe <iso_733>
c0006484:	89 c2                	mov    edx,eax
c0006486:	8d 43 02             	lea    eax,[ebx+0x2]
c0006489:	e8 70 fb ff ff       	call   c0005ffe <iso_733>
c000648e:	83 ec 0c             	sub    esp,0xc
c0006491:	89 c1                	mov    ecx,eax
c0006493:	52                   	push   edx
c0006494:	89 f0                	mov    eax,esi
c0006496:	89 fa                	mov    edx,edi
c0006498:	e8 d5 fd ff ff       	call   c0006272 <find_object>
c000649d:	83 c4 10             	add    esp,0x10
c00064a0:	89 c3                	mov    ebx,eax
c00064a2:	eb 04                	jmp    c00064a8 <find_object_path+0x8b>
c00064a4:	85 ff                	test   edi,edi
c00064a6:	74 c6                	je     c000646e <find_object_path+0x51>
c00064a8:	83 c4 0c             	add    esp,0xc
c00064ab:	89 d8                	mov    eax,ebx
c00064ad:	5b                   	pop    ebx
c00064ae:	5e                   	pop    esi
c00064af:	5f                   	pop    edi
c00064b0:	5d                   	pop    ebp
c00064b1:	c3                   	ret    

c00064b2 <stricmp>:
c00064b2:	57                   	push   edi
c00064b3:	56                   	push   esi
c00064b4:	31 f6                	xor    esi,esi
c00064b6:	53                   	push   ebx
c00064b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bb:	83 ec 0c             	sub    esp,0xc
c00064be:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c6:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064ca:	50                   	push   eax
c00064cb:	e8 50 a4 ff ff       	call   c0000920 <toupper>
c00064d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d3:	e8 68 a4 ff ff       	call   c0000940 <tolower>
c00064d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064db:	89 c3                	mov    ebx,eax
c00064dd:	e8 3e a4 ff ff       	call   c0000920 <toupper>
c00064e2:	46                   	inc    esi
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 55 a4 ff ff       	call   c0000940 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x44>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0x5>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	5b                   	pop    ebx
c00064fb:	5e                   	pop    esi
c00064fc:	5f                   	pop    edi
c00064fd:	c3                   	ret    

c00064fe <iso_open>:
c00064fe:	57                   	push   edi
c00064ff:	31 c0                	xor    eax,eax
c0006501:	56                   	push   esi
c0006502:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006507:	53                   	push   ebx
c0006508:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000650d:	0f 95 c0             	setne  al
c0006510:	89 c2                	mov    edx,eax
c0006512:	89 c6                	mov    esi,eax
c0006514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006518:	e8 00 ff ff ff       	call   c000641d <find_object_path>
c000651d:	83 ca ff             	or     edx,0xffffffff
c0006520:	85 c0                	test   eax,eax
c0006522:	74 5e                	je     c0006582 <iso_open+0x84>
c0006524:	89 c1                	mov    ecx,eax
c0006526:	31 d2                	xor    edx,edx
c0006528:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000652e:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006535:	75 42                	jne    c0006579 <iso_open+0x7b>
c0006537:	8d 41 02             	lea    eax,[ecx+0x2]
c000653a:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006544:	e8 b5 fa ff ff       	call   c0005ffe <iso_733>
c0006549:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000654f:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006555:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000655f:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006562:	e8 97 fa ff ff       	call   c0005ffe <iso_733>
c0006567:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006571:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006577:	eb 09                	jmp    c0006582 <iso_open+0x84>
c0006579:	42                   	inc    edx
c000657a:	83 fa 10             	cmp    edx,0x10
c000657d:	75 a9                	jne    c0006528 <iso_open+0x2a>
c000657f:	83 ca ff             	or     edx,0xffffffff
c0006582:	5b                   	pop    ebx
c0006583:	89 d0                	mov    eax,edx
c0006585:	5e                   	pop    esi
c0006586:	5f                   	pop    edi
c0006587:	c3                   	ret    

c0006588 <iso_close>:
c0006588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000658c:	83 f8 0f             	cmp    eax,0xf
c000658f:	7f 10                	jg     c00065a1 <iso_close+0x19>
c0006591:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006597:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065a1:	e9 6d fb ff ff       	jmp    c0006113 <bclear_cache>

c00065a6 <iso_read>:
c00065a6:	55                   	push   ebp
c00065a7:	57                   	push   edi
c00065a8:	56                   	push   esi
c00065a9:	53                   	push   ebx
c00065aa:	83 ec 1c             	sub    esp,0x1c
c00065ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065b1:	83 fd 0f             	cmp    ebp,0xf
c00065b4:	7e 0a                	jle    c00065c0 <iso_read+0x1a>
c00065b6:	83 c8 ff             	or     eax,0xffffffff
c00065b9:	89 c2                	mov    edx,eax
c00065bb:	e9 f4 00 00 00       	jmp    c00066b4 <iso_read+0x10e>
c00065c0:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065c6:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065cd:	74 e7                	je     c00065b6 <iso_read+0x10>
c00065cf:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065d5:	85 d2                	test   edx,edx
c00065d7:	75 dd                	jne    c00065b6 <iso_read+0x10>
c00065d9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065de:	0f 84 cd 00 00 00    	je     c00066b1 <iso_read+0x10b>
c00065e4:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ea:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065f0:	29 c3                	sub    ebx,eax
c00065f2:	89 d9                	mov    ecx,ebx
c00065f4:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065f8:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00065fd:	85 c9                	test   ecx,ecx
c00065ff:	0f 84 ac 00 00 00    	je     c00066b1 <iso_read+0x10b>
c0006605:	89 c6                	mov    esi,eax
c0006607:	bb 00 08 00 00       	mov    ebx,0x800
c000660c:	c1 e8 0b             	shr    eax,0xb
c000660f:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006615:	29 f3                	sub    ebx,esi
c0006617:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000661d:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006623:	75 3f                	jne    c0006664 <iso_read+0xbe>
c0006625:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000662b:	7e 37                	jle    c0006664 <iso_read+0xbe>
c000662d:	be 20 00 00 00       	mov    esi,0x20
c0006632:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006638:	7f 05                	jg     c000663f <iso_read+0x99>
c000663a:	89 ce                	mov    esi,ecx
c000663c:	c1 fe 0b             	sar    esi,0xb
c000663f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006643:	52                   	push   edx
c0006644:	56                   	push   esi
c0006645:	89 f3                	mov    ebx,esi
c0006647:	c1 e3 0b             	shl    ebx,0xb
c000664a:	50                   	push   eax
c000664b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000664f:	e8 23 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006654:	83 c4 10             	add    esp,0x10
c0006657:	85 c0                	test   eax,eax
c0006659:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000665d:	7f 3d                	jg     c000669c <iso_read+0xf6>
c000665f:	e9 52 ff ff ff       	jmp    c00065b6 <iso_read+0x10>
c0006664:	39 d9                	cmp    ecx,ebx
c0006666:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666a:	0f 4e d9             	cmovle ebx,ecx
c000666d:	e8 97 fb ff ff       	call   c0006209 <bdread>
c0006672:	85 c0                	test   eax,eax
c0006674:	0f 88 3c ff ff ff    	js     c00065b6 <iso_read+0x10>
c000667a:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006681:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006687:	25 ff 07 00 00       	and    eax,0x7ff
c000668c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006690:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006694:	89 d9                	mov    ecx,ebx
c0006696:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006698:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000669c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066a0:	01 da                	add    edx,ebx
c00066a2:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066a8:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066ac:	e9 28 ff ff ff       	jmp    c00065d9 <iso_read+0x33>
c00066b1:	89 d0                	mov    eax,edx
c00066b3:	99                   	cdq    
c00066b4:	83 c4 1c             	add    esp,0x1c
c00066b7:	5b                   	pop    ebx
c00066b8:	5e                   	pop    esi
c00066b9:	5f                   	pop    edi
c00066ba:	5d                   	pop    ebp
c00066bb:	c3                   	ret    

c00066bc <iso_seek>:
c00066bc:	55                   	push   ebp
c00066bd:	83 c8 ff             	or     eax,0xffffffff
c00066c0:	57                   	push   edi
c00066c1:	89 c2                	mov    edx,eax
c00066c3:	56                   	push   esi
c00066c4:	53                   	push   ebx
c00066c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066d1:	83 fe 0f             	cmp    esi,0xf
c00066d4:	7f 65                	jg     c000673b <iso_seek+0x7f>
c00066d6:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066dc:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066e2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066e9:	74 50                	je     c000673b <iso_seek+0x7f>
c00066eb:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066f2:	75 47                	jne    c000673b <iso_seek+0x7f>
c00066f4:	83 fb 01             	cmp    ebx,0x1
c00066f7:	74 0e                	je     c0006707 <iso_seek+0x4b>
c00066f9:	83 fb 02             	cmp    ebx,0x2
c00066fc:	74 0e                	je     c000670c <iso_seek+0x50>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 39                	jne    c000673b <iso_seek+0x7f>
c0006702:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006705:	eb 0d                	jmp    c0006714 <iso_seek+0x58>
c0006707:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000670a:	eb 08                	jmp    c0006714 <iso_seek+0x58>
c000670c:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000670f:	01 f8                	add    eax,edi
c0006711:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006714:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000671a:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c0006720:	05 40 45 02 c0       	add    eax,0xc0024540
c0006725:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006728:	76 03                	jbe    c000672d <iso_seek+0x71>
c000672a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000672d:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006733:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006739:	31 d2                	xor    edx,edx
c000673b:	5b                   	pop    ebx
c000673c:	5e                   	pop    esi
c000673d:	5f                   	pop    edi
c000673e:	5d                   	pop    ebp
c000673f:	c3                   	ret    

c0006740 <iso_tell>:
c0006740:	53                   	push   ebx
c0006741:	83 c8 ff             	or     eax,0xffffffff
c0006744:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006748:	89 c2                	mov    edx,eax
c000674a:	83 f9 0f             	cmp    ecx,0xf
c000674d:	7f 20                	jg     c000676f <iso_tell+0x2f>
c000674f:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006755:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000675c:	74 11                	je     c000676f <iso_tell+0x2f>
c000675e:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006765:	75 08                	jne    c000676f <iso_tell+0x2f>
c0006767:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000676d:	31 d2                	xor    edx,edx
c000676f:	5b                   	pop    ebx
c0006770:	c3                   	ret    

c0006771 <iso_total>:
c0006771:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006775:	83 c8 ff             	or     eax,0xffffffff
c0006778:	83 fa 0f             	cmp    edx,0xf
c000677b:	7f 1e                	jg     c000679b <iso_total+0x2a>
c000677d:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006783:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000678a:	74 0f                	je     c000679b <iso_total+0x2a>
c000678c:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006793:	75 06                	jne    c000679b <iso_total+0x2a>
c0006795:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000679b:	c3                   	ret    

c000679c <fn_postprocess>:
c000679c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a0:	89 d0                	mov    eax,edx
c00067a2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067a5:	85 c9                	test   ecx,ecx
c00067a7:	74 08                	je     c00067b1 <fn_postprocess+0x15>
c00067a9:	83 f9 3b             	cmp    ecx,0x3b
c00067ac:	74 03                	je     c00067b1 <fn_postprocess+0x15>
c00067ae:	40                   	inc    eax
c00067af:	eb f1                	jmp    c00067a2 <fn_postprocess+0x6>
c00067b1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067b4:	39 d0                	cmp    eax,edx
c00067b6:	76 0a                	jbe    c00067c2 <fn_postprocess+0x26>
c00067b8:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067bc:	75 04                	jne    c00067c2 <fn_postprocess+0x26>
c00067be:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067c2:	c3                   	ret    

c00067c3 <iso_readdir>:
c00067c3:	55                   	push   ebp
c00067c4:	57                   	push   edi
c00067c5:	56                   	push   esi
c00067c6:	53                   	push   ebx
c00067c7:	83 ec 1c             	sub    esp,0x1c
c00067ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067ce:	83 fb 0f             	cmp    ebx,0xf
c00067d1:	7f 28                	jg     c00067fb <iso_readdir+0x38>
c00067d3:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067d9:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067df:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067e6:	74 13                	je     c00067fb <iso_readdir+0x38>
c00067e8:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067ec:	74 0d                	je     c00067fb <iso_readdir+0x38>
c00067ee:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067f5:	0f 84 b1 00 00 00    	je     c00068ac <iso_readdir+0xe9>
c00067fb:	83 ec 0c             	sub    esp,0xc
c00067fe:	68 40 f9 01 c0       	push   0xc001f940
c0006803:	e8 98 2a 01 00       	call   c00192a0 <iso_kprintf>
c0006808:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000680b:	e8 ac 2a 01 00       	call   c00192bc <iso_kprintfd>
c0006810:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006816:	c7 04 24 45 f9 01 c0 	mov    DWORD PTR [esp],0xc001f945
c000681d:	e8 7e 2a 01 00       	call   c00192a0 <iso_kprintf>
c0006822:	5d                   	pop    ebp
c0006823:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006829:	e8 8e 2a 01 00       	call   c00192bc <iso_kprintfd>
c000682e:	c7 04 24 4b f9 01 c0 	mov    DWORD PTR [esp],0xc001f94b
c0006835:	e8 66 2a 01 00       	call   c00192a0 <iso_kprintf>
c000683a:	58                   	pop    eax
c000683b:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006841:	e8 76 2a 01 00       	call   c00192bc <iso_kprintfd>
c0006846:	c7 04 24 51 f9 01 c0 	mov    DWORD PTR [esp],0xc001f951
c000684d:	e8 4e 2a 01 00       	call   c00192a0 <iso_kprintf>
c0006852:	58                   	pop    eax
c0006853:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006859:	e8 5e 2a 01 00       	call   c00192bc <iso_kprintfd>
c000685e:	83 c4 10             	add    esp,0x10
c0006861:	eb 42                	jmp    c00068a5 <iso_readdir+0xe2>
c0006863:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006866:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000686d:	89 d1                	mov    ecx,edx
c000686f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006875:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006879:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000687c:	75 35                	jne    c00068b3 <iso_readdir+0xf0>
c000687e:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006884:	81 c2 00 08 00 00    	add    edx,0x800
c000688a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000688d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006890:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006893:	73 1e                	jae    c00068b3 <iso_readdir+0xf0>
c0006895:	c1 ea 0b             	shr    edx,0xb
c0006898:	8b 07                	mov    eax,DWORD PTR [edi]
c000689a:	01 d0                	add    eax,edx
c000689c:	e8 5f f9 ff ff       	call   c0006200 <biread>
c00068a1:	85 c0                	test   eax,eax
c00068a3:	79 be                	jns    c0006863 <iso_readdir+0xa0>
c00068a5:	31 c0                	xor    eax,eax
c00068a7:	e9 66 01 00 00       	jmp    c0006a12 <iso_readdir+0x24f>
c00068ac:	31 f6                	xor    esi,esi
c00068ae:	83 c8 ff             	or     eax,0xffffffff
c00068b1:	eb da                	jmp    c000688d <iso_readdir+0xca>
c00068b3:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068b9:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068bf:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068c5:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068c8:	73 db                	jae    c00068a5 <iso_readdir+0xe2>
c00068ca:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068ce:	75 34                	jne    c0006904 <iso_readdir+0x141>
c00068d0:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068d4:	75 2e                	jne    c0006904 <iso_readdir+0x141>
c00068d6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068d9:	01 f9                	add    ecx,edi
c00068db:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068e2:	89 c8                	mov    eax,ecx
c00068e4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068e7:	25 ff 07 00 00       	and    eax,0x7ff
c00068ec:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068f1:	01 c8                	add    eax,ecx
c00068f3:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00068ff:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006902:	74 a1                	je     c00068a5 <iso_readdir+0xe2>
c0006904:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000690a:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000690e:	8d 56 21             	lea    edx,[esi+0x21]
c0006911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006915:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000691b:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006922:	74 0c                	je     c0006930 <iso_readdir+0x16d>
c0006924:	89 e8                	mov    eax,ebp
c0006926:	e8 23 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000692b:	e9 a6 00 00 00       	jmp    c00069d6 <iso_readdir+0x213>
c0006930:	57                   	push   edi
c0006931:	51                   	push   ecx
c0006932:	52                   	push   edx
c0006933:	55                   	push   ebp
c0006934:	e8 37 9d ff ff       	call   c0000670 <strncpy>
c0006939:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c000693f:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006943:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006946:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000694e:	e8 49 fe ff ff       	call   c000679c <fn_postprocess>
c0006953:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006957:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000695a:	83 c4 10             	add    esp,0x10
c000695d:	29 d0                	sub    eax,edx
c000695f:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006963:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006967:	74 05                	je     c000696e <iso_readdir+0x1ab>
c0006969:	83 e8 21             	sub    eax,0x21
c000696c:	eb 04                	jmp    c0006972 <iso_readdir+0x1af>
c000696e:	47                   	inc    edi
c000696f:	83 e8 22             	sub    eax,0x22
c0006972:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006976:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000697c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006980:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006985:	7e 4f                	jle    c00069d6 <iso_readdir+0x213>
c0006987:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000698a:	48                   	dec    eax
c000698b:	3c 01                	cmp    al,0x1
c000698d:	77 47                	ja     c00069d6 <iso_readdir+0x213>
c000698f:	52                   	push   edx
c0006990:	6a 02                	push   0x2
c0006992:	68 3d f9 01 c0       	push   0xc001f93d
c0006997:	57                   	push   edi
c0006998:	e8 33 9e ff ff       	call   c00007d0 <strncmp>
c000699d:	83 c4 10             	add    esp,0x10
c00069a0:	85 c0                	test   eax,eax
c00069a2:	75 26                	jne    c00069ca <iso_readdir+0x207>
c00069a4:	50                   	push   eax
c00069a5:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069a9:	83 e8 05             	sub    eax,0x5
c00069ac:	50                   	push   eax
c00069ad:	8d 47 05             	lea    eax,[edi+0x5]
c00069b0:	50                   	push   eax
c00069b1:	55                   	push   ebp
c00069b2:	e8 b9 9c ff ff       	call   c0000670 <strncpy>
c00069b7:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069d2:	01 c7                	add    edi,eax
c00069d4:	eb aa                	jmp    c0006980 <iso_readdir+0x1bd>
c00069d6:	83 c8 ff             	or     eax,0xffffffff
c00069d9:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069dd:	89 c2                	mov    edx,eax
c00069df:	75 0a                	jne    c00069eb <iso_readdir+0x228>
c00069e1:	8d 46 0a             	lea    eax,[esi+0xa]
c00069e4:	e8 15 f6 ff ff       	call   c0005ffe <iso_733>
c00069e9:	31 d2                	xor    edx,edx
c00069eb:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069f1:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069f7:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c00069fd:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a00:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a06:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a0d:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a12:	83 c4 1c             	add    esp,0x1c
c0006a15:	5b                   	pop    ebx
c0006a16:	5e                   	pop    esi
c0006a17:	5f                   	pop    edi
c0006a18:	5d                   	pop    ebp
c0006a19:	c3                   	ret    

c0006a1a <iso_reset>:
c0006a1a:	83 ec 18             	sub    esp,0x18
c0006a1d:	68 5a f9 01 c0       	push   0xc001f95a
c0006a22:	e8 79 28 01 00       	call   c00192a0 <iso_kprintf>
c0006a27:	e8 1f f7 ff ff       	call   c000614b <iso_break_all>
c0006a2c:	e8 18 f7 ff ff       	call   c0006149 <bclear>
c0006a31:	31 c0                	xor    eax,eax
c0006a33:	83 c4 1c             	add    esp,0x1c
c0006a36:	c3                   	ret    

c0006a37 <init_percd>:
c0006a37:	57                   	push   edi
c0006a38:	56                   	push   esi
c0006a39:	53                   	push   ebx
c0006a3a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a43:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a48:	e8 cd ff ff ff       	call   c0006a1a <iso_reset>
c0006a4d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a57:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a5c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a60:	e8 9b f7 ff ff       	call   c0006200 <biread>
c0006a65:	89 c6                	mov    esi,eax
c0006a67:	85 c0                	test   eax,eax
c0006a69:	0f 88 ba 00 00 00    	js     c0006b29 <init_percd+0xf2>
c0006a6f:	52                   	push   edx
c0006a70:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a77:	6a 06                	push   0x6
c0006a79:	83 c0 04             	add    eax,0x4
c0006a7c:	68 65 f9 01 c0       	push   0xc001f965
c0006a81:	50                   	push   eax
c0006a82:	e8 f9 98 ff ff       	call   c0000380 <memcmp>
c0006a87:	83 c4 10             	add    esp,0x10
c0006a8a:	85 c0                	test   eax,eax
c0006a8c:	74 08                	je     c0006a96 <init_percd+0x5f>
c0006a8e:	43                   	inc    ebx
c0006a8f:	83 fb 04             	cmp    ebx,0x4
c0006a92:	75 c3                	jne    c0006a57 <init_percd+0x20>
c0006a94:	eb 1a                	jmp    c0006ab0 <init_percd+0x79>
c0006a96:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a9d:	83 c0 5c             	add    eax,0x5c
c0006aa0:	e8 26 f5 ff ff       	call   c0005fcb <isjoliet>
c0006aa5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	74 e0                	je     c0006a8e <init_percd+0x57>
c0006aae:	eb 3e                	jmp    c0006aee <init_percd+0xb7>
c0006ab0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ab7:	75 35                	jne    c0006aee <init_percd+0xb7>
c0006ab9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006abe:	83 c0 10             	add    eax,0x10
c0006ac1:	e8 3a f7 ff ff       	call   c0006200 <biread>
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	85 c0                	test   eax,eax
c0006aca:	78 5f                	js     c0006b2b <init_percd+0xf4>
c0006acc:	50                   	push   eax
c0006acd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ad4:	6a 06                	push   0x6
c0006ad6:	83 c0 04             	add    eax,0x4
c0006ad9:	68 6c f9 01 c0       	push   0xc001f96c
c0006ade:	83 cb ff             	or     ebx,0xffffffff
c0006ae1:	50                   	push   eax
c0006ae2:	e8 99 98 ff ff       	call   c0000380 <memcmp>
c0006ae7:	83 c4 10             	add    esp,0x10
c0006aea:	85 c0                	test   eax,eax
c0006aec:	75 3d                	jne    c0006b2b <init_percd+0xf4>
c0006aee:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006af5:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006afa:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b00:	b9 22 00 00 00       	mov    ecx,0x22
c0006b05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b07:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b0c:	31 db                	xor    ebx,ebx
c0006b0e:	e8 eb f4 ff ff       	call   c0005ffe <iso_733>
c0006b13:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b18:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b27:	eb 02                	jmp    c0006b2b <init_percd+0xf4>
c0006b29:	89 c3                	mov    ebx,eax
c0006b2b:	89 d8                	mov    eax,ebx
c0006b2d:	5b                   	pop    ebx
c0006b2e:	5e                   	pop    esi
c0006b2f:	5f                   	pop    edi
c0006b30:	c3                   	ret    

c0006b31 <iso_ioctl>:
c0006b31:	83 ec 18             	sub    esp,0x18
c0006b34:	68 73 f9 01 c0       	push   0xc001f973
c0006b39:	e8 62 27 01 00       	call   c00192a0 <iso_kprintf>
c0006b3e:	e8 d7 fe ff ff       	call   c0006a1a <iso_reset>
c0006b43:	31 c0                	xor    eax,eax
c0006b45:	83 c4 1c             	add    esp,0x1c
c0006b48:	c3                   	ret    

c0006b49 <fs_iso9660_init>:
c0006b49:	53                   	push   ebx
c0006b4a:	31 db                	xor    ebx,ebx
c0006b4c:	83 ec 14             	sub    esp,0x14
c0006b4f:	68 7e f9 01 c0       	push   0xc001f97e
c0006b54:	e8 47 27 01 00       	call   c00192a0 <iso_kprintf>
c0006b59:	83 c4 0c             	add    esp,0xc
c0006b5c:	68 40 09 00 00       	push   0x940
c0006b61:	6a 00                	push   0x0
c0006b63:	68 40 45 02 c0       	push   0xc0024540
c0006b68:	e8 73 99 ff ff       	call   c00004e0 <memset>
c0006b6d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b74:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b7e:	e8 04 0f 00 00       	call   c0007a87 <malloc>
c0006b83:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b8a:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b8f:	e8 f3 0e 00 00       	call   c0007a87 <malloc>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b9c:	83 ec 0c             	sub    esp,0xc
c0006b9f:	68 04 08 00 00       	push   0x804
c0006ba4:	e8 de 0e 00 00       	call   c0007a87 <malloc>
c0006ba9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bb0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bb6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bbd:	e8 c5 0e 00 00       	call   c0007a87 <malloc>
c0006bc2:	83 c4 10             	add    esp,0x10
c0006bc5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bcc:	43                   	inc    ebx
c0006bcd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bd3:	83 fb 10             	cmp    ebx,0x10
c0006bd6:	75 c4                	jne    c0006b9c <fs_iso9660_init+0x53>
c0006bd8:	83 c4 08             	add    esp,0x8
c0006bdb:	31 c0                	xor    eax,eax
c0006bdd:	5b                   	pop    ebx
c0006bde:	c3                   	ret    

c0006bdf <fs_iso9660_shutdown>:
c0006bdf:	53                   	push   ebx
c0006be0:	31 db                	xor    ebx,ebx
c0006be2:	83 ec 08             	sub    esp,0x8
c0006be5:	83 ec 0c             	sub    esp,0xc
c0006be8:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bef:	e8 a3 0e 00 00       	call   c0007a97 <free>
c0006bf4:	58                   	pop    eax
c0006bf5:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006bfc:	43                   	inc    ebx
c0006bfd:	e8 95 0e 00 00       	call   c0007a97 <free>
c0006c02:	83 c4 10             	add    esp,0x10
c0006c05:	83 fb 10             	cmp    ebx,0x10
c0006c08:	75 db                	jne    c0006be5 <fs_iso9660_shutdown+0x6>
c0006c0a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c0f:	85 c0                	test   eax,eax
c0006c11:	74 0c                	je     c0006c1f <fs_iso9660_shutdown+0x40>
c0006c13:	83 ec 0c             	sub    esp,0xc
c0006c16:	50                   	push   eax
c0006c17:	e8 7b 0e 00 00       	call   c0007a97 <free>
c0006c1c:	83 c4 10             	add    esp,0x10
c0006c1f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c24:	85 c0                	test   eax,eax
c0006c26:	74 0c                	je     c0006c34 <fs_iso9660_shutdown+0x55>
c0006c28:	83 ec 0c             	sub    esp,0xc
c0006c2b:	50                   	push   eax
c0006c2c:	e8 66 0e 00 00       	call   c0007a97 <free>
c0006c31:	83 c4 10             	add    esp,0x10
c0006c34:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c3e:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c48:	83 c4 08             	add    esp,0x8
c0006c4b:	31 c0                	xor    eax,eax
c0006c4d:	5b                   	pop    ebx
c0006c4e:	c3                   	ret    
c0006c4f:	90                   	nop

c0006c50 <Computer::close(int, int, void*)>:
c0006c50:	57                   	push   edi
c0006c51:	56                   	push   esi
c0006c52:	53                   	push   ebx
c0006c53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c5f:	83 ec 0c             	sub    esp,0xc
c0006c62:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c68:	50                   	push   eax
c0006c69:	e8 2a 52 00 00       	call   c000be98 <Device::closeAll()>
c0006c6e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c74:	83 c4 10             	add    esp,0x10
c0006c77:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c79:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c7d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c85:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c8d:	5b                   	pop    ebx
c0006c8e:	5e                   	pop    esi
c0006c8f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c92:	5f                   	pop    edi
c0006c93:	ff e0                	jmp    eax

c0006c95 <Krnl::firstTask()>:
c0006c95:	53                   	push   ebx
c0006c96:	83 ec 14             	sub    esp,0x14
c0006c99:	fb                   	sti    
c0006c9a:	68 8f f9 01 c0       	push   0xc001f98f
c0006c9f:	e8 16 95 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006ca4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cab:	e8 d7 0d 00 00       	call   c0007a87 <malloc>
c0006cb0:	89 c3                	mov    ebx,eax
c0006cb2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cbe:	50                   	push   eax
c0006cbf:	68 a8 f9 01 c0       	push   0xc001f9a8
c0006cc4:	6a 01                	push   0x1
c0006cc6:	53                   	push   ebx
c0006cc7:	e8 04 df 00 00       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0006ccc:	83 c4 20             	add    esp,0x20
c0006ccf:	68 ff 00 00 00       	push   0xff
c0006cd4:	6a 00                	push   0x0
c0006cd6:	68 d3 74 00 c0       	push   0xc00074d3
c0006cdb:	53                   	push   ebx
c0006cdc:	e8 13 e1 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0006ce1:	6a 7a                	push   0x7a
c0006ce3:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006ce9:	6a 00                	push   0x0
c0006ceb:	68 c4 58 01 c0       	push   0xc00158c4
c0006cf0:	52                   	push   edx
c0006cf1:	e8 fe e0 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0006cf6:	83 c4 20             	add    esp,0x20
c0006cf9:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006cfe:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d05:	e8 e4 9c 00 00       	call   c00109ee <KeInitRand()>
c0006d0a:	83 ec 0c             	sub    esp,0xc
c0006d0d:	68 a4 fa 01 c0       	push   0xc001faa4
c0006d12:	e8 a3 94 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006d17:	e8 cb ef 00 00       	call   c0015ce7 <Vm::initialise8086()>
c0006d1c:	e8 cb 3f 00 00       	call   c000acec <Fs::initVFS()>
c0006d21:	c7 04 24 b5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9b5
c0006d28:	e8 8d 94 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006d2d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d32:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d38:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d3a:	6a 00                	push   0x0
c0006d3c:	6a 00                	push   0x0
c0006d3e:	6a 00                	push   0x0
c0006d40:	50                   	push   eax
c0006d41:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d44:	83 c4 14             	add    esp,0x14
c0006d47:	68 a4 fa 01 c0       	push   0xc001faa4
c0006d4c:	e8 69 94 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006d51:	e8 44 99 00 00       	call   c001069a <Krnl::loadSystemEnv()>
c0006d56:	e8 a1 9b 00 00       	call   c00108fc <Krnl::setupPowerManager()>
c0006d5b:	83 c4 0c             	add    esp,0xc
c0006d5e:	6a 3a                	push   0x3a
c0006d60:	68 cf f9 01 c0       	push   0xc001f9cf
c0006d65:	68 d8 f9 01 c0       	push   0xc001f9d8
c0006d6a:	e8 9d c1 00 00       	call   c0012f0c <Reg::readIntWithDefault(char*, char*, int)>
c0006d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d72:	e8 85 4a 00 00       	call   c000b7fc <User::loadClockSettings(int)>
c0006d77:	c7 04 24 c8 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac8
c0006d7e:	e8 37 94 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006d83:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d88:	59                   	pop    ecx
c0006d89:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d8f:	53                   	push   ebx
c0006d90:	e8 01 51 00 00       	call   c000be96 <Device::loadDriversForAll()>
c0006d95:	c7 04 24 e0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e0
c0006d9c:	e8 19 94 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0006da1:	58                   	pop    eax
c0006da2:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006da8:	5a                   	pop    edx
c0006da9:	6a 01                	push   0x1
c0006dab:	68 f1 f9 01 c0       	push   0xc001f9f1
c0006db0:	e8 26 d8 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c0006db5:	59                   	pop    ecx
c0006db6:	5a                   	pop    edx
c0006db7:	53                   	push   ebx
c0006db8:	50                   	push   eax
c0006db9:	e8 5d da 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c0006dbe:	83 c4 10             	add    esp,0x10
c0006dc1:	83 ec 0c             	sub    esp,0xc
c0006dc4:	6a 02                	push   0x2
c0006dc6:	e8 75 e4 00 00       	call   c0015240 <blockTask(TaskState)>
c0006dcb:	83 c4 10             	add    esp,0x10
c0006dce:	eb f1                	jmp    c0006dc1 <Krnl::firstTask()+0x12c>

c0006dd0 <Computer::Computer()>:
c0006dd0:	83 ec 0c             	sub    esp,0xc
c0006dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd7:	83 ec 08             	sub    esp,0x8
c0006dda:	68 0d fa 01 c0       	push   0xc001fa0d
c0006ddf:	50                   	push   eax
c0006de0:	e8 2d 51 00 00       	call   c000bf12 <Device::Device(char const*)>
c0006de5:	83 c4 10             	add    esp,0x10
c0006de8:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c0006ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df1:	89 10                	mov    DWORD PTR [eax],edx
c0006df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e19:	83 ca 04             	or     edx,0x4
c0006e1c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e2c:	0f b6 d0             	movzx  edx,al
c0006e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e44:	0f b6 d0             	movzx  edx,al
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e5d:	88 d1                	mov    cl,dl
c0006e5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e63:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e69:	0f b6 d0             	movzx  edx,al
c0006e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e74:	83 e1 3f             	and    ecx,0x3f
c0006e77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e7b:	90                   	nop
c0006e7c:	83 c4 0c             	add    esp,0xc
c0006e7f:	c3                   	ret    

c0006e80 <Computer::setBootMessage(char const*)>:
c0006e80:	c3                   	ret    
c0006e81:	90                   	nop

c0006e82 <Computer::detectFeatures()>:
c0006e82:	55                   	push   ebp
c0006e83:	57                   	push   edi
c0006e84:	56                   	push   esi
c0006e85:	53                   	push   ebx
c0006e86:	83 ec 1c             	sub    esp,0x1c
c0006e89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e8d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006e93:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006e99:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006e9f:	e8 55 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ea4:	31 d2                	xor    edx,edx
c0006ea6:	85 c0                	test   eax,eax
c0006ea8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006eae:	0f 95 c2             	setne  dl
c0006eb1:	d1 e2                	shl    edx,1
c0006eb3:	83 e0 fd             	and    eax,0xfffffffd
c0006eb6:	09 d0                	or     eax,edx
c0006eb8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ebe:	a8 02                	test   al,0x2
c0006ec0:	75 51                	jne    c0006f13 <Computer::detectFeatures()+0x91>
c0006ec2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ec9:	74 0f                	je     c0006eda <Computer::detectFeatures()+0x58>
c0006ecb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ed1:	83 e0 fb             	and    eax,0xfffffffb
c0006ed4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eda:	e8 b7 73 01 00       	call   c001e296 <x87Detect>
c0006edf:	83 e0 01             	and    eax,0x1
c0006ee2:	c1 e0 04             	shl    eax,0x4
c0006ee5:	89 c2                	mov    edx,eax
c0006ee7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006eed:	83 e0 ef             	and    eax,0xffffffef
c0006ef0:	09 d0                	or     eax,edx
c0006ef2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef8:	88 c2                	mov    dl,al
c0006efa:	a8 10                	test   al,0x10
c0006efc:	0f 85 33 01 00 00    	jne    c0007035 <Computer::detectFeatures()+0x1b3>
c0006f02:	80 e2 80             	and    dl,0x80
c0006f05:	0f 85 4c 01 00 00    	jne    c0007057 <Computer::detectFeatures()+0x1d5>
c0006f0b:	83 c4 1c             	add    esp,0x1c
c0006f0e:	5b                   	pop    ebx
c0006f0f:	5e                   	pop    esi
c0006f10:	5f                   	pop    edi
c0006f11:	5d                   	pop    ebp
c0006f12:	c3                   	ret    
c0006f13:	83 ec 0c             	sub    esp,0xc
c0006f16:	6a 20                	push   0x20
c0006f18:	e8 b3 87 00 00       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f1d:	83 e0 01             	and    eax,0x1
c0006f20:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f27:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f2d:	83 e0 f7             	and    eax,0xfffffff7
c0006f30:	09 d0                	or     eax,edx
c0006f32:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f38:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f3f:	e8 8c 87 00 00       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f44:	89 c2                	mov    edx,eax
c0006f46:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f4c:	83 e2 01             	and    edx,0x1
c0006f4f:	83 e0 fe             	and    eax,0xfffffffe
c0006f52:	09 d0                	or     eax,edx
c0006f54:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f5a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f61:	e8 6a 87 00 00       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f66:	89 c2                	mov    edx,eax
c0006f68:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f6e:	c1 e2 07             	shl    edx,0x7
c0006f71:	83 e0 7f             	and    eax,0x7f
c0006f74:	09 d0                	or     eax,edx
c0006f76:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f7c:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f83:	e8 48 87 00 00       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f88:	83 c4 10             	add    esp,0x10
c0006f8b:	83 e0 01             	and    eax,0x1
c0006f8e:	c1 e0 05             	shl    eax,0x5
c0006f91:	89 c2                	mov    edx,eax
c0006f93:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f99:	83 e0 df             	and    eax,0xffffffdf
c0006f9c:	09 d0                	or     eax,edx
c0006f9e:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fa8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fae:	0f 84 c9 00 00 00    	je     c000707d <Computer::detectFeatures()+0x1fb>
c0006fb4:	83 e0 fe             	and    eax,0xfffffffe
c0006fb7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc3:	89 c2                	mov    edx,eax
c0006fc5:	83 e2 09             	and    edx,0x9
c0006fc8:	83 fa 01             	cmp    edx,0x1
c0006fcb:	75 09                	jne    c0006fd6 <Computer::detectFeatures()+0x154>
c0006fcd:	83 e0 fe             	and    eax,0xfffffffe
c0006fd0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd6:	83 ec 0c             	sub    esp,0xc
c0006fd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006fdd:	50                   	push   eax
c0006fde:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006fe2:	55                   	push   ebp
c0006fe3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006fe7:	57                   	push   edi
c0006fe8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006fec:	56                   	push   esi
c0006fed:	68 00 00 00 80       	push   0x80000000
c0006ff2:	e8 55 86 00 00       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006ff7:	83 c4 20             	add    esp,0x20
c0006ffa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007005:	0f 86 b7 fe ff ff    	jbe    c0006ec2 <Computer::detectFeatures()+0x40>
c000700b:	83 ec 0c             	sub    esp,0xc
c000700e:	50                   	push   eax
c000700f:	55                   	push   ebp
c0007010:	57                   	push   edi
c0007011:	56                   	push   esi
c0007012:	68 01 00 00 80       	push   0x80000001
c0007017:	e8 30 86 00 00       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000701c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007022:	83 c4 20             	add    esp,0x20
c0007025:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000702a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007030:	e9 8d fe ff ff       	jmp    c0006ec2 <Computer::detectFeatures()+0x40>
c0007035:	e8 16 72 01 00       	call   c001e250 <absolutelyNoChanceInHell>
c000703a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007040:	c1 e0 07             	shl    eax,0x7
c0007043:	83 e2 7f             	and    edx,0x7f
c0007046:	09 c2                	or     edx,eax
c0007048:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000704e:	80 e2 80             	and    dl,0x80
c0007051:	0f 84 b4 fe ff ff    	je     c0006f0b <Computer::detectFeatures()+0x89>
c0007057:	e8 64 6e 01 00       	call   c001dec0 <avxDetect>
c000705c:	83 e0 01             	and    eax,0x1
c000705f:	c1 e0 05             	shl    eax,0x5
c0007062:	89 c2                	mov    edx,eax
c0007064:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000706a:	83 e0 df             	and    eax,0xffffffdf
c000706d:	09 d0                	or     eax,edx
c000706f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007075:	83 c4 1c             	add    esp,0x1c
c0007078:	5b                   	pop    ebx
c0007079:	5e                   	pop    esi
c000707a:	5f                   	pop    edi
c000707b:	5d                   	pop    ebp
c000707c:	c3                   	ret    
c000707d:	83 ec 0c             	sub    esp,0xc
c0007080:	68 00 02 00 00       	push   0x200
c0007085:	e8 46 86 00 00       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000708a:	89 c2                	mov    edx,eax
c000708c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007092:	83 e2 01             	and    edx,0x1
c0007095:	83 e0 fe             	and    eax,0xfffffffe
c0007098:	09 d0                	or     eax,edx
c000709a:	83 c4 10             	add    esp,0x10
c000709d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070a3:	e9 15 ff ff ff       	jmp    c0006fbd <Computer::detectFeatures()+0x13b>

c00070a8 <Computer::displayFeatures()>:
c00070a8:	c3                   	ret    
c00070a9:	90                   	nop

c00070aa <Computer::rdmsr(unsigned int)>:
c00070aa:	83 ec 0c             	sub    esp,0xc
c00070ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070b1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070b8:	74 0a                	je     c00070c4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070be:	0f 32                	rdmsr  
c00070c0:	83 c4 0c             	add    esp,0xc
c00070c3:	c3                   	ret    
c00070c4:	83 ec 0c             	sub    esp,0xc
c00070c7:	68 16 fa 01 c0       	push   0xc001fa16
c00070cc:	e8 66 97 00 00       	call   c0010837 <KePanic(char const*)>
c00070d1:	83 c4 10             	add    esp,0x10
c00070d4:	eb e4                	jmp    c00070ba <Computer::rdmsr(unsigned int)+0x10>

c00070d6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070d6:	57                   	push   edi
c00070d7:	56                   	push   esi
c00070d8:	83 ec 04             	sub    esp,0x4
c00070db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070e7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ee:	74 10                	je     c0007100 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f4:	89 f0                	mov    eax,esi
c00070f6:	89 fa                	mov    edx,edi
c00070f8:	0f 30                	wrmsr  
c00070fa:	83 c4 04             	add    esp,0x4
c00070fd:	5e                   	pop    esi
c00070fe:	5f                   	pop    edi
c00070ff:	c3                   	ret    
c0007100:	83 ec 0c             	sub    esp,0xc
c0007103:	68 1c fa 01 c0       	push   0xc001fa1c
c0007108:	e8 2a 97 00 00       	call   c0010837 <KePanic(char const*)>
c000710d:	83 c4 10             	add    esp,0x10
c0007110:	eb de                	jmp    c00070f0 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007112 <Computer::shutdown()>:
c0007112:	83 ec 0c             	sub    esp,0xc
c0007115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007119:	8b 10                	mov    edx,DWORD PTR [eax]
c000711b:	6a 00                	push   0x0
c000711d:	6a 00                	push   0x0
c000711f:	6a 00                	push   0x0
c0007121:	50                   	push   eax
c0007122:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007125:	83 c4 1c             	add    esp,0x1c
c0007128:	c3                   	ret    
c0007129:	90                   	nop

c000712a <Computer::restart()>:
c000712a:	83 ec 0c             	sub    esp,0xc
c000712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007131:	8b 10                	mov    edx,DWORD PTR [eax]
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	6a 01                	push   0x1
c0007139:	50                   	push   eax
c000713a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713d:	83 c4 1c             	add    esp,0x1c
c0007140:	c3                   	ret    
c0007141:	90                   	nop

c0007142 <Computer::sleep()>:
c0007142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007146:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000714c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007150:	e9 e3 7f 00 00       	jmp    c000f138 <ACPI::sleep()>
c0007155:	90                   	nop

c0007156 <Computer::nmiEnabled()>:
c0007156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::readCMOS(unsigned char)>:
c0007162:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007166:	31 d2                	xor    edx,edx
c0007168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000716c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0007173:	75 02                	jne    c0007177 <Computer::readCMOS(unsigned char)+0x15>
c0007175:	b2 80                	mov    dl,0x80
c0007177:	09 d0                	or     eax,edx
c0007179:	e6 70                	out    0x70,al
c000717b:	e4 71                	in     al,0x71
c000717d:	c3                   	ret    

c000717e <Computer::enableNMI(bool)>:
c000717e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007182:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007186:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000718c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0007194:	eb cc                	jmp    c0007162 <Computer::readCMOS(unsigned char)>

c0007196 <Computer::open(int, int, void*)>:
c0007196:	56                   	push   esi
c0007197:	53                   	push   ebx
c0007198:	83 ec 10             	sub    esp,0x10
c000719b:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071a2:	0f 94 05 20 1e 02 c0 	sete   BYTE PTR ds:0xc0021e20
c00071a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071ad:	68 22 fa 01 c0       	push   0xc001fa22
c00071b2:	e8 03 90 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c00071b7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071be:	e8 c4 08 00 00       	call   c0007a87 <malloc>
c00071c3:	89 c6                	mov    esi,eax
c00071c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00071c8:	e8 df 7a 00 00       	call   c000ecac <ACPI::ACPI()>
c00071cd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071d3:	58                   	pop    eax
c00071d4:	5a                   	pop    edx
c00071d5:	56                   	push   esi
c00071d6:	53                   	push   ebx
c00071d7:	e8 9e 4b 00 00       	call   c000bd7a <Device::addChild(Device*)>
c00071dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071df:	e8 9e fc ff ff       	call   c0006e82 <Computer::detectFeatures()>
c00071e4:	59                   	pop    ecx
c00071e5:	5e                   	pop    esi
c00071e6:	6a 01                	push   0x1
c00071e8:	53                   	push   ebx
c00071e9:	e8 90 ff ff ff       	call   c000717e <Computer::enableNMI(bool)>
c00071ee:	c7 04 24 3a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa3a
c00071f5:	e8 c0 8f 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c00071fa:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007201:	e8 81 08 00 00       	call   c0007a87 <malloc>
c0007206:	89 c6                	mov    esi,eax
c0007208:	89 04 24             	mov    DWORD PTR [esp],eax
c000720b:	e8 78 85 00 00       	call   c000f788 <CPU::CPU()>
c0007210:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007216:	58                   	pop    eax
c0007217:	5a                   	pop    edx
c0007218:	56                   	push   esi
c0007219:	53                   	push   ebx
c000721a:	e8 5b 4b 00 00       	call   c000bd7a <Device::addChild(Device*)>
c000721f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007225:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007229:	8b 10                	mov    edx,DWORD PTR [eax]
c000722b:	51                   	push   ecx
c000722c:	6a 00                	push   0x0
c000722e:	6a 00                	push   0x0
c0007230:	50                   	push   eax
c0007231:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007234:	83 c4 14             	add    esp,0x14
c0007237:	68 54 fa 01 c0       	push   0xc001fa54
c000723c:	e8 79 8f 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0007241:	c7 04 24 95 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c95
c0007248:	e8 cf dc 00 00       	call   c0014f1c <setupMultitasking(void (*)())>
c000724d:	83 c4 14             	add    esp,0x14
c0007250:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007255:	5b                   	pop    ebx
c0007256:	5e                   	pop    esi
c0007257:	c3                   	ret    

c0007258 <Computer::disableNMI()>:
c0007258:	6a 00                	push   0x0
c000725a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725e:	50                   	push   eax
c000725f:	e8 1a ff ff ff       	call   c000717e <Computer::enableNMI(bool)>
c0007264:	5a                   	pop    edx
c0007265:	59                   	pop    ecx
c0007266:	c3                   	ret    
c0007267:	90                   	nop

c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007268:	53                   	push   ebx
c0007269:	b2 80                	mov    dl,0x80
c000726b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000726f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007273:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007277:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c000727e:	74 02                	je     c0007282 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0007280:	31 d2                	xor    edx,edx
c0007282:	09 d0                	or     eax,edx
c0007284:	e6 70                	out    0x70,al
c0007286:	88 c8                	mov    al,cl
c0007288:	e6 71                	out    0x71,al
c000728a:	5b                   	pop    ebx
c000728b:	c3                   	ret    

c000728c <Computer::handleNMI()>:
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 10             	sub    esp,0x10
c0007291:	e4 92                	in     al,0x92
c0007293:	89 c6                	mov    esi,eax
c0007295:	e4 61                	in     al,0x61
c0007297:	68 6f fa 01 c0       	push   0xc001fa6f
c000729c:	88 c3                	mov    bl,al
c000729e:	e8 a6 36 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00072a3:	83 c4 10             	add    esp,0x10
c00072a6:	83 e6 10             	and    esi,0x10
c00072a9:	75 10                	jne    c00072bb <Computer::handleNMI()+0x2f>
c00072ab:	f6 c3 40             	test   bl,0x40
c00072ae:	75 20                	jne    c00072d0 <Computer::handleNMI()+0x44>
c00072b0:	80 e3 80             	and    bl,0x80
c00072b3:	75 30                	jne    c00072e5 <Computer::handleNMI()+0x59>
c00072b5:	83 c4 04             	add    esp,0x4
c00072b8:	5b                   	pop    ebx
c00072b9:	5e                   	pop    esi
c00072ba:	c3                   	ret    
c00072bb:	83 ec 0c             	sub    esp,0xc
c00072be:	68 80 fa 01 c0       	push   0xc001fa80
c00072c3:	e8 6f 95 00 00       	call   c0010837 <KePanic(char const*)>
c00072c8:	83 c4 10             	add    esp,0x10
c00072cb:	f6 c3 40             	test   bl,0x40
c00072ce:	74 e0                	je     c00072b0 <Computer::handleNMI()+0x24>
c00072d0:	83 ec 0c             	sub    esp,0xc
c00072d3:	68 8d fa 01 c0       	push   0xc001fa8d
c00072d8:	e8 5a 95 00 00       	call   c0010837 <KePanic(char const*)>
c00072dd:	83 c4 10             	add    esp,0x10
c00072e0:	80 e3 80             	and    bl,0x80
c00072e3:	74 d0                	je     c00072b5 <Computer::handleNMI()+0x29>
c00072e5:	c7 44 24 10 97 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa97
c00072ed:	83 c4 04             	add    esp,0x4
c00072f0:	5b                   	pop    ebx
c00072f1:	5e                   	pop    esi
c00072f2:	e9 40 95 00 00       	jmp    c0010837 <KePanic(char const*)>
c00072f7:	90                   	nop

c00072f8 <GDTEntry::setBase(unsigned int)>:
c00072f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007300:	89 c1                	mov    ecx,eax
c0007302:	c1 e9 10             	shr    ecx,0x10
c0007305:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007309:	c1 e8 18             	shr    eax,0x18
c000730c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000730f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007312:	c3                   	ret    
c0007313:	90                   	nop

c0007314 <GDTEntry::setLimit(unsigned int)>:
c0007314:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000731f:	66 89 01             	mov    WORD PTR [ecx],ax
c0007322:	c1 e8 10             	shr    eax,0x10
c0007325:	83 e2 f0             	and    edx,0xfffffff0
c0007328:	83 e0 0f             	and    eax,0xf
c000732b:	09 d0                	or     eax,edx
c000732d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007330:	c3                   	ret    
c0007331:	90                   	nop

c0007332 <GDT::GDT()>:
c0007332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007336:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000733c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007340:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007346:	90                   	nop
c0007347:	c3                   	ret    

c0007348 <GDT::addEntry(GDTEntry)>:
c0007348:	53                   	push   ebx
c0007349:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000734d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007355:	8b 02                	mov    eax,DWORD PTR [edx]
c0007357:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000735b:	8d 48 01             	lea    ecx,[eax+0x1]
c000735e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007362:	89 0a                	mov    DWORD PTR [edx],ecx
c0007364:	c1 e0 03             	shl    eax,0x3
c0007367:	5b                   	pop    ebx
c0007368:	c3                   	ret    
c0007369:	90                   	nop

c000736a <GDT::getNumberOfEntries()>:
c000736a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007370:	c3                   	ret    
c0007371:	90                   	nop

c0007372 <GDT::flush()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 04             	add    eax,0x4
c0007379:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000737c:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007381:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007388:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c000738f:	e9 c6 8f ff ff       	jmp    c000035a <loadGDT>

c0007394 <GDT::setup()>:
c0007394:	57                   	push   edi
c0007395:	56                   	push   esi
c0007396:	53                   	push   ebx
c0007397:	83 ec 30             	sub    esp,0x30
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	6a 00                	push   0x0
c00073a0:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073a4:	56                   	push   esi
c00073a5:	e8 4e ff ff ff       	call   c00072f8 <GDTEntry::setBase(unsigned int)>
c00073aa:	6a 00                	push   0x0
c00073ac:	56                   	push   esi
c00073ad:	e8 62 ff ff ff       	call   c0007314 <GDTEntry::setLimit(unsigned int)>
c00073b2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073ba:	6a 00                	push   0x0
c00073bc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073c0:	56                   	push   esi
c00073c1:	e8 32 ff ff ff       	call   c00072f8 <GDTEntry::setBase(unsigned int)>
c00073c6:	68 ff ff ff 00       	push   0xffffff
c00073cb:	56                   	push   esi
c00073cc:	e8 43 ff ff ff       	call   c0007314 <GDTEntry::setLimit(unsigned int)>
c00073d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073d9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00073de:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073e2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00073e7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00073eb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00073ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00073f3:	89 f8                	mov    eax,edi
c00073f5:	89 fa                	mov    edx,edi
c00073f7:	80 e4 f7             	and    ah,0xf7
c00073fa:	80 ce 60             	or     dh,0x60
c00073fd:	89 c7                	mov    edi,eax
c00073ff:	80 cc 60             	or     ah,0x60
c0007402:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007406:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000740a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000740e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007412:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007416:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000741a:	83 c4 20             	add    esp,0x20
c000741d:	6a 00                	push   0x0
c000741f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007423:	50                   	push   eax
c0007424:	e8 cf fe ff ff       	call   c00072f8 <GDTEntry::setBase(unsigned int)>
c0007429:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000742d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007431:	83 e0 3f             	and    eax,0x3f
c0007434:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007438:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000743c:	6a 00                	push   0x0
c000743e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007442:	50                   	push   eax
c0007443:	e8 b0 fe ff ff       	call   c00072f8 <GDTEntry::setBase(unsigned int)>
c0007448:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000744c:	83 e0 3f             	and    eax,0x3f
c000744f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007453:	83 c4 0c             	add    esp,0xc
c0007456:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000745a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000745e:	53                   	push   ebx
c000745f:	e8 e4 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c0007464:	83 c4 0c             	add    esp,0xc
c0007467:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	53                   	push   ebx
c0007470:	e8 d3 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	57                   	push   edi
c0007479:	56                   	push   esi
c000747a:	53                   	push   ebx
c000747b:	e8 c8 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c0007480:	83 c4 0c             	add    esp,0xc
c0007483:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007487:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000748b:	53                   	push   ebx
c000748c:	e8 b7 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c0007491:	83 c4 0c             	add    esp,0xc
c0007494:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007498:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000749c:	53                   	push   ebx
c000749d:	e8 a6 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ad:	53                   	push   ebx
c00074ae:	e8 95 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074be:	53                   	push   ebx
c00074bf:	e8 84 fe ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c00074c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::flush()>
c00074cc:	83 c4 40             	add    esp,0x40
c00074cf:	5b                   	pop    ebx
c00074d0:	5e                   	pop    esi
c00074d1:	5f                   	pop    edi
c00074d2:	c3                   	ret    

c00074d3 <idleFunction(void*)>:
c00074d3:	83 ec 0c             	sub    esp,0xc
c00074d6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074db:	48                   	dec    eax
c00074dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00074e1:	75 01                	jne    c00074e4 <idleFunction(void*)+0x11>
c00074e3:	fb                   	sti    
c00074e4:	e8 a5 f6 00 00       	call   c0016b8e <HalSystemIdle()>
c00074e9:	e8 64 73 01 00       	call   c001e852 <idleCommon()>
c00074ee:	eb f4                	jmp    c00074e4 <idleFunction(void*)+0x11>

c00074f0 <IDTEntry::IDTEntry(bool)>:
c00074f0:	53                   	push   ebx
c00074f1:	83 ec 04             	sub    esp,0x4
c00074f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f8:	88 04 24             	mov    BYTE PTR [esp],al
c00074fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074ff:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007509:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000750d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007511:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007514:	83 e2 f0             	and    edx,0xfffffff0
c0007517:	83 ca 0e             	or     edx,0xe
c000751a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000751d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007521:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007524:	83 e2 ef             	and    edx,0xffffffef
c0007527:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000752a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000752e:	85 c0                	test   eax,eax
c0007530:	74 06                	je     c0007538 <IDTEntry::IDTEntry(bool)+0x48>
c0007532:	b2 03                	mov    dl,0x3
c0007534:	eb 06                	jmp    c000753c <IDTEntry::IDTEntry(bool)+0x4c>
c0007536:	66 90                	xchg   ax,ax
c0007538:	b2 00                	mov    dl,0x0
c000753a:	66 90                	xchg   ax,ax
c000753c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007540:	83 e2 03             	and    edx,0x3
c0007543:	89 d3                	mov    ebx,edx
c0007545:	c1 e3 05             	shl    ebx,0x5
c0007548:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000754b:	83 e2 9f             	and    edx,0xffffff9f
c000754e:	88 d1                	mov    cl,dl
c0007550:	88 da                	mov    dl,bl
c0007552:	09 ca                	or     edx,ecx
c0007554:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000755e:	83 ca 80             	or     edx,0xffffff80
c0007561:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007564:	90                   	nop
c0007565:	83 c4 04             	add    esp,0x4
c0007568:	5b                   	pop    ebx
c0007569:	c3                   	ret    

c000756a <IDTEntry::setOffset(unsigned int)>:
c000756a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000756e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007572:	66 89 02             	mov    WORD PTR [edx],ax
c0007575:	c1 e8 10             	shr    eax,0x10
c0007578:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000757c:	c3                   	ret    
c000757d:	90                   	nop
c000757e:	66 90                	xchg   ax,ax

c0007580 <IDT::IDT()>:
c0007580:	90                   	nop
c0007581:	c3                   	ret    

c0007582 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007586:	83 c0 30             	add    eax,0x30
c0007589:	c3                   	ret    

c000758a <IDT::addEntry(IDTEntry, int)>:
c000758a:	53                   	push   ebx
c000758b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000758f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007593:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000759b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000759e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075a2:	5b                   	pop    ebx
c00075a3:	c3                   	ret    

c00075a4 <IDT::addEntry(int, void (*)(), bool)>:
c00075a4:	53                   	push   ebx
c00075a5:	83 ec 10             	sub    esp,0x10
c00075a8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075ad:	50                   	push   eax
c00075ae:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075b2:	53                   	push   ebx
c00075b3:	e8 38 ff ff ff       	call   c00074f0 <IDTEntry::IDTEntry(bool)>
c00075b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075bc:	53                   	push   ebx
c00075bd:	e8 a8 ff ff ff       	call   c000756a <IDTEntry::setOffset(unsigned int)>
c00075c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075d2:	e8 b3 ff ff ff       	call   c000758a <IDT::addEntry(IDTEntry, int)>
c00075d7:	83 c4 30             	add    esp,0x30
c00075da:	5b                   	pop    ebx
c00075db:	c3                   	ret    

c00075dc <IDT::flush()>:
c00075dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e0:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c00075e9:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c00075ee:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c00075f5:	c3                   	ret    

c00075f6 <IDT::setup()>:
c00075f6:	57                   	push   edi
c00075f7:	56                   	push   esi
c00075f8:	53                   	push   ebx
c00075f9:	83 ec 10             	sub    esp,0x10
c00075fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007600:	6a 00                	push   0x0
c0007602:	68 50 df 01 c0       	push   0xc001df50
c0007607:	6a 00                	push   0x0
c0007609:	53                   	push   ebx
c000760a:	e8 95 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 60 df 01 c0       	push   0xc001df60
c0007616:	6a 01                	push   0x1
c0007618:	53                   	push   ebx
c0007619:	e8 86 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 6a df 01 c0       	push   0xc001df6a
c0007628:	6a 02                	push   0x2
c000762a:	53                   	push   ebx
c000762b:	e8 74 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 74 df 01 c0       	push   0xc001df74
c0007637:	6a 03                	push   0x3
c0007639:	53                   	push   ebx
c000763a:	e8 65 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 7e df 01 c0       	push   0xc001df7e
c0007649:	6a 04                	push   0x4
c000764b:	53                   	push   ebx
c000764c:	e8 53 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 88 df 01 c0       	push   0xc001df88
c0007658:	6a 05                	push   0x5
c000765a:	53                   	push   ebx
c000765b:	e8 44 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 92 df 01 c0       	push   0xc001df92
c000766a:	6a 06                	push   0x6
c000766c:	53                   	push   ebx
c000766d:	e8 32 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 9c df 01 c0       	push   0xc001df9c
c0007679:	6a 07                	push   0x7
c000767b:	53                   	push   ebx
c000767c:	e8 23 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 a6 df 01 c0       	push   0xc001dfa6
c000768b:	6a 08                	push   0x8
c000768d:	53                   	push   ebx
c000768e:	e8 11 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 ae df 01 c0       	push   0xc001dfae
c000769a:	6a 09                	push   0x9
c000769c:	53                   	push   ebx
c000769d:	e8 02 ff ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 b8 df 01 c0       	push   0xc001dfb8
c00076ac:	6a 0a                	push   0xa
c00076ae:	53                   	push   ebx
c00076af:	e8 f0 fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 c0 df 01 c0       	push   0xc001dfc0
c00076bb:	6a 0b                	push   0xb
c00076bd:	53                   	push   ebx
c00076be:	e8 e1 fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 20             	add    esp,0x20
c00076c6:	6a 00                	push   0x0
c00076c8:	68 c8 df 01 c0       	push   0xc001dfc8
c00076cd:	6a 0c                	push   0xc
c00076cf:	53                   	push   ebx
c00076d0:	e8 cf fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076d5:	6a 00                	push   0x0
c00076d7:	68 d0 df 01 c0       	push   0xc001dfd0
c00076dc:	6a 0d                	push   0xd
c00076de:	53                   	push   ebx
c00076df:	e8 c0 fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076e4:	83 c4 20             	add    esp,0x20
c00076e7:	6a 00                	push   0x0
c00076e9:	68 ea df 01 c0       	push   0xc001dfea
c00076ee:	6a 0e                	push   0xe
c00076f0:	53                   	push   ebx
c00076f1:	e8 ae fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00076f6:	6a 00                	push   0x0
c00076f8:	68 f2 df 01 c0       	push   0xc001dff2
c00076fd:	6a 0f                	push   0xf
c00076ff:	53                   	push   ebx
c0007700:	e8 9f fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007705:	83 c4 20             	add    esp,0x20
c0007708:	6a 00                	push   0x0
c000770a:	68 fc df 01 c0       	push   0xc001dffc
c000770f:	6a 10                	push   0x10
c0007711:	53                   	push   ebx
c0007712:	e8 8d fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007717:	6a 00                	push   0x0
c0007719:	68 06 e0 01 c0       	push   0xc001e006
c000771e:	6a 11                	push   0x11
c0007720:	53                   	push   ebx
c0007721:	e8 7e fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007726:	83 c4 20             	add    esp,0x20
c0007729:	6a 00                	push   0x0
c000772b:	68 10 e0 01 c0       	push   0xc001e010
c0007730:	6a 12                	push   0x12
c0007732:	53                   	push   ebx
c0007733:	e8 6c fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007738:	6a 01                	push   0x1
c000773a:	68 aa e0 01 c0       	push   0xc001e0aa
c000773f:	6a 60                	push   0x60
c0007741:	53                   	push   ebx
c0007742:	e8 5d fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007747:	83 c4 20             	add    esp,0x20
c000774a:	6a 00                	push   0x0
c000774c:	68 b1 e0 01 c0       	push   0xc001e0b1
c0007751:	6a 20                	push   0x20
c0007753:	53                   	push   ebx
c0007754:	e8 4b fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007759:	6a 00                	push   0x0
c000775b:	68 9c e0 01 c0       	push   0xc001e09c
c0007760:	6a 21                	push   0x21
c0007762:	53                   	push   ebx
c0007763:	e8 3c fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007768:	83 c4 20             	add    esp,0x20
c000776b:	6a 00                	push   0x0
c000776d:	68 a3 e0 01 c0       	push   0xc001e0a3
c0007772:	6a 22                	push   0x22
c0007774:	53                   	push   ebx
c0007775:	e8 2a fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000777a:	6a 00                	push   0x0
c000777c:	68 1a e0 01 c0       	push   0xc001e01a
c0007781:	6a 23                	push   0x23
c0007783:	53                   	push   ebx
c0007784:	e8 1b fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007789:	83 c4 20             	add    esp,0x20
c000778c:	6a 00                	push   0x0
c000778e:	68 24 e0 01 c0       	push   0xc001e024
c0007793:	6a 24                	push   0x24
c0007795:	53                   	push   ebx
c0007796:	e8 09 fe ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000779b:	6a 00                	push   0x0
c000779d:	68 2e e0 01 c0       	push   0xc001e02e
c00077a2:	6a 25                	push   0x25
c00077a4:	53                   	push   ebx
c00077a5:	e8 fa fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077aa:	83 c4 20             	add    esp,0x20
c00077ad:	6a 00                	push   0x0
c00077af:	68 38 e0 01 c0       	push   0xc001e038
c00077b4:	6a 26                	push   0x26
c00077b6:	53                   	push   ebx
c00077b7:	e8 e8 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077bc:	6a 00                	push   0x0
c00077be:	68 42 e0 01 c0       	push   0xc001e042
c00077c3:	6a 27                	push   0x27
c00077c5:	53                   	push   ebx
c00077c6:	e8 d9 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077cb:	83 c4 20             	add    esp,0x20
c00077ce:	6a 00                	push   0x0
c00077d0:	68 4c e0 01 c0       	push   0xc001e04c
c00077d5:	6a 28                	push   0x28
c00077d7:	53                   	push   ebx
c00077d8:	e8 c7 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077dd:	6a 00                	push   0x0
c00077df:	68 56 e0 01 c0       	push   0xc001e056
c00077e4:	6a 29                	push   0x29
c00077e6:	53                   	push   ebx
c00077e7:	e8 b8 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077ec:	83 c4 20             	add    esp,0x20
c00077ef:	6a 00                	push   0x0
c00077f1:	68 60 e0 01 c0       	push   0xc001e060
c00077f6:	6a 2a                	push   0x2a
c00077f8:	53                   	push   ebx
c00077f9:	e8 a6 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00077fe:	6a 00                	push   0x0
c0007800:	68 6a e0 01 c0       	push   0xc001e06a
c0007805:	6a 2b                	push   0x2b
c0007807:	53                   	push   ebx
c0007808:	e8 97 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000780d:	83 c4 20             	add    esp,0x20
c0007810:	6a 00                	push   0x0
c0007812:	68 74 e0 01 c0       	push   0xc001e074
c0007817:	6a 2c                	push   0x2c
c0007819:	53                   	push   ebx
c000781a:	e8 85 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000781f:	6a 00                	push   0x0
c0007821:	68 7e e0 01 c0       	push   0xc001e07e
c0007826:	6a 2d                	push   0x2d
c0007828:	53                   	push   ebx
c0007829:	e8 76 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000782e:	83 c4 20             	add    esp,0x20
c0007831:	6a 00                	push   0x0
c0007833:	68 88 e0 01 c0       	push   0xc001e088
c0007838:	6a 2e                	push   0x2e
c000783a:	53                   	push   ebx
c000783b:	e8 64 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007840:	6a 00                	push   0x0
c0007842:	68 92 e0 01 c0       	push   0xc001e092
c0007847:	6a 2f                	push   0x2f
c0007849:	53                   	push   ebx
c000784a:	e8 55 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	6a 00                	push   0x0
c0007854:	68 ec e1 01 c0       	push   0xc001e1ec
c0007859:	6a 30                	push   0x30
c000785b:	53                   	push   ebx
c000785c:	e8 43 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007861:	6a 00                	push   0x0
c0007863:	68 f6 e1 01 c0       	push   0xc001e1f6
c0007868:	6a 31                	push   0x31
c000786a:	53                   	push   ebx
c000786b:	e8 34 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007870:	83 c4 20             	add    esp,0x20
c0007873:	6a 00                	push   0x0
c0007875:	68 00 e2 01 c0       	push   0xc001e200
c000787a:	6a 32                	push   0x32
c000787c:	53                   	push   ebx
c000787d:	e8 22 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007882:	6a 00                	push   0x0
c0007884:	68 0a e2 01 c0       	push   0xc001e20a
c0007889:	6a 33                	push   0x33
c000788b:	53                   	push   ebx
c000788c:	e8 13 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	6a 00                	push   0x0
c0007896:	68 14 e2 01 c0       	push   0xc001e214
c000789b:	6a 34                	push   0x34
c000789d:	53                   	push   ebx
c000789e:	e8 01 fd ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00078a3:	6a 00                	push   0x0
c00078a5:	68 1e e2 01 c0       	push   0xc001e21e
c00078aa:	6a 35                	push   0x35
c00078ac:	53                   	push   ebx
c00078ad:	e8 f2 fc ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00078b2:	83 c4 20             	add    esp,0x20
c00078b5:	6a 00                	push   0x0
c00078b7:	68 28 e2 01 c0       	push   0xc001e228
c00078bc:	6a 36                	push   0x36
c00078be:	53                   	push   ebx
c00078bf:	e8 e0 fc ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00078c4:	6a 00                	push   0x0
c00078c6:	68 32 e2 01 c0       	push   0xc001e232
c00078cb:	6a 37                	push   0x37
c00078cd:	53                   	push   ebx
c00078ce:	e8 d1 fc ff ff       	call   c00075a4 <IDT::addEntry(int, void (*)(), bool)>
c00078d3:	83 c4 1c             	add    esp,0x1c
c00078d6:	6a 03                	push   0x3
c00078d8:	6a 02                	push   0x2
c00078da:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00078e0:	e8 f1 24 00 00       	call   c0009dd6 <VAS::allocatePages(int, int)>
c00078e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00078ec:	89 c6                	mov    esi,eax
c00078ee:	e8 94 01 00 00       	call   c0007a87 <malloc>
c00078f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078f6:	89 c7                	mov    edi,eax
c00078f8:	e8 23 16 00 00       	call   c0008f20 <TSS::TSS()>
c00078fd:	83 c4 0c             	add    esp,0xc
c0007900:	81 c6 00 20 00 00    	add    esi,0x2000
c0007906:	68 a6 df 01 c0       	push   0xc001dfa6
c000790b:	56                   	push   esi
c000790c:	57                   	push   edi
c000790d:	e8 52 16 00 00       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0007912:	89 c6                	mov    esi,eax
c0007914:	58                   	pop    eax
c0007915:	5a                   	pop    edx
c0007916:	6a 00                	push   0x0
c0007918:	8d 44 24 14          	lea    eax,[esp+0x14]
c000791c:	50                   	push   eax
c000791d:	e8 ce fb ff ff       	call   c00074f0 <IDTEntry::IDTEntry(bool)>
c0007922:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007926:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000792b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007931:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007938:	80 ce 05             	or     dh,0x5
c000793b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007943:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000794d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007950:	e8 87 fc ff ff       	call   c00075dc <IDT::flush()>
c0007955:	83 c4 20             	add    esp,0x20
c0007958:	5b                   	pop    ebx
c0007959:	5e                   	pop    esi
c000795a:	5f                   	pop    edi
c000795b:	c3                   	ret    

c000795c <sbrk>:
c000795c:	55                   	push   ebp
c000795d:	57                   	push   edi
c000795e:	56                   	push   esi
c000795f:	53                   	push   ebx
c0007960:	83 ec 1c             	sub    esp,0x1c
c0007963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007967:	85 c0                	test   eax,eax
c0007969:	74 66                	je     c00079d1 <sbrk+0x75>
c000796b:	78 6b                	js     c00079d8 <sbrk+0x7c>
c000796d:	8b 15 0c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e0c
c0007973:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007977:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000797d:	05 ff 0f 00 00       	add    eax,0xfff
c0007982:	0f 49 e8             	cmovns ebp,eax
c0007985:	c1 fd 0c             	sar    ebp,0xc
c0007988:	bb 00 00 00 00       	mov    ebx,0x0
c000798d:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c0007993:	8b 3d 0c 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e0c
c0007999:	e8 f4 03 00 00       	call   c0007d92 <Phys::allocatePage()>
c000799e:	68 01 04 00 00       	push   0x401
c00079a3:	57                   	push   edi
c00079a4:	50                   	push   eax
c00079a5:	56                   	push   esi
c00079a6:	e8 25 23 00 00       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ab:	81 05 0c 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021e0c,0x1000
c00079b5:	83 c3 01             	add    ebx,0x1
c00079b8:	83 c4 10             	add    esp,0x10
c00079bb:	39 dd                	cmp    ebp,ebx
c00079bd:	75 ce                	jne    c000798d <sbrk+0x31>
c00079bf:	0f 20 d8             	mov    eax,cr3
c00079c2:	0f 22 d8             	mov    cr3,eax
c00079c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079c9:	83 c4 1c             	add    esp,0x1c
c00079cc:	5b                   	pop    ebx
c00079cd:	5e                   	pop    esi
c00079ce:	5f                   	pop    edi
c00079cf:	5d                   	pop    ebp
c00079d0:	c3                   	ret    
c00079d1:	a1 0c 1e 02 c0       	mov    eax,ds:0xc0021e0c
c00079d6:	eb f1                	jmp    c00079c9 <sbrk+0x6d>
c00079d8:	83 ec 08             	sub    esp,0x8
c00079db:	50                   	push   eax
c00079dc:	68 14 fb 01 c0       	push   0xc001fb14
c00079e1:	e8 63 2f 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00079e6:	83 c4 10             	add    esp,0x10
c00079e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00079ee:	eb d9                	jmp    c00079c9 <sbrk+0x6d>

c00079f0 <mmap>:
c00079f0:	83 ec 18             	sub    esp,0x18
c00079f3:	68 44 fb 01 c0       	push   0xc001fb44
c00079f8:	e8 3a 8e 00 00       	call   c0010837 <KePanic(char const*)>
c00079fd:	b8 00 00 00 00       	mov    eax,0x0
c0007a02:	83 c4 1c             	add    esp,0x1c
c0007a05:	c3                   	ret    

c0007a06 <munmap>:
c0007a06:	83 ec 18             	sub    esp,0x18
c0007a09:	68 49 fb 01 c0       	push   0xc001fb49
c0007a0e:	e8 24 8e 00 00       	call   c0010837 <KePanic(char const*)>
c0007a13:	b8 00 00 00 00       	mov    eax,0x0
c0007a18:	83 c4 1c             	add    esp,0x1c
c0007a1b:	c3                   	ret    

c0007a1c <liballoc_lock()>:
c0007a1c:	fa                   	cli    
c0007a1d:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	c3                   	ret    

c0007a2a <liballoc_unlock()>:
c0007a2a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a2f:	83 e8 01             	sub    eax,0x1
c0007a32:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a37:	75 01                	jne    c0007a3a <liballoc_unlock()+0x10>
c0007a39:	fb                   	sti    
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	c3                   	ret    

c0007a40 <liballoc_alloc(int)>:
c0007a40:	83 ec 10             	sub    esp,0x10
c0007a43:	6a 01                	push   0x1
c0007a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a49:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a4f:	e8 82 23 00 00       	call   c0009dd6 <VAS::allocatePages(int, int)>
c0007a54:	83 c4 1c             	add    esp,0x1c
c0007a57:	c3                   	ret    

c0007a58 <liballoc_free(void*, int)>:
c0007a58:	83 ec 14             	sub    esp,0x14
c0007a5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a5f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a65:	e8 ac 1f 00 00       	call   c0009a16 <VAS::freeAllocatedPages(unsigned long)>
c0007a6a:	b8 00 00 00 00       	mov    eax,0x0
c0007a6f:	83 c4 1c             	add    esp,0x1c
c0007a72:	c3                   	ret    

c0007a73 <realloc>:
c0007a73:	83 ec 14             	sub    esp,0x14
c0007a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a7e:	e8 7e 9b ff ff       	call   c0001601 <dlrealloc>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <malloc>:
c0007a87:	83 ec 18             	sub    esp,0x18
c0007a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a8e:	e8 31 96 ff ff       	call   c00010c4 <dlmalloc>
c0007a93:	83 c4 1c             	add    esp,0x1c
c0007a96:	c3                   	ret    

c0007a97 <free>:
c0007a97:	83 ec 18             	sub    esp,0x18
c0007a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a9e:	e8 c3 92 ff ff       	call   c0000d66 <dlfree>
c0007aa3:	83 c4 1c             	add    esp,0x1c
c0007aa6:	c3                   	ret    

c0007aa7 <rfree>:
c0007aa7:	83 ec 18             	sub    esp,0x18
c0007aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aae:	e8 b3 92 ff ff       	call   c0000d66 <dlfree>
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <calloc>:
c0007ab7:	56                   	push   esi
c0007ab8:	53                   	push   ebx
c0007ab9:	83 ec 10             	sub    esp,0x10
c0007abc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ac0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007ac5:	53                   	push   ebx
c0007ac6:	e8 bc ff ff ff       	call   c0007a87 <malloc>
c0007acb:	89 c6                	mov    esi,eax
c0007acd:	83 c4 0c             	add    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	6a 00                	push   0x0
c0007ad3:	50                   	push   eax
c0007ad4:	e8 07 8a ff ff       	call   c00004e0 <memset>
c0007ad9:	89 f0                	mov    eax,esi
c0007adb:	83 c4 14             	add    esp,0x14
c0007ade:	5b                   	pop    ebx
c0007adf:	5e                   	pop    esi
c0007ae0:	c3                   	ret    

c0007ae1 <KeEntryPoint>:
c0007ae1:	57                   	push   edi
c0007ae2:	bf f9 03 00 00       	mov    edi,0x3f9
c0007ae7:	56                   	push   esi
c0007ae8:	31 f6                	xor    esi,esi
c0007aea:	53                   	push   ebx
c0007aeb:	89 fa                	mov    edx,edi
c0007aed:	83 ec 2c             	sub    esp,0x2c
c0007af0:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007af5:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007afa:	89 f0                	mov    eax,esi
c0007afc:	ee                   	out    dx,al
c0007afd:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b02:	b0 80                	mov    al,0x80
c0007b04:	89 da                	mov    edx,ebx
c0007b06:	ee                   	out    dx,al
c0007b07:	b1 03                	mov    cl,0x3
c0007b09:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b0e:	88 c8                	mov    al,cl
c0007b10:	ee                   	out    dx,al
c0007b11:	89 f0                	mov    eax,esi
c0007b13:	89 fa                	mov    edx,edi
c0007b15:	ee                   	out    dx,al
c0007b16:	88 c8                	mov    al,cl
c0007b18:	89 da                	mov    edx,ebx
c0007b1a:	ee                   	out    dx,al
c0007b1b:	b0 c7                	mov    al,0xc7
c0007b1d:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b22:	ee                   	out    dx,al
c0007b23:	b0 0b                	mov    al,0xb
c0007b25:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b2a:	ee                   	out    dx,al
c0007b2b:	68 50 fb 01 c0       	push   0xc001fb50
c0007b30:	e8 14 2e 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0007b35:	e8 0b 86 00 00       	call   c0010145 <KeDisplaySplashScreen()>
c0007b3a:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b3f:	05 ff 0f 00 00       	add    eax,0xfff
c0007b44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4c:	e8 af 03 00 00       	call   c0007f00 <Phys::physicalMemorySetup(unsigned int)>
c0007b51:	e8 70 1c 00 00       	call   c00097c6 <Virt::virtualMemorySetup()>
c0007b56:	58                   	pop    eax
c0007b57:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b5b:	53                   	push   ebx
c0007b5c:	e8 37 1f 00 00       	call   c0009a98 <VAS::VAS()>
c0007b61:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b67:	e8 7e 6c 01 00       	call   c001e7ea <_init>
c0007b6c:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b73:	e8 0f ff ff ff       	call   c0007a87 <malloc>
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	89 c6                	mov    esi,eax
c0007b7d:	e8 4e f2 ff ff       	call   c0006dd0 <Computer::Computer()>
c0007b82:	6a 00                	push   0x0
c0007b84:	6a 00                	push   0x0
c0007b86:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007b8c:	6a 00                	push   0x0
c0007b8e:	56                   	push   esi
c0007b8f:	e8 02 f6 ff ff       	call   c0007196 <Computer::open(int, int, void*)>
c0007b94:	83 c4 14             	add    esp,0x14
c0007b97:	53                   	push   ebx
c0007b98:	e8 c5 1f 00 00       	call   c0009b62 <VAS::~VAS()>
c0007b9d:	83 c4 30             	add    esp,0x30
c0007ba0:	5b                   	pop    ebx
c0007ba1:	5e                   	pop    esi
c0007ba2:	5f                   	pop    edi
c0007ba3:	c3                   	ret    

c0007ba4 <Phys::allocateDMA(unsigned long)>:
c0007ba4:	55                   	push   ebp
c0007ba5:	31 ed                	xor    ebp,ebp
c0007ba7:	57                   	push   edi
c0007ba8:	56                   	push   esi
c0007ba9:	31 f6                	xor    esi,esi
c0007bab:	53                   	push   ebx
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	83 ec 1c             	sub    esp,0x1c
c0007bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bb5:	05 ff 0f 00 00       	add    eax,0xfff
c0007bba:	c1 e8 0c             	shr    eax,0xc
c0007bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc1:	31 c0                	xor    eax,eax
c0007bc3:	eb 1b                	jmp    c0007be0 <Phys::allocateDMA(unsigned long)+0x3c>
c0007bc5:	8d 78 01             	lea    edi,[eax+0x1]
c0007bc8:	85 c0                	test   eax,eax
c0007bca:	0f 44 eb             	cmove  ebp,ebx
c0007bcd:	0f 44 f3             	cmove  esi,ebx
c0007bd0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007bd4:	74 37                	je     c0007c0d <Phys::allocateDMA(unsigned long)+0x69>
c0007bd6:	89 f8                	mov    eax,edi
c0007bd8:	83 c3 01             	add    ebx,0x1
c0007bdb:	83 fb 0f             	cmp    ebx,0xf
c0007bde:	7f 13                	jg     c0007bf3 <Phys::allocateDMA(unsigned long)+0x4f>
c0007be0:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007be7:	74 dc                	je     c0007bc5 <Phys::allocateDMA(unsigned long)+0x21>
c0007be9:	31 c0                	xor    eax,eax
c0007beb:	83 c3 01             	add    ebx,0x1
c0007bee:	83 fb 0f             	cmp    ebx,0xf
c0007bf1:	7e ed                	jle    c0007be0 <Phys::allocateDMA(unsigned long)+0x3c>
c0007bf3:	83 ec 0c             	sub    esp,0xc
c0007bf6:	68 68 fb 01 c0       	push   0xc001fb68
c0007bfb:	e8 37 8c 00 00       	call   c0010837 <KePanic(char const*)>
c0007c00:	83 c4 10             	add    esp,0x10
c0007c03:	31 c0                	xor    eax,eax
c0007c05:	83 c4 1c             	add    esp,0x1c
c0007c08:	5b                   	pop    ebx
c0007c09:	5e                   	pop    esi
c0007c0a:	5f                   	pop    edi
c0007c0b:	5d                   	pop    ebp
c0007c0c:	c3                   	ret    
c0007c0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c11:	89 f2                	mov    edx,esi
c0007c13:	c1 fa 04             	sar    edx,0x4
c0007c16:	01 f1                	add    ecx,esi
c0007c18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c1c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c1f:	83 e9 01             	sub    ecx,0x1
c0007c22:	0f 48 ca             	cmovs  ecx,edx
c0007c25:	c1 f9 04             	sar    ecx,0x4
c0007c28:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c2c:	74 06                	je     c0007c34 <Phys::allocateDMA(unsigned long)+0x90>
c0007c2e:	89 eb                	mov    ebx,ebp
c0007c30:	31 c0                	xor    eax,eax
c0007c32:	eb b7                	jmp    c0007beb <Phys::allocateDMA(unsigned long)+0x47>
c0007c34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c38:	85 d2                	test   edx,edx
c0007c3a:	74 17                	je     c0007c53 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c3c:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c42:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c49:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c4c:	83 c2 01             	add    edx,0x1
c0007c4f:	39 d0                	cmp    eax,edx
c0007c51:	75 f6                	jne    c0007c49 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c53:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c5d:	01 c2                	add    edx,eax
c0007c5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007c63:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007c69:	85 c9                	test   ecx,ecx
c0007c6b:	74 17                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0xe0>
c0007c6d:	83 ec 0c             	sub    esp,0xc
c0007c70:	68 68 fb 01 c0       	push   0xc001fb68
c0007c75:	e8 bd 8b 00 00       	call   c0010837 <KePanic(char const*)>
c0007c7a:	83 c4 10             	add    esp,0x10
c0007c7d:	89 f8                	mov    eax,edi
c0007c7f:	e9 54 ff ff ff       	jmp    c0007bd8 <Phys::allocateDMA(unsigned long)+0x34>
c0007c84:	c1 e6 0c             	shl    esi,0xc
c0007c87:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007c8d:	e9 73 ff ff ff       	jmp    c0007c05 <Phys::allocateDMA(unsigned long)+0x61>

c0007c92 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c96:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c9c:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ca1:	c1 ea 0c             	shr    edx,0xc
c0007ca4:	29 d0                	sub    eax,edx
c0007ca6:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007caf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cb4:	c1 e8 0c             	shr    eax,0xc
c0007cb7:	85 d2                	test   edx,edx
c0007cb9:	74 11                	je     c0007ccc <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cbb:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007cc0:	01 c2                	add    edx,eax
c0007cc2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cc5:	83 c0 01             	add    eax,0x1
c0007cc8:	39 d0                	cmp    eax,edx
c0007cca:	75 f6                	jne    c0007cc2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ccc:	c3                   	ret    

c0007ccd <Phys::setPageState(unsigned long, bool)>:
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	8b 35 10 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e10
c0007cd5:	53                   	push   ebx
c0007cd6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ce3:	89 ca                	mov    edx,ecx
c0007ce5:	83 e1 07             	and    ecx,0x7
c0007ce8:	c1 ea 03             	shr    edx,0x3
c0007ceb:	01 d6                	add    esi,edx
c0007ced:	d3 c3                	rol    ebx,cl
c0007cef:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007cf2:	21 fb                	and    ebx,edi
c0007cf4:	88 1e                	mov    BYTE PTR [esi],bl
c0007cf6:	8b 1d 10 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e10
c0007cfc:	01 da                	add    edx,ebx
c0007cfe:	0f b6 c0             	movzx  eax,al
c0007d01:	d3 e0                	shl    eax,cl
c0007d03:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d05:	09 c8                	or     eax,ecx
c0007d07:	88 02                	mov    BYTE PTR [edx],al
c0007d09:	5b                   	pop    ebx
c0007d0a:	5e                   	pop    esi
c0007d0b:	5f                   	pop    edi
c0007d0c:	c3                   	ret    

c0007d0d <Phys::getPageState(unsigned long)>:
c0007d0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d11:	8b 15 10 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e10
c0007d17:	89 c8                	mov    eax,ecx
c0007d19:	83 e1 07             	and    ecx,0x7
c0007d1c:	c1 e8 03             	shr    eax,0x3
c0007d1f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d23:	d3 f8                	sar    eax,cl
c0007d25:	83 e0 01             	and    eax,0x1
c0007d28:	c3                   	ret    

c0007d29 <Phys::freePage(unsigned long)>:
c0007d29:	53                   	push   ebx
c0007d2a:	83 ec 08             	sub    esp,0x8
c0007d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d31:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d3d:	76 41                	jbe    c0007d80 <Phys::freePage(unsigned long)+0x57>
c0007d3f:	c1 e8 0c             	shr    eax,0xc
c0007d42:	50                   	push   eax
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	e8 c3 ff ff ff       	call   c0007d0d <Phys::getPageState(unsigned long)>
c0007d4a:	5a                   	pop    edx
c0007d4b:	84 c0                	test   al,al
c0007d4d:	74 20                	je     c0007d6f <Phys::freePage(unsigned long)+0x46>
c0007d4f:	83 ec 08             	sub    esp,0x8
c0007d52:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d57:	83 e8 01             	sub    eax,0x1
c0007d5a:	6a 00                	push   0x0
c0007d5c:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d61:	53                   	push   ebx
c0007d62:	e8 66 ff ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0007d67:	83 c4 10             	add    esp,0x10
c0007d6a:	83 c4 08             	add    esp,0x8
c0007d6d:	5b                   	pop    ebx
c0007d6e:	c3                   	ret    
c0007d6f:	c7 44 24 10 0d fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc0d
c0007d77:	83 c4 08             	add    esp,0x8
c0007d7a:	5b                   	pop    ebx
c0007d7b:	e9 b7 8a 00 00       	jmp    c0010837 <KePanic(char const*)>
c0007d80:	68 00 10 00 00       	push   0x1000
c0007d85:	50                   	push   eax
c0007d86:	e8 07 ff ff ff       	call   c0007c92 <Phys::freeDMA(unsigned long, unsigned long)>
c0007d8b:	59                   	pop    ecx
c0007d8c:	5b                   	pop    ebx
c0007d8d:	83 c4 08             	add    esp,0x8
c0007d90:	5b                   	pop    ebx
c0007d91:	c3                   	ret    

c0007d92 <Phys::allocatePage()>:
c0007d92:	56                   	push   esi
c0007d93:	53                   	push   ebx
c0007d94:	83 ec 14             	sub    esp,0x14
c0007d97:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007d9d:	89 f3                	mov    ebx,esi
c0007d9f:	eb 0a                	jmp    c0007dab <Phys::allocatePage()+0x19>
c0007da1:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007da7:	39 de                	cmp    esi,ebx
c0007da9:	74 26                	je     c0007dd1 <Phys::allocatePage()+0x3f>
c0007dab:	53                   	push   ebx
c0007dac:	e8 5c ff ff ff       	call   c0007d0d <Phys::getPageState(unsigned long)>
c0007db1:	5a                   	pop    edx
c0007db2:	84 c0                	test   al,al
c0007db4:	74 67                	je     c0007e1d <Phys::allocatePage()+0x8b>
c0007db6:	83 c3 01             	add    ebx,0x1
c0007db9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dbf:	75 e0                	jne    c0007da1 <Phys::allocatePage()+0xf>
c0007dc1:	31 db                	xor    ebx,ebx
c0007dc3:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dcd:	39 de                	cmp    esi,ebx
c0007dcf:	75 da                	jne    c0007dab <Phys::allocatePage()+0x19>
c0007dd1:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dd6:	83 ec 0c             	sub    esp,0xc
c0007dd9:	83 f0 01             	xor    eax,0x1
c0007ddc:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007de1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007de6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007de9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007def:	50                   	push   eax
c0007df0:	e8 27 28 00 00       	call   c000a61c <VAS::scanForEviction()>
c0007df5:	83 c4 10             	add    esp,0x10
c0007df8:	85 c0                	test   eax,eax
c0007dfa:	75 48                	jne    c0007e44 <Phys::allocatePage()+0xb2>
c0007dfc:	83 ec 0c             	sub    esp,0xc
c0007dff:	68 90 fb 01 c0       	push   0xc001fb90
c0007e04:	e8 2e 8a 00 00       	call   c0010837 <KePanic(char const*)>
c0007e09:	83 c4 10             	add    esp,0x10
c0007e0c:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e12:	53                   	push   ebx
c0007e13:	e8 f5 fe ff ff       	call   c0007d0d <Phys::getPageState(unsigned long)>
c0007e18:	5a                   	pop    edx
c0007e19:	84 c0                	test   al,al
c0007e1b:	75 99                	jne    c0007db6 <Phys::allocatePage()+0x24>
c0007e1d:	6a 01                	push   0x1
c0007e1f:	53                   	push   ebx
c0007e20:	e8 a8 fe ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0007e25:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e2b:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e30:	83 c2 01             	add    edx,0x1
c0007e33:	59                   	pop    ecx
c0007e34:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e3a:	5b                   	pop    ebx
c0007e3b:	c1 e0 0c             	shl    eax,0xc
c0007e3e:	83 c4 14             	add    esp,0x14
c0007e41:	5b                   	pop    ebx
c0007e42:	5e                   	pop    esi
c0007e43:	c3                   	ret    
c0007e44:	83 ec 08             	sub    esp,0x8
c0007e47:	89 c2                	mov    edx,eax
c0007e49:	c1 ea 0c             	shr    edx,0xc
c0007e4c:	6a 01                	push   0x1
c0007e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e52:	52                   	push   edx
c0007e53:	e8 75 fe ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0007e58:	83 c4 10             	add    esp,0x10
c0007e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e5f:	eb dd                	jmp    c0007e3e <Phys::allocatePage()+0xac>

c0007e61 <Phys::allocateContiguousPages(int)>:
c0007e61:	57                   	push   edi
c0007e62:	56                   	push   esi
c0007e63:	53                   	push   ebx
c0007e64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e68:	fa                   	cli    
c0007e69:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e6e:	31 db                	xor    ebx,ebx
c0007e70:	83 c0 01             	add    eax,0x1
c0007e73:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e78:	85 db                	test   ebx,ebx
c0007e7a:	75 11                	jne    c0007e8d <Phys::allocateContiguousPages(int)+0x2c>
c0007e7c:	e8 11 ff ff ff       	call   c0007d92 <Phys::allocatePage()>
c0007e81:	83 fe 01             	cmp    esi,0x1
c0007e84:	89 c7                	mov    edi,eax
c0007e86:	74 21                	je     c0007ea9 <Phys::allocateContiguousPages(int)+0x48>
c0007e88:	bb 01 00 00 00       	mov    ebx,0x1
c0007e8d:	e8 00 ff ff ff       	call   c0007d92 <Phys::allocatePage()>
c0007e92:	89 da                	mov    edx,ebx
c0007e94:	c1 e2 0c             	shl    edx,0xc
c0007e97:	01 fa                	add    edx,edi
c0007e99:	39 c2                	cmp    edx,eax
c0007e9b:	74 22                	je     c0007ebf <Phys::allocateContiguousPages(int)+0x5e>
c0007e9d:	bb 01 00 00 00       	mov    ebx,0x1
c0007ea2:	89 c7                	mov    edi,eax
c0007ea4:	83 fe 01             	cmp    esi,0x1
c0007ea7:	75 e4                	jne    c0007e8d <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eae:	83 e8 01             	sub    eax,0x1
c0007eb1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007eb6:	75 01                	jne    c0007eb9 <Phys::allocateContiguousPages(int)+0x58>
c0007eb8:	fb                   	sti    
c0007eb9:	5b                   	pop    ebx
c0007eba:	89 f8                	mov    eax,edi
c0007ebc:	5e                   	pop    esi
c0007ebd:	5f                   	pop    edi
c0007ebe:	c3                   	ret    
c0007ebf:	83 c3 01             	add    ebx,0x1
c0007ec2:	39 f3                	cmp    ebx,esi
c0007ec4:	75 b2                	jne    c0007e78 <Phys::allocateContiguousPages(int)+0x17>
c0007ec6:	eb e1                	jmp    c0007ea9 <Phys::allocateContiguousPages(int)+0x48>

c0007ec8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ec8:	56                   	push   esi
c0007ec9:	53                   	push   ebx
c0007eca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007ece:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ed4:	73 06                	jae    c0007edc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ed6:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007edc:	c1 eb 0c             	shr    ebx,0xc
c0007edf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ee3:	c1 e8 0c             	shr    eax,0xc
c0007ee6:	39 d8                	cmp    eax,ebx
c0007ee8:	73 13                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007eea:	6a 00                	push   0x0
c0007eec:	8d 70 01             	lea    esi,[eax+0x1]
c0007eef:	50                   	push   eax
c0007ef0:	e8 d8 fd ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0007ef5:	5a                   	pop    edx
c0007ef6:	89 f0                	mov    eax,esi
c0007ef8:	59                   	pop    ecx
c0007ef9:	39 f3                	cmp    ebx,esi
c0007efb:	75 ed                	jne    c0007eea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007efd:	5b                   	pop    ebx
c0007efe:	5e                   	pop    esi
c0007eff:	c3                   	ret    

c0007f00 <Phys::physicalMemorySetup(unsigned int)>:
c0007f00:	55                   	push   ebp
c0007f01:	57                   	push   edi
c0007f02:	56                   	push   esi
c0007f03:	53                   	push   ebx
c0007f04:	31 db                	xor    ebx,ebx
c0007f06:	83 ec 40             	sub    esp,0x40
c0007f09:	6a 10                	push   0x10
c0007f0b:	6a 00                	push   0x0
c0007f0d:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f12:	e8 c9 85 ff ff       	call   c00004e0 <memset>
c0007f17:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f20:	05 00 10 00 00       	add    eax,0x1000
c0007f25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f29:	5a                   	pop    edx
c0007f2a:	59                   	pop    ecx
c0007f2b:	50                   	push   eax
c0007f2c:	68 23 fc 01 c0       	push   0xc001fc23
c0007f31:	e8 13 2a 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0007f36:	83 c4 10             	add    esp,0x10
c0007f39:	83 ec 08             	sub    esp,0x8
c0007f3c:	6a 01                	push   0x1
c0007f3e:	53                   	push   ebx
c0007f3f:	83 c3 01             	add    ebx,0x1
c0007f42:	e8 86 fd ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0007f47:	83 c4 10             	add    esp,0x10
c0007f4a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f50:	75 e7                	jne    c0007f39 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f52:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f5d:	85 c0                	test   eax,eax
c0007f5f:	0f 84 61 01 00 00    	je     c00080c6 <Phys::physicalMemorySetup(unsigned int)+0x1c6>
c0007f65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f71:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f7a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007f82:	e9 80 00 00 00       	jmp    c0008007 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0007f87:	ba 00 00 08 00       	mov    edx,0x80000
c0007f8c:	89 c1                	mov    ecx,eax
c0007f8e:	39 f2                	cmp    edx,esi
c0007f90:	19 f9                	sbb    ecx,edi
c0007f92:	0f 82 c2 00 00 00    	jb     c000805a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0007f98:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007f9b:	89 c5                	mov    ebp,eax
c0007f9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007fa1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007fa4:	19 cd                	sbb    ebp,ecx
c0007fa6:	0f 83 b3 00 00 00    	jae    c000805f <Phys::physicalMemorySetup(unsigned int)+0x15f>
c0007fac:	89 d6                	mov    esi,edx
c0007fae:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fb3:	39 f2                	cmp    edx,esi
c0007fb5:	89 cf                	mov    edi,ecx
c0007fb7:	19 c8                	sbb    eax,ecx
c0007fb9:	73 07                	jae    c0007fc2 <Phys::physicalMemorySetup(unsigned int)+0xc2>
c0007fbb:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fc0:	31 ff                	xor    edi,edi
c0007fc2:	89 f2                	mov    edx,esi
c0007fc4:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fc9:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007fcf:	89 f9                	mov    ecx,edi
c0007fd1:	83 d1 ff             	adc    ecx,0xffffffff
c0007fd4:	39 d0                	cmp    eax,edx
c0007fd6:	b8 00 00 00 00       	mov    eax,0x0
c0007fdb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fdf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0007fe3:	19 c8                	sbb    eax,ecx
c0007fe5:	0f 82 ad 01 00 00    	jb     c0008198 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0007feb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0007fef:	83 c3 18             	add    ebx,0x18
c0007ff2:	83 c6 01             	add    esi,0x1
c0007ff5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0007ff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ffd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008001:	0f 84 cf 00 00 00    	je     c00080d6 <Phys::physicalMemorySetup(unsigned int)+0x1d6>
c0008007:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008009:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000800c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000800f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008013:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008016:	01 f0                	add    eax,esi
c0008018:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000801b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000801f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008023:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0008027:	11 fa                	adc    edx,edi
c0008029:	55                   	push   ebp
c000802a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000802e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008036:	50                   	push   eax
c0008037:	56                   	push   esi
c0008038:	68 c0 fb 01 c0       	push   0xc001fbc0
c000803d:	e8 07 29 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	83 c4 10             	add    esp,0x10
c0008049:	09 f8                	or     eax,edi
c000804b:	0f 85 85 00 00 00    	jne    c00080d6 <Phys::physicalMemorySetup(unsigned int)+0x1d6>
c0008051:	83 fd 01             	cmp    ebp,0x1
c0008054:	0f 84 2d ff ff ff    	je     c0007f87 <Phys::physicalMemorySetup(unsigned int)+0x87>
c000805a:	83 fd 01             	cmp    ebp,0x1
c000805d:	75 8c                	jne    c0007feb <Phys::physicalMemorySetup(unsigned int)+0xeb>
c000805f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008062:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000806a:	39 c8                	cmp    eax,ecx
c000806c:	89 d0                	mov    eax,edx
c000806e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008072:	0f 82 73 ff ff ff    	jb     c0007feb <Phys::physicalMemorySetup(unsigned int)+0xeb>
c0008078:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000807d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008081:	39 d0                	cmp    eax,edx
c0008083:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008087:	b8 00 00 00 00       	mov    eax,0x0
c000808c:	19 c8                	sbb    eax,ecx
c000808e:	0f 83 57 ff ff ff    	jae    c0007feb <Phys::physicalMemorySetup(unsigned int)+0xeb>
c0008094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008098:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809c:	39 c6                	cmp    esi,eax
c000809e:	19 d7                	sbb    edi,edx
c00080a0:	0f 83 fe 00 00 00    	jae    c00081a4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00080a6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00080a9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00080ad:	29 c7                	sub    edi,eax
c00080af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00080b3:	19 d5                	sbb    ebp,edx
c00080b5:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c00080b9:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
c00080bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00080c1:	e9 de 00 00 00       	jmp    c00081a4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00080c6:	83 ec 0c             	sub    esp,0xc
c00080c9:	68 3b fc 01 c0       	push   0xc001fc3b
c00080ce:	e8 64 87 00 00       	call   c0010837 <KePanic(char const*)>
c00080d3:	83 c4 10             	add    esp,0x10
c00080d6:	83 ec 08             	sub    esp,0x8
c00080d9:	bb 60 00 00 00       	mov    ebx,0x60
c00080de:	6a 00                	push   0x0
c00080e0:	6a 06                	push   0x6
c00080e2:	e8 e6 fb ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c00080e7:	58                   	pop    eax
c00080e8:	5a                   	pop    edx
c00080e9:	6a 00                	push   0x0
c00080eb:	6a 07                	push   0x7
c00080ed:	e8 db fb ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c00080f2:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00080f8:	83 c4 10             	add    esp,0x10
c00080fb:	83 c1 02             	add    ecx,0x2
c00080fe:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008104:	83 ec 08             	sub    esp,0x8
c0008107:	6a 00                	push   0x0
c0008109:	53                   	push   ebx
c000810a:	83 c3 01             	add    ebx,0x1
c000810d:	e8 bb fb ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0008112:	83 c4 10             	add    esp,0x10
c0008115:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000811b:	75 e7                	jne    c0008104 <Phys::physicalMemorySetup(unsigned int)+0x204>
c000811d:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008122:	bb 40 01 00 00       	mov    ebx,0x140
c0008127:	83 c0 20             	add    eax,0x20
c000812a:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000812f:	eb 26                	jmp    c0008157 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008131:	83 ec 08             	sub    esp,0x8
c0008134:	6a 00                	push   0x0
c0008136:	53                   	push   ebx
c0008137:	e8 91 fb ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c000813c:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008141:	83 c3 01             	add    ebx,0x1
c0008144:	83 c0 01             	add    eax,0x1
c0008147:	83 c4 10             	add    esp,0x10
c000814a:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000814f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008155:	74 07                	je     c000815e <Phys::physicalMemorySetup(unsigned int)+0x25e>
c0008157:	3d ff 03 00 00       	cmp    eax,0x3ff
c000815c:	7e d3                	jle    c0008131 <Phys::physicalMemorySetup(unsigned int)+0x231>
c000815e:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008163:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008168:	7f 26                	jg     c0008190 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000816a:	83 ec 08             	sub    esp,0x8
c000816d:	6a 00                	push   0x0
c000816f:	53                   	push   ebx
c0008170:	e8 58 fb ff ff       	call   c0007ccd <Phys::setPageState(unsigned long, bool)>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	83 c3 01             	add    ebx,0x1
c000817d:	83 c0 01             	add    eax,0x1
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008188:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000818e:	75 d3                	jne    c0008163 <Phys::physicalMemorySetup(unsigned int)+0x263>
c0008190:	83 c4 3c             	add    esp,0x3c
c0008193:	5b                   	pop    ebx
c0008194:	5e                   	pop    esi
c0008195:	5f                   	pop    edi
c0008196:	5d                   	pop    ebp
c0008197:	c3                   	ret    
c0008198:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c000819c:	c7 44 24 18 00 00 08 00 	mov    DWORD PTR [esp+0x18],0x80000
c00081a4:	83 ec 04             	sub    esp,0x4
c00081a7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00081ab:	56                   	push   esi
c00081ac:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00081b0:	57                   	push   edi
c00081b1:	68 e4 fb 01 c0       	push   0xc001fbe4
c00081b6:	e8 8e 27 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00081bb:	5d                   	pop    ebp
c00081bc:	58                   	pop    eax
c00081bd:	56                   	push   esi
c00081be:	57                   	push   edi
c00081bf:	e8 04 fd ff ff       	call   c0007ec8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081c4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cc:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c00081d2:	83 c4 0c             	add    esp,0xc
c00081d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081d9:	01 f0                	add    eax,esi
c00081db:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00081e7:	52                   	push   edx
c00081e8:	50                   	push   eax
c00081e9:	68 49 fc 01 c0       	push   0xc001fc49
c00081ee:	e8 56 27 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	e9 f0 fd ff ff       	jmp    c0007feb <Phys::physicalMemorySetup(unsigned int)+0xeb>
c00081fb:	90                   	nop

c00081fc <Pipe::isAtty()>:
c00081fc:	31 c0                	xor    eax,eax
c00081fe:	c3                   	ret    
c00081ff:	90                   	nop

c0008200 <Pipe::~Pipe()>:
c0008200:	83 ec 0c             	sub    esp,0xc
c0008203:	ba a8 fc 01 c0       	mov    edx,0xc001fca8
c0008208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000820c:	89 10                	mov    DWORD PTR [eax],edx
c000820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	50                   	push   eax
c0008216:	e8 65 11 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c000821b:	83 c4 10             	add    esp,0x10
c000821e:	90                   	nop
c000821f:	83 c4 0c             	add    esp,0xc
c0008222:	c3                   	ret    
c0008223:	90                   	nop

c0008224 <Pipe::~Pipe()>:
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	83 ec 0c             	sub    esp,0xc
c000822a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000822e:	e8 cd ff ff ff       	call   c0008200 <Pipe::~Pipe()>
c0008233:	83 c4 10             	add    esp,0x10
c0008236:	83 ec 08             	sub    esp,0x8
c0008239:	6a 20                	push   0x20
c000823b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823f:	e8 09 26 00 00       	call   c000a84d <operator delete(void*, unsigned long)>
c0008244:	83 c4 10             	add    esp,0x10
c0008247:	83 c4 0c             	add    esp,0xc
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <Pipe::write(unsigned long long, void*, int*)>:
c000824c:	55                   	push   ebp
c000824d:	57                   	push   edi
c000824e:	56                   	push   esi
c000824f:	53                   	push   ebx
c0008250:	83 ec 1c             	sub    esp,0x1c
c0008253:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008257:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000825b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000825f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008263:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008266:	89 04 24             	mov    DWORD PTR [esp],eax
c0008269:	89 d6                	mov    esi,edx
c000826b:	89 d7                	mov    edi,edx
c000826d:	c1 ff 1f             	sar    edi,0x1f
c0008270:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008273:	03 34 24             	add    esi,DWORD PTR [esp]
c0008276:	89 d8                	mov    eax,ebx
c0008278:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000827c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008280:	c1 f8 1f             	sar    eax,0x1f
c0008283:	39 f3                	cmp    ebx,esi
c0008285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008289:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000828d:	19 f8                	sbb    eax,edi
c000828f:	b8 01 00 00 00       	mov    eax,0x1
c0008294:	72 6e                	jb     c0008304 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008296:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008299:	01 d0                	add    eax,edx
c000829b:	99                   	cdq    
c000829c:	f7 fb                	idiv   ebx
c000829e:	29 d3                	sub    ebx,edx
c00082a0:	89 d7                	mov    edi,edx
c00082a2:	89 de                	mov    esi,ebx
c00082a4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082a7:	c1 fb 1f             	sar    ebx,0x1f
c00082aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ae:	39 f2                	cmp    edx,esi
c00082b0:	19 d8                	sbb    eax,ebx
c00082b2:	b8 00 00 00 00       	mov    eax,0x0
c00082b7:	72 04                	jb     c00082bd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082b9:	89 d0                	mov    eax,edx
c00082bb:	29 f0                	sub    eax,esi
c00082bd:	89 d3                	mov    ebx,edx
c00082bf:	29 c3                	sub    ebx,eax
c00082c1:	74 0b                	je     c00082ce <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082c3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082c6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ca:	89 d9                	mov    ecx,ebx
c00082cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ce:	85 c0                	test   eax,eax
c00082d0:	74 0d                	je     c00082df <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082d2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082d6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082d9:	89 de                	mov    esi,ebx
c00082db:	89 c1                	mov    ecx,eax
c00082dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082df:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082e2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082e7:	75 10                	jne    c00082f9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082e9:	83 ec 0c             	sub    esp,0xc
c00082ec:	68 65 fc 01 c0       	push   0xc001fc65
c00082f1:	e8 41 85 00 00       	call   c0010837 <KePanic(char const*)>
c00082f6:	83 c4 10             	add    esp,0x10
c00082f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008300:	89 08                	mov    DWORD PTR [eax],ecx
c0008302:	31 c0                	xor    eax,eax
c0008304:	83 c4 1c             	add    esp,0x1c
c0008307:	5b                   	pop    ebx
c0008308:	5e                   	pop    esi
c0008309:	5f                   	pop    edi
c000830a:	5d                   	pop    ebp
c000830b:	c3                   	ret    

c000830c <Pipe::read(unsigned long long, void*, int*)>:
c000830c:	55                   	push   ebp
c000830d:	57                   	push   edi
c000830e:	56                   	push   esi
c000830f:	53                   	push   ebx
c0008310:	83 ec 1c             	sub    esp,0x1c
c0008313:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008317:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000831b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000831f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008322:	89 c8                	mov    eax,ecx
c0008324:	99                   	cdq    
c0008325:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008329:	74 24                	je     c000834f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000832b:	39 f9                	cmp    ecx,edi
c000832d:	89 d1                	mov    ecx,edx
c000832f:	19 f1                	sbb    ecx,esi
c0008331:	73 1c                	jae    c000834f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008333:	fa                   	cli    
c0008334:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000833a:	e8 01 cd 00 00       	call   c0015040 <schedule()>
c000833f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008344:	48                   	dec    eax
c0008345:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000834a:	75 d3                	jne    c000831f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000834c:	fb                   	sti    
c000834d:	eb d0                	jmp    c000831f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000834f:	39 f8                	cmp    eax,edi
c0008351:	89 d1                	mov    ecx,edx
c0008353:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008357:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000835b:	19 f1                	sbb    ecx,esi
c000835d:	73 08                	jae    c0008367 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000835f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008363:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008367:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000836a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000836d:	29 f7                	sub    edi,esi
c000836f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0008373:	89 f8                	mov    eax,edi
c0008375:	99                   	cdq    
c0008376:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000837a:	89 d0                	mov    eax,edx
c000837c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008380:	19 c2                	sbb    edx,eax
c0008382:	89 f8                	mov    eax,edi
c0008384:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0008389:	89 ea                	mov    edx,ebp
c000838b:	29 c2                	sub    edx,eax
c000838d:	85 c0                	test   eax,eax
c000838f:	74 0b                	je     c000839c <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008391:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008398:	89 c1                	mov    ecx,eax
c000839a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000839c:	85 d2                	test   edx,edx
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083a0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083a4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083a7:	89 c7                	mov    edi,eax
c00083a9:	89 d1                	mov    ecx,edx
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083b0:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083b3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083b6:	99                   	cdq    
c00083b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083bb:	89 f7                	mov    edi,esi
c00083bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083c1:	c1 ff 1f             	sar    edi,0x1f
c00083c4:	57                   	push   edi
c00083c5:	56                   	push   esi
c00083c6:	52                   	push   edx
c00083c7:	50                   	push   eax
c00083c8:	e8 03 63 01 00       	call   c001e6d0 <__umoddi3>
c00083cd:	83 c4 10             	add    esp,0x10
c00083d0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083d3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083d8:	75 10                	jne    c00083ea <Pipe::read(unsigned long long, void*, int*)+0xde>
c00083da:	83 ec 0c             	sub    esp,0xc
c00083dd:	68 82 fc 01 c0       	push   0xc001fc82
c00083e2:	e8 50 84 00 00       	call   c0010837 <KePanic(char const*)>
c00083e7:	83 c4 10             	add    esp,0x10
c00083ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00083ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083f2:	89 10                	mov    DWORD PTR [eax],edx
c00083f4:	83 c4 1c             	add    esp,0x1c
c00083f7:	31 c0                	xor    eax,eax
c00083f9:	5b                   	pop    ebx
c00083fa:	5e                   	pop    esi
c00083fb:	5f                   	pop    edi
c00083fc:	5d                   	pop    ebp
c00083fd:	c3                   	ret    

c00083fe <Pipe::Pipe(int)>:
c00083fe:	83 ec 0c             	sub    esp,0xc
c0008401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008405:	83 ec 08             	sub    esp,0x8
c0008408:	6a 00                	push   0x0
c000840a:	50                   	push   eax
c000840b:	e8 8a 0d 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008410:	83 c4 10             	add    esp,0x10
c0008413:	ba a8 fc 01 c0       	mov    edx,0xc001fca8
c0008418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008426:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000843f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008443:	83 ec 0c             	sub    esp,0xc
c0008446:	50                   	push   eax
c0008447:	e8 3b f6 ff ff       	call   c0007a87 <malloc>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c2                	mov    edx,eax
c0008451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008455:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008460:	90                   	nop
c0008461:	83 c4 0c             	add    esp,0xc
c0008464:	c3                   	ret    
c0008465:	90                   	nop

c0008466 <VgaText::isAtty()>:
c0008466:	b0 01                	mov    al,0x1
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <VgaText::~VgaText()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c0008472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008476:	89 10                	mov    DWORD PTR [eax],edx
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	83 ec 0c             	sub    esp,0xc
c000847f:	50                   	push   eax
c0008480:	e8 fb 0e 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	90                   	nop
c0008489:	83 c4 0c             	add    esp,0xc
c000848c:	c3                   	ret    
c000848d:	90                   	nop

c000848e <VgaText::~VgaText()>:
c000848e:	83 ec 0c             	sub    esp,0xc
c0008491:	83 ec 0c             	sub    esp,0xc
c0008494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008498:	e8 cd ff ff ff       	call   c000846a <VgaText::~VgaText()>
c000849d:	83 c4 10             	add    esp,0x10
c00084a0:	83 ec 08             	sub    esp,0x8
c00084a3:	68 84 01 00 00       	push   0x184
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 9c 23 00 00       	call   c000a84d <operator delete(void*, unsigned long)>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 c4 0c             	add    esp,0xc
c00084b7:	c3                   	ret    

c00084b8 <VgaText::read(unsigned long long, void*, int*)>:
c00084b8:	83 ec 10             	sub    esp,0x10
c00084bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c7:	e8 96 47 00 00       	call   c000cc62 <readKeyboard(VgaText*, char*, unsigned long)>
c00084cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d0:	89 02                	mov    DWORD PTR [edx],eax
c00084d2:	31 c0                	xor    eax,eax
c00084d4:	83 c4 1c             	add    esp,0x1c
c00084d7:	c3                   	ret    

c00084d8 <setTerminalScrollLock(bool)>:
c00084d8:	c3                   	ret    

c00084d9 <doTerminalCycle()>:
c00084d9:	c3                   	ret    

c00084da <addToTerminalCycle(VgaText*)>:
c00084da:	c3                   	ret    

c00084db <scrollTerminalScrollLock(int)>:
c00084db:	c3                   	ret    

c00084dc <VgaText::updateTitle()>:
c00084dc:	c3                   	ret    
c00084dd:	90                   	nop

c00084de <VgaText::load()>:
c00084de:	c3                   	ret    
c00084df:	90                   	nop

c00084e0 <VgaText::updateCursor()>:
c00084e0:	83 ec 14             	sub    esp,0x14
c00084e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084ea:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084ed:	e8 66 f8 00 00       	call   c0017d58 <HalConsoleCursorUpdate(int, int)>
c00084f2:	83 c4 1c             	add    esp,0x1c
c00084f5:	c3                   	ret    

c00084f6 <VgaText::doANSI_SGR(int)>:
c00084f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084fe:	85 d2                	test   edx,edx
c0008500:	75 0b                	jne    c000850d <VgaText::doANSI_SGR(int)+0x17>
c0008502:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008505:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008508:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000850b:	eb 59                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c000850d:	83 fa 07             	cmp    edx,0x7
c0008510:	75 0b                	jne    c000851d <VgaText::doANSI_SGR(int)+0x27>
c0008512:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008515:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008518:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000851b:	eb 49                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c000851d:	83 fa 1b             	cmp    edx,0x1b
c0008520:	74 e0                	je     c0008502 <VgaText::doANSI_SGR(int)+0xc>
c0008522:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008525:	83 f9 07             	cmp    ecx,0x7
c0008528:	77 09                	ja     c0008533 <VgaText::doANSI_SGR(int)+0x3d>
c000852a:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c0008531:	eb 20                	jmp    c0008553 <VgaText::doANSI_SGR(int)+0x5d>
c0008533:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008536:	83 f9 07             	cmp    ecx,0x7
c0008539:	77 09                	ja     c0008544 <VgaText::doANSI_SGR(int)+0x4e>
c000853b:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c0008542:	eb 22                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c0008544:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008547:	83 f9 07             	cmp    ecx,0x7
c000854a:	77 0b                	ja     c0008557 <VgaText::doANSI_SGR(int)+0x61>
c000854c:	8b 14 95 f8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde308]
c0008553:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008556:	c3                   	ret    
c0008557:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000855a:	83 f9 07             	cmp    ecx,0x7
c000855d:	77 0a                	ja     c0008569 <VgaText::doANSI_SGR(int)+0x73>
c000855f:	8b 14 95 d0 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde330]
c0008566:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008569:	c3                   	ret    

c000856a <VgaText::setDefaultBgColour(VgaColour)>:
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008572:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008575:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008578:	c3                   	ret    
c0008579:	90                   	nop

c000857a <VgaText::setDefaultFgColour(VgaColour)>:
c000857a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000857e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008582:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008588:	c3                   	ret    
c0008589:	90                   	nop

c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000858a:	53                   	push   ebx
c000858b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000858f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008593:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008597:	51                   	push   ecx
c0008598:	e8 cd ff ff ff       	call   c000856a <VgaText::setDefaultBgColour(VgaColour)>
c000859d:	58                   	pop    eax
c000859e:	5a                   	pop    edx
c000859f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085a7:	5b                   	pop    ebx
c00085a8:	eb d0                	jmp    c000857a <VgaText::setDefaultFgColour(VgaColour)>

c00085aa <VgaText::setTitleTextColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085b5:	c3                   	ret    

c00085b6 <VgaText::setTitleColour(VgaColour)>:
c00085b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085c1:	c3                   	ret    

c00085c2 <VgaText::setTitle(char*)>:
c00085c2:	c3                   	ret    
c00085c3:	90                   	nop

c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085c9:	c1 e2 04             	shl    edx,0x4
c00085cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d0:	83 e0 0f             	and    eax,0xf
c00085d3:	09 d0                	or     eax,edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::scrollScreen()>:
c00085d6:	55                   	push   ebp
c00085d7:	57                   	push   edi
c00085d8:	56                   	push   esi
c00085d9:	be 01 00 00 00       	mov    esi,0x1
c00085de:	53                   	push   ebx
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085e6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085e9:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00085ef:	31 ff                	xor    edi,edi
c00085f1:	01 e9                	add    ecx,ebp
c00085f3:	8a 01                	mov    al,BYTE PTR [ecx]
c00085f5:	83 fe 18             	cmp    esi,0x18
c00085f8:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00085fe:	75 20                	jne    c0008620 <VgaText::scrollScreen()+0x4a>
c0008600:	f7 c7 01 00 00 00    	test   edi,0x1
c0008606:	74 15                	je     c000861d <VgaText::scrollScreen()+0x47>
c0008608:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000860c:	50                   	push   eax
c000860d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008611:	50                   	push   eax
c0008612:	e8 ad ff ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c0008617:	5a                   	pop    edx
c0008618:	5a                   	pop    edx
c0008619:	88 01                	mov    BYTE PTR [ecx],al
c000861b:	eb 03                	jmp    c0008620 <VgaText::scrollScreen()+0x4a>
c000861d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008620:	47                   	inc    edi
c0008621:	41                   	inc    ecx
c0008622:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008628:	75 c9                	jne    c00085f3 <VgaText::scrollScreen()+0x1d>
c000862a:	46                   	inc    esi
c000862b:	83 fe 19             	cmp    esi,0x19
c000862e:	75 b9                	jne    c00085e9 <VgaText::scrollScreen()+0x13>
c0008630:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008636:	75 1f                	jne    c0008657 <VgaText::scrollScreen()+0x81>
c0008638:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000863c:	74 05                	je     c0008643 <VgaText::scrollScreen()+0x6d>
c000863e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008641:	eb 14                	jmp    c0008657 <VgaText::scrollScreen()+0x81>
c0008643:	50                   	push   eax
c0008644:	50                   	push   eax
c0008645:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008649:	50                   	push   eax
c000864a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000864e:	50                   	push   eax
c000864f:	e8 98 f5 00 00       	call   c0017bec <HalConsoleScroll(int, int)>
c0008654:	83 c4 10             	add    esp,0x10
c0008657:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000865b:	83 c4 0c             	add    esp,0xc
c000865e:	5b                   	pop    ebx
c000865f:	5e                   	pop    esi
c0008660:	5f                   	pop    edi
c0008661:	5d                   	pop    ebp
c0008662:	e9 79 fe ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c0008667:	90                   	nop

c0008668 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008668:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000866d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008672:	c1 e0 08             	shl    eax,0x8
c0008675:	09 d0                	or     eax,edx
c0008677:	c3                   	ret    

c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008678:	55                   	push   ebp
c0008679:	57                   	push   edi
c000867a:	56                   	push   esi
c000867b:	53                   	push   ebx
c000867c:	83 ec 1c             	sub    esp,0x1c
c000867f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008683:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000868b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000868f:	0f b6 c3             	movzx  eax,bl
c0008692:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008696:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000869a:	50                   	push   eax
c000869b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086a0:	50                   	push   eax
c00086a1:	e8 1e ff ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c00086a6:	5a                   	pop    edx
c00086a7:	59                   	pop    ecx
c00086a8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ad:	0f b6 c0             	movzx  eax,al
c00086b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086b4:	50                   	push   eax
c00086b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086b9:	e8 aa ff ff ff       	call   c0008668 <VgaText::combineCharAndColour(char, unsigned char)>
c00086be:	5a                   	pop    edx
c00086bf:	6b d7 50             	imul   edx,edi,0x50
c00086c2:	01 f2                	add    edx,esi
c00086c4:	59                   	pop    ecx
c00086c5:	0f b7 d2             	movzx  edx,dx
c00086c8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086cb:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086cf:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086d5:	75 28                	jne    c00086ff <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086db:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086e7:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086eb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00086f3:	83 c4 1c             	add    esp,0x1c
c00086f6:	5b                   	pop    ebx
c00086f7:	5e                   	pop    esi
c00086f8:	5f                   	pop    edi
c00086f9:	5d                   	pop    ebp
c00086fa:	e9 f5 f5 00 00       	jmp    c0017cf4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00086ff:	83 c4 1c             	add    esp,0x1c
c0008702:	5b                   	pop    ebx
c0008703:	5e                   	pop    esi
c0008704:	5f                   	pop    edi
c0008705:	5d                   	pop    ebp
c0008706:	c3                   	ret    
c0008707:	90                   	nop

c0008708 <VgaText::getCursorX()>:
c0008708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000870c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000870f:	c3                   	ret    

c0008710 <VgaText::getCursorY()>:
c0008710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008717:	c3                   	ret    

c0008718 <VgaText::setCursor(int, int)>:
c0008718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000871c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008720:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008727:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000872a:	e9 b1 fd ff ff       	jmp    c00084e0 <VgaText::updateCursor()>

c000872f <setActiveTerminal(VgaText*)>:
c000872f:	53                   	push   ebx
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008737:	85 db                	test   ebx,ebx
c0008739:	75 11                	jne    c000874c <setActiveTerminal(VgaText*)+0x1d>
c000873b:	c7 44 24 10 bc fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcbc
c0008743:	83 c4 08             	add    esp,0x8
c0008746:	5b                   	pop    ebx
c0008747:	e9 eb 80 00 00       	jmp    c0010837 <KePanic(char const*)>
c000874c:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008751:	85 c0                	test   eax,eax
c0008753:	74 0c                	je     c0008761 <setActiveTerminal(VgaText*)+0x32>
c0008755:	83 ec 0c             	sub    esp,0xc
c0008758:	50                   	push   eax
c0008759:	e8 82 fd ff ff       	call   c00084e0 <VgaText::updateCursor()>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	50                   	push   eax
c0008762:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008768:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000876b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000876e:	53                   	push   ebx
c000876f:	e8 a4 ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c0008774:	83 c4 18             	add    esp,0x18
c0008777:	5b                   	pop    ebx
c0008778:	c3                   	ret    
c0008779:	90                   	nop

c000877a <VgaText::clearScreen()>:
c000877a:	57                   	push   edi
c000877b:	56                   	push   esi
c000877c:	31 f6                	xor    esi,esi
c000877e:	53                   	push   ebx
c000877f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008783:	52                   	push   edx
c0008784:	6a 00                	push   0x0
c0008786:	6a 00                	push   0x0
c0008788:	53                   	push   ebx
c0008789:	e8 8a ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c000878e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008795:	83 c4 10             	add    esp,0x10
c0008798:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000879b:	7e 20                	jle    c00087bd <VgaText::clearScreen()+0x43>
c000879d:	31 ff                	xor    edi,edi
c000879f:	50                   	push   eax
c00087a0:	50                   	push   eax
c00087a1:	56                   	push   esi
c00087a2:	57                   	push   edi
c00087a3:	47                   	inc    edi
c00087a4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087aa:	6a 20                	push   0x20
c00087ac:	53                   	push   ebx
c00087ad:	e8 c6 fe ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087b2:	83 c4 20             	add    esp,0x20
c00087b5:	83 ff 50             	cmp    edi,0x50
c00087b8:	75 e5                	jne    c000879f <VgaText::clearScreen()+0x25>
c00087ba:	46                   	inc    esi
c00087bb:	eb db                	jmp    c0008798 <VgaText::clearScreen()+0x1e>
c00087bd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087c4:	5b                   	pop    ebx
c00087c5:	5e                   	pop    esi
c00087c6:	5f                   	pop    edi
c00087c7:	c3                   	ret    

c00087c8 <VgaText::setCursorX(int)>:
c00087c8:	83 ec 10             	sub    esp,0x10
c00087cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087cf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087d6:	50                   	push   eax
c00087d7:	e8 3c ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00087dc:	83 c4 1c             	add    esp,0x1c
c00087df:	c3                   	ret    

c00087e0 <VgaText::setCursorY(int)>:
c00087e0:	83 ec 10             	sub    esp,0x10
c00087e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087eb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00087ee:	50                   	push   eax
c00087ef:	e8 24 ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00087f4:	83 c4 1c             	add    esp,0x1c
c00087f7:	c3                   	ret    

c00087f8 <VgaText::incrementCursor(bool)>:
c00087f8:	56                   	push   esi
c00087f9:	53                   	push   ebx
c00087fa:	51                   	push   ecx
c00087fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008803:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008806:	40                   	inc    eax
c0008807:	83 f8 50             	cmp    eax,0x50
c000880a:	74 05                	je     c0008811 <VgaText::incrementCursor(bool)+0x19>
c000880c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000880f:	eb 24                	jmp    c0008835 <VgaText::incrementCursor(bool)+0x3d>
c0008811:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008814:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000881b:	8d 50 01             	lea    edx,[eax+0x1]
c000881e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008821:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008824:	75 0f                	jne    c0008835 <VgaText::incrementCursor(bool)+0x3d>
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000882c:	53                   	push   ebx
c000882d:	e8 a4 fd ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	89 f0                	mov    eax,esi
c0008837:	84 c0                	test   al,al
c0008839:	74 0c                	je     c0008847 <VgaText::incrementCursor(bool)+0x4f>
c000883b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000883f:	5a                   	pop    edx
c0008840:	5b                   	pop    ebx
c0008841:	5e                   	pop    esi
c0008842:	e9 99 fc ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c0008847:	58                   	pop    eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	c3                   	ret    
c000884b:	90                   	nop

c000884c <VgaText::decrementCursor(bool)>:
c000884c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008854:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008857:	85 c0                	test   eax,eax
c0008859:	74 04                	je     c000885f <VgaText::decrementCursor(bool)+0x13>
c000885b:	48                   	dec    eax
c000885c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000885f:	84 c9                	test   cl,cl
c0008861:	74 09                	je     c000886c <VgaText::decrementCursor(bool)+0x20>
c0008863:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008867:	e9 74 fc ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000886e:	53                   	push   ebx
c000886f:	83 ec 08             	sub    esp,0x8
c0008872:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000887b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000887f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008883:	83 f8 07             	cmp    eax,0x7
c0008886:	75 21                	jne    c00088a9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008890:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008898:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088a0:	83 c4 08             	add    esp,0x8
c00088a3:	5b                   	pop    ebx
c00088a4:	e9 fa 2e 00 00       	jmp    c000b7a3 <Krnl::beep(int, int, bool)>
c00088a9:	83 f8 0d             	cmp    eax,0xd
c00088ac:	75 09                	jne    c00088b7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b5:	eb 2d                	jmp    c00088e4 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088b7:	83 f8 0a             	cmp    eax,0xa
c00088ba:	75 31                	jne    c00088ed <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c6:	8d 50 01             	lea    edx,[eax+0x1]
c00088c9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088cc:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088cf:	75 0f                	jne    c00088e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088d1:	83 ec 0c             	sub    esp,0xc
c00088d4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d7:	53                   	push   ebx
c00088d8:	e8 f9 fc ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c00088dd:	83 c4 10             	add    esp,0x10
c00088e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088e4:	83 c4 08             	add    esp,0x8
c00088e7:	5b                   	pop    ebx
c00088e8:	e9 f3 fb ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c00088ed:	83 f8 08             	cmp    eax,0x8
c00088f0:	75 25                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00088f2:	50                   	push   eax
c00088f3:	50                   	push   eax
c00088f4:	6a 01                	push   0x1
c00088f6:	53                   	push   ebx
c00088f7:	e8 50 ff ff ff       	call   c000884c <VgaText::decrementCursor(bool)>
c00088fc:	5a                   	pop    edx
c00088fd:	59                   	pop    ecx
c00088fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008901:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008904:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008907:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000890a:	6a 20                	push   0x20
c000890c:	53                   	push   ebx
c000890d:	e8 66 fd ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008912:	83 c4 28             	add    esp,0x28
c0008915:	5b                   	pop    ebx
c0008916:	c3                   	ret    
c0008917:	83 ec 08             	sub    esp,0x8
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	51                   	push   ecx
c0008921:	52                   	push   edx
c0008922:	50                   	push   eax
c0008923:	53                   	push   ebx
c0008924:	e8 4f fd ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008929:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000892d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008935:	83 c4 28             	add    esp,0x28
c0008938:	5b                   	pop    ebx
c0008939:	e9 ba fe ff ff       	jmp    c00087f8 <VgaText::incrementCursor(bool)>

c000893e <VgaText::putchar(char)>:
c000893e:	57                   	push   edi
c000893f:	56                   	push   esi
c0008940:	53                   	push   ebx
c0008941:	83 ec 10             	sub    esp,0x10
c0008944:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000894c:	89 f8                	mov    eax,edi
c000894e:	0f be c0             	movsx  eax,al
c0008951:	83 f8 5b             	cmp    eax,0x5b
c0008954:	75 18                	jne    c000896e <VgaText::putchar(char)+0x30>
c0008956:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000895a:	74 20                	je     c000897c <VgaText::putchar(char)+0x3e>
c000895c:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008962:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008969:	e9 c1 00 00 00       	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c000896e:	83 f8 1b             	cmp    eax,0x1b
c0008971:	75 09                	jne    c000897c <VgaText::putchar(char)+0x3e>
c0008973:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008977:	e9 b3 00 00 00       	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c000897c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000897f:	84 c9                	test   cl,cl
c0008981:	0f 84 98 00 00 00    	je     c0008a1f <VgaText::putchar(char)+0xe1>
c0008987:	8d 77 c0             	lea    esi,[edi-0x40]
c000898a:	89 f2                	mov    edx,esi
c000898c:	80 fa 3e             	cmp    dl,0x3e
c000898f:	77 78                	ja     c0008a09 <VgaText::putchar(char)+0xcb>
c0008991:	83 f8 6d             	cmp    eax,0x6d
c0008994:	75 47                	jne    c00089dd <VgaText::putchar(char)+0x9f>
c0008996:	31 f6                	xor    esi,esi
c0008998:	31 d2                	xor    edx,edx
c000899a:	31 c0                	xor    eax,eax
c000899c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000899f:	7e 2d                	jle    c00089ce <VgaText::putchar(char)+0x90>
c00089a1:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089a6:	83 fa 3b             	cmp    edx,0x3b
c00089a9:	75 17                	jne    c00089c2 <VgaText::putchar(char)+0x84>
c00089ab:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089af:	50                   	push   eax
c00089b0:	53                   	push   ebx
c00089b1:	e8 40 fb ff ff       	call   c00084f6 <VgaText::doANSI_SGR(int)>
c00089b6:	59                   	pop    ecx
c00089b7:	31 d2                	xor    edx,edx
c00089b9:	5f                   	pop    edi
c00089ba:	31 c0                	xor    eax,eax
c00089bc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089c0:	eb 09                	jmp    c00089cb <VgaText::putchar(char)+0x8d>
c00089c2:	6b c0 0a             	imul   eax,eax,0xa
c00089c5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089c9:	88 ca                	mov    dl,cl
c00089cb:	46                   	inc    esi
c00089cc:	eb ce                	jmp    c000899c <VgaText::putchar(char)+0x5e>
c00089ce:	84 d2                	test   dl,dl
c00089d0:	74 2f                	je     c0008a01 <VgaText::putchar(char)+0xc3>
c00089d2:	50                   	push   eax
c00089d3:	53                   	push   ebx
c00089d4:	e8 1d fb ff ff       	call   c00084f6 <VgaText::doANSI_SGR(int)>
c00089d9:	58                   	pop    eax
c00089da:	5a                   	pop    edx
c00089db:	eb 24                	jmp    c0008a01 <VgaText::putchar(char)+0xc3>
c00089dd:	83 f8 4a             	cmp    eax,0x4a
c00089e0:	75 1f                	jne    c0008a01 <VgaText::putchar(char)+0xc3>
c00089e2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089e6:	75 19                	jne    c0008a01 <VgaText::putchar(char)+0xc3>
c00089e8:	83 ec 0c             	sub    esp,0xc
c00089eb:	53                   	push   ebx
c00089ec:	e8 89 fd ff ff       	call   c000877a <VgaText::clearScreen()>
c00089f1:	83 c4 0c             	add    esp,0xc
c00089f4:	6a 00                	push   0x0
c00089f6:	6a 00                	push   0x0
c00089f8:	53                   	push   ebx
c00089f9:	e8 1a fd ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00089fe:	83 c4 10             	add    esp,0x10
c0008a01:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a07:	eb 26                	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c0008a09:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a0c:	83 f8 0e             	cmp    eax,0xe
c0008a0f:	7f 1e                	jg     c0008a2f <VgaText::putchar(char)+0xf1>
c0008a11:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a14:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a17:	89 f9                	mov    ecx,edi
c0008a19:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a1d:	eb 10                	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c0008a1f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a22:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a25:	50                   	push   eax
c0008a26:	53                   	push   ebx
c0008a27:	e8 42 fe ff ff       	call   c000886e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a2c:	83 c4 10             	add    esp,0x10
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	5b                   	pop    ebx
c0008a33:	5e                   	pop    esi
c0008a34:	5f                   	pop    edi
c0008a35:	c3                   	ret    

c0008a36 <VgaText::putx(unsigned int)>:
c0008a36:	57                   	push   edi
c0008a37:	b9 11 00 00 00       	mov    ecx,0x11
c0008a3c:	56                   	push   esi
c0008a3d:	be ca fc 01 c0       	mov    esi,0xc001fcca
c0008a42:	53                   	push   ebx
c0008a43:	83 ec 20             	sub    esp,0x20
c0008a46:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a4a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a4e:	fc                   	cld    
c0008a4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a51:	be 08 00 00 00       	mov    esi,0x8
c0008a56:	50                   	push   eax
c0008a57:	50                   	push   eax
c0008a58:	89 d8                	mov    eax,ebx
c0008a5a:	c1 e8 1c             	shr    eax,0x1c
c0008a5d:	c1 e3 04             	shl    ebx,0x4
c0008a60:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a65:	50                   	push   eax
c0008a66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a6a:	e8 cf fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	4e                   	dec    esi
c0008a73:	75 e1                	jne    c0008a56 <VgaText::putx(unsigned int)+0x20>
c0008a75:	83 c4 20             	add    esp,0x20
c0008a78:	5b                   	pop    ebx
c0008a79:	5e                   	pop    esi
c0008a7a:	5f                   	pop    edi
c0008a7b:	c3                   	ret    

c0008a7c <VgaText::puts(char const*)>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 08             	sub    esp,0x8
c0008a80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a84:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a87:	85 c0                	test   eax,eax
c0008a89:	74 12                	je     c0008a9d <VgaText::puts(char const*)+0x21>
c0008a8b:	51                   	push   ecx
c0008a8c:	43                   	inc    ebx
c0008a8d:	51                   	push   ecx
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a93:	e8 a6 fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008a98:	83 c4 10             	add    esp,0x10
c0008a9b:	eb e7                	jmp    c0008a84 <VgaText::puts(char const*)+0x8>
c0008a9d:	83 c4 08             	add    esp,0x8
c0008aa0:	5b                   	pop    ebx
c0008aa1:	c3                   	ret    

c0008aa2 <VgaText::write(unsigned long long, void*, int*)>:
c0008aa2:	55                   	push   ebp
c0008aa3:	57                   	push   edi
c0008aa4:	56                   	push   esi
c0008aa5:	53                   	push   ebx
c0008aa6:	83 ec 0c             	sub    esp,0xc
c0008aa9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008aad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ab1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ab5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008abc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008abf:	39 eb                	cmp    ebx,ebp
c0008ac1:	74 13                	je     c0008ad6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ac3:	50                   	push   eax
c0008ac4:	43                   	inc    ebx
c0008ac5:	50                   	push   eax
c0008ac6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008aca:	50                   	push   eax
c0008acb:	56                   	push   esi
c0008acc:	e8 6d fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008ad1:	83 c4 10             	add    esp,0x10
c0008ad4:	eb e9                	jmp    c0008abf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008ad6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ada:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008ae1:	89 38                	mov    DWORD PTR [eax],edi
c0008ae3:	83 c4 0c             	add    esp,0xc
c0008ae6:	31 c0                	xor    eax,eax
c0008ae8:	5b                   	pop    ebx
c0008ae9:	5e                   	pop    esi
c0008aea:	5f                   	pop    edi
c0008aeb:	5d                   	pop    ebp
c0008aec:	c3                   	ret    
c0008aed:	90                   	nop

c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008aee:	55                   	push   ebp
c0008aef:	57                   	push   edi
c0008af0:	56                   	push   esi
c0008af1:	53                   	push   ebx
c0008af2:	83 ec 0c             	sub    esp,0xc
c0008af5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008af9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008afe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b05:	50                   	push   eax
c0008b06:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b0b:	50                   	push   eax
c0008b0c:	e8 b3 fa ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b11:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b15:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b18:	5a                   	pop    edx
c0008b19:	0f b7 f6             	movzx  esi,si
c0008b1c:	01 f6                	add    esi,esi
c0008b1e:	59                   	pop    ecx
c0008b1f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b22:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b26:	0f b6 e8             	movzx  ebp,al
c0008b29:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b2c:	85 c0                	test   eax,eax
c0008b2e:	0f 84 ef 00 00 00    	je     c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b34:	83 f8 0d             	cmp    eax,0xd
c0008b37:	75 0c                	jne    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b39:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b40:	e9 d8 00 00 00       	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b45:	83 f8 0a             	cmp    eax,0xa
c0008b48:	75 44                	jne    c0008b8e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b57:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b5a:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b5d:	75 0f                	jne    c0008b6e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b5f:	83 ec 0c             	sub    esp,0xc
c0008b62:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b65:	53                   	push   ebx
c0008b66:	e8 6b fa ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c0008b6b:	83 c4 10             	add    esp,0x10
c0008b6e:	83 ec 0c             	sub    esp,0xc
c0008b71:	53                   	push   ebx
c0008b72:	e8 69 f9 ff ff       	call   c00084e0 <VgaText::updateCursor()>
c0008b77:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b7b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b7e:	83 c4 10             	add    esp,0x10
c0008b81:	0f b7 f6             	movzx  esi,si
c0008b84:	01 f6                	add    esi,esi
c0008b86:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b89:	e9 8f 00 00 00       	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b8e:	83 f8 08             	cmp    eax,0x8
c0008b91:	75 34                	jne    c0008bc7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008b93:	51                   	push   ecx
c0008b94:	51                   	push   ecx
c0008b95:	6a 01                	push   0x1
c0008b97:	53                   	push   ebx
c0008b98:	e8 af fc ff ff       	call   c000884c <VgaText::decrementCursor(bool)>
c0008b9d:	5e                   	pop    esi
c0008b9e:	58                   	pop    eax
c0008b9f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ba2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ba5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ba8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bab:	6a 20                	push   0x20
c0008bad:	53                   	push   ebx
c0008bae:	e8 c5 fa ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bb3:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bb7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bba:	83 c4 20             	add    esp,0x20
c0008bbd:	0f b7 f6             	movzx  esi,si
c0008bc0:	01 f6                	add    esi,esi
c0008bc2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bc5:	eb 56                	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bc7:	52                   	push   edx
c0008bc8:	52                   	push   edx
c0008bc9:	55                   	push   ebp
c0008bca:	50                   	push   eax
c0008bcb:	e8 98 fa ff ff       	call   c0008668 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bd0:	66 89 06             	mov    WORD PTR [esi],ax
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bdc:	75 1d                	jne    c0008bfb <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bde:	83 ec 0c             	sub    esp,0xc
c0008be1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008be4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008be7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008beb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bef:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008bf2:	50                   	push   eax
c0008bf3:	e8 fc f0 00 00       	call   c0017cf4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008bf8:	83 c4 20             	add    esp,0x20
c0008bfb:	50                   	push   eax
c0008bfc:	83 c6 02             	add    esi,0x2
c0008bff:	50                   	push   eax
c0008c00:	6a 00                	push   0x0
c0008c02:	53                   	push   ebx
c0008c03:	e8 f0 fb ff ff       	call   c00087f8 <VgaText::incrementCursor(bool)>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c0f:	75 0c                	jne    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c11:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c15:	0f b7 f6             	movzx  esi,si
c0008c18:	01 f6                	add    esi,esi
c0008c1a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c1d:	47                   	inc    edi
c0008c1e:	e9 06 ff ff ff       	jmp    c0008b29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c23:	83 ec 0c             	sub    esp,0xc
c0008c26:	53                   	push   ebx
c0008c27:	e8 b4 f8 ff ff       	call   c00084e0 <VgaText::updateCursor()>
c0008c2c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c33:	83 c4 1c             	add    esp,0x1c
c0008c36:	5b                   	pop    ebx
c0008c37:	5e                   	pop    esi
c0008c38:	5f                   	pop    edi
c0008c39:	5d                   	pop    ebp
c0008c3a:	c3                   	ret    
c0008c3b:	90                   	nop

c0008c3c <VgaText::VgaText(char const*)>:
c0008c3c:	56                   	push   esi
c0008c3d:	53                   	push   ebx
c0008c3e:	83 ec 04             	sub    esp,0x4
c0008c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	6a 00                	push   0x0
c0008c4a:	50                   	push   eax
c0008c4b:	e8 4a 05 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008c50:	83 c4 10             	add    esp,0x10
c0008c53:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c0008c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5c:	89 10                	mov    DWORD PTR [eax],edx
c0008c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c62:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c80:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c88:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cbb:	83 ec 0c             	sub    esp,0xc
c0008cbe:	6a 01                	push   0x1
c0008cc0:	e8 24 09 00 00       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	89 c2                	mov    edx,eax
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cd1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cde:	89 c6                	mov    esi,eax
c0008ce0:	e8 ad f0 ff ff       	call   c0007d92 <Phys::allocatePage()>
c0008ce5:	68 05 0c 00 00       	push   0xc05
c0008cea:	56                   	push   esi
c0008ceb:	50                   	push   eax
c0008cec:	53                   	push   ebx
c0008ced:	e8 de 0f 00 00       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfc:	83 ec 04             	sub    esp,0x4
c0008cff:	68 a0 0f 00 00       	push   0xfa0
c0008d04:	6a 00                	push   0x0
c0008d06:	50                   	push   eax
c0008d07:	e8 d4 77 ff ff       	call   c00004e0 <memset>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	83 ec 04             	sub    esp,0x4
c0008d12:	6a 00                	push   0x0
c0008d14:	6a 07                	push   0x7
c0008d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d1a:	e8 6b f8 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	83 ec 04             	sub    esp,0x4
c0008d25:	6a 00                	push   0x0
c0008d27:	6a 00                	push   0x0
c0008d29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2d:	e8 e6 f9 ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	83 ec 0c             	sub    esp,0xc
c0008d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d3c:	e8 39 fa ff ff       	call   c000877a <VgaText::clearScreen()>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d48:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d50:	05 82 00 00 00       	add    eax,0x82
c0008d55:	83 ec 04             	sub    esp,0x4
c0008d58:	68 80 00 00 00       	push   0x80
c0008d5d:	6a 00                	push   0x0
c0008d5f:	50                   	push   eax
c0008d60:	e8 7b 77 ff ff       	call   c00004e0 <memset>
c0008d65:	83 c4 10             	add    esp,0x10
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 02 01 00 00       	add    eax,0x102
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 5f 77 ff ff       	call   c00004e0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	90                   	nop
c0008d85:	83 c4 04             	add    esp,0x4
c0008d88:	5b                   	pop    ebx
c0008d89:	5e                   	pop    esi
c0008d8a:	c3                   	ret    
c0008d8b:	90                   	nop

c0008d8c <VgaText::receiveKey(unsigned char)>:
c0008d8c:	55                   	push   ebp
c0008d8d:	57                   	push   edi
c0008d8e:	56                   	push   esi
c0008d8f:	53                   	push   ebx
c0008d90:	83 ec 2c             	sub    esp,0x2c
c0008d93:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008d97:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008d9b:	89 fd                	mov    ebp,edi
c0008d9d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008da3:	0f 84 48 01 00 00    	je     c0008ef1 <VgaText::receiveKey(unsigned char)+0x165>
c0008da9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008daf:	83 fd 08             	cmp    ebp,0x8
c0008db2:	75 6a                	jne    c0008e1e <VgaText::receiveKey(unsigned char)+0x92>
c0008db4:	83 ec 0c             	sub    esp,0xc
c0008db7:	56                   	push   esi
c0008db8:	e8 a3 77 ff ff       	call   c0000560 <strlen>
c0008dbd:	83 c4 10             	add    esp,0x10
c0008dc0:	85 c0                	test   eax,eax
c0008dc2:	0f 84 ef 00 00 00    	je     c0008eb7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008dc8:	50                   	push   eax
c0008dc9:	50                   	push   eax
c0008dca:	6a 08                	push   0x8
c0008dcc:	53                   	push   ebx
c0008dcd:	e8 6c fb ff ff       	call   c000893e <VgaText::putchar(char)>
c0008dd2:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dd5:	e8 86 77 ff ff       	call   c0000560 <strlen>
c0008dda:	83 c4 10             	add    esp,0x10
c0008ddd:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008de5:	89 d0                	mov    eax,edx
c0008de7:	83 fa 1f             	cmp    edx,0x1f
c0008dea:	7f 1c                	jg     c0008e08 <VgaText::receiveKey(unsigned char)+0x7c>
c0008dec:	83 e8 08             	sub    eax,0x8
c0008def:	3c 02                	cmp    al,0x2
c0008df1:	76 15                	jbe    c0008e08 <VgaText::receiveKey(unsigned char)+0x7c>
c0008df3:	83 fa 0d             	cmp    edx,0xd
c0008df6:	74 10                	je     c0008e08 <VgaText::receiveKey(unsigned char)+0x7c>
c0008df8:	57                   	push   edi
c0008df9:	57                   	push   edi
c0008dfa:	68 db fc 01 c0       	push   0xc001fcdb
c0008dff:	53                   	push   ebx
c0008e00:	e8 77 fc ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0008e05:	83 c4 10             	add    esp,0x10
c0008e08:	83 ec 0c             	sub    esp,0xc
c0008e0b:	56                   	push   esi
c0008e0c:	e8 4f 77 ff ff       	call   c0000560 <strlen>
c0008e11:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e19:	e9 96 00 00 00       	jmp    c0008eb4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e1e:	83 ec 0c             	sub    esp,0xc
c0008e21:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e27:	50                   	push   eax
c0008e28:	e8 33 77 ff ff       	call   c0000560 <strlen>
c0008e2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e34:	e8 27 77 ff ff       	call   c0000560 <strlen>
c0008e39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e3d:	83 c4 10             	add    esp,0x10
c0008e40:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e44:	3d 80 00 00 00       	cmp    eax,0x80
c0008e49:	0f 87 a2 00 00 00    	ja     c0008ef1 <VgaText::receiveKey(unsigned char)+0x165>
c0008e4f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e52:	3c 1e                	cmp    al,0x1e
c0008e54:	77 35                	ja     c0008e8b <VgaText::receiveKey(unsigned char)+0xff>
c0008e56:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e59:	3c 01                	cmp    al,0x1
c0008e5b:	76 2e                	jbe    c0008e8b <VgaText::receiveKey(unsigned char)+0xff>
c0008e5d:	83 fd 0d             	cmp    ebp,0xd
c0008e60:	74 29                	je     c0008e8b <VgaText::receiveKey(unsigned char)+0xff>
c0008e62:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e65:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e68:	68 e1 fc 01 c0       	push   0xc001fce1
c0008e6d:	53                   	push   ebx
c0008e6e:	e8 7b fc ff ff       	call   c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e73:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e76:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e79:	8d 47 40             	lea    eax,[edi+0x40]
c0008e7c:	0f b6 c0             	movzx  eax,al
c0008e7f:	50                   	push   eax
c0008e80:	53                   	push   ebx
c0008e81:	e8 e8 f9 ff ff       	call   c000886e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e86:	83 c4 20             	add    esp,0x20
c0008e89:	eb 11                	jmp    c0008e9c <VgaText::receiveKey(unsigned char)+0x110>
c0008e8b:	89 f8                	mov    eax,edi
c0008e8d:	51                   	push   ecx
c0008e8e:	51                   	push   ecx
c0008e8f:	0f be c0             	movsx  eax,al
c0008e92:	50                   	push   eax
c0008e93:	53                   	push   ebx
c0008e94:	e8 a5 fa ff ff       	call   c000893e <VgaText::putchar(char)>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	89 f8                	mov    eax,edi
c0008e9e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ea3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ea7:	52                   	push   edx
c0008ea8:	52                   	push   edx
c0008ea9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ead:	50                   	push   eax
c0008eae:	56                   	push   esi
c0008eaf:	e8 7c 79 ff ff       	call   c0000830 <strcat>
c0008eb4:	83 c4 10             	add    esp,0x10
c0008eb7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ebe:	75 0f                	jne    c0008ecf <VgaText::receiveKey(unsigned char)+0x143>
c0008ec0:	83 fd 1c             	cmp    ebp,0x1c
c0008ec3:	77 2c                	ja     c0008ef1 <VgaText::receiveKey(unsigned char)+0x165>
c0008ec5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008eca:	0f a3 e8             	bt     eax,ebp
c0008ecd:	73 22                	jae    c0008ef1 <VgaText::receiveKey(unsigned char)+0x165>
c0008ecf:	50                   	push   eax
c0008ed0:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ed6:	50                   	push   eax
c0008ed7:	56                   	push   esi
c0008ed8:	53                   	push   ebx
c0008ed9:	e8 52 79 ff ff       	call   c0000830 <strcat>
c0008ede:	83 c4 0c             	add    esp,0xc
c0008ee1:	68 80 00 00 00       	push   0x80
c0008ee6:	6a 00                	push   0x0
c0008ee8:	56                   	push   esi
c0008ee9:	e8 f2 75 ff ff       	call   c00004e0 <memset>
c0008eee:	83 c4 10             	add    esp,0x10
c0008ef1:	83 c4 2c             	add    esp,0x2c
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	5f                   	pop    edi
c0008ef7:	5d                   	pop    ebp
c0008ef8:	c3                   	ret    
c0008ef9:	90                   	nop

c0008efa <VgaText::doUpdate()>:
c0008efa:	c3                   	ret    

c0008efb <newTerminal(char*)>:
c0008efb:	83 ec 28             	sub    esp,0x28
c0008efe:	68 84 01 00 00       	push   0x184
c0008f03:	e8 7f eb ff ff       	call   c0007a87 <malloc>
c0008f08:	5a                   	pop    edx
c0008f09:	59                   	pop    ecx
c0008f0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f0e:	50                   	push   eax
c0008f0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f13:	e8 24 fd ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0008f18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f1c:	83 c4 2c             	add    esp,0x2c
c0008f1f:	c3                   	ret    

c0008f20 <TSS::TSS()>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f2b:	90                   	nop
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop
c0008f2e:	66 90                	xchg   ax,ax

c0008f30 <TSS::setESP(unsigned long)>:
c0008f30:	55                   	push   ebp
c0008f31:	89 e5                	mov    ebp,esp
c0008f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3f:	90                   	nop
c0008f40:	5d                   	pop    ebp
c0008f41:	c3                   	ret    
c0008f42:	66 90                	xchg   ax,ax

c0008f44 <TSS::flush()>:
c0008f44:	55                   	push   ebp
c0008f45:	89 e5                	mov    ebp,esp
c0008f47:	83 ec 10             	sub    esp,0x10
c0008f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f4f:	83 c8 03             	or     eax,0x3
c0008f52:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f56:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f5a:	66 89 d0             	mov    ax,dx
c0008f5d:	0f 00 d8             	ltr    ax
c0008f60:	90                   	nop
c0008f61:	c9                   	leave  
c0008f62:	c3                   	ret    
c0008f63:	90                   	nop

c0008f64 <TSS::setup(unsigned long, unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	83 ec 18             	sub    esp,0x18
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	6a 68                	push   0x68
c0008f6f:	e8 13 eb ff ff       	call   c0007a87 <malloc>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	89 c2                	mov    edx,eax
c0008f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f85:	83 ec 04             	sub    esp,0x4
c0008f88:	6a 68                	push   0x68
c0008f8a:	6a 00                	push   0x0
c0008f8c:	50                   	push   eax
c0008f8d:	e8 4e 75 ff ff       	call   c00004e0 <memset>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000900a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009016:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902c:	0f 20 da             	mov    edx,cr3
c000902f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009032:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009035:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903e:	83 ec 08             	sub    esp,0x8
c0009041:	50                   	push   eax
c0009042:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009045:	50                   	push   eax
c0009046:	e8 ad e2 ff ff       	call   c00072f8 <GDTEntry::setBase(unsigned int)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	83 ec 08             	sub    esp,0x8
c0009051:	6a 68                	push   0x68
c0009053:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009056:	50                   	push   eax
c0009057:	e8 b8 e2 ff ff       	call   c0007314 <GDTEntry::setLimit(unsigned int)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009063:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009066:	83 e0 0f             	and    eax,0xf
c0009069:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000906c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906f:	83 c8 40             	or     eax,0x40
c0009072:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009075:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000907a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009080:	05 78 01 00 00       	add    eax,0x178
c0009085:	83 ec 04             	sub    esp,0x4
c0009088:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000908b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000908e:	50                   	push   eax
c000908f:	e8 b4 e2 ff ff       	call   c0007348 <GDT::addEntry(GDTEntry)>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	89 c2                	mov    edx,eax
c0009099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a9:	05 78 01 00 00       	add    eax,0x178
c00090ae:	83 ec 0c             	sub    esp,0xc
c00090b1:	50                   	push   eax
c00090b2:	e8 bb e2 ff ff       	call   c0007372 <GDT::flush()>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090bf:	c9                   	leave  
c00090c0:	c3                   	ret    
c00090c1:	90                   	nop

c00090c2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090cd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090d2:	75 08                	jne    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090d4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090da:	eb 38                	jmp    c0009114 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e1:	75 17                	jne    c00090fa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	83 e1 fd             	and    ecx,0xfffffffd
c00090ff:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009105:	74 cd                	je     c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009107:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000910c:	83 e0 ef             	and    eax,0xffffffef
c000910f:	83 f8 08             	cmp    eax,0x8
c0009112:	76 c0                	jbe    c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009114:	31 c0                	xor    eax,eax
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::isAtty()>:
c0009118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000911f:	31 c0                	xor    eax,eax
c0009121:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009127:	74 09                	je     c0009132 <ReservedFilename::isAtty()+0x1a>
c0009129:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000912f:	0f 94 c0             	sete   al
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000913c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009143:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009148:	75 08                	jne    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000914a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009150:	eb 3d                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009152:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009157:	75 17                	jne    c0009170 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000915e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009167:	8b 10                	mov    edx,DWORD PTR [eax]
c0009169:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000916d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009170:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009175:	75 04                	jne    c000917b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009177:	89 0a                	mov    DWORD PTR [edx],ecx
c0009179:	eb 14                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009180:	74 c8                	je     c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009182:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009187:	83 e0 ef             	and    eax,0xffffffef
c000918a:	83 f8 08             	cmp    eax,0x8
c000918d:	76 bb                	jbe    c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918f:	31 c0                	xor    eax,eax
c0009191:	c3                   	ret    

c0009192 <UnixFile::getFileDescriptor()>:
c0009192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009199:	c3                   	ret    

c000919a <UnixFile::UnixFile(int)>:
c000919a:	53                   	push   ebx
c000919b:	83 ec 28             	sub    esp,0x28
c000919e:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c00091a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091a7:	89 10                	mov    DWORD PTR [eax],edx
c00091a9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b1:	0f 8f 90 01 00 00    	jg     c0009347 <UnixFile::UnixFile(int)+0x1ad>
c00091b7:	a1 80 1e 02 c0       	mov    eax,ds:0xc0021e80
c00091bc:	8d 50 01             	lea    edx,[eax+0x1]
c00091bf:	89 15 80 1e 02 c0    	mov    DWORD PTR ds:0xc0021e80,edx
c00091c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091cc:	83 ec 08             	sub    esp,0x8
c00091cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091d3:	68 98 4f 02 c0       	push   0xc0024f98
c00091d8:	e8 db 56 01 00       	call   c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091e5:	83 f0 01             	xor    eax,0x1
c00091e8:	0f b6 c0             	movzx  eax,al
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 84 55 01 00 00    	je     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00091f3:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c00091fa:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009202:	83 ec 0c             	sub    esp,0xc
c0009205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009209:	e8 79 e8 ff ff       	call   c0007a87 <malloc>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	89 c3                	mov    ebx,eax
c0009213:	83 ec 08             	sub    esp,0x8
c0009216:	68 03 ff ff 0f       	push   0xfffff03
c000921b:	53                   	push   ebx
c000921c:	e8 2d 01 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000922a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009232:	83 ec 0c             	sub    esp,0xc
c0009235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009239:	e8 49 e8 ff ff       	call   c0007a87 <malloc>
c000923e:	83 c4 10             	add    esp,0x10
c0009241:	89 c3                	mov    ebx,eax
c0009243:	83 ec 08             	sub    esp,0x8
c0009246:	68 01 ff ff 0f       	push   0xfffff01
c000924b:	53                   	push   ebx
c000924c:	e8 fd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000925a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009262:	83 ec 0c             	sub    esp,0xc
c0009265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009269:	e8 19 e8 ff ff       	call   c0007a87 <malloc>
c000926e:	83 c4 10             	add    esp,0x10
c0009271:	89 c3                	mov    ebx,eax
c0009273:	83 ec 08             	sub    esp,0x8
c0009276:	68 00 ff ff 0f       	push   0xfffff00
c000927b:	53                   	push   ebx
c000927c:	e8 cd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009281:	83 c4 10             	add    esp,0x10
c0009284:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c000928a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009292:	83 ec 0c             	sub    esp,0xc
c0009295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009299:	e8 e9 e7 ff ff       	call   c0007a87 <malloc>
c000929e:	83 c4 10             	add    esp,0x10
c00092a1:	89 c3                	mov    ebx,eax
c00092a3:	83 ec 08             	sub    esp,0x8
c00092a6:	68 02 ff ff 0f       	push   0xfffff02
c00092ab:	53                   	push   ebx
c00092ac:	e8 9d 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092b1:	83 c4 10             	add    esp,0x10
c00092b4:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ba:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092c2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092c7:	7f 7f                	jg     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00092c9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d1:	83 ec 0c             	sub    esp,0xc
c00092d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092d8:	e8 aa e7 ff ff       	call   c0007a87 <malloc>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	89 c3                	mov    ebx,eax
c00092e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092e6:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092eb:	83 ec 08             	sub    esp,0x8
c00092ee:	50                   	push   eax
c00092ef:	53                   	push   ebx
c00092f0:	e8 59 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fc:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009303:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000930b:	83 ec 0c             	sub    esp,0xc
c000930e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009312:	e8 70 e7 ff ff       	call   c0007a87 <malloc>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 c3                	mov    ebx,eax
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009325:	83 ec 08             	sub    esp,0x8
c0009328:	50                   	push   eax
c0009329:	53                   	push   ebx
c000932a:	e8 1f 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009336:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c000933d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009342:	e9 7b ff ff ff       	jmp    c00092c2 <UnixFile::UnixFile(int)+0x128>
c0009347:	90                   	nop
c0009348:	83 c4 28             	add    esp,0x28
c000934b:	5b                   	pop    ebx
c000934c:	c3                   	ret    
c000934d:	90                   	nop

c000934e <ReservedFilename::ReservedFilename(int)>:
c000934e:	83 ec 0c             	sub    esp,0xc
c0009351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009355:	83 ec 08             	sub    esp,0x8
c0009358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935c:	50                   	push   eax
c000935d:	e8 38 fe ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c0009362:	83 c4 10             	add    esp,0x10
c0009365:	ba d4 fd 01 c0       	mov    edx,0xc001fdd4
c000936a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936e:	89 10                	mov    DWORD PTR [eax],edx
c0009370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000937b:	90                   	nop
c000937c:	83 c4 0c             	add    esp,0xc
c000937f:	c3                   	ret    

c0009380 <UnixFile::~UnixFile()>:
c0009380:	83 ec 1c             	sub    esp,0x1c
c0009383:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c0009388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000938c:	89 10                	mov    DWORD PTR [eax],edx
c000938e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009395:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000939a:	7f 76                	jg     c0009412 <UnixFile::~UnixFile()+0x92>
c000939c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	68 98 4f 02 c0       	push   0xc0024f98
c00093ac:	e8 db 55 01 00       	call   c001e98c <LinkedList<UnixFile>::getFirstElement()>
c00093b1:	83 c4 10             	add    esp,0x10
c00093b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b8:	83 ec 0c             	sub    esp,0xc
c00093bb:	68 98 4f 02 c0       	push   0xc0024f98
c00093c0:	e8 cf 55 01 00       	call   c001e994 <LinkedList<UnixFile>::removeFirst()>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d0:	74 43                	je     c0009415 <UnixFile::~UnixFile()+0x95>
c00093d2:	83 ec 08             	sub    esp,0x8
c00093d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093d9:	68 98 4f 02 c0       	push   0xc0024f98
c00093de:	e8 d5 54 01 00       	call   c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093ea:	8d 50 01             	lea    edx,[eax+0x1]
c00093ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093f6:	0f 94 c0             	sete   al
c00093f9:	0f b6 c0             	movzx  eax,al
c00093fc:	85 c0                	test   eax,eax
c00093fe:	74 a4                	je     c00093a4 <UnixFile::~UnixFile()+0x24>
c0009400:	83 ec 0c             	sub    esp,0xc
c0009403:	68 90 fd 01 c0       	push   0xc001fd90
c0009408:	e8 2a 74 00 00       	call   c0010837 <KePanic(char const*)>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	eb 92                	jmp    c00093a4 <UnixFile::~UnixFile()+0x24>
c0009412:	90                   	nop
c0009413:	eb 01                	jmp    c0009416 <UnixFile::~UnixFile()+0x96>
c0009415:	90                   	nop
c0009416:	90                   	nop
c0009417:	83 c4 1c             	add    esp,0x1c
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <UnixFile::~UnixFile()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 55 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	6a 0c                	push   0xc
c0009433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009437:	e8 11 14 00 00       	call   c000a84d <operator delete(void*, unsigned long)>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 c4 0c             	add    esp,0xc
c0009442:	c3                   	ret    
c0009443:	90                   	nop

c0009444 <ReservedFilename::~ReservedFilename()>:
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	ba d4 fd 01 c0       	mov    edx,0xc001fdd4
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	89 10                	mov    DWORD PTR [eax],edx
c0009452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009456:	83 ec 0c             	sub    esp,0xc
c0009459:	50                   	push   eax
c000945a:	e8 21 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	90                   	nop
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	83 ec 0c             	sub    esp,0xc
c000946e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009472:	e8 cd ff ff ff       	call   c0009444 <ReservedFilename::~ReservedFilename()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	83 ec 08             	sub    esp,0x8
c000947d:	6a 0c                	push   0xc
c000947f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009483:	e8 c5 13 00 00       	call   c000a84d <operator delete(void*, unsigned long)>
c0009488:	83 c4 10             	add    esp,0x10
c000948b:	83 c4 0c             	add    esp,0xc
c000948e:	c3                   	ret    

c000948f <getFromFileDescriptor(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 08             	sub    esp,0x8
c0009493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009497:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000949d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094a3:	7f 2c                	jg     c00094d1 <getFromFileDescriptor(int)+0x42>
c00094a5:	83 ec 0c             	sub    esp,0xc
c00094a8:	68 98 4f 02 c0       	push   0xc0024f98
c00094ad:	e8 da 54 01 00       	call   c001e98c <LinkedList<UnixFile>::getFirstElement()>
c00094b2:	83 c4 10             	add    esp,0x10
c00094b5:	85 c0                	test   eax,eax
c00094b7:	75 04                	jne    c00094bd <getFromFileDescriptor(int)+0x2e>
c00094b9:	31 c0                	xor    eax,eax
c00094bb:	eb 6e                	jmp    c000952b <getFromFileDescriptor(int)+0x9c>
c00094bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c0:	74 69                	je     c000952b <getFromFileDescriptor(int)+0x9c>
c00094c2:	52                   	push   edx
c00094c3:	52                   	push   edx
c00094c4:	50                   	push   eax
c00094c5:	68 98 4f 02 c0       	push   0xc0024f98
c00094ca:	e8 67 55 01 00       	call   c001ea36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094cf:	eb e1                	jmp    c00094b2 <getFromFileDescriptor(int)+0x23>
c00094d1:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094d6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094dc:	74 4d                	je     c000952b <getFromFileDescriptor(int)+0x9c>
c00094de:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094e3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094e9:	74 40                	je     c000952b <getFromFileDescriptor(int)+0x9c>
c00094eb:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c00094f0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094f6:	74 33                	je     c000952b <getFromFileDescriptor(int)+0x9c>
c00094f8:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c00094fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009503:	74 26                	je     c000952b <getFromFileDescriptor(int)+0x9c>
c0009505:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000950b:	83 f8 08             	cmp    eax,0x8
c000950e:	77 09                	ja     c0009519 <getFromFileDescriptor(int)+0x8a>
c0009510:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009517:	eb 12                	jmp    c000952b <getFromFileDescriptor(int)+0x9c>
c0009519:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000951f:	83 fb 08             	cmp    ebx,0x8
c0009522:	77 95                	ja     c00094b9 <getFromFileDescriptor(int)+0x2a>
c0009524:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000952b:	83 c4 08             	add    esp,0x8
c000952e:	5b                   	pop    ebx
c000952f:	c3                   	ret    

c0009530 <__static_initialization_and_destruction_0(int, int)>:
c0009530:	83 ec 0c             	sub    esp,0xc
c0009533:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009538:	75 34                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000953a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009542:	75 2a                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	68 98 4f 02 c0       	push   0xc0024f98
c000954c:	e8 25 53 01 00       	call   c001e876 <LinkedList<UnixFile>::LinkedList()>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	83 ec 04             	sub    esp,0x4
c0009557:	68 08 1e 02 c0       	push   0xc0021e08
c000955c:	68 98 4f 02 c0       	push   0xc0024f98
c0009561:	68 74 e8 01 c0       	push   0xc001e874
c0009566:	e8 92 12 00 00       	call   c000a7fd <__cxa_atexit>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	90                   	nop
c000956f:	83 c4 0c             	add    esp,0xc
c0009572:	c3                   	ret    

c0009573 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009573:	83 ec 0c             	sub    esp,0xc
c0009576:	83 ec 08             	sub    esp,0x8
c0009579:	68 ff ff 00 00       	push   0xffff
c000957e:	6a 01                	push   0x1
c0009580:	e8 ab ff ff ff       	call   c0009530 <__static_initialization_and_destruction_0(int, int)>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 c4 0c             	add    esp,0xc
c000958b:	c3                   	ret    

c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000958c:	53                   	push   ebx
c000958d:	8b 15 88 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e88
c0009593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000959b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a1:	89 d8                	mov    eax,ebx
c00095a3:	d1 e8                	shr    eax,1
c00095a5:	01 d0                	add    eax,edx
c00095a7:	80 e3 01             	and    bl,0x1
c00095aa:	8a 10                	mov    dl,BYTE PTR [eax]
c00095ac:	75 09                	jne    c00095b7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ae:	83 e2 f0             	and    edx,0xfffffff0
c00095b1:	09 ca                	or     edx,ecx
c00095b3:	88 10                	mov    BYTE PTR [eax],dl
c00095b5:	5b                   	pop    ebx
c00095b6:	c3                   	ret    
c00095b7:	0f b6 c9             	movzx  ecx,cl
c00095ba:	c1 e1 04             	shl    ecx,0x4
c00095bd:	83 e2 0f             	and    edx,0xf
c00095c0:	09 ca                	or     edx,ecx
c00095c2:	88 10                	mov    BYTE PTR [eax],dl
c00095c4:	5b                   	pop    ebx
c00095c5:	c3                   	ret    

c00095c6 <Virt::getPageState(unsigned long)>:
c00095c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ca:	8b 0d 88 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e88
c00095d0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095d6:	89 d0                	mov    eax,edx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	80 e2 01             	and    dl,0x1
c00095dd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e0:	74 03                	je     c00095e5 <Virt::getPageState(unsigned long)+0x1f>
c00095e2:	c1 e8 04             	shr    eax,0x4
c00095e5:	83 e0 0f             	and    eax,0xf
c00095e8:	c3                   	ret    

c00095e9 <Virt::allocateKernelVirtualPages(int)>:
c00095e9:	55                   	push   ebp
c00095ea:	31 ed                	xor    ebp,ebp
c00095ec:	57                   	push   edi
c00095ed:	56                   	push   esi
c00095ee:	31 f6                	xor    esi,esi
c00095f0:	53                   	push   ebx
c00095f1:	31 db                	xor    ebx,ebx
c00095f3:	83 ec 0c             	sub    esp,0xc
c00095f6:	8b 3d 84 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e84
c00095fc:	57                   	push   edi
c00095fd:	e8 c4 ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009602:	5a                   	pop    edx
c0009603:	84 c0                	test   al,al
c0009605:	75 40                	jne    c0009647 <Virt::allocateKernelVirtualPages(int)+0x5e>
c0009607:	85 db                	test   ebx,ebx
c0009609:	0f 44 f7             	cmove  esi,edi
c000960c:	83 c3 01             	add    ebx,0x1
c000960f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009613:	74 5f                	je     c0009674 <Virt::allocateKernelVirtualPages(int)+0x8b>
c0009615:	83 c7 01             	add    edi,0x1
c0009618:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000961e:	76 34                	jbe    c0009654 <Virt::allocateKernelVirtualPages(int)+0x6b>
c0009620:	c7 05 84 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e84,0xc8000
c000962a:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009630:	75 2a                	jne    c000965c <Virt::allocateKernelVirtualPages(int)+0x73>
c0009632:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009637:	bd 01 00 00 00       	mov    ebp,0x1
c000963c:	57                   	push   edi
c000963d:	e8 84 ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009642:	5a                   	pop    edx
c0009643:	84 c0                	test   al,al
c0009645:	74 c0                	je     c0009607 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009647:	83 c7 01             	add    edi,0x1
c000964a:	31 db                	xor    ebx,ebx
c000964c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009652:	77 cc                	ja     c0009620 <Virt::allocateKernelVirtualPages(int)+0x37>
c0009654:	89 3d 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,edi
c000965a:	eb a0                	jmp    c00095fc <Virt::allocateKernelVirtualPages(int)+0x13>
c000965c:	83 ec 0c             	sub    esp,0xc
c000965f:	68 e8 fd 01 c0       	push   0xc001fde8
c0009664:	e8 ce 71 00 00       	call   c0010837 <KePanic(char const*)>
c0009669:	8b 3d 84 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e84
c000966f:	83 c4 10             	add    esp,0x10
c0009672:	eb 88                	jmp    c00095fc <Virt::allocateKernelVirtualPages(int)+0x13>
c0009674:	89 35 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,esi
c000967a:	83 fb 01             	cmp    ebx,0x1
c000967d:	74 6f                	je     c00096ee <Virt::allocateKernelVirtualPages(int)+0x105>
c000967f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009683:	85 c9                	test   ecx,ecx
c0009685:	74 49                	je     c00096d0 <Virt::allocateKernelVirtualPages(int)+0xe7>
c0009687:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000968b:	89 f0                	mov    eax,esi
c000968d:	31 db                	xor    ebx,ebx
c000968f:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0009692:	eb 18                	jmp    c00096ac <Virt::allocateKernelVirtualPages(int)+0xc3>
c0009694:	6a 01                	push   0x1
c0009696:	83 c3 01             	add    ebx,0x1
c0009699:	50                   	push   eax
c000969a:	e8 ed fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000969f:	58                   	pop    eax
c00096a0:	5a                   	pop    edx
c00096a1:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096a5:	74 29                	je     c00096d0 <Virt::allocateKernelVirtualPages(int)+0xe7>
c00096a7:	a1 84 1e 02 c0       	mov    eax,ds:0xc0021e84
c00096ac:	8d 50 01             	lea    edx,[eax+0x1]
c00096af:	85 db                	test   ebx,ebx
c00096b1:	89 15 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,edx
c00096b7:	74 24                	je     c00096dd <Virt::allocateKernelVirtualPages(int)+0xf4>
c00096b9:	39 dd                	cmp    ebp,ebx
c00096bb:	75 d7                	jne    c0009694 <Virt::allocateKernelVirtualPages(int)+0xab>
c00096bd:	6a 03                	push   0x3
c00096bf:	83 c3 01             	add    ebx,0x1
c00096c2:	50                   	push   eax
c00096c3:	e8 c4 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c8:	59                   	pop    ecx
c00096c9:	5f                   	pop    edi
c00096ca:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ce:	75 d7                	jne    c00096a7 <Virt::allocateKernelVirtualPages(int)+0xbe>
c00096d0:	83 c4 0c             	add    esp,0xc
c00096d3:	89 f0                	mov    eax,esi
c00096d5:	c1 e0 0c             	shl    eax,0xc
c00096d8:	5b                   	pop    ebx
c00096d9:	5e                   	pop    esi
c00096da:	5f                   	pop    edi
c00096db:	5d                   	pop    ebp
c00096dc:	c3                   	ret    
c00096dd:	6a 02                	push   0x2
c00096df:	bb 01 00 00 00       	mov    ebx,0x1
c00096e4:	50                   	push   eax
c00096e5:	e8 a2 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ea:	58                   	pop    eax
c00096eb:	5a                   	pop    edx
c00096ec:	eb b9                	jmp    c00096a7 <Virt::allocateKernelVirtualPages(int)+0xbe>
c00096ee:	6a 04                	push   0x4
c00096f0:	8d 46 01             	lea    eax,[esi+0x1]
c00096f3:	56                   	push   esi
c00096f4:	a3 84 1e 02 c0       	mov    ds:0xc0021e84,eax
c00096f9:	e8 8e fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	5b                   	pop    ebx
c00096ff:	5f                   	pop    edi
c0009700:	89 f0                	mov    eax,esi
c0009702:	c1 e0 0c             	shl    eax,0xc
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	5b                   	pop    ebx
c0009709:	5e                   	pop    esi
c000970a:	5f                   	pop    edi
c000970b:	5d                   	pop    ebp
c000970c:	c3                   	ret    

c000970d <Virt::freeSwapfilePage(unsigned long)>:
c000970d:	53                   	push   ebx
c000970e:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009714:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	89 cb                	mov    ebx,ecx
c000971f:	c1 eb 05             	shr    ebx,0x5
c0009722:	d3 e0                	shl    eax,cl
c0009724:	f7 d0                	not    eax
c0009726:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009729:	21 c1                	and    ecx,eax
c000972b:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c000972e:	5b                   	pop    ebx
c000972f:	c3                   	ret    

c0009730 <Virt::swapIDToSector(unsigned long)>:
c0009730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009734:	8b 15 8c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e8c
c000973a:	0f af c2             	imul   eax,edx
c000973d:	8b 0d 94 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e94
c0009743:	01 c8                	add    eax,ecx
c0009745:	c3                   	ret    

c0009746 <Virt::allocateSwapfilePage()>:
c0009746:	55                   	push   ebp
c0009747:	31 d2                	xor    edx,edx
c0009749:	57                   	push   edi
c000974a:	56                   	push   esi
c000974b:	53                   	push   ebx
c000974c:	83 ec 0c             	sub    esp,0xc
c000974f:	8b 0d 8c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e8c
c0009755:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c000975a:	f7 f1                	div    ecx
c000975c:	39 0d 90 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e90,ecx
c0009762:	72 2f                	jb     c0009793 <Virt::allocateSwapfilePage()+0x4d>
c0009764:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000976a:	8b 16                	mov    edx,DWORD PTR [esi]
c000976c:	f6 c2 01             	test   dl,0x1
c000976f:	74 3e                	je     c00097af <Virt::allocateSwapfilePage()+0x69>
c0009771:	31 c9                	xor    ecx,ecx
c0009773:	bf 01 00 00 00       	mov    edi,0x1
c0009778:	eb 12                	jmp    c000978c <Virt::allocateSwapfilePage()+0x46>
c000977a:	89 ca                	mov    edx,ecx
c000977c:	89 fd                	mov    ebp,edi
c000977e:	c1 ea 05             	shr    edx,0x5
c0009781:	d3 e5                	shl    ebp,cl
c0009783:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009786:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009788:	85 ea                	test   edx,ebp
c000978a:	74 2c                	je     c00097b8 <Virt::allocateSwapfilePage()+0x72>
c000978c:	83 c1 01             	add    ecx,0x1
c000978f:	39 c8                	cmp    eax,ecx
c0009791:	77 e7                	ja     c000977a <Virt::allocateSwapfilePage()+0x34>
c0009793:	83 ec 0c             	sub    esp,0xc
c0009796:	68 4f ff 01 c0       	push   0xc001ff4f
c000979b:	e8 97 70 00 00       	call   c0010837 <KePanic(char const*)>
c00097a0:	83 c4 10             	add    esp,0x10
c00097a3:	31 c9                	xor    ecx,ecx
c00097a5:	83 c4 0c             	add    esp,0xc
c00097a8:	89 c8                	mov    eax,ecx
c00097aa:	5b                   	pop    ebx
c00097ab:	5e                   	pop    esi
c00097ac:	5f                   	pop    edi
c00097ad:	5d                   	pop    ebp
c00097ae:	c3                   	ret    
c00097af:	89 f3                	mov    ebx,esi
c00097b1:	bd 01 00 00 00       	mov    ebp,0x1
c00097b6:	31 c9                	xor    ecx,ecx
c00097b8:	09 ea                	or     edx,ebp
c00097ba:	89 c8                	mov    eax,ecx
c00097bc:	89 13                	mov    DWORD PTR [ebx],edx
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	5b                   	pop    ebx
c00097c2:	5e                   	pop    esi
c00097c3:	5f                   	pop    edi
c00097c4:	5d                   	pop    ebp
c00097c5:	c3                   	ret    

c00097c6 <Virt::virtualMemorySetup()>:
c00097c6:	53                   	push   ebx
c00097c7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cc:	6a 0f                	push   0xf
c00097ce:	53                   	push   ebx
c00097cf:	83 c3 01             	add    ebx,0x1
c00097d2:	e8 b5 fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097d7:	58                   	pop    eax
c00097d8:	5a                   	pop    edx
c00097d9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097df:	75 eb                	jne    c00097cc <Virt::virtualMemorySetup()+0x6>
c00097e1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e6:	6a 00                	push   0x0
c00097e8:	53                   	push   ebx
c00097e9:	83 c3 01             	add    ebx,0x1
c00097ec:	e8 9b fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f1:	59                   	pop    ecx
c00097f2:	58                   	pop    eax
c00097f3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f9:	75 eb                	jne    c00097e6 <Virt::virtualMemorySetup()+0x20>
c00097fb:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009800:	6a 0f                	push   0xf
c0009802:	53                   	push   ebx
c0009803:	83 c3 01             	add    ebx,0x1
c0009806:	e8 81 fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980b:	58                   	pop    eax
c000980c:	5a                   	pop    edx
c000980d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009813:	75 eb                	jne    c0009800 <Virt::virtualMemorySetup()+0x3a>
c0009815:	5b                   	pop    ebx
c0009816:	c3                   	ret    

c0009817 <Virt::setupPageSwapping(int)>:
c0009817:	53                   	push   ebx
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009820:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009824:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982a:	8b 10                	mov    edx,DWORD PTR [eax]
c000982c:	53                   	push   ebx
c000982d:	c1 e3 0b             	shl    ebx,0xb
c0009830:	68 66 ff 01 c0       	push   0xc001ff66
c0009835:	50                   	push   eax
c0009836:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009839:	89 1d 90 1e 02 c0    	mov    DWORD PTR ds:0xc0021e90,ebx
c000983f:	c6 05 98 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e98,0x43
c0009846:	c1 eb 08             	shr    ebx,0x8
c0009849:	a3 94 1e 02 c0       	mov    ds:0xc0021e94,eax
c000984e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009851:	c7 05 8c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e8c,0x8
c000985b:	e8 27 e2 ff ff       	call   c0007a87 <malloc>
c0009860:	31 d2                	xor    edx,edx
c0009862:	89 c1                	mov    ecx,eax
c0009864:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009869:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c000986e:	83 c4 0c             	add    esp,0xc
c0009871:	f7 35 8c 1e 02 c0    	div    DWORD PTR ds:0xc0021e8c
c0009877:	c1 e8 05             	shr    eax,0x5
c000987a:	50                   	push   eax
c000987b:	6a 00                	push   0x0
c000987d:	51                   	push   ecx
c000987e:	e8 5d 6c ff ff       	call   c00004e0 <memset>
c0009883:	83 c4 18             	add    esp,0x18
c0009886:	5b                   	pop    ebx
c0009887:	c3                   	ret    

c0009888 <VAS::VAS(VAS*)>:
c0009888:	83 ec 0c             	sub    esp,0xc
c000988b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000989a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a1:	83 ec 0c             	sub    esp,0xc
c00098a4:	68 08 fe 01 c0       	push   0xc001fe08
c00098a9:	e8 89 6f 00 00       	call   c0010837 <KePanic(char const*)>
c00098ae:	83 c4 10             	add    esp,0x10
c00098b1:	90                   	nop
c00098b2:	83 c4 0c             	add    esp,0xc
c00098b5:	c3                   	ret    

c00098b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098ba:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098bf:	89 c2                	mov    edx,eax
c00098c1:	c1 ea 16             	shr    edx,0x16
c00098c4:	c1 e8 0a             	shr    eax,0xa
c00098c7:	83 f9 01             	cmp    ecx,0x1
c00098ca:	19 c9                	sbb    ecx,ecx
c00098cc:	25 fc 0f 00 00       	and    eax,0xffc
c00098d1:	c1 e2 0c             	shl    edx,0xc
c00098d4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098da:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e1:	01 d0                	add    eax,edx
c00098e3:	c3                   	ret    

c00098e4 <VAS::getPageTableEntry(unsigned long)>:
c00098e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098e8:	89 ca                	mov    edx,ecx
c00098ea:	c1 ea 16             	shr    edx,0x16
c00098ed:	c1 e9 0a             	shr    ecx,0xa
c00098f0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009902:	c3                   	ret    

c0009903 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009903:	55                   	push   ebp
c0009904:	57                   	push   edi
c0009905:	bf 01 00 00 00       	mov    edi,0x1
c000990a:	56                   	push   esi
c000990b:	53                   	push   ebx
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009913:	c1 ee 0c             	shr    esi,0xc
c0009916:	eb 3a                	jmp    c0009952 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c0009918:	83 ec 08             	sub    esp,0x8
c000991b:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009920:	55                   	push   ebp
c0009921:	50                   	push   eax
c0009922:	e8 bd ff ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009927:	83 c4 10             	add    esp,0x10
c000992a:	8b 00                	mov    eax,DWORD PTR [eax]
c000992c:	f6 c4 04             	test   ah,0x4
c000992f:	75 5a                	jne    c000998b <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009931:	83 fb 04             	cmp    ebx,0x4
c0009934:	74 6b                	je     c00099a1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009936:	83 fb 02             	cmp    ebx,0x2
c0009939:	74 7f                	je     c00099ba <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000993b:	83 fb 03             	cmp    ebx,0x3
c000993e:	0f 84 a3 00 00 00    	je     c00099e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009944:	83 fb 01             	cmp    ebx,0x1
c0009947:	0f 84 87 00 00 00    	je     c00099d4 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c000994d:	83 c6 01             	add    esi,0x1
c0009950:	31 ff                	xor    edi,edi
c0009952:	56                   	push   esi
c0009953:	e8 6e fc ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009958:	89 f5                	mov    ebp,esi
c000995a:	5a                   	pop    edx
c000995b:	0f b6 d8             	movzx  ebx,al
c000995e:	c1 e5 0c             	shl    ebp,0xc
c0009961:	85 db                	test   ebx,ebx
c0009963:	75 b3                	jne    c0009918 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009965:	83 ec 0c             	sub    esp,0xc
c0009968:	68 7d ff 01 c0       	push   0xc001ff7d
c000996d:	e8 c5 6e 00 00       	call   c0010837 <KePanic(char const*)>
c0009972:	5a                   	pop    edx
c0009973:	59                   	pop    ecx
c0009974:	55                   	push   ebp
c0009975:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000997b:	55                   	push   ebp
c000997c:	e8 63 ff ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009981:	83 c4 10             	add    esp,0x10
c0009984:	8b 00                	mov    eax,DWORD PTR [eax]
c0009986:	f6 c4 04             	test   ah,0x4
c0009989:	74 c2                	je     c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000998b:	83 ec 0c             	sub    esp,0xc
c000998e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009993:	50                   	push   eax
c0009994:	e8 90 e3 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c0009999:	83 c4 10             	add    esp,0x10
c000999c:	83 fb 04             	cmp    ebx,0x4
c000999f:	75 95                	jne    c0009936 <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099a1:	83 e7 01             	and    edi,0x1
c00099a4:	75 46                	jne    c00099ec <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099a6:	c7 44 24 20 2c fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe2c
c00099ae:	83 c4 0c             	add    esp,0xc
c00099b1:	5b                   	pop    ebx
c00099b2:	5e                   	pop    esi
c00099b3:	5f                   	pop    edi
c00099b4:	5d                   	pop    ebp
c00099b5:	e9 7d 6e 00 00       	jmp    c0010837 <KePanic(char const*)>
c00099ba:	83 e7 01             	and    edi,0x1
c00099bd:	75 15                	jne    c00099d4 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099bf:	83 ec 0c             	sub    esp,0xc
c00099c2:	68 99 ff 01 c0       	push   0xc001ff99
c00099c7:	e8 6b 6e 00 00       	call   c0010837 <KePanic(char const*)>
c00099cc:	83 c4 10             	add    esp,0x10
c00099cf:	e9 79 ff ff ff       	jmp    c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099d4:	83 ec 08             	sub    esp,0x8
c00099d7:	6a 00                	push   0x0
c00099d9:	56                   	push   esi
c00099da:	e8 ad fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099df:	83 c4 10             	add    esp,0x10
c00099e2:	e9 66 ff ff ff       	jmp    c000994d <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099e7:	83 e7 01             	and    edi,0x1
c00099ea:	75 16                	jne    c0009a02 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c00099ec:	83 ec 08             	sub    esp,0x8
c00099ef:	6a 00                	push   0x0
c00099f1:	56                   	push   esi
c00099f2:	e8 95 fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099f7:	83 c4 10             	add    esp,0x10
c00099fa:	83 c4 0c             	add    esp,0xc
c00099fd:	5b                   	pop    ebx
c00099fe:	5e                   	pop    esi
c00099ff:	5f                   	pop    edi
c0009a00:	5d                   	pop    ebp
c0009a01:	c3                   	ret    
c0009a02:	c7 44 24 20 b5 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ffb5
c0009a0a:	83 c4 0c             	add    esp,0xc
c0009a0d:	5b                   	pop    ebx
c0009a0e:	5e                   	pop    esi
c0009a0f:	5f                   	pop    edi
c0009a10:	5d                   	pop    ebp
c0009a11:	e9 21 6e 00 00       	jmp    c0010837 <KePanic(char const*)>

c0009a16 <VAS::freeAllocatedPages(unsigned long)>:
c0009a16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a1e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a22:	74 09                	je     c0009a2d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a24:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a28:	e9 d6 fe ff ff       	jmp    c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a2d:	c7 44 24 04 50 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe50
c0009a35:	e9 0f 0f 00 00       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>

c0009a3a <VAS::virtualToPhysical(unsigned long)>:
c0009a3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3e:	50                   	push   eax
c0009a3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a43:	52                   	push   edx
c0009a44:	e8 9b fe ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009a49:	59                   	pop    ecx
c0009a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a4c:	5a                   	pop    edx
c0009a4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a52:	c3                   	ret    
c0009a53:	90                   	nop

c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a54:	55                   	push   ebp
c0009a55:	57                   	push   edi
c0009a56:	56                   	push   esi
c0009a57:	53                   	push   ebx
c0009a58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a60:	89 c3                	mov    ebx,eax
c0009a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a66:	c1 e3 0c             	shl    ebx,0xc
c0009a69:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a6d:	01 f3                	add    ebx,esi
c0009a6f:	85 c0                	test   eax,eax
c0009a71:	7e 1f                	jle    c0009a92 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a73:	56                   	push   esi
c0009a74:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a7a:	55                   	push   ebp
c0009a7b:	e8 64 fe ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c0009a80:	5a                   	pop    edx
c0009a81:	59                   	pop    ecx
c0009a82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a84:	21 f9                	and    ecx,edi
c0009a86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a8a:	09 d1                	or     ecx,edx
c0009a8c:	39 f3                	cmp    ebx,esi
c0009a8e:	89 08                	mov    DWORD PTR [eax],ecx
c0009a90:	75 e1                	jne    c0009a73 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009a92:	5b                   	pop    ebx
c0009a93:	5e                   	pop    esi
c0009a94:	5f                   	pop    edi
c0009a95:	5d                   	pop    ebp
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <VAS::VAS()>:
c0009a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab2:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009abf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009ad1:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009ad6:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009adb:	29 c2                	sub    edx,eax
c0009add:	89 d0                	mov    eax,edx
c0009adf:	05 ff 0f 00 00       	add    eax,0xfff
c0009ae4:	c1 e8 0c             	shr    eax,0xc
c0009ae7:	89 c2                	mov    edx,eax
c0009ae9:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009aee:	6a 04                	push   0x4
c0009af0:	6a ff                	push   0xffffffff
c0009af2:	52                   	push   edx
c0009af3:	50                   	push   eax
c0009af4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009af8:	e8 57 ff ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c0009afd:	83 c4 14             	add    esp,0x14
c0009b00:	90                   	nop
c0009b01:	c3                   	ret    

c0009b02 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b02:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b0d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b14:	75 01                	jne    c0009b17 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b16:	c3                   	ret    
c0009b17:	68 80 00 00 00       	push   0x80
c0009b1c:	6a ff                	push   0xffffffff
c0009b1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b22:	50                   	push   eax
c0009b23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b27:	52                   	push   edx
c0009b28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b2c:	51                   	push   ecx
c0009b2d:	e8 22 ff ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b32:	83 c4 14             	add    esp,0x14
c0009b35:	c3                   	ret    

c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b41:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b49:	83 f8 01             	cmp    eax,0x1
c0009b4c:	19 c0                	sbb    eax,eax
c0009b4e:	83 ca 03             	or     edx,0x3
c0009b51:	83 e0 fc             	and    eax,0xfffffffc
c0009b54:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b5b:	0f 20 d8             	mov    eax,cr3
c0009b5e:	0f 22 d8             	mov    cr3,eax
c0009b61:	c3                   	ret    

c0009b62 <VAS::~VAS()>:
c0009b62:	83 ec 2c             	sub    esp,0x2c
c0009b65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b6d:	fa                   	cli    
c0009b6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b73:	83 c0 01             	add    eax,0x1
c0009b76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b85:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009b8f:	6a 01                	push   0x1
c0009b91:	50                   	push   eax
c0009b92:	e8 9f ff ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c0009b97:	83 c4 0c             	add    esp,0xc
c0009b9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009ba2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009baa:	0f 8f d8 00 00 00    	jg     c0009c88 <VAS::~VAS()+0x126>
c0009bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bbb:	c1 e2 02             	shl    edx,0x2
c0009bbe:	01 d0                	add    eax,edx
c0009bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bca:	83 e0 01             	and    eax,0x1
c0009bcd:	0f 84 ab 00 00 00    	je     c0009c7e <VAS::~VAS()+0x11c>
c0009bd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bdb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009be3:	7f 74                	jg     c0009c59 <VAS::~VAS()+0xf7>
c0009be5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009be9:	c1 e0 0a             	shl    eax,0xa
c0009bec:	89 c2                	mov    edx,eax
c0009bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	c1 e0 0c             	shl    eax,0xc
c0009bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c05:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c0f:	6a 01                	push   0x1
c0009c11:	50                   	push   eax
c0009c12:	e8 9f fc ff ff       	call   c00098b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c17:	83 c4 0c             	add    esp,0xc
c0009c1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2c:	25 01 04 00 00       	and    eax,0x401
c0009c31:	3d 01 04 00 00       	cmp    eax,0x401
c0009c36:	75 1a                	jne    c0009c52 <VAS::~VAS()+0xf0>
c0009c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c41:	83 ec 0c             	sub    esp,0xc
c0009c44:	50                   	push   eax
c0009c45:	e8 df e0 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c52:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c57:	eb 82                	jmp    c0009bdb <VAS::~VAS()+0x79>
c0009c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5d:	25 00 04 00 00       	and    eax,0x400
c0009c62:	74 1a                	je     c0009c7e <VAS::~VAS()+0x11c>
c0009c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6d:	83 ec 0c             	sub    esp,0xc
c0009c70:	50                   	push   eax
c0009c71:	e8 b3 e0 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c7e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c83:	e9 1a ff ff ff       	jmp    c0009ba2 <VAS::~VAS()+0x40>
c0009c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c8f:	83 ec 0c             	sub    esp,0xc
c0009c92:	50                   	push   eax
c0009c93:	e8 6b fc ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca2:	83 ec 0c             	sub    esp,0xc
c0009ca5:	50                   	push   eax
c0009ca6:	e8 7e e0 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cb8:	83 e8 01             	sub    eax,0x1
c0009cbb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cc5:	85 c0                	test   eax,eax
c0009cc7:	75 01                	jne    c0009cca <VAS::~VAS()+0x168>
c0009cc9:	fb                   	sti    
c0009cca:	90                   	nop
c0009ccb:	83 c4 2c             	add    esp,0x2c
c0009cce:	c3                   	ret    
c0009ccf:	90                   	nop

c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cd0:	55                   	push   ebp
c0009cd1:	57                   	push   edi
c0009cd2:	56                   	push   esi
c0009cd3:	53                   	push   ebx
c0009cd4:	83 ec 1c             	sub    esp,0x1c
c0009cd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009cdf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009ce5:	77 0b                	ja     c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009ce7:	0f 20 d8             	mov    eax,cr3
c0009cea:	0f 20 d8             	mov    eax,cr3
c0009ced:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009cf0:	75 49                	jne    c0009d3b <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009cf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009cf6:	09 d8                	or     eax,ebx
c0009cf8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cfd:	75 59                	jne    c0009d58 <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009cff:	89 de                	mov    esi,ebx
c0009d01:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d04:	c1 ee 16             	shr    esi,0x16
c0009d07:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d0e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d12:	74 56                	je     c0009d6a <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d14:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d1e:	c1 eb 0a             	shr    ebx,0xa
c0009d21:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d25:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d2b:	09 d0                	or     eax,edx
c0009d2d:	c1 e6 0c             	shl    esi,0xc
c0009d30:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d33:	83 c4 1c             	add    esp,0x1c
c0009d36:	5b                   	pop    ebx
c0009d37:	5e                   	pop    esi
c0009d38:	5f                   	pop    edi
c0009d39:	5d                   	pop    ebp
c0009d3a:	c3                   	ret    
c0009d3b:	83 ec 0c             	sub    esp,0xc
c0009d3e:	68 74 fe 01 c0       	push   0xc001fe74
c0009d43:	e8 01 0c 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d4f:	09 d8                	or     eax,ebx
c0009d51:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d56:	74 a7                	je     c0009cff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d58:	83 ec 0c             	sub    esp,0xc
c0009d5b:	68 dc fe 01 c0       	push   0xc001fedc
c0009d60:	e8 d2 6a 00 00       	call   c0010837 <KePanic(char const*)>
c0009d65:	83 c4 10             	add    esp,0x10
c0009d68:	eb 95                	jmp    c0009cff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d6e:	e8 1f e0 ff ff       	call   c0007d92 <Phys::allocatePage()>
c0009d73:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d79:	83 ec 0c             	sub    esp,0xc
c0009d7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d80:	89 c5                	mov    ebp,eax
c0009d82:	6a 01                	push   0x1
c0009d84:	e8 60 f8 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009d89:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d90:	6a 01                	push   0x1
c0009d92:	50                   	push   eax
c0009d93:	55                   	push   ebp
c0009d94:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d9a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d9e:	51                   	push   ecx
c0009d9f:	e8 40 02 00 00       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009da4:	83 c4 1c             	add    esp,0x1c
c0009da7:	68 00 10 00 00       	push   0x1000
c0009dac:	6a 00                	push   0x0
c0009dae:	50                   	push   eax
c0009daf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009db3:	e8 28 67 ff ff       	call   c00004e0 <memset>
c0009db8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dbc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dbf:	e8 3f fb ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dcb:	83 c4 10             	add    esp,0x10
c0009dce:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009dd1:	e9 3e ff ff ff       	jmp    c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009dd6 <VAS::allocatePages(int, int)>:
c0009dd6:	55                   	push   ebp
c0009dd7:	57                   	push   edi
c0009dd8:	56                   	push   esi
c0009dd9:	53                   	push   ebx
c0009dda:	83 ec 1c             	sub    esp,0x1c
c0009ddd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009de2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009de6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009dec:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009df2:	83 e0 01             	and    eax,0x1
c0009df5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009df9:	89 c7                	mov    edi,eax
c0009dfb:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009dff:	0f 85 d6 00 00 00    	jne    c0009edb <VAS::allocatePages(int, int)+0x105>
c0009e05:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e0c:	85 c0                	test   eax,eax
c0009e0e:	0f 84 ab 00 00 00    	je     c0009ebf <VAS::allocatePages(int, int)+0xe9>
c0009e14:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e1c:	c1 e6 0c             	shl    esi,0xc
c0009e1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e23:	01 de                	add    esi,ebx
c0009e25:	85 c0                	test   eax,eax
c0009e27:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e2a:	7e 3a                	jle    c0009e66 <VAS::allocatePages(int, int)+0x90>
c0009e2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e30:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e34:	80 cc 04             	or     ah,0x4
c0009e37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e3b:	89 f8                	mov    eax,edi
c0009e3d:	0f b6 f8             	movzx  edi,al
c0009e40:	e8 4d df ff ff       	call   c0007d92 <Phys::allocatePage()>
c0009e45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e49:	52                   	push   edx
c0009e4a:	53                   	push   ebx
c0009e4b:	50                   	push   eax
c0009e4c:	55                   	push   ebp
c0009e4d:	e8 7e fe ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e52:	83 c4 10             	add    esp,0x10
c0009e55:	85 ff                	test   edi,edi
c0009e57:	74 03                	je     c0009e5c <VAS::allocatePages(int, int)+0x86>
c0009e59:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e5c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e62:	39 de                	cmp    esi,ebx
c0009e64:	75 da                	jne    c0009e40 <VAS::allocatePages(int, int)+0x6a>
c0009e66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e6a:	85 c9                	test   ecx,ecx
c0009e6c:	75 12                	jne    c0009e80 <VAS::allocatePages(int, int)+0xaa>
c0009e6e:	0f 20 d8             	mov    eax,cr3
c0009e71:	0f 22 d8             	mov    cr3,eax
c0009e74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e78:	83 c4 1c             	add    esp,0x1c
c0009e7b:	5b                   	pop    ebx
c0009e7c:	5e                   	pop    esi
c0009e7d:	5f                   	pop    edi
c0009e7e:	5d                   	pop    ebp
c0009e7f:	c3                   	ret    
c0009e80:	c1 ee 0a             	shr    esi,0xa
c0009e83:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e87:	c1 eb 0a             	shr    ebx,0xa
c0009e8a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e90:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009e96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009e9c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ea2:	39 c3                	cmp    ebx,eax
c0009ea4:	77 ce                	ja     c0009e74 <VAS::allocatePages(int, int)+0x9e>
c0009ea6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ea9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eaf:	39 d8                	cmp    eax,ebx
c0009eb1:	73 f3                	jae    c0009ea6 <VAS::allocatePages(int, int)+0xd0>
c0009eb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eb7:	83 c4 1c             	add    esp,0x1c
c0009eba:	5b                   	pop    ebx
c0009ebb:	5e                   	pop    esi
c0009ebc:	5f                   	pop    edi
c0009ebd:	5d                   	pop    ebp
c0009ebe:	c3                   	ret    
c0009ebf:	83 ec 0c             	sub    esp,0xc
c0009ec2:	68 00 ff 01 c0       	push   0xc001ff00
c0009ec7:	e8 6b 69 00 00       	call   c0010837 <KePanic(char const*)>
c0009ecc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ecf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	e9 39 ff ff ff       	jmp    c0009e14 <VAS::allocatePages(int, int)+0x3e>
c0009edb:	83 ec 0c             	sub    esp,0xc
c0009ede:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ee2:	50                   	push   eax
c0009ee3:	e8 01 f7 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009ee8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ef4:	0f 87 a4 00 00 00    	ja     c0009f9e <VAS::allocatePages(int, int)+0x1c8>
c0009efa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efe:	85 c0                	test   eax,eax
c0009f00:	7e 44                	jle    c0009f46 <VAS::allocatePages(int, int)+0x170>
c0009f02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f06:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f0a:	c1 e0 0c             	shl    eax,0xc
c0009f0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f11:	01 d8                	add    eax,ebx
c0009f13:	81 ce 00 04 00 00    	or     esi,0x400
c0009f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f1d:	89 f8                	mov    eax,edi
c0009f1f:	0f b6 f8             	movzx  edi,al
c0009f22:	e8 6b de ff ff       	call   c0007d92 <Phys::allocatePage()>
c0009f27:	56                   	push   esi
c0009f28:	53                   	push   ebx
c0009f29:	50                   	push   eax
c0009f2a:	55                   	push   ebp
c0009f2b:	e8 a0 fd ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f30:	83 c4 10             	add    esp,0x10
c0009f33:	85 ff                	test   edi,edi
c0009f35:	74 03                	je     c0009f3a <VAS::allocatePages(int, int)+0x164>
c0009f37:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f44:	75 dc                	jne    c0009f22 <VAS::allocatePages(int, int)+0x14c>
c0009f46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f4a:	85 c0                	test   eax,eax
c0009f4c:	0f 84 1c ff ff ff    	je     c0009e6e <VAS::allocatePages(int, int)+0x98>
c0009f52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f5a:	c1 e0 0c             	shl    eax,0xc
c0009f5d:	89 d3                	mov    ebx,edx
c0009f5f:	c1 eb 0a             	shr    ebx,0xa
c0009f62:	01 d0                	add    eax,edx
c0009f64:	c1 e8 0a             	shr    eax,0xa
c0009f67:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f72:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f78:	2d 00 00 40 00       	sub    eax,0x400000
c0009f7d:	39 c3                	cmp    ebx,eax
c0009f7f:	0f 87 ef fe ff ff    	ja     c0009e74 <VAS::allocatePages(int, int)+0x9e>
c0009f85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f88:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f8e:	39 d8                	cmp    eax,ebx
c0009f90:	73 f3                	jae    c0009f85 <VAS::allocatePages(int, int)+0x1af>
c0009f92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f96:	83 c4 1c             	add    esp,0x1c
c0009f99:	5b                   	pop    ebx
c0009f9a:	5e                   	pop    esi
c0009f9b:	5f                   	pop    edi
c0009f9c:	5d                   	pop    ebp
c0009f9d:	c3                   	ret    
c0009f9e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fa9:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fb0:	0f 84 44 ff ff ff    	je     c0009efa <VAS::allocatePages(int, int)+0x124>
c0009fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fba:	80 cc 01             	or     ah,0x1
c0009fbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fc1:	e9 34 ff ff ff       	jmp    c0009efa <VAS::allocatePages(int, int)+0x124>

c0009fc6 <VAS::setCPUSpecific(unsigned long)>:
c0009fc6:	83 ec 0c             	sub    esp,0xc
c0009fc9:	6a 05                	push   0x5
c0009fcb:	68 00 00 40 c2       	push   0xc2400000
c0009fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fd4:	50                   	push   eax
c0009fd5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009fd9:	52                   	push   edx
c0009fda:	e8 f1 fc ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fdf:	83 c4 1c             	add    esp,0x1c
c0009fe2:	c3                   	ret    
c0009fe3:	90                   	nop

c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009fe4:	55                   	push   ebp
c0009fe5:	57                   	push   edi
c0009fe6:	56                   	push   esi
c0009fe7:	53                   	push   ebx
c0009fe8:	83 ec 1c             	sub    esp,0x1c
c0009feb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ff0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009ff4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ff8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ffe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a002:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a008:	83 e0 01             	and    eax,0x1
c000a00b:	85 db                	test   ebx,ebx
c000a00d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a011:	7e 43                	jle    c000a056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a013:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a017:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a01b:	c1 e2 0c             	shl    edx,0xc
c000a01e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a022:	01 ca                	add    edx,ecx
c000a024:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a028:	0f b6 f0             	movzx  esi,al
c000a02b:	55                   	push   ebp
c000a02c:	53                   	push   ebx
c000a02d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a031:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a035:	29 d0                	sub    eax,edx
c000a037:	01 d8                	add    eax,ebx
c000a039:	50                   	push   eax
c000a03a:	57                   	push   edi
c000a03b:	e8 90 fc ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a040:	83 c4 10             	add    esp,0x10
c000a043:	85 f6                	test   esi,esi
c000a045:	74 03                	je     c000a04a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a047:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a04a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a050:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a054:	75 d5                	jne    c000a02b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a056:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a05a:	85 c9                	test   ecx,ecx
c000a05c:	75 12                	jne    c000a070 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a05e:	0f 20 d8             	mov    eax,cr3
c000a061:	0f 22 d8             	mov    cr3,eax
c000a064:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a068:	83 c4 1c             	add    esp,0x1c
c000a06b:	5b                   	pop    ebx
c000a06c:	5e                   	pop    esi
c000a06d:	5f                   	pop    edi
c000a06e:	5d                   	pop    ebp
c000a06f:	c3                   	ret    
c000a070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a074:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a078:	c1 e0 0c             	shl    eax,0xc
c000a07b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a07f:	c1 eb 0a             	shr    ebx,0xa
c000a082:	01 d0                	add    eax,edx
c000a084:	c1 e8 0a             	shr    eax,0xa
c000a087:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a08d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a092:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a098:	2d 00 00 40 00       	sub    eax,0x400000
c000a09d:	39 c3                	cmp    ebx,eax
c000a09f:	77 c3                	ja     c000a064 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0a1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0aa:	39 d8                	cmp    eax,ebx
c000a0ac:	73 f3                	jae    c000a0a1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0b2:	83 c4 1c             	add    esp,0x1c
c000a0b5:	5b                   	pop    ebx
c000a0b6:	5e                   	pop    esi
c000a0b7:	5f                   	pop    edi
c000a0b8:	5d                   	pop    ebp
c000a0b9:	c3                   	ret    

c000a0ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ba:	55                   	push   ebp
c000a0bb:	57                   	push   edi
c000a0bc:	56                   	push   esi
c000a0bd:	53                   	push   ebx
c000a0be:	83 ec 1c             	sub    esp,0x1c
c000a0c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0c5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0c9:	09 f8                	or     eax,edi
c000a0cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a0cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a0d3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0d8:	75 4f                	jne    c000a129 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0da:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0de:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a0e1:	c1 eb 16             	shr    ebx,0x16
c000a0e4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a0eb:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a0ef:	74 52                	je     c000a143 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a0f1:	0f b6 f2             	movzx  esi,dl
c000a0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a0fc:	c1 e8 0a             	shr    eax,0xa
c000a0ff:	83 fe 01             	cmp    esi,0x1
c000a102:	19 d2                	sbb    edx,edx
c000a104:	25 fc 0f 00 00       	and    eax,0xffc
c000a109:	c1 e3 0c             	shl    ebx,0xc
c000a10c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a112:	01 d8                	add    eax,ebx
c000a114:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a118:	09 d9                	or     ecx,ebx
c000a11a:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a121:	83 c4 1c             	add    esp,0x1c
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	5d                   	pop    ebp
c000a128:	c3                   	ret    
c000a129:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a12d:	83 ec 0c             	sub    esp,0xc
c000a130:	68 2c ff 01 c0       	push   0xc001ff2c
c000a135:	e8 fd 66 00 00       	call   c0010837 <KePanic(char const*)>
c000a13a:	83 c4 10             	add    esp,0x10
c000a13d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a141:	eb 97                	jmp    c000a0da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a143:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a147:	e8 46 dc ff ff       	call   c0007d92 <Phys::allocatePage()>
c000a14c:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a159:	89 c5                	mov    ebp,eax
c000a15b:	6a 01                	push   0x1
c000a15d:	e8 87 f4 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a162:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a169:	6a 01                	push   0x1
c000a16b:	50                   	push   eax
c000a16c:	55                   	push   ebp
c000a16d:	81 cd 07 04 00 00    	or     ebp,0x407
c000a173:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a177:	51                   	push   ecx
c000a178:	e8 67 fe ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17d:	83 c4 1c             	add    esp,0x1c
c000a180:	68 00 10 00 00       	push   0x1000
c000a185:	6a 00                	push   0x0
c000a187:	50                   	push   eax
c000a188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18c:	e8 4f 63 ff ff       	call   c00004e0 <memset>
c000a191:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a195:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a198:	e8 66 f7 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c000a19d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1a0:	83 c4 10             	add    esp,0x10
c000a1a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1a7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1aa:	e9 42 ff ff ff       	jmp    c000a0f1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1af:	90                   	nop

c000a1b0 <VAS::VAS(bool)>:
c000a1b0:	53                   	push   ebx
c000a1b1:	83 ec 28             	sub    esp,0x28
c000a1b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1da:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1dd:	e8 b0 db ff ff       	call   c0007d92 <Phys::allocatePage()>
c000a1e2:	89 c2                	mov    edx,eax
c000a1e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1eb:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1f1:	83 ec 0c             	sub    esp,0xc
c000a1f4:	6a 01                	push   0x1
c000a1f6:	e8 ee f3 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	89 c2                	mov    edx,eax
c000a200:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a204:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 03                	push   0x3
c000a20c:	6a 01                	push   0x1
c000a20e:	52                   	push   edx
c000a20f:	50                   	push   eax
c000a210:	53                   	push   ebx
c000a211:	e8 ce fd ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a216:	83 c4 20             	add    esp,0x20
c000a219:	89 c2                	mov    edx,eax
c000a21b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a222:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a22a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a232:	7f 1d                	jg     c000a251 <VAS::VAS(bool)+0xa1>
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a23b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a23f:	c1 e2 02             	shl    edx,0x2
c000a242:	01 d0                	add    eax,edx
c000a244:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a24a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a24f:	eb d9                	jmp    c000a22a <VAS::VAS(bool)+0x7a>
c000a251:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a259:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a261:	7f 7e                	jg     c000a2e1 <VAS::VAS(bool)+0x131>
c000a263:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a267:	2d 00 02 00 00       	sub    eax,0x200
c000a26c:	c1 e0 0c             	shl    eax,0xc
c000a26f:	83 c8 05             	or     eax,0x5
c000a272:	89 c2                	mov    edx,eax
c000a274:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a27f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a285:	83 e0 10             	and    eax,0x10
c000a288:	0f b6 c0             	movzx  eax,al
c000a28b:	85 c0                	test   eax,eax
c000a28d:	74 07                	je     c000a296 <VAS::VAS(bool)+0xe6>
c000a28f:	b8 00 01 00 00       	mov    eax,0x100
c000a294:	eb 05                	jmp    c000a29b <VAS::VAS(bool)+0xeb>
c000a296:	b8 00 00 00 00       	mov    eax,0x0
c000a29b:	09 d0                	or     eax,edx
c000a29d:	89 c1                	mov    ecx,eax
c000a29f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2aa:	c1 e2 02             	shl    edx,0x2
c000a2ad:	01 d0                	add    eax,edx
c000a2af:	89 ca                	mov    edx,ecx
c000a2b1:	89 10                	mov    DWORD PTR [eax],edx
c000a2b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2b7:	2d 40 03 00 00       	sub    eax,0x340
c000a2bc:	83 f8 7f             	cmp    eax,0x7f
c000a2bf:	77 16                	ja     c000a2d7 <VAS::VAS(bool)+0x127>
c000a2c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2cc:	c1 e2 02             	shl    edx,0x2
c000a2cf:	01 d0                	add    eax,edx
c000a2d1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2d7:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2dc:	e9 78 ff ff ff       	jmp    c000a259 <VAS::VAS(bool)+0xa9>
c000a2e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f2:	83 e0 10             	and    eax,0x10
c000a2f5:	0f b6 c0             	movzx  eax,al
c000a2f8:	85 c0                	test   eax,eax
c000a2fa:	74 07                	je     c000a303 <VAS::VAS(bool)+0x153>
c000a2fc:	b8 03 41 00 00       	mov    eax,0x4103
c000a301:	eb 05                	jmp    c000a308 <VAS::VAS(bool)+0x158>
c000a303:	b8 03 40 00 00       	mov    eax,0x4003
c000a308:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a30c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a30f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a315:	89 02                	mov    DWORD PTR [edx],eax
c000a317:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a322:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a328:	83 ec 08             	sub    esp,0x8
c000a32b:	50                   	push   eax
c000a32c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a330:	e8 91 fc ff ff       	call   c0009fc6 <VAS::setCPUSpecific(unsigned long)>
c000a335:	83 c4 10             	add    esp,0x10
c000a338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a33c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a33f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a34a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a350:	83 e0 10             	and    eax,0x10
c000a353:	0f b6 c0             	movzx  eax,al
c000a356:	85 c0                	test   eax,eax
c000a358:	74 07                	je     c000a361 <VAS::VAS(bool)+0x1b1>
c000a35a:	b8 00 01 00 00       	mov    eax,0x100
c000a35f:	eb 05                	jmp    c000a366 <VAS::VAS(bool)+0x1b6>
c000a361:	b8 00 00 00 00       	mov    eax,0x0
c000a366:	09 c2                	or     edx,eax
c000a368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a36c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a36f:	05 fc 0f 00 00       	add    eax,0xffc
c000a374:	83 ca 03             	or     edx,0x3
c000a377:	89 10                	mov    DWORD PTR [eax],edx
c000a379:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a37e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a384:	83 ec 0c             	sub    esp,0xc
c000a387:	50                   	push   eax
c000a388:	e8 81 1c 00 00       	call   c000c00e <Device::getName()>
c000a38d:	83 c4 10             	add    esp,0x10
c000a390:	83 ec 08             	sub    esp,0x8
c000a393:	68 cf ff 01 c0       	push   0xc001ffcf
c000a398:	50                   	push   eax
c000a399:	e8 a2 63 ff ff       	call   c0000740 <strcmp>
c000a39e:	83 c4 10             	add    esp,0x10
c000a3a1:	85 c0                	test   eax,eax
c000a3a3:	0f 94 c0             	sete   al
c000a3a6:	0f b6 c0             	movzx  eax,al
c000a3a9:	85 c0                	test   eax,eax
c000a3ab:	0f 84 8b 00 00 00    	je     c000a43c <VAS::VAS(bool)+0x28c>
c000a3b1:	fa                   	cli    
c000a3b2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3b7:	83 c0 01             	add    eax,0x1
c000a3ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ca:	05 7c 09 00 00       	add    eax,0x97c
c000a3cf:	83 ec 0c             	sub    esp,0xc
c000a3d2:	50                   	push   eax
c000a3d3:	e8 aa d1 ff ff       	call   c0007582 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3d8:	83 c4 10             	add    esp,0x10
c000a3db:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3e0:	89 c3                	mov    ebx,eax
c000a3e2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ed:	05 7c 09 00 00       	add    eax,0x97c
c000a3f2:	83 ec 0c             	sub    esp,0xc
c000a3f5:	50                   	push   eax
c000a3f6:	e8 87 d1 ff ff       	call   c0007582 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3fb:	83 c4 10             	add    esp,0x10
c000a3fe:	83 ec 08             	sub    esp,0x8
c000a401:	50                   	push   eax
c000a402:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a406:	e8 d9 f4 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a40b:	83 c4 10             	add    esp,0x10
c000a40e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a410:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a415:	6a 11                	push   0x11
c000a417:	53                   	push   ebx
c000a418:	50                   	push   eax
c000a419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a41d:	e8 ae f8 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a42a:	83 e8 01             	sub    eax,0x1
c000a42d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a432:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a437:	85 c0                	test   eax,eax
c000a439:	75 01                	jne    c000a43c <VAS::VAS(bool)+0x28c>
c000a43b:	fb                   	sti    
c000a43c:	90                   	nop
c000a43d:	83 c4 28             	add    esp,0x28
c000a440:	5b                   	pop    ebx
c000a441:	c3                   	ret    

c000a442 <VAS::evict(unsigned long)>:
c000a442:	55                   	push   ebp
c000a443:	57                   	push   edi
c000a444:	56                   	push   esi
c000a445:	53                   	push   ebx
c000a446:	83 ec 1c             	sub    esp,0x1c
c000a449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a44d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a455:	e8 ec f2 ff ff       	call   c0009746 <Virt::allocateSwapfilePage()>
c000a45a:	89 c7                	mov    edi,eax
c000a45c:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000a461:	85 c0                	test   eax,eax
c000a463:	7e 40                	jle    c000a4a5 <VAS::evict(unsigned long)+0x63>
c000a465:	89 ee                	mov    esi,ebp
c000a467:	31 db                	xor    ebx,ebx
c000a469:	83 ec 0c             	sub    esp,0xc
c000a46c:	57                   	push   edi
c000a46d:	e8 be f2 ff ff       	call   c0009730 <Virt::swapIDToSector(unsigned long)>
c000a472:	89 34 24             	mov    DWORD PTR [esp],esi
c000a475:	31 d2                	xor    edx,edx
c000a477:	6a 01                	push   0x1
c000a479:	01 d8                	add    eax,ebx
c000a47b:	52                   	push   edx
c000a47c:	83 c3 01             	add    ebx,0x1
c000a47f:	50                   	push   eax
c000a480:	81 c6 00 02 00 00    	add    esi,0x200
c000a486:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a48d:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a494:	50                   	push   eax
c000a495:	e8 3c 2d 00 00       	call   c000d1d6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a49a:	83 c4 20             	add    esp,0x20
c000a49d:	39 1d 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,ebx
c000a4a3:	7f c4                	jg     c000a469 <VAS::evict(unsigned long)+0x27>
c000a4a5:	c1 e7 0b             	shl    edi,0xb
c000a4a8:	83 ec 08             	sub    esp,0x8
c000a4ab:	55                   	push   ebp
c000a4ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4b0:	50                   	push   eax
c000a4b1:	e8 2e f4 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a4b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4b8:	89 d1                	mov    ecx,edx
c000a4ba:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4c0:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4c6:	09 cf                	or     edi,ecx
c000a4c8:	89 38                	mov    DWORD PTR [eax],edi
c000a4ca:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4cd:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4d3:	83 c1 01             	add    ecx,0x1
c000a4d6:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4dc:	e8 48 d8 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c000a4e1:	0f 20 d8             	mov    eax,cr3
c000a4e4:	0f 22 d8             	mov    cr3,eax
c000a4e7:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4ec:	c7 44 24 40 dd ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ffdd
c000a4f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f8:	8d 50 01             	lea    edx,[eax+0x1]
c000a4fb:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a501:	83 c4 2c             	add    esp,0x2c
c000a504:	5b                   	pop    ebx
c000a505:	5e                   	pop    esi
c000a506:	5f                   	pop    edi
c000a507:	5d                   	pop    ebp
c000a508:	e9 3c 04 00 00       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>
c000a50d:	90                   	nop

c000a50e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a50e:	55                   	push   ebp
c000a50f:	57                   	push   edi
c000a510:	56                   	push   esi
c000a511:	53                   	push   ebx
c000a512:	83 ec 24             	sub    esp,0x24
c000a515:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a519:	53                   	push   ebx
c000a51a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a520:	68 ee ff 01 c0       	push   0xc001ffee
c000a525:	e8 1f 04 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a52a:	58                   	pop    eax
c000a52b:	5a                   	pop    edx
c000a52c:	53                   	push   ebx
c000a52d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a531:	51                   	push   ecx
c000a532:	e8 ad f3 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a537:	83 c4 10             	add    esp,0x10
c000a53a:	89 c6                	mov    esi,eax
c000a53c:	85 c0                	test   eax,eax
c000a53e:	0f 95 c0             	setne  al
c000a541:	85 db                	test   ebx,ebx
c000a543:	0f 95 c2             	setne  dl
c000a546:	21 d0                	and    eax,edx
c000a548:	89 c5                	mov    ebp,eax
c000a54a:	a8 01                	test   al,0x1
c000a54c:	75 0a                	jne    c000a558 <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a54e:	83 c4 1c             	add    esp,0x1c
c000a551:	89 e8                	mov    eax,ebp
c000a553:	5b                   	pop    ebx
c000a554:	5e                   	pop    esi
c000a555:	5f                   	pop    edi
c000a556:	5d                   	pop    ebp
c000a557:	c3                   	ret    
c000a558:	8b 06                	mov    eax,DWORD PTR [esi]
c000a55a:	a8 01                	test   al,0x1
c000a55c:	74 0c                	je     c000a56a <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a55e:	83 c4 1c             	add    esp,0x1c
c000a561:	31 ed                	xor    ebp,ebp
c000a563:	89 e8                	mov    eax,ebp
c000a565:	5b                   	pop    ebx
c000a566:	5e                   	pop    esi
c000a567:	5f                   	pop    edi
c000a568:	5d                   	pop    ebp
c000a569:	c3                   	ret    
c000a56a:	c1 e8 0b             	shr    eax,0xb
c000a56d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a571:	e8 1c d8 ff ff       	call   c0007d92 <Phys::allocatePage()>
c000a576:	8b 16                	mov    edx,DWORD PTR [esi]
c000a578:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a57e:	09 c2                	or     edx,eax
c000a580:	81 ca 01 08 00 00    	or     edx,0x801
c000a586:	89 16                	mov    DWORD PTR [esi],edx
c000a588:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000a58d:	85 c0                	test   eax,eax
c000a58f:	7e 44                	jle    c000a5d5 <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a591:	89 df                	mov    edi,ebx
c000a593:	31 f6                	xor    esi,esi
c000a595:	83 ec 0c             	sub    esp,0xc
c000a598:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a59c:	51                   	push   ecx
c000a59d:	e8 8e f1 ff ff       	call   c0009730 <Virt::swapIDToSector(unsigned long)>
c000a5a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5a5:	31 d2                	xor    edx,edx
c000a5a7:	6a 01                	push   0x1
c000a5a9:	01 f0                	add    eax,esi
c000a5ab:	52                   	push   edx
c000a5ac:	83 c6 01             	add    esi,0x1
c000a5af:	50                   	push   eax
c000a5b0:	81 c7 00 02 00 00    	add    edi,0x200
c000a5b6:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a5bd:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5c4:	50                   	push   eax
c000a5c5:	e8 a0 2b 00 00       	call   c000d16a <LogicalDisk::read(unsigned long long, int, void*)>
c000a5ca:	83 c4 20             	add    esp,0x20
c000a5cd:	39 35 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,esi
c000a5d3:	7f c0                	jg     c000a595 <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a5d5:	83 ec 04             	sub    esp,0x4
c000a5d8:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5dd:	83 e8 01             	sub    eax,0x1
c000a5e0:	50                   	push   eax
c000a5e1:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5e6:	53                   	push   ebx
c000a5e7:	68 01 00 02 c0       	push   0xc0020001
c000a5ec:	e8 58 03 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a5f1:	58                   	pop    eax
c000a5f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f6:	52                   	push   edx
c000a5f7:	e8 11 f1 ff ff       	call   c000970d <Virt::freeSwapfilePage(unsigned long)>
c000a5fc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a601:	83 c4 10             	add    esp,0x10
c000a604:	83 e8 01             	sub    eax,0x1
c000a607:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a60c:	85 c0                	test   eax,eax
c000a60e:	75 01                	jne    c000a611 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a610:	fb                   	sti    
c000a611:	0f 20 d8             	mov    eax,cr3
c000a614:	0f 22 d8             	mov    cr3,eax
c000a617:	e9 32 ff ff ff       	jmp    c000a54e <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a61c <VAS::scanForEviction()>:
c000a61c:	57                   	push   edi
c000a61d:	31 ff                	xor    edi,edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	83 ec 10             	sub    esp,0x10
c000a624:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a628:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a62b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a631:	75 0e                	jne    c000a641 <VAS::scanForEviction()+0x25>
c000a633:	89 da                	mov    edx,ebx
c000a635:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a638:	c1 ea 16             	shr    edx,0x16
c000a63b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a63f:	74 50                	je     c000a691 <VAS::scanForEviction()+0x75>
c000a641:	53                   	push   ebx
c000a642:	56                   	push   esi
c000a643:	e8 9c f2 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c000a648:	5a                   	pop    edx
c000a649:	8b 10                	mov    edx,DWORD PTR [eax]
c000a64b:	59                   	pop    ecx
c000a64c:	89 d1                	mov    ecx,edx
c000a64e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a654:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a65a:	74 40                	je     c000a69c <VAS::scanForEviction()+0x80>
c000a65c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a662:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a668:	76 2d                	jbe    c000a697 <VAS::scanForEviction()+0x7b>
c000a66a:	83 c7 01             	add    edi,0x1
c000a66d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a674:	83 ff 03             	cmp    edi,0x3
c000a677:	74 32                	je     c000a6ab <VAS::scanForEviction()+0x8f>
c000a679:	31 db                	xor    ebx,ebx
c000a67b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a681:	75 be                	jne    c000a641 <VAS::scanForEviction()+0x25>
c000a683:	89 da                	mov    edx,ebx
c000a685:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a688:	c1 ea 16             	shr    edx,0x16
c000a68b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a68f:	75 b0                	jne    c000a641 <VAS::scanForEviction()+0x25>
c000a691:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a697:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a69a:	eb 8f                	jmp    c000a62b <VAS::scanForEviction()+0xf>
c000a69c:	f6 c2 20             	test   dl,0x20
c000a69f:	74 13                	je     c000a6b4 <VAS::scanForEviction()+0x98>
c000a6a1:	83 e2 df             	and    edx,0xffffffdf
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6a9:	eb b1                	jmp    c000a65c <VAS::scanForEviction()+0x40>
c000a6ab:	83 c4 10             	add    esp,0x10
c000a6ae:	31 c0                	xor    eax,eax
c000a6b0:	5b                   	pop    ebx
c000a6b1:	5e                   	pop    esi
c000a6b2:	5f                   	pop    edi
c000a6b3:	c3                   	ret    
c000a6b4:	89 d0                	mov    eax,edx
c000a6b6:	83 ec 08             	sub    esp,0x8
c000a6b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6c2:	53                   	push   ebx
c000a6c3:	68 16 00 02 c0       	push   0xc0020016
c000a6c8:	e8 7c 02 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a6cd:	58                   	pop    eax
c000a6ce:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6d1:	5a                   	pop    edx
c000a6d2:	51                   	push   ecx
c000a6d3:	56                   	push   esi
c000a6d4:	e8 69 fd ff ff       	call   c000a442 <VAS::evict(unsigned long)>
c000a6d9:	5b                   	pop    ebx
c000a6da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6dd:	5f                   	pop    edi
c000a6de:	50                   	push   eax
c000a6df:	68 2a 00 02 c0       	push   0xc002002a
c000a6e4:	e8 60 02 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a6e9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	05 00 10 00 00       	add    eax,0x1000
c000a6f4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6fb:	83 c4 10             	add    esp,0x10
c000a6fe:	5b                   	pop    ebx
c000a6ff:	5e                   	pop    esi
c000a700:	5f                   	pop    edi
c000a701:	c3                   	ret    

c000a702 <mapVASFirstTime>:
c000a702:	55                   	push   ebp
c000a703:	57                   	push   edi
c000a704:	56                   	push   esi
c000a705:	53                   	push   ebx
c000a706:	83 ec 0c             	sub    esp,0xc
c000a709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a70e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a711:	83 fa 01             	cmp    edx,0x1
c000a714:	0f 84 cb 00 00 00    	je     c000a7e5 <mapVASFirstTime+0xe3>
c000a71a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a71d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a720:	c1 e5 15             	shl    ebp,0x15
c000a723:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a728:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a72d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a733:	29 eb                	sub    ebx,ebp
c000a735:	29 ef                	sub    edi,ebp
c000a737:	e8 56 d6 ff ff       	call   c0007d92 <Phys::allocatePage()>
c000a73c:	83 ec 0c             	sub    esp,0xc
c000a73f:	68 03 04 00 00       	push   0x403
c000a744:	6a 01                	push   0x1
c000a746:	53                   	push   ebx
c000a747:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74d:	50                   	push   eax
c000a74e:	56                   	push   esi
c000a74f:	e8 90 f8 ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a754:	83 c4 20             	add    esp,0x20
c000a757:	39 fb                	cmp    ebx,edi
c000a759:	75 dc                	jne    c000a737 <mapVASFirstTime+0x35>
c000a75b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a760:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a765:	29 eb                	sub    ebx,ebp
c000a767:	29 ef                	sub    edi,ebp
c000a769:	e8 24 d6 ff ff       	call   c0007d92 <Phys::allocatePage()>
c000a76e:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a772:	83 fa 01             	cmp    edx,0x1
c000a775:	19 d2                	sbb    edx,edx
c000a777:	83 ec 0c             	sub    esp,0xc
c000a77a:	83 e2 04             	and    edx,0x4
c000a77d:	81 c2 03 04 00 00    	add    edx,0x403
c000a783:	52                   	push   edx
c000a784:	6a 01                	push   0x1
c000a786:	53                   	push   ebx
c000a787:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a78d:	50                   	push   eax
c000a78e:	56                   	push   esi
c000a78f:	e8 50 f8 ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a794:	83 c4 20             	add    esp,0x20
c000a797:	39 df                	cmp    edi,ebx
c000a799:	75 ce                	jne    c000a769 <mapVASFirstTime+0x67>
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7a3:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7a9:	c1 eb 0c             	shr    ebx,0xc
c000a7ac:	6a 04                	push   0x4
c000a7ae:	6a ff                	push   0xffffffff
c000a7b0:	53                   	push   ebx
c000a7b1:	68 00 30 02 c0       	push   0xc0023000
c000a7b6:	56                   	push   esi
c000a7b7:	e8 98 f2 ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7bc:	83 c4 14             	add    esp,0x14
c000a7bf:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7c4:	6a 04                	push   0x4
c000a7c6:	6a ff                	push   0xffffffff
c000a7c8:	53                   	push   ebx
c000a7c9:	68 00 30 02 c0       	push   0xc0023000
c000a7ce:	50                   	push   eax
c000a7cf:	e8 80 f2 ff ff       	call   c0009a54 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7d4:	0f 20 d8             	mov    eax,cr3
c000a7d7:	0f 22 d8             	mov    cr3,eax
c000a7da:	83 c4 20             	add    esp,0x20
c000a7dd:	83 c4 0c             	add    esp,0xc
c000a7e0:	5b                   	pop    ebx
c000a7e1:	5e                   	pop    esi
c000a7e2:	5f                   	pop    edi
c000a7e3:	5d                   	pop    ebp
c000a7e4:	c3                   	ret    
c000a7e5:	83 ec 0c             	sub    esp,0xc
c000a7e8:	68 3d 00 02 c0       	push   0xc002003d
c000a7ed:	e8 57 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	83 c4 0c             	add    esp,0xc
c000a7f8:	5b                   	pop    ebx
c000a7f9:	5e                   	pop    esi
c000a7fa:	5f                   	pop    edi
c000a7fb:	5d                   	pop    ebp
c000a7fc:	c3                   	ret    

c000a7fd <__cxa_atexit>:
c000a7fd:	31 c0                	xor    eax,eax
c000a7ff:	c3                   	ret    

c000a800 <__cxa_finalize>:
c000a800:	c3                   	ret    

c000a801 <__stack_chk_fail>:
c000a801:	55                   	push   ebp
c000a802:	89 e5                	mov    ebp,esp
c000a804:	83 ec 10             	sub    esp,0x10
c000a807:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a80a:	68 56 00 02 c0       	push   0xc0020056
c000a80f:	e8 35 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a814:	58                   	pop    eax
c000a815:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a818:	5a                   	pop    edx
c000a819:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a81c:	68 56 00 02 c0       	push   0xc0020056
c000a821:	e8 23 01 00 00       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000a826:	c7 04 24 5e 00 02 c0 	mov    DWORD PTR [esp],0xc002005e
c000a82d:	e8 05 60 00 00       	call   c0010837 <KePanic(char const*)>
c000a832:	83 c4 10             	add    esp,0x10
c000a835:	c9                   	leave  
c000a836:	c3                   	ret    

c000a837 <__cxa_pure_virtual>:
c000a837:	83 ec 18             	sub    esp,0x18
c000a83a:	68 76 00 02 c0       	push   0xc0020076
c000a83f:	e8 f3 5f 00 00       	call   c0010837 <KePanic(char const*)>
c000a844:	83 c4 1c             	add    esp,0x1c
c000a847:	c3                   	ret    

c000a848 <operator new[](unsigned long)>:
c000a848:	e9 3a d2 ff ff       	jmp    c0007a87 <malloc>

c000a84d <operator delete(void*, unsigned long)>:
c000a84d:	e9 55 d2 ff ff       	jmp    c0007aa7 <rfree>

c000a852 <operator delete[](void*)>:
c000a852:	e9 50 d2 ff ff       	jmp    c0007aa7 <rfree>

c000a857 <operator delete[](void*, unsigned long)>:
c000a857:	e9 4b d2 ff ff       	jmp    c0007aa7 <rfree>

c000a85c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a85c:	57                   	push   edi
c000a85d:	56                   	push   esi
c000a85e:	53                   	push   ebx
c000a85f:	83 ec 20             	sub    esp,0x20
c000a862:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a866:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a86a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a872:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a87a:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a882:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a88a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a88f:	89 f7                	mov    edi,esi
c000a891:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a895:	eb 02                	jmp    c000a899 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3d>
c000a897:	89 c7                	mov    edi,eax
c000a899:	31 d2                	xor    edx,edx
c000a89b:	89 f8                	mov    eax,edi
c000a89d:	83 c3 01             	add    ebx,0x1
c000a8a0:	f7 f1                	div    ecx
c000a8a2:	39 cf                	cmp    edi,ecx
c000a8a4:	73 f1                	jae    c000a897 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3b>
c000a8a6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8a9:	eb 02                	jmp    c000a8ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8ab:	89 c6                	mov    esi,eax
c000a8ad:	31 d2                	xor    edx,edx
c000a8af:	89 f0                	mov    eax,esi
c000a8b1:	f7 f1                	div    ecx
c000a8b3:	83 eb 01             	sub    ebx,0x1
c000a8b6:	39 ce                	cmp    esi,ecx
c000a8b8:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8bc:	88 13                	mov    BYTE PTR [ebx],dl
c000a8be:	73 eb                	jae    c000a8ab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4f>
c000a8c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a8c4:	83 c4 20             	add    esp,0x20
c000a8c7:	5b                   	pop    ebx
c000a8c8:	5e                   	pop    esi
c000a8c9:	5f                   	pop    edi
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logc(char)>:
c000a8cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cf:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8d6:	75 12                	jne    c000a8ea <Dbg::logc(char)+0x1f>
c000a8d8:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8dd:	ec                   	in     al,dx
c000a8de:	a8 20                	test   al,0x20
c000a8e0:	74 fb                	je     c000a8dd <Dbg::logc(char)+0x12>
c000a8e2:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e7:	88 c8                	mov    al,cl
c000a8e9:	ee                   	out    dx,al
c000a8ea:	c3                   	ret    

c000a8eb <Dbg::logs(char*)>:
c000a8eb:	53                   	push   ebx
c000a8ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f3:	85 c0                	test   eax,eax
c000a8f5:	74 11                	je     c000a908 <Dbg::logs(char*)+0x1d>
c000a8f7:	83 c3 01             	add    ebx,0x1
c000a8fa:	50                   	push   eax
c000a8fb:	e8 cb ff ff ff       	call   c000a8cb <Dbg::logc(char)>
c000a900:	58                   	pop    eax
c000a901:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a904:	85 c0                	test   eax,eax
c000a906:	75 ef                	jne    c000a8f7 <Dbg::logs(char*)+0xc>
c000a908:	5b                   	pop    ebx
c000a909:	c3                   	ret    

c000a90a <Dbg::logWriteInt(unsigned int)>:
c000a90a:	83 ec 10             	sub    esp,0x10
c000a90d:	6a 0a                	push   0xa
c000a90f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a913:	50                   	push   eax
c000a914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a918:	50                   	push   eax
c000a919:	e8 3e ff ff ff       	call   c000a85c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91e:	50                   	push   eax
c000a91f:	e8 c7 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a924:	83 c4 20             	add    esp,0x20
c000a927:	c3                   	ret    

c000a928 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a928:	83 ec 10             	sub    esp,0x10
c000a92b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92f:	50                   	push   eax
c000a930:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a934:	50                   	push   eax
c000a935:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a939:	52                   	push   edx
c000a93a:	e8 1d ff ff ff       	call   c000a85c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93f:	50                   	push   eax
c000a940:	e8 a6 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a945:	83 c4 20             	add    esp,0x20
c000a948:	c3                   	ret    

c000a949 <Dbg::kprintf(char const*, ...)>:
c000a949:	55                   	push   ebp
c000a94a:	57                   	push   edi
c000a94b:	56                   	push   esi
c000a94c:	53                   	push   ebx
c000a94d:	83 ec 0c             	sub    esp,0xc
c000a950:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a957:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a95b:	74 08                	je     c000a965 <Dbg::kprintf(char const*, ...)+0x1c>
c000a95d:	83 c4 0c             	add    esp,0xc
c000a960:	5b                   	pop    ebx
c000a961:	5e                   	pop    esi
c000a962:	5f                   	pop    edi
c000a963:	5d                   	pop    ebp
c000a964:	c3                   	ret    
c000a965:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a969:	31 ff                	xor    edi,edi
c000a96b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a972:	85 c0                	test   eax,eax
c000a974:	74 e7                	je     c000a95d <Dbg::kprintf(char const*, ...)+0x14>
c000a976:	8d 77 01             	lea    esi,[edi+0x1]
c000a979:	83 f8 25             	cmp    eax,0x25
c000a97c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97f:	75 47                	jne    c000a9c8 <Dbg::kprintf(char const*, ...)+0x7f>
c000a981:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a984:	83 c7 02             	add    edi,0x2
c000a987:	83 e8 25             	sub    eax,0x25
c000a98a:	0f b6 c0             	movzx  eax,al
c000a98d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a990:	83 f8 53             	cmp    eax,0x53
c000a993:	0f 87 ce 00 00 00    	ja     c000aa67 <Dbg::kprintf(char const*, ...)+0x11e>
c000a999:	ff 24 85 8c 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff74]
c000a9a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a4:	89 c8                	mov    eax,ecx
c000a9a6:	83 c1 04             	add    ecx,0x4
c000a9a9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ad:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9af:	55                   	push   ebp
c000a9b0:	e8 55 ff ff ff       	call   c000a90a <Dbg::logWriteInt(unsigned int)>
c000a9b5:	58                   	pop    eax
c000a9b6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b9:	85 c0                	test   eax,eax
c000a9bb:	74 a0                	je     c000a95d <Dbg::kprintf(char const*, ...)+0x14>
c000a9bd:	8d 77 01             	lea    esi,[edi+0x1]
c000a9c0:	83 f8 25             	cmp    eax,0x25
c000a9c3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c6:	74 b9                	je     c000a981 <Dbg::kprintf(char const*, ...)+0x38>
c000a9c8:	50                   	push   eax
c000a9c9:	89 f7                	mov    edi,esi
c000a9cb:	e8 fb fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000a9d0:	89 ee                	mov    esi,ebp
c000a9d2:	58                   	pop    eax
c000a9d3:	eb e1                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d9:	89 c8                	mov    eax,ecx
c000a9db:	83 c1 04             	add    ecx,0x4
c000a9de:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9e4:	50                   	push   eax
c000a9e5:	e8 01 ff ff ff       	call   c000a8eb <Dbg::logs(char*)>
c000a9ea:	58                   	pop    eax
c000a9eb:	eb c9                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f1:	89 d0                	mov    eax,edx
c000a9f3:	83 c2 04             	add    edx,0x4
c000a9f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9fc:	50                   	push   eax
c000a9fd:	e8 08 ff ff ff       	call   c000a90a <Dbg::logWriteInt(unsigned int)>
c000aa02:	58                   	pop    eax
c000aa03:	eb b1                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa09:	89 d0                	mov    eax,edx
c000aa0b:	83 c2 04             	add    edx,0x4
c000aa0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa12:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa15:	50                   	push   eax
c000aa16:	e8 b0 fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa1b:	58                   	pop    eax
c000aa1c:	eb 98                	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa22:	89 c8                	mov    eax,ecx
c000aa24:	83 c1 04             	add    ecx,0x4
c000aa27:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa2b:	6a 10                	push   0x10
c000aa2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2f:	51                   	push   ecx
c000aa30:	e8 f3 fe ff ff       	call   c000a928 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa35:	5d                   	pop    ebp
c000aa36:	58                   	pop    eax
c000aa37:	e9 7a ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa40:	89 d0                	mov    eax,edx
c000aa42:	83 c2 08             	add    edx,0x8
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	6a 10                	push   0x10
c000aa4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa4d:	50                   	push   eax
c000aa4e:	e8 d5 fe ff ff       	call   c000a928 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa53:	58                   	pop    eax
c000aa54:	5a                   	pop    edx
c000aa55:	e9 5c ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa5a:	6a 25                	push   0x25
c000aa5c:	e8 6a fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa61:	5a                   	pop    edx
c000aa62:	e9 4f ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa67:	6a 25                	push   0x25
c000aa69:	e8 5d fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa6e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa72:	50                   	push   eax
c000aa73:	e8 53 fe ff ff       	call   c000a8cb <Dbg::logc(char)>
c000aa78:	5a                   	pop    edx
c000aa79:	59                   	pop    ecx
c000aa7a:	e9 37 ff ff ff       	jmp    c000a9b6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7f:	90                   	nop

c000aa80 <File::read(unsigned long long, void*, int*)>:
c000aa80:	53                   	push   ebx
c000aa81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa89:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa90:	83 f8 19             	cmp    eax,0x19
c000aa93:	77 35                	ja     c000aaca <File::read(unsigned long long, void*, int*)+0x4a>
c000aa95:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aa9c:	85 c0                	test   eax,eax
c000aa9e:	74 2a                	je     c000aaca <File::read(unsigned long long, void*, int*)+0x4a>
c000aaa0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaa6:	85 c0                	test   eax,eax
c000aaa8:	74 20                	je     c000aaca <File::read(unsigned long long, void*, int*)+0x4a>
c000aaaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aaae:	74 21                	je     c000aad1 <File::read(unsigned long long, void*, int*)+0x51>
c000aab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aab2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aab6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aabc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aac4:	5b                   	pop    ebx
c000aac5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aac8:	ff e0                	jmp    eax
c000aaca:	b8 0b 00 00 00       	mov    eax,0xb
c000aacf:	eb 05                	jmp    c000aad6 <File::read(unsigned long long, void*, int*)+0x56>
c000aad1:	b8 05 00 00 00       	mov    eax,0x5
c000aad6:	5b                   	pop    ebx
c000aad7:	c3                   	ret    

c000aad8 <File::write(unsigned long long, void*, int*)>:
c000aad8:	53                   	push   ebx
c000aad9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aadd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aae1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aae8:	83 f8 19             	cmp    eax,0x19
c000aaeb:	77 35                	ja     c000ab22 <File::write(unsigned long long, void*, int*)+0x4a>
c000aaed:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaf4:	85 c0                	test   eax,eax
c000aaf6:	74 2a                	je     c000ab22 <File::write(unsigned long long, void*, int*)+0x4a>
c000aaf8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 20                	je     c000ab22 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab06:	74 21                	je     c000ab29 <File::write(unsigned long long, void*, int*)+0x51>
c000ab08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab0e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab1c:	5b                   	pop    ebx
c000ab1d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab20:	ff e0                	jmp    eax
c000ab22:	b8 0b 00 00 00       	mov    eax,0xb
c000ab27:	eb 05                	jmp    c000ab2e <File::write(unsigned long long, void*, int*)+0x56>
c000ab29:	b8 05 00 00 00       	mov    eax,0x5
c000ab2e:	5b                   	pop    ebx
c000ab2f:	c3                   	ret    

c000ab30 <Directory::read(unsigned long long, void*, int*)>:
c000ab30:	53                   	push   ebx
c000ab31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab39:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab40:	83 f8 19             	cmp    eax,0x19
c000ab43:	77 35                	ja     c000ab7a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab45:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab4c:	85 c0                	test   eax,eax
c000ab4e:	74 2a                	je     c000ab7a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab50:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab56:	85 c0                	test   eax,eax
c000ab58:	74 20                	je     c000ab7a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab5e:	74 21                	je     c000ab81 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab66:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab74:	5b                   	pop    ebx
c000ab75:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab78:	ff e0                	jmp    eax
c000ab7a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7f:	eb 05                	jmp    c000ab86 <Directory::read(unsigned long long, void*, int*)+0x56>
c000ab81:	b8 05 00 00 00       	mov    eax,0x5
c000ab86:	5b                   	pop    ebx
c000ab87:	c3                   	ret    

c000ab88 <Directory::write(unsigned long long, void*, int*)>:
c000ab88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab8c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab93:	b8 0b 00 00 00       	mov    eax,0xb
c000ab98:	83 fa 19             	cmp    edx,0x19
c000ab9b:	77 18                	ja     c000abb5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab9d:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000aba4:	85 d2                	test   edx,edx
c000aba6:	74 0d                	je     c000abb5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aba8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abaf:	19 c0                	sbb    eax,eax
c000abb1:	83 e0 0a             	and    eax,0xa
c000abb4:	40                   	inc    eax
c000abb5:	c3                   	ret    

c000abb6 <File::isAtty()>:
c000abb6:	31 c0                	xor    eax,eax
c000abb8:	c3                   	ret    
c000abb9:	90                   	nop

c000abba <Directory::isAtty()>:
c000abba:	31 c0                	xor    eax,eax
c000abbc:	c3                   	ret    
c000abbd:	90                   	nop

c000abbe <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abbe:	b8 0a 00 00 00       	mov    eax,0xa
c000abc3:	c3                   	ret    

c000abc4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abc4:	b8 0a 00 00 00       	mov    eax,0xa
c000abc9:	c3                   	ret    

c000abca <Filesystem::allocateSwapfile(char const*, int)>:
c000abca:	31 c0                	xor    eax,eax
c000abcc:	31 d2                	xor    edx,edx
c000abce:	c3                   	ret    
c000abcf:	90                   	nop

c000abd0 <File::~File()>:
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdc:	89 10                	mov    DWORD PTR [eax],edx
c000abde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe2:	83 ec 0c             	sub    esp,0xc
c000abe5:	50                   	push   eax
c000abe6:	e8 95 e7 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	90                   	nop
c000abef:	83 c4 0c             	add    esp,0xc
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <File::~File()>:
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfe:	e8 cd ff ff ff       	call   c000abd0 <File::~File()>
c000ac03:	83 c4 10             	add    esp,0x10
c000ac06:	83 ec 08             	sub    esp,0x8
c000ac09:	68 14 01 00 00       	push   0x114
c000ac0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac12:	e8 36 fc ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	83 c4 0c             	add    esp,0xc
c000ac1d:	c3                   	ret    

c000ac1e <Directory::~Directory()>:
c000ac1e:	83 ec 0c             	sub    esp,0xc
c000ac21:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac2a:	89 10                	mov    DWORD PTR [eax],edx
c000ac2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac30:	83 ec 0c             	sub    esp,0xc
c000ac33:	50                   	push   eax
c000ac34:	e8 47 e7 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000ac39:	83 c4 10             	add    esp,0x10
c000ac3c:	90                   	nop
c000ac3d:	83 c4 0c             	add    esp,0xc
c000ac40:	c3                   	ret    
c000ac41:	90                   	nop

c000ac42 <Directory::~Directory()>:
c000ac42:	83 ec 0c             	sub    esp,0xc
c000ac45:	83 ec 0c             	sub    esp,0xc
c000ac48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac4c:	e8 cd ff ff ff       	call   c000ac1e <Directory::~Directory()>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	83 ec 08             	sub    esp,0x8
c000ac57:	68 14 01 00 00       	push   0x114
c000ac5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac60:	e8 e8 fb ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000ac65:	83 c4 10             	add    esp,0x10
c000ac68:	83 c4 0c             	add    esp,0xc
c000ac6b:	c3                   	ret    

c000ac6c <Filesystem::Filesystem()>:
c000ac6c:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000ac71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac75:	89 10                	mov    DWORD PTR [eax],edx
c000ac77:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ac7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac88:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ac8d:	90                   	nop
c000ac8e:	c3                   	ret    
c000ac8f:	90                   	nop

c000ac90 <Filesystem::~Filesystem()>:
c000ac90:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000ac95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac99:	89 10                	mov    DWORD PTR [eax],edx
c000ac9b:	90                   	nop
c000ac9c:	c3                   	ret    
c000ac9d:	90                   	nop

c000ac9e <Filesystem::~Filesystem()>:
c000ac9e:	83 ec 0c             	sub    esp,0xc
c000aca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca5:	e8 e6 ff ff ff       	call   c000ac90 <Filesystem::~Filesystem()>
c000acaa:	83 c4 04             	add    esp,0x4
c000acad:	83 ec 08             	sub    esp,0x8
c000acb0:	6a 08                	push   0x8
c000acb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acb6:	e8 92 fb ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000acbb:	83 c4 10             	add    esp,0x10
c000acbe:	83 c4 0c             	add    esp,0xc
c000acc1:	c3                   	ret    

c000acc2 <Fs::getcwd(Process*, char*, int)>:
c000acc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acc6:	31 c0                	xor    eax,eax
c000acc8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000accb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000accf:	7d 15                	jge    c000ace6 <Fs::getcwd(Process*, char*, int)+0x24>
c000acd1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acd5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000acdc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000acdf:	84 c9                	test   cl,cl
c000ace1:	74 06                	je     c000ace9 <Fs::getcwd(Process*, char*, int)+0x27>
c000ace3:	40                   	inc    eax
c000ace4:	eb e2                	jmp    c000acc8 <Fs::getcwd(Process*, char*, int)+0x6>
c000ace6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ace9:	31 c0                	xor    eax,eax
c000aceb:	c3                   	ret    

c000acec <Fs::initVFS()>:
c000acec:	83 ec 18             	sub    esp,0x18
c000acef:	6a 08                	push   0x8
c000acf1:	e8 91 cd ff ff       	call   c0007a87 <malloc>
c000acf6:	89 04 24             	mov    DWORD PTR [esp],eax
c000acf9:	e8 a2 dd 00 00       	call   c0018aa0 <FAT::FAT()>
c000acfe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad05:	e8 7d cd ff ff       	call   c0007a87 <malloc>
c000ad0a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad0d:	e8 b4 ec 00 00       	call   c00199c6 <ISO9660::ISO9660()>
c000ad12:	83 c4 1c             	add    esp,0x1c
c000ad15:	c3                   	ret    

c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad16:	55                   	push   ebp
c000ad17:	57                   	push   edi
c000ad18:	56                   	push   esi
c000ad19:	53                   	push   ebx
c000ad1a:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad20:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad27:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ad2e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ad35:	68 00 04 00 00       	push   0x400
c000ad3a:	6a 00                	push   0x0
c000ad3c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ad40:	56                   	push   esi
c000ad41:	e8 9a 57 ff ff       	call   c00004e0 <memset>
c000ad46:	83 c4 10             	add    esp,0x10
c000ad49:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad4d:	75 0b                	jne    c000ad5a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad4f:	50                   	push   eax
c000ad50:	50                   	push   eax
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	e8 d8 58 ff ff       	call   c0000630 <strcpy>
c000ad58:	eb 44                	jmp    c000ad9e <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ad5a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad5d:	83 f8 2f             	cmp    eax,0x2f
c000ad60:	74 05                	je     c000ad67 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad62:	83 f8 5c             	cmp    eax,0x5c
c000ad65:	75 18                	jne    c000ad7f <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ad67:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad6a:	3c 60                	cmp    al,0x60
c000ad6c:	7e 03                	jle    c000ad71 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad6e:	83 e8 20             	sub    eax,0x20
c000ad71:	88 04 24             	mov    BYTE PTR [esp],al
c000ad74:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ad7b:	50                   	push   eax
c000ad7c:	50                   	push   eax
c000ad7d:	eb 18                	jmp    c000ad97 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000ad7f:	50                   	push   eax
c000ad80:	50                   	push   eax
c000ad81:	55                   	push   ebp
c000ad82:	56                   	push   esi
c000ad83:	e8 a8 58 ff ff       	call   c0000630 <strcpy>
c000ad88:	5a                   	pop    edx
c000ad89:	59                   	pop    ecx
c000ad8a:	68 3b 11 02 c0       	push   0xc002113b
c000ad8f:	56                   	push   esi
c000ad90:	e8 9b 5a ff ff       	call   c0000830 <strcat>
c000ad95:	5d                   	pop    ebp
c000ad96:	58                   	pop    eax
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	e8 92 5a ff ff       	call   c0000830 <strcat>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ada4:	3c 60                	cmp    al,0x60
c000ada6:	7e 03                	jle    c000adab <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ada8:	83 e8 20             	sub    eax,0x20
c000adab:	88 04 24             	mov    BYTE PTR [esp],al
c000adae:	88 03                	mov    BYTE PTR [ebx],al
c000adb0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adb7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adbd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000adc1:	bf 03 00 00 00       	mov    edi,0x3
c000adc6:	b8 03 00 00 00       	mov    eax,0x3
c000adcb:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000adcf:	89 ea                	mov    edx,ebp
c000add1:	85 ed                	test   ebp,ebp
c000add3:	0f 84 97 00 00 00    	je     c000ae70 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000add9:	8d 4f 01             	lea    ecx,[edi+0x1]
c000addc:	83 fd 2f             	cmp    ebp,0x2f
c000addf:	74 05                	je     c000ade6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ade1:	83 fd 5c             	cmp    ebp,0x5c
c000ade4:	75 12                	jne    c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ade6:	89 c5                	mov    ebp,eax
c000ade8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aded:	74 09                	je     c000adf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000adef:	40                   	inc    eax
c000adf0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000adf4:	89 cf                	mov    edi,ecx
c000adf6:	eb d3                	jmp    c000adcb <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000adf8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000adfd:	0f be ea             	movsx  ebp,dl
c000ae00:	75 5e                	jne    c000ae60 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae02:	83 fd 2e             	cmp    ebp,0x2e
c000ae05:	75 59                	jne    c000ae60 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae07:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae0b:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000ae10:	74 18                	je     c000ae2a <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000ae12:	83 fd 2e             	cmp    ebp,0x2e
c000ae15:	74 53                	je     c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae17:	89 f9                	mov    ecx,edi
c000ae19:	41                   	inc    ecx
c000ae1a:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae1e:	83 fa 2f             	cmp    edx,0x2f
c000ae21:	74 f6                	je     c000ae19 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae23:	83 fa 5c             	cmp    edx,0x5c
c000ae26:	74 f1                	je     c000ae19 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae28:	eb ca                	jmp    c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae2a:	83 fd 2e             	cmp    ebp,0x2e
c000ae2d:	74 3b                	je     c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae2f:	83 f8 03             	cmp    eax,0x3
c000ae32:	74 c0                	je     c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae34:	41                   	inc    ecx
c000ae35:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae39:	83 fa 2f             	cmp    edx,0x2f
c000ae3c:	74 f6                	je     c000ae34 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae3e:	83 fa 5c             	cmp    edx,0x5c
c000ae41:	74 f1                	je     c000ae34 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae43:	48                   	dec    eax
c000ae44:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae48:	75 06                	jne    c000ae50 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae4a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae4e:	eb f3                	jmp    c000ae43 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000ae50:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae54:	74 07                	je     c000ae5d <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000ae56:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae5a:	48                   	dec    eax
c000ae5b:	eb f3                	jmp    c000ae50 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae5d:	40                   	inc    eax
c000ae5e:	eb 94                	jmp    c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae60:	83 fd 2f             	cmp    ebp,0x2f
c000ae63:	74 8f                	je     c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae65:	83 fd 5c             	cmp    ebp,0x5c
c000ae68:	74 8a                	je     c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae6a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ae6d:	40                   	inc    eax
c000ae6e:	eb 84                	jmp    c000adf4 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae70:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae74:	83 ec 0c             	sub    esp,0xc
c000ae77:	53                   	push   ebx
c000ae78:	e8 e3 56 ff ff       	call   c0000560 <strlen>
c000ae7d:	83 c4 10             	add    esp,0x10
c000ae80:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ae85:	75 26                	jne    c000aead <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000ae87:	83 ec 0c             	sub    esp,0xc
c000ae8a:	53                   	push   ebx
c000ae8b:	e8 d0 56 ff ff       	call   c0000560 <strlen>
c000ae90:	83 c4 10             	add    esp,0x10
c000ae93:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ae98:	74 26                	je     c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000ae9a:	83 ec 0c             	sub    esp,0xc
c000ae9d:	53                   	push   ebx
c000ae9e:	e8 bd 56 ff ff       	call   c0000560 <strlen>
c000aea3:	83 c4 10             	add    esp,0x10
c000aea6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aeab:	eb c7                	jmp    c000ae74 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000aead:	83 ec 0c             	sub    esp,0xc
c000aeb0:	53                   	push   ebx
c000aeb1:	e8 aa 56 ff ff       	call   c0000560 <strlen>
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aebe:	74 c7                	je     c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000aec0:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aec6:	5b                   	pop    ebx
c000aec7:	5e                   	pop    esi
c000aec8:	5f                   	pop    edi
c000aec9:	5d                   	pop    ebp
c000aeca:	c3                   	ret    
c000aecb:	90                   	nop

c000aecc <File::File(char const*, Process*)>:
c000aecc:	83 ec 0c             	sub    esp,0xc
c000aecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed3:	83 ec 08             	sub    esp,0x8
c000aed6:	6a 00                	push   0x0
c000aed8:	50                   	push   eax
c000aed9:	e8 bc e2 ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000aede:	83 c4 10             	add    esp,0x10
c000aee1:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeea:	89 10                	mov    DWORD PTR [eax],edx
c000aeec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aef0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefa:	83 c0 0d             	add    eax,0xd
c000aefd:	83 ec 04             	sub    esp,0x4
c000af00:	52                   	push   edx
c000af01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af05:	50                   	push   eax
c000af06:	e8 0b fe ff ff       	call   c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af12:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af15:	83 e8 41             	sub    eax,0x41
c000af18:	88 c2                	mov    dl,al
c000af1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af30:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af36:	0f b6 c0             	movzx  eax,al
c000af39:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af40:	85 c0                	test   eax,eax
c000af42:	74 3e                	je     c000af82 <File::File(char const*, Process*)+0xb6>
c000af44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af48:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af4e:	0f b6 c0             	movzx  eax,al
c000af51:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af58:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af5e:	85 c0                	test   eax,eax
c000af60:	75 20                	jne    c000af82 <File::File(char const*, Process*)+0xb6>
c000af62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af66:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af6c:	0f b6 c0             	movzx  eax,al
c000af6f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af76:	83 ec 0c             	sub    esp,0xc
c000af79:	50                   	push   eax
c000af7a:	e8 29 21 00 00       	call   c000d0a8 <LogicalDisk::mount()>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	90                   	nop
c000af83:	83 c4 0c             	add    esp,0xc
c000af86:	c3                   	ret    
c000af87:	90                   	nop

c000af88 <File::open(FileOpenMode)>:
c000af88:	53                   	push   ebx
c000af89:	b8 0b 00 00 00       	mov    eax,0xb
c000af8e:	83 ec 08             	sub    esp,0x8
c000af91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000af9c:	83 fa 19             	cmp    edx,0x19
c000af9f:	77 40                	ja     c000afe1 <File::open(FileOpenMode)+0x59>
c000afa1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afa8:	85 d2                	test   edx,edx
c000afaa:	74 35                	je     c000afe1 <File::open(FileOpenMode)+0x59>
c000afac:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afb2:	85 d2                	test   edx,edx
c000afb4:	74 2b                	je     c000afe1 <File::open(FileOpenMode)+0x59>
c000afb6:	b8 06 00 00 00       	mov    eax,0x6
c000afbb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afbf:	75 20                	jne    c000afe1 <File::open(FileOpenMode)+0x59>
c000afc1:	8b 02                	mov    eax,DWORD PTR [edx]
c000afc3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000afc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afcd:	51                   	push   ecx
c000afce:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afd1:	51                   	push   ecx
c000afd2:	52                   	push   edx
c000afd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000afd6:	83 c4 10             	add    esp,0x10
c000afd9:	85 c0                	test   eax,eax
c000afdb:	75 04                	jne    c000afe1 <File::open(FileOpenMode)+0x59>
c000afdd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000afe1:	83 c4 08             	add    esp,0x8
c000afe4:	5b                   	pop    ebx
c000afe5:	c3                   	ret    

c000afe6 <File::close()>:
c000afe6:	53                   	push   ebx
c000afe7:	b8 0b 00 00 00       	mov    eax,0xb
c000afec:	83 ec 08             	sub    esp,0x8
c000afef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aff3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000affa:	83 f9 19             	cmp    ecx,0x19
c000affd:	77 41                	ja     c000b040 <File::close()+0x5a>
c000afff:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b006:	85 db                	test   ebx,ebx
c000b008:	74 36                	je     c000b040 <File::close()+0x5a>
c000b00a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b011:	74 2d                	je     c000b040 <File::close()+0x5a>
c000b013:	b8 05 00 00 00       	mov    eax,0x5
c000b018:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b01c:	74 22                	je     c000b040 <File::close()+0x5a>
c000b01e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b022:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b029:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b02f:	53                   	push   ebx
c000b030:	53                   	push   ebx
c000b031:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b033:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b039:	50                   	push   eax
c000b03a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b03d:	83 c4 10             	add    esp,0x10
c000b040:	83 c4 08             	add    esp,0x8
c000b043:	5b                   	pop    ebx
c000b044:	c3                   	ret    
c000b045:	90                   	nop

c000b046 <File::seek(unsigned long long)>:
c000b046:	56                   	push   esi
c000b047:	b8 0b 00 00 00       	mov    eax,0xb
c000b04c:	53                   	push   ebx
c000b04d:	51                   	push   ecx
c000b04e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b052:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b056:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b05a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b061:	83 fa 19             	cmp    edx,0x19
c000b064:	77 31                	ja     c000b097 <File::seek(unsigned long long)+0x51>
c000b066:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b06d:	85 d2                	test   edx,edx
c000b06f:	74 26                	je     c000b097 <File::seek(unsigned long long)+0x51>
c000b071:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b077:	85 d2                	test   edx,edx
c000b079:	74 1c                	je     c000b097 <File::seek(unsigned long long)+0x51>
c000b07b:	b8 05 00 00 00       	mov    eax,0x5
c000b080:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b084:	74 11                	je     c000b097 <File::seek(unsigned long long)+0x51>
c000b086:	8b 02                	mov    eax,DWORD PTR [edx]
c000b088:	53                   	push   ebx
c000b089:	51                   	push   ecx
c000b08a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b090:	52                   	push   edx
c000b091:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b094:	83 c4 10             	add    esp,0x10
c000b097:	5a                   	pop    edx
c000b098:	5b                   	pop    ebx
c000b099:	5e                   	pop    esi
c000b09a:	c3                   	ret    
c000b09b:	90                   	nop

c000b09c <File::tell(unsigned long long*)>:
c000b09c:	83 ec 0c             	sub    esp,0xc
c000b09f:	b8 0b 00 00 00       	mov    eax,0xb
c000b0a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0af:	83 fa 19             	cmp    edx,0x19
c000b0b2:	77 34                	ja     c000b0e8 <File::tell(unsigned long long*)+0x4c>
c000b0b4:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0bb:	85 d2                	test   edx,edx
c000b0bd:	74 29                	je     c000b0e8 <File::tell(unsigned long long*)+0x4c>
c000b0bf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0c5:	85 d2                	test   edx,edx
c000b0c7:	74 1f                	je     c000b0e8 <File::tell(unsigned long long*)+0x4c>
c000b0c9:	b8 05 00 00 00       	mov    eax,0x5
c000b0ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0d2:	74 14                	je     c000b0e8 <File::tell(unsigned long long*)+0x4c>
c000b0d4:	50                   	push   eax
c000b0d5:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0e1:	52                   	push   edx
c000b0e2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	83 c4 0c             	add    esp,0xc
c000b0eb:	c3                   	ret    

c000b0ec <File::rewind()>:
c000b0ec:	83 ec 10             	sub    esp,0x10
c000b0ef:	6a 00                	push   0x0
c000b0f1:	6a 00                	push   0x0
c000b0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0f7:	e8 4a ff ff ff       	call   c000b046 <File::seek(unsigned long long)>
c000b0fc:	83 c4 1c             	add    esp,0x1c
c000b0ff:	c3                   	ret    

c000b100 <File::unlink()>:
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	b8 0b 00 00 00       	mov    eax,0xb
c000b108:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b10c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b113:	83 f9 19             	cmp    ecx,0x19
c000b116:	77 2f                	ja     c000b147 <File::unlink()+0x47>
c000b118:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b11f:	85 c9                	test   ecx,ecx
c000b121:	74 24                	je     c000b147 <File::unlink()+0x47>
c000b123:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b129:	85 c9                	test   ecx,ecx
c000b12b:	74 1a                	je     c000b147 <File::unlink()+0x47>
c000b12d:	b8 06 00 00 00       	mov    eax,0x6
c000b132:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b136:	75 0f                	jne    c000b147 <File::unlink()+0x47>
c000b138:	50                   	push   eax
c000b139:	83 c2 0d             	add    edx,0xd
c000b13c:	50                   	push   eax
c000b13d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13f:	52                   	push   edx
c000b140:	51                   	push   ecx
c000b141:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b144:	83 c4 10             	add    esp,0x10
c000b147:	83 c4 0c             	add    esp,0xc
c000b14a:	c3                   	ret    
c000b14b:	90                   	nop

c000b14c <File::rename(char const*)>:
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	b8 0b 00 00 00       	mov    eax,0xb
c000b154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b158:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15f:	83 f9 19             	cmp    ecx,0x19
c000b162:	77 32                	ja     c000b196 <File::rename(char const*)+0x4a>
c000b164:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b16b:	85 c9                	test   ecx,ecx
c000b16d:	74 27                	je     c000b196 <File::rename(char const*)+0x4a>
c000b16f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b175:	85 c9                	test   ecx,ecx
c000b177:	74 1d                	je     c000b196 <File::rename(char const*)+0x4a>
c000b179:	b8 06 00 00 00       	mov    eax,0x6
c000b17e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b182:	75 12                	jne    c000b196 <File::rename(char const*)+0x4a>
c000b184:	50                   	push   eax
c000b185:	83 c2 0d             	add    edx,0xd
c000b188:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b18e:	52                   	push   edx
c000b18f:	51                   	push   ecx
c000b190:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	83 c4 0c             	add    esp,0xc
c000b199:	c3                   	ret    

c000b19a <File::chfatattr(unsigned char, unsigned char)>:
c000b19a:	57                   	push   edi
c000b19b:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a0:	56                   	push   esi
c000b1a1:	53                   	push   ebx
c000b1a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1b5:	83 f9 19             	cmp    ecx,0x19
c000b1b8:	77 37                	ja     c000b1f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1ba:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 2c                	je     c000b1f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1cb:	85 c9                	test   ecx,ecx
c000b1cd:	74 22                	je     c000b1f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1cf:	b8 06 00 00 00       	mov    eax,0x6
c000b1d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1d8:	75 17                	jne    c000b1f1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1da:	89 f0                	mov    eax,esi
c000b1dc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b1de:	0f b6 f0             	movzx  esi,al
c000b1e1:	56                   	push   esi
c000b1e2:	83 c2 0d             	add    edx,0xd
c000b1e5:	0f b6 db             	movzx  ebx,bl
c000b1e8:	53                   	push   ebx
c000b1e9:	52                   	push   edx
c000b1ea:	51                   	push   ecx
c000b1eb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b1ee:	83 c4 10             	add    esp,0x10
c000b1f1:	5b                   	pop    ebx
c000b1f2:	5e                   	pop    esi
c000b1f3:	5f                   	pop    edi
c000b1f4:	c3                   	ret    
c000b1f5:	90                   	nop

c000b1f6 <File::exists()>:
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	31 c0                	xor    eax,eax
c000b1fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b206:	83 f9 19             	cmp    ecx,0x19
c000b209:	77 24                	ja     c000b22f <File::exists()+0x39>
c000b20b:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b212:	85 c9                	test   ecx,ecx
c000b214:	74 19                	je     c000b22f <File::exists()+0x39>
c000b216:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b21c:	85 c9                	test   ecx,ecx
c000b21e:	74 0f                	je     c000b22f <File::exists()+0x39>
c000b220:	50                   	push   eax
c000b221:	83 c2 0d             	add    edx,0xd
c000b224:	50                   	push   eax
c000b225:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b227:	52                   	push   edx
c000b228:	51                   	push   ecx
c000b229:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b22c:	83 c4 10             	add    esp,0x10
c000b22f:	83 c4 0c             	add    esp,0xc
c000b232:	c3                   	ret    
c000b233:	90                   	nop

c000b234 <File::stat(unsigned long long*, bool*)>:
c000b234:	56                   	push   esi
c000b235:	53                   	push   ebx
c000b236:	50                   	push   eax
c000b237:	b8 0b 00 00 00       	mov    eax,0xb
c000b23c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b244:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b248:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b24f:	83 f9 19             	cmp    ecx,0x19
c000b252:	77 3d                	ja     c000b291 <File::stat(unsigned long long*, bool*)+0x5d>
c000b254:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b25b:	85 c9                	test   ecx,ecx
c000b25d:	74 32                	je     c000b291 <File::stat(unsigned long long*, bool*)+0x5d>
c000b25f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b265:	85 c9                	test   ecx,ecx
c000b267:	74 28                	je     c000b291 <File::stat(unsigned long long*, bool*)+0x5d>
c000b269:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b26f:	74 13                	je     c000b284 <File::stat(unsigned long long*, bool*)+0x50>
c000b271:	83 ec 04             	sub    esp,0x4
c000b274:	56                   	push   esi
c000b275:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b27b:	51                   	push   ecx
c000b27c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b27f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b282:	eb 0a                	jmp    c000b28e <File::stat(unsigned long long*, bool*)+0x5a>
c000b284:	53                   	push   ebx
c000b285:	83 c2 0d             	add    edx,0xd
c000b288:	56                   	push   esi
c000b289:	52                   	push   edx
c000b28a:	51                   	push   ecx
c000b28b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b28e:	83 c4 10             	add    esp,0x10
c000b291:	5a                   	pop    edx
c000b292:	5b                   	pop    ebx
c000b293:	5e                   	pop    esi
c000b294:	c3                   	ret    

c000b295 <Fs::setcwd(Process*, char*)>:
c000b295:	55                   	push   ebp
c000b296:	57                   	push   edi
c000b297:	56                   	push   esi
c000b298:	53                   	push   ebx
c000b299:	81 ec 20 02 00 00    	sub    esp,0x220
c000b29f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2a6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2ac:	57                   	push   edi
c000b2ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2b4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2b8:	56                   	push   esi
c000b2b9:	e8 58 fa ff ff       	call   c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2be:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2c1:	e8 9a 52 ff ff       	call   c0000560 <strlen>
c000b2c6:	83 c4 10             	add    esp,0x10
c000b2c9:	83 f8 02             	cmp    eax,0x2
c000b2cc:	77 15                	ja     c000b2e3 <Fs::setcwd(Process*, char*)+0x4e>
c000b2ce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b2d3:	83 eb 41             	sub    ebx,0x41
c000b2d6:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b2dd:	85 c0                	test   eax,eax
c000b2df:	75 1c                	jne    c000b2fd <Fs::setcwd(Process*, char*)+0x68>
c000b2e1:	eb 2f                	jmp    c000b312 <Fs::setcwd(Process*, char*)+0x7d>
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	56                   	push   esi
c000b2e7:	e8 74 52 ff ff       	call   c0000560 <strlen>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	83 f8 03             	cmp    eax,0x3
c000b2f2:	75 57                	jne    c000b34b <Fs::setcwd(Process*, char*)+0xb6>
c000b2f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b2f9:	75 50                	jne    c000b34b <Fs::setcwd(Process*, char*)+0xb6>
c000b2fb:	eb d1                	jmp    c000b2ce <Fs::setcwd(Process*, char*)+0x39>
c000b2fd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b304:	75 0c                	jne    c000b312 <Fs::setcwd(Process*, char*)+0x7d>
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	50                   	push   eax
c000b30a:	e8 99 1d 00 00       	call   c000d0a8 <LogicalDisk::mount()>
c000b30f:	83 c4 10             	add    esp,0x10
c000b312:	b8 03 00 00 00       	mov    eax,0x3
c000b317:	83 fb 19             	cmp    ebx,0x19
c000b31a:	0f 87 c6 00 00 00    	ja     c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b320:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b327:	b8 05 00 00 00       	mov    eax,0x5
c000b32c:	85 d2                	test   edx,edx
c000b32e:	0f 84 b2 00 00 00    	je     c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b334:	b8 06 00 00 00       	mov    eax,0x6
c000b339:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b340:	0f 85 92 00 00 00    	jne    c000b3d8 <Fs::setcwd(Process*, char*)+0x143>
c000b346:	e9 9b 00 00 00       	jmp    c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b34b:	83 ec 0c             	sub    esp,0xc
c000b34e:	68 14 01 00 00       	push   0x114
c000b353:	e8 2f c7 ff ff       	call   c0007a87 <malloc>
c000b358:	83 c4 0c             	add    esp,0xc
c000b35b:	89 c3                	mov    ebx,eax
c000b35d:	55                   	push   ebp
c000b35e:	56                   	push   esi
c000b35f:	50                   	push   eax
c000b360:	e8 67 fb ff ff       	call   c000aecc <File::File(char const*, Process*)>
c000b365:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b36a:	83 c4 0c             	add    esp,0xc
c000b36d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b371:	50                   	push   eax
c000b372:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b376:	50                   	push   eax
c000b377:	53                   	push   ebx
c000b378:	e8 b7 fe ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c000b37d:	83 c4 10             	add    esp,0x10
c000b380:	83 f8 02             	cmp    eax,0x2
c000b383:	74 27                	je     c000b3ac <Fs::setcwd(Process*, char*)+0x117>
c000b385:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b38a:	75 1c                	jne    c000b3a8 <Fs::setcwd(Process*, char*)+0x113>
c000b38c:	b8 02 00 00 00       	mov    eax,0x2
c000b391:	85 db                	test   ebx,ebx
c000b393:	74 51                	je     c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b395:	83 ec 0c             	sub    esp,0xc
c000b398:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b39a:	53                   	push   ebx
c000b39b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	b8 02 00 00 00       	mov    eax,0x2
c000b3a6:	eb 3e                	jmp    c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b3a8:	85 c0                	test   eax,eax
c000b3aa:	74 1c                	je     c000b3c8 <Fs::setcwd(Process*, char*)+0x133>
c000b3ac:	b8 01 00 00 00       	mov    eax,0x1
c000b3b1:	85 db                	test   ebx,ebx
c000b3b3:	74 31                	je     c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b3b5:	83 ec 0c             	sub    esp,0xc
c000b3b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ba:	53                   	push   ebx
c000b3bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	b8 01 00 00 00       	mov    eax,0x1
c000b3c6:	eb 1e                	jmp    c000b3e6 <Fs::setcwd(Process*, char*)+0x151>
c000b3c8:	85 db                	test   ebx,ebx
c000b3ca:	74 0c                	je     c000b3d8 <Fs::setcwd(Process*, char*)+0x143>
c000b3cc:	83 ec 0c             	sub    esp,0xc
c000b3cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d1:	53                   	push   ebx
c000b3d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3d5:	83 c4 10             	add    esp,0x10
c000b3d8:	50                   	push   eax
c000b3d9:	50                   	push   eax
c000b3da:	56                   	push   esi
c000b3db:	57                   	push   edi
c000b3dc:	e8 4f 52 ff ff       	call   c0000630 <strcpy>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	31 c0                	xor    eax,eax
c000b3e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b3ec:	5b                   	pop    ebx
c000b3ed:	5e                   	pop    esi
c000b3ee:	5f                   	pop    edi
c000b3ef:	5d                   	pop    ebp
c000b3f0:	c3                   	ret    
c000b3f1:	90                   	nop

c000b3f2 <Directory::Directory(char const*, Process*)>:
c000b3f2:	83 ec 0c             	sub    esp,0xc
c000b3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f9:	83 ec 08             	sub    esp,0x8
c000b3fc:	6a 00                	push   0x0
c000b3fe:	50                   	push   eax
c000b3ff:	e8 96 dd ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	89 10                	mov    DWORD PTR [eax],edx
c000b412:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b416:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b420:	83 c0 0d             	add    eax,0xd
c000b423:	83 ec 04             	sub    esp,0x4
c000b426:	52                   	push   edx
c000b427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42b:	50                   	push   eax
c000b42c:	e8 e5 f8 ff ff       	call   c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b438:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b43b:	83 e8 41             	sub    eax,0x41
c000b43e:	88 c2                	mov    dl,al
c000b440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b444:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b456:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b45c:	0f b6 c0             	movzx  eax,al
c000b45f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b466:	85 c0                	test   eax,eax
c000b468:	74 3e                	je     c000b4a8 <Directory::Directory(char const*, Process*)+0xb6>
c000b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b474:	0f b6 c0             	movzx  eax,al
c000b477:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b47e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b484:	85 c0                	test   eax,eax
c000b486:	75 20                	jne    c000b4a8 <Directory::Directory(char const*, Process*)+0xb6>
c000b488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b492:	0f b6 c0             	movzx  eax,al
c000b495:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b49c:	83 ec 0c             	sub    esp,0xc
c000b49f:	50                   	push   eax
c000b4a0:	e8 03 1c 00 00       	call   c000d0a8 <LogicalDisk::mount()>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	90                   	nop
c000b4a9:	83 c4 0c             	add    esp,0xc
c000b4ac:	c3                   	ret    
c000b4ad:	90                   	nop

c000b4ae <Directory::open()>:
c000b4ae:	53                   	push   ebx
c000b4af:	b8 0b 00 00 00       	mov    eax,0xb
c000b4b4:	83 ec 08             	sub    esp,0x8
c000b4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4bb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4c2:	83 fa 19             	cmp    edx,0x19
c000b4c5:	77 3d                	ja     c000b504 <Directory::open()+0x56>
c000b4c7:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b4ce:	85 d2                	test   edx,edx
c000b4d0:	74 32                	je     c000b504 <Directory::open()+0x56>
c000b4d2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b4d8:	85 d2                	test   edx,edx
c000b4da:	74 28                	je     c000b504 <Directory::open()+0x56>
c000b4dc:	b8 06 00 00 00       	mov    eax,0x6
c000b4e1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b4e5:	75 1d                	jne    c000b504 <Directory::open()+0x56>
c000b4e7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b4ed:	50                   	push   eax
c000b4ee:	8b 02                	mov    eax,DWORD PTR [edx]
c000b4f0:	51                   	push   ecx
c000b4f1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b4f4:	51                   	push   ecx
c000b4f5:	52                   	push   edx
c000b4f6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b4f9:	83 c4 10             	add    esp,0x10
c000b4fc:	85 c0                	test   eax,eax
c000b4fe:	75 04                	jne    c000b504 <Directory::open()+0x56>
c000b500:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b504:	83 c4 08             	add    esp,0x8
c000b507:	5b                   	pop    ebx
c000b508:	c3                   	ret    
c000b509:	90                   	nop

c000b50a <Directory::close()>:
c000b50a:	53                   	push   ebx
c000b50b:	b8 0b 00 00 00       	mov    eax,0xb
c000b510:	83 ec 08             	sub    esp,0x8
c000b513:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b517:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b51e:	83 f9 19             	cmp    ecx,0x19
c000b521:	77 41                	ja     c000b564 <Directory::close()+0x5a>
c000b523:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b52a:	85 db                	test   ebx,ebx
c000b52c:	74 36                	je     c000b564 <Directory::close()+0x5a>
c000b52e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b535:	74 2d                	je     c000b564 <Directory::close()+0x5a>
c000b537:	b8 05 00 00 00       	mov    eax,0x5
c000b53c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b540:	74 22                	je     c000b564 <Directory::close()+0x5a>
c000b542:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b546:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b54d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b553:	53                   	push   ebx
c000b554:	53                   	push   ebx
c000b555:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b557:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b55d:	50                   	push   eax
c000b55e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b561:	83 c4 10             	add    esp,0x10
c000b564:	83 c4 08             	add    esp,0x8
c000b567:	5b                   	pop    ebx
c000b568:	c3                   	ret    
c000b569:	90                   	nop

c000b56a <Directory::unlink()>:
c000b56a:	83 ec 0c             	sub    esp,0xc
c000b56d:	b8 0b 00 00 00       	mov    eax,0xb
c000b572:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b576:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b57d:	83 f9 19             	cmp    ecx,0x19
c000b580:	77 2f                	ja     c000b5b1 <Directory::unlink()+0x47>
c000b582:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b589:	85 c9                	test   ecx,ecx
c000b58b:	74 24                	je     c000b5b1 <Directory::unlink()+0x47>
c000b58d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b593:	85 c9                	test   ecx,ecx
c000b595:	74 1a                	je     c000b5b1 <Directory::unlink()+0x47>
c000b597:	b8 06 00 00 00       	mov    eax,0x6
c000b59c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5a0:	75 0f                	jne    c000b5b1 <Directory::unlink()+0x47>
c000b5a2:	50                   	push   eax
c000b5a3:	83 c2 0d             	add    edx,0xd
c000b5a6:	50                   	push   eax
c000b5a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5a9:	52                   	push   edx
c000b5aa:	51                   	push   ecx
c000b5ab:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5ae:	83 c4 10             	add    esp,0x10
c000b5b1:	83 c4 0c             	add    esp,0xc
c000b5b4:	c3                   	ret    
c000b5b5:	90                   	nop

c000b5b6 <Directory::rename(char const*)>:
c000b5b6:	83 ec 0c             	sub    esp,0xc
c000b5b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5c9:	83 f9 19             	cmp    ecx,0x19
c000b5cc:	77 32                	ja     c000b600 <Directory::rename(char const*)+0x4a>
c000b5ce:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d5:	85 c9                	test   ecx,ecx
c000b5d7:	74 27                	je     c000b600 <Directory::rename(char const*)+0x4a>
c000b5d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5df:	85 c9                	test   ecx,ecx
c000b5e1:	74 1d                	je     c000b600 <Directory::rename(char const*)+0x4a>
c000b5e3:	b8 06 00 00 00       	mov    eax,0x6
c000b5e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ec:	75 12                	jne    c000b600 <Directory::rename(char const*)+0x4a>
c000b5ee:	50                   	push   eax
c000b5ef:	83 c2 0d             	add    edx,0xd
c000b5f2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5f8:	52                   	push   edx
c000b5f9:	51                   	push   ecx
c000b5fa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	83 c4 0c             	add    esp,0xc
c000b603:	c3                   	ret    

c000b604 <Directory::exists()>:
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	31 c0                	xor    eax,eax
c000b609:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b60d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b614:	83 f9 19             	cmp    ecx,0x19
c000b617:	77 24                	ja     c000b63d <Directory::exists()+0x39>
c000b619:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b620:	85 c9                	test   ecx,ecx
c000b622:	74 19                	je     c000b63d <Directory::exists()+0x39>
c000b624:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b62a:	85 c9                	test   ecx,ecx
c000b62c:	74 0f                	je     c000b63d <Directory::exists()+0x39>
c000b62e:	50                   	push   eax
c000b62f:	83 c2 0d             	add    edx,0xd
c000b632:	50                   	push   eax
c000b633:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b635:	52                   	push   edx
c000b636:	51                   	push   ecx
c000b637:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	83 c4 0c             	add    esp,0xc
c000b640:	c3                   	ret    
c000b641:	90                   	nop

c000b642 <Directory::read(dirent*)>:
c000b642:	83 ec 1c             	sub    esp,0x1c
c000b645:	b8 0b 00 00 00       	mov    eax,0xb
c000b64a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b64e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b655:	83 f9 19             	cmp    ecx,0x19
c000b658:	77 30                	ja     c000b68a <Directory::read(dirent*)+0x48>
c000b65a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b661:	85 c9                	test   ecx,ecx
c000b663:	74 25                	je     c000b68a <Directory::read(dirent*)+0x48>
c000b665:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b66c:	74 1c                	je     c000b68a <Directory::read(dirent*)+0x48>
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	8b 02                	mov    eax,DWORD PTR [edx]
c000b673:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b677:	51                   	push   ecx
c000b678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b67c:	6a 00                	push   0x0
c000b67e:	68 10 01 00 00       	push   0x110
c000b683:	52                   	push   edx
c000b684:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b687:	83 c4 20             	add    esp,0x20
c000b68a:	83 c4 1c             	add    esp,0x1c
c000b68d:	c3                   	ret    

c000b68e <Directory::create()>:
c000b68e:	83 ec 0c             	sub    esp,0xc
c000b691:	b8 0b 00 00 00       	mov    eax,0xb
c000b696:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b69a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a1:	83 f9 19             	cmp    ecx,0x19
c000b6a4:	77 2f                	ja     c000b6d5 <Directory::create()+0x47>
c000b6a6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ad:	85 c9                	test   ecx,ecx
c000b6af:	74 24                	je     c000b6d5 <Directory::create()+0x47>
c000b6b1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6b7:	85 c9                	test   ecx,ecx
c000b6b9:	74 1a                	je     c000b6d5 <Directory::create()+0x47>
c000b6bb:	b8 06 00 00 00       	mov    eax,0x6
c000b6c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6c4:	75 0f                	jne    c000b6d5 <Directory::create()+0x47>
c000b6c6:	50                   	push   eax
c000b6c7:	83 c2 0d             	add    edx,0xd
c000b6ca:	50                   	push   eax
c000b6cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6cd:	52                   	push   edx
c000b6ce:	51                   	push   ecx
c000b6cf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	83 c4 0c             	add    esp,0xc
c000b6d8:	c3                   	ret    
c000b6d9:	90                   	nop

c000b6da <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b6da:	b8 0a 00 00 00       	mov    eax,0xa
c000b6df:	c3                   	ret    

c000b6e0 <Bus::Bus(char const*)>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e7:	83 ec 08             	sub    esp,0x8
c000b6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ee:	50                   	push   eax
c000b6ef:	e8 1e 08 00 00       	call   c000bf12 <Device::Device(char const*)>
c000b6f4:	83 c4 10             	add    esp,0x10
c000b6f7:	ba 84 02 02 c0       	mov    edx,0xc0020284
c000b6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b700:	89 10                	mov    DWORD PTR [eax],edx
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b710:	90                   	nop
c000b711:	83 c4 0c             	add    esp,0xc
c000b714:	c3                   	ret    
c000b715:	90                   	nop
c000b716:	66 90                	xchg   ax,ax

c000b718 <Bus::~Bus()>:
c000b718:	83 ec 0c             	sub    esp,0xc
c000b71b:	ba 84 02 02 c0       	mov    edx,0xc0020284
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	89 10                	mov    DWORD PTR [eax],edx
c000b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72a:	83 ec 0c             	sub    esp,0xc
c000b72d:	50                   	push   eax
c000b72e:	e8 4d 05 00 00       	call   c000bc80 <Device::~Device()>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	90                   	nop
c000b737:	83 c4 0c             	add    esp,0xc
c000b73a:	c3                   	ret    
c000b73b:	90                   	nop

c000b73c <Bus::~Bus()>:
c000b73c:	83 ec 0c             	sub    esp,0xc
c000b73f:	83 ec 0c             	sub    esp,0xc
c000b742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b746:	e8 cd ff ff ff       	call   c000b718 <Bus::~Bus()>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	83 ec 08             	sub    esp,0x8
c000b751:	68 58 01 00 00       	push   0x158
c000b756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75a:	e8 ee f0 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 c4 0c             	add    esp,0xc
c000b765:	c3                   	ret    

c000b766 <beepThread(void*)>:
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b76e:	48                   	dec    eax
c000b76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b773:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b778:	75 01                	jne    c000b77b <beepThread(void*)+0x15>
c000b77a:	fb                   	sti    
c000b77b:	6b c2 0a             	imul   eax,edx,0xa
c000b77e:	83 ec 0c             	sub    esp,0xc
c000b781:	50                   	push   eax
c000b782:	e8 d5 9b 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c000b787:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b78e:	e8 a7 ba 00 00       	call   c001723a <HalMakeBeep(int)>
c000b793:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b79b:	83 c4 1c             	add    esp,0x1c
c000b79e:	e9 9d 9a 00 00       	jmp    c0015240 <blockTask(TaskState)>

c000b7a3 <Krnl::beep(int, int, bool)>:
c000b7a3:	56                   	push   esi
c000b7a4:	53                   	push   ebx
c000b7a5:	83 ec 10             	sub    esp,0x10
c000b7a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b4:	e8 81 ba 00 00       	call   c001723a <HalMakeBeep(int)>
c000b7b9:	89 f0                	mov    eax,esi
c000b7bb:	83 c4 10             	add    esp,0x10
c000b7be:	84 c0                	test   al,al
c000b7c0:	74 1e                	je     c000b7e0 <Krnl::beep(int, int, bool)+0x3d>
c000b7c2:	6b db 0a             	imul   ebx,ebx,0xa
c000b7c5:	83 ec 0c             	sub    esp,0xc
c000b7c8:	53                   	push   ebx
c000b7c9:	e8 8e 9b 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c000b7ce:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b7d6:	83 c4 14             	add    esp,0x14
c000b7d9:	5b                   	pop    ebx
c000b7da:	5e                   	pop    esi
c000b7db:	e9 5a ba 00 00       	jmp    c001723a <HalMakeBeep(int)>
c000b7e0:	68 e6 00 00 00       	push   0xe6
c000b7e5:	53                   	push   ebx
c000b7e6:	68 66 b7 00 c0       	push   0xc000b766
c000b7eb:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b7f1:	e8 fe 95 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000b7f6:	83 c4 14             	add    esp,0x14
c000b7f9:	5b                   	pop    ebx
c000b7fa:	5e                   	pop    esi
c000b7fb:	c3                   	ret    

c000b7fc <User::loadClockSettings(int)>:
c000b7fc:	53                   	push   ebx
c000b7fd:	83 ec 14             	sub    esp,0x14
c000b800:	68 14 01 00 00       	push   0x114
c000b805:	e8 7d c2 ff ff       	call   c0007a87 <malloc>
c000b80a:	83 c4 0c             	add    esp,0xc
c000b80d:	89 c3                	mov    ebx,eax
c000b80f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b815:	68 a8 02 02 c0       	push   0xc00202a8
c000b81a:	50                   	push   eax
c000b81b:	e8 ac f6 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c000b820:	58                   	pop    eax
c000b821:	5a                   	pop    edx
c000b822:	6a 01                	push   0x1
c000b824:	53                   	push   ebx
c000b825:	e8 5e f7 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c000b82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b82d:	e8 b4 f7 ff ff       	call   c000afe6 <File::close()>
c000b832:	83 c4 10             	add    esp,0x10
c000b835:	85 db                	test   ebx,ebx
c000b837:	74 0f                	je     c000b848 <User::loadClockSettings(int)+0x4c>
c000b839:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b83b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b83f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b842:	83 c4 08             	add    esp,0x8
c000b845:	5b                   	pop    ebx
c000b846:	ff e0                	jmp    eax
c000b848:	83 c4 08             	add    esp,0x8
c000b84b:	5b                   	pop    ebx
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop

c000b84e <Clock::Clock(char const*)>:
c000b84e:	83 ec 0c             	sub    esp,0xc
c000b851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b855:	83 ec 08             	sub    esp,0x8
c000b858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85c:	50                   	push   eax
c000b85d:	e8 b0 06 00 00       	call   c000bf12 <Device::Device(char const*)>
c000b862:	83 c4 10             	add    esp,0x10
c000b865:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000b86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b86e:	89 10                	mov    DWORD PTR [eax],edx
c000b870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b874:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b87e:	90                   	nop
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Clock::~Clock()>:
c000b884:	83 ec 0c             	sub    esp,0xc
c000b887:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000b88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b890:	89 10                	mov    DWORD PTR [eax],edx
c000b892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b896:	83 ec 0c             	sub    esp,0xc
c000b899:	50                   	push   eax
c000b89a:	e8 e1 03 00 00       	call   c000bc80 <Device::~Device()>
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	90                   	nop
c000b8a3:	83 c4 0c             	add    esp,0xc
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <Clock::~Clock()>:
c000b8a8:	83 ec 0c             	sub    esp,0xc
c000b8ab:	83 ec 0c             	sub    esp,0xc
c000b8ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b2:	e8 cd ff ff ff       	call   c000b884 <Clock::~Clock()>
c000b8b7:	83 c4 10             	add    esp,0x10
c000b8ba:	83 ec 08             	sub    esp,0x8
c000b8bd:	68 58 01 00 00       	push   0x158
c000b8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c6:	e8 82 ef ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000b8cb:	83 c4 10             	add    esp,0x10
c000b8ce:	83 c4 0c             	add    esp,0xc
c000b8d1:	c3                   	ret    

c000b8d2 <Clock::timeInSecondsLocal()>:
c000b8d2:	53                   	push   ebx
c000b8d3:	83 ec 14             	sub    esp,0x14
c000b8d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b8da:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8dc:	50                   	push   eax
c000b8dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8e0:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b8e7:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b8ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b8f3:	89 cb                	mov    ebx,ecx
c000b8f5:	c1 fb 1f             	sar    ebx,0x1f
c000b8f8:	01 c8                	add    eax,ecx
c000b8fa:	11 da                	adc    edx,ebx
c000b8fc:	83 c4 10             	add    esp,0x10
c000b8ff:	31 c9                	xor    ecx,ecx
c000b901:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b908:	74 05                	je     c000b90f <Clock::timeInSecondsLocal()+0x3d>
c000b90a:	b9 08 07 00 00       	mov    ecx,0x708
c000b90f:	31 db                	xor    ebx,ebx
c000b911:	01 c8                	add    eax,ecx
c000b913:	11 da                	adc    edx,ebx
c000b915:	83 c4 08             	add    esp,0x8
c000b918:	5b                   	pop    ebx
c000b919:	c3                   	ret    

c000b91a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b91a:	57                   	push   edi
c000b91b:	56                   	push   esi
c000b91c:	53                   	push   ebx
c000b91d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b921:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b925:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b92b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b92e:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b935:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b93b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b941:	99                   	cdq    
c000b942:	29 c6                	sub    esi,eax
c000b944:	19 d7                	sbb    edi,edx
c000b946:	89 f0                	mov    eax,esi
c000b948:	89 fa                	mov    edx,edi
c000b94a:	31 f6                	xor    esi,esi
c000b94c:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b953:	74 05                	je     c000b95a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b955:	be 08 07 00 00       	mov    esi,0x708
c000b95a:	31 ff                	xor    edi,edi
c000b95c:	29 f0                	sub    eax,esi
c000b95e:	19 fa                	sbb    edx,edi
c000b960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b964:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b968:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b96c:	89 d8                	mov    eax,ebx
c000b96e:	5b                   	pop    ebx
c000b96f:	5e                   	pop    esi
c000b970:	5f                   	pop    edi
c000b971:	ff e0                	jmp    eax

c000b973 <datetimeToSeconds(datetime_t)>:
c000b973:	55                   	push   ebp
c000b974:	57                   	push   edi
c000b975:	56                   	push   esi
c000b976:	53                   	push   ebx
c000b977:	83 ec 0c             	sub    esp,0xc
c000b97a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000b97e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b982:	0f b6 c7             	movzx  eax,bh
c000b985:	6b e8 3c             	imul   ebp,eax,0x3c
c000b988:	89 df                	mov    edi,ebx
c000b98a:	89 d6                	mov    esi,edx
c000b98c:	0f b6 db             	movzx  ebx,bl
c000b98f:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000b995:	c1 ef 10             	shr    edi,0x10
c000b998:	89 f8                	mov    eax,edi
c000b99a:	0f b6 f8             	movzx  edi,al
c000b99d:	0f b6 ce             	movzx  ecx,dh
c000b9a0:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000b9a4:	49                   	dec    ecx
c000b9a5:	c1 ee 10             	shr    esi,0x10
c000b9a8:	01 d8                	add    eax,ebx
c000b9aa:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ad:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000b9b3:	c1 f8 1f             	sar    eax,0x1f
c000b9b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9ba:	0f b6 c1             	movzx  eax,cl
c000b9bd:	0f b6 d2             	movzx  edx,dl
c000b9c0:	8b 0c 85 20 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfce0]
c000b9c7:	83 f8 01             	cmp    eax,0x1
c000b9ca:	0f b7 de             	movzx  ebx,si
c000b9cd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b9d1:	76 27                	jbe    c000b9fa <datetimeToSeconds(datetime_t)+0x87>
c000b9d3:	83 e6 03             	and    esi,0x3
c000b9d6:	75 22                	jne    c000b9fa <datetimeToSeconds(datetime_t)+0x87>
c000b9d8:	31 d2                	xor    edx,edx
c000b9da:	be 64 00 00 00       	mov    esi,0x64
c000b9df:	89 d8                	mov    eax,ebx
c000b9e1:	f7 f6                	div    esi
c000b9e3:	85 d2                	test   edx,edx
c000b9e5:	75 12                	jne    c000b9f9 <datetimeToSeconds(datetime_t)+0x86>
c000b9e7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b9ed:	be 90 01 00 00       	mov    esi,0x190
c000b9f2:	99                   	cdq    
c000b9f3:	f7 fe                	idiv   esi
c000b9f5:	85 d2                	test   edx,edx
c000b9f7:	75 01                	jne    c000b9fa <datetimeToSeconds(datetime_t)+0x87>
c000b9f9:	41                   	inc    ecx
c000b9fa:	83 fb 46             	cmp    ebx,0x46
c000b9fd:	76 48                	jbe    c000ba47 <datetimeToSeconds(datetime_t)+0xd4>
c000b9ff:	be 46 00 00 00       	mov    esi,0x46
c000ba04:	bf 64 00 00 00       	mov    edi,0x64
c000ba09:	bd 90 01 00 00       	mov    ebp,0x190
c000ba0e:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba13:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba19:	75 23                	jne    c000ba3e <datetimeToSeconds(datetime_t)+0xcb>
c000ba1b:	89 f0                	mov    eax,esi
c000ba1d:	99                   	cdq    
c000ba1e:	f7 ff                	idiv   edi
c000ba20:	85 d2                	test   edx,edx
c000ba22:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba27:	75 15                	jne    c000ba3e <datetimeToSeconds(datetime_t)+0xcb>
c000ba29:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba2f:	99                   	cdq    
c000ba30:	f7 fd                	idiv   ebp
c000ba32:	83 fa 01             	cmp    edx,0x1
c000ba35:	19 c0                	sbb    eax,eax
c000ba37:	f7 d0                	not    eax
c000ba39:	05 6e 01 00 00       	add    eax,0x16e
c000ba3e:	46                   	inc    esi
c000ba3f:	01 c1                	add    ecx,eax
c000ba41:	39 de                	cmp    esi,ebx
c000ba43:	7c c9                	jl     c000ba0e <datetimeToSeconds(datetime_t)+0x9b>
c000ba45:	eb 34                	jmp    c000ba7b <datetimeToSeconds(datetime_t)+0x108>
c000ba47:	74 32                	je     c000ba7b <datetimeToSeconds(datetime_t)+0x108>
c000ba49:	b8 45 00 00 00       	mov    eax,0x45
c000ba4e:	89 c2                	mov    edx,eax
c000ba50:	83 e2 03             	and    edx,0x3
c000ba53:	39 d8                	cmp    eax,ebx
c000ba55:	7e 0f                	jle    c000ba66 <datetimeToSeconds(datetime_t)+0xf3>
c000ba57:	83 fa 01             	cmp    edx,0x1
c000ba5a:	19 d2                	sbb    edx,edx
c000ba5c:	48                   	dec    eax
c000ba5d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba64:	eb e8                	jmp    c000ba4e <datetimeToSeconds(datetime_t)+0xdb>
c000ba66:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba6b:	85 d2                	test   edx,edx
c000ba6d:	75 0a                	jne    c000ba79 <datetimeToSeconds(datetime_t)+0x106>
c000ba6f:	83 fb 01             	cmp    ebx,0x1
c000ba72:	19 c0                	sbb    eax,eax
c000ba74:	05 6e 01 00 00       	add    eax,0x16e
c000ba79:	29 c1                	sub    ecx,eax
c000ba7b:	b8 80 51 01 00       	mov    eax,0x15180
c000ba80:	f7 e9                	imul   ecx
c000ba82:	03 04 24             	add    eax,DWORD PTR [esp]
c000ba85:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000ba89:	83 c4 0c             	add    esp,0xc
c000ba8c:	5b                   	pop    ebx
c000ba8d:	5e                   	pop    esi
c000ba8e:	5f                   	pop    edi
c000ba8f:	5d                   	pop    ebp
c000ba90:	c3                   	ret    
c000ba91:	90                   	nop

c000ba92 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ba92:	57                   	push   edi
c000ba93:	56                   	push   esi
c000ba94:	53                   	push   ebx
c000ba95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba99:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba9b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ba9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baa6:	e8 c8 fe ff ff       	call   c000b973 <datetimeToSeconds(datetime_t)>
c000baab:	59                   	pop    ecx
c000baac:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bab3:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bab9:	5b                   	pop    ebx
c000baba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bac0:	89 cb                	mov    ebx,ecx
c000bac2:	c1 fb 1f             	sar    ebx,0x1f
c000bac5:	29 c8                	sub    eax,ecx
c000bac7:	19 da                	sbb    edx,ebx
c000bac9:	31 c9                	xor    ecx,ecx
c000bacb:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bad2:	74 05                	je     c000bad9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bad4:	b9 08 07 00 00       	mov    ecx,0x708
c000bad9:	31 db                	xor    ebx,ebx
c000badb:	29 c8                	sub    eax,ecx
c000badd:	19 da                	sbb    edx,ebx
c000badf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bae3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bae7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000baeb:	5b                   	pop    ebx
c000baec:	89 f8                	mov    eax,edi
c000baee:	5e                   	pop    esi
c000baef:	5f                   	pop    edi
c000baf0:	ff e0                	jmp    eax

c000baf2 <secondsToDatetime(unsigned long long)>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bafd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb01:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb05:	6a 00                	push   0x0
c000bb07:	68 80 51 01 00       	push   0x15180
c000bb0c:	55                   	push   ebp
c000bb0d:	57                   	push   edi
c000bb0e:	e8 bd 2a 01 00       	call   c001e5d0 <__udivdi3>
c000bb13:	83 c4 10             	add    esp,0x10
c000bb16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb1a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb20:	6a 00                	push   0x0
c000bb22:	68 80 51 01 00       	push   0x15180
c000bb27:	55                   	push   ebp
c000bb28:	57                   	push   edi
c000bb29:	e8 a2 2b 01 00       	call   c001e6d0 <__umoddi3>
c000bb2e:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	99                   	cdq    
c000bb37:	f7 ff                	idiv   edi
c000bb39:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb3c:	89 d0                	mov    eax,edx
c000bb3e:	99                   	cdq    
c000bb3f:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb44:	f7 ff                	idiv   edi
c000bb46:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb49:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb4c:	85 db                	test   ebx,ebx
c000bb4e:	79 11                	jns    c000bb61 <secondsToDatetime(unsigned long long)+0x6f>
c000bb50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb54:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb5a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb5f:	eb 07                	jmp    c000bb68 <secondsToDatetime(unsigned long long)+0x76>
c000bb61:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb66:	89 d8                	mov    eax,ebx
c000bb68:	99                   	cdq    
c000bb69:	f7 f9                	idiv   ecx
c000bb6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb6f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bb74:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bb7c:	01 c3                	add    ebx,eax
c000bb7e:	31 d2                	xor    edx,edx
c000bb80:	89 d8                	mov    eax,ebx
c000bb82:	bf b4 05 00 00       	mov    edi,0x5b4
c000bb87:	f7 f1                	div    ecx
c000bb89:	31 d2                	xor    edx,edx
c000bb8b:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bb90:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bb93:	89 d8                	mov    eax,ebx
c000bb95:	f7 f7                	div    edi
c000bb97:	29 c1                	sub    ecx,eax
c000bb99:	31 d2                	xor    edx,edx
c000bb9b:	89 d8                	mov    eax,ebx
c000bb9d:	f7 f5                	div    ebp
c000bb9f:	29 c1                	sub    ecx,eax
c000bba1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bba6:	89 c8                	mov    eax,ecx
c000bba8:	31 d2                	xor    edx,edx
c000bbaa:	f7 f5                	div    ebp
c000bbac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbb0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbb5:	89 c8                	mov    eax,ecx
c000bbb7:	31 d2                	xor    edx,edx
c000bbb9:	f7 f5                	div    ebp
c000bbbb:	01 c3                	add    ebx,eax
c000bbbd:	31 d2                	xor    edx,edx
c000bbbf:	89 c8                	mov    eax,ecx
c000bbc1:	f7 f7                	div    edi
c000bbc3:	29 c3                	sub    ebx,eax
c000bbc5:	bf 99 00 00 00       	mov    edi,0x99
c000bbca:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bbd2:	29 c3                	sub    ebx,eax
c000bbd4:	31 d2                	xor    edx,edx
c000bbd6:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bbd9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bbdc:	83 c1 02             	add    ecx,0x2
c000bbdf:	bb 05 00 00 00       	mov    ebx,0x5
c000bbe4:	89 c8                	mov    eax,ecx
c000bbe6:	f7 f7                	div    edi
c000bbe8:	89 c7                	mov    edi,eax
c000bbea:	31 d2                	xor    edx,edx
c000bbec:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bbf2:	83 c0 02             	add    eax,0x2
c000bbf5:	f7 f3                	div    ebx
c000bbf7:	89 eb                	mov    ebx,ebp
c000bbf9:	29 c3                	sub    ebx,eax
c000bbfb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc01:	19 c0                	sbb    eax,eax
c000bc03:	31 d2                	xor    edx,edx
c000bc05:	83 e0 0c             	and    eax,0xc
c000bc08:	88 1e                	mov    BYTE PTR [esi],bl
c000bc0a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc0e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc16:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc1a:	83 f9 01             	cmp    ecx,0x1
c000bc1d:	0f 96 c2             	setbe  dl
c000bc20:	01 d0                	add    eax,edx
c000bc22:	41                   	inc    ecx
c000bc23:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc27:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	89 f0                	mov    eax,esi
c000bc2f:	5b                   	pop    ebx
c000bc30:	5e                   	pop    esi
c000bc31:	5f                   	pop    edi
c000bc32:	5d                   	pop    ebp
c000bc33:	c2 04 00             	ret    0x4

c000bc36 <Clock::timeInDatetimeLocal()>:
c000bc36:	53                   	push   ebx
c000bc37:	83 ec 14             	sub    esp,0x14
c000bc3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc42:	e8 8b fc ff ff       	call   c000b8d2 <Clock::timeInSecondsLocal()>
c000bc47:	83 c4 0c             	add    esp,0xc
c000bc4a:	52                   	push   edx
c000bc4b:	50                   	push   eax
c000bc4c:	53                   	push   ebx
c000bc4d:	e8 a0 fe ff ff       	call   c000baf2 <secondsToDatetime(unsigned long long)>
c000bc52:	83 c4 14             	add    esp,0x14
c000bc55:	89 d8                	mov    eax,ebx
c000bc57:	5b                   	pop    ebx
c000bc58:	c2 04 00             	ret    0x4
c000bc5b:	90                   	nop

c000bc5c <Device::hibernate()>:
c000bc5c:	c3                   	ret    
c000bc5d:	90                   	nop

c000bc5e <Device::wake()>:
c000bc5e:	c3                   	ret    
c000bc5f:	90                   	nop

c000bc60 <Device::detect()>:
c000bc60:	c3                   	ret    
c000bc61:	90                   	nop

c000bc62 <Device::disableLegacy()>:
c000bc62:	c3                   	ret    
c000bc63:	90                   	nop

c000bc64 <Device::powerSaving(PowerSavingLevel)>:
c000bc64:	c3                   	ret    
c000bc65:	90                   	nop

c000bc66 <DriverlessDevice::close(int, int, void*)>:
c000bc66:	31 c0                	xor    eax,eax
c000bc68:	c3                   	ret    
c000bc69:	90                   	nop

c000bc6a <DriverlessDevice::detect()>:
c000bc6a:	c3                   	ret    
c000bc6b:	90                   	nop

c000bc6c <DriverlessDevice::open(int, int, void*)>:
c000bc6c:	83 ec 18             	sub    esp,0x18
c000bc6f:	68 50 03 02 c0       	push   0xc0020350
c000bc74:	e8 be 4b 00 00       	call   c0010837 <KePanic(char const*)>
c000bc79:	83 c8 ff             	or     eax,0xffffffff
c000bc7c:	83 c4 1c             	add    esp,0x1c
c000bc7f:	c3                   	ret    

c000bc80 <Device::~Device()>:
c000bc80:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bc85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc89:	89 10                	mov    DWORD PTR [eax],edx
c000bc8b:	90                   	nop
c000bc8c:	c3                   	ret    
c000bc8d:	90                   	nop

c000bc8e <Device::~Device()>:
c000bc8e:	83 ec 0c             	sub    esp,0xc
c000bc91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bc95:	e8 e6 ff ff ff       	call   c000bc80 <Device::~Device()>
c000bc9a:	83 c4 04             	add    esp,0x4
c000bc9d:	83 ec 08             	sub    esp,0x8
c000bca0:	68 58 01 00 00       	push   0x158
c000bca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca9:	e8 9f eb ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000bcae:	83 c4 10             	add    esp,0x10
c000bcb1:	83 c4 0c             	add    esp,0xc
c000bcb4:	c3                   	ret    
c000bcb5:	90                   	nop

c000bcb6 <Device::findAndLoadDriver()>:
c000bcb6:	c7 44 24 04 6e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002036e
c000bcbe:	e9 86 ec ff ff       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>
c000bcc3:	90                   	nop

c000bcc4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcc4:	57                   	push   edi
c000bcc5:	b9 09 00 00 00       	mov    ecx,0x9
c000bcca:	56                   	push   esi
c000bccb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bccf:	81 c7 18 01 00 00    	add    edi,0x118
c000bcd5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bcd9:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c000bce0:	fc                   	cld    
c000bce1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bce3:	5e                   	pop    esi
c000bce4:	5f                   	pop    edi
c000bce5:	c3                   	ret    

c000bce6 <Device::preOpenACPI(void*, char*, char*)>:
c000bce6:	57                   	push   edi
c000bce7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bcec:	56                   	push   esi
c000bced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcf5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bcf9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd03:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd09:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd11:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd16:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd22:	5e                   	pop    esi
c000bd23:	5f                   	pop    edi
c000bd24:	c3                   	ret    
c000bd25:	90                   	nop

c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd26:	53                   	push   ebx
c000bd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd37:	0f b6 c0             	movzx  eax,al
c000bd3a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd42:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd46:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd4a:	5b                   	pop    ebx
c000bd4b:	e9 a8 05 00 00       	jmp    c000c2f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd50 <Device::getParent()>:
c000bd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd54:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd5a:	c3                   	ret    
c000bd5b:	90                   	nop

c000bd5c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd5c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bd61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd6d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd75:	e9 f5 06 00 00       	jmp    c000c46f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bd7a <Device::addChild(Device*)>:
c000bd7a:	53                   	push   ebx
c000bd7b:	83 ec 08             	sub    esp,0x8
c000bd7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd86:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bd8c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bd92:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bd94:	85 d2                	test   edx,edx
c000bd96:	74 04                	je     c000bd9c <Device::addChild(Device*)+0x22>
c000bd98:	89 d3                	mov    ebx,edx
c000bd9a:	eb f6                	jmp    c000bd92 <Device::addChild(Device*)+0x18>
c000bd9c:	83 ec 0c             	sub    esp,0xc
c000bd9f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bda2:	6a 08                	push   0x8
c000bda4:	e8 de bc ff ff       	call   c0007a87 <malloc>
c000bda9:	89 03                	mov    DWORD PTR [ebx],eax
c000bdab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdb8:	83 c4 18             	add    esp,0x18
c000bdbb:	5b                   	pop    ebx
c000bdbc:	c3                   	ret    
c000bdbd:	90                   	nop

c000bdbe <Device::removeAllChildren()>:
c000bdbe:	56                   	push   esi
c000bdbf:	53                   	push   ebx
c000bdc0:	52                   	push   edx
c000bdc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdc5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bdcb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdce:	74 17                	je     c000bde7 <Device::removeAllChildren()+0x29>
c000bdd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bdd3:	85 c0                	test   eax,eax
c000bdd5:	74 0c                	je     c000bde3 <Device::removeAllChildren()+0x25>
c000bdd7:	83 ec 0c             	sub    esp,0xc
c000bdda:	8b 10                	mov    edx,DWORD PTR [eax]
c000bddc:	50                   	push   eax
c000bddd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bde5:	eb e4                	jmp    c000bdcb <Device::removeAllChildren()+0xd>
c000bde7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bded:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdf3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bdf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be00:	58                   	pop    eax
c000be01:	5b                   	pop    ebx
c000be02:	5e                   	pop    esi
c000be03:	c3                   	ret    

c000be04 <Device::hibernateAll()>:
c000be04:	53                   	push   ebx
c000be05:	83 ec 14             	sub    esp,0x14
c000be08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be0e:	53                   	push   ebx
c000be0f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be1e:	74 0f                	je     c000be2f <Device::hibernateAll()+0x2b>
c000be20:	83 ec 0c             	sub    esp,0xc
c000be23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be26:	e8 d9 ff ff ff       	call   c000be04 <Device::hibernateAll()>
c000be2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be2d:	eb e9                	jmp    c000be18 <Device::hibernateAll()+0x14>
c000be2f:	83 c4 08             	add    esp,0x8
c000be32:	5b                   	pop    ebx
c000be33:	c3                   	ret    

c000be34 <Device::wakeAll()>:
c000be34:	53                   	push   ebx
c000be35:	83 ec 14             	sub    esp,0x14
c000be38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be3e:	53                   	push   ebx
c000be3f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be48:	83 c4 10             	add    esp,0x10
c000be4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be4e:	74 0f                	je     c000be5f <Device::wakeAll()+0x2b>
c000be50:	83 ec 0c             	sub    esp,0xc
c000be53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be56:	e8 d9 ff ff ff       	call   c000be34 <Device::wakeAll()>
c000be5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be5d:	eb e9                	jmp    c000be48 <Device::wakeAll()+0x14>
c000be5f:	83 c4 08             	add    esp,0x8
c000be62:	5b                   	pop    ebx
c000be63:	c3                   	ret    

c000be64 <Device::detectAll()>:
c000be64:	53                   	push   ebx
c000be65:	83 ec 14             	sub    esp,0x14
c000be68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be6e:	53                   	push   ebx
c000be6f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000be72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be78:	83 c4 10             	add    esp,0x10
c000be7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be7e:	74 0f                	je     c000be8f <Device::detectAll()+0x2b>
c000be80:	83 ec 0c             	sub    esp,0xc
c000be83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be86:	e8 d9 ff ff ff       	call   c000be64 <Device::detectAll()>
c000be8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be8d:	eb e9                	jmp    c000be78 <Device::detectAll()+0x14>
c000be8f:	83 c4 08             	add    esp,0x8
c000be92:	5b                   	pop    ebx
c000be93:	c3                   	ret    

c000be94 <Device::disableLegacyAll()>:
c000be94:	c3                   	ret    
c000be95:	90                   	nop

c000be96 <Device::loadDriversForAll()>:
c000be96:	c3                   	ret    
c000be97:	90                   	nop

c000be98 <Device::closeAll()>:
c000be98:	53                   	push   ebx
c000be99:	83 ec 08             	sub    esp,0x8
c000be9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bea0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bea2:	6a 00                	push   0x0
c000bea4:	6a 00                	push   0x0
c000bea6:	6a 00                	push   0x0
c000bea8:	53                   	push   ebx
c000bea9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000beac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beb8:	74 0f                	je     c000bec9 <Device::closeAll()+0x31>
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bec0:	e8 d3 ff ff ff       	call   c000be98 <Device::closeAll()>
c000bec5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec7:	eb e9                	jmp    c000beb2 <Device::closeAll()+0x1a>
c000bec9:	83 c4 08             	add    esp,0x8
c000becc:	5b                   	pop    ebx
c000becd:	c3                   	ret    

c000bece <Device::powerSavingAll(PowerSavingLevel)>:
c000bece:	56                   	push   esi
c000becf:	53                   	push   ebx
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bed7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bedb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bedd:	56                   	push   esi
c000bede:	53                   	push   ebx
c000bedf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bee2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bee8:	83 c4 10             	add    esp,0x10
c000beeb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beee:	74 0f                	je     c000beff <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bef0:	52                   	push   edx
c000bef1:	52                   	push   edx
c000bef2:	56                   	push   esi
c000bef3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bef6:	e8 d3 ff ff ff       	call   c000bece <Device::powerSavingAll(PowerSavingLevel)>
c000befb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000befd:	eb e9                	jmp    c000bee8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000beff:	58                   	pop    eax
c000bf00:	5b                   	pop    ebx
c000bf01:	5e                   	pop    esi
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <Device::setName(char const*)>:
c000bf04:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf0c:	e9 1f 47 ff ff       	jmp    c0000630 <strcpy>
c000bf11:	90                   	nop

c000bf12 <Device::Device(char const*)>:
c000bf12:	83 ec 1c             	sub    esp,0x1c
c000bf15:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bf1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf1e:	89 10                	mov    DWORD PTR [eax],edx
c000bf20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf24:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf32:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf40:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf58:	83 ec 08             	sub    esp,0x8
c000bf5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf63:	e8 9c ff ff ff       	call   c000bf04 <Device::setName(char const*)>
c000bf68:	83 c4 10             	add    esp,0x10
c000bf6b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bf73:	83 ec 0c             	sub    esp,0xc
c000bf76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf7a:	e8 08 bb ff ff       	call   c0007a87 <malloc>
c000bf7f:	83 c4 10             	add    esp,0x10
c000bf82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf93:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bf99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf9d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfa3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfad:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbe:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffe:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c008:	90                   	nop
c000c009:	83 c4 1c             	add    esp,0x1c
c000c00c:	c3                   	ret    
c000c00d:	90                   	nop

c000c00e <Device::getName()>:
c000c00e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c012:	05 d0 00 00 00       	add    eax,0xd0
c000c017:	c3                   	ret    

c000c018 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c018:	83 ec 0c             	sub    esp,0xc
c000c01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c01f:	83 ec 08             	sub    esp,0x8
c000c022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c026:	50                   	push   eax
c000c027:	e8 e6 fe ff ff       	call   c000bf12 <Device::Device(char const*)>
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c000c034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c038:	89 10                	mov    DWORD PTR [eax],edx
c000c03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c048:	90                   	nop
c000c049:	83 c4 0c             	add    esp,0xc
c000c04c:	c3                   	ret    
c000c04d:	90                   	nop

c000c04e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c04e:	57                   	push   edi
c000c04f:	56                   	push   esi
c000c050:	53                   	push   ebx
c000c051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c055:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c059:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c05d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c063:	75 0c                	jne    c000c071 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c065:	52                   	push   edx
c000c066:	52                   	push   edx
c000c067:	53                   	push   ebx
c000c068:	56                   	push   esi
c000c069:	e8 14 2a 01 00       	call   c001ea82 <LinkedList<Device>::addElement(Device*)>
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c077:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c07a:	74 12                	je     c000c08e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c07c:	50                   	push   eax
c000c07d:	57                   	push   edi
c000c07e:	56                   	push   esi
c000c07f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c082:	e8 c7 ff ff ff       	call   c000c04e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c087:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	eb e9                	jmp    c000c077 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c08e:	5b                   	pop    ebx
c000c08f:	5e                   	pop    esi
c000c090:	5f                   	pop    edi
c000c091:	c3                   	ret    

c000c092 <getDevicesOfType(DeviceType)>:
c000c092:	53                   	push   ebx
c000c093:	83 ec 14             	sub    esp,0x14
c000c096:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c09a:	53                   	push   ebx
c000c09b:	e8 be 2a 01 00       	call   c001eb5e <LinkedList<Device>::LinkedList()>
c000c0a0:	83 c4 0c             	add    esp,0xc
c000c0a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0a7:	53                   	push   ebx
c000c0a8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0ae:	e8 9b ff ff ff       	call   c000c04e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0b3:	83 c4 18             	add    esp,0x18
c000c0b6:	89 d8                	mov    eax,ebx
c000c0b8:	5b                   	pop    ebx
c000c0b9:	c2 04 00             	ret    0x4

c000c0bc <HardDiskController::HardDiskController(char const*)>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c3:	83 ec 08             	sub    esp,0x8
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	50                   	push   eax
c000c0cb:	e8 42 fe ff ff       	call   c000bf12 <Device::Device(char const*)>
c000c0d0:	83 c4 10             	add    esp,0x10
c000c0d3:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0dc:	89 10                	mov    DWORD PTR [eax],edx
c000c0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c0ec:	90                   	nop
c000c0ed:	83 c4 0c             	add    esp,0xc
c000c0f0:	c3                   	ret    
c000c0f1:	90                   	nop
c000c0f2:	66 90                	xchg   ax,ax

c000c0f4 <HardDiskController::~HardDiskController()>:
c000c0f4:	83 ec 0c             	sub    esp,0xc
c000c0f7:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c100:	89 10                	mov    DWORD PTR [eax],edx
c000c102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c106:	83 ec 0c             	sub    esp,0xc
c000c109:	50                   	push   eax
c000c10a:	e8 71 fb ff ff       	call   c000bc80 <Device::~Device()>
c000c10f:	83 c4 10             	add    esp,0x10
c000c112:	90                   	nop
c000c113:	83 c4 0c             	add    esp,0xc
c000c116:	c3                   	ret    
c000c117:	90                   	nop

c000c118 <HardDiskController::~HardDiskController()>:
c000c118:	83 ec 0c             	sub    esp,0xc
c000c11b:	83 ec 0c             	sub    esp,0xc
c000c11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c122:	e8 cd ff ff ff       	call   c000c0f4 <HardDiskController::~HardDiskController()>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	83 ec 08             	sub    esp,0x8
c000c12d:	68 58 01 00 00       	push   0x158
c000c132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c136:	e8 12 e7 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	83 c4 0c             	add    esp,0xc
c000c141:	c3                   	ret    

c000c142 <PhysicalDisk::eject()>:
c000c142:	83 c8 ff             	or     eax,0xffffffff
c000c145:	c3                   	ret    

c000c146 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c146:	83 ec 0c             	sub    esp,0xc
c000c149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14d:	83 ec 08             	sub    esp,0x8
c000c150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c154:	50                   	push   eax
c000c155:	e8 b8 fd ff ff       	call   c000bf12 <Device::Device(char const*)>
c000c15a:	83 c4 10             	add    esp,0x10
c000c15d:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c166:	89 10                	mov    DWORD PTR [eax],edx
c000c168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c177:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c182:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c194:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1a8:	90                   	nop
c000c1a9:	83 c4 0c             	add    esp,0xc
c000c1ac:	c3                   	ret    
c000c1ad:	90                   	nop

c000c1ae <PhysicalDisk::startCache()>:
c000c1ae:	56                   	push   esi
c000c1af:	53                   	push   ebx
c000c1b0:	83 ec 10             	sub    esp,0x10
c000c1b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b7:	6a 44                	push   0x44
c000c1b9:	e8 c9 b8 ff ff       	call   c0007a87 <malloc>
c000c1be:	89 c6                	mov    esi,eax
c000c1c0:	58                   	pop    eax
c000c1c1:	5a                   	pop    edx
c000c1c2:	53                   	push   ebx
c000c1c3:	56                   	push   esi
c000c1c4:	e8 8b 17 00 00       	call   c000d954 <VCache::VCache(PhysicalDisk*)>
c000c1c9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c1cf:	83 c4 14             	add    esp,0x14
c000c1d2:	5b                   	pop    ebx
c000c1d3:	5e                   	pop    esi
c000c1d4:	c3                   	ret    
c000c1d5:	90                   	nop

c000c1d6 <PhysicalDisk::~PhysicalDisk()>:
c000c1d6:	83 ec 0c             	sub    esp,0xc
c000c1d9:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e2:	89 10                	mov    DWORD PTR [eax],edx
c000c1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e8:	83 ec 0c             	sub    esp,0xc
c000c1eb:	50                   	push   eax
c000c1ec:	e8 8f fa ff ff       	call   c000bc80 <Device::~Device()>
c000c1f1:	83 c4 10             	add    esp,0x10
c000c1f4:	90                   	nop
c000c1f5:	83 c4 0c             	add    esp,0xc
c000c1f8:	c3                   	ret    
c000c1f9:	90                   	nop

c000c1fa <PhysicalDisk::~PhysicalDisk()>:
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	83 ec 0c             	sub    esp,0xc
c000c200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c204:	e8 cd ff ff ff       	call   c000c1d6 <PhysicalDisk::~PhysicalDisk()>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	83 ec 08             	sub    esp,0x8
c000c20f:	68 6c 01 00 00       	push   0x16c
c000c214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c218:	e8 30 e6 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000c21d:	83 c4 10             	add    esp,0x10
c000c220:	83 c4 0c             	add    esp,0xc
c000c223:	c3                   	ret    

c000c224 <int_handler>:
c000c224:	55                   	push   ebp
c000c225:	57                   	push   edi
c000c226:	56                   	push   esi
c000c227:	53                   	push   ebx
c000c228:	83 ec 0c             	sub    esp,0xc
c000c22b:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c232:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c236:	74 0b                	je     c000c243 <int_handler+0x1f>
c000c238:	fa                   	cli    
c000c239:	f4                   	hlt    
c000c23a:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c241:	75 f5                	jne    c000c238 <int_handler+0x14>
c000c243:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c246:	8d 46 e0             	lea    eax,[esi-0x20]
c000c249:	83 f8 17             	cmp    eax,0x17
c000c24c:	76 40                	jbe    c000c28e <int_handler+0x6a>
c000c24e:	c1 e6 04             	shl    esi,0x4
c000c251:	31 db                	xor    ebx,ebx
c000c253:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c259:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c25f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c263:	85 c0                	test   eax,eax
c000c265:	74 13                	je     c000c27a <int_handler+0x56>
c000c267:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c26a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c26e:	74 2c                	je     c000c29c <int_handler+0x78>
c000c270:	83 ec 08             	sub    esp,0x8
c000c273:	52                   	push   edx
c000c274:	57                   	push   edi
c000c275:	ff d0                	call   eax
c000c277:	83 c4 10             	add    esp,0x10
c000c27a:	83 c3 01             	add    ebx,0x1
c000c27d:	83 fb 04             	cmp    ebx,0x4
c000c280:	75 dd                	jne    c000c25f <int_handler+0x3b>
c000c282:	83 c4 0c             	add    esp,0xc
c000c285:	31 c0                	xor    eax,eax
c000c287:	31 d2                	xor    edx,edx
c000c289:	5b                   	pop    ebx
c000c28a:	5e                   	pop    esi
c000c28b:	5f                   	pop    edi
c000c28c:	5d                   	pop    ebp
c000c28d:	c3                   	ret    
c000c28e:	83 ec 0c             	sub    esp,0xc
c000c291:	50                   	push   eax
c000c292:	e8 e0 af 00 00       	call   c0017277 <HalEndOfInterrupt(int)>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	eb b2                	jmp    c000c24e <int_handler+0x2a>
c000c29c:	83 ec 08             	sub    esp,0x8
c000c29f:	52                   	push   edx
c000c2a0:	57                   	push   edi
c000c2a1:	ff d0                	call   eax
c000c2a3:	83 c4 10             	add    esp,0x10
c000c2a6:	83 c4 0c             	add    esp,0xc
c000c2a9:	5b                   	pop    ebx
c000c2aa:	5e                   	pop    esi
c000c2ab:	5f                   	pop    edi
c000c2ac:	5d                   	pop    ebp
c000c2ad:	c3                   	ret    

c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2ae:	56                   	push   esi
c000c2af:	31 c0                	xor    eax,eax
c000c2b1:	53                   	push   ebx
c000c2b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2ba:	89 ca                	mov    edx,ecx
c000c2bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2c0:	c1 e2 04             	shl    edx,0x4
c000c2c3:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c2cb:	74 17                	je     c000c2e4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c2cd:	83 c0 01             	add    eax,0x1
c000c2d0:	83 f8 04             	cmp    eax,0x4
c000c2d3:	75 ee                	jne    c000c2c3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c2d5:	c7 44 24 0c 64 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020464
c000c2dd:	5b                   	pop    ebx
c000c2de:	5e                   	pop    esi
c000c2df:	e9 53 45 00 00       	jmp    c0010837 <KePanic(char const*)>
c000c2e4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c2e7:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c2ee:	5b                   	pop    ebx
c000c2ef:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c2f6:	5e                   	pop    esi
c000c2f7:	c3                   	ret    

c000c2f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c2f8:	55                   	push   ebp
c000c2f9:	57                   	push   edi
c000c2fa:	56                   	push   esi
c000c2fb:	53                   	push   ebx
c000c2fc:	83 ec 0c             	sub    esp,0xc
c000c2ff:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c305:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c309:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c30d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c314:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c317:	74 57                	je     c000c370 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c319:	89 c7                	mov    edi,eax
c000c31b:	84 c0                	test   al,al
c000c31d:	74 1d                	je     c000c33c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c31f:	83 fe 0f             	cmp    esi,0xf
c000c322:	0f 8f d9 00 00 00    	jg     c000c401 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c328:	0f b6 b6 a0 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde160]
c000c32f:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c337:	d1 ef                	shr    edi,1
c000c339:	83 e7 01             	and    edi,0x1
c000c33c:	83 ec 08             	sub    esp,0x8
c000c33f:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c344:	31 db                	xor    ebx,ebx
c000c346:	50                   	push   eax
c000c347:	68 71 04 02 c0       	push   0xc0020471
c000c34c:	e8 f8 e5 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000c351:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	85 c0                	test   eax,eax
c000c35b:	7f 59                	jg     c000c3b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c35d:	83 ec 0c             	sub    esp,0xc
c000c360:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c363:	68 88 04 02 c0       	push   0xc0020488
c000c368:	e8 ca 44 00 00       	call   c0010837 <KePanic(char const*)>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 e8                	mov    eax,ebp
c000c372:	31 d2                	xor    edx,edx
c000c374:	c1 e0 04             	shl    eax,0x4
c000c377:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c37e:	85 c9                	test   ecx,ecx
c000c380:	0f 84 92 00 00 00    	je     c000c418 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c386:	83 c2 01             	add    edx,0x1
c000c389:	83 fa 04             	cmp    edx,0x4
c000c38c:	75 e9                	jne    c000c377 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c38e:	83 ec 0c             	sub    esp,0xc
c000c391:	68 dc 04 02 c0       	push   0xc00204dc
c000c396:	e8 9c 44 00 00       	call   c0010837 <KePanic(char const*)>
c000c39b:	83 c4 10             	add    esp,0x10
c000c39e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3a3:	83 c4 0c             	add    esp,0xc
c000c3a6:	5b                   	pop    ebx
c000c3a7:	5e                   	pop    esi
c000c3a8:	5f                   	pop    edi
c000c3a9:	5d                   	pop    ebp
c000c3aa:	c3                   	ret    
c000c3ab:	83 c3 01             	add    ebx,0x1
c000c3ae:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3b4:	7e a7                	jle    c000c35d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c3b6:	83 ec 08             	sub    esp,0x8
c000c3b9:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c3c0:	56                   	push   esi
c000c3c1:	55                   	push   ebp
c000c3c2:	e8 eb 15 01 00       	call   c001d9b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c3c7:	83 c4 10             	add    esp,0x10
c000c3ca:	84 c0                	test   al,al
c000c3cc:	74 dd                	je     c000c3ab <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3ce:	83 ec 04             	sub    esp,0x4
c000c3d1:	89 f8                	mov    eax,edi
c000c3d3:	0f b6 f8             	movzx  edi,al
c000c3d6:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3d9:	57                   	push   edi
c000c3da:	89 e8                	mov    eax,ebp
c000c3dc:	6a 00                	push   0x0
c000c3de:	0f b6 c0             	movzx  eax,al
c000c3e1:	50                   	push   eax
c000c3e2:	89 f0                	mov    eax,esi
c000c3e4:	6a 00                	push   0x0
c000c3e6:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c3ed:	6a 00                	push   0x0
c000c3ef:	0f b6 c0             	movzx  eax,al
c000c3f2:	50                   	push   eax
c000c3f3:	53                   	push   ebx
c000c3f4:	e8 25 17 01 00       	call   c001db1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c3f9:	83 c4 20             	add    esp,0x20
c000c3fc:	e9 6f ff ff ff       	jmp    c000c370 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c401:	83 ec 0c             	sub    esp,0xc
c000c404:	31 ff                	xor    edi,edi
c000c406:	68 a4 04 02 c0       	push   0xc00204a4
c000c40b:	e8 27 44 00 00       	call   c0010837 <KePanic(char const*)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	e9 24 ff ff ff       	jmp    c000c33c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c418:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c41b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c41f:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c426:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c42a:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c431:	83 c4 0c             	add    esp,0xc
c000c434:	89 f0                	mov    eax,esi
c000c436:	5b                   	pop    ebx
c000c437:	5e                   	pop    esi
c000c438:	5f                   	pop    edi
c000c439:	5d                   	pop    ebp
c000c43a:	c3                   	ret    

c000c43b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c43f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c443:	c1 e0 04             	shl    eax,0x4
c000c446:	8d 50 10             	lea    edx,[eax+0x10]
c000c449:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c44f:	74 08                	je     c000c459 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c451:	83 c0 04             	add    eax,0x4
c000c454:	39 d0                	cmp    eax,edx
c000c456:	75 f1                	jne    c000c449 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c458:	c3                   	ret    
c000c459:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c463:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c46d:	eb e2                	jmp    c000c451 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c46f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c46f:	53                   	push   ebx
c000c470:	83 ec 08             	sub    esp,0x8
c000c473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c477:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c47c:	74 0e                	je     c000c48c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c47e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c483:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c48a:	75 37                	jne    c000c4c3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c490:	83 c0 20             	add    eax,0x20
c000c493:	c1 e0 04             	shl    eax,0x4
c000c496:	8d 50 10             	lea    edx,[eax+0x10]
c000c499:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c49f:	74 0c                	je     c000c4ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c4a1:	83 c0 04             	add    eax,0x4
c000c4a4:	39 d0                	cmp    eax,edx
c000c4a6:	75 f1                	jne    c000c499 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c4a8:	83 c4 08             	add    esp,0x8
c000c4ab:	5b                   	pop    ebx
c000c4ac:	c3                   	ret    
c000c4ad:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4b7:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4c1:	eb de                	jmp    c000c4a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c4c3:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c4c8:	7f 11                	jg     c000c4db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ce:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c4d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4d9:	eb b1                	jmp    c000c48c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4db:	83 ec 0c             	sub    esp,0xc
c000c4de:	68 95 04 02 c0       	push   0xc0020495
c000c4e3:	e8 4f 43 00 00       	call   c0010837 <KePanic(char const*)>
c000c4e8:	83 c4 10             	add    esp,0x10
c000c4eb:	eb 9f                	jmp    c000c48c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c4ed <setupINTS()>:
c000c4ed:	31 c0                	xor    eax,eax
c000c4ef:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f9:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c503:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c50d:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c517:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c521:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c52b:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c535:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c53f:	83 c0 10             	add    eax,0x10
c000c542:	3d 00 10 00 00       	cmp    eax,0x1000
c000c547:	75 a6                	jne    c000c4ef <setupINTS()+0x2>
c000c549:	c3                   	ret    

c000c54a <convertLegacyIRQNumber(int)>:
c000c54a:	83 ec 0c             	sub    esp,0xc
c000c54d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c557:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c55e:	74 0c                	je     c000c56c <convertLegacyIRQNumber(int)+0x22>
c000c560:	83 f8 0f             	cmp    eax,0xf
c000c563:	7f 0b                	jg     c000c570 <convertLegacyIRQNumber(int)+0x26>
c000c565:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c56c:	83 c4 0c             	add    esp,0xc
c000c56f:	c3                   	ret    
c000c570:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c574:	83 ec 0c             	sub    esp,0xc
c000c577:	68 a4 04 02 c0       	push   0xc00204a4
c000c57c:	e8 b6 42 00 00       	call   c0010837 <KePanic(char const*)>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c588:	83 c4 0c             	add    esp,0xc
c000c58b:	c3                   	ret    

c000c58c <startGUI(void*)>:
c000c58c:	55                   	push   ebp
c000c58d:	89 e5                	mov    ebp,esp
c000c58f:	53                   	push   ebx
c000c590:	83 ec 04             	sub    esp,0x4
c000c593:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c598:	83 e8 01             	sub    eax,0x1
c000c59b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5a0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5a5:	85 c0                	test   eax,eax
c000c5a7:	75 01                	jne    c000c5aa <startGUI(void*)+0x1e>
c000c5a9:	fb                   	sti    
c000c5aa:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5b0:	83 ec 08             	sub    esp,0x8
c000c5b3:	6a 01                	push   0x1
c000c5b5:	68 01 05 02 c0       	push   0xc0020501
c000c5ba:	e8 1c 80 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000c5bf:	83 c4 10             	add    esp,0x10
c000c5c2:	83 ec 08             	sub    esp,0x8
c000c5c5:	53                   	push   ebx
c000c5c6:	50                   	push   eax
c000c5c7:	e8 4f 82 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000c5cc:	83 c4 10             	add    esp,0x10
c000c5cf:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5d5:	83 ec 08             	sub    esp,0x8
c000c5d8:	6a 01                	push   0x1
c000c5da:	68 1b 05 02 c0       	push   0xc002051b
c000c5df:	e8 f7 7f 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000c5e4:	83 c4 10             	add    esp,0x10
c000c5e7:	83 ec 08             	sub    esp,0x8
c000c5ea:	53                   	push   ebx
c000c5eb:	50                   	push   eax
c000c5ec:	e8 2a 82 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	90                   	nop
c000c5f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c5f8:	c9                   	leave  
c000c5f9:	c3                   	ret    

c000c5fa <startGUIVESA(void*)>:
c000c5fa:	55                   	push   ebp
c000c5fb:	89 e5                	mov    ebp,esp
c000c5fd:	53                   	push   ebx
c000c5fe:	83 ec 04             	sub    esp,0x4
c000c601:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c606:	83 e8 01             	sub    eax,0x1
c000c609:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c60e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c613:	85 c0                	test   eax,eax
c000c615:	75 01                	jne    c000c618 <startGUIVESA(void*)+0x1e>
c000c617:	fb                   	sti    
c000c618:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c61e:	83 ec 08             	sub    esp,0x8
c000c621:	6a 01                	push   0x1
c000c623:	68 39 05 02 c0       	push   0xc0020539
c000c628:	e8 ae 7f 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	83 ec 08             	sub    esp,0x8
c000c633:	53                   	push   ebx
c000c634:	50                   	push   eax
c000c635:	e8 e1 81 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c643:	83 ec 08             	sub    esp,0x8
c000c646:	6a 01                	push   0x1
c000c648:	68 1b 05 02 c0       	push   0xc002051b
c000c64d:	e8 89 7f 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	83 ec 08             	sub    esp,0x8
c000c658:	53                   	push   ebx
c000c659:	50                   	push   eax
c000c65a:	e8 bc 81 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000c65f:	83 c4 10             	add    esp,0x10
c000c662:	90                   	nop
c000c663:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c666:	c9                   	leave  
c000c667:	c3                   	ret    

c000c668 <sendKeyToTerminal(unsigned char)>:
c000c668:	55                   	push   ebp
c000c669:	89 e5                	mov    ebp,esp
c000c66b:	83 ec 28             	sub    esp,0x28
c000c66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c671:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c674:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c679:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c67d:	83 ec 08             	sub    esp,0x8
c000c680:	52                   	push   edx
c000c681:	50                   	push   eax
c000c682:	e8 05 c7 ff ff       	call   c0008d8c <VgaText::receiveKey(unsigned char)>
c000c687:	83 c4 10             	add    esp,0x10
c000c68a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c68e:	83 f8 0a             	cmp    eax,0xa
c000c691:	74 16                	je     c000c6a9 <sendKeyToTerminal(unsigned char)+0x41>
c000c693:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c697:	83 f8 03             	cmp    eax,0x3
c000c69a:	74 0d                	je     c000c6a9 <sendKeyToTerminal(unsigned char)+0x41>
c000c69c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6a0:	83 f8 1c             	cmp    eax,0x1c
c000c6a3:	0f 85 97 00 00 00    	jne    c000c740 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6a9:	fa                   	cli    
c000c6aa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6af:	83 c0 01             	add    eax,0x1
c000c6b2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6b7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6bc:	83 c0 01             	add    eax,0x1
c000c6bf:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6c4:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6cc:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c6d6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c6da:	74 1f                	je     c000c6fb <sendKeyToTerminal(unsigned char)+0x93>
c000c6dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c6df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c6e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c6e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c6e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6eb:	83 ec 0c             	sub    esp,0xc
c000c6ee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c6f1:	e8 4e 8e 00 00       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c000c6f6:	83 c4 10             	add    esp,0x10
c000c6f9:	eb db                	jmp    c000c6d6 <sendKeyToTerminal(unsigned char)+0x6e>
c000c6fb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c700:	83 e8 01             	sub    eax,0x1
c000c703:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c708:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c70d:	85 c0                	test   eax,eax
c000c70f:	75 18                	jne    c000c729 <sendKeyToTerminal(unsigned char)+0xc1>
c000c711:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c716:	85 c0                	test   eax,eax
c000c718:	74 0f                	je     c000c729 <sendKeyToTerminal(unsigned char)+0xc1>
c000c71a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c724:	e8 17 89 00 00       	call   c0015040 <schedule()>
c000c729:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c72e:	83 e8 01             	sub    eax,0x1
c000c731:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c736:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c73b:	85 c0                	test   eax,eax
c000c73d:	75 01                	jne    c000c740 <sendKeyToTerminal(unsigned char)+0xd8>
c000c73f:	fb                   	sti    
c000c740:	90                   	nop
c000c741:	c9                   	leave  
c000c742:	c3                   	ret    

c000c743 <sendKeyboardToken(KeyboardToken)>:
c000c743:	55                   	push   ebp
c000c744:	89 e5                	mov    ebp,esp
c000c746:	83 ec 18             	sub    esp,0x18
c000c749:	e8 39 41 00 00       	call   c0010887 <Krnl::userIOReceived()>
c000c74e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	0f b7 c0             	movzx  eax,ax
c000c757:	83 f2 01             	xor    edx,0x1
c000c75a:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c760:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c765:	85 c0                	test   eax,eax
c000c767:	74 24                	je     c000c78d <sendKeyboardToken(KeyboardToken)+0x4a>
c000c769:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c76f:	83 ec 04             	sub    esp,0x4
c000c772:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c777:	83 ec 08             	sub    esp,0x8
c000c77a:	89 e2                	mov    edx,esp
c000c77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77f:	89 02                	mov    DWORD PTR [edx],eax
c000c781:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c784:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c788:	ff d1                	call   ecx
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c791:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c794:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c799:	0f b6 d2             	movzx  edx,dl
c000c79c:	0f b6 c0             	movzx  eax,al
c000c79f:	39 c2                	cmp    edx,eax
c000c7a1:	74 1c                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7a3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7a6:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7ab:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7b0:	0f b6 c0             	movzx  eax,al
c000c7b3:	83 ec 0c             	sub    esp,0xc
c000c7b6:	50                   	push   eax
c000c7b7:	e8 1c bd ff ff       	call   c00084d8 <setTerminalScrollLock(bool)>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7c2:	0f b6 c0             	movzx  eax,al
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	0f 84 da 00 00 00    	je     c000c8a7 <sendKeyboardToken(KeyboardToken)+0x164>
c000c7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d0:	0f b7 c0             	movzx  eax,ax
c000c7d3:	3d 18 03 00 00       	cmp    eax,0x318
c000c7d8:	75 06                	jne    c000c7e0 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c7da:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e3:	0f b7 c0             	movzx  eax,ax
c000c7e6:	3d 19 03 00 00       	cmp    eax,0x319
c000c7eb:	75 06                	jne    c000c7f3 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c7ed:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	0f b7 c0             	movzx  eax,ax
c000c7f9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c7fe:	75 06                	jne    c000c806 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c800:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c809:	0f b7 c0             	movzx  eax,ax
c000c80c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c811:	75 06                	jne    c000c819 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c813:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81c:	0f b7 c0             	movzx  eax,ax
c000c81f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c824:	75 06                	jne    c000c82c <sendKeyboardToken(KeyboardToken)+0xe9>
c000c826:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82f:	0f b7 c0             	movzx  eax,ax
c000c832:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c837:	75 06                	jne    c000c83f <sendKeyboardToken(KeyboardToken)+0xfc>
c000c839:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c83f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c842:	0f b7 c0             	movzx  eax,ax
c000c845:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c84a:	75 06                	jne    c000c852 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c84c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c855:	0f b7 c0             	movzx  eax,ax
c000c858:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c85d:	75 06                	jne    c000c865 <sendKeyboardToken(KeyboardToken)+0x122>
c000c85f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c868:	0f b7 c0             	movzx  eax,ax
c000c86b:	3d 20 03 00 00       	cmp    eax,0x320
c000c870:	75 06                	jne    c000c878 <sendKeyboardToken(KeyboardToken)+0x135>
c000c872:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87b:	0f b7 c0             	movzx  eax,ax
c000c87e:	3d 21 03 00 00       	cmp    eax,0x321
c000c883:	75 06                	jne    c000c88b <sendKeyboardToken(KeyboardToken)+0x148>
c000c885:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c88e:	0f b7 c0             	movzx  eax,ax
c000c891:	3d 22 03 00 00       	cmp    eax,0x322
c000c896:	0f 85 f1 00 00 00    	jne    c000c98d <sendKeyboardToken(KeyboardToken)+0x24a>
c000c89c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8a2:	e9 e6 00 00 00       	jmp    c000c98d <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8aa:	0f b7 c0             	movzx  eax,ax
c000c8ad:	3d 18 03 00 00       	cmp    eax,0x318
c000c8b2:	75 0a                	jne    c000c8be <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8b4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c1:	0f b7 c0             	movzx  eax,ax
c000c8c4:	3d 19 03 00 00       	cmp    eax,0x319
c000c8c9:	75 0a                	jne    c000c8d5 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8cb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8e0:	75 0a                	jne    c000c8ec <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c8e2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c8e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ef:	0f b7 c0             	movzx  eax,ax
c000c8f2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8f7:	75 0a                	jne    c000c903 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c8f9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c8ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c906:	0f b7 c0             	movzx  eax,ax
c000c909:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c90e:	75 0a                	jne    c000c91a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c910:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c916:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c91a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91d:	0f b7 c0             	movzx  eax,ax
c000c920:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c925:	75 0a                	jne    c000c931 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c927:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c92d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c934:	0f b7 c0             	movzx  eax,ax
c000c937:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c93c:	75 0a                	jne    c000c948 <sendKeyboardToken(KeyboardToken)+0x205>
c000c93e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c944:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c94b:	0f b7 c0             	movzx  eax,ax
c000c94e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c953:	75 0a                	jne    c000c95f <sendKeyboardToken(KeyboardToken)+0x21c>
c000c955:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c95b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c962:	0f b7 c0             	movzx  eax,ax
c000c965:	3d 20 03 00 00       	cmp    eax,0x320
c000c96a:	75 0a                	jne    c000c976 <sendKeyboardToken(KeyboardToken)+0x233>
c000c96c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c972:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c979:	0f b7 c0             	movzx  eax,ax
c000c97c:	3d 21 03 00 00       	cmp    eax,0x321
c000c981:	75 0a                	jne    c000c98d <sendKeyboardToken(KeyboardToken)+0x24a>
c000c983:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c989:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c98d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c990:	0f b7 c0             	movzx  eax,ax
c000c993:	3d 00 02 00 00       	cmp    eax,0x200
c000c998:	75 2f                	jne    c000c9c9 <sendKeyboardToken(KeyboardToken)+0x286>
c000c99a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c99f:	83 f0 01             	xor    eax,0x1
c000c9a2:	0f b6 c0             	movzx  eax,al
c000c9a5:	85 c0                	test   eax,eax
c000c9a7:	74 20                	je     c000c9c9 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9a9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9ae:	6a 01                	push   0x1
c000c9b0:	6a 00                	push   0x0
c000c9b2:	68 8c c5 00 c0       	push   0xc000c58c
c000c9b7:	50                   	push   eax
c000c9b8:	e8 37 84 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000c9bd:	83 c4 10             	add    esp,0x10
c000c9c0:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9c7:	eb 3a                	jmp    c000ca03 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9cc:	0f b7 c0             	movzx  eax,ax
c000c9cf:	3d 01 02 00 00       	cmp    eax,0x201
c000c9d4:	75 2d                	jne    c000ca03 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9d6:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9db:	83 f0 01             	xor    eax,0x1
c000c9de:	0f b6 c0             	movzx  eax,al
c000c9e1:	85 c0                	test   eax,eax
c000c9e3:	74 1e                	je     c000ca03 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9e5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9ea:	6a 01                	push   0x1
c000c9ec:	6a 00                	push   0x0
c000c9ee:	68 fa c5 00 c0       	push   0xc000c5fa
c000c9f3:	50                   	push   eax
c000c9f4:	e8 fb 83 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca06:	0f b7 c0             	movzx  eax,ax
c000ca09:	3d 25 03 00 00       	cmp    eax,0x325
c000ca0e:	75 06                	jne    c000ca16 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca10:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca19:	0f b7 c0             	movzx  eax,ax
c000ca1c:	3d 24 03 00 00       	cmp    eax,0x324
c000ca21:	75 06                	jne    c000ca29 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca23:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca2c:	0f b7 c0             	movzx  eax,ax
c000ca2f:	3d 23 03 00 00       	cmp    eax,0x323
c000ca34:	75 06                	jne    c000ca3c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca36:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca3f:	0f b7 c0             	movzx  eax,ax
c000ca42:	3d 26 03 00 00       	cmp    eax,0x326
c000ca47:	75 06                	jne    c000ca4f <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca49:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca52:	0f b7 c0             	movzx  eax,ax
c000ca55:	3d 27 03 00 00       	cmp    eax,0x327
c000ca5a:	75 06                	jne    c000ca62 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca5c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca65:	0f b7 c0             	movzx  eax,ax
c000ca68:	3d 22 03 00 00       	cmp    eax,0x322
c000ca6d:	75 06                	jne    c000ca75 <sendKeyboardToken(KeyboardToken)+0x332>
c000ca6f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ca75:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ca79:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ca7c:	83 f0 01             	xor    eax,0x1
c000ca7f:	0f b6 c0             	movzx  eax,al
c000ca82:	85 c0                	test   eax,eax
c000ca84:	74 7c                	je     c000cb02 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000ca86:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000ca8b:	0f b6 c0             	movzx  eax,al
c000ca8e:	85 c0                	test   eax,eax
c000ca90:	74 43                	je     c000cad5 <sendKeyboardToken(KeyboardToken)+0x392>
c000ca92:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca96:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000ca9a:	85 c0                	test   eax,eax
c000ca9c:	74 2b                	je     c000cac9 <sendKeyboardToken(KeyboardToken)+0x386>
c000ca9e:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000caa4:	89 d0                	mov    eax,edx
c000caa6:	c1 e0 02             	shl    eax,0x2
c000caa9:	01 d0                	add    eax,edx
c000caab:	d1 e0                	shl    eax,1
c000caad:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab5:	0f b7 c0             	movzx  eax,ax
c000cab8:	8d 50 d0             	lea    edx,[eax-0x30]
c000cabb:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cac0:	01 d0                	add    eax,edx
c000cac2:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cac7:	eb 71                	jmp    c000cb3a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cac9:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cad3:	eb 65                	jmp    c000cb3a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cad5:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cada:	85 c0                	test   eax,eax
c000cadc:	74 18                	je     c000caf6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cade:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cae3:	0f b6 c0             	movzx  eax,al
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	50                   	push   eax
c000caea:	e8 79 fb ff ff       	call   c000c668 <sendKeyToTerminal(unsigned char)>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caf6:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb00:	eb 38                	jmp    c000cb3a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb05:	0f b7 c0             	movzx  eax,ax
c000cb08:	3d 01 01 00 00       	cmp    eax,0x101
c000cb0d:	75 2b                	jne    c000cb3a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb0f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb14:	85 c0                	test   eax,eax
c000cb16:	74 18                	je     c000cb30 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb18:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb1d:	0f b6 c0             	movzx  eax,al
c000cb20:	83 ec 0c             	sub    esp,0xc
c000cb23:	50                   	push   eax
c000cb24:	e8 3f fb ff ff       	call   c000c668 <sendKeyToTerminal(unsigned char)>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb30:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb3a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb3d:	83 f0 01             	xor    eax,0x1
c000cb40:	0f b6 c0             	movzx  eax,al
c000cb43:	85 c0                	test   eax,eax
c000cb45:	74 5a                	je     c000cba1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb47:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb4a:	83 f0 01             	xor    eax,0x1
c000cb4d:	0f b6 c0             	movzx  eax,al
c000cb50:	85 c0                	test   eax,eax
c000cb52:	74 4d                	je     c000cba1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb54:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb59:	83 f0 01             	xor    eax,0x1
c000cb5c:	0f b6 c0             	movzx  eax,al
c000cb5f:	85 c0                	test   eax,eax
c000cb61:	74 3e                	je     c000cba1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb66:	0f b7 c0             	movzx  eax,ax
c000cb69:	83 f8 1f             	cmp    eax,0x1f
c000cb6c:	76 0b                	jbe    c000cb79 <sendKeyboardToken(KeyboardToken)+0x436>
c000cb6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb71:	0f b7 c0             	movzx  eax,ax
c000cb74:	83 f8 7e             	cmp    eax,0x7e
c000cb77:	76 16                	jbe    c000cb8f <sendKeyboardToken(KeyboardToken)+0x44c>
c000cb79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7c:	0f b7 c0             	movzx  eax,ax
c000cb7f:	83 f8 0a             	cmp    eax,0xa
c000cb82:	74 0b                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x44c>
c000cb84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb87:	0f b7 c0             	movzx  eax,ax
c000cb8a:	83 f8 08             	cmp    eax,0x8
c000cb8d:	75 12                	jne    c000cba1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb92:	0f b6 c0             	movzx  eax,al
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	50                   	push   eax
c000cb99:	e8 ca fa ff ff       	call   c000c668 <sendKeyToTerminal(unsigned char)>
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cba4:	83 f0 01             	xor    eax,0x1
c000cba7:	0f b6 c0             	movzx  eax,al
c000cbaa:	85 c0                	test   eax,eax
c000cbac:	74 5d                	je     c000cc0b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbb1:	83 f0 01             	xor    eax,0x1
c000cbb4:	0f b6 c0             	movzx  eax,al
c000cbb7:	85 c0                	test   eax,eax
c000cbb9:	74 50                	je     c000cc0b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbbb:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbc0:	0f b6 c0             	movzx  eax,al
c000cbc3:	85 c0                	test   eax,eax
c000cbc5:	74 44                	je     c000cc0b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbca:	0f b7 c0             	movzx  eax,ax
c000cbcd:	83 f8 3f             	cmp    eax,0x3f
c000cbd0:	76 39                	jbe    c000cc0b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd5:	0f b7 c0             	movzx  eax,ax
c000cbd8:	83 f8 7f             	cmp    eax,0x7f
c000cbdb:	77 2e                	ja     c000cc0b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe0:	88 c2                	mov    dl,al
c000cbe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe5:	0f b7 c0             	movzx  eax,ax
c000cbe8:	83 f8 5f             	cmp    eax,0x5f
c000cbeb:	76 04                	jbe    c000cbf1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cbed:	b0 20                	mov    al,0x20
c000cbef:	eb 02                	jmp    c000cbf3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cbf1:	b0 00                	mov    al,0x0
c000cbf3:	89 d1                	mov    ecx,edx
c000cbf5:	29 c1                	sub    ecx,eax
c000cbf7:	89 c8                	mov    eax,ecx
c000cbf9:	83 e8 40             	sub    eax,0x40
c000cbfc:	0f b6 c0             	movzx  eax,al
c000cbff:	83 ec 0c             	sub    esp,0xc
c000cc02:	50                   	push   eax
c000cc03:	e8 60 fa ff ff       	call   c000c668 <sendKeyToTerminal(unsigned char)>
c000cc08:	83 c4 10             	add    esp,0x10
c000cc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0e:	0f b7 c0             	movzx  eax,ax
c000cc11:	3d 00 03 00 00       	cmp    eax,0x300
c000cc16:	75 12                	jne    c000cc2a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc18:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc1b:	83 f0 01             	xor    eax,0x1
c000cc1e:	0f b6 c0             	movzx  eax,al
c000cc21:	85 c0                	test   eax,eax
c000cc23:	74 05                	je     c000cc2a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc25:	e8 af b8 ff ff       	call   c00084d9 <doTerminalCycle()>
c000cc2a:	90                   	nop
c000cc2b:	c9                   	leave  
c000cc2c:	c3                   	ret    

c000cc2d <clearInternalKeybuffer(VgaText*)>:
c000cc2d:	55                   	push   ebp
c000cc2e:	89 e5                	mov    ebp,esp
c000cc30:	83 ec 08             	sub    esp,0x8
c000cc33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc36:	05 02 01 00 00       	add    eax,0x102
c000cc3b:	83 ec 0c             	sub    esp,0xc
c000cc3e:	50                   	push   eax
c000cc3f:	e8 1c 39 ff ff       	call   c0000560 <strlen>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc4a:	81 c2 02 01 00 00    	add    edx,0x102
c000cc50:	83 ec 04             	sub    esp,0x4
c000cc53:	50                   	push   eax
c000cc54:	6a 00                	push   0x0
c000cc56:	52                   	push   edx
c000cc57:	e8 84 38 ff ff       	call   c00004e0 <memset>
c000cc5c:	83 c4 10             	add    esp,0x10
c000cc5f:	90                   	nop
c000cc60:	c9                   	leave  
c000cc61:	c3                   	ret    

c000cc62 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc62:	55                   	push   ebp
c000cc63:	89 e5                	mov    ebp,esp
c000cc65:	83 ec 18             	sub    esp,0x18
c000cc68:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc6d:	85 c0                	test   eax,eax
c000cc6f:	74 2a                	je     c000cc9b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cc71:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cc77:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cc7d:	83 ec 04             	sub    esp,0x4
c000cc80:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cc85:	83 ec 08             	sub    esp,0x8
c000cc88:	89 e2                	mov    edx,esp
c000cc8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cc8d:	89 02                	mov    DWORD PTR [edx],eax
c000cc8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cc92:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cc96:	ff d1                	call   ecx
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	fb                   	sti    
c000cc9c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cca3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cca7:	0f 84 0d 01 00 00    	je     c000cdba <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000ccad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccb6:	0f be c0             	movsx  eax,al
c000ccb9:	85 c0                	test   eax,eax
c000ccbb:	75 2c                	jne    c000cce9 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccbd:	fa                   	cli    
c000ccbe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccc3:	83 c0 01             	add    eax,0x1
c000ccc6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cccb:	e8 70 83 00 00       	call   c0015040 <schedule()>
c000ccd0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccd5:	83 e8 01             	sub    eax,0x1
c000ccd8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccdd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cce2:	85 c0                	test   eax,eax
c000cce4:	75 c7                	jne    c000ccad <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cce6:	fb                   	sti    
c000cce7:	eb c4                	jmp    c000ccad <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ccec:	8d 50 01             	lea    edx,[eax+0x1]
c000ccef:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ccf2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccf5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000ccfb:	88 10                	mov    BYTE PTR [eax],dl
c000ccfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd00:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd06:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd09:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd0d:	83 f8 03             	cmp    eax,0x3
c000cd10:	75 1e                	jne    c000cd30 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd17:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd1c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd22:	83 ec 08             	sub    esp,0x8
c000cd25:	6a 02                	push   0x2
c000cd27:	50                   	push   eax
c000cd28:	e8 a2 3f 00 00       	call   c0010ccf <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd34:	83 f8 1c             	cmp    eax,0x1c
c000cd37:	75 1e                	jne    c000cd57 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd39:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd43:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd49:	83 ec 08             	sub    esp,0x8
c000cd4c:	6a 09                	push   0x9
c000cd4e:	50                   	push   eax
c000cd4f:	e8 7b 3f 00 00       	call   c0010ccf <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd54:	83 c4 10             	add    esp,0x10
c000cd57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd5a:	05 02 01 00 00       	add    eax,0x102
c000cd5f:	83 ec 0c             	sub    esp,0xc
c000cd62:	50                   	push   eax
c000cd63:	e8 f8 37 ff ff       	call   c0000560 <strlen>
c000cd68:	83 c4 10             	add    esp,0x10
c000cd6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd6e:	81 c2 02 01 00 00    	add    edx,0x102
c000cd74:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd7a:	81 c2 02 01 00 00    	add    edx,0x102
c000cd80:	83 ec 04             	sub    esp,0x4
c000cd83:	50                   	push   eax
c000cd84:	51                   	push   ecx
c000cd85:	52                   	push   edx
c000cd86:	e8 45 36 ff ff       	call   c00003d0 <memmove>
c000cd8b:	83 c4 10             	add    esp,0x10
c000cd8e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cd92:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cd96:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd9a:	83 f8 0a             	cmp    eax,0xa
c000cd9d:	74 16                	je     c000cdb5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cd9f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cda3:	83 f8 03             	cmp    eax,0x3
c000cda6:	74 0d                	je     c000cdb5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cda8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdac:	83 f8 1c             	cmp    eax,0x1c
c000cdaf:	0f 85 ee fe ff ff    	jne    c000cca3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cdb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdb8:	eb 03                	jmp    c000cdbd <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdbd:	c9                   	leave  
c000cdbe:	c3                   	ret    
c000cdbf:	90                   	nop

c000cdc0 <Keyboard::Keyboard(char const*)>:
c000cdc0:	83 ec 0c             	sub    esp,0xc
c000cdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc7:	83 ec 08             	sub    esp,0x8
c000cdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdce:	50                   	push   eax
c000cdcf:	e8 3e f1 ff ff       	call   c000bf12 <Device::Device(char const*)>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000cddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde0:	89 10                	mov    DWORD PTR [eax],edx
c000cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cdf0:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000cdf7:	90                   	nop
c000cdf8:	83 c4 0c             	add    esp,0xc
c000cdfb:	c3                   	ret    

c000cdfc <Keyboard::~Keyboard()>:
c000cdfc:	83 ec 0c             	sub    esp,0xc
c000cdff:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000ce04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce08:	89 10                	mov    DWORD PTR [eax],edx
c000ce0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0e:	83 ec 0c             	sub    esp,0xc
c000ce11:	50                   	push   eax
c000ce12:	e8 69 ee ff ff       	call   c000bc80 <Device::~Device()>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	90                   	nop
c000ce1b:	83 c4 0c             	add    esp,0xc
c000ce1e:	c3                   	ret    
c000ce1f:	90                   	nop

c000ce20 <Keyboard::~Keyboard()>:
c000ce20:	83 ec 0c             	sub    esp,0xc
c000ce23:	83 ec 0c             	sub    esp,0xc
c000ce26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2a:	e8 cd ff ff ff       	call   c000cdfc <Keyboard::~Keyboard()>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	83 ec 08             	sub    esp,0x8
c000ce35:	68 5c 01 00 00       	push   0x15c
c000ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3e:	e8 0a da ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000ce43:	83 c4 10             	add    esp,0x10
c000ce46:	83 c4 0c             	add    esp,0xc
c000ce49:	c3                   	ret    

c000ce4a <LogicalDisk::close(int, int, void*)>:
c000ce4a:	83 c8 ff             	or     eax,0xffffffff
c000ce4d:	c3                   	ret    

c000ce4e <LogicalDisk::~LogicalDisk()>:
c000ce4e:	83 ec 0c             	sub    esp,0xc
c000ce51:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000ce56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5a:	89 10                	mov    DWORD PTR [eax],edx
c000ce5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce60:	83 ec 0c             	sub    esp,0xc
c000ce63:	50                   	push   eax
c000ce64:	e8 17 ee ff ff       	call   c000bc80 <Device::~Device()>
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	90                   	nop
c000ce6d:	83 c4 0c             	add    esp,0xc
c000ce70:	c3                   	ret    
c000ce71:	90                   	nop

c000ce72 <LogicalDisk::~LogicalDisk()>:
c000ce72:	83 ec 0c             	sub    esp,0xc
c000ce75:	83 ec 0c             	sub    esp,0xc
c000ce78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7c:	e8 cd ff ff ff       	call   c000ce4e <LogicalDisk::~LogicalDisk()>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	68 78 01 00 00       	push   0x178
c000ce8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce90:	e8 b8 d9 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000ce95:	83 c4 10             	add    esp,0x10
c000ce98:	83 c4 0c             	add    esp,0xc
c000ce9b:	c3                   	ret    

c000ce9c <LogicalDisk::open(int, int, void*)>:
c000ce9c:	83 ec 18             	sub    esp,0x18
c000ce9f:	68 88 05 02 c0       	push   0xc0020588
c000cea4:	e8 8e 39 00 00       	call   c0010837 <KePanic(char const*)>
c000cea9:	83 c8 ff             	or     eax,0xffffffff
c000ceac:	83 c4 1c             	add    esp,0x1c
c000ceaf:	c3                   	ret    

c000ceb0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ceb0:	53                   	push   ebx
c000ceb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ceb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cebd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cec3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cec9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cecf:	77 10                	ja     c000cee1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ced1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ced7:	89 d3                	mov    ebx,edx
c000ced9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cedf:	72 05                	jb     c000cee6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cee1:	83 c8 ff             	or     eax,0xffffffff
c000cee4:	89 c2                	mov    edx,eax
c000cee6:	5b                   	pop    ebx
c000cee7:	c3                   	ret    

c000cee8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cee8:	56                   	push   esi
c000cee9:	83 c8 ff             	or     eax,0xffffffff
c000ceec:	53                   	push   ebx
c000ceed:	89 c2                	mov    edx,eax
c000ceef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cef3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cef7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cefb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf01:	77 27                	ja     c000cf2a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf03:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf09:	89 d8                	mov    eax,ebx
c000cf0b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf16:	89 c2                	mov    edx,eax
c000cf18:	73 10                	jae    c000cf2a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf1a:	89 c8                	mov    eax,ecx
c000cf1c:	89 da                	mov    edx,ebx
c000cf1e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf24:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf2a:	5b                   	pop    ebx
c000cf2b:	5e                   	pop    esi
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf2e:	83 ec 1c             	sub    esp,0x1c
c000cf31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf45:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf54:	83 ec 08             	sub    esp,0x8
c000cf57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf5b:	50                   	push   eax
c000cf5c:	e8 b1 ef ff ff       	call   c000bf12 <Device::Device(char const*)>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000cf69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf6d:	89 10                	mov    DWORD PTR [eax],edx
c000cf6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf73:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf7e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cf85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf89:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf94:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cf9e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfa6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfaa:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfb0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfb6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cfbd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfc1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cfc7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cfcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfd5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cfdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfdf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cfe9:	90                   	nop
c000cfea:	83 c4 1c             	add    esp,0x1c
c000cfed:	c3                   	ret    

c000cfee <LogicalDisk::assignDriveLetter()>:
c000cfee:	55                   	push   ebp
c000cfef:	57                   	push   edi
c000cff0:	56                   	push   esi
c000cff1:	53                   	push   ebx
c000cff2:	83 ec 14             	sub    esp,0x14
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cfff:	b0 41                	mov    al,0x41
c000d001:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d007:	84 d2                	test   dl,dl
c000d009:	75 02                	jne    c000d00d <LogicalDisk::assignDriveLetter()+0x1f>
c000d00b:	b0 43                	mov    al,0x43
c000d00d:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d013:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d017:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d01d:	0f b6 ca             	movzx  ecx,dl
c000d020:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d024:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d028:	0f be e8             	movsx  ebp,al
c000d02b:	3c 43                	cmp    al,0x43
c000d02d:	75 10                	jne    c000d03f <LogicalDisk::assignDriveLetter()+0x51>
c000d02f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d036:	75 5a                	jne    c000d092 <LogicalDisk::assignDriveLetter()+0xa4>
c000d038:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d03d:	75 53                	jne    c000d092 <LogicalDisk::assignDriveLetter()+0xa4>
c000d03f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d042:	ba 01 00 00 00       	mov    edx,0x1
c000d047:	89 34 24             	mov    DWORD PTR [esp],esi
c000d04a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d04d:	d3 e2                	shl    edx,cl
c000d04f:	89 d7                	mov    edi,edx
c000d051:	89 d6                	mov    esi,edx
c000d053:	c1 ff 1f             	sar    edi,0x1f
c000d056:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d05a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d05e:	21 f9                	and    ecx,edi
c000d060:	09 d1                	or     ecx,edx
c000d062:	75 2e                	jne    c000d092 <LogicalDisk::assignDriveLetter()+0xa4>
c000d064:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d068:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d06c:	09 f2                	or     edx,esi
c000d06e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d071:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d077:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d07b:	09 fa                	or     edx,edi
c000d07d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d083:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d089:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d090:	eb 0d                	jmp    c000d09f <LogicalDisk::assignDriveLetter()+0xb1>
c000d092:	8d 50 01             	lea    edx,[eax+0x1]
c000d095:	45                   	inc    ebp
c000d096:	88 d0                	mov    al,dl
c000d098:	80 fa 5b             	cmp    dl,0x5b
c000d09b:	75 8e                	jne    c000d02b <LogicalDisk::assignDriveLetter()+0x3d>
c000d09d:	31 c0                	xor    eax,eax
c000d09f:	83 c4 14             	add    esp,0x14
c000d0a2:	5b                   	pop    ebx
c000d0a3:	5e                   	pop    esi
c000d0a4:	5f                   	pop    edi
c000d0a5:	5d                   	pop    ebp
c000d0a6:	c3                   	ret    
c000d0a7:	90                   	nop

c000d0a8 <LogicalDisk::mount()>:
c000d0a8:	56                   	push   esi
c000d0a9:	53                   	push   ebx
c000d0aa:	53                   	push   ebx
c000d0ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0af:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0b5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0bf:	85 db                	test   ebx,ebx
c000d0c1:	74 27                	je     c000d0ea <LogicalDisk::mount()+0x42>
c000d0c3:	51                   	push   ecx
c000d0c4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0cb:	83 e8 41             	sub    eax,0x41
c000d0ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d0d0:	50                   	push   eax
c000d0d1:	56                   	push   esi
c000d0d2:	53                   	push   ebx
c000d0d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	84 c0                	test   al,al
c000d0db:	74 08                	je     c000d0e5 <LogicalDisk::mount()+0x3d>
c000d0dd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d0e3:	eb 07                	jmp    c000d0ec <LogicalDisk::mount()+0x44>
c000d0e5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d0e8:	eb d5                	jmp    c000d0bf <LogicalDisk::mount()+0x17>
c000d0ea:	31 c0                	xor    eax,eax
c000d0ec:	5a                   	pop    edx
c000d0ed:	5b                   	pop    ebx
c000d0ee:	5e                   	pop    esi
c000d0ef:	c3                   	ret    

c000d0f0 <LogicalDisk::unmount()>:
c000d0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d0fe:	c3                   	ret    
c000d0ff:	90                   	nop

c000d100 <LogicalDisk::eject()>:
c000d100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d104:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d10a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d10c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d110:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d113:	90                   	nop

c000d114 <LogicalDisk::unassignDriveLetter()>:
c000d114:	57                   	push   edi
c000d115:	56                   	push   esi
c000d116:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d11a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d121:	85 c9                	test   ecx,ecx
c000d123:	75 0f                	jne    c000d134 <LogicalDisk::unassignDriveLetter()+0x20>
c000d125:	c7 44 24 0c ac 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205ac
c000d12d:	5e                   	pop    esi
c000d12e:	5f                   	pop    edi
c000d12f:	e9 03 37 00 00       	jmp    c0010837 <KePanic(char const*)>
c000d134:	83 e9 41             	sub    ecx,0x41
c000d137:	b8 01 00 00 00       	mov    eax,0x1
c000d13c:	d3 e0                	shl    eax,cl
c000d13e:	89 c7                	mov    edi,eax
c000d140:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d147:	c1 ff 1f             	sar    edi,0x1f
c000d14a:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d155:	89 fe                	mov    esi,edi
c000d157:	f7 d6                	not    esi
c000d159:	f7 d0                	not    eax
c000d15b:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d161:	5e                   	pop    esi
c000d162:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d168:	5f                   	pop    edi
c000d169:	c3                   	ret    

c000d16a <LogicalDisk::read(unsigned long long, int, void*)>:
c000d16a:	57                   	push   edi
c000d16b:	56                   	push   esi
c000d16c:	53                   	push   ebx
c000d16d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d171:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d175:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d17d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d183:	77 41                	ja     c000d1c6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d185:	99                   	cdq    
c000d186:	01 c8                	add    eax,ecx
c000d188:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d18e:	11 da                	adc    edx,ebx
c000d190:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d196:	19 d7                	sbb    edi,edx
c000d198:	72 33                	jb     c000d1cd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d19a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1a0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1aa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1ae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1be:	5b                   	pop    ebx
c000d1bf:	5e                   	pop    esi
c000d1c0:	5f                   	pop    edi
c000d1c1:	e9 c8 0a 00 00       	jmp    c000dc8e <VCache::read(unsigned long long, int, void*)>
c000d1c6:	b8 05 00 00 00       	mov    eax,0x5
c000d1cb:	eb 05                	jmp    c000d1d2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d1cd:	b8 07 00 00 00       	mov    eax,0x7
c000d1d2:	5b                   	pop    ebx
c000d1d3:	5e                   	pop    esi
c000d1d4:	5f                   	pop    edi
c000d1d5:	c3                   	ret    

c000d1d6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d1d6:	57                   	push   edi
c000d1d7:	56                   	push   esi
c000d1d8:	53                   	push   ebx
c000d1d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1ef:	77 41                	ja     c000d232 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d1f1:	99                   	cdq    
c000d1f2:	01 c8                	add    eax,ecx
c000d1f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1fa:	11 da                	adc    edx,ebx
c000d1fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d202:	19 d7                	sbb    edi,edx
c000d204:	72 33                	jb     c000d239 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d206:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d20c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d212:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d216:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d21a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d220:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d22a:	5b                   	pop    ebx
c000d22b:	5e                   	pop    esi
c000d22c:	5f                   	pop    edi
c000d22d:	e9 6e 09 00 00       	jmp    c000dba0 <VCache::write(unsigned long long, int, void*)>
c000d232:	b8 05 00 00 00       	mov    eax,0x5
c000d237:	eb 05                	jmp    c000d23e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d239:	b8 07 00 00 00       	mov    eax,0x7
c000d23e:	5b                   	pop    ebx
c000d23f:	5e                   	pop    esi
c000d240:	5f                   	pop    edi
c000d241:	c3                   	ret    
c000d242:	66 90                	xchg   ax,ax

c000d244 <Mouse::Mouse(char const*)>:
c000d244:	83 ec 0c             	sub    esp,0xc
c000d247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24b:	83 ec 08             	sub    esp,0x8
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	50                   	push   eax
c000d253:	e8 ba ec ff ff       	call   c000bf12 <Device::Device(char const*)>
c000d258:	83 c4 10             	add    esp,0x10
c000d25b:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d264:	89 10                	mov    DWORD PTR [eax],edx
c000d266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d274:	90                   	nop
c000d275:	83 c4 0c             	add    esp,0xc
c000d278:	c3                   	ret    
c000d279:	90                   	nop
c000d27a:	66 90                	xchg   ax,ax

c000d27c <Mouse::~Mouse()>:
c000d27c:	83 ec 0c             	sub    esp,0xc
c000d27f:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	50                   	push   eax
c000d292:	e8 e9 e9 ff ff       	call   c000bc80 <Device::~Device()>
c000d297:	83 c4 10             	add    esp,0x10
c000d29a:	90                   	nop
c000d29b:	83 c4 0c             	add    esp,0xc
c000d29e:	c3                   	ret    
c000d29f:	90                   	nop

c000d2a0 <Mouse::~Mouse()>:
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	83 ec 0c             	sub    esp,0xc
c000d2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2aa:	e8 cd ff ff ff       	call   c000d27c <Mouse::~Mouse()>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	83 ec 08             	sub    esp,0x8
c000d2b5:	68 58 01 00 00       	push   0x158
c000d2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2be:	e8 8a d5 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000d2c3:	83 c4 10             	add    esp,0x10
c000d2c6:	83 c4 0c             	add    esp,0xc
c000d2c9:	c3                   	ret    

c000d2ca <NIC::getMAC()>:
c000d2ca:	31 c0                	xor    eax,eax
c000d2cc:	31 d2                	xor    edx,edx
c000d2ce:	c3                   	ret    
c000d2cf:	90                   	nop

c000d2d0 <NIC::write(int, unsigned char*, int*)>:
c000d2d0:	b8 01 00 00 00       	mov    eax,0x1
c000d2d5:	c3                   	ret    

c000d2d6 <NIC::NIC(char const*)>:
c000d2d6:	83 ec 0c             	sub    esp,0xc
c000d2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2dd:	83 ec 08             	sub    esp,0x8
c000d2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e4:	50                   	push   eax
c000d2e5:	e8 28 ec ff ff       	call   c000bf12 <Device::Device(char const*)>
c000d2ea:	83 c4 10             	add    esp,0x10
c000d2ed:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f6:	89 10                	mov    DWORD PTR [eax],edx
c000d2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d306:	90                   	nop
c000d307:	83 c4 0c             	add    esp,0xc
c000d30a:	c3                   	ret    
c000d30b:	90                   	nop

c000d30c <NIC::~NIC()>:
c000d30c:	83 ec 0c             	sub    esp,0xc
c000d30f:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d318:	89 10                	mov    DWORD PTR [eax],edx
c000d31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31e:	83 ec 0c             	sub    esp,0xc
c000d321:	50                   	push   eax
c000d322:	e8 59 e9 ff ff       	call   c000bc80 <Device::~Device()>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	90                   	nop
c000d32b:	83 c4 0c             	add    esp,0xc
c000d32e:	c3                   	ret    
c000d32f:	90                   	nop

c000d330 <NIC::~NIC()>:
c000d330:	83 ec 0c             	sub    esp,0xc
c000d333:	83 ec 0c             	sub    esp,0xc
c000d336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33a:	e8 cd ff ff ff       	call   c000d30c <NIC::~NIC()>
c000d33f:	83 c4 10             	add    esp,0x10
c000d342:	83 ec 08             	sub    esp,0x8
c000d345:	68 58 01 00 00       	push   0x158
c000d34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34e:	e8 fa d4 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	83 c4 0c             	add    esp,0xc
c000d359:	c3                   	ret    

c000d35a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d35a:	55                   	push   ebp
c000d35b:	57                   	push   edi
c000d35c:	56                   	push   esi
c000d35d:	53                   	push   ebx
c000d35e:	81 ec 28 01 00 00    	sub    esp,0x128
c000d364:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d36b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d372:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d379:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d380:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d384:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d388:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d38f:	e8 7a ec ff ff       	call   c000c00e <Device::getName()>
c000d394:	5a                   	pop    edx
c000d395:	59                   	pop    ecx
c000d396:	50                   	push   eax
c000d397:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d39b:	55                   	push   ebp
c000d39c:	e8 8f 32 ff ff       	call   c0000630 <strcpy>
c000d3a1:	5b                   	pop    ebx
c000d3a2:	58                   	pop    eax
c000d3a3:	68 58 06 02 c0       	push   0xc0020658
c000d3a8:	55                   	push   ebp
c000d3a9:	e8 82 34 ff ff       	call   c0000830 <strcat>
c000d3ae:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3b5:	e8 cd a6 ff ff       	call   c0007a87 <malloc>
c000d3ba:	83 c4 0c             	add    esp,0xc
c000d3bd:	89 c3                	mov    ebx,eax
c000d3bf:	57                   	push   edi
c000d3c0:	56                   	push   esi
c000d3c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3c9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3d0:	55                   	push   ebp
c000d3d1:	50                   	push   eax
c000d3d2:	e8 57 fb ff ff       	call   c000cf2e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d3d7:	83 c4 14             	add    esp,0x14
c000d3da:	53                   	push   ebx
c000d3db:	e8 0e fc ff ff       	call   c000cfee <LogicalDisk::assignDriveLetter()>
c000d3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3e3:	e8 c0 fc ff ff       	call   c000d0a8 <LogicalDisk::mount()>
c000d3e8:	58                   	pop    eax
c000d3e9:	5a                   	pop    edx
c000d3ea:	53                   	push   ebx
c000d3eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3f2:	e8 83 e9 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c000d3f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d3fd:	5b                   	pop    ebx
c000d3fe:	5e                   	pop    esi
c000d3ff:	5f                   	pop    edi
c000d400:	5d                   	pop    ebp
c000d401:	c3                   	ret    

c000d402 <createPartitionsForDisk(PhysicalDisk*)>:
c000d402:	55                   	push   ebp
c000d403:	57                   	push   edi
c000d404:	56                   	push   esi
c000d405:	53                   	push   ebx
c000d406:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d40c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d413:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d419:	3d 00 02 00 00       	cmp    eax,0x200
c000d41e:	74 27                	je     c000d447 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d420:	83 ec 10             	sub    esp,0x10
c000d423:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d429:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d42f:	99                   	cdq    
c000d430:	52                   	push   edx
c000d431:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d435:	50                   	push   eax
c000d436:	89 fd                	mov    ebp,edi
c000d438:	c1 e6 0a             	shl    esi,0xa
c000d43b:	55                   	push   ebp
c000d43c:	56                   	push   esi
c000d43d:	e8 8e 11 01 00       	call   c001e5d0 <__udivdi3>
c000d442:	e9 b9 00 00 00       	jmp    c000d500 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d44c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d450:	56                   	push   esi
c000d451:	6a 01                	push   0x1
c000d453:	6a 00                	push   0x0
c000d455:	6a 00                	push   0x0
c000d457:	53                   	push   ebx
c000d458:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d45b:	83 c4 20             	add    esp,0x20
c000d45e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d466:	75 0a                	jne    c000d472 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d468:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d470:	74 2c                	je     c000d49e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d472:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d478:	83 ec 10             	sub    esp,0x10
c000d47b:	89 f7                	mov    edi,esi
c000d47d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d483:	c1 ff 1f             	sar    edi,0x1f
c000d486:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d48c:	57                   	push   edi
c000d48d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d491:	c1 e0 0a             	shl    eax,0xa
c000d494:	56                   	push   esi
c000d495:	52                   	push   edx
c000d496:	50                   	push   eax
c000d497:	e8 34 11 01 00       	call   c001e5d0 <__udivdi3>
c000d49c:	eb 62                	jmp    c000d500 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d49e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4a5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4ac:	89 cf                	mov    edi,ecx
c000d4ae:	83 e2 7f             	and    edx,0x7f
c000d4b1:	83 e7 7f             	and    edi,0x7f
c000d4b4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4bb:	83 e0 7f             	and    eax,0x7f
c000d4be:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4c1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4c4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4cb:	83 e0 7f             	and    eax,0x7f
c000d4ce:	01 d0                	add    eax,edx
c000d4d0:	89 c5                	mov    ebp,eax
c000d4d2:	84 c0                	test   al,al
c000d4d4:	74 41                	je     c000d517 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d4d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4dc:	83 ec 10             	sub    esp,0x10
c000d4df:	89 f7                	mov    edi,esi
c000d4e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4e7:	c1 ff 1f             	sar    edi,0x1f
c000d4ea:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4f0:	57                   	push   edi
c000d4f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4f5:	c1 e0 0a             	shl    eax,0xa
c000d4f8:	56                   	push   esi
c000d4f9:	52                   	push   edx
c000d4fa:	50                   	push   eax
c000d4fb:	e8 d0 10 01 00       	call   c001e5d0 <__udivdi3>
c000d500:	83 c4 14             	add    esp,0x14
c000d503:	52                   	push   edx
c000d504:	50                   	push   eax
c000d505:	6a 00                	push   0x0
c000d507:	6a 00                	push   0x0
c000d509:	53                   	push   ebx
c000d50a:	e8 4b fe ff ff       	call   c000d35a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d50f:	83 c4 20             	add    esp,0x20
c000d512:	e9 73 01 00 00       	jmp    c000d68a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d517:	89 f0                	mov    eax,esi
c000d519:	31 c9                	xor    ecx,ecx
c000d51b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d522:	75 02                	jne    c000d526 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d524:	89 cd                	mov    ebp,ecx
c000d526:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d52d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d534:	c1 e2 08             	shl    edx,0x8
c000d537:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d53f:	c1 e6 10             	shl    esi,0x10
c000d542:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d54a:	09 f2                	or     edx,esi
c000d54c:	83 c0 10             	add    eax,0x10
c000d54f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d556:	09 f2                	or     edx,esi
c000d558:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d55f:	c1 e6 18             	shl    esi,0x18
c000d562:	09 f2                	or     edx,esi
c000d564:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d568:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d56f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d576:	c1 e6 10             	shl    esi,0x10
c000d579:	c1 e2 08             	shl    edx,0x8
c000d57c:	09 f2                	or     edx,esi
c000d57e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d585:	09 f2                	or     edx,esi
c000d587:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d58e:	c1 e6 18             	shl    esi,0x18
c000d591:	09 f2                	or     edx,esi
c000d593:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d597:	41                   	inc    ecx
c000d598:	83 f9 04             	cmp    ecx,0x4
c000d59b:	0f 85 7a ff ff ff    	jne    c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5a5:	83 f0 01             	xor    eax,0x1
c000d5a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5ac:	75 4f                	jne    c000d5fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5b2:	83 f0 01             	xor    eax,0x1
c000d5b5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5b9:	75 42                	jne    c000d5fd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5bb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5c9:	89 f7                	mov    edi,esi
c000d5cb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5d3:	c1 ff 1f             	sar    edi,0x1f
c000d5d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5e2:	57                   	push   edi
c000d5e3:	56                   	push   esi
c000d5e4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5e8:	c1 e0 0a             	shl    eax,0xa
c000d5eb:	52                   	push   edx
c000d5ec:	50                   	push   eax
c000d5ed:	e8 de 0f 01 00       	call   c001e5d0 <__udivdi3>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5fd:	89 e8                	mov    eax,ebp
c000d5ff:	0f b6 e8             	movzx  ebp,al
c000d602:	85 ed                	test   ebp,ebp
c000d604:	74 50                	je     c000d656 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d606:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d60a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d60e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d612:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d616:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d61a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d61e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d622:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d626:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d62a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d62e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d632:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d636:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d63a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d63e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d642:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d646:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d64a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d64e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d652:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d656:	31 ed                	xor    ebp,ebp
c000d658:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d65c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d660:	89 f8                	mov    eax,edi
c000d662:	09 f0                	or     eax,esi
c000d664:	74 1e                	je     c000d684 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d666:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d66a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d66e:	89 d1                	mov    ecx,edx
c000d670:	09 c1                	or     ecx,eax
c000d672:	74 10                	je     c000d684 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	57                   	push   edi
c000d678:	56                   	push   esi
c000d679:	52                   	push   edx
c000d67a:	50                   	push   eax
c000d67b:	53                   	push   ebx
c000d67c:	e8 d9 fc ff ff       	call   c000d35a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d681:	83 c4 20             	add    esp,0x20
c000d684:	45                   	inc    ebp
c000d685:	83 fd 04             	cmp    ebp,0x4
c000d688:	75 ce                	jne    c000d658 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d68a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d690:	5b                   	pop    ebx
c000d691:	5e                   	pop    esi
c000d692:	5f                   	pop    edi
c000d693:	5d                   	pop    ebp
c000d694:	c3                   	ret    
c000d695:	66 90                	xchg   ax,ax
c000d697:	90                   	nop

c000d698 <Serial::Serial(char const*)>:
c000d698:	83 ec 0c             	sub    esp,0xc
c000d69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69f:	83 ec 08             	sub    esp,0x8
c000d6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a6:	50                   	push   eax
c000d6a7:	e8 66 e8 ff ff       	call   c000bf12 <Device::Device(char const*)>
c000d6ac:	83 c4 10             	add    esp,0x10
c000d6af:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6be:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6c8:	90                   	nop
c000d6c9:	83 c4 0c             	add    esp,0xc
c000d6cc:	c3                   	ret    
c000d6cd:	90                   	nop
c000d6ce:	66 90                	xchg   ax,ax

c000d6d0 <Serial::~Serial()>:
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6dc:	89 10                	mov    DWORD PTR [eax],edx
c000d6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e2:	83 ec 0c             	sub    esp,0xc
c000d6e5:	50                   	push   eax
c000d6e6:	e8 95 e5 ff ff       	call   c000bc80 <Device::~Device()>
c000d6eb:	83 c4 10             	add    esp,0x10
c000d6ee:	90                   	nop
c000d6ef:	83 c4 0c             	add    esp,0xc
c000d6f2:	c3                   	ret    
c000d6f3:	90                   	nop

c000d6f4 <Serial::~Serial()>:
c000d6f4:	83 ec 0c             	sub    esp,0xc
c000d6f7:	83 ec 0c             	sub    esp,0xc
c000d6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6fe:	e8 cd ff ff ff       	call   c000d6d0 <Serial::~Serial()>
c000d703:	83 c4 10             	add    esp,0x10
c000d706:	83 ec 08             	sub    esp,0x8
c000d709:	68 58 01 00 00       	push   0x158
c000d70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d712:	e8 36 d1 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	83 c4 0c             	add    esp,0xc
c000d71d:	c3                   	ret    
c000d71e:	66 90                	xchg   ax,ax

c000d720 <Timer::Timer(char const*)>:
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d727:	83 ec 08             	sub    esp,0x8
c000d72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d72e:	50                   	push   eax
c000d72f:	e8 de e7 ff ff       	call   c000bf12 <Device::Device(char const*)>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d740:	89 10                	mov    DWORD PTR [eax],edx
c000d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d746:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d750:	90                   	nop
c000d751:	83 c4 0c             	add    esp,0xc
c000d754:	c3                   	ret    
c000d755:	90                   	nop
c000d756:	66 90                	xchg   ax,ax

c000d758 <Timer::~Timer()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	50                   	push   eax
c000d76e:	e8 0d e5 ff ff       	call   c000bc80 <Device::~Device()>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	90                   	nop
c000d777:	83 c4 0c             	add    esp,0xc
c000d77a:	c3                   	ret    
c000d77b:	90                   	nop

c000d77c <Timer::~Timer()>:
c000d77c:	83 ec 0c             	sub    esp,0xc
c000d77f:	83 ec 0c             	sub    esp,0xc
c000d782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d786:	e8 cd ff ff ff       	call   c000d758 <Timer::~Timer()>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	83 ec 08             	sub    esp,0x8
c000d791:	68 5c 01 00 00       	push   0x15c
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	e8 ae d0 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	83 c4 0c             	add    esp,0xc
c000d7a5:	c3                   	ret    

c000d7a6 <Timer::read()>:
c000d7a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7b0:	c3                   	ret    

c000d7b1 <setupTimer(int)>:
c000d7b1:	53                   	push   ebx
c000d7b2:	83 ec 14             	sub    esp,0x14
c000d7b5:	68 5c 01 00 00       	push   0x15c
c000d7ba:	e8 c8 a2 ff ff       	call   c0007a87 <malloc>
c000d7bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c2:	89 c3                	mov    ebx,eax
c000d7c4:	e8 73 06 01 00       	call   c001de3c <PIT::PIT()>
c000d7c9:	58                   	pop    eax
c000d7ca:	5a                   	pop    edx
c000d7cb:	53                   	push   ebx
c000d7cc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d7d2:	e8 a3 e5 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c000d7d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7d9:	6a 00                	push   0x0
c000d7db:	6a 00                	push   0x0
c000d7dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7e1:	53                   	push   ebx
c000d7e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7e5:	83 c4 28             	add    esp,0x28
c000d7e8:	89 d8                	mov    eax,ebx
c000d7ea:	5b                   	pop    ebx
c000d7eb:	c3                   	ret    

c000d7ec <timerHandler(unsigned int)>:
c000d7ec:	56                   	push   esi
c000d7ed:	53                   	push   ebx
c000d7ee:	51                   	push   ecx
c000d7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f3:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d7f9:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d800:	0f 84 4a 01 00 00    	je     c000d950 <timerHandler(unsigned int)+0x164>
c000d806:	fa                   	cli    
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d810:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d816:	68 78 81 02 c0       	push   0xc0028178
c000d81b:	e8 80 13 01 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d820:	83 c4 10             	add    esp,0x10
c000d823:	84 c0                	test   al,al
c000d825:	0f 85 a1 00 00 00    	jne    c000d8cc <timerHandler(unsigned int)+0xe0>
c000d82b:	83 ec 0c             	sub    esp,0xc
c000d82e:	68 78 81 02 c0       	push   0xc0028178
c000d833:	e8 84 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d838:	83 c4 10             	add    esp,0x10
c000d83b:	89 c6                	mov    esi,eax
c000d83d:	8d 76 00             	lea    esi,[esi+0x0]
c000d840:	83 ec 0c             	sub    esp,0xc
c000d843:	68 78 81 02 c0       	push   0xc0028178
c000d848:	e8 6f 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d84d:	89 c3                	mov    ebx,eax
c000d84f:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d856:	e8 69 13 01 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d861:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d867:	77 23                	ja     c000d88c <timerHandler(unsigned int)+0xa0>
c000d869:	83 ec 0c             	sub    esp,0xc
c000d86c:	53                   	push   ebx
c000d86d:	e8 d2 7c 00 00       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c000d872:	83 c4 10             	add    esp,0x10
c000d875:	39 de                	cmp    esi,ebx
c000d877:	75 27                	jne    c000d8a0 <timerHandler(unsigned int)+0xb4>
c000d879:	83 ec 0c             	sub    esp,0xc
c000d87c:	68 78 81 02 c0       	push   0xc0028178
c000d881:	e8 36 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d886:	89 c6                	mov    esi,eax
c000d888:	eb 12                	jmp    c000d89c <timerHandler(unsigned int)+0xb0>
c000d88a:	66 90                	xchg   ax,ax
c000d88c:	52                   	push   edx
c000d88d:	52                   	push   edx
c000d88e:	53                   	push   ebx
c000d88f:	68 78 81 02 c0       	push   0xc0028178
c000d894:	e8 e7 13 01 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d899:	8d 76 00             	lea    esi,[esi+0x0]
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	90                   	nop
c000d8a0:	83 ec 0c             	sub    esp,0xc
c000d8a3:	68 78 81 02 c0       	push   0xc0028178
c000d8a8:	e8 f3 12 01 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	84 c0                	test   al,al
c000d8b2:	75 18                	jne    c000d8cc <timerHandler(unsigned int)+0xe0>
c000d8b4:	83 ec 0c             	sub    esp,0xc
c000d8b7:	68 78 81 02 c0       	push   0xc0028178
c000d8bc:	e8 fb 12 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c1:	83 c4 10             	add    esp,0x10
c000d8c4:	39 f0                	cmp    eax,esi
c000d8c6:	0f 85 74 ff ff ff    	jne    c000d840 <timerHandler(unsigned int)+0x54>
c000d8cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8d1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8d5:	74 41                	je     c000d918 <timerHandler(unsigned int)+0x12c>
c000d8d7:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d8de:	74 38                	je     c000d918 <timerHandler(unsigned int)+0x12c>
c000d8e0:	fa                   	cli    
c000d8e1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8e7:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d8ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8f2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d8f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8fb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d8fe:	72 08                	jb     c000d908 <timerHandler(unsigned int)+0x11c>
c000d900:	e8 3b 77 00 00       	call   c0015040 <schedule()>
c000d905:	8d 76 00             	lea    esi,[esi+0x0]
c000d908:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d90d:	48                   	dec    eax
c000d90e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d913:	75 03                	jne    c000d918 <timerHandler(unsigned int)+0x12c>
c000d915:	fb                   	sti    
c000d916:	66 90                	xchg   ax,ax
c000d918:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d91d:	48                   	dec    eax
c000d91e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d923:	75 1b                	jne    c000d940 <timerHandler(unsigned int)+0x154>
c000d925:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d92c:	74 12                	je     c000d940 <timerHandler(unsigned int)+0x154>
c000d92e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d938:	e8 03 77 00 00       	call   c0015040 <schedule()>
c000d93d:	8d 76 00             	lea    esi,[esi+0x0]
c000d940:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d945:	48                   	dec    eax
c000d946:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d94b:	75 03                	jne    c000d950 <timerHandler(unsigned int)+0x164>
c000d94d:	fb                   	sti    
c000d94e:	66 90                	xchg   ax,ax
c000d950:	58                   	pop    eax
c000d951:	5b                   	pop    ebx
c000d952:	5e                   	pop    esi
c000d953:	c3                   	ret    

c000d954 <VCache::VCache(PhysicalDisk*)>:
c000d954:	53                   	push   ebx
c000d955:	83 ec 18             	sub    esp,0x18
c000d958:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000d95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d961:	89 10                	mov    DWORD PTR [eax],edx
c000d963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d967:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d972:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d984:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d996:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9bb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9de:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9e5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d9ed:	83 ec 0c             	sub    esp,0xc
c000d9f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9f4:	e8 8e a0 ff ff       	call   c0007a87 <malloc>
c000d9f9:	83 c4 10             	add    esp,0x10
c000d9fc:	89 c3                	mov    ebx,eax
c000d9fe:	83 ec 0c             	sub    esp,0xc
c000da01:	53                   	push   ebx
c000da02:	e8 d9 73 00 00       	call   c0014de0 <Mutex::Mutex()>
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da19:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da20:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da2b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da35:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da3c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da4c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da4f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da56:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da64:	05 00 02 00 00       	add    eax,0x200
c000da69:	c1 e0 03             	shl    eax,0x3
c000da6c:	83 ec 0c             	sub    esp,0xc
c000da6f:	50                   	push   eax
c000da70:	e8 12 a0 ff ff       	call   c0007a87 <malloc>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	89 c2                	mov    edx,eax
c000da7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da85:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da90:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da98:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da9e:	89 d0                	mov    eax,edx
c000daa0:	c1 e0 02             	shl    eax,0x2
c000daa3:	01 d0                	add    eax,edx
c000daa5:	c1 e0 04             	shl    eax,0x4
c000daa8:	83 ec 0c             	sub    esp,0xc
c000daab:	50                   	push   eax
c000daac:	e8 d6 9f ff ff       	call   c0007a87 <malloc>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	89 c2                	mov    edx,eax
c000dab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dabd:	90                   	nop
c000dabe:	83 c4 18             	add    esp,0x18
c000dac1:	5b                   	pop    ebx
c000dac2:	c3                   	ret    
c000dac3:	90                   	nop

c000dac4 <VCache::invalidateReadBuffer()>:
c000dac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dace:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dad2:	c3                   	ret    
c000dad3:	90                   	nop

c000dad4 <VCache::writeWriteBuffer()>:
c000dad4:	53                   	push   ebx
c000dad5:	83 ec 08             	sub    esp,0x8
c000dad8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dadc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dae0:	74 1e                	je     c000db00 <VCache::writeWriteBuffer()+0x2c>
c000dae2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dae5:	83 ec 0c             	sub    esp,0xc
c000dae8:	8b 10                	mov    edx,DWORD PTR [eax]
c000daea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000daed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000daf0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000daf3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf6:	50                   	push   eax
c000daf7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dafa:	83 c4 20             	add    esp,0x20
c000dafd:	8d 76 00             	lea    esi,[esi+0x0]
c000db00:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db07:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db0e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db12:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db19:	83 c4 08             	add    esp,0x8
c000db1c:	5b                   	pop    ebx
c000db1d:	c3                   	ret    
c000db1e:	66 90                	xchg   ax,ax

c000db20 <VCache::~VCache()>:
c000db20:	83 ec 0c             	sub    esp,0xc
c000db23:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000db28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2c:	89 10                	mov    DWORD PTR [eax],edx
c000db2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db32:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db35:	0f b6 c0             	movzx  eax,al
c000db38:	85 c0                	test   eax,eax
c000db3a:	74 10                	je     c000db4c <VCache::~VCache()+0x2c>
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db43:	e8 8c ff ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	90                   	nop
c000db4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db50:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db53:	83 ec 0c             	sub    esp,0xc
c000db56:	50                   	push   eax
c000db57:	e8 3b 9f ff ff       	call   c0007a97 <free>
c000db5c:	83 c4 10             	add    esp,0x10
c000db5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	50                   	push   eax
c000db6a:	e8 28 9f ff ff       	call   c0007a97 <free>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	90                   	nop
c000db73:	83 c4 0c             	add    esp,0xc
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <VCache::~VCache()>:
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	83 ec 0c             	sub    esp,0xc
c000db7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db82:	e8 99 ff ff ff       	call   c000db20 <VCache::~VCache()>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	83 ec 08             	sub    esp,0x8
c000db8d:	6a 44                	push   0x44
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	e8 b5 cc ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	83 c4 0c             	add    esp,0xc
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <VCache::write(unsigned long long, int, void*)>:
c000dba0:	55                   	push   ebp
c000dba1:	57                   	push   edi
c000dba2:	56                   	push   esi
c000dba3:	53                   	push   ebx
c000dba4:	83 ec 1c             	sub    esp,0x1c
c000dba7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbb7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbbb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbbf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbc3:	74 07                	je     c000dbcc <VCache::write(unsigned long long, int, void*)+0x2c>
c000dbc5:	53                   	push   ebx
c000dbc6:	e8 f9 fe ff ff       	call   c000dac4 <VCache::invalidateReadBuffer()>
c000dbcb:	58                   	pop    eax
c000dbcc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbd0:	74 62                	je     c000dc34 <VCache::write(unsigned long long, int, void*)+0x94>
c000dbd2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dbd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dbd9:	99                   	cdq    
c000dbda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbde:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dbe1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dbe4:	31 c1                	xor    ecx,eax
c000dbe6:	89 d0                	mov    eax,edx
c000dbe8:	89 ca                	mov    edx,ecx
c000dbea:	31 e8                	xor    eax,ebp
c000dbec:	09 c2                	or     edx,eax
c000dbee:	75 38                	jne    c000dc28 <VCache::write(unsigned long long, int, void*)+0x88>
c000dbf0:	83 ff 01             	cmp    edi,0x1
c000dbf3:	75 33                	jne    c000dc28 <VCache::write(unsigned long long, int, void*)+0x88>
c000dbf5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbf8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbfc:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dbff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc05:	0f af c8             	imul   ecx,eax
c000dc08:	01 cf                	add    edi,ecx
c000dc0a:	89 c1                	mov    ecx,eax
c000dc0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc11:	40                   	inc    eax
c000dc12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc15:	83 f8 50             	cmp    eax,0x50
c000dc18:	75 6a                	jne    c000dc84 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc1a:	83 ec 0c             	sub    esp,0xc
c000dc1d:	53                   	push   ebx
c000dc1e:	e8 b1 fe ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	eb 5c                	jmp    c000dc84 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc28:	83 ec 0c             	sub    esp,0xc
c000dc2b:	53                   	push   ebx
c000dc2c:	e8 a3 fe ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c000dc31:	83 c4 10             	add    esp,0x10
c000dc34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc37:	83 ff 4f             	cmp    edi,0x4f
c000dc3a:	7f 20                	jg     c000dc5c <VCache::write(unsigned long long, int, void*)+0xbc>
c000dc3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc40:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc43:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc46:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc49:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc4d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc50:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc58:	eb 2a                	jmp    c000dc84 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc5a:	66 90                	xchg   ax,ax
c000dc5c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc62:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc66:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dc6a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc6e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dc72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc76:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dc79:	83 c4 1c             	add    esp,0x1c
c000dc7c:	5b                   	pop    ebx
c000dc7d:	5e                   	pop    esi
c000dc7e:	5f                   	pop    edi
c000dc7f:	5d                   	pop    ebp
c000dc80:	ff e0                	jmp    eax
c000dc82:	66 90                	xchg   ax,ax
c000dc84:	83 c4 1c             	add    esp,0x1c
c000dc87:	31 c0                	xor    eax,eax
c000dc89:	5b                   	pop    ebx
c000dc8a:	5e                   	pop    esi
c000dc8b:	5f                   	pop    edi
c000dc8c:	5d                   	pop    ebp
c000dc8d:	c3                   	ret    

c000dc8e <VCache::read(unsigned long long, int, void*)>:
c000dc8e:	55                   	push   ebp
c000dc8f:	57                   	push   edi
c000dc90:	56                   	push   esi
c000dc91:	53                   	push   ebx
c000dc92:	83 ec 1c             	sub    esp,0x1c
c000dc95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dc99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dca1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dca5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dca9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcad:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcb1:	74 0d                	je     c000dcc0 <VCache::read(unsigned long long, int, void*)+0x32>
c000dcb3:	83 ec 0c             	sub    esp,0xc
c000dcb6:	57                   	push   edi
c000dcb7:	e8 18 fe ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c000dcbc:	83 c4 10             	add    esp,0x10
c000dcbf:	90                   	nop
c000dcc0:	83 fd 01             	cmp    ebp,0x1
c000dcc3:	0f 85 93 00 00 00    	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xce>
c000dcc9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dccc:	89 04 24             	mov    DWORD PTR [esp],eax
c000dccf:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dcd6:	0f 85 80 00 00 00    	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xce>
c000dcdc:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dcdf:	89 e9                	mov    ecx,ebp
c000dce1:	f7 d9                	neg    ecx
c000dce3:	89 c8                	mov    eax,ecx
c000dce5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dce9:	c1 f8 1f             	sar    eax,0x1f
c000dcec:	21 d9                	and    ecx,ebx
c000dcee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcf2:	89 c8                	mov    eax,ecx
c000dcf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcf8:	21 f1                	and    ecx,esi
c000dcfa:	89 ca                	mov    edx,ecx
c000dcfc:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd00:	74 2e                	je     c000dd30 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd02:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd05:	75 29                	jne    c000dd30 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd07:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd0a:	75 24                	jne    c000dd30 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd0c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd0f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd15:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd18:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd1b:	21 f3                	and    ebx,esi
c000dd1d:	0f af d9             	imul   ebx,ecx
c000dd20:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd23:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd27:	89 de                	mov    esi,ebx
c000dd29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd2b:	31 c0                	xor    eax,eax
c000dd2d:	eb 61                	jmp    c000dd90 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd2f:	90                   	nop
c000dd30:	83 ec 0c             	sub    esp,0xc
c000dd33:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd37:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd3a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd3d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd41:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd43:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd46:	55                   	push   ebp
c000dd47:	52                   	push   edx
c000dd48:	50                   	push   eax
c000dd49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd4d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000dd50:	83 c4 20             	add    esp,0x20
c000dd53:	85 c0                	test   eax,eax
c000dd55:	75 39                	jne    c000dd90 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd57:	eb b3                	jmp    c000dd0c <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd59:	8d 76 00             	lea    esi,[esi+0x0]
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	57                   	push   edi
c000dd60:	e8 5f fd ff ff       	call   c000dac4 <VCache::invalidateReadBuffer()>
c000dd65:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd6c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd6e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dd72:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dd76:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dd7a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dd7e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd82:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd85:	83 c4 2c             	add    esp,0x2c
c000dd88:	5b                   	pop    ebx
c000dd89:	5e                   	pop    esi
c000dd8a:	5f                   	pop    edi
c000dd8b:	5d                   	pop    ebp
c000dd8c:	ff e0                	jmp    eax
c000dd8e:	66 90                	xchg   ax,ax
c000dd90:	83 c4 1c             	add    esp,0x1c
c000dd93:	5b                   	pop    ebx
c000dd94:	5e                   	pop    esi
c000dd95:	5f                   	pop    edi
c000dd96:	5d                   	pop    ebp
c000dd97:	c3                   	ret    

c000dd98 <Video::putrect(int, int, int, int, unsigned int)>:
c000dd98:	55                   	push   ebp
c000dd99:	57                   	push   edi
c000dd9a:	56                   	push   esi
c000dd9b:	53                   	push   ebx
c000dd9c:	83 ec 1c             	sub    esp,0x1c
c000dd9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dda3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dda7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddb7:	01 df                	add    edi,ebx
c000ddb9:	39 fb                	cmp    ebx,edi
c000ddbb:	7d 1f                	jge    c000dddc <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddbd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ddc1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ddc5:	7d 12                	jge    c000ddd9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ddc7:	8b 16                	mov    edx,DWORD PTR [esi]
c000ddc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddcd:	53                   	push   ebx
c000ddce:	55                   	push   ebp
c000ddcf:	45                   	inc    ebp
c000ddd0:	56                   	push   esi
c000ddd1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	eb e8                	jmp    c000ddc1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ddd9:	43                   	inc    ebx
c000ddda:	eb dd                	jmp    c000ddb9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dddc:	83 c4 1c             	add    esp,0x1c
c000dddf:	5b                   	pop    ebx
c000dde0:	5e                   	pop    esi
c000dde1:	5f                   	pop    edi
c000dde2:	5d                   	pop    ebp
c000dde3:	c3                   	ret    

c000dde4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dde4:	55                   	push   ebp
c000dde5:	57                   	push   edi
c000dde6:	31 ff                	xor    edi,edi
c000dde8:	56                   	push   esi
c000dde9:	53                   	push   ebx
c000ddea:	83 ec 1c             	sub    esp,0x1c
c000dded:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ddf1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ddf5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ddfc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de01:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de0d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de10:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de14:	01 f9                	add    ecx,edi
c000de16:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de1a:	7d 2f                	jge    c000de4b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de1c:	31 f6                	xor    esi,esi
c000de1e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de22:	01 f2                	add    edx,esi
c000de24:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de28:	7d 1a                	jge    c000de44 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de2d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de30:	46                   	inc    esi
c000de31:	51                   	push   ecx
c000de32:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de36:	52                   	push   edx
c000de37:	55                   	push   ebp
c000de38:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de42:	eb da                	jmp    c000de1e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de44:	47                   	inc    edi
c000de45:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de49:	eb c5                	jmp    c000de10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de4b:	83 c4 1c             	add    esp,0x1c
c000de4e:	5b                   	pop    ebx
c000de4f:	5e                   	pop    esi
c000de50:	5f                   	pop    edi
c000de51:	5d                   	pop    ebp
c000de52:	c3                   	ret    
c000de53:	90                   	nop

c000de54 <Video::blit(unsigned int*, int, int, int, int)>:
c000de54:	55                   	push   ebp
c000de55:	b8 00 00 00 00       	mov    eax,0x0
c000de5a:	57                   	push   edi
c000de5b:	56                   	push   esi
c000de5c:	53                   	push   ebx
c000de5d:	83 ec 1c             	sub    esp,0x1c
c000de60:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de65:	0f 49 44 24 40       	cmovns eax,DWORD PTR [esp+0x40]
c000de6a:	c1 e0 02             	shl    eax,0x2
c000de6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de75:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000de79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de7d:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000de81:	39 d8                	cmp    eax,ebx
c000de83:	7e 49                	jle    c000dece <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000de85:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de8b:	7c 41                	jl     c000dece <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000de8d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de91:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de95:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de99:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000de9d:	39 f9                	cmp    ecx,edi
c000de9f:	7e 22                	jle    c000dec3 <Video::blit(unsigned int*, int, int, int, int)+0x6f>
c000dea1:	83 c5 04             	add    ebp,0x4
c000dea4:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deaa:	7c 14                	jl     c000dec0 <Video::blit(unsigned int*, int, int, int, int)+0x6c>
c000deac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000deae:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000deb1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000deb5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000deb9:	56                   	push   esi
c000deba:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	47                   	inc    edi
c000dec1:	eb d2                	jmp    c000de95 <Video::blit(unsigned int*, int, int, int, int)+0x41>
c000dec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec7:	43                   	inc    ebx
c000dec8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000decc:	eb ab                	jmp    c000de79 <Video::blit(unsigned int*, int, int, int, int)+0x25>
c000dece:	83 c4 1c             	add    esp,0x1c
c000ded1:	5b                   	pop    ebx
c000ded2:	5e                   	pop    esi
c000ded3:	5f                   	pop    edi
c000ded4:	5d                   	pop    ebp
c000ded5:	c3                   	ret    

c000ded6 <Video::clearScreen(unsigned int)>:
c000ded6:	57                   	push   edi
c000ded7:	56                   	push   esi
c000ded8:	53                   	push   ebx
c000ded9:	31 db                	xor    ebx,ebx
c000dedb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dedf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dee5:	7e 1f                	jle    c000df06 <Video::clearScreen(unsigned int)+0x30>
c000dee7:	31 ff                	xor    edi,edi
c000dee9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deef:	7e 12                	jle    c000df03 <Video::clearScreen(unsigned int)+0x2d>
c000def1:	8b 06                	mov    eax,DWORD PTR [esi]
c000def3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000def7:	53                   	push   ebx
c000def8:	57                   	push   edi
c000def9:	47                   	inc    edi
c000defa:	56                   	push   esi
c000defb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	eb e6                	jmp    c000dee9 <Video::clearScreen(unsigned int)+0x13>
c000df03:	43                   	inc    ebx
c000df04:	eb d9                	jmp    c000dedf <Video::clearScreen(unsigned int)+0x9>
c000df06:	5b                   	pop    ebx
c000df07:	5e                   	pop    esi
c000df08:	5f                   	pop    edi
c000df09:	c3                   	ret    

c000df0a <Video::putpixel(int, int, unsigned int)>:
c000df0a:	c7 44 24 04 e8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206e8
c000df12:	e9 20 29 00 00       	jmp    c0010837 <KePanic(char const*)>
c000df17:	90                   	nop

c000df18 <Video::readPixelApprox(int, int)>:
c000df18:	83 ec 18             	sub    esp,0x18
c000df1b:	68 09 07 02 c0       	push   0xc0020709
c000df20:	e8 12 29 00 00       	call   c0010837 <KePanic(char const*)>
c000df25:	31 c0                	xor    eax,eax
c000df27:	83 c4 1c             	add    esp,0x1c
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <Video::Video(char const*)>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df33:	83 ec 08             	sub    esp,0x8
c000df36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3a:	50                   	push   eax
c000df3b:	e8 d2 df ff ff       	call   c000bf12 <Device::Device(char const*)>
c000df40:	83 c4 10             	add    esp,0x10
c000df43:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df5c:	90                   	nop
c000df5d:	83 c4 0c             	add    esp,0xc
c000df60:	c3                   	ret    
c000df61:	90                   	nop

c000df62 <Video::~Video()>:
c000df62:	83 ec 0c             	sub    esp,0xc
c000df65:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6e:	89 10                	mov    DWORD PTR [eax],edx
c000df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df74:	83 ec 0c             	sub    esp,0xc
c000df77:	50                   	push   eax
c000df78:	e8 03 dd ff ff       	call   c000bc80 <Device::~Device()>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	90                   	nop
c000df81:	83 c4 0c             	add    esp,0xc
c000df84:	c3                   	ret    
c000df85:	90                   	nop

c000df86 <Video::~Video()>:
c000df86:	83 ec 0c             	sub    esp,0xc
c000df89:	83 ec 0c             	sub    esp,0xc
c000df8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df90:	e8 cd ff ff ff       	call   c000df62 <Video::~Video()>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	83 ec 08             	sub    esp,0x8
c000df9b:	68 64 01 00 00       	push   0x164
c000dfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa4:	e8 a4 c8 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	83 c4 0c             	add    esp,0xc
c000dfaf:	c3                   	ret    

c000dfb0 <Video::isMonochrome()>:
c000dfb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfb4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <Video::getWidth()>:
c000dfbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dfc6:	c3                   	ret    
c000dfc7:	90                   	nop

c000dfc8 <Video::getHeight()>:
c000dfc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfcc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dfd4:	55                   	push   ebp
c000dfd5:	57                   	push   edi
c000dfd6:	56                   	push   esi
c000dfd7:	53                   	push   ebx
c000dfd8:	83 ec 2c             	sub    esp,0x2c
c000dfdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfdf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dfe3:	83 f8 01             	cmp    eax,0x1
c000dfe6:	19 c9                	sbb    ecx,ecx
c000dfe8:	31 db                	xor    ebx,ebx
c000dfea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dfee:	89 cd                	mov    ebp,ecx
c000dff0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dff8:	f7 d5                	not    ebp
c000dffa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e000:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e004:	01 d8                	add    eax,ebx
c000e006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e00a:	56                   	push   esi
c000e00b:	e8 b8 ff ff ff       	call   c000dfc8 <Video::getHeight()>
c000e010:	59                   	pop    ecx
c000e011:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e015:	7e 70                	jle    c000e087 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e017:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e01b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e01f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e022:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e026:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e02a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e031:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e035:	89 f8                	mov    eax,edi
c000e037:	83 c0 20             	add    eax,0x20
c000e03a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e03e:	56                   	push   esi
c000e03f:	e8 78 ff ff ff       	call   c000dfbc <Video::getWidth()>
c000e044:	5a                   	pop    edx
c000e045:	39 c7                	cmp    edi,eax
c000e047:	7d 34                	jge    c000e07d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e049:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e04e:	74 05                	je     c000e055 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e050:	8b 06                	mov    eax,DWORD PTR [esi]
c000e052:	55                   	push   ebp
c000e053:	eb 0d                	jmp    c000e062 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e055:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e05a:	74 12                	je     c000e06e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e05c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e062:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e066:	57                   	push   edi
c000e067:	56                   	push   esi
c000e068:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	47                   	inc    edi
c000e06f:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e073:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e077:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e07b:	75 c1                	jne    c000e03e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e07d:	43                   	inc    ebx
c000e07e:	83 fb 20             	cmp    ebx,0x20
c000e081:	0f 85 79 ff ff ff    	jne    c000e000 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e087:	83 c4 2c             	add    esp,0x2c
c000e08a:	5b                   	pop    ebx
c000e08b:	5e                   	pop    esi
c000e08c:	5f                   	pop    edi
c000e08d:	5d                   	pop    ebp
c000e08e:	c3                   	ret    
c000e08f:	90                   	nop

c000e090 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e090:	55                   	push   ebp
c000e091:	57                   	push   edi
c000e092:	56                   	push   esi
c000e093:	53                   	push   ebx
c000e094:	83 ec 28             	sub    esp,0x28
c000e097:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e09b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e09f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0a3:	c1 e6 08             	shl    esi,0x8
c000e0a6:	01 c6                	add    esi,eax
c000e0a8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e0ac:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e0b0:	c1 e0 08             	shl    eax,0x8
c000e0b3:	01 d0                	add    eax,edx
c000e0b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0bd:	0f af c6             	imul   eax,esi
c000e0c0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e0c7:	50                   	push   eax
c000e0c8:	e8 ba 99 ff ff       	call   c0007a87 <malloc>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	89 c7                	mov    edi,eax
c000e0d2:	85 c0                	test   eax,eax
c000e0d4:	75 10                	jne    c000e0e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e0d6:	83 ec 0c             	sub    esp,0xc
c000e0d9:	68 34 07 02 c0       	push   0xc0020734
c000e0de:	e8 54 27 00 00       	call   c0010837 <KePanic(char const*)>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e0ea:	ba 12 00 00 00       	mov    edx,0x12
c000e0ef:	85 c0                	test   eax,eax
c000e0f1:	74 11                	je     c000e104 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e0f3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e0f7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e0fb:	c1 fa 03             	sar    edx,0x3
c000e0fe:	0f af d1             	imul   edx,ecx
c000e101:	83 c2 12             	add    edx,0x12
c000e104:	85 f6                	test   esi,esi
c000e106:	74 06                	je     c000e10e <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e108:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e10c:	75 12                	jne    c000e120 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e10e:	83 ec 0c             	sub    esp,0xc
c000e111:	68 44 07 02 c0       	push   0xc0020744
c000e116:	e8 2e c8 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000e11b:	e9 b8 00 00 00       	jmp    c000e1d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e120:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e124:	83 f9 02             	cmp    ecx,0x2
c000e127:	0f 85 96 00 00 00    	jne    c000e1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e12d:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e132:	75 0e                	jne    c000e142 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e134:	85 c0                	test   eax,eax
c000e136:	75 0a                	jne    c000e142 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e138:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e13b:	83 e8 18             	sub    eax,0x18
c000e13e:	a8 f7                	test   al,0xf7
c000e140:	74 0a                	je     c000e14c <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e142:	83 ec 0c             	sub    esp,0xc
c000e145:	68 59 07 02 c0       	push   0xc0020759
c000e14a:	eb 7f                	jmp    c000e1cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e14c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e154:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e15c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e160:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e168:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e16c:	75 0c                	jne    c000e17a <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e16e:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e173:	c1 e0 18             	shl    eax,0x18
c000e176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e17a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e17f:	c1 e1 10             	shl    ecx,0x10
c000e182:	45                   	inc    ebp
c000e183:	89 c8                	mov    eax,ecx
c000e185:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e18a:	c1 e1 08             	shl    ecx,0x8
c000e18d:	09 c1                	or     ecx,eax
c000e18f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e193:	09 c1                	or     ecx,eax
c000e195:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e199:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e19d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1a1:	c1 f8 03             	sar    eax,0x3
c000e1a4:	01 c2                	add    edx,eax
c000e1a6:	89 e8                	mov    eax,ebp
c000e1a8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1ac:	39 c6                	cmp    esi,eax
c000e1ae:	7f b0                	jg     c000e160 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1b0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1b8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e1bb:	7e 22                	jle    c000e1df <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1bd:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e1c1:	eb 99                	jmp    c000e15c <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e1c3:	50                   	push   eax
c000e1c4:	50                   	push   eax
c000e1c5:	51                   	push   ecx
c000e1c6:	68 67 07 02 c0       	push   0xc0020767
c000e1cb:	e8 79 c7 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000e1d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e1d3:	e8 bf 98 ff ff       	call   c0007a97 <free>
c000e1d8:	83 c4 10             	add    esp,0x10
c000e1db:	31 ff                	xor    edi,edi
c000e1dd:	eb 0f                	jmp    c000e1ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e1df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1e3:	89 30                	mov    DWORD PTR [eax],esi
c000e1e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e1ec:	89 30                	mov    DWORD PTR [eax],esi
c000e1ee:	83 c4 1c             	add    esp,0x1c
c000e1f1:	89 f8                	mov    eax,edi
c000e1f3:	5b                   	pop    ebx
c000e1f4:	5e                   	pop    esi
c000e1f5:	5f                   	pop    edi
c000e1f6:	5d                   	pop    ebp
c000e1f7:	c3                   	ret    

c000e1f8 <Video::putTGA(int, int, unsigned char*, int)>:
c000e1f8:	55                   	push   ebp
c000e1f9:	57                   	push   edi
c000e1fa:	56                   	push   esi
c000e1fb:	53                   	push   ebx
c000e1fc:	83 ec 28             	sub    esp,0x28
c000e1ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e203:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e207:	50                   	push   eax
c000e208:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e20c:	50                   	push   eax
c000e20d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e211:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e215:	56                   	push   esi
c000e216:	e8 75 fe ff ff       	call   c000e090 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e21b:	83 c4 20             	add    esp,0x20
c000e21e:	85 c0                	test   eax,eax
c000e220:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e224:	74 35                	je     c000e25b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e226:	89 c7                	mov    edi,eax
c000e228:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e22c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e230:	39 d8                	cmp    eax,ebx
c000e232:	7e 27                	jle    c000e25b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e234:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e23c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e240:	39 e8                	cmp    eax,ebp
c000e242:	7e 14                	jle    c000e258 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e244:	83 c7 04             	add    edi,0x4
c000e247:	8b 06                	mov    eax,DWORD PTR [esi]
c000e249:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e24c:	53                   	push   ebx
c000e24d:	55                   	push   ebp
c000e24e:	45                   	inc    ebp
c000e24f:	56                   	push   esi
c000e250:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e253:	83 c4 10             	add    esp,0x10
c000e256:	eb e0                	jmp    c000e238 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e258:	43                   	inc    ebx
c000e259:	eb cd                	jmp    c000e228 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e25b:	83 c4 1c             	add    esp,0x1c
c000e25e:	5b                   	pop    ebx
c000e25f:	5e                   	pop    esi
c000e260:	5f                   	pop    edi
c000e261:	5d                   	pop    ebp
c000e262:	c3                   	ret    
c000e263:	90                   	nop

c000e264 <ACPI::close(int, int, void*)>:
c000e264:	83 ec 1c             	sub    esp,0x1c
c000e267:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e26f:	74 0b                	je     c000e27c <ACPI::close(int, int, void*)+0x18>
c000e271:	b8 00 00 00 00       	mov    eax,0x0
c000e276:	e9 99 00 00 00       	jmp    c000e314 <ACPI::close(int, int, void*)+0xb0>
c000e27b:	90                   	nop
c000e27c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e281:	75 29                	jne    c000e2ac <ACPI::close(int, int, void*)+0x48>
c000e283:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e288:	85 c0                	test   eax,eax
c000e28a:	74 08                	je     c000e294 <ACPI::close(int, int, void*)+0x30>
c000e28c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e291:	ff d0                	call   eax
c000e293:	90                   	nop
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	68 c8 07 02 c0       	push   0xc00207c8
c000e29c:	e8 96 25 00 00       	call   c0010837 <KePanic(char const*)>
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2a9:	eb 69                	jmp    c000e314 <ACPI::close(int, int, void*)+0xb0>
c000e2ab:	90                   	nop
c000e2ac:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e2b1:	75 59                	jne    c000e30c <ACPI::close(int, int, void*)+0xa8>
c000e2b3:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2b8:	85 c0                	test   eax,eax
c000e2ba:	74 08                	je     c000e2c4 <ACPI::close(int, int, void*)+0x60>
c000e2bc:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2c1:	ff d0                	call   eax
c000e2c3:	90                   	nop
c000e2c4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e2d1:	83 e0 02             	and    eax,0x2
c000e2d4:	74 1e                	je     c000e2f4 <ACPI::close(int, int, void*)+0x90>
c000e2d6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e1:	89 c2                	mov    edx,eax
c000e2e3:	ec                   	in     al,dx
c000e2e4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e2e8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e2ec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e2f0:	eb da                	jmp    c000e2cc <ACPI::close(int, int, void*)+0x68>
c000e2f2:	66 90                	xchg   ax,ax
c000e2f4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e2fb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e300:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e308:	ee                   	out    dx,al
c000e309:	8d 76 00             	lea    esi,[esi+0x0]
c000e30c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e311:	8d 76 00             	lea    esi,[esi+0x0]
c000e314:	83 c4 1c             	add    esp,0x1c
c000e317:	c3                   	ret    

c000e318 <findRSDP()>:
c000e318:	83 ec 1c             	sub    esp,0x1c
c000e31b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e320:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e326:	83 e0 04             	and    eax,0x4
c000e329:	0f b6 c0             	movzx  eax,al
c000e32c:	85 c0                	test   eax,eax
c000e32e:	75 08                	jne    c000e338 <findRSDP()+0x20>
c000e330:	b8 00 00 00 00       	mov    eax,0x0
c000e335:	eb 75                	jmp    c000e3ac <findRSDP()+0x94>
c000e337:	90                   	nop
c000e338:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e33d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e342:	7f 1c                	jg     c000e360 <findRSDP()+0x48>
c000e344:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e349:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e34f:	83 e2 fb             	and    edx,0xfffffffb
c000e352:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e358:	b8 00 00 00 00       	mov    eax,0x0
c000e35d:	eb 4d                	jmp    c000e3ac <findRSDP()+0x94>
c000e35f:	90                   	nop
c000e360:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e368:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e370:	77 32                	ja     c000e3a4 <findRSDP()+0x8c>
c000e372:	83 ec 04             	sub    esp,0x4
c000e375:	6a 08                	push   0x8
c000e377:	68 63 08 02 c0       	push   0xc0020863
c000e37c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e380:	e8 fb 1f ff ff       	call   c0000380 <memcmp>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	85 c0                	test   eax,eax
c000e38a:	0f 94 c0             	sete   al
c000e38d:	0f b6 c0             	movzx  eax,al
c000e390:	85 c0                	test   eax,eax
c000e392:	74 08                	je     c000e39c <findRSDP()+0x84>
c000e394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e398:	eb 12                	jmp    c000e3ac <findRSDP()+0x94>
c000e39a:	66 90                	xchg   ax,ax
c000e39c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3a1:	eb c5                	jmp    c000e368 <findRSDP()+0x50>
c000e3a3:	90                   	nop
c000e3a4:	b8 00 00 00 00       	mov    eax,0x0
c000e3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3ac:	83 c4 1c             	add    esp,0x1c
c000e3af:	c3                   	ret    

c000e3b0 <loadACPITables(unsigned char*)>:
c000e3b0:	57                   	push   edi
c000e3b1:	56                   	push   esi
c000e3b2:	53                   	push   ebx
c000e3b3:	83 ec 60             	sub    esp,0x60
c000e3b6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3bb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3c1:	83 e0 04             	and    eax,0x4
c000e3c4:	0f b6 c0             	movzx  eax,al
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	0f 84 41 02 00 00    	je     c000e610 <loadACPITables(unsigned char*)+0x260>
c000e3cf:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e3d4:	0f b6 c0             	movzx  eax,al
c000e3d7:	85 c0                	test   eax,eax
c000e3d9:	74 79                	je     c000e454 <loadACPITables(unsigned char*)+0xa4>
c000e3db:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3df:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e3e3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e3e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3ea:	83 e8 24             	sub    eax,0x24
c000e3ed:	c1 e8 03             	shr    eax,0x3
c000e3f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e3f4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e3fc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e400:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e404:	0f 8d ba 00 00 00    	jge    c000e4c4 <loadACPITables(unsigned char*)+0x114>
c000e40a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e40e:	83 c0 24             	add    eax,0x24
c000e411:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e415:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e419:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e41d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e421:	c1 e0 03             	shl    eax,0x3
c000e424:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e428:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e42c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e42f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e431:	89 c1                	mov    ecx,eax
c000e433:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e438:	8d 50 01             	lea    edx,[eax+0x1]
c000e43b:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e441:	89 ca                	mov    edx,ecx
c000e443:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e44a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e44f:	eb ab                	jmp    c000e3fc <loadACPITables(unsigned char*)+0x4c>
c000e451:	8d 76 00             	lea    esi,[esi+0x0]
c000e454:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e45c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e463:	83 e8 24             	sub    eax,0x24
c000e466:	c1 e8 02             	shr    eax,0x2
c000e469:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e46d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e475:	8d 76 00             	lea    esi,[esi+0x0]
c000e478:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e47c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e480:	7d 42                	jge    c000e4c4 <loadACPITables(unsigned char*)+0x114>
c000e482:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e486:	83 c0 24             	add    eax,0x24
c000e489:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e48d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e491:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e495:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e499:	c1 e0 02             	shl    eax,0x2
c000e49c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4a6:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ae:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4b4:	89 ca                	mov    edx,ecx
c000e4b6:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4bd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e4c2:	eb b4                	jmp    c000e478 <loadACPITables(unsigned char*)+0xc8>
c000e4c4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e4cc:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e4d5:	0f 8d 39 01 00 00    	jge    c000e614 <loadACPITables(unsigned char*)+0x264>
c000e4db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4df:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e4e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e4f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4f6:	25 ff 0f 00 00       	and    eax,0xfff
c000e4fb:	89 c6                	mov    esi,eax
c000e4fd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	6a 01                	push   0x1
c000e508:	e8 dc b0 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e514:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e51a:	83 ec 0c             	sub    esp,0xc
c000e51d:	6a 01                	push   0x1
c000e51f:	6a 01                	push   0x1
c000e521:	50                   	push   eax
c000e522:	52                   	push   edx
c000e523:	53                   	push   ebx
c000e524:	e8 bb ba ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e529:	83 c4 20             	add    esp,0x20
c000e52c:	09 f0                	or     eax,esi
c000e52e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e532:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e536:	c1 e0 03             	shl    eax,0x3
c000e539:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e53e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e546:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e54a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e556:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e55a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e55e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e562:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e566:	89 c6                	mov    esi,eax
c000e568:	89 d7                	mov    edi,edx
c000e56a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e56c:	89 c8                	mov    eax,ecx
c000e56e:	89 fa                	mov    edx,edi
c000e570:	89 f3                	mov    ebx,esi
c000e572:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e576:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e57a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e57e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e585:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e589:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e58d:	05 00 10 00 00       	add    eax,0x1000
c000e592:	c1 e8 0c             	shr    eax,0xc
c000e595:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e59d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5a5:	25 ff 0f 00 00       	and    eax,0xfff
c000e5aa:	89 c6                	mov    esi,eax
c000e5ac:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5b2:	83 ec 0c             	sub    esp,0xc
c000e5b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5b9:	e8 2b b0 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e5be:	83 c4 10             	add    esp,0x10
c000e5c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5cb:	83 ec 0c             	sub    esp,0xc
c000e5ce:	6a 01                	push   0x1
c000e5d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e5d4:	50                   	push   eax
c000e5d5:	52                   	push   edx
c000e5d6:	53                   	push   ebx
c000e5d7:	e8 08 ba ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5dc:	83 c4 20             	add    esp,0x20
c000e5df:	09 f0                	or     eax,esi
c000e5e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e9:	83 ec 0c             	sub    esp,0xc
c000e5ec:	50                   	push   eax
c000e5ed:	e8 11 b3 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e5fd:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e604:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e609:	e9 be fe ff ff       	jmp    c000e4cc <loadACPITables(unsigned char*)+0x11c>
c000e60e:	66 90                	xchg   ax,ax
c000e610:	90                   	nop
c000e611:	8d 76 00             	lea    esi,[esi+0x0]
c000e614:	83 c4 60             	add    esp,0x60
c000e617:	5b                   	pop    ebx
c000e618:	5e                   	pop    esi
c000e619:	5f                   	pop    edi
c000e61a:	c3                   	ret    
c000e61b:	90                   	nop

c000e61c <findRSDT(unsigned char*)>:
c000e61c:	57                   	push   edi
c000e61d:	56                   	push   esi
c000e61e:	53                   	push   ebx
c000e61f:	83 ec 50             	sub    esp,0x50
c000e622:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e627:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e62d:	83 e0 04             	and    eax,0x4
c000e630:	0f b6 c0             	movzx  eax,al
c000e633:	85 c0                	test   eax,eax
c000e635:	75 0d                	jne    c000e644 <findRSDT(unsigned char*)+0x28>
c000e637:	b8 00 00 00 00       	mov    eax,0x0
c000e63c:	e9 2b 01 00 00       	jmp    c000e76c <findRSDT(unsigned char*)+0x150>
c000e641:	8d 76 00             	lea    esi,[esi+0x0]
c000e644:	89 e0                	mov    eax,esp
c000e646:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e64a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e64e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e652:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e65a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e65e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e662:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e666:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e66a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e66e:	89 c6                	mov    esi,eax
c000e670:	89 d7                	mov    edi,edx
c000e672:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e674:	89 c8                	mov    eax,ecx
c000e676:	89 fa                	mov    edx,edi
c000e678:	89 f3                	mov    ebx,esi
c000e67a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e67e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e682:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e686:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e68a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e68e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e696:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e69a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e69e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6ae:	25 ff 0f 00 00       	and    eax,0xfff
c000e6b3:	89 c6                	mov    esi,eax
c000e6b5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6bb:	83 ec 0c             	sub    esp,0xc
c000e6be:	6a 02                	push   0x2
c000e6c0:	e8 24 af ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e6c5:	83 c4 10             	add    esp,0x10
c000e6c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e6cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6d2:	83 ec 0c             	sub    esp,0xc
c000e6d5:	6a 01                	push   0x1
c000e6d7:	6a 02                	push   0x2
c000e6d9:	50                   	push   eax
c000e6da:	52                   	push   edx
c000e6db:	53                   	push   ebx
c000e6dc:	e8 03 b9 ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6e1:	83 c4 20             	add    esp,0x20
c000e6e4:	09 f0                	or     eax,esi
c000e6e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6ee:	25 ff 0f 00 00       	and    eax,0xfff
c000e6f3:	89 c6                	mov    esi,eax
c000e6f5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6fb:	83 ec 0c             	sub    esp,0xc
c000e6fe:	6a 02                	push   0x2
c000e700:	e8 e4 ae ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e70c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e712:	83 ec 0c             	sub    esp,0xc
c000e715:	6a 01                	push   0x1
c000e717:	6a 02                	push   0x2
c000e719:	50                   	push   eax
c000e71a:	52                   	push   edx
c000e71b:	53                   	push   ebx
c000e71c:	e8 c3 b8 ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e721:	83 c4 20             	add    esp,0x20
c000e724:	09 f0                	or     eax,esi
c000e726:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e72a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e72f:	85 c0                	test   eax,eax
c000e731:	75 11                	jne    c000e744 <findRSDT(unsigned char*)+0x128>
c000e733:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e73a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e73e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e742:	eb 24                	jmp    c000e768 <findRSDT(unsigned char*)+0x14c>
c000e744:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e749:	83 f8 02             	cmp    eax,0x2
c000e74c:	75 12                	jne    c000e760 <findRSDT(unsigned char*)+0x144>
c000e74e:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e755:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e759:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e75d:	eb 09                	jmp    c000e768 <findRSDT(unsigned char*)+0x14c>
c000e75f:	90                   	nop
c000e760:	b8 00 00 00 00       	mov    eax,0x0
c000e765:	eb 05                	jmp    c000e76c <findRSDT(unsigned char*)+0x150>
c000e767:	90                   	nop
c000e768:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e76c:	83 c4 50             	add    esp,0x50
c000e76f:	5b                   	pop    ebx
c000e770:	5e                   	pop    esi
c000e771:	5f                   	pop    edi
c000e772:	c3                   	ret    
c000e773:	90                   	nop

c000e774 <findDataTable(unsigned char*, char*)>:
c000e774:	83 ec 1c             	sub    esp,0x1c
c000e777:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e77c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e782:	83 e0 04             	and    eax,0x4
c000e785:	0f b6 c0             	movzx  eax,al
c000e788:	85 c0                	test   eax,eax
c000e78a:	75 08                	jne    c000e794 <findDataTable(unsigned char*, char*)+0x20>
c000e78c:	b8 00 00 00 00       	mov    eax,0x0
c000e791:	eb 5d                	jmp    c000e7f0 <findDataTable(unsigned char*, char*)+0x7c>
c000e793:	90                   	nop
c000e794:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e79c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7a5:	7d 41                	jge    c000e7e8 <findDataTable(unsigned char*, char*)+0x74>
c000e7a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ab:	c1 e0 03             	shl    eax,0x3
c000e7ae:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7b3:	83 ec 04             	sub    esp,0x4
c000e7b6:	6a 04                	push   0x4
c000e7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7bc:	50                   	push   eax
c000e7bd:	e8 be 1b ff ff       	call   c0000380 <memcmp>
c000e7c2:	83 c4 10             	add    esp,0x10
c000e7c5:	85 c0                	test   eax,eax
c000e7c7:	0f 94 c0             	sete   al
c000e7ca:	0f b6 c0             	movzx  eax,al
c000e7cd:	85 c0                	test   eax,eax
c000e7cf:	74 0f                	je     c000e7e0 <findDataTable(unsigned char*, char*)+0x6c>
c000e7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d5:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e7dc:	eb 12                	jmp    c000e7f0 <findDataTable(unsigned char*, char*)+0x7c>
c000e7de:	66 90                	xchg   ax,ax
c000e7e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e7e5:	eb b5                	jmp    c000e79c <findDataTable(unsigned char*, char*)+0x28>
c000e7e7:	90                   	nop
c000e7e8:	b8 00 00 00 00       	mov    eax,0x0
c000e7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f0:	83 c4 1c             	add    esp,0x1c
c000e7f3:	c3                   	ret    

c000e7f4 <scanMADT()>:
c000e7f4:	53                   	push   ebx
c000e7f5:	83 ec 38             	sub    esp,0x38
c000e7f8:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e7fd:	25 00 04 00 00       	and    eax,0x400
c000e802:	74 14                	je     c000e818 <scanMADT()+0x24>
c000e804:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e809:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e80f:	83 e2 fb             	and    edx,0xfffffffb
c000e812:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e818:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e81d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e823:	83 e0 04             	and    eax,0x4
c000e826:	0f b6 c0             	movzx  eax,al
c000e829:	85 c0                	test   eax,eax
c000e82b:	0f 84 6b 04 00 00    	je     c000ec9c <scanMADT()+0x4a8>
c000e831:	e8 e2 fa ff ff       	call   c000e318 <findRSDP()>
c000e836:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e83b:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e840:	85 c0                	test   eax,eax
c000e842:	75 1c                	jne    c000e860 <scanMADT()+0x6c>
c000e844:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e849:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e84f:	83 e2 fb             	and    edx,0xfffffffb
c000e852:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e858:	e9 47 04 00 00       	jmp    c000eca4 <scanMADT()+0x4b0>
c000e85d:	8d 76 00             	lea    esi,[esi+0x0]
c000e860:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e865:	83 ec 0c             	sub    esp,0xc
c000e868:	50                   	push   eax
c000e869:	e8 ae fd ff ff       	call   c000e61c <findRSDT(unsigned char*)>
c000e86e:	83 c4 10             	add    esp,0x10
c000e871:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e876:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e87b:	85 c0                	test   eax,eax
c000e87d:	75 19                	jne    c000e898 <scanMADT()+0xa4>
c000e87f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e884:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e88a:	83 e2 fb             	and    edx,0xfffffffb
c000e88d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e893:	e9 0c 04 00 00       	jmp    c000eca4 <scanMADT()+0x4b0>
c000e898:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e89d:	83 ec 0c             	sub    esp,0xc
c000e8a0:	50                   	push   eax
c000e8a1:	e8 0a fb ff ff       	call   c000e3b0 <loadACPITables(unsigned char*)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8ae:	83 ec 08             	sub    esp,0x8
c000e8b1:	68 6c 08 02 c0       	push   0xc002086c
c000e8b6:	50                   	push   eax
c000e8b7:	e8 b8 fe ff ff       	call   c000e774 <findDataTable(unsigned char*, char*)>
c000e8bc:	83 c4 10             	add    esp,0x10
c000e8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8c3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e8c8:	75 1a                	jne    c000e8e4 <scanMADT()+0xf0>
c000e8ca:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8cf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8d5:	83 e2 fe             	and    edx,0xfffffffe
c000e8d8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8de:	e9 c1 03 00 00       	jmp    c000eca4 <scanMADT()+0x4b0>
c000e8e3:	90                   	nop
c000e8e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e8ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8f3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e8f7:	0f 87 a7 03 00 00    	ja     c000eca4 <scanMADT()+0x4b0>
c000e8fd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e905:	0f 87 99 03 00 00    	ja     c000eca4 <scanMADT()+0x4b0>
c000e90b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e90f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e917:	8d 50 01             	lea    edx,[eax+0x1]
c000e91a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e91e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e922:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e926:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e92a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e92e:	8d 50 01             	lea    edx,[eax+0x1]
c000e931:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e935:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e939:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e93d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e941:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e946:	83 f8 02             	cmp    eax,0x2
c000e949:	0f 86 51 03 00 00    	jbe    c000eca0 <scanMADT()+0x4ac>
c000e94f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e954:	85 c0                	test   eax,eax
c000e956:	75 58                	jne    c000e9b0 <scanMADT()+0x1bc>
c000e958:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95c:	8d 50 01             	lea    edx,[eax+0x1]
c000e95f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e963:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e969:	0f b6 d2             	movzx  edx,dl
c000e96c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e970:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e974:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e97a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e97e:	8d 50 01             	lea    edx,[eax+0x1]
c000e981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e985:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e98b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e98e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e994:	0f b6 d2             	movzx  edx,dl
c000e997:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e99b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e99f:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9aa:	e9 d9 02 00 00       	jmp    c000ec88 <scanMADT()+0x494>
c000e9af:	90                   	nop
c000e9b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9b5:	83 f8 01             	cmp    eax,0x1
c000e9b8:	0f 85 1a 01 00 00    	jne    c000ead8 <scanMADT()+0x2e4>
c000e9be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c2:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c9:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000e9cf:	0f b6 d2             	movzx  edx,dl
c000e9d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9da:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000e9e0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000e9e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ed:	01 d0                	add    eax,edx
c000e9ef:	83 c0 2c             	add    eax,0x2c
c000e9f2:	8a 00                	mov    al,BYTE PTR [eax]
c000e9f4:	0f b6 d0             	movzx  edx,al
c000e9f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea02:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea06:	0f b6 c0             	movzx  eax,al
c000ea09:	c1 e0 08             	shl    eax,0x8
c000ea0c:	89 d1                	mov    ecx,edx
c000ea0e:	09 c1                	or     ecx,eax
c000ea10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea14:	8d 50 02             	lea    edx,[eax+0x2]
c000ea17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea1b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea1f:	0f b6 c0             	movzx  eax,al
c000ea22:	c1 e0 10             	shl    eax,0x10
c000ea25:	09 c1                	or     ecx,eax
c000ea27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea2b:	8d 50 03             	lea    edx,[eax+0x3]
c000ea2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea36:	0f b6 c0             	movzx  eax,al
c000ea39:	c1 e0 18             	shl    eax,0x18
c000ea3c:	09 c1                	or     ecx,eax
c000ea3e:	89 ca                	mov    edx,ecx
c000ea40:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea45:	0f b6 c0             	movzx  eax,al
c000ea48:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea4f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5c:	01 d0                	add    eax,edx
c000ea5e:	83 c0 2c             	add    eax,0x2c
c000ea61:	8a 00                	mov    al,BYTE PTR [eax]
c000ea63:	0f b6 d0             	movzx  edx,al
c000ea66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea71:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea75:	0f b6 c0             	movzx  eax,al
c000ea78:	c1 e0 08             	shl    eax,0x8
c000ea7b:	89 d1                	mov    ecx,edx
c000ea7d:	09 c1                	or     ecx,eax
c000ea7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea83:	8d 50 02             	lea    edx,[eax+0x2]
c000ea86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea8a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea8e:	0f b6 c0             	movzx  eax,al
c000ea91:	c1 e0 10             	shl    eax,0x10
c000ea94:	09 c1                	or     ecx,eax
c000ea96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea9a:	8d 50 03             	lea    edx,[eax+0x3]
c000ea9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaa1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaa5:	0f b6 c0             	movzx  eax,al
c000eaa8:	c1 e0 18             	shl    eax,0x18
c000eaab:	09 c1                	or     ecx,eax
c000eaad:	89 ca                	mov    edx,ecx
c000eaaf:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eab4:	0f b6 c0             	movzx  eax,al
c000eab7:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eabe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eac3:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eac8:	83 c0 01             	add    eax,0x1
c000eacb:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ead0:	e9 b3 01 00 00       	jmp    c000ec88 <scanMADT()+0x494>
c000ead5:	8d 76 00             	lea    esi,[esi+0x0]
c000ead8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eadd:	83 f8 02             	cmp    eax,0x2
c000eae0:	0f 85 ea 00 00 00    	jne    c000ebd0 <scanMADT()+0x3dc>
c000eae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaea:	8d 50 01             	lea    edx,[eax+0x1]
c000eaed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eaf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eaf9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eafd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb01:	8d 50 01             	lea    edx,[eax+0x1]
c000eb04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb0c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb10:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1c:	01 d0                	add    eax,edx
c000eb1e:	83 c0 2c             	add    eax,0x2c
c000eb21:	8a 00                	mov    al,BYTE PTR [eax]
c000eb23:	0f b6 d0             	movzx  edx,al
c000eb26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb2a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb31:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb35:	0f b6 c0             	movzx  eax,al
c000eb38:	c1 e0 08             	shl    eax,0x8
c000eb3b:	89 d1                	mov    ecx,edx
c000eb3d:	09 c1                	or     ecx,eax
c000eb3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb43:	8d 50 02             	lea    edx,[eax+0x2]
c000eb46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb4a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb4e:	0f b6 c0             	movzx  eax,al
c000eb51:	c1 e0 10             	shl    eax,0x10
c000eb54:	09 c1                	or     ecx,eax
c000eb56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb5a:	8d 50 03             	lea    edx,[eax+0x3]
c000eb5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb61:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb65:	0f b6 c0             	movzx  eax,al
c000eb68:	c1 e0 18             	shl    eax,0x18
c000eb6b:	09 c8                	or     eax,ecx
c000eb6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb71:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7e:	01 d0                	add    eax,edx
c000eb80:	83 c0 2c             	add    eax,0x2c
c000eb83:	8a 00                	mov    al,BYTE PTR [eax]
c000eb85:	0f b6 c0             	movzx  eax,al
c000eb88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb8c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eb8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb93:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000eb97:	0f b6 d2             	movzx  edx,dl
c000eb9a:	c1 e2 08             	shl    edx,0x8
c000eb9d:	09 d0                	or     eax,edx
c000eb9f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eba4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eba9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebb2:	88 90 a0 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde160],dl
c000ebb8:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ebbd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ebc2:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ebca:	e9 b9 00 00 00       	jmp    c000ec88 <scanMADT()+0x494>
c000ebcf:	90                   	nop
c000ebd0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ebd5:	83 f8 04             	cmp    eax,0x4
c000ebd8:	0f 85 9a 00 00 00    	jne    c000ec78 <scanMADT()+0x484>
c000ebde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe2:	8d 50 01             	lea    edx,[eax+0x1]
c000ebe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebf1:	0f b6 c0             	movzx  eax,al
c000ebf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec00:	01 d0                	add    eax,edx
c000ec02:	83 c0 2c             	add    eax,0x2c
c000ec05:	8a 00                	mov    al,BYTE PTR [eax]
c000ec07:	0f b6 d0             	movzx  edx,al
c000ec0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec0e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec15:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec19:	0f b6 c0             	movzx  eax,al
c000ec1c:	c1 e0 08             	shl    eax,0x8
c000ec1f:	09 d0                	or     eax,edx
c000ec21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec25:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec2e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec39:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec3d:	0f b6 c0             	movzx  eax,al
c000ec40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec48:	c1 e0 08             	shl    eax,0x8
c000ec4b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec4f:	89 c1                	mov    ecx,eax
c000ec51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec55:	c1 e0 18             	shl    eax,0x18
c000ec58:	89 c3                	mov    ebx,eax
c000ec5a:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec5f:	8d 50 01             	lea    edx,[eax+0x1]
c000ec62:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ec68:	09 d9                	or     ecx,ebx
c000ec6a:	89 ca                	mov    edx,ecx
c000ec6c:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ec73:	eb 13                	jmp    c000ec88 <scanMADT()+0x494>
c000ec75:	8d 76 00             	lea    esi,[esi+0x0]
c000ec78:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec7d:	83 f8 05             	cmp    eax,0x5
c000ec80:	75 06                	jne    c000ec88 <scanMADT()+0x494>
c000ec82:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ec87:	90                   	nop
c000ec88:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ec8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec91:	01 d0                	add    eax,edx
c000ec93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec97:	e9 50 fc ff ff       	jmp    c000e8ec <scanMADT()+0xf8>
c000ec9c:	90                   	nop
c000ec9d:	eb 05                	jmp    c000eca4 <scanMADT()+0x4b0>
c000ec9f:	90                   	nop
c000eca0:	90                   	nop
c000eca1:	8d 76 00             	lea    esi,[esi+0x0]
c000eca4:	83 c4 38             	add    esp,0x38
c000eca7:	5b                   	pop    ebx
c000eca8:	c3                   	ret    
c000eca9:	90                   	nop
c000ecaa:	66 90                	xchg   ax,ax

c000ecac <ACPI::ACPI()>:
c000ecac:	83 ec 0c             	sub    esp,0xc
c000ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	68 71 08 02 c0       	push   0xc0020871
c000ecbb:	50                   	push   eax
c000ecbc:	e8 51 d2 ff ff       	call   c000bf12 <Device::Device(char const*)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c000ecc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eccd:	89 10                	mov    DWORD PTR [eax],edx
c000eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecd3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecde:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ecf6:	e8 f9 fa ff ff       	call   c000e7f4 <scanMADT()>
c000ecfb:	90                   	nop
c000ecfc:	83 c4 0c             	add    esp,0xc
c000ecff:	c3                   	ret    

c000ed00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed00:	83 ec 2c             	sub    esp,0x2c
c000ed03:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed0b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed0f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed13:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed18:	88 d0                	mov    al,dl
c000ed1a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed1e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed23:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed2b:	90                   	nop
c000ed2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed30:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed36:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed3a:	0f 8d b0 00 00 00    	jge    c000edf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed48:	83 c2 2a             	add    edx,0x2a
c000ed4b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ed54:	0f b7 c0             	movzx  eax,ax
c000ed57:	39 c2                	cmp    edx,eax
c000ed59:	0f 85 85 00 00 00    	jne    c000ede4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed67:	83 c2 2a             	add    edx,0x2a
c000ed6a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ed6e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ed73:	0f b6 c0             	movzx  eax,al
c000ed76:	39 c2                	cmp    edx,eax
c000ed78:	75 6a                	jne    c000ede4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed7a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed7f:	85 c0                	test   eax,eax
c000ed81:	74 3d                	je     c000edc0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ed83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed8b:	83 c2 2a             	add    edx,0x2a
c000ed8e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed99:	39 c2                	cmp    edx,eax
c000ed9b:	74 13                	je     c000edb0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ed9d:	83 ec 0c             	sub    esp,0xc
c000eda0:	68 ec 07 02 c0       	push   0xc00207ec
c000eda5:	e8 8d 1a 00 00       	call   c0010837 <KePanic(char const*)>
c000edaa:	83 c4 10             	add    esp,0x10
c000edad:	8d 76 00             	lea    esi,[esi+0x0]
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	68 76 08 02 c0       	push   0xc0020876
c000edb8:	e8 7a 1a 00 00       	call   c0010837 <KePanic(char const*)>
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edcc:	83 c2 2a             	add    edx,0x2a
c000edcf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000edd3:	8b 02                	mov    eax,DWORD PTR [edx]
c000edd5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000edd8:	89 01                	mov    DWORD PTR [ecx],eax
c000edda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000eddd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ede2:	66 90                	xchg   ax,ax
c000ede4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ede9:	e9 3e ff ff ff       	jmp    c000ed2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000edee:	66 90                	xchg   ax,ax
c000edf0:	90                   	nop
c000edf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf5:	83 c4 2c             	add    esp,0x2c
c000edf8:	c2 04 00             	ret    0x4
c000edfb:	90                   	nop

c000edfc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000edfc:	83 ec 1c             	sub    esp,0x1c
c000edff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee03:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee10:	88 c8                	mov    al,cl
c000ee12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee16:	88 d0                	mov    al,dl
c000ee18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee2d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee31:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee43:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee4a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee59:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee5d:	83 c0 01             	add    eax,0x1
c000ee60:	88 c1                	mov    cl,al
c000ee62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee66:	83 c2 2a             	add    edx,0x2a
c000ee69:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ee6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee71:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee82:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ee86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee90:	8d 50 01             	lea    edx,[eax+0x1]
c000ee93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee97:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ee9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eea7:	3d 00 02 00 00       	cmp    eax,0x200
c000eeac:	75 12                	jne    c000eec0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eeae:	83 ec 0c             	sub    esp,0xc
c000eeb1:	68 85 08 02 c0       	push   0xc0020885
c000eeb6:	e8 7c 19 00 00       	call   c0010837 <KePanic(char const*)>
c000eebb:	83 c4 10             	add    esp,0x10
c000eebe:	66 90                	xchg   ax,ax
c000eec0:	90                   	nop
c000eec1:	83 c4 1c             	add    esp,0x1c
c000eec4:	c3                   	ret    
c000eec5:	90                   	nop
c000eec6:	66 90                	xchg   ax,ax

c000eec8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eec8:	b8 00 00 00 00       	mov    eax,0x0
c000eecd:	c3                   	ret    
c000eece:	66 90                	xchg   ax,ax

c000eed0 <ACPI::detectPCI()>:
c000eed0:	53                   	push   ebx
c000eed1:	83 ec 28             	sub    esp,0x28
c000eed4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eed9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eede:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eee3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eee9:	83 e0 04             	and    eax,0x4
c000eeec:	0f b6 c0             	movzx  eax,al
c000eeef:	85 c0                	test   eax,eax
c000eef1:	74 2d                	je     c000ef20 <ACPI::detectPCI()+0x50>
c000eef3:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eef8:	83 ec 08             	sub    esp,0x8
c000eefb:	68 a2 08 02 c0       	push   0xc00208a2
c000ef00:	50                   	push   eax
c000ef01:	e8 6e f8 ff ff       	call   c000e774 <findDataTable(unsigned char*, char*)>
c000ef06:	83 c4 10             	add    esp,0x10
c000ef09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef0d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef12:	74 0c                	je     c000ef20 <ACPI::detectPCI()+0x50>
c000ef14:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef19:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef1e:	66 90                	xchg   ax,ax
c000ef20:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef2c:	8a 00                	mov    al,BYTE PTR [eax]
c000ef2e:	0f b6 c0             	movzx  eax,al
c000ef31:	83 f8 01             	cmp    eax,0x1
c000ef34:	75 0e                	jne    c000ef44 <ACPI::detectPCI()+0x74>
c000ef36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef40:	eb 2e                	jmp    c000ef70 <ACPI::detectPCI()+0xa0>
c000ef42:	66 90                	xchg   ax,ax
c000ef44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef48:	8a 00                	mov    al,BYTE PTR [eax]
c000ef4a:	0f b6 c0             	movzx  eax,al
c000ef4d:	83 f8 02             	cmp    eax,0x2
c000ef50:	75 1e                	jne    c000ef70 <ACPI::detectPCI()+0xa0>
c000ef52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef5c:	85 c0                	test   eax,eax
c000ef5e:	74 10                	je     c000ef70 <ACPI::detectPCI()+0xa0>
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	68 1c 08 02 c0       	push   0xc002081c
c000ef68:	e8 ca 18 00 00       	call   c0010837 <KePanic(char const*)>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ef74:	83 f0 01             	xor    eax,0x1
c000ef77:	0f b6 c0             	movzx  eax,al
c000ef7a:	85 c0                	test   eax,eax
c000ef7c:	74 46                	je     c000efc4 <ACPI::detectPCI()+0xf4>
c000ef7e:	e8 ad 11 ff ff       	call   c0000130 <manualPCIProbe>
c000ef83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ef8c:	75 0e                	jne    c000ef9c <ACPI::detectPCI()+0xcc>
c000ef8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef93:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef98:	eb 2a                	jmp    c000efc4 <ACPI::detectPCI()+0xf4>
c000ef9a:	66 90                	xchg   ax,ax
c000ef9c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efa1:	75 21                	jne    c000efc4 <ACPI::detectPCI()+0xf4>
c000efa3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efa8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efad:	85 c0                	test   eax,eax
c000efaf:	74 13                	je     c000efc4 <ACPI::detectPCI()+0xf4>
c000efb1:	83 ec 0c             	sub    esp,0xc
c000efb4:	68 1c 08 02 c0       	push   0xc002081c
c000efb9:	e8 79 18 00 00       	call   c0010837 <KePanic(char const*)>
c000efbe:	83 c4 10             	add    esp,0x10
c000efc1:	8d 76 00             	lea    esi,[esi+0x0]
c000efc4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000efc9:	85 c0                	test   eax,eax
c000efcb:	0f 84 87 00 00 00    	je     c000f058 <ACPI::detectPCI()+0x188>
c000efd1:	83 ec 0c             	sub    esp,0xc
c000efd4:	68 a7 08 02 c0       	push   0xc00208a7
c000efd9:	e8 dc 11 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000efde:	83 c4 10             	add    esp,0x10
c000efe1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000efe9:	83 ec 0c             	sub    esp,0xc
c000efec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eff0:	e8 92 8a ff ff       	call   c0007a87 <malloc>
c000eff5:	83 c4 10             	add    esp,0x10
c000eff8:	89 c3                	mov    ebx,eax
c000effa:	83 ec 0c             	sub    esp,0xc
c000effd:	53                   	push   ebx
c000effe:	e8 0f b0 00 00       	call   c001a012 <PCI::PCI()>
c000f003:	83 c4 10             	add    esp,0x10
c000f006:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f00a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f00e:	83 ec 08             	sub    esp,0x8
c000f011:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f015:	50                   	push   eax
c000f016:	e8 5f cd ff ff       	call   c000bd7a <Device::addChild(Device*)>
c000f01b:	83 c4 10             	add    esp,0x10
c000f01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f022:	8b 00                	mov    eax,DWORD PTR [eax]
c000f024:	83 c0 08             	add    eax,0x8
c000f027:	8b 00                	mov    eax,DWORD PTR [eax]
c000f029:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f02e:	85 d2                	test   edx,edx
c000f030:	74 0a                	je     c000f03c <ACPI::detectPCI()+0x16c>
c000f032:	ba 01 00 00 00       	mov    edx,0x1
c000f037:	eb 0b                	jmp    c000f044 <ACPI::detectPCI()+0x174>
c000f039:	8d 76 00             	lea    esi,[esi+0x0]
c000f03c:	ba 02 00 00 00       	mov    edx,0x2
c000f041:	8d 76 00             	lea    esi,[esi+0x0]
c000f044:	6a 00                	push   0x0
c000f046:	6a 00                	push   0x0
c000f048:	52                   	push   edx
c000f049:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f04d:	ff d0                	call   eax
c000f04f:	83 c4 10             	add    esp,0x10
c000f052:	e9 91 00 00 00       	jmp    c000f0e8 <ACPI::detectPCI()+0x218>
c000f057:	90                   	nop
c000f058:	83 ec 0c             	sub    esp,0xc
c000f05b:	68 bf 08 02 c0       	push   0xc00208bf
c000f060:	e8 55 11 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000f065:	83 c4 10             	add    esp,0x10
c000f068:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f076:	e8 0c 8a ff ff       	call   c0007a87 <malloc>
c000f07b:	83 c4 10             	add    esp,0x10
c000f07e:	89 c3                	mov    ebx,eax
c000f080:	83 ec 0c             	sub    esp,0xc
c000f083:	53                   	push   ebx
c000f084:	e8 23 bb 00 00       	call   c001abac <IDE::IDE()>
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f094:	83 ec 08             	sub    esp,0x8
c000f097:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f09b:	50                   	push   eax
c000f09c:	e8 d9 cc ff ff       	call   c000bd7a <Device::addChild(Device*)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f0cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d2:	83 c0 08             	add    eax,0x8
c000f0d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d7:	6a 00                	push   0x0
c000f0d9:	6a 00                	push   0x0
c000f0db:	6a 00                	push   0x0
c000f0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0e1:	ff d0                	call   eax
c000f0e3:	83 c4 10             	add    esp,0x10
c000f0e6:	66 90                	xchg   ax,ax
c000f0e8:	90                   	nop
c000f0e9:	83 c4 28             	add    esp,0x28
c000f0ec:	5b                   	pop    ebx
c000f0ed:	c3                   	ret    
c000f0ee:	66 90                	xchg   ax,ax

c000f0f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f0f0:	83 ec 1c             	sub    esp,0x1c
c000f0f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0f7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f0fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f0fe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f103:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f108:	83 ec 08             	sub    esp,0x8
c000f10b:	52                   	push   edx
c000f10c:	50                   	push   eax
c000f10d:	e8 50 80 ff ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c000f112:	83 c4 10             	add    esp,0x10
c000f115:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f119:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f11e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f123:	83 ec 04             	sub    esp,0x4
c000f126:	6a 01                	push   0x1
c000f128:	52                   	push   edx
c000f129:	50                   	push   eax
c000f12a:	e8 39 81 ff ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f12f:	83 c4 10             	add    esp,0x10
c000f132:	90                   	nop
c000f133:	83 c4 1c             	add    esp,0x1c
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <ACPI::sleep()>:
c000f138:	83 ec 0c             	sub    esp,0xc
c000f13b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f140:	85 c0                	test   eax,eax
c000f142:	74 08                	je     c000f14c <ACPI::sleep()+0x14>
c000f144:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f149:	ff d0                	call   eax
c000f14b:	90                   	nop
c000f14c:	90                   	nop
c000f14d:	83 c4 0c             	add    esp,0xc
c000f150:	c3                   	ret    
c000f151:	90                   	nop
c000f152:	66 90                	xchg   ax,ax

c000f154 <ACPI::open(int, int, void*)>:
c000f154:	57                   	push   edi
c000f155:	56                   	push   esi
c000f156:	53                   	push   ebx
c000f157:	81 ec 70 01 00 00    	sub    esp,0x170
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f167:	e8 64 fd ff ff       	call   c000eed0 <ACPI::detectPCI()>
c000f16c:	83 c4 10             	add    esp,0x10
c000f16f:	83 ec 0c             	sub    esp,0xc
c000f172:	68 44 08 02 c0       	push   0xc0020844
c000f177:	e8 3e 10 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000f17c:	83 c4 10             	add    esp,0x10
c000f17f:	83 ec 0c             	sub    esp,0xc
c000f182:	68 d4 08 02 c0       	push   0xc00208d4
c000f187:	e8 d4 49 00 00       	call   c0013b60 <Thr::loadKernelSymbolTable(char const*)>
c000f18c:	83 c4 10             	add    esp,0x10
c000f18f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f197:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1a2:	83 ec 0c             	sub    esp,0xc
c000f1a5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1ac:	e8 d6 88 ff ff       	call   c0007a87 <malloc>
c000f1b1:	83 c4 10             	add    esp,0x10
c000f1b4:	89 c3                	mov    ebx,eax
c000f1b6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1bb:	83 ec 04             	sub    esp,0x4
c000f1be:	50                   	push   eax
c000f1bf:	68 f2 08 02 c0       	push   0xc00208f2
c000f1c4:	53                   	push   ebx
c000f1c5:	e8 02 bd ff ff       	call   c000aecc <File::File(char const*, Process*)>
c000f1ca:	83 c4 10             	add    esp,0x10
c000f1cd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f1d4:	83 ec 08             	sub    esp,0x8
c000f1d7:	6a 01                	push   0x1
c000f1d9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f1e0:	e8 a3 bd ff ff       	call   c000af88 <File::open(FileOpenMode)>
c000f1e5:	83 c4 10             	add    esp,0x10
c000f1e8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f1ef:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f1f7:	75 17                	jne    c000f210 <ACPI::open(int, int, void*)+0xbc>
c000f1f9:	83 ec 0c             	sub    esp,0xc
c000f1fc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f203:	e8 de bd ff ff       	call   c000afe6 <File::close()>
c000f208:	83 c4 10             	add    esp,0x10
c000f20b:	eb 0b                	jmp    c000f218 <ACPI::open(int, int, void*)+0xc4>
c000f20d:	8d 76 00             	lea    esi,[esi+0x0]
c000f210:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f218:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f220:	74 1e                	je     c000f240 <ACPI::open(int, int, void*)+0xec>
c000f222:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f229:	8b 00                	mov    eax,DWORD PTR [eax]
c000f22b:	83 c0 08             	add    eax,0x8
c000f22e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f230:	83 ec 0c             	sub    esp,0xc
c000f233:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f23a:	ff d0                	call   eax
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	90                   	nop
c000f240:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f247:	83 f0 01             	xor    eax,0x1
c000f24a:	0f b6 c0             	movzx  eax,al
c000f24d:	85 c0                	test   eax,eax
c000f24f:	74 43                	je     c000f294 <ACPI::open(int, int, void*)+0x140>
c000f251:	83 ec 0c             	sub    esp,0xc
c000f254:	68 10 09 02 c0       	push   0xc0020910
c000f259:	e8 5c 0f 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000f25e:	83 c4 10             	add    esp,0x10
c000f261:	83 ec 04             	sub    esp,0x4
c000f264:	6a 0c                	push   0xc
c000f266:	68 2b 09 02 c0       	push   0xc002092b
c000f26b:	68 3c 09 02 c0       	push   0xc002093c
c000f270:	e8 97 3c 00 00       	call   c0012f0c <Reg::readIntWithDefault(char*, char*, int)>
c000f275:	83 c4 10             	add    esp,0x10
c000f278:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f27f:	83 ec 0c             	sub    esp,0xc
c000f282:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f289:	e8 89 a5 ff ff       	call   c0009817 <Virt::setupPageSwapping(int)>
c000f28e:	83 c4 10             	add    esp,0x10
c000f291:	8d 76 00             	lea    esi,[esi+0x0]
c000f294:	83 ec 0c             	sub    esp,0xc
c000f297:	68 b5 f9 01 c0       	push   0xc001f9b5
c000f29c:	e8 19 0f 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2ab:	83 ec 08             	sub    esp,0x8
c000f2ae:	6a 13                	push   0x13
c000f2b0:	50                   	push   eax
c000f2b1:	e8 dc cd ff ff       	call   c000c092 <getDevicesOfType(DeviceType)>
c000f2b6:	83 c4 0c             	add    esp,0xc
c000f2b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2c6:	50                   	push   eax
c000f2c7:	e8 e4 fa 00 00       	call   c001edb0 <LinkedList<Device>::isEmpty()>
c000f2cc:	83 c4 10             	add    esp,0x10
c000f2cf:	83 f0 01             	xor    eax,0x1
c000f2d2:	0f b6 c0             	movzx  eax,al
c000f2d5:	85 c0                	test   eax,eax
c000f2d7:	0f 84 47 01 00 00    	je     c000f424 <ACPI::open(int, int, void*)+0x2d0>
c000f2dd:	83 ec 0c             	sub    esp,0xc
c000f2e0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2e7:	50                   	push   eax
c000f2e8:	e8 df fa 00 00       	call   c001edcc <LinkedList<Device>::getFirstElement()>
c000f2ed:	83 c4 10             	add    esp,0x10
c000f2f0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f301:	50                   	push   eax
c000f302:	e8 cd fa 00 00       	call   c001edd4 <LinkedList<Device>::removeFirst()>
c000f307:	83 c4 10             	add    esp,0x10
c000f30a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f311:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f318:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f31f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f323:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f329:	ba 09 00 00 00       	mov    edx,0x9
c000f32e:	fc                   	cld    
c000f32f:	89 c7                	mov    edi,eax
c000f331:	89 de                	mov    esi,ebx
c000f333:	89 d1                	mov    ecx,edx
c000f335:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f337:	83 ec 08             	sub    esp,0x8
c000f33a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f33e:	50                   	push   eax
c000f33f:	83 ec 24             	sub    esp,0x24
c000f342:	89 e0                	mov    eax,esp
c000f344:	89 c3                	mov    ebx,eax
c000f346:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f34a:	ba 09 00 00 00       	mov    edx,0x9
c000f34f:	89 df                	mov    edi,ebx
c000f351:	89 c6                	mov    esi,eax
c000f353:	89 d1                	mov    ecx,edx
c000f355:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f357:	e8 a0 b1 00 00       	call   c001a4fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f35c:	83 c4 30             	add    esp,0x30
c000f35f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f366:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f36e:	0f 84 48 ff ff ff    	je     c000f2bc <ACPI::open(int, int, void*)+0x168>
c000f374:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f37f:	83 ec 0c             	sub    esp,0xc
c000f382:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f389:	e8 f9 86 ff ff       	call   c0007a87 <malloc>
c000f38e:	83 c4 10             	add    esp,0x10
c000f391:	89 c3                	mov    ebx,eax
c000f393:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f398:	83 ec 04             	sub    esp,0x4
c000f39b:	50                   	push   eax
c000f39c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3a3:	53                   	push   ebx
c000f3a4:	e8 23 bb ff ff       	call   c000aecc <File::File(char const*, Process*)>
c000f3a9:	83 c4 10             	add    esp,0x10
c000f3ac:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3b3:	83 ec 0c             	sub    esp,0xc
c000f3b6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3bd:	e8 34 be ff ff       	call   c000b1f6 <File::exists()>
c000f3c2:	83 c4 10             	add    esp,0x10
c000f3c5:	0f b6 c0             	movzx  eax,al
c000f3c8:	85 c0                	test   eax,eax
c000f3ca:	74 28                	je     c000f3f4 <ACPI::open(int, int, void*)+0x2a0>
c000f3cc:	83 ec 08             	sub    esp,0x8
c000f3cf:	6a 01                	push   0x1
c000f3d1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3d8:	e8 fe 51 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	83 ec 08             	sub    esp,0x8
c000f3e3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3ea:	50                   	push   eax
c000f3eb:	e8 2b 54 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	90                   	nop
c000f3f4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f3fc:	0f 84 ba fe ff ff    	je     c000f2bc <ACPI::open(int, int, void*)+0x168>
c000f402:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f409:	8b 00                	mov    eax,DWORD PTR [eax]
c000f40b:	83 c0 08             	add    eax,0x8
c000f40e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f410:	83 ec 0c             	sub    esp,0xc
c000f413:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f41a:	ff d0                	call   eax
c000f41c:	83 c4 10             	add    esp,0x10
c000f41f:	e9 98 fe ff ff       	jmp    c000f2bc <ACPI::open(int, int, void*)+0x168>
c000f424:	83 ec 0c             	sub    esp,0xc
c000f427:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f42e:	50                   	push   eax
c000f42f:	e8 78 f9 00 00       	call   c001edac <LinkedList<Device>::~LinkedList()>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f43d:	83 ec 08             	sub    esp,0x8
c000f440:	6a 01                	push   0x1
c000f442:	68 43 09 02 c0       	push   0xc0020943
c000f447:	e8 8f 51 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000f44c:	83 c4 10             	add    esp,0x10
c000f44f:	83 ec 08             	sub    esp,0x8
c000f452:	53                   	push   ebx
c000f453:	50                   	push   eax
c000f454:	e8 c2 53 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000f459:	83 c4 10             	add    esp,0x10
c000f45c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f461:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f467:	83 e0 04             	and    eax,0x4
c000f46a:	0f b6 c0             	movzx  eax,al
c000f46d:	85 c0                	test   eax,eax
c000f46f:	0f 84 1b 01 00 00    	je     c000f590 <ACPI::open(int, int, void*)+0x43c>
c000f475:	83 ec 0c             	sub    esp,0xc
c000f478:	68 60 09 02 c0       	push   0xc0020960
c000f47d:	e8 38 0d 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f49a:	e8 e8 85 ff ff       	call   c0007a87 <malloc>
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	89 c3                	mov    ebx,eax
c000f4a4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4a9:	83 ec 04             	sub    esp,0x4
c000f4ac:	50                   	push   eax
c000f4ad:	68 7d 09 02 c0       	push   0xc002097d
c000f4b2:	53                   	push   ebx
c000f4b3:	e8 14 ba ff ff       	call   c000aecc <File::File(char const*, Process*)>
c000f4b8:	83 c4 10             	add    esp,0x10
c000f4bb:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4ca:	74 20                	je     c000f4ec <ACPI::open(int, int, void*)+0x398>
c000f4cc:	83 ec 0c             	sub    esp,0xc
c000f4cf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4d6:	e8 1b bd ff ff       	call   c000b1f6 <File::exists()>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	0f b6 c0             	movzx  eax,al
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 07                	je     c000f4ec <ACPI::open(int, int, void*)+0x398>
c000f4e5:	b0 01                	mov    al,0x1
c000f4e7:	eb 07                	jmp    c000f4f0 <ACPI::open(int, int, void*)+0x39c>
c000f4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4ec:	b0 00                	mov    al,0x0
c000f4ee:	66 90                	xchg   ax,ax
c000f4f0:	0f b6 c0             	movzx  eax,al
c000f4f3:	85 c0                	test   eax,eax
c000f4f5:	74 25                	je     c000f51c <ACPI::open(int, int, void*)+0x3c8>
c000f4f7:	83 ec 08             	sub    esp,0x8
c000f4fa:	6a 01                	push   0x1
c000f4fc:	68 7d 09 02 c0       	push   0xc002097d
c000f501:	e8 d5 50 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c000f506:	83 c4 10             	add    esp,0x10
c000f509:	83 ec 08             	sub    esp,0x8
c000f50c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f513:	50                   	push   eax
c000f514:	e8 02 53 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f524:	74 2a                	je     c000f550 <ACPI::open(int, int, void*)+0x3fc>
c000f526:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f52e:	74 20                	je     c000f550 <ACPI::open(int, int, void*)+0x3fc>
c000f530:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f537:	8b 00                	mov    eax,DWORD PTR [eax]
c000f539:	83 c0 08             	add    eax,0x8
c000f53c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f548:	ff d0                	call   eax
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	8d 76 00             	lea    esi,[esi+0x0]
c000f550:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f555:	83 ec 08             	sub    esp,0x8
c000f558:	68 9a 09 02 c0       	push   0xc002099a
c000f55d:	50                   	push   eax
c000f55e:	e8 11 f2 ff ff       	call   c000e774 <findDataTable(unsigned char*, char*)>
c000f563:	83 c4 10             	add    esp,0x10
c000f566:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f56d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f575:	74 19                	je     c000f590 <ACPI::open(int, int, void*)+0x43c>
c000f577:	83 ec 08             	sub    esp,0x8
c000f57a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f581:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f588:	e8 63 fb ff ff       	call   c000f0f0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f58d:	83 c4 10             	add    esp,0x10
c000f590:	b8 00 00 00 00       	mov    eax,0x0
c000f595:	81 c4 70 01 00 00    	add    esp,0x170
c000f59b:	5b                   	pop    ebx
c000f59c:	5e                   	pop    esi
c000f59d:	5f                   	pop    edi
c000f59e:	c3                   	ret    
c000f59f:	90                   	nop

c000f5a0 <CPU::close(int, int, void*)>:
c000f5a0:	31 c0                	xor    eax,eax
c000f5a2:	c3                   	ret    
c000f5a3:	90                   	nop

c000f5a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5a4:	60                   	pusha  
c000f5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5b1:	9c                   	pushf  
c000f5b2:	fa                   	cli    
c000f5b3:	0f 09                	wbinvd 
c000f5b5:	0f 30                	wrmsr  
c000f5b7:	9d                   	popf   
c000f5b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5bc:	89 02                	mov    DWORD PTR [edx],eax
c000f5be:	61                   	popa   
c000f5bf:	c3                   	ret    

c000f5c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5c0:	60                   	pusha  
c000f5c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5c5:	9c                   	pushf  
c000f5c6:	fa                   	cli    
c000f5c7:	0f 09                	wbinvd 
c000f5c9:	31 c0                	xor    eax,eax
c000f5cb:	31 d2                	xor    edx,edx
c000f5cd:	0f 32                	rdmsr  
c000f5cf:	9d                   	popf   
c000f5d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5d4:	89 02                	mov    DWORD PTR [edx],eax
c000f5d6:	61                   	popa   
c000f5d7:	c3                   	ret    

c000f5d8 <CPU::AMD_K6_writeback(int, int, int)>:
c000f5d8:	56                   	push   esi
c000f5d9:	53                   	push   ebx
c000f5da:	83 ec 10             	sub    esp,0x10
c000f5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5e1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5e6:	75 5d                	jne    c000f645 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5e8:	83 f8 08             	cmp    eax,0x8
c000f5eb:	75 09                	jne    c000f5f6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5ed:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5f2:	7e 13                	jle    c000f607 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5f4:	eb 30                	jmp    c000f626 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5f6:	83 f8 06             	cmp    eax,0x6
c000f5f9:	7c 4a                	jl     c000f645 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5fb:	83 f8 07             	cmp    eax,0x7
c000f5fe:	7e 07                	jle    c000f607 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f600:	83 f8 09             	cmp    eax,0x9
c000f603:	74 21                	je     c000f626 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f605:	eb 3e                	jmp    c000f645 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f607:	89 e6                	mov    esi,esp
c000f609:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f60f:	c1 eb 15             	shr    ebx,0x15
c000f612:	56                   	push   esi
c000f613:	68 82 00 00 c0       	push   0xc0000082
c000f618:	e8 a3 ff ff ff       	call   c000f5c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f61d:	56                   	push   esi
c000f61e:	83 e3 7e             	and    ebx,0x7e
c000f621:	6a 00                	push   0x0
c000f623:	53                   	push   ebx
c000f624:	eb 12                	jmp    c000f638 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f626:	89 e3                	mov    ebx,esp
c000f628:	53                   	push   ebx
c000f629:	68 82 00 00 c0       	push   0xc0000082
c000f62e:	e8 8d ff ff ff       	call   c000f5c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f633:	53                   	push   ebx
c000f634:	6a 00                	push   0x0
c000f636:	6a 00                	push   0x0
c000f638:	68 82 00 00 c0       	push   0xc0000082
c000f63d:	e8 62 ff ff ff       	call   c000f5a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f642:	83 c4 18             	add    esp,0x18
c000f645:	83 c4 10             	add    esp,0x10
c000f648:	5b                   	pop    ebx
c000f649:	5e                   	pop    esi
c000f64a:	c3                   	ret    
c000f64b:	90                   	nop

c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f64c:	55                   	push   ebp
c000f64d:	57                   	push   edi
c000f64e:	56                   	push   esi
c000f64f:	53                   	push   ebx
c000f650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f654:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f658:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f65c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f660:	39 05 b0 1e 02 c0    	cmp    DWORD PTR ds:0xc0021eb0,eax
c000f666:	75 23                	jne    c000f68b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f668:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f66d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f671:	89 06                	mov    DWORD PTR [esi],eax
c000f673:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f678:	89 07                	mov    DWORD PTR [edi],eax
c000f67a:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f67f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f682:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f687:	89 02                	mov    DWORD PTR [edx],eax
c000f689:	eb 3f                	jmp    c000f6ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f68b:	31 c9                	xor    ecx,ecx
c000f68d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f691:	0f a2                	cpuid  
c000f693:	89 06                	mov    DWORD PTR [esi],eax
c000f695:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f699:	89 1f                	mov    DWORD PTR [edi],ebx
c000f69b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f69e:	89 10                	mov    DWORD PTR [eax],edx
c000f6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6a4:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c000f6a9:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6ab:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6b0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6b2:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6ba:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c5:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6ca:	5b                   	pop    ebx
c000f6cb:	5e                   	pop    esi
c000f6cc:	5f                   	pop    edi
c000f6cd:	5d                   	pop    ebp
c000f6ce:	c3                   	ret    
c000f6cf:	90                   	nop

c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6d0:	83 ec 10             	sub    esp,0x10
c000f6d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d7:	50                   	push   eax
c000f6d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6dc:	50                   	push   eax
c000f6dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e1:	50                   	push   eax
c000f6e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e6:	50                   	push   eax
c000f6e7:	6a 01                	push   0x1
c000f6e9:	e8 5e ff ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6f6:	0f 95 c0             	setne  al
c000f6f9:	83 c4 24             	add    esp,0x24
c000f6fc:	c3                   	ret    
c000f6fd:	90                   	nop

c000f6fe <CPU::cpuidCheckECX(unsigned int)>:
c000f6fe:	83 ec 10             	sub    esp,0x10
c000f701:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f705:	50                   	push   eax
c000f706:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70a:	50                   	push   eax
c000f70b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70f:	50                   	push   eax
c000f710:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f714:	50                   	push   eax
c000f715:	6a 01                	push   0x1
c000f717:	e8 30 ff ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f720:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f724:	0f 95 c0             	setne  al
c000f727:	83 c4 24             	add    esp,0x24
c000f72a:	c3                   	ret    
c000f72b:	90                   	nop

c000f72c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f72c:	83 ec 10             	sub    esp,0x10
c000f72f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f733:	50                   	push   eax
c000f734:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f738:	50                   	push   eax
c000f739:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73d:	50                   	push   eax
c000f73e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f742:	50                   	push   eax
c000f743:	6a 07                	push   0x7
c000f745:	e8 02 ff ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f752:	0f 95 c0             	setne  al
c000f755:	83 c4 24             	add    esp,0x24
c000f758:	c3                   	ret    
c000f759:	90                   	nop

c000f75a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f75a:	83 ec 10             	sub    esp,0x10
c000f75d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f761:	50                   	push   eax
c000f762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f766:	50                   	push   eax
c000f767:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76b:	50                   	push   eax
c000f76c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f770:	50                   	push   eax
c000f771:	6a 07                	push   0x7
c000f773:	e8 d4 fe ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f778:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f780:	0f 95 c0             	setne  al
c000f783:	83 c4 24             	add    esp,0x24
c000f786:	c3                   	ret    
c000f787:	90                   	nop

c000f788 <CPU::CPU()>:
c000f788:	83 ec 0c             	sub    esp,0xc
c000f78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78f:	83 ec 08             	sub    esp,0x8
c000f792:	68 bd 0a 02 c0       	push   0xc0020abd
c000f797:	50                   	push   eax
c000f798:	e8 75 c7 ff ff       	call   c000bf12 <Device::Device(char const*)>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c000f7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a9:	89 10                	mov    DWORD PTR [eax],edx
c000f7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7af:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7bd:	05 78 01 00 00       	add    eax,0x178
c000f7c2:	83 ec 0c             	sub    esp,0xc
c000f7c5:	50                   	push   eax
c000f7c6:	e8 67 7b ff ff       	call   c0007332 <GDT::GDT()>
c000f7cb:	83 c4 10             	add    esp,0x10
c000f7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d2:	05 7c 09 00 00       	add    eax,0x97c
c000f7d7:	83 ec 0c             	sub    esp,0xc
c000f7da:	50                   	push   eax
c000f7db:	e8 a0 7d ff ff       	call   c0007580 <IDT::IDT()>
c000f7e0:	83 c4 10             	add    esp,0x10
c000f7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e7:	05 7c 11 00 00       	add    eax,0x117c
c000f7ec:	83 ec 0c             	sub    esp,0xc
c000f7ef:	50                   	push   eax
c000f7f0:	e8 2b 97 ff ff       	call   c0008f20 <TSS::TSS()>
c000f7f5:	83 c4 10             	add    esp,0x10
c000f7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f807:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f811:	90                   	nop
c000f812:	83 c4 0c             	add    esp,0xc
c000f815:	c3                   	ret    

c000f816 <CPU::displayFeatures()>:
c000f816:	c3                   	ret    
c000f817:	90                   	nop

c000f818 <CPU::detectFeatures()>:
c000f818:	55                   	push   ebp
c000f819:	57                   	push   edi
c000f81a:	56                   	push   esi
c000f81b:	53                   	push   ebx
c000f81c:	83 ec 30             	sub    esp,0x30
c000f81f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f823:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f82d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f834:	6a 0d                	push   0xd
c000f836:	6a 00                	push   0x0
c000f838:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f83e:	55                   	push   ebp
c000f83f:	e8 9c 0c ff ff       	call   c00004e0 <memset>
c000f844:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f849:	83 c4 10             	add    esp,0x10
c000f84c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f853:	0f 84 db 05 00 00    	je     c000fe34 <CPU::detectFeatures()+0x61c>
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	89 ef                	mov    edi,ebp
c000f85e:	6a 10                	push   0x10
c000f860:	e8 6b fe ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f865:	83 e0 01             	and    eax,0x1
c000f868:	8d 14 00             	lea    edx,[eax+eax*1]
c000f86b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f871:	83 e0 fd             	and    eax,0xfffffffd
c000f874:	09 d0                	or     eax,edx
c000f876:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f87c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f883:	e8 48 fe ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f888:	83 e0 01             	and    eax,0x1
c000f88b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f892:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f898:	83 e0 fb             	and    eax,0xfffffffb
c000f89b:	09 d0                	or     eax,edx
c000f89d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8a3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8aa:	e8 21 fe ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f8af:	83 e0 01             	and    eax,0x1
c000f8b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8bf:	83 e0 f7             	and    eax,0xfffffff7
c000f8c2:	09 d0                	or     eax,edx
c000f8c4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ca:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8d1:	e8 fa fd ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f8d6:	83 e0 01             	and    eax,0x1
c000f8d9:	c1 e0 04             	shl    eax,0x4
c000f8dc:	89 c2                	mov    edx,eax
c000f8de:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8e4:	83 e0 ef             	and    eax,0xffffffef
c000f8e7:	09 d0                	or     eax,edx
c000f8e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ef:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8f6:	e8 d5 fd ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f8fb:	83 e0 01             	and    eax,0x1
c000f8fe:	c1 e0 05             	shl    eax,0x5
c000f901:	89 c2                	mov    edx,eax
c000f903:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f909:	83 e0 df             	and    eax,0xffffffdf
c000f90c:	09 d0                	or     eax,edx
c000f90e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f914:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f91b:	e8 b0 fd ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	8d 14 00             	lea    edx,[eax+eax*1]
c000f926:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f92c:	83 e0 fd             	and    eax,0xfffffffd
c000f92f:	09 d0                	or     eax,edx
c000f931:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f937:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f93e:	e8 8d fd ff ff       	call   c000f6d0 <CPU::cpuidCheckEDX(unsigned int)>
c000f943:	83 e0 01             	and    eax,0x1
c000f946:	c1 e0 06             	shl    eax,0x6
c000f949:	89 c2                	mov    edx,eax
c000f94b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f951:	83 e0 bf             	and    eax,0xffffffbf
c000f954:	09 d0                	or     eax,edx
c000f956:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f95c:	58                   	pop    eax
c000f95d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f961:	50                   	push   eax
c000f962:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f966:	50                   	push   eax
c000f967:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f96b:	56                   	push   esi
c000f96c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f970:	50                   	push   eax
c000f971:	6a 00                	push   0x0
c000f973:	e8 d4 fc ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f978:	b8 04 00 00 00       	mov    eax,0x4
c000f97d:	89 c1                	mov    ecx,eax
c000f97f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f981:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f987:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f98b:	89 c1                	mov    ecx,eax
c000f98d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f98f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f995:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f999:	89 c1                	mov    ecx,eax
c000f99b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f99d:	83 c4 18             	add    esp,0x18
c000f9a0:	68 cc 09 02 c0       	push   0xc00209cc
c000f9a5:	55                   	push   ebp
c000f9a6:	e8 95 0d ff ff       	call   c0000740 <strcmp>
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	85 c0                	test   eax,eax
c000f9b0:	75 0f                	jne    c000f9c1 <CPU::detectFeatures()+0x1a9>
c000f9b2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9bc:	e9 22 02 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000f9c1:	50                   	push   eax
c000f9c2:	50                   	push   eax
c000f9c3:	68 d9 09 02 c0       	push   0xc00209d9
c000f9c8:	55                   	push   ebp
c000f9c9:	e8 72 0d ff ff       	call   c0000740 <strcmp>
c000f9ce:	83 c4 10             	add    esp,0x10
c000f9d1:	85 c0                	test   eax,eax
c000f9d3:	74 dd                	je     c000f9b2 <CPU::detectFeatures()+0x19a>
c000f9d5:	50                   	push   eax
c000f9d6:	50                   	push   eax
c000f9d7:	68 e6 09 02 c0       	push   0xc00209e6
c000f9dc:	55                   	push   ebp
c000f9dd:	e8 5e 0d ff ff       	call   c0000740 <strcmp>
c000f9e2:	83 c4 10             	add    esp,0x10
c000f9e5:	85 c0                	test   eax,eax
c000f9e7:	74 2a                	je     c000fa13 <CPU::detectFeatures()+0x1fb>
c000f9e9:	50                   	push   eax
c000f9ea:	50                   	push   eax
c000f9eb:	68 f3 09 02 c0       	push   0xc00209f3
c000f9f0:	55                   	push   ebp
c000f9f1:	e8 4a 0d ff ff       	call   c0000740 <strcmp>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	85 c0                	test   eax,eax
c000f9fb:	74 16                	je     c000fa13 <CPU::detectFeatures()+0x1fb>
c000f9fd:	50                   	push   eax
c000f9fe:	50                   	push   eax
c000f9ff:	68 00 0a 02 c0       	push   0xc0020a00
c000fa04:	55                   	push   ebp
c000fa05:	e8 36 0d ff ff       	call   c0000740 <strcmp>
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	85 c0                	test   eax,eax
c000fa0f:	74 48                	je     c000fa59 <CPU::detectFeatures()+0x241>
c000fa11:	eb 0f                	jmp    c000fa22 <CPU::detectFeatures()+0x20a>
c000fa13:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa1d:	e9 c1 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fa22:	50                   	push   eax
c000fa23:	50                   	push   eax
c000fa24:	68 0d 0a 02 c0       	push   0xc0020a0d
c000fa29:	55                   	push   ebp
c000fa2a:	e8 11 0d ff ff       	call   c0000740 <strcmp>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	85 c0                	test   eax,eax
c000fa34:	74 23                	je     c000fa59 <CPU::detectFeatures()+0x241>
c000fa36:	57                   	push   edi
c000fa37:	57                   	push   edi
c000fa38:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fa3d:	55                   	push   ebp
c000fa3e:	e8 fd 0c ff ff       	call   c0000740 <strcmp>
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	85 c0                	test   eax,eax
c000fa48:	75 1e                	jne    c000fa68 <CPU::detectFeatures()+0x250>
c000fa4a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa54:	e9 8a 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fa59:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa63:	e9 7b 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fa68:	56                   	push   esi
c000fa69:	56                   	push   esi
c000fa6a:	68 27 0a 02 c0       	push   0xc0020a27
c000fa6f:	55                   	push   ebp
c000fa70:	e8 cb 0c ff ff       	call   c0000740 <strcmp>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	85 c0                	test   eax,eax
c000fa7a:	75 0f                	jne    c000fa8b <CPU::detectFeatures()+0x273>
c000fa7c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa86:	e9 58 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fa8b:	51                   	push   ecx
c000fa8c:	51                   	push   ecx
c000fa8d:	68 e6 09 02 c0       	push   0xc00209e6
c000fa92:	55                   	push   ebp
c000fa93:	e8 a8 0c ff ff       	call   c0000740 <strcmp>
c000fa98:	83 c4 10             	add    esp,0x10
c000fa9b:	85 c0                	test   eax,eax
c000fa9d:	75 0f                	jne    c000faae <CPU::detectFeatures()+0x296>
c000fa9f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000faa9:	e9 35 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000faae:	52                   	push   edx
c000faaf:	52                   	push   edx
c000fab0:	68 34 0a 02 c0       	push   0xc0020a34
c000fab5:	55                   	push   ebp
c000fab6:	e8 85 0c ff ff       	call   c0000740 <strcmp>
c000fabb:	83 c4 10             	add    esp,0x10
c000fabe:	85 c0                	test   eax,eax
c000fac0:	75 0f                	jne    c000fad1 <CPU::detectFeatures()+0x2b9>
c000fac2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000facc:	e9 12 01 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fad1:	50                   	push   eax
c000fad2:	50                   	push   eax
c000fad3:	68 41 0a 02 c0       	push   0xc0020a41
c000fad8:	55                   	push   ebp
c000fad9:	e8 62 0c ff ff       	call   c0000740 <strcmp>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	85 c0                	test   eax,eax
c000fae3:	75 0f                	jne    c000faf4 <CPU::detectFeatures()+0x2dc>
c000fae5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000faef:	e9 ef 00 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000faf4:	50                   	push   eax
c000faf5:	50                   	push   eax
c000faf6:	68 4e 0a 02 c0       	push   0xc0020a4e
c000fafb:	55                   	push   ebp
c000fafc:	e8 3f 0c ff ff       	call   c0000740 <strcmp>
c000fb01:	83 c4 10             	add    esp,0x10
c000fb04:	85 c0                	test   eax,eax
c000fb06:	75 0f                	jne    c000fb17 <CPU::detectFeatures()+0x2ff>
c000fb08:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb12:	e9 cc 00 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fb17:	50                   	push   eax
c000fb18:	50                   	push   eax
c000fb19:	68 5b 0a 02 c0       	push   0xc0020a5b
c000fb1e:	55                   	push   ebp
c000fb1f:	e8 1c 0c ff ff       	call   c0000740 <strcmp>
c000fb24:	83 c4 10             	add    esp,0x10
c000fb27:	85 c0                	test   eax,eax
c000fb29:	75 0f                	jne    c000fb3a <CPU::detectFeatures()+0x322>
c000fb2b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb35:	e9 a9 00 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fb3a:	50                   	push   eax
c000fb3b:	50                   	push   eax
c000fb3c:	68 68 0a 02 c0       	push   0xc0020a68
c000fb41:	55                   	push   ebp
c000fb42:	e8 f9 0b ff ff       	call   c0000740 <strcmp>
c000fb47:	83 c4 10             	add    esp,0x10
c000fb4a:	85 c0                	test   eax,eax
c000fb4c:	75 0f                	jne    c000fb5d <CPU::detectFeatures()+0x345>
c000fb4e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb58:	e9 86 00 00 00       	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fb5d:	50                   	push   eax
c000fb5e:	50                   	push   eax
c000fb5f:	68 75 0a 02 c0       	push   0xc0020a75
c000fb64:	55                   	push   ebp
c000fb65:	e8 d6 0b ff ff       	call   c0000740 <strcmp>
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	85 c0                	test   eax,eax
c000fb6f:	75 0c                	jne    c000fb7d <CPU::detectFeatures()+0x365>
c000fb71:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb7b:	eb 66                	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fb7d:	50                   	push   eax
c000fb7e:	50                   	push   eax
c000fb7f:	68 82 0a 02 c0       	push   0xc0020a82
c000fb84:	55                   	push   ebp
c000fb85:	e8 b6 0b ff ff       	call   c0000740 <strcmp>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	85 c0                	test   eax,eax
c000fb8f:	75 0c                	jne    c000fb9d <CPU::detectFeatures()+0x385>
c000fb91:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb9b:	eb 46                	jmp    c000fbe3 <CPU::detectFeatures()+0x3cb>
c000fb9d:	57                   	push   edi
c000fb9e:	57                   	push   edi
c000fb9f:	68 8f 0a 02 c0       	push   0xc0020a8f
c000fba4:	55                   	push   ebp
c000fba5:	e8 96 0b ff ff       	call   c0000740 <strcmp>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	85 c0                	test   eax,eax
c000fbaf:	74 e0                	je     c000fb91 <CPU::detectFeatures()+0x379>
c000fbb1:	56                   	push   esi
c000fbb2:	56                   	push   esi
c000fbb3:	68 9c 0a 02 c0       	push   0xc0020a9c
c000fbb8:	55                   	push   ebp
c000fbb9:	e8 82 0b ff ff       	call   c0000740 <strcmp>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	74 cc                	je     c000fb91 <CPU::detectFeatures()+0x379>
c000fbc5:	51                   	push   ecx
c000fbc6:	51                   	push   ecx
c000fbc7:	68 a9 0a 02 c0       	push   0xc0020aa9
c000fbcc:	55                   	push   ebp
c000fbcd:	e8 6e 0b ff ff       	call   c0000740 <strcmp>
c000fbd2:	83 c4 10             	add    esp,0x10
c000fbd5:	85 c0                	test   eax,eax
c000fbd7:	74 b8                	je     c000fb91 <CPU::detectFeatures()+0x379>
c000fbd9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbe3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbe8:	0f 86 be 00 00 00    	jbe    c000fcac <CPU::detectFeatures()+0x494>
c000fbee:	83 ec 0c             	sub    esp,0xc
c000fbf1:	68 80 00 00 00       	push   0x80
c000fbf6:	e8 31 fb ff ff       	call   c000f72c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbfb:	83 e0 01             	and    eax,0x1
c000fbfe:	c1 e0 06             	shl    eax,0x6
c000fc01:	89 c2                	mov    edx,eax
c000fc03:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc09:	83 e0 bf             	and    eax,0xffffffbf
c000fc0c:	09 d0                	or     eax,edx
c000fc0e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc14:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc1b:	e8 0c fb ff ff       	call   c000f72c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc20:	83 e0 01             	and    eax,0x1
c000fc23:	c1 e0 04             	shl    eax,0x4
c000fc26:	89 c2                	mov    edx,eax
c000fc28:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc2e:	83 e0 ef             	and    eax,0xffffffef
c000fc31:	09 d0                	or     eax,edx
c000fc33:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc39:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc40:	e8 e7 fa ff ff       	call   c000f72c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc45:	89 c2                	mov    edx,eax
c000fc47:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc4d:	c1 e2 07             	shl    edx,0x7
c000fc50:	83 e0 7f             	and    eax,0x7f
c000fc53:	09 d0                	or     eax,edx
c000fc55:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc62:	e8 f3 fa ff ff       	call   c000f75a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc67:	83 e0 01             	and    eax,0x1
c000fc6a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc71:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc77:	83 e0 f7             	and    eax,0xfffffff7
c000fc7a:	09 d0                	or     eax,edx
c000fc7c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc82:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc89:	e8 cc fa ff ff       	call   c000f75a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc8e:	83 c4 10             	add    esp,0x10
c000fc91:	83 e0 01             	and    eax,0x1
c000fc94:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fca1:	83 e0 fb             	and    eax,0xfffffffb
c000fca4:	09 d0                	or     eax,edx
c000fca6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcac:	83 ec 0c             	sub    esp,0xc
c000fcaf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb3:	50                   	push   eax
c000fcb4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb8:	50                   	push   eax
c000fcb9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcbd:	57                   	push   edi
c000fcbe:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcc2:	56                   	push   esi
c000fcc3:	6a 01                	push   0x1
c000fcc5:	e8 82 f9 ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcce:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcd4:	89 c1                	mov    ecx,eax
c000fcd6:	83 e2 f0             	and    edx,0xfffffff0
c000fcd9:	83 e1 0f             	and    ecx,0xf
c000fcdc:	09 ca                	or     edx,ecx
c000fcde:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fce4:	89 c2                	mov    edx,eax
c000fce6:	c1 ea 04             	shr    edx,0x4
c000fce9:	83 e2 0f             	and    edx,0xf
c000fcec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fcf0:	89 d1                	mov    ecx,edx
c000fcf2:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fcf8:	83 c4 20             	add    esp,0x20
c000fcfb:	c1 e1 06             	shl    ecx,0x6
c000fcfe:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd04:	09 ca                	or     edx,ecx
c000fd06:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd0d:	89 c2                	mov    edx,eax
c000fd0f:	c1 ea 08             	shr    edx,0x8
c000fd12:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd18:	83 e2 0f             	and    edx,0xf
c000fd1b:	83 e1 3f             	and    ecx,0x3f
c000fd1e:	89 d5                	mov    ebp,edx
c000fd20:	83 e5 03             	and    ebp,0x3
c000fd23:	c1 e5 06             	shl    ebp,0x6
c000fd26:	09 e9                	or     ecx,ebp
c000fd28:	89 d5                	mov    ebp,edx
c000fd2a:	c1 ed 02             	shr    ebp,0x2
c000fd2d:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd33:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd39:	83 e1 c0             	and    ecx,0xffffffc0
c000fd3c:	09 e9                	or     ecx,ebp
c000fd3e:	89 c5                	mov    ebp,eax
c000fd40:	c1 ed 08             	shr    ebp,0x8
c000fd43:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd49:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd4f:	83 e5 30             	and    ebp,0x30
c000fd52:	83 e1 cf             	and    ecx,0xffffffcf
c000fd55:	09 e9                	or     ecx,ebp
c000fd57:	83 fa 06             	cmp    edx,0x6
c000fd5a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd60:	74 05                	je     c000fd67 <CPU::detectFeatures()+0x54f>
c000fd62:	83 fa 0f             	cmp    edx,0xf
c000fd65:	75 64                	jne    c000fdcb <CPU::detectFeatures()+0x5b3>
c000fd67:	89 c1                	mov    ecx,eax
c000fd69:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd6f:	c1 e9 10             	shr    ecx,0x10
c000fd72:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd78:	c1 e1 04             	shl    ecx,0x4
c000fd7b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd7f:	0f b6 c9             	movzx  ecx,cl
c000fd82:	c1 e1 06             	shl    ecx,0x6
c000fd85:	09 e9                	or     ecx,ebp
c000fd87:	83 fa 0f             	cmp    edx,0xf
c000fd8a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd91:	75 38                	jne    c000fdcb <CPU::detectFeatures()+0x5b3>
c000fd93:	c1 e8 14             	shr    eax,0x14
c000fd96:	83 c0 0f             	add    eax,0xf
c000fd99:	0f b6 c0             	movzx  eax,al
c000fd9c:	89 c2                	mov    edx,eax
c000fd9e:	c1 e8 02             	shr    eax,0x2
c000fda1:	83 e2 03             	and    edx,0x3
c000fda4:	89 d1                	mov    ecx,edx
c000fda6:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdac:	c1 e1 06             	shl    ecx,0x6
c000fdaf:	83 e2 3f             	and    edx,0x3f
c000fdb2:	09 ca                	or     edx,ecx
c000fdb4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdba:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdc0:	83 e2 c0             	and    edx,0xffffffc0
c000fdc3:	09 d0                	or     eax,edx
c000fdc5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdcb:	83 ec 0c             	sub    esp,0xc
c000fdce:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdd4:	83 c8 07             	or     eax,0x7
c000fdd7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fddd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fde1:	50                   	push   eax
c000fde2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fde6:	55                   	push   ebp
c000fde7:	57                   	push   edi
c000fde8:	56                   	push   esi
c000fde9:	68 00 00 00 80       	push   0x80000000
c000fdee:	e8 59 f8 ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdf3:	83 c4 20             	add    esp,0x20
c000fdf6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fdfe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe02:	76 1e                	jbe    c000fe22 <CPU::detectFeatures()+0x60a>
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	50                   	push   eax
c000fe08:	55                   	push   ebp
c000fe09:	57                   	push   edi
c000fe0a:	56                   	push   esi
c000fe0b:	68 01 00 00 80       	push   0x80000001
c000fe10:	e8 37 f8 ff ff       	call   c000f64c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe15:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe1f:	83 c4 20             	add    esp,0x20
c000fe22:	52                   	push   edx
c000fe23:	52                   	push   edx
c000fe24:	68 b5 0a 02 c0       	push   0xc0020ab5
c000fe29:	53                   	push   ebx
c000fe2a:	e8 d5 c0 ff ff       	call   c000bf04 <Device::setName(char const*)>
c000fe2f:	83 c4 10             	add    esp,0x10
c000fe32:	eb 69                	jmp    c000fe9d <CPU::detectFeatures()+0x685>
c000fe34:	50                   	push   eax
c000fe35:	50                   	push   eax
c000fe36:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fe3b:	55                   	push   ebp
c000fe3c:	e8 ef 07 ff ff       	call   c0000630 <strcpy>
c000fe41:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe4b:	e8 73 03 ff ff       	call   c00001c3 <is486>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	85 c0                	test   eax,eax
c000fe55:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe5b:	74 1f                	je     c000fe7c <CPU::detectFeatures()+0x664>
c000fe5d:	83 c8 07             	or     eax,0x7
c000fe60:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe66:	0f 20 c0             	mov    eax,cr0
c000fe69:	83 e0 14             	and    eax,0x14
c000fe6c:	83 f8 04             	cmp    eax,0x4
c000fe6f:	75 10                	jne    c000fe81 <CPU::detectFeatures()+0x669>
c000fe71:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe77:	83 e0 fd             	and    eax,0xfffffffd
c000fe7a:	eb 1b                	jmp    c000fe97 <CPU::detectFeatures()+0x67f>
c000fe7c:	83 e0 f8             	and    eax,0xfffffff8
c000fe7f:	eb df                	jmp    c000fe60 <CPU::detectFeatures()+0x648>
c000fe81:	e8 18 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe86:	83 e0 01             	and    eax,0x1
c000fe89:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe8c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe92:	83 e0 fd             	and    eax,0xfffffffd
c000fe95:	09 d0                	or     eax,edx
c000fe97:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe9d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fea4:	74 17                	je     c000febd <CPU::detectFeatures()+0x6a5>
c000fea6:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000feac:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000feb2:	83 c8 10             	or     eax,0x10
c000feb5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000febb:	eb 20                	jmp    c000fedd <CPU::detectFeatures()+0x6c5>
c000febd:	e8 dc 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fec2:	83 e0 01             	and    eax,0x1
c000fec5:	8d 14 00             	lea    edx,[eax+eax*1]
c000fec8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fece:	83 e0 fd             	and    eax,0xfffffffd
c000fed1:	09 d0                	or     eax,edx
c000fed3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fed9:	a8 02                	test   al,0x2
c000fedb:	75 c9                	jne    c000fea6 <CPU::detectFeatures()+0x68e>
c000fedd:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fee4:	83 c4 2c             	add    esp,0x2c
c000fee7:	5b                   	pop    ebx
c000fee8:	5e                   	pop    esi
c000fee9:	5f                   	pop    edi
c000feea:	5d                   	pop    ebp
c000feeb:	c3                   	ret    

c000feec <CPU::setupSMEP()>:
c000feec:	0f 20 e0             	mov    eax,cr4
c000feef:	0d 00 00 10 00       	or     eax,0x100000
c000fef4:	0f 22 e0             	mov    cr4,eax
c000fef7:	c3                   	ret    

c000fef8 <CPU::setupUMIP()>:
c000fef8:	0f 20 e0             	mov    eax,cr4
c000fefb:	80 cc 08             	or     ah,0x8
c000fefe:	0f 22 e0             	mov    cr4,eax
c000ff01:	c3                   	ret    

c000ff02 <CPU::setupTSC()>:
c000ff02:	0f 20 e0             	mov    eax,cr4
c000ff05:	83 c8 04             	or     eax,0x4
c000ff08:	0f 22 e0             	mov    cr4,eax
c000ff0b:	c3                   	ret    

c000ff0c <CPU::setupLargePages()>:
c000ff0c:	0f 20 e0             	mov    eax,cr4
c000ff0f:	83 c8 10             	or     eax,0x10
c000ff12:	0f 22 e0             	mov    cr4,eax
c000ff15:	c3                   	ret    

c000ff16 <CPU::setupPAT()>:
c000ff16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff1b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff22:	74 2c                	je     c000ff50 <CPU::setupPAT()+0x3a>
c000ff24:	53                   	push   ebx
c000ff25:	83 ec 10             	sub    esp,0x10
c000ff28:	68 77 02 00 00       	push   0x277
c000ff2d:	50                   	push   eax
c000ff2e:	e8 77 71 ff ff       	call   c00070aa <Computer::rdmsr(unsigned int)>
c000ff33:	83 e2 f8             	and    edx,0xfffffff8
c000ff36:	83 ca 01             	or     edx,0x1
c000ff39:	52                   	push   edx
c000ff3a:	50                   	push   eax
c000ff3b:	68 77 02 00 00       	push   0x277
c000ff40:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff46:	e8 8b 71 ff ff       	call   c00070d6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff4b:	83 c4 28             	add    esp,0x28
c000ff4e:	5b                   	pop    ebx
c000ff4f:	c3                   	ret    
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <CPU::setupMTRR()>:
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <CPU::setupGlobalPages()>:
c000ff54:	0f 20 e0             	mov    eax,cr4
c000ff57:	0c 80                	or     al,0x80
c000ff59:	0f 22 e0             	mov    cr4,eax
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <CPU::allowUsermodeDataAccess()>:
c000ff5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff62:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff69:	74 03                	je     c000ff6e <CPU::allowUsermodeDataAccess()+0x10>
c000ff6b:	0f 01 cb             	stac   
c000ff6e:	c3                   	ret    
c000ff6f:	90                   	nop

c000ff70 <CPU::prohibitUsermodeDataAccess()>:
c000ff70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff74:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff7b:	74 03                	je     c000ff80 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff7d:	0f 01 ca             	clac   
c000ff80:	c3                   	ret    
c000ff81:	90                   	nop

c000ff82 <CPU::setupSMAP()>:
c000ff82:	0f 20 e0             	mov    eax,cr4
c000ff85:	0d 00 00 20 00       	or     eax,0x200000
c000ff8a:	0f 22 e0             	mov    cr4,eax
c000ff8d:	eb e1                	jmp    c000ff70 <CPU::prohibitUsermodeDataAccess()>
c000ff8f:	90                   	nop

c000ff90 <CPU::setupFeatures()>:
c000ff90:	53                   	push   ebx
c000ff91:	83 ec 08             	sub    esp,0x8
c000ff94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff98:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff9f:	74 18                	je     c000ffb9 <CPU::setupFeatures()+0x29>
c000ffa1:	83 ec 0c             	sub    esp,0xc
c000ffa4:	68 c1 0a 02 c0       	push   0xc0020ac1
c000ffa9:	e8 9b a9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ffae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb1:	e8 42 ff ff ff       	call   c000fef8 <CPU::setupUMIP()>
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffc0:	74 18                	je     c000ffda <CPU::setupFeatures()+0x4a>
c000ffc2:	83 ec 0c             	sub    esp,0xc
c000ffc5:	68 cb 0a 02 c0       	push   0xc0020acb
c000ffca:	e8 7a a9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000ffcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd2:	e8 2b ff ff ff       	call   c000ff02 <CPU::setupTSC()>
c000ffd7:	83 c4 10             	add    esp,0x10
c000ffda:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffe1:	74 18                	je     c000fffb <CPU::setupFeatures()+0x6b>
c000ffe3:	83 ec 0c             	sub    esp,0xc
c000ffe6:	68 d4 0a 02 c0       	push   0xc0020ad4
c000ffeb:	e8 59 a9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c000fff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff3:	e8 14 ff ff ff       	call   c000ff0c <CPU::setupLargePages()>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010002:	74 18                	je     c001001c <CPU::setupFeatures()+0x8c>
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	68 dd 0a 02 c0       	push   0xc0020add
c001000c:	e8 38 a9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010011:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010014:	e8 3b ff ff ff       	call   c000ff54 <CPU::setupGlobalPages()>
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010023:	74 18                	je     c001003d <CPU::setupFeatures()+0xad>
c0010025:	83 ec 0c             	sub    esp,0xc
c0010028:	68 ef 0a 02 c0       	push   0xc0020aef
c001002d:	e8 17 a9 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010032:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010035:	e8 dc fe ff ff       	call   c000ff16 <CPU::setupPAT()>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010044:	74 11                	je     c0010057 <CPU::setupFeatures()+0xc7>
c0010046:	c7 44 24 10 f8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020af8
c001004e:	83 c4 08             	add    esp,0x8
c0010051:	5b                   	pop    ebx
c0010052:	e9 f2 a8 ff ff       	jmp    c000a949 <Dbg::kprintf(char const*, ...)>
c0010057:	83 c4 08             	add    esp,0x8
c001005a:	5b                   	pop    ebx
c001005b:	c3                   	ret    

c001005c <CPU::open(int, int, void*)>:
c001005c:	57                   	push   edi
c001005d:	56                   	push   esi
c001005e:	53                   	push   ebx
c001005f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010063:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010067:	83 ec 0c             	sub    esp,0xc
c001006a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010070:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010076:	50                   	push   eax
c0010077:	e8 18 73 ff ff       	call   c0007394 <GDT::setup()>
c001007c:	83 c4 0c             	add    esp,0xc
c001007f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010085:	6a 00                	push   0x0
c0010087:	68 ef be ad de       	push   0xdeadbeef
c001008c:	57                   	push   edi
c001008d:	e8 d2 8e ff ff       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0010092:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010095:	e8 aa 8e ff ff       	call   c0008f44 <TSS::flush()>
c001009a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00100a3:	e8 4e 75 ff ff       	call   c00075f6 <IDT::setup()>
c00100a8:	b8 00 04 00 00       	mov    eax,0x400
c00100ad:	0f 23 f8             	mov    db7,eax
c00100b0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100ba:	e8 d3 7c ff ff       	call   c0007d92 <Phys::allocatePage()>
c00100bf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100c5:	89 30                	mov    DWORD PTR [eax],esi
c00100c7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100cd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100d0:	58                   	pop    eax
c00100d1:	5a                   	pop    edx
c00100d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100dc:	e8 e5 9e ff ff       	call   c0009fc6 <VAS::setCPUSpecific(unsigned long)>
c00100e1:	c7 04 24 02 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b02
c00100e8:	e8 cd 00 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c00100ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f0:	e8 23 f7 ff ff       	call   c000f818 <CPU::detectFeatures()>
c00100f5:	c7 04 24 25 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b25
c00100fc:	e8 b9 00 00 00       	call   c00101ba <KeSetBootMessage(char const*)>
c0010101:	e8 7e 6f 00 00       	call   c0017084 <HalInitialise()>
c0010106:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c001010b:	83 e0 10             	and    eax,0x10
c001010e:	83 f8 01             	cmp    eax,0x1
c0010111:	19 c0                	sbb    eax,eax
c0010113:	83 e0 46             	and    eax,0x46
c0010116:	83 c0 1e             	add    eax,0x1e
c0010119:	89 04 24             	mov    DWORD PTR [esp],eax
c001011c:	e8 90 d6 ff ff       	call   c000d7b1 <setupTimer(int)>
c0010121:	83 c4 10             	add    esp,0x10
c0010124:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001012a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010131:	74 0c                	je     c001013f <CPU::open(int, int, void*)+0xe3>
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	53                   	push   ebx
c0010137:	e8 54 fe ff ff       	call   c000ff90 <CPU::setupFeatures()>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	5b                   	pop    ebx
c0010140:	31 c0                	xor    eax,eax
c0010142:	5e                   	pop    esi
c0010143:	5f                   	pop    edi
c0010144:	c3                   	ret    

c0010145 <KeDisplaySplashScreen()>:
c0010145:	55                   	push   ebp
c0010146:	bd 05 00 00 00       	mov    ebp,0x5
c001014b:	57                   	push   edi
c001014c:	bf c0 1e 02 c0       	mov    edi,0xc0021ec0
c0010151:	56                   	push   esi
c0010152:	be 0a 00 00 00       	mov    esi,0xa
c0010157:	53                   	push   ebx
c0010158:	31 db                	xor    ebx,ebx
c001015a:	83 ec 0c             	sub    esp,0xc
c001015d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010160:	89 d0                	mov    eax,edx
c0010162:	85 d2                	test   edx,edx
c0010164:	74 4c                	je     c00101b2 <KeDisplaySplashScreen()+0x6d>
c0010166:	80 bb f6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde10a],0xdb
c001016d:	75 13                	jne    c0010182 <KeDisplaySplashScreen()+0x3d>
c001016f:	0f b6 8b f5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde10b]
c0010176:	83 e1 fe             	and    ecx,0xfffffffe
c0010179:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001017f:	75 01                	jne    c0010182 <KeDisplaySplashScreen()+0x3d>
c0010181:	46                   	inc    esi
c0010182:	83 fa 0d             	cmp    edx,0xd
c0010185:	74 28                	je     c00101af <KeDisplaySplashScreen()+0x6a>
c0010187:	83 fa 0a             	cmp    edx,0xa
c001018a:	75 0a                	jne    c0010196 <KeDisplaySplashScreen()+0x51>
c001018c:	45                   	inc    ebp
c001018d:	be 0a 00 00 00       	mov    esi,0xa
c0010192:	31 db                	xor    ebx,ebx
c0010194:	eb 19                	jmp    c00101af <KeDisplaySplashScreen()+0x6a>
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	8d 14 33             	lea    edx,[ebx+esi*1]
c001019c:	0f be c0             	movsx  eax,al
c001019f:	55                   	push   ebp
c00101a0:	43                   	inc    ebx
c00101a1:	52                   	push   edx
c00101a2:	6a 00                	push   0x0
c00101a4:	6a 0e                	push   0xe
c00101a6:	50                   	push   eax
c00101a7:	e8 48 7b 00 00       	call   c0017cf4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101ac:	83 c4 20             	add    esp,0x20
c00101af:	47                   	inc    edi
c00101b0:	eb ab                	jmp    c001015d <KeDisplaySplashScreen()+0x18>
c00101b2:	83 c4 0c             	add    esp,0xc
c00101b5:	5b                   	pop    ebx
c00101b6:	5e                   	pop    esi
c00101b7:	5f                   	pop    edi
c00101b8:	5d                   	pop    ebp
c00101b9:	c3                   	ret    

c00101ba <KeSetBootMessage(char const*)>:
c00101ba:	57                   	push   edi
c00101bb:	56                   	push   esi
c00101bc:	53                   	push   ebx
c00101bd:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101c3:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101ca:	68 9e 00 00 00       	push   0x9e
c00101cf:	6a 00                	push   0x0
c00101d1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101d5:	56                   	push   esi
c00101d6:	e8 05 03 ff ff       	call   c00004e0 <memset>
c00101db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101de:	e8 7d 03 ff ff       	call   c0000560 <strlen>
c00101e3:	ba 50 00 00 00       	mov    edx,0x50
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	29 c2                	sub    edx,eax
c00101ed:	31 c9                	xor    ecx,ecx
c00101ef:	83 e2 fe             	and    edx,0xfffffffe
c00101f2:	01 f2                	add    edx,esi
c00101f4:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101f9:	84 c0                	test   al,al
c00101fb:	74 0a                	je     c0010207 <KeSetBootMessage(char const*)+0x4d>
c00101fd:	80 cc 0f             	or     ah,0xf
c0010200:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010204:	41                   	inc    ecx
c0010205:	eb ed                	jmp    c00101f4 <KeSetBootMessage(char const*)+0x3a>
c0010207:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001020c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010213:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010219:	5b                   	pop    ebx
c001021a:	5e                   	pop    esi
c001021b:	5f                   	pop    edi
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <EnvVarContainer::getEnv(char const*)>:
c001021e:	57                   	push   edi
c001021f:	56                   	push   esi
c0010220:	53                   	push   ebx
c0010221:	31 db                	xor    ebx,ebx
c0010223:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010227:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010229:	7e 2b                	jle    c0010256 <EnvVarContainer::getEnv(char const*)+0x38>
c001022b:	50                   	push   eax
c001022c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010233:	50                   	push   eax
c0010234:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010237:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001023a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001023e:	e8 fd 04 ff ff       	call   c0000740 <strcmp>
c0010243:	83 c4 10             	add    esp,0x10
c0010246:	85 c0                	test   eax,eax
c0010248:	75 09                	jne    c0010253 <EnvVarContainer::getEnv(char const*)+0x35>
c001024a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001024d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010251:	eb 05                	jmp    c0010258 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010253:	43                   	inc    ebx
c0010254:	eb d1                	jmp    c0010227 <EnvVarContainer::getEnv(char const*)+0x9>
c0010256:	31 c0                	xor    eax,eax
c0010258:	5b                   	pop    ebx
c0010259:	5e                   	pop    esi
c001025a:	5f                   	pop    edi
c001025b:	c3                   	ret    

c001025c <EnvVarContainer::setEnv(char const*, char const*)>:
c001025c:	55                   	push   ebp
c001025d:	57                   	push   edi
c001025e:	56                   	push   esi
c001025f:	53                   	push   ebx
c0010260:	83 ec 28             	sub    esp,0x28
c0010263:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010267:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001026b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001026f:	56                   	push   esi
c0010270:	e8 eb 02 ff ff       	call   c0000560 <strlen>
c0010275:	40                   	inc    eax
c0010276:	89 04 24             	mov    DWORD PTR [esp],eax
c0010279:	e8 09 78 ff ff       	call   c0007a87 <malloc>
c001027e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010281:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010285:	e8 d6 02 ff ff       	call   c0000560 <strlen>
c001028a:	40                   	inc    eax
c001028b:	89 04 24             	mov    DWORD PTR [esp],eax
c001028e:	e8 f4 77 ff ff       	call   c0007a87 <malloc>
c0010293:	89 34 24             	mov    DWORD PTR [esp],esi
c0010296:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001029a:	e8 c1 02 ff ff       	call   c0000560 <strlen>
c001029f:	83 c4 0c             	add    esp,0xc
c00102a2:	40                   	inc    eax
c00102a3:	50                   	push   eax
c00102a4:	6a 00                	push   0x0
c00102a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102aa:	e8 31 02 ff ff       	call   c00004e0 <memset>
c00102af:	89 34 24             	mov    DWORD PTR [esp],esi
c00102b2:	e8 a9 02 ff ff       	call   c0000560 <strlen>
c00102b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00102be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102c3:	e8 98 02 ff ff       	call   c0000560 <strlen>
c00102c8:	83 c4 0c             	add    esp,0xc
c00102cb:	40                   	inc    eax
c00102cc:	89 de                	mov    esi,ebx
c00102ce:	50                   	push   eax
c00102cf:	6a 00                	push   0x0
c00102d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102d5:	e8 06 02 ff ff       	call   c00004e0 <memset>
c00102da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102dd:	e8 7e 02 ff ff       	call   c0000560 <strlen>
c00102e2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00102e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102ee:	40                   	inc    eax
c00102ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102f2:	c1 e0 03             	shl    eax,0x3
c00102f5:	5a                   	pop    edx
c00102f6:	59                   	pop    ecx
c00102f7:	50                   	push   eax
c00102f8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102fb:	e8 73 77 ff ff       	call   c0007a73 <realloc>
c0010300:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010303:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010306:	8d 74 24 18          	lea    esi,[esp+0x18]
c001030a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001030e:	b9 08 00 00 00       	mov    ecx,0x8
c0010313:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010315:	83 c4 2c             	add    esp,0x2c
c0010318:	5b                   	pop    ebx
c0010319:	5e                   	pop    esi
c001031a:	5f                   	pop    edi
c001031b:	5d                   	pop    ebp
c001031c:	c3                   	ret    
c001031d:	90                   	nop

c001031e <EnvVarContainer::deleteEnv(char const*)>:
c001031e:	c3                   	ret    
c001031f:	90                   	nop

c0010320 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010320:	55                   	push   ebp
c0010321:	57                   	push   edi
c0010322:	56                   	push   esi
c0010323:	53                   	push   ebx
c0010324:	81 ec 38 01 00 00    	sub    esp,0x138
c001032a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010331:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010338:	68 14 01 00 00       	push   0x114
c001033d:	e8 45 77 ff ff       	call   c0007a87 <malloc>
c0010342:	83 c4 0c             	add    esp,0xc
c0010345:	89 c3                	mov    ebx,eax
c0010347:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001034a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010351:	50                   	push   eax
c0010352:	e8 75 ab ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0010357:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001035a:	e8 97 ae ff ff       	call   c000b1f6 <File::exists()>
c001035f:	83 c4 10             	add    esp,0x10
c0010362:	84 c0                	test   al,al
c0010364:	75 31                	jne    c0010397 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010366:	50                   	push   eax
c0010367:	50                   	push   eax
c0010368:	6a 12                	push   0x12
c001036a:	53                   	push   ebx
c001036b:	e8 18 ac ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0010370:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010372:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010375:	89 34 24             	mov    DWORD PTR [esp],esi
c0010378:	e8 e3 01 ff ff       	call   c0000560 <strlen>
c001037d:	5a                   	pop    edx
c001037e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010382:	31 d2                	xor    edx,edx
c0010384:	51                   	push   ecx
c0010385:	56                   	push   esi
c0010386:	52                   	push   edx
c0010387:	50                   	push   eax
c0010388:	53                   	push   ebx
c0010389:	ff d7                	call   edi
c001038b:	83 c4 14             	add    esp,0x14
c001038e:	53                   	push   ebx
c001038f:	e8 52 ac ff ff       	call   c000afe6 <File::close()>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	56                   	push   esi
c0010398:	31 f6                	xor    esi,esi
c001039a:	68 00 01 00 00       	push   0x100
c001039f:	6a 00                	push   0x0
c00103a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103a5:	50                   	push   eax
c00103a6:	e8 35 01 ff ff       	call   c00004e0 <memset>
c00103ab:	5f                   	pop    edi
c00103ac:	58                   	pop    eax
c00103ad:	6a 01                	push   0x1
c00103af:	53                   	push   ebx
c00103b0:	e8 d3 ab ff ff       	call   c000af88 <File::open(FileOpenMode)>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103c5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103c9:	51                   	push   ecx
c00103ca:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103ce:	52                   	push   edx
c00103cf:	6a 00                	push   0x0
c00103d1:	6a 01                	push   0x1
c00103d3:	53                   	push   ebx
c00103d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103d7:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103dc:	83 c4 20             	add    esp,0x20
c00103df:	89 d0                	mov    eax,edx
c00103e1:	83 fa 0d             	cmp    edx,0xd
c00103e4:	0f 84 0a 01 00 00    	je     c00104f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00103ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103ef:	0f 84 f0 00 00 00    	je     c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103f5:	83 fa 0a             	cmp    edx,0xa
c00103f8:	74 13                	je     c001040d <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103fa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103ff:	74 0c                	je     c001040d <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010401:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010407:	0f 8e d8 00 00 00    	jle    c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001040d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010411:	83 ec 0c             	sub    esp,0xc
c0010414:	8d 78 01             	lea    edi,[eax+0x1]
c0010417:	57                   	push   edi
c0010418:	e8 6a 76 ff ff       	call   c0007a87 <malloc>
c001041d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010421:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010425:	8d 56 04             	lea    edx,[esi+0x4]
c0010428:	89 14 24             	mov    DWORD PTR [esp],edx
c001042b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001042f:	e8 53 76 ff ff       	call   c0007a87 <malloc>
c0010434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010438:	83 c4 0c             	add    esp,0xc
c001043b:	57                   	push   edi
c001043c:	6a 00                	push   0x0
c001043e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010442:	e8 99 00 ff ff       	call   c00004e0 <memset>
c0010447:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001044b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001044f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010455:	83 c4 0c             	add    esp,0xc
c0010458:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001045c:	52                   	push   edx
c001045d:	6a 00                	push   0x0
c001045f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010463:	e8 78 00 ff ff       	call   c00004e0 <memset>
c0010468:	8d 74 24 30          	lea    esi,[esp+0x30]
c001046c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010470:	89 34 24             	mov    DWORD PTR [esp],esi
c0010473:	e8 e8 00 ff ff       	call   c0000560 <strlen>
c0010478:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001047c:	89 c1                	mov    ecx,eax
c001047e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010480:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010483:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010486:	40                   	inc    eax
c0010487:	83 c4 10             	add    esp,0x10
c001048a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001048d:	85 d2                	test   edx,edx
c001048f:	75 0c                	jne    c001049d <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010491:	83 ec 0c             	sub    esp,0xc
c0010494:	6a 08                	push   0x8
c0010496:	e8 ec 75 ff ff       	call   c0007a87 <malloc>
c001049b:	eb 0c                	jmp    c00104a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001049d:	c1 e0 03             	shl    eax,0x3
c00104a0:	51                   	push   ecx
c00104a1:	51                   	push   ecx
c00104a2:	50                   	push   eax
c00104a3:	52                   	push   edx
c00104a4:	e8 ca 75 ff ff       	call   c0007a73 <realloc>
c00104a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104ac:	83 c4 10             	add    esp,0x10
c00104af:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104b2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104b5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104b9:	b9 08 00 00 00       	mov    ecx,0x8
c00104be:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104c4:	50                   	push   eax
c00104c5:	31 f6                	xor    esi,esi
c00104c7:	68 00 01 00 00       	push   0x100
c00104cc:	6a 00                	push   0x0
c00104ce:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104d2:	50                   	push   eax
c00104d3:	e8 08 00 ff ff       	call   c00004e0 <memset>
c00104d8:	83 c4 10             	add    esp,0x10
c00104db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104e3:	eb 0f                	jmp    c00104f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104e5:	3c 3d                	cmp    al,0x3d
c00104e7:	74 07                	je     c00104f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104e9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104ed:	46                   	inc    esi
c00104ee:	eb 04                	jmp    c00104f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104f0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104f4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104f9:	0f 85 c1 fe ff ff    	jne    c00103c0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010505:	5b                   	pop    ebx
c0010506:	5e                   	pop    esi
c0010507:	5f                   	pop    edi
c0010508:	5d                   	pop    ebp
c0010509:	c3                   	ret    

c001050a <EnvVarContainer::__loadSystem()>:
c001050a:	83 ec 10             	sub    esp,0x10
c001050d:	68 20 20 02 c0       	push   0xc0022020
c0010512:	68 68 0b 02 c0       	push   0xc0020b68
c0010517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051b:	e8 00 fe ff ff       	call   c0010320 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010520:	83 c4 1c             	add    esp,0x1c
c0010523:	c3                   	ret    

c0010524 <EnvVarContainer::__loadUser()>:
c0010524:	c3                   	ret    
c0010525:	90                   	nop

c0010526 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010538:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001053b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001053f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010546:	90                   	nop
c0010547:	c3                   	ret    

c0010548 <EnvVarContainer::~EnvVarContainer()>:
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010552:	85 c0                	test   eax,eax
c0010554:	74 1d                	je     c0010573 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055a:	8b 00                	mov    eax,DWORD PTR [eax]
c001055c:	85 c0                	test   eax,eax
c001055e:	74 13                	je     c0010573 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010567:	83 ec 0c             	sub    esp,0xc
c001056a:	50                   	push   eax
c001056b:	e8 27 75 ff ff       	call   c0007a97 <free>
c0010570:	83 c4 10             	add    esp,0x10
c0010573:	90                   	nop
c0010574:	83 c4 0c             	add    esp,0xc
c0010577:	c3                   	ret    

c0010578 <Krnl::getEnv(Process*, char const*)>:
c0010578:	53                   	push   ebx
c0010579:	83 ec 08             	sub    esp,0x8
c001057c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010580:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010584:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001058a:	74 04                	je     c0010590 <Krnl::getEnv(Process*, char const*)+0x18>
c001058c:	85 c0                	test   eax,eax
c001058e:	75 0b                	jne    c001059b <Krnl::getEnv(Process*, char const*)+0x23>
c0010590:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010595:	85 c0                	test   eax,eax
c0010597:	75 19                	jne    c00105b2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010599:	eb 27                	jmp    c00105c2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001059b:	52                   	push   edx
c001059c:	52                   	push   edx
c001059d:	53                   	push   ebx
c001059e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105a4:	e8 75 fc ff ff       	call   c001021e <EnvVarContainer::getEnv(char const*)>
c00105a9:	83 c4 10             	add    esp,0x10
c00105ac:	85 c0                	test   eax,eax
c00105ae:	75 28                	jne    c00105d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00105b0:	eb de                	jmp    c0010590 <Krnl::getEnv(Process*, char const*)+0x18>
c00105b2:	52                   	push   edx
c00105b3:	52                   	push   edx
c00105b4:	53                   	push   ebx
c00105b5:	50                   	push   eax
c00105b6:	e8 63 fc ff ff       	call   c001021e <EnvVarContainer::getEnv(char const*)>
c00105bb:	83 c4 10             	add    esp,0x10
c00105be:	85 c0                	test   eax,eax
c00105c0:	75 16                	jne    c00105d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00105c2:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105c7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105cf:	83 c4 08             	add    esp,0x8
c00105d2:	5b                   	pop    ebx
c00105d3:	e9 46 fc ff ff       	jmp    c001021e <EnvVarContainer::getEnv(char const*)>
c00105d8:	83 c4 08             	add    esp,0x8
c00105db:	5b                   	pop    ebx
c00105dc:	c3                   	ret    

c00105dd <Krnl::setEnvSystem(char const*, char const*)>:
c00105dd:	83 ec 10             	sub    esp,0x10
c00105e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e8:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105ee:	e8 69 fc ff ff       	call   c001025c <EnvVarContainer::setEnv(char const*, char const*)>
c00105f3:	83 c4 1c             	add    esp,0x1c
c00105f6:	c3                   	ret    

c00105f7 <Krnl::setEnvUser(char const*, char const*)>:
c00105f7:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105fc:	85 c0                	test   eax,eax
c00105fe:	74 15                	je     c0010615 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010600:	83 ec 10             	sub    esp,0x10
c0010603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010607:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001060b:	50                   	push   eax
c001060c:	e8 4b fc ff ff       	call   c001025c <EnvVarContainer::setEnv(char const*, char const*)>
c0010611:	83 c4 1c             	add    esp,0x1c
c0010614:	c3                   	ret    
c0010615:	c3                   	ret    

c0010616 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010620:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010624:	e9 33 fc ff ff       	jmp    c001025c <EnvVarContainer::setEnv(char const*, char const*)>

c0010629 <Krnl::deleteEnvSystem(char const*)>:
c0010629:	c3                   	ret    

c001062a <Krnl::deleteEnvUser(char const*)>:
c001062a:	c3                   	ret    

c001062b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001062b:	c3                   	ret    

c001062c <Krnl::newProcessEnv(Process*)>:
c001062c:	83 ec 28             	sub    esp,0x28
c001062f:	6a 0c                	push   0xc
c0010631:	e8 51 74 ff ff       	call   c0007a87 <malloc>
c0010636:	5a                   	pop    edx
c0010637:	59                   	pop    ecx
c0010638:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001063c:	50                   	push   eax
c001063d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010641:	e8 e0 fe ff ff       	call   c0010526 <EnvVarContainer::EnvVarContainer(Process*)>
c0010646:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001064a:	83 c4 2c             	add    esp,0x2c
c001064d:	c3                   	ret    

c001064e <Krnl::copyProcessEnv(Process*, Process*)>:
c001064e:	57                   	push   edi
c001064f:	56                   	push   esi
c0010650:	53                   	push   ebx
c0010651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010655:	83 ec 0c             	sub    esp,0xc
c0010658:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001065e:	6a 0c                	push   0xc
c0010660:	e8 22 74 ff ff       	call   c0007a87 <malloc>
c0010665:	89 c3                	mov    ebx,eax
c0010667:	58                   	pop    eax
c0010668:	5a                   	pop    edx
c0010669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066d:	53                   	push   ebx
c001066e:	e8 b3 fe ff ff       	call   c0010526 <EnvVarContainer::EnvVarContainer(Process*)>
c0010673:	8b 07                	mov    eax,DWORD PTR [edi]
c0010675:	89 03                	mov    DWORD PTR [ebx],eax
c0010677:	c1 e0 03             	shl    eax,0x3
c001067a:	89 04 24             	mov    DWORD PTR [esp],eax
c001067d:	e8 05 74 ff ff       	call   c0007a87 <malloc>
c0010682:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010685:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010687:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001068a:	c1 e1 03             	shl    ecx,0x3
c001068d:	89 c7                	mov    edi,eax
c001068f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	89 d8                	mov    eax,ebx
c0010696:	5b                   	pop    ebx
c0010697:	5e                   	pop    esi
c0010698:	5f                   	pop    edi
c0010699:	c3                   	ret    

c001069a <Krnl::loadSystemEnv()>:
c001069a:	53                   	push   ebx
c001069b:	83 ec 14             	sub    esp,0x14
c001069e:	6a 0c                	push   0xc
c00106a0:	e8 e2 73 ff ff       	call   c0007a87 <malloc>
c00106a5:	89 c3                	mov    ebx,eax
c00106a7:	58                   	pop    eax
c00106a8:	5a                   	pop    edx
c00106a9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106af:	53                   	push   ebx
c00106b0:	e8 71 fe ff ff       	call   c0010526 <EnvVarContainer::EnvVarContainer(Process*)>
c00106b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106b8:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106be:	e8 47 fe ff ff       	call   c001050a <EnvVarContainer::__loadSystem()>
c00106c3:	83 c4 18             	add    esp,0x18
c00106c6:	5b                   	pop    ebx
c00106c7:	c3                   	ret    

c00106c8 <Krnl::loadUserEnv()>:
c00106c8:	53                   	push   ebx
c00106c9:	83 ec 14             	sub    esp,0x14
c00106cc:	6a 0c                	push   0xc
c00106ce:	e8 b4 73 ff ff       	call   c0007a87 <malloc>
c00106d3:	89 c3                	mov    ebx,eax
c00106d5:	58                   	pop    eax
c00106d6:	5a                   	pop    edx
c00106d7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106dd:	53                   	push   ebx
c00106de:	e8 43 fe ff ff       	call   c0010526 <EnvVarContainer::EnvVarContainer(Process*)>
c00106e3:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106e9:	83 c4 18             	add    esp,0x18
c00106ec:	5b                   	pop    ebx
c00106ed:	c3                   	ret    

c00106ee <Krnl::flushEnv()>:
c00106ee:	c3                   	ret    

c00106ef <Krnl::getProcessTotalEnvCount(Process*)>:
c00106ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f3:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106f9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106ff:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010704:	8b 00                	mov    eax,DWORD PTR [eax]
c0010706:	03 01                	add    eax,DWORD PTR [ecx]
c0010708:	85 d2                	test   edx,edx
c001070a:	74 02                	je     c001070e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001070c:	03 02                	add    eax,DWORD PTR [edx]
c001070e:	c3                   	ret    

c001070f <Krnl::getProcessEnvPair(Process*, int)>:
c001070f:	57                   	push   edi
c0010710:	56                   	push   esi
c0010711:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010717:	53                   	push   ebx
c0010718:	85 f6                	test   esi,esi
c001071a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001071e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010726:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001072c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001072e:	75 16                	jne    c0010746 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010730:	39 c2                	cmp    edx,eax
c0010732:	7c 16                	jl     c001074a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010734:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001073a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001073c:	01 c6                	add    esi,eax
c001073e:	39 d6                	cmp    esi,edx
c0010740:	7e 3c                	jle    c001077e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010742:	29 c2                	sub    edx,eax
c0010744:	eb 04                	jmp    c001074a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010746:	39 c2                	cmp    edx,eax
c0010748:	7d 05                	jge    c001074f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001074a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001074d:	eb 20                	jmp    c001076f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001074f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010751:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010754:	39 d1                	cmp    ecx,edx
c0010756:	7e 04                	jle    c001075c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010758:	29 c2                	sub    edx,eax
c001075a:	eb 10                	jmp    c001076c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001075c:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010762:	03 0e                	add    ecx,DWORD PTR [esi]
c0010764:	39 d1                	cmp    ecx,edx
c0010766:	7e 16                	jle    c001077e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010768:	29 c2                	sub    edx,eax
c001076a:	29 fa                	sub    edx,edi
c001076c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001076f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010772:	8b 02                	mov    eax,DWORD PTR [edx]
c0010774:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010777:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001077a:	89 03                	mov    DWORD PTR [ebx],eax
c001077c:	eb 1d                	jmp    c001079b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	68 8a 0b 02 c0       	push   0xc0020b8a
c0010786:	e8 ac 00 00 00       	call   c0010837 <KePanic(char const*)>
c001078b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010791:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	89 d8                	mov    eax,ebx
c001079d:	5b                   	pop    ebx
c001079e:	5e                   	pop    esi
c001079f:	5f                   	pop    edi
c00107a0:	c2 04 00             	ret    0x4

c00107a3 <CPU::current()>:
c00107a3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107ae:	c3                   	ret    

c00107af <operator new(unsigned long)>:
c00107af:	e9 d3 72 ff ff       	jmp    c0007a87 <malloc>

c00107b4 <operator delete(void*)>:
c00107b4:	e9 ee 72 ff ff       	jmp    c0007aa7 <rfree>

c00107b9 <disableIRQs()>:
c00107b9:	fa                   	cli    
c00107ba:	c3                   	ret    

c00107bb <enableIRQs()>:
c00107bb:	fb                   	sti    
c00107bc:	c3                   	ret    

c00107bd <lockScheduler()>:
c00107bd:	fa                   	cli    
c00107be:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107c4:	c3                   	ret    

c00107c5 <unlockScheduler()>:
c00107c5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107ca:	48                   	dec    eax
c00107cb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107d0:	75 01                	jne    c00107d3 <unlockScheduler()+0xe>
c00107d2:	fb                   	sti    
c00107d3:	c3                   	ret    

c00107d4 <lockStuff()>:
c00107d4:	fa                   	cli    
c00107d5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107db:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107e1:	c3                   	ret    

c00107e2 <unlockStuff()>:
c00107e2:	83 ec 0c             	sub    esp,0xc
c00107e5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107ea:	48                   	dec    eax
c00107eb:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107f0:	75 18                	jne    c001080a <unlockStuff()+0x28>
c00107f2:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107f9:	74 0f                	je     c001080a <unlockStuff()+0x28>
c00107fb:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010805:	e8 36 48 00 00       	call   c0015040 <schedule()>
c001080a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001080f:	48                   	dec    eax
c0010810:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010815:	75 01                	jne    c0010818 <unlockStuff()+0x36>
c0010817:	fb                   	sti    
c0010818:	83 c4 0c             	add    esp,0xc
c001081b:	c3                   	ret    

c001081c <Virt::getAKernelVAS()>:
c001081c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010821:	c3                   	ret    

c0010822 <__not_memcpy>:
c0010822:	57                   	push   edi
c0010823:	56                   	push   esi
c0010824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010828:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001082c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010830:	89 c7                	mov    edi,eax
c0010832:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010834:	5e                   	pop    esi
c0010835:	5f                   	pop    edi
c0010836:	c3                   	ret    

c0010837 <KePanic(char const*)>:
c0010837:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001083e:	e9 2d 67 00 00       	jmp    c0016f70 <HalPanic(char const*)>

c0010843 <Krnl::powerThread(void*)>:
c0010843:	83 ec 0c             	sub    esp,0xc
c0010846:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001084b:	48                   	dec    eax
c001084c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010851:	75 01                	jne    c0010854 <Krnl::powerThread(void*)+0x11>
c0010853:	fb                   	sti    
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001085e:	6a 0a                	push   0xa
c0010860:	e8 0b 4b 00 00       	call   c0015370 <sleep(unsigned int)>
c0010865:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	eb e3                	jmp    c0010854 <Krnl::powerThread(void*)+0x11>

c0010871 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010871:	57                   	push   edi
c0010872:	b9 09 00 00 00       	mov    ecx,0x9
c0010877:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001087c:	56                   	push   esi
c001087d:	fc                   	cld    
c001087e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010882:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010884:	5e                   	pop    esi
c0010885:	5f                   	pop    edi
c0010886:	c3                   	ret    

c0010887 <Krnl::userIOReceived()>:
c0010887:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010891:	c3                   	ret    

c0010892 <Krnl::handlePowerButton()>:
c0010892:	83 ec 0c             	sub    esp,0xc
c0010895:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001089a:	83 f8 02             	cmp    eax,0x2
c001089d:	75 10                	jne    c00108af <Krnl::handlePowerButton()+0x1d>
c001089f:	83 ec 0c             	sub    esp,0xc
c00108a2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108a8:	e8 65 68 ff ff       	call   c0007112 <Computer::shutdown()>
c00108ad:	eb 11                	jmp    c00108c0 <Krnl::handlePowerButton()+0x2e>
c00108af:	48                   	dec    eax
c00108b0:	75 11                	jne    c00108c3 <Krnl::handlePowerButton()+0x31>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108bb:	e8 82 68 ff ff       	call   c0007142 <Computer::sleep()>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    

c00108c7 <Krnl::handleSleepButton()>:
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108cf:	83 f8 02             	cmp    eax,0x2
c00108d2:	75 10                	jne    c00108e4 <Krnl::handleSleepButton()+0x1d>
c00108d4:	83 ec 0c             	sub    esp,0xc
c00108d7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108dd:	e8 30 68 ff ff       	call   c0007112 <Computer::shutdown()>
c00108e2:	eb 11                	jmp    c00108f5 <Krnl::handleSleepButton()+0x2e>
c00108e4:	48                   	dec    eax
c00108e5:	75 11                	jne    c00108f8 <Krnl::handleSleepButton()+0x31>
c00108e7:	83 ec 0c             	sub    esp,0xc
c00108ea:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f0:	e8 4d 68 ff ff       	call   c0007142 <Computer::sleep()>
c00108f5:	83 c4 10             	add    esp,0x10
c00108f8:	83 c4 0c             	add    esp,0xc
c00108fb:	c3                   	ret    

c00108fc <Krnl::setupPowerManager()>:
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010909:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010910:	68 f0 00 00 00       	push   0xf0
c0010915:	6a 00                	push   0x0
c0010917:	68 43 08 01 c0       	push   0xc0010843
c001091c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010922:	e8 cd 44 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0010927:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010931:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c001093b:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010945:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001094f:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010959:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010963:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001096d:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010977:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010981:	83 c4 1c             	add    esp,0x1c
c0010984:	c3                   	ret    

c0010985 <KeRand()>:
c0010985:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001098f:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010999:	01 c1                	add    ecx,eax
c001099b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109a0:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109a6:	01 ca                	add    edx,ecx
c00109a8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109ad:	83 d2 00             	adc    edx,0x0
c00109b0:	53                   	push   ebx
c00109b1:	0f b7 da             	movzx  ebx,dx
c00109b4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109b9:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109bf:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00109c3:	5b                   	pop    ebx
c00109c4:	c3                   	ret    

c00109c5 <KeSeedRand(unsigned int)>:
c00109c5:	53                   	push   ebx
c00109c6:	83 ec 08             	sub    esp,0x8
c00109c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109cd:	e8 a2 68 00 00       	call   c0017274 <HalGetRand()>
c00109d2:	31 d8                	xor    eax,ebx
c00109d4:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109de:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109e3:	e8 9d ff ff ff       	call   c0010985 <KeRand()>
c00109e8:	83 c4 08             	add    esp,0x8
c00109eb:	5b                   	pop    ebx
c00109ec:	eb 97                	jmp    c0010985 <KeRand()>

c00109ee <KeInitRand()>:
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	e8 73 66 00 00       	call   c0017069 <HalQueryPerformanceCounter()>
c00109f6:	0f 20 da             	mov    edx,cr3
c00109f9:	0f 22 da             	mov    cr3,edx
c00109fc:	0f 20 da             	mov    edx,cr3
c00109ff:	0f 22 da             	mov    cr3,edx
c0010a02:	0f 20 da             	mov    edx,cr3
c0010a05:	0f 22 da             	mov    cr3,edx
c0010a08:	0f 20 da             	mov    edx,cr3
c0010a0b:	0f 22 da             	mov    cr3,edx
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a16:	50                   	push   eax
c0010a17:	e8 a9 ff ff ff       	call   c00109c5 <KeSeedRand(unsigned int)>
c0010a1c:	83 c4 1c             	add    esp,0x1c
c0010a1f:	c3                   	ret    

c0010a20 <KeResolveCompatibilitySymbol(char*)>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	68 a4 0b 02 c0       	push   0xc0020ba4
c0010a2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2f:	e8 0c fd fe ff       	call   c0000740 <strcmp>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	85 c0                	test   eax,eax
c0010a39:	0f 94 c0             	sete   al
c0010a3c:	0f b6 c0             	movzx  eax,al
c0010a3f:	85 c0                	test   eax,eax
c0010a41:	74 0d                	je     c0010a50 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a43:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a48:	e9 8b 01 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a50:	83 ec 08             	sub    esp,0x8
c0010a53:	68 ad 0b 02 c0       	push   0xc0020bad
c0010a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5c:	e8 df fc fe ff       	call   c0000740 <strcmp>
c0010a61:	83 c4 10             	add    esp,0x10
c0010a64:	85 c0                	test   eax,eax
c0010a66:	0f 94 c0             	sete   al
c0010a69:	0f b6 c0             	movzx  eax,al
c0010a6c:	85 c0                	test   eax,eax
c0010a6e:	74 0c                	je     c0010a7c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a70:	b8 d0 e5 01 c0       	mov    eax,0xc001e5d0
c0010a75:	e9 5e 01 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a7a:	66 90                	xchg   ax,ax
c0010a7c:	83 ec 08             	sub    esp,0x8
c0010a7f:	68 b7 0b 02 c0       	push   0xc0020bb7
c0010a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a88:	e8 b3 fc fe ff       	call   c0000740 <strcmp>
c0010a8d:	83 c4 10             	add    esp,0x10
c0010a90:	85 c0                	test   eax,eax
c0010a92:	0f 94 c0             	sete   al
c0010a95:	0f b6 c0             	movzx  eax,al
c0010a98:	85 c0                	test   eax,eax
c0010a9a:	74 0c                	je     c0010aa8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a9c:	b8 04 e3 01 c0       	mov    eax,0xc001e304
c0010aa1:	e9 32 01 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aa6:	66 90                	xchg   ax,ax
c0010aa8:	83 ec 08             	sub    esp,0x8
c0010aab:	68 c0 0b 02 c0       	push   0xc0020bc0
c0010ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab4:	e8 87 fc fe ff       	call   c0000740 <strcmp>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	85 c0                	test   eax,eax
c0010abe:	0f 94 c0             	sete   al
c0010ac1:	0f b6 c0             	movzx  eax,al
c0010ac4:	85 c0                	test   eax,eax
c0010ac6:	74 0c                	je     c0010ad4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ac8:	b8 37 08 01 c0       	mov    eax,0xc0010837
c0010acd:	e9 06 01 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ad2:	66 90                	xchg   ax,ax
c0010ad4:	83 ec 08             	sub    esp,0x8
c0010ad7:	68 d3 0b 02 c0       	push   0xc0020bd3
c0010adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae0:	e8 5b fc fe ff       	call   c0000740 <strcmp>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	0f 94 c0             	sete   al
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	85 c0                	test   eax,eax
c0010af2:	74 0c                	je     c0010b00 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010af4:	b8 ba 01 01 c0       	mov    eax,0xc00101ba
c0010af9:	e9 da 00 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010afe:	66 90                	xchg   ax,ax
c0010b00:	83 ec 08             	sub    esp,0x8
c0010b03:	68 f0 0b 02 c0       	push   0xc0020bf0
c0010b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0c:	e8 2f fc fe ff       	call   c0000740 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	85 c0                	test   eax,eax
c0010b16:	0f 94 c0             	sete   al
c0010b19:	0f b6 c0             	movzx  eax,al
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	74 0c                	je     c0010b2c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b20:	b8 d0 e6 01 c0       	mov    eax,0xc001e6d0
c0010b25:	e9 ae 00 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	83 ec 08             	sub    esp,0x8
c0010b2f:	68 fa 0b 02 c0       	push   0xc0020bfa
c0010b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b38:	e8 03 fc fe ff       	call   c0000740 <strcmp>
c0010b3d:	83 c4 10             	add    esp,0x10
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 94 c0             	sete   al
c0010b45:	0f b6 c0             	movzx  eax,al
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	74 0c                	je     c0010b58 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b4c:	b8 50 e4 01 c0       	mov    eax,0xc001e450
c0010b51:	e9 82 00 00 00       	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	83 ec 08             	sub    esp,0x8
c0010b5b:	68 03 0c 02 c0       	push   0xc0020c03
c0010b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b64:	e8 d7 fb fe ff       	call   c0000740 <strcmp>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	0f 94 c0             	sete   al
c0010b71:	0f b6 c0             	movzx  eax,al
c0010b74:	85 c0                	test   eax,eax
c0010b76:	74 08                	je     c0010b80 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b78:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b7d:	eb 59                	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b7f:	90                   	nop
c0010b80:	83 ec 08             	sub    esp,0x8
c0010b83:	68 1b 0c 02 c0       	push   0xc0020c1b
c0010b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b8c:	e8 af fb fe ff       	call   c0000740 <strcmp>
c0010b91:	83 c4 10             	add    esp,0x10
c0010b94:	85 c0                	test   eax,eax
c0010b96:	0f 94 c0             	sete   al
c0010b99:	0f b6 c0             	movzx  eax,al
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	74 08                	je     c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010ba0:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010ba5:	eb 31                	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ba7:	90                   	nop
c0010ba8:	83 ec 08             	sub    esp,0x8
c0010bab:	68 28 0c 02 c0       	push   0xc0020c28
c0010bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb4:	e8 87 fb fe ff       	call   c0000740 <strcmp>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	0f 94 c0             	sete   al
c0010bc1:	0f b6 c0             	movzx  eax,al
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	74 08                	je     c0010bd0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bc8:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010bcd:	eb 09                	jmp    c0010bd8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bcf:	90                   	nop
c0010bd0:	b8 00 00 00 00       	mov    eax,0x0
c0010bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd8:	83 c4 0c             	add    esp,0xc
c0010bdb:	c3                   	ret    

c0010bdc <KiSigKill(int)>:
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	6a 00                	push   0x0
c0010be1:	6a 00                	push   0x0
c0010be3:	6a ff                	push   0xffffffff
c0010be5:	6a 01                	push   0x1
c0010be7:	e8 66 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bec:	83 c4 1c             	add    esp,0x1c
c0010bef:	c3                   	ret    

c0010bf0 <KiDefaultSignalHandlerIgnore(int)>:
c0010bf0:	c3                   	ret    

c0010bf1 <KiDefaultSignalHandlerPause(int)>:
c0010bf1:	57                   	push   edi
c0010bf2:	b9 07 00 00 00       	mov    ecx,0x7
c0010bf7:	56                   	push   esi
c0010bf8:	be 71 0c 02 c0       	mov    esi,0xc0020c71
c0010bfd:	83 ec 24             	sub    esp,0x24
c0010c00:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c04:	fc                   	cld    
c0010c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c0b:	50                   	push   eax
c0010c0c:	6a 00                	push   0x0
c0010c0e:	6a 00                	push   0x0
c0010c10:	6a 27                	push   0x27
c0010c12:	e8 3b 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c17:	83 c4 34             	add    esp,0x34
c0010c1a:	5e                   	pop    esi
c0010c1b:	5f                   	pop    edi
c0010c1c:	c3                   	ret    

c0010c1d <KiDefaultSignalHandlerResume(int)>:
c0010c1d:	57                   	push   edi
c0010c1e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c23:	56                   	push   esi
c0010c24:	be 8d 0c 02 c0       	mov    esi,0xc0020c8d
c0010c29:	83 ec 24             	sub    esp,0x24
c0010c2c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c30:	fc                   	cld    
c0010c31:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c37:	50                   	push   eax
c0010c38:	6a 00                	push   0x0
c0010c3a:	6a 00                	push   0x0
c0010c3c:	6a 27                	push   0x27
c0010c3e:	e8 0f 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c43:	83 c4 34             	add    esp,0x34
c0010c46:	5e                   	pop    esi
c0010c47:	5f                   	pop    edi
c0010c48:	c3                   	ret    

c0010c49 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c49:	e9 49 6e ff ff       	jmp    c0007a97 <free>

c0010c4e <KeInitSignals()>:
c0010c4e:	53                   	push   ebx
c0010c4f:	83 ec 14             	sub    esp,0x14
c0010c52:	68 c8 00 00 00       	push   0xc8
c0010c57:	e8 2b 6e ff ff       	call   c0007a87 <malloc>
c0010c5c:	83 c4 0c             	add    esp,0xc
c0010c5f:	89 c3                	mov    ebx,eax
c0010c61:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c6b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c75:	6a 20                	push   0x20
c0010c77:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c7d:	6a 00                	push   0x0
c0010c7f:	50                   	push   eax
c0010c80:	e8 5b f8 fe ff       	call   c00004e0 <memset>
c0010c85:	83 c4 0c             	add    esp,0xc
c0010c88:	6a 44                	push   0x44
c0010c8a:	6a 00                	push   0x0
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 4e f8 fe ff       	call   c00004e0 <memset>
c0010c92:	83 c4 18             	add    esp,0x18
c0010c95:	89 d8                	mov    eax,ebx
c0010c97:	5b                   	pop    ebx
c0010c98:	c3                   	ret    

c0010c99 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c99:	53                   	push   ebx
c0010c9a:	b8 01 00 00 00       	mov    eax,0x1
c0010c9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ca3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ca7:	83 f9 10             	cmp    ecx,0x10
c0010caa:	7f 21                	jg     c0010ccd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cac:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb3:	89 03                	mov    DWORD PTR [ebx],eax
c0010cb5:	b8 01 00 00 00       	mov    eax,0x1
c0010cba:	d3 e0                	shl    eax,cl
c0010cbc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cc0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cc3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ccb:	31 c0                	xor    eax,eax
c0010ccd:	5b                   	pop    ebx
c0010cce:	c3                   	ret    

c0010ccf <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ccf:	55                   	push   ebp
c0010cd0:	57                   	push   edi
c0010cd1:	bf 08 00 00 00       	mov    edi,0x8
c0010cd6:	56                   	push   esi
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 18             	sub    esp,0x18
c0010cdb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cdf:	68 aa 0c 02 c0       	push   0xc0020caa
c0010ce4:	e8 60 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010ce9:	83 c4 10             	add    esp,0x10
c0010cec:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cf3:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cf9:	31 c9                	xor    ecx,ecx
c0010cfb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010cff:	99                   	cdq    
c0010d00:	f7 ff                	idiv   edi
c0010d02:	8d 42 24             	lea    eax,[edx+0x24]
c0010d05:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d09:	85 f6                	test   esi,esi
c0010d0b:	75 1a                	jne    c0010d27 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d0d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d11:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d15:	50                   	push   eax
c0010d16:	50                   	push   eax
c0010d17:	52                   	push   edx
c0010d18:	68 bb 0c 02 c0       	push   0xc0020cbb
c0010d1d:	e8 27 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010d22:	83 c4 10             	add    esp,0x10
c0010d25:	eb 1b                	jmp    c0010d42 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d27:	41                   	inc    ecx
c0010d28:	83 f9 08             	cmp    ecx,0x8
c0010d2b:	75 ce                	jne    c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d2d:	83 ec 0c             	sub    esp,0xc
c0010d30:	be 01 00 00 00       	mov    esi,0x1
c0010d35:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010d3a:	e8 0a 9c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	89 f0                	mov    eax,esi
c0010d47:	5b                   	pop    ebx
c0010d48:	5e                   	pop    esi
c0010d49:	5f                   	pop    edi
c0010d4a:	5d                   	pop    ebp
c0010d4b:	c3                   	ret    

c0010d4c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d4c:	55                   	push   ebp
c0010d4d:	57                   	push   edi
c0010d4e:	56                   	push   esi
c0010d4f:	53                   	push   ebx
c0010d50:	51                   	push   ecx
c0010d51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d55:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d5c:	0f 84 af 00 00 00    	je     c0010e11 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d62:	31 c9                	xor    ecx,ecx
c0010d64:	bf 08 00 00 00       	mov    edi,0x8
c0010d69:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d6f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d72:	99                   	cdq    
c0010d73:	f7 ff                	idiv   edi
c0010d75:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d7c:	85 ed                	test   ebp,ebp
c0010d7e:	0f 84 9e 00 00 00    	je     c0010e22 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d84:	89 e9                	mov    ecx,ebp
c0010d86:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d8c:	bf 01 00 00 00       	mov    edi,0x1
c0010d91:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d94:	d3 e7                	shl    edi,cl
c0010d96:	31 c9                	xor    ecx,ecx
c0010d98:	b8 01 00 00 00       	mov    eax,0x1
c0010d9d:	d3 e0                	shl    eax,cl
c0010d9f:	85 04 24             	test   DWORD PTR [esp],eax
c0010da2:	74 06                	je     c0010daa <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010da4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010da8:	75 67                	jne    c0010e11 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010daa:	41                   	inc    ecx
c0010dab:	83 f9 11             	cmp    ecx,0x11
c0010dae:	75 e8                	jne    c0010d98 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010db0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010db3:	46                   	inc    esi
c0010db4:	09 f8                	or     eax,edi
c0010db6:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dbc:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dc7:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dcd:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010dd4:	31 c0                	xor    eax,eax
c0010dd6:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010dde:	74 09                	je     c0010de9 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010de0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010de7:	eb 06                	jmp    c0010def <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010de9:	40                   	inc    eax
c0010dea:	83 f8 08             	cmp    eax,0x8
c0010ded:	75 e7                	jne    c0010dd6 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010df3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010df6:	83 fd 09             	cmp    ebp,0x9
c0010df9:	89 2a                	mov    DWORD PTR [edx],ebp
c0010dfb:	75 07                	jne    c0010e04 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010dfd:	b8 dc 0b 01 c0       	mov    eax,0xc0010bdc
c0010e02:	eb 31                	jmp    c0010e35 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e04:	83 f8 01             	cmp    eax,0x1
c0010e07:	75 0c                	jne    c0010e15 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e09:	f7 d7                	not    edi
c0010e0b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e11:	31 c0                	xor    eax,eax
c0010e13:	eb 20                	jmp    c0010e35 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e15:	85 c0                	test   eax,eax
c0010e17:	75 1c                	jne    c0010e35 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e19:	8b 04 ad 80 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddf80]
c0010e20:	eb 13                	jmp    c0010e35 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e22:	46                   	inc    esi
c0010e23:	41                   	inc    ecx
c0010e24:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e2a:	83 f9 08             	cmp    ecx,0x8
c0010e2d:	0f 85 36 ff ff ff    	jne    c0010d69 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e33:	eb dc                	jmp    c0010e11 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e35:	5a                   	pop    edx
c0010e36:	5b                   	pop    ebx
c0010e37:	5e                   	pop    esi
c0010e38:	5f                   	pop    edi
c0010e39:	5d                   	pop    ebp
c0010e3a:	c3                   	ret    

c0010e3b <KiCheckSignalZ>:
c0010e3b:	83 ec 10             	sub    esp,0x10
c0010e3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e42:	50                   	push   eax
c0010e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e4b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e51:	e8 f6 fe ff ff       	call   c0010d4c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e56:	5a                   	pop    edx
c0010e57:	31 d2                	xor    edx,edx
c0010e59:	59                   	pop    ecx
c0010e5a:	85 c0                	test   eax,eax
c0010e5c:	74 19                	je     c0010e77 <KiCheckSignalZ+0x3c>
c0010e5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e64:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e67:	89 02                	mov    DWORD PTR [edx],eax
c0010e69:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e74:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e77:	89 d0                	mov    eax,edx
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	c3                   	ret    

c0010e7d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e7d:	56                   	push   esi
c0010e7e:	53                   	push   ebx
c0010e7f:	bb 01 00 00 00       	mov    ebx,0x1
c0010e84:	52                   	push   edx
c0010e85:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e8d:	d3 e3                	shl    ebx,cl
c0010e8f:	83 f9 10             	cmp    ecx,0x10
c0010e92:	7f 08                	jg     c0010e9c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e94:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e9a:	75 10                	jne    c0010eac <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	68 ed 0c 02 c0       	push   0xc0020ced
c0010ea4:	e8 8e f9 ff ff       	call   c0010837 <KePanic(char const*)>
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	f7 d3                	not    ebx
c0010eae:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010eb4:	58                   	pop    eax
c0010eb5:	5b                   	pop    ebx
c0010eb6:	5e                   	pop    esi
c0010eb7:	c3                   	ret    

c0010eb8 <KiFinishSignalZ>:
c0010eb8:	53                   	push   ebx
c0010eb9:	83 ec 10             	sub    esp,0x10
c0010ebc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ec0:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ecb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010ed1:	e8 a7 ff ff ff       	call   c0010e7d <KeCompleteSignal(SigHandlerBlock*, int)>
c0010ed6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010edc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010ee3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010eea:	83 c4 18             	add    esp,0x18
c0010eed:	5b                   	pop    ebx
c0010eee:	c3                   	ret    

c0010eef <SysSeekDir(regs*)>:
c0010eef:	31 c0                	xor    eax,eax
c0010ef1:	31 d2                	xor    edx,edx
c0010ef3:	c3                   	ret    

c0010ef4 <SysTellDir(regs*)>:
c0010ef4:	31 c0                	xor    eax,eax
c0010ef6:	31 d2                	xor    edx,edx
c0010ef8:	c3                   	ret    

c0010ef9 <SysVerify(regs*)>:
c0010ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010efd:	31 d2                	xor    edx,edx
c0010eff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f02:	c3                   	ret    

c0010f03 <SysGetArgc(regs*)>:
c0010f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f11:	89 c2                	mov    edx,eax
c0010f13:	c1 fa 1f             	sar    edx,0x1f
c0010f16:	c3                   	ret    

c0010f17 <SysTTYName(regs*)>:
c0010f17:	b8 01 00 00 00       	mov    eax,0x1
c0010f1c:	31 d2                	xor    edx,edx
c0010f1e:	c3                   	ret    

c0010f1f <SysFormatDisk(regs*)>:
c0010f1f:	56                   	push   esi
c0010f20:	53                   	push   ebx
c0010f21:	83 ec 04             	sub    esp,0x4
c0010f24:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f2e:	eb 2a                	jmp    c0010f5a <SysFormatDisk(regs*)+0x3b>
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f36:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f3b:	51                   	push   ecx
c0010f3c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f3f:	51                   	push   ecx
c0010f40:	50                   	push   eax
c0010f41:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f48:	50                   	push   eax
c0010f49:	53                   	push   ebx
c0010f4a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f4d:	83 c4 20             	add    esp,0x20
c0010f50:	89 c1                	mov    ecx,eax
c0010f52:	83 f8 08             	cmp    eax,0x8
c0010f55:	75 14                	jne    c0010f6b <SysFormatDisk(regs*)+0x4c>
c0010f57:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f5a:	85 db                	test   ebx,ebx
c0010f5c:	75 d2                	jne    c0010f30 <SysFormatDisk(regs*)+0x11>
c0010f5e:	b8 03 00 00 00       	mov    eax,0x3
c0010f63:	31 d2                	xor    edx,edx
c0010f65:	83 c4 04             	add    esp,0x4
c0010f68:	5b                   	pop    ebx
c0010f69:	5e                   	pop    esi
c0010f6a:	c3                   	ret    
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 13                	je     c0010f82 <SysFormatDisk(regs*)+0x63>
c0010f6f:	31 d2                	xor    edx,edx
c0010f71:	b8 01 00 00 00       	mov    eax,0x1
c0010f76:	83 f9 09             	cmp    ecx,0x9
c0010f79:	74 ea                	je     c0010f65 <SysFormatDisk(regs*)+0x46>
c0010f7b:	b8 02 00 00 00       	mov    eax,0x2
c0010f80:	eb e1                	jmp    c0010f63 <SysFormatDisk(regs*)+0x44>
c0010f82:	31 c0                	xor    eax,eax
c0010f84:	eb dd                	jmp    c0010f63 <SysFormatDisk(regs*)+0x44>

c0010f86 <SysSetDiskVolumeLabel(regs*)>:
c0010f86:	56                   	push   esi
c0010f87:	53                   	push   ebx
c0010f88:	83 ec 04             	sub    esp,0x4
c0010f8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f8f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f92:	83 f8 19             	cmp    eax,0x19
c0010f95:	77 33                	ja     c0010fca <SysSetDiskVolumeLabel(regs*)+0x44>
c0010f97:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f9e:	85 c9                	test   ecx,ecx
c0010fa0:	74 28                	je     c0010fca <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fa2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fa5:	85 db                	test   ebx,ebx
c0010fa7:	74 21                	je     c0010fca <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fa9:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010faf:	85 d2                	test   edx,edx
c0010fb1:	74 17                	je     c0010fca <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fb3:	8b 32                	mov    esi,DWORD PTR [edx]
c0010fb5:	53                   	push   ebx
c0010fb6:	50                   	push   eax
c0010fb7:	51                   	push   ecx
c0010fb8:	52                   	push   edx
c0010fb9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010fbc:	83 c4 10             	add    esp,0x10
c0010fbf:	89 c2                	mov    edx,eax
c0010fc1:	c1 fa 1f             	sar    edx,0x1f
c0010fc4:	83 c4 04             	add    esp,0x4
c0010fc7:	5b                   	pop    ebx
c0010fc8:	5e                   	pop    esi
c0010fc9:	c3                   	ret    
c0010fca:	83 c4 04             	add    esp,0x4
c0010fcd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fd7:	5b                   	pop    ebx
c0010fd8:	5e                   	pop    esi
c0010fd9:	c3                   	ret    

c0010fda <SysGetDiskVolumeLabel(regs*)>:
c0010fda:	57                   	push   edi
c0010fdb:	56                   	push   esi
c0010fdc:	53                   	push   ebx
c0010fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fe4:	83 fa 19             	cmp    edx,0x19
c0010fe7:	77 3c                	ja     c0011025 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010fe9:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010ff0:	85 c9                	test   ecx,ecx
c0010ff2:	74 31                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ff4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ff7:	85 db                	test   ebx,ebx
c0010ff9:	74 2a                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ffb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ffe:	85 f6                	test   esi,esi
c0011000:	74 23                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011002:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011008:	85 c0                	test   eax,eax
c001100a:	74 19                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011011:	56                   	push   esi
c0011012:	53                   	push   ebx
c0011013:	52                   	push   edx
c0011014:	51                   	push   ecx
c0011015:	50                   	push   eax
c0011016:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011019:	83 c4 20             	add    esp,0x20
c001101c:	89 c2                	mov    edx,eax
c001101e:	c1 fa 1f             	sar    edx,0x1f
c0011021:	5b                   	pop    ebx
c0011022:	5e                   	pop    esi
c0011023:	5f                   	pop    edi
c0011024:	c3                   	ret    
c0011025:	5b                   	pop    ebx
c0011026:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001102b:	5e                   	pop    esi
c001102c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011031:	5f                   	pop    edi
c0011032:	c3                   	ret    

c0011033 <SysShutdown(regs*)>:
c0011033:	57                   	push   edi
c0011034:	56                   	push   esi
c0011035:	83 ec 04             	sub    esp,0x4
c0011038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001103f:	85 c0                	test   eax,eax
c0011041:	74 1e                	je     c0011061 <SysShutdown(regs*)+0x2e>
c0011043:	83 f8 01             	cmp    eax,0x1
c0011046:	74 5f                	je     c00110a7 <SysShutdown(regs*)+0x74>
c0011048:	be ff ff ff ff       	mov    esi,0xffffffff
c001104d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011052:	83 f8 02             	cmp    eax,0x2
c0011055:	74 32                	je     c0011089 <SysShutdown(regs*)+0x56>
c0011057:	83 c4 04             	add    esp,0x4
c001105a:	89 f0                	mov    eax,esi
c001105c:	89 fa                	mov    edx,edi
c001105e:	5e                   	pop    esi
c001105f:	5f                   	pop    edi
c0011060:	c3                   	ret    
c0011061:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011066:	be ff ff ff ff       	mov    esi,0xffffffff
c001106b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011070:	8b 10                	mov    edx,DWORD PTR [eax]
c0011072:	6a 00                	push   0x0
c0011074:	6a 00                	push   0x0
c0011076:	6a 00                	push   0x0
c0011078:	50                   	push   eax
c0011079:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001107c:	83 c4 10             	add    esp,0x10
c001107f:	89 f0                	mov    eax,esi
c0011081:	83 c4 04             	add    esp,0x4
c0011084:	89 fa                	mov    edx,edi
c0011086:	5e                   	pop    esi
c0011087:	5f                   	pop    edi
c0011088:	c3                   	ret    
c0011089:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001108e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011090:	6a 00                	push   0x0
c0011092:	6a 00                	push   0x0
c0011094:	6a 01                	push   0x1
c0011096:	50                   	push   eax
c0011097:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001109a:	83 c4 10             	add    esp,0x10
c001109d:	89 f0                	mov    eax,esi
c001109f:	83 c4 04             	add    esp,0x4
c00110a2:	89 fa                	mov    edx,edi
c00110a4:	5e                   	pop    esi
c00110a5:	5f                   	pop    edi
c00110a6:	c3                   	ret    
c00110a7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110ac:	85 c0                	test   eax,eax
c00110ae:	74 02                	je     c00110b2 <SysShutdown(regs*)+0x7f>
c00110b0:	ff d0                	call   eax
c00110b2:	83 c4 04             	add    esp,0x4
c00110b5:	31 f6                	xor    esi,esi
c00110b7:	31 ff                	xor    edi,edi
c00110b9:	89 f0                	mov    eax,esi
c00110bb:	5e                   	pop    esi
c00110bc:	89 fa                	mov    edx,edi
c00110be:	5f                   	pop    edi
c00110bf:	c3                   	ret    

c00110c0 <SysRealpath(regs*)>:
c00110c0:	53                   	push   ebx
c00110c1:	83 ec 08             	sub    esp,0x8
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110cb:	85 c9                	test   ecx,ecx
c00110cd:	74 37                	je     c0011106 <SysRealpath(regs*)+0x46>
c00110cf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110d2:	31 d2                	xor    edx,edx
c00110d4:	b8 01 00 00 00       	mov    eax,0x1
c00110d9:	85 db                	test   ebx,ebx
c00110db:	75 05                	jne    c00110e2 <SysRealpath(regs*)+0x22>
c00110dd:	83 c4 08             	add    esp,0x8
c00110e0:	5b                   	pop    ebx
c00110e1:	c3                   	ret    
c00110e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e7:	83 ec 04             	sub    esp,0x4
c00110ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110ed:	05 0c 01 00 00       	add    eax,0x10c
c00110f2:	50                   	push   eax
c00110f3:	51                   	push   ecx
c00110f4:	53                   	push   ebx
c00110f5:	e8 1c 9c ff ff       	call   c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	31 c0                	xor    eax,eax
c00110ff:	31 d2                	xor    edx,edx
c0011101:	83 c4 08             	add    esp,0x8
c0011104:	5b                   	pop    ebx
c0011105:	c3                   	ret    
c0011106:	b8 01 00 00 00       	mov    eax,0x1
c001110b:	31 d2                	xor    edx,edx
c001110d:	eb f2                	jmp    c0011101 <SysRealpath(regs*)+0x41>

c001110f <SysReadDir(regs*)>:
c001110f:	53                   	push   ebx
c0011110:	83 ec 18             	sub    esp,0x18
c0011113:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011117:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001111a:	83 f8 02             	cmp    eax,0x2
c001111d:	76 4f                	jbe    c001116e <SysReadDir(regs*)+0x5f>
c001111f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011126:	77 52                	ja     c001117a <SysReadDir(regs*)+0x6b>
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	50                   	push   eax
c001112c:	e8 5e 83 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	85 c0                	test   eax,eax
c0011136:	74 42                	je     c001117a <SysReadDir(regs*)+0x6b>
c0011138:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	8b 10                	mov    edx,DWORD PTR [eax]
c0011145:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011149:	51                   	push   ecx
c001114a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001114d:	51                   	push   ecx
c001114e:	6a 00                	push   0x0
c0011150:	68 10 01 00 00       	push   0x110
c0011155:	50                   	push   eax
c0011156:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011159:	83 c4 20             	add    esp,0x20
c001115c:	89 c1                	mov    ecx,eax
c001115e:	85 c0                	test   eax,eax
c0011160:	74 27                	je     c0011189 <SysReadDir(regs*)+0x7a>
c0011162:	31 d2                	xor    edx,edx
c0011164:	b8 02 00 00 00       	mov    eax,0x2
c0011169:	83 f9 07             	cmp    ecx,0x7
c001116c:	75 16                	jne    c0011184 <SysReadDir(regs*)+0x75>
c001116e:	b8 01 00 00 00       	mov    eax,0x1
c0011173:	31 d2                	xor    edx,edx
c0011175:	83 c4 18             	add    esp,0x18
c0011178:	5b                   	pop    ebx
c0011179:	c3                   	ret    
c001117a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001117f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011184:	83 c4 18             	add    esp,0x18
c0011187:	5b                   	pop    ebx
c0011188:	c3                   	ret    
c0011189:	31 c0                	xor    eax,eax
c001118b:	31 d2                	xor    edx,edx
c001118d:	eb e6                	jmp    c0011175 <SysReadDir(regs*)+0x66>

c001118f <SysIsATTY(regs*)>:
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011196:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011199:	83 f8 02             	cmp    eax,0x2
c001119c:	76 07                	jbe    c00111a5 <SysIsATTY(regs*)+0x16>
c001119e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a3:	75 26                	jne    c00111cb <SysIsATTY(regs*)+0x3c>
c00111a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111b3:	85 c0                	test   eax,eax
c00111b5:	74 24                	je     c00111db <SysIsATTY(regs*)+0x4c>
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00111bc:	50                   	push   eax
c00111bd:	ff 12                	call   DWORD PTR [edx]
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	31 d2                	xor    edx,edx
c00111c4:	0f b6 c0             	movzx  eax,al
c00111c7:	83 c4 0c             	add    esp,0xc
c00111ca:	c3                   	ret    
c00111cb:	83 ec 0c             	sub    esp,0xc
c00111ce:	50                   	push   eax
c00111cf:	e8 bb 82 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c00111d4:	83 c4 10             	add    esp,0x10
c00111d7:	85 c0                	test   eax,eax
c00111d9:	75 dc                	jne    c00111b7 <SysIsATTY(regs*)+0x28>
c00111db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111e5:	83 c4 0c             	add    esp,0xc
c00111e8:	c3                   	ret    

c00111e9 <SysSeek(regs*)>:
c00111e9:	56                   	push   esi
c00111ea:	53                   	push   ebx
c00111eb:	83 ec 04             	sub    esp,0x4
c00111ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00111f5:	8d 71 fd             	lea    esi,[ecx-0x3]
c00111f8:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00111fe:	77 33                	ja     c0011233 <SysSeek(regs*)+0x4a>
c0011200:	83 ec 0c             	sub    esp,0xc
c0011203:	51                   	push   ecx
c0011204:	e8 86 82 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c0011209:	83 c4 0c             	add    esp,0xc
c001120c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001120f:	31 db                	xor    ebx,ebx
c0011211:	53                   	push   ebx
c0011212:	51                   	push   ecx
c0011213:	50                   	push   eax
c0011214:	e8 2d 9e ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	85 c0                	test   eax,eax
c001121e:	0f 95 c0             	setne  al
c0011221:	0f b6 c0             	movzx  eax,al
c0011224:	31 d2                	xor    edx,edx
c0011226:	f7 d8                	neg    eax
c0011228:	83 d2 00             	adc    edx,0x0
c001122b:	83 c4 04             	add    esp,0x4
c001122e:	f7 da                	neg    edx
c0011230:	5b                   	pop    ebx
c0011231:	5e                   	pop    esi
c0011232:	c3                   	ret    
c0011233:	83 c4 04             	add    esp,0x4
c0011236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001123b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011240:	5b                   	pop    ebx
c0011241:	5e                   	pop    esi
c0011242:	c3                   	ret    

c0011243 <SysTell(regs*)>:
c0011243:	53                   	push   ebx
c0011244:	83 ec 08             	sub    esp,0x8
c0011247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001124b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001124e:	83 f8 02             	cmp    eax,0x2
c0011251:	76 4e                	jbe    c00112a1 <SysTell(regs*)+0x5e>
c0011253:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011258:	76 19                	jbe    c0011273 <SysTell(regs*)+0x30>
c001125a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001125d:	31 d2                	xor    edx,edx
c001125f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001126c:	83 c4 08             	add    esp,0x8
c001126f:	31 c0                	xor    eax,eax
c0011271:	5b                   	pop    ebx
c0011272:	c3                   	ret    
c0011273:	83 ec 0c             	sub    esp,0xc
c0011276:	50                   	push   eax
c0011277:	e8 13 82 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c001127c:	5a                   	pop    edx
c001127d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011280:	59                   	pop    ecx
c0011281:	53                   	push   ebx
c0011282:	50                   	push   eax
c0011283:	e8 14 9e ff ff       	call   c000b09c <File::tell(unsigned long long*)>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	85 c0                	test   eax,eax
c001128d:	0f 95 c0             	setne  al
c0011290:	0f b6 c0             	movzx  eax,al
c0011293:	31 d2                	xor    edx,edx
c0011295:	f7 d8                	neg    eax
c0011297:	83 d2 00             	adc    edx,0x0
c001129a:	83 c4 08             	add    esp,0x8
c001129d:	f7 da                	neg    edx
c001129f:	5b                   	pop    ebx
c00112a0:	c3                   	ret    
c00112a1:	83 c4 08             	add    esp,0x8
c00112a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ae:	5b                   	pop    ebx
c00112af:	c3                   	ret    

c00112b0 <SysSize(regs*)>:
c00112b0:	53                   	push   ebx
c00112b1:	83 ec 18             	sub    esp,0x18
c00112b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112bb:	83 f8 02             	cmp    eax,0x2
c00112be:	76 54                	jbe    c0011314 <SysSize(regs*)+0x64>
c00112c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112c5:	76 19                	jbe    c00112e0 <SysSize(regs*)+0x30>
c00112c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ca:	31 d2                	xor    edx,edx
c00112cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112d9:	83 c4 18             	add    esp,0x18
c00112dc:	31 c0                	xor    eax,eax
c00112de:	5b                   	pop    ebx
c00112df:	c3                   	ret    
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	50                   	push   eax
c00112e4:	e8 a6 81 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c00112e9:	83 c4 0c             	add    esp,0xc
c00112ec:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112f0:	52                   	push   edx
c00112f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112f4:	52                   	push   edx
c00112f5:	50                   	push   eax
c00112f6:	e8 39 9f ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	85 c0                	test   eax,eax
c0011300:	0f 95 c0             	setne  al
c0011303:	0f b6 c0             	movzx  eax,al
c0011306:	31 d2                	xor    edx,edx
c0011308:	f7 d8                	neg    eax
c001130a:	83 d2 00             	adc    edx,0x0
c001130d:	83 c4 18             	add    esp,0x18
c0011310:	f7 da                	neg    edx
c0011312:	5b                   	pop    ebx
c0011313:	c3                   	ret    
c0011314:	83 c4 18             	add    esp,0x18
c0011317:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001131c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011321:	5b                   	pop    ebx
c0011322:	c3                   	ret    

c0011323 <SysSizeFromFilename(regs*)>:
c0011323:	57                   	push   edi
c0011324:	56                   	push   esi
c0011325:	53                   	push   ebx
c0011326:	83 ec 20             	sub    esp,0x20
c0011329:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001132d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011330:	83 fb 02             	cmp    ebx,0x2
c0011333:	0f 86 8a 00 00 00    	jbe    c00113c3 <SysSizeFromFilename(regs*)+0xa0>
c0011339:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001133f:	76 1b                	jbe    c001135c <SysSizeFromFilename(regs*)+0x39>
c0011341:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011344:	31 d2                	xor    edx,edx
c0011346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001134c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011353:	83 c4 20             	add    esp,0x20
c0011356:	31 c0                	xor    eax,eax
c0011358:	5b                   	pop    ebx
c0011359:	5e                   	pop    esi
c001135a:	5f                   	pop    edi
c001135b:	c3                   	ret    
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	68 14 01 00 00       	push   0x114
c0011364:	e8 1e 67 ff ff       	call   c0007a87 <malloc>
c0011369:	89 c7                	mov    edi,eax
c001136b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011370:	83 c4 0c             	add    esp,0xc
c0011373:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011376:	50                   	push   eax
c0011377:	53                   	push   ebx
c0011378:	57                   	push   edi
c0011379:	e8 4e 9b ff ff       	call   c000aecc <File::File(char const*, Process*)>
c001137e:	83 c4 0c             	add    esp,0xc
c0011381:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011385:	50                   	push   eax
c0011386:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011389:	52                   	push   edx
c001138a:	57                   	push   edi
c001138b:	e8 a4 9e ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0011390:	83 c4 10             	add    esp,0x10
c0011393:	85 ff                	test   edi,edi
c0011395:	74 14                	je     c00113ab <SysSizeFromFilename(regs*)+0x88>
c0011397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	8b 17                	mov    edx,DWORD PTR [edi]
c00113a0:	57                   	push   edi
c00113a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113ab:	85 c0                	test   eax,eax
c00113ad:	0f 95 c0             	setne  al
c00113b0:	0f b6 c0             	movzx  eax,al
c00113b3:	31 d2                	xor    edx,edx
c00113b5:	f7 d8                	neg    eax
c00113b7:	83 d2 00             	adc    edx,0x0
c00113ba:	83 c4 20             	add    esp,0x20
c00113bd:	f7 da                	neg    edx
c00113bf:	5b                   	pop    ebx
c00113c0:	5e                   	pop    esi
c00113c1:	5f                   	pop    edi
c00113c2:	c3                   	ret    
c00113c3:	83 c4 20             	add    esp,0x20
c00113c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d0:	5b                   	pop    ebx
c00113d1:	5e                   	pop    esi
c00113d2:	5f                   	pop    edi
c00113d3:	c3                   	ret    

c00113d4 <SysClose(regs*)>:
c00113d4:	53                   	push   ebx
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113df:	83 f8 02             	cmp    eax,0x2
c00113e2:	76 41                	jbe    c0011425 <SysClose(regs*)+0x51>
c00113e4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113ea:	83 fa 01             	cmp    edx,0x1
c00113ed:	76 2d                	jbe    c001141c <SysClose(regs*)+0x48>
c00113ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113f4:	77 2f                	ja     c0011425 <SysClose(regs*)+0x51>
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	50                   	push   eax
c00113fa:	e8 90 80 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c00113ff:	89 c3                	mov    ebx,eax
c0011401:	89 04 24             	mov    DWORD PTR [esp],eax
c0011404:	e8 dd 9b ff ff       	call   c000afe6 <File::close()>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	85 db                	test   ebx,ebx
c001140e:	74 0c                	je     c001141c <SysClose(regs*)+0x48>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011415:	53                   	push   ebx
c0011416:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011419:	83 c4 10             	add    esp,0x10
c001141c:	83 c4 08             	add    esp,0x8
c001141f:	31 c0                	xor    eax,eax
c0011421:	31 d2                	xor    edx,edx
c0011423:	5b                   	pop    ebx
c0011424:	c3                   	ret    
c0011425:	83 c4 08             	add    esp,0x8
c0011428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011432:	5b                   	pop    ebx
c0011433:	c3                   	ret    

c0011434 <SysOpenDir(regs*)>:
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 04             	sub    esp,0x4
c0011439:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001143d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011440:	85 c9                	test   ecx,ecx
c0011442:	74 5d                	je     c00114a1 <SysOpenDir(regs*)+0x6d>
c0011444:	83 ec 0c             	sub    esp,0xc
c0011447:	68 14 01 00 00       	push   0x114
c001144c:	e8 36 66 ff ff       	call   c0007a87 <malloc>
c0011451:	89 c6                	mov    esi,eax
c0011453:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011458:	83 c4 0c             	add    esp,0xc
c001145b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001145e:	50                   	push   eax
c001145f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011462:	52                   	push   edx
c0011463:	56                   	push   esi
c0011464:	e8 89 9f ff ff       	call   c000b3f2 <Directory::Directory(char const*, Process*)>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	85 f6                	test   esi,esi
c001146e:	74 31                	je     c00114a1 <SysOpenDir(regs*)+0x6d>
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	56                   	push   esi
c0011474:	e8 35 a0 ff ff       	call   c000b4ae <Directory::open()>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	75 21                	jne    c00114a1 <SysOpenDir(regs*)+0x6d>
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	56                   	push   esi
c0011484:	e8 09 7d ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011489:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	89 02                	mov    DWORD PTR [edx],eax
c0011491:	c1 f8 1f             	sar    eax,0x1f
c0011494:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011497:	83 c4 04             	add    esp,0x4
c001149a:	31 c0                	xor    eax,eax
c001149c:	31 d2                	xor    edx,edx
c001149e:	5b                   	pop    ebx
c001149f:	5e                   	pop    esi
c00114a0:	c3                   	ret    
c00114a1:	83 c4 04             	add    esp,0x4
c00114a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ae:	5b                   	pop    ebx
c00114af:	5e                   	pop    esi
c00114b0:	c3                   	ret    

c00114b1 <SysMakeDir(regs*)>:
c00114b1:	56                   	push   esi
c00114b2:	53                   	push   ebx
c00114b3:	83 ec 10             	sub    esp,0x10
c00114b6:	68 14 01 00 00       	push   0x114
c00114bb:	e8 c7 65 ff ff       	call   c0007a87 <malloc>
c00114c0:	89 c3                	mov    ebx,eax
c00114c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114c7:	83 c4 0c             	add    esp,0xc
c00114ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114cd:	50                   	push   eax
c00114ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114d2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114d5:	52                   	push   edx
c00114d6:	53                   	push   ebx
c00114d7:	e8 16 9f ff ff       	call   c000b3f2 <Directory::Directory(char const*, Process*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	85 db                	test   ebx,ebx
c00114e1:	74 2c                	je     c001150f <SysMakeDir(regs*)+0x5e>
c00114e3:	83 ec 0c             	sub    esp,0xc
c00114e6:	53                   	push   ebx
c00114e7:	e8 a2 a1 ff ff       	call   c000b68e <Directory::create()>
c00114ec:	89 c6                	mov    esi,eax
c00114ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f6:	31 c0                	xor    eax,eax
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	85 f6                	test   esi,esi
c00114fd:	0f 95 c0             	setne  al
c0011500:	31 d2                	xor    edx,edx
c0011502:	f7 d8                	neg    eax
c0011504:	83 d2 00             	adc    edx,0x0
c0011507:	83 c4 04             	add    esp,0x4
c001150a:	f7 da                	neg    edx
c001150c:	5b                   	pop    ebx
c001150d:	5e                   	pop    esi
c001150e:	c3                   	ret    
c001150f:	83 c4 04             	add    esp,0x4
c0011512:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011517:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151c:	5b                   	pop    ebx
c001151d:	5e                   	pop    esi
c001151e:	c3                   	ret    

c001151f <SysCloseDir(regs*)>:
c001151f:	53                   	push   ebx
c0011520:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011525:	83 ec 08             	sub    esp,0x8
c0011528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001152c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001152f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011534:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011537:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001153d:	77 2a                	ja     c0011569 <SysCloseDir(regs*)+0x4a>
c001153f:	83 ec 0c             	sub    esp,0xc
c0011542:	51                   	push   ecx
c0011543:	e8 47 7f ff ff       	call   c000948f <getFromFileDescriptor(int)>
c0011548:	89 c3                	mov    ebx,eax
c001154a:	89 04 24             	mov    DWORD PTR [esp],eax
c001154d:	e8 b8 9f ff ff       	call   c000b50a <Directory::close()>
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	85 db                	test   ebx,ebx
c0011557:	74 0c                	je     c0011565 <SysCloseDir(regs*)+0x46>
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001155e:	53                   	push   ebx
c001155f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	31 c0                	xor    eax,eax
c0011567:	31 d2                	xor    edx,edx
c0011569:	83 c4 08             	add    esp,0x8
c001156c:	5b                   	pop    ebx
c001156d:	c3                   	ret    

c001156e <SysWait(regs*)>:
c001156e:	83 ec 10             	sub    esp,0x10
c0011571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011575:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011578:	52                   	push   edx
c0011579:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001157c:	51                   	push   ecx
c001157d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011580:	50                   	push   eax
c0011581:	e8 f2 3c 00 00       	call   c0015278 <waitTask(int, int*, int)>
c0011586:	89 c2                	mov    edx,eax
c0011588:	83 c4 1c             	add    esp,0x1c
c001158b:	c1 fa 1f             	sar    edx,0x1f
c001158e:	c3                   	ret    

c001158f <SysNotImpl(regs*)>:
c001158f:	83 ec 18             	sub    esp,0x18
c0011592:	68 fe 0c 02 c0       	push   0xc0020cfe
c0011597:	e8 9b f2 ff ff       	call   c0010837 <KePanic(char const*)>
c001159c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a6:	83 c4 1c             	add    esp,0x1c
c00115a9:	c3                   	ret    

c00115aa <SysPanic(regs*)>:
c00115aa:	83 ec 18             	sub    esp,0x18
c00115ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115b1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115b4:	50                   	push   eax
c00115b5:	e8 7d f2 ff ff       	call   c0010837 <KePanic(char const*)>
c00115ba:	b8 01 00 00 00       	mov    eax,0x1
c00115bf:	31 d2                	xor    edx,edx
c00115c1:	83 c4 1c             	add    esp,0x1c
c00115c4:	c3                   	ret    

c00115c5 <SysRmdir(regs*)>:
c00115c5:	56                   	push   esi
c00115c6:	53                   	push   ebx
c00115c7:	83 ec 20             	sub    esp,0x20
c00115ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00115ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115d1:	68 14 01 00 00       	push   0x114
c00115d6:	e8 ac 64 ff ff       	call   c0007a87 <malloc>
c00115db:	83 c4 0c             	add    esp,0xc
c00115de:	89 c3                	mov    ebx,eax
c00115e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115e8:	50                   	push   eax
c00115e9:	56                   	push   esi
c00115ea:	53                   	push   ebx
c00115eb:	e8 dc 98 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c00115f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115f3:	e8 08 9b ff ff       	call   c000b100 <File::unlink()>
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	85 db                	test   ebx,ebx
c00115fd:	74 14                	je     c0011613 <SysRmdir(regs*)+0x4e>
c00115ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011608:	53                   	push   ebx
c0011609:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011613:	85 c0                	test   eax,eax
c0011615:	0f 95 c0             	setne  al
c0011618:	0f b6 c0             	movzx  eax,al
c001161b:	31 d2                	xor    edx,edx
c001161d:	f7 d8                	neg    eax
c001161f:	83 d2 00             	adc    edx,0x0
c0011622:	83 c4 14             	add    esp,0x14
c0011625:	f7 da                	neg    edx
c0011627:	5b                   	pop    ebx
c0011628:	5e                   	pop    esi
c0011629:	c3                   	ret    

c001162a <SysUnlink(regs*)>:
c001162a:	56                   	push   esi
c001162b:	53                   	push   ebx
c001162c:	83 ec 20             	sub    esp,0x20
c001162f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011633:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011636:	68 14 01 00 00       	push   0x114
c001163b:	e8 47 64 ff ff       	call   c0007a87 <malloc>
c0011640:	83 c4 0c             	add    esp,0xc
c0011643:	89 c3                	mov    ebx,eax
c0011645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001164d:	50                   	push   eax
c001164e:	56                   	push   esi
c001164f:	53                   	push   ebx
c0011650:	e8 77 98 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0011655:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011658:	e8 a3 9a ff ff       	call   c000b100 <File::unlink()>
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	85 db                	test   ebx,ebx
c0011662:	74 14                	je     c0011678 <SysUnlink(regs*)+0x4e>
c0011664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011668:	83 ec 0c             	sub    esp,0xc
c001166b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001166d:	53                   	push   ebx
c001166e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011678:	85 c0                	test   eax,eax
c001167a:	0f 95 c0             	setne  al
c001167d:	0f b6 c0             	movzx  eax,al
c0011680:	31 d2                	xor    edx,edx
c0011682:	f7 d8                	neg    eax
c0011684:	83 d2 00             	adc    edx,0x0
c0011687:	83 c4 14             	add    esp,0x14
c001168a:	f7 da                	neg    edx
c001168c:	5b                   	pop    ebx
c001168d:	5e                   	pop    esi
c001168e:	c3                   	ret    

c001168f <SysGetArgv(regs*)>:
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011696:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011699:	85 c0                	test   eax,eax
c001169b:	78 2c                	js     c00116c9 <SysGetArgv(regs*)+0x3a>
c001169d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116a3:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116a6:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116ac:	7d 1b                	jge    c00116c9 <SysGetArgv(regs*)+0x3a>
c00116ae:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116b5:	85 c0                	test   eax,eax
c00116b7:	74 18                	je     c00116d1 <SysGetArgv(regs*)+0x42>
c00116b9:	83 ec 08             	sub    esp,0x8
c00116bc:	50                   	push   eax
c00116bd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116c0:	50                   	push   eax
c00116c1:	e8 6a ef fe ff       	call   c0000630 <strcpy>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	31 c0                	xor    eax,eax
c00116cb:	31 d2                	xor    edx,edx
c00116cd:	83 c4 0c             	add    esp,0xc
c00116d0:	c3                   	ret    
c00116d1:	b8 01 00 00 00       	mov    eax,0x1
c00116d6:	31 d2                	xor    edx,edx
c00116d8:	83 c4 0c             	add    esp,0xc
c00116db:	c3                   	ret    

c00116dc <SysUSleep(regs*)>:
c00116dc:	83 ec 1c             	sub    esp,0x1c
c00116df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116e6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116e9:	6a 00                	push   0x0
c00116eb:	6a 64                	push   0x64
c00116ed:	52                   	push   edx
c00116ee:	50                   	push   eax
c00116ef:	e8 dc ce 00 00       	call   c001e5d0 <__udivdi3>
c00116f4:	83 c4 14             	add    esp,0x14
c00116f7:	50                   	push   eax
c00116f8:	e8 5f 3c 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c00116fd:	31 c0                	xor    eax,eax
c00116ff:	31 d2                	xor    edx,edx
c0011701:	83 c4 1c             	add    esp,0x1c
c0011704:	c3                   	ret    

c0011705 <SysSpawn(regs*)>:
c0011705:	56                   	push   esi
c0011706:	53                   	push   ebx
c0011707:	83 ec 04             	sub    esp,0x4
c001170a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001170e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011711:	85 f6                	test   esi,esi
c0011713:	75 0a                	jne    c001171f <SysSpawn(regs*)+0x1a>
c0011715:	83 c4 04             	add    esp,0x4
c0011718:	31 c0                	xor    eax,eax
c001171a:	31 d2                	xor    edx,edx
c001171c:	5b                   	pop    ebx
c001171d:	5e                   	pop    esi
c001171e:	c3                   	ret    
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	68 24 07 00 00       	push   0x724
c0011727:	e8 5b 63 ff ff       	call   c0007a87 <malloc>
c001172c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001172f:	89 c6                	mov    esi,eax
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	31 c0                	xor    eax,eax
c0011736:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011739:	85 c9                	test   ecx,ecx
c001173b:	75 08                	jne    c0011745 <SysSpawn(regs*)+0x40>
c001173d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011742:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011745:	52                   	push   edx
c0011746:	50                   	push   eax
c0011747:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001174a:	50                   	push   eax
c001174b:	56                   	push   esi
c001174c:	e8 77 32 00 00       	call   c00149c8 <Process::Process(char const*, Process*, char**)>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001175b:	75 b8                	jne    c0011715 <SysSpawn(regs*)+0x10>
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	56                   	push   esi
c0011761:	e8 96 37 00 00       	call   c0014efc <Process::createUserThread()>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	8b 06                	mov    eax,DWORD PTR [esi]
c001176b:	83 c4 04             	add    esp,0x4
c001176e:	89 c2                	mov    edx,eax
c0011770:	c1 fa 1f             	sar    edx,0x1f
c0011773:	5b                   	pop    ebx
c0011774:	5e                   	pop    esi
c0011775:	c3                   	ret    

c0011776 <SysGetEnv(regs*)>:
c0011776:	57                   	push   edi
c0011777:	56                   	push   esi
c0011778:	53                   	push   ebx
c0011779:	83 ec 1c             	sub    esp,0x1c
c001177c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011781:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011785:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011788:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001178b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001178e:	51                   	push   ecx
c001178f:	e8 5b ef ff ff       	call   c00106ef <Krnl::getProcessTotalEnvCount(Process*)>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	39 c7                	cmp    edi,eax
c0011799:	7c 12                	jl     c00117ad <SysGetEnv(regs*)+0x37>
c001179b:	31 c0                	xor    eax,eax
c001179d:	85 f6                	test   esi,esi
c001179f:	74 03                	je     c00117a4 <SysGetEnv(regs*)+0x2e>
c00117a1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	31 d2                	xor    edx,edx
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	c3                   	ret    
c00117ad:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117b1:	83 ec 04             	sub    esp,0x4
c00117b4:	57                   	push   edi
c00117b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117bb:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117be:	57                   	push   edi
c00117bf:	50                   	push   eax
c00117c0:	e8 4a ef ff ff       	call   c001070f <Krnl::getProcessEnvPair(Process*, int)>
c00117c5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117d0:	83 c4 0c             	add    esp,0xc
c00117d3:	85 d2                	test   edx,edx
c00117d5:	75 23                	jne    c00117fa <SysGetEnv(regs*)+0x84>
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	50                   	push   eax
c00117db:	e8 80 ed fe ff       	call   c0000560 <strlen>
c00117e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117e3:	89 c3                	mov    ebx,eax
c00117e5:	e8 76 ed fe ff       	call   c0000560 <strlen>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	83 c4 10             	add    esp,0x10
c00117f0:	31 d2                	xor    edx,edx
c00117f2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00117f6:	5b                   	pop    ebx
c00117f7:	5e                   	pop    esi
c00117f8:	5f                   	pop    edi
c00117f9:	c3                   	ret    
c00117fa:	83 ec 08             	sub    esp,0x8
c00117fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011800:	50                   	push   eax
c0011801:	56                   	push   esi
c0011802:	e8 29 ee fe ff       	call   c0000630 <strcpy>
c0011807:	58                   	pop    eax
c0011808:	5a                   	pop    edx
c0011809:	68 18 0d 02 c0       	push   0xc0020d18
c001180e:	56                   	push   esi
c001180f:	e8 1c f0 fe ff       	call   c0000830 <strcat>
c0011814:	59                   	pop    ecx
c0011815:	5b                   	pop    ebx
c0011816:	57                   	push   edi
c0011817:	56                   	push   esi
c0011818:	e8 13 f0 fe ff       	call   c0000830 <strcat>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	31 c0                	xor    eax,eax
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	31 d2                	xor    edx,edx
c0011827:	5b                   	pop    ebx
c0011828:	5e                   	pop    esi
c0011829:	5f                   	pop    edi
c001182a:	c3                   	ret    

c001182b <SysSetFatAttrib(regs*)>:
c001182b:	57                   	push   edi
c001182c:	56                   	push   esi
c001182d:	53                   	push   ebx
c001182e:	83 ec 1c             	sub    esp,0x1c
c0011831:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011835:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011838:	68 14 01 00 00       	push   0x114
c001183d:	e8 45 62 ff ff       	call   c0007a87 <malloc>
c0011842:	83 c4 0c             	add    esp,0xc
c0011845:	89 c3                	mov    ebx,eax
c0011847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001184f:	50                   	push   eax
c0011850:	57                   	push   edi
c0011851:	53                   	push   ebx
c0011852:	e8 75 96 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0011857:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001185a:	83 c4 0c             	add    esp,0xc
c001185d:	0f b6 d4             	movzx  edx,ah
c0011860:	52                   	push   edx
c0011861:	0f b6 c0             	movzx  eax,al
c0011864:	50                   	push   eax
c0011865:	53                   	push   ebx
c0011866:	e8 2f 99 ff ff       	call   c000b19a <File::chfatattr(unsigned char, unsigned char)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	85 db                	test   ebx,ebx
c0011870:	74 14                	je     c0011886 <SysSetFatAttrib(regs*)+0x5b>
c0011872:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	8b 13                	mov    edx,DWORD PTR [ebx]
c001187b:	53                   	push   ebx
c001187c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001187f:	83 c4 10             	add    esp,0x10
c0011882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011886:	85 c0                	test   eax,eax
c0011888:	0f 95 c0             	setne  al
c001188b:	0f b6 c0             	movzx  eax,al
c001188e:	31 d2                	xor    edx,edx
c0011890:	f7 d8                	neg    eax
c0011892:	83 d2 00             	adc    edx,0x0
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	f7 da                	neg    edx
c001189a:	5b                   	pop    ebx
c001189b:	5e                   	pop    esi
c001189c:	5f                   	pop    edi
c001189d:	c3                   	ret    

c001189e <SysPipe(regs*)>:
c001189e:	57                   	push   edi
c001189f:	56                   	push   esi
c00118a0:	53                   	push   ebx
c00118a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118ab:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118ae:	6a 20                	push   0x20
c00118b0:	e8 d2 61 ff ff       	call   c0007a87 <malloc>
c00118b5:	89 c3                	mov    ebx,eax
c00118b7:	58                   	pop    eax
c00118b8:	5a                   	pop    edx
c00118b9:	68 00 50 00 00       	push   0x5000
c00118be:	53                   	push   ebx
c00118bf:	e8 3a 6b ff ff       	call   c00083fe <Pipe::Pipe(int)>
c00118c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c7:	e8 c6 78 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c00118cc:	89 07                	mov    DWORD PTR [edi],eax
c00118ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118d1:	e8 bc 78 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 06                	mov    DWORD PTR [esi],eax
c00118db:	31 d2                	xor    edx,edx
c00118dd:	5b                   	pop    ebx
c00118de:	31 c0                	xor    eax,eax
c00118e0:	5e                   	pop    esi
c00118e1:	5f                   	pop    edi
c00118e2:	c3                   	ret    

c00118e3 <SysGetUnixTime(regs*)>:
c00118e3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118f2:	e9 db 9f ff ff       	jmp    c000b8d2 <Clock::timeInSecondsLocal()>

c00118f7 <string_ends_with(char const*, char const*)>:
c00118f7:	57                   	push   edi
c00118f8:	56                   	push   esi
c00118f9:	53                   	push   ebx
c00118fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118fe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	53                   	push   ebx
c0011906:	e8 55 ec fe ff       	call   c0000560 <strlen>
c001190b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001190e:	89 c6                	mov    esi,eax
c0011910:	e8 4b ec fe ff       	call   c0000560 <strlen>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	31 d2                	xor    edx,edx
c001191a:	39 c6                	cmp    esi,eax
c001191c:	7d 06                	jge    c0011924 <string_ends_with(char const*, char const*)+0x2d>
c001191e:	5b                   	pop    ebx
c001191f:	89 d0                	mov    eax,edx
c0011921:	5e                   	pop    esi
c0011922:	5f                   	pop    edi
c0011923:	c3                   	ret    
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	29 c6                	sub    esi,eax
c0011929:	01 f3                	add    ebx,esi
c001192b:	57                   	push   edi
c001192c:	53                   	push   ebx
c001192d:	e8 0e ee fe ff       	call   c0000740 <strcmp>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	31 d2                	xor    edx,edx
c0011937:	85 c0                	test   eax,eax
c0011939:	5b                   	pop    ebx
c001193a:	0f 94 c2             	sete   dl
c001193d:	5e                   	pop    esi
c001193e:	89 d0                	mov    eax,edx
c0011940:	5f                   	pop    edi
c0011941:	c3                   	ret    

c0011942 <SysOpen(regs*)>:
c0011942:	56                   	push   esi
c0011943:	53                   	push   ebx
c0011944:	81 ec 04 01 00 00    	sub    esp,0x104
c001194a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011951:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011954:	85 c0                	test   eax,eax
c0011956:	0f 84 c5 01 00 00    	je     c0011b21 <SysOpen(regs*)+0x1df>
c001195c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001195f:	85 c0                	test   eax,eax
c0011961:	0f 84 ba 01 00 00    	je     c0011b21 <SysOpen(regs*)+0x1df>
c0011967:	83 ec 04             	sub    esp,0x4
c001196a:	68 1a 0d 02 c0       	push   0xc0020d1a
c001196f:	50                   	push   eax
c0011970:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011974:	56                   	push   esi
c0011975:	e8 9c 93 ff ff       	call   c000ad16 <Fs::standardiseFiles(char*, char const*, char const*)>
c001197a:	89 34 24             	mov    DWORD PTR [esp],esi
c001197d:	e8 de eb fe ff       	call   c0000560 <strlen>
c0011982:	83 c4 10             	add    esp,0x10
c0011985:	83 e8 01             	sub    eax,0x1
c0011988:	74 29                	je     c00119b3 <SysOpen(regs*)+0x71>
c001198a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001198e:	83 fa 2e             	cmp    edx,0x2e
c0011991:	74 1c                	je     c00119af <SysOpen(regs*)+0x6d>
c0011993:	83 fa 3a             	cmp    edx,0x3a
c0011996:	74 17                	je     c00119af <SysOpen(regs*)+0x6d>
c0011998:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001199c:	83 e8 01             	sub    eax,0x1
c001199f:	74 12                	je     c00119b3 <SysOpen(regs*)+0x71>
c00119a1:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119a5:	83 fa 3a             	cmp    edx,0x3a
c00119a8:	74 05                	je     c00119af <SysOpen(regs*)+0x6d>
c00119aa:	83 fa 2e             	cmp    edx,0x2e
c00119ad:	75 e9                	jne    c0011998 <SysOpen(regs*)+0x56>
c00119af:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119b3:	83 ec 08             	sub    esp,0x8
c00119b6:	68 1e 0d 02 c0       	push   0xc0020d1e
c00119bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119be:	50                   	push   eax
c00119bf:	e8 33 ff ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c00119c4:	83 c4 10             	add    esp,0x10
c00119c7:	85 c0                	test   eax,eax
c00119c9:	74 1d                	je     c00119e8 <SysOpen(regs*)+0xa6>
c00119cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119ce:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119db:	81 c4 04 01 00 00    	add    esp,0x104
c00119e1:	31 c0                	xor    eax,eax
c00119e3:	31 d2                	xor    edx,edx
c00119e5:	5b                   	pop    ebx
c00119e6:	5e                   	pop    esi
c00119e7:	c3                   	ret    
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	68 23 0d 02 c0       	push   0xc0020d23
c00119f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119f3:	50                   	push   eax
c00119f4:	e8 fe fe ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	85 c0                	test   eax,eax
c00119fe:	75 cb                	jne    c00119cb <SysOpen(regs*)+0x89>
c0011a00:	83 ec 08             	sub    esp,0x8
c0011a03:	68 1f 0d 02 c0       	push   0xc0020d1f
c0011a08:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a0b:	50                   	push   eax
c0011a0c:	e8 2f ed fe ff       	call   c0000740 <strcmp>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	85 c0                	test   eax,eax
c0011a16:	74 b3                	je     c00119cb <SysOpen(regs*)+0x89>
c0011a18:	83 ec 08             	sub    esp,0x8
c0011a1b:	68 1e 0d 02 c0       	push   0xc0020d1e
c0011a20:	56                   	push   esi
c0011a21:	e8 d1 fe ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	85 c0                	test   eax,eax
c0011a2b:	75 9e                	jne    c00119cb <SysOpen(regs*)+0x89>
c0011a2d:	83 ec 08             	sub    esp,0x8
c0011a30:	68 28 0d 02 c0       	push   0xc0020d28
c0011a35:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a38:	50                   	push   eax
c0011a39:	e8 b9 fe ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	85 c0                	test   eax,eax
c0011a43:	0f 85 eb 00 00 00    	jne    c0011b34 <SysOpen(regs*)+0x1f2>
c0011a49:	83 ec 08             	sub    esp,0x8
c0011a4c:	68 2d 0d 02 c0       	push   0xc0020d2d
c0011a51:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a54:	50                   	push   eax
c0011a55:	e8 9d fe ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	85 c0                	test   eax,eax
c0011a5f:	0f 85 cf 00 00 00    	jne    c0011b34 <SysOpen(regs*)+0x1f2>
c0011a65:	83 ec 08             	sub    esp,0x8
c0011a68:	68 29 0d 02 c0       	push   0xc0020d29
c0011a6d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a70:	51                   	push   ecx
c0011a71:	e8 ca ec fe ff       	call   c0000740 <strcmp>
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	85 c0                	test   eax,eax
c0011a7b:	0f 84 b3 00 00 00    	je     c0011b34 <SysOpen(regs*)+0x1f2>
c0011a81:	83 ec 08             	sub    esp,0x8
c0011a84:	68 28 0d 02 c0       	push   0xc0020d28
c0011a89:	56                   	push   esi
c0011a8a:	e8 68 fe ff ff       	call   c00118f7 <string_ends_with(char const*, char const*)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	85 c0                	test   eax,eax
c0011a94:	0f 85 9a 00 00 00    	jne    c0011b34 <SysOpen(regs*)+0x1f2>
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	68 14 01 00 00       	push   0x114
c0011aa2:	e8 e0 5f ff ff       	call   c0007a87 <malloc>
c0011aa7:	89 c6                	mov    esi,eax
c0011aa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aae:	83 c4 0c             	add    esp,0xc
c0011ab1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab4:	50                   	push   eax
c0011ab5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ab8:	52                   	push   edx
c0011ab9:	56                   	push   esi
c0011aba:	e8 0d 94 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	85 f6                	test   esi,esi
c0011ac4:	74 5b                	je     c0011b21 <SysOpen(regs*)+0x1df>
c0011ac6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac9:	0f b6 c2             	movzx  eax,dl
c0011acc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011acf:	89 d0                	mov    eax,edx
c0011ad1:	83 e0 01             	and    eax,0x1
c0011ad4:	f6 c2 02             	test   dl,0x2
c0011ad7:	74 03                	je     c0011adc <SysOpen(regs*)+0x19a>
c0011ad9:	83 c8 02             	or     eax,0x2
c0011adc:	f6 c2 04             	test   dl,0x4
c0011adf:	74 03                	je     c0011ae4 <SysOpen(regs*)+0x1a2>
c0011ae1:	83 c8 04             	or     eax,0x4
c0011ae4:	f6 c2 08             	test   dl,0x8
c0011ae7:	74 03                	je     c0011aec <SysOpen(regs*)+0x1aa>
c0011ae9:	83 c8 0a             	or     eax,0xa
c0011aec:	80 e2 10             	and    dl,0x10
c0011aef:	74 03                	je     c0011af4 <SysOpen(regs*)+0x1b2>
c0011af1:	83 c8 12             	or     eax,0x12
c0011af4:	83 ec 08             	sub    esp,0x8
c0011af7:	50                   	push   eax
c0011af8:	56                   	push   esi
c0011af9:	e8 8a 94 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	85 c0                	test   eax,eax
c0011b03:	75 1c                	jne    c0011b21 <SysOpen(regs*)+0x1df>
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	56                   	push   esi
c0011b09:	e8 84 76 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011b0e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	89 02                	mov    DWORD PTR [edx],eax
c0011b16:	c1 f8 1f             	sar    eax,0x1f
c0011b19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b1c:	e9 ba fe ff ff       	jmp    c00119db <SysOpen(regs*)+0x99>
c0011b21:	81 c4 04 01 00 00    	add    esp,0x104
c0011b27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b31:	5b                   	pop    ebx
c0011b32:	5e                   	pop    esi
c0011b33:	c3                   	ret    
c0011b34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b37:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b3d:	e9 92 fe ff ff       	jmp    c00119d4 <SysOpen(regs*)+0x92>

c0011b42 <KeSystemCall(regs*, void*)>:
c0011b42:	53                   	push   ebx
c0011b43:	83 ec 08             	sub    esp,0x8
c0011b46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b4d:	83 f8 3b             	cmp    eax,0x3b
c0011b50:	77 16                	ja     c0011b68 <KeSystemCall(regs*, void*)+0x26>
c0011b52:	8b 14 85 e0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf20]
c0011b59:	85 d2                	test   edx,edx
c0011b5b:	74 0b                	je     c0011b68 <KeSystemCall(regs*, void*)+0x26>
c0011b5d:	83 ec 0c             	sub    esp,0xc
c0011b60:	53                   	push   ebx
c0011b61:	ff d2                	call   edx
c0011b63:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b66:	eb 0d                	jmp    c0011b75 <KeSystemCall(regs*, void*)+0x33>
c0011b68:	52                   	push   edx
c0011b69:	52                   	push   edx
c0011b6a:	50                   	push   eax
c0011b6b:	68 32 0d 02 c0       	push   0xc0020d32
c0011b70:	e8 d4 8d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b7d:	83 c4 08             	add    esp,0x8
c0011b80:	31 d2                	xor    edx,edx
c0011b82:	5b                   	pop    ebx
c0011b83:	c3                   	ret    

c0011b84 <KeSwitchEndian16(unsigned short)>:
c0011b84:	83 ec 04             	sub    esp,0x4
c0011b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b8f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b93:	c1 f8 08             	sar    eax,0x8
c0011b96:	89 c2                	mov    edx,eax
c0011b98:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b9c:	c1 e0 08             	shl    eax,0x8
c0011b9f:	09 d0                	or     eax,edx
c0011ba1:	83 c4 04             	add    esp,0x4
c0011ba4:	c3                   	ret    
c0011ba5:	8d 76 00             	lea    esi,[esi+0x0]

c0011ba8 <KeSwitchEndian32(unsigned int)>:
c0011ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bac:	c1 e8 18             	shr    eax,0x18
c0011baf:	89 c2                	mov    edx,eax
c0011bb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb5:	c1 e0 08             	shl    eax,0x8
c0011bb8:	25 00 00 ff 00       	and    eax,0xff0000
c0011bbd:	09 c2                	or     edx,eax
c0011bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc3:	c1 e8 08             	shr    eax,0x8
c0011bc6:	25 00 ff 00 00       	and    eax,0xff00
c0011bcb:	09 c2                	or     edx,eax
c0011bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd1:	c1 e0 18             	shl    eax,0x18
c0011bd4:	09 d0                	or     eax,edx
c0011bd6:	c3                   	ret    
c0011bd7:	90                   	nop

c0011bd8 <EthernetCRC32(unsigned char*, int)>:
c0011bd8:	83 ec 10             	sub    esp,0x10
c0011bdb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011be0:	75 0a                	jne    c0011bec <EthernetCRC32(unsigned char*, int)+0x14>
c0011be2:	b8 00 00 00 00       	mov    eax,0x0
c0011be7:	e9 8c 00 00 00       	jmp    c0011c78 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bf1:	7f 09                	jg     c0011bfc <EthernetCRC32(unsigned char*, int)+0x24>
c0011bf3:	b8 00 00 00 00       	mov    eax,0x0
c0011bf8:	eb 7e                	jmp    c0011c78 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bfa:	66 90                	xchg   ax,ax
c0011bfc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c10:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c14:	7d 5a                	jge    c0011c70 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c1e:	01 d0                	add    eax,edx
c0011c20:	8a 00                	mov    al,BYTE PTR [eax]
c0011c22:	0f b6 c0             	movzx  eax,al
c0011c25:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c31:	8d 76 00             	lea    esi,[esi+0x0]
c0011c34:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c39:	7f 2d                	jg     c0011c68 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c3f:	83 e0 01             	and    eax,0x1
c0011c42:	74 10                	je     c0011c54 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c48:	d1 e8                	shr    eax,1
c0011c4a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c4f:	eb 0b                	jmp    c0011c5c <EthernetCRC32(unsigned char*, int)+0x84>
c0011c51:	8d 76 00             	lea    esi,[esi+0x0]
c0011c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c58:	d1 e8                	shr    eax,1
c0011c5a:	66 90                	xchg   ax,ax
c0011c5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c60:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c65:	eb cd                	jmp    c0011c34 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c67:	90                   	nop
c0011c68:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c6d:	eb 9d                	jmp    c0011c0c <EthernetCRC32(unsigned char*, int)+0x34>
c0011c6f:	90                   	nop
c0011c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c74:	f7 d0                	not    eax
c0011c76:	66 90                	xchg   ax,ax
c0011c78:	83 c4 10             	add    esp,0x10
c0011c7b:	c3                   	ret    

c0011c7c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c7c:	83 ec 2c             	sub    esp,0x2c
c0011c7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c83:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c97:	0f b7 c0             	movzx  eax,ax
c0011c9a:	3d 06 08 00 00       	cmp    eax,0x806
c0011c9f:	75 13                	jne    c0011cb4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011ca1:	83 ec 0c             	sub    esp,0xc
c0011ca4:	68 46 0d 02 c0       	push   0xc0020d46
c0011ca9:	e8 9b 8c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	eb 25                	jmp    c0011cd8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cb3:	90                   	nop
c0011cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cbb:	0f b7 c0             	movzx  eax,ax
c0011cbe:	3d 00 08 00 00       	cmp    eax,0x800
c0011cc3:	75 13                	jne    c0011cd8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	68 5c 0d 02 c0       	push   0xc0020d5c
c0011ccd:	e8 77 8c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd8:	90                   	nop
c0011cd9:	83 c4 2c             	add    esp,0x2c
c0011cdc:	c3                   	ret    

c0011cdd <CmOpen(char const*)>:
c0011cdd:	57                   	push   edi
c0011cde:	56                   	push   esi
c0011cdf:	53                   	push   ebx
c0011ce0:	83 ec 1c             	sub    esp,0x1c
c0011ce3:	6a 30                	push   0x30
c0011ce5:	e8 9d 5d ff ff       	call   c0007a87 <malloc>
c0011cea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cf1:	89 c3                	mov    ebx,eax
c0011cf3:	e8 8f 5d ff ff       	call   c0007a87 <malloc>
c0011cf8:	83 c4 0c             	add    esp,0xc
c0011cfb:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d05:	89 c6                	mov    esi,eax
c0011d07:	50                   	push   eax
c0011d08:	e8 bf 91 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0011d0d:	83 c4 0c             	add    esp,0xc
c0011d10:	89 33                	mov    DWORD PTR [ebx],esi
c0011d12:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d16:	50                   	push   eax
c0011d17:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d1b:	50                   	push   eax
c0011d1c:	56                   	push   esi
c0011d1d:	e8 12 95 ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0011d22:	5a                   	pop    edx
c0011d23:	59                   	pop    ecx
c0011d24:	6a 01                	push   0x1
c0011d26:	ff 33                	push   DWORD PTR [ebx]
c0011d28:	e8 5b 92 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0011d2d:	5e                   	pop    esi
c0011d2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d32:	e8 50 5d ff ff       	call   c0007a87 <malloc>
c0011d37:	5a                   	pop    edx
c0011d38:	89 c7                	mov    edi,eax
c0011d3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d3c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d40:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d42:	56                   	push   esi
c0011d43:	57                   	push   edi
c0011d44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d4c:	50                   	push   eax
c0011d4d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d50:	83 c4 14             	add    esp,0x14
c0011d53:	ff 33                	push   DWORD PTR [ebx]
c0011d55:	e8 8c 92 ff ff       	call   c000afe6 <File::close()>
c0011d5a:	59                   	pop    ecx
c0011d5b:	58                   	pop    eax
c0011d5c:	6a 13                	push   0x13
c0011d5e:	ff 33                	push   DWORD PTR [ebx]
c0011d60:	e8 23 92 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0011d65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d69:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d6c:	57                   	push   edi
c0011d6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d75:	50                   	push   eax
c0011d76:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d79:	83 c4 14             	add    esp,0x14
c0011d7c:	57                   	push   edi
c0011d7d:	e8 15 5d ff ff       	call   c0007a97 <free>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d88:	75 10                	jne    c0011d9a <CmOpen(char const*)+0xbd>
c0011d8a:	83 ec 0c             	sub    esp,0xc
c0011d8d:	68 71 0d 02 c0       	push   0xc0020d71
c0011d92:	e8 a0 ea ff ff       	call   c0010837 <KePanic(char const*)>
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	50                   	push   eax
c0011d9b:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d9e:	6a 00                	push   0x0
c0011da0:	6a 00                	push   0x0
c0011da2:	ff 33                	push   DWORD PTR [ebx]
c0011da4:	e8 9d 92 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011da9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dab:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dad:	89 34 24             	mov    DWORD PTR [esp],esi
c0011db0:	57                   	push   edi
c0011db1:	6a 00                	push   0x0
c0011db3:	6a 2b                	push   0x2b
c0011db5:	50                   	push   eax
c0011db6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011db9:	83 c4 1c             	add    esp,0x1c
c0011dbc:	6a 00                	push   0x0
c0011dbe:	6a 00                	push   0x0
c0011dc0:	ff 33                	push   DWORD PTR [ebx]
c0011dc2:	e8 7f 92 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011dc7:	83 c4 0c             	add    esp,0xc
c0011dca:	6a 08                	push   0x8
c0011dcc:	68 82 0d 02 c0       	push   0xc0020d82
c0011dd1:	57                   	push   edi
c0011dd2:	e8 a9 e5 fe ff       	call   c0000380 <memcmp>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	85 c0                	test   eax,eax
c0011ddc:	74 10                	je     c0011dee <CmOpen(char const*)+0x111>
c0011dde:	83 ec 0c             	sub    esp,0xc
c0011de1:	68 8b 0d 02 c0       	push   0xc0020d8b
c0011de6:	e8 4c ea ff ff       	call   c0010837 <KePanic(char const*)>
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011df2:	83 c4 10             	add    esp,0x10
c0011df5:	89 d8                	mov    eax,ebx
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	c3                   	ret    

c0011dfb <CmClose(Reghive_Tag*)>:
c0011dfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dff:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e03:	74 0b                	je     c0011e10 <CmClose(Reghive_Tag*)+0x15>
c0011e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e0b:	e9 d6 91 ff ff       	jmp    c000afe6 <File::close()>
c0011e10:	c3                   	ret    

c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e11:	53                   	push   ebx
c0011e12:	83 ec 18             	sub    esp,0x18
c0011e15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e19:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e1d:	74 29                	je     c0011e48 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e1f:	50                   	push   eax
c0011e20:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e25:	99                   	cdq    
c0011e26:	52                   	push   edx
c0011e27:	50                   	push   eax
c0011e28:	ff 33                	push   DWORD PTR [ebx]
c0011e2a:	e8 17 92 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e31:	5a                   	pop    edx
c0011e32:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e34:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e38:	51                   	push   ecx
c0011e39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e3d:	6a 00                	push   0x0
c0011e3f:	6a 2b                	push   0x2b
c0011e41:	50                   	push   eax
c0011e42:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e45:	83 c4 20             	add    esp,0x20
c0011e48:	83 c4 18             	add    esp,0x18
c0011e4b:	5b                   	pop    ebx
c0011e4c:	c3                   	ret    

c0011e4d <CmGetString(Reghive_Tag*, int, char*)>:
c0011e4d:	55                   	push   ebp
c0011e4e:	57                   	push   edi
c0011e4f:	56                   	push   esi
c0011e50:	53                   	push   ebx
c0011e51:	31 db                	xor    ebx,ebx
c0011e53:	83 ec 70             	sub    esp,0x70
c0011e56:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e5a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e61:	50                   	push   eax
c0011e62:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e69:	55                   	push   ebp
c0011e6a:	e8 a2 ff ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e77:	c1 e0 08             	shl    eax,0x8
c0011e7a:	89 c2                	mov    edx,eax
c0011e7c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e81:	09 d0                	or     eax,edx
c0011e83:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e88:	c1 e0 08             	shl    eax,0x8
c0011e8b:	09 d0                	or     eax,edx
c0011e8d:	74 25                	je     c0011eb4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e8f:	6b fb 0d             	imul   edi,ebx,0xd
c0011e92:	52                   	push   edx
c0011e93:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e97:	52                   	push   edx
c0011e98:	50                   	push   eax
c0011e99:	55                   	push   ebp
c0011e9a:	e8 72 ff ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e9f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011ea3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011eaa:	b9 27 00 00 00       	mov    ecx,0x27
c0011eaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	83 c3 03             	add    ebx,0x3
c0011eb7:	83 fb 15             	cmp    ebx,0x15
c0011eba:	75 b6                	jne    c0011e72 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ebc:	83 c4 6c             	add    esp,0x6c
c0011ebf:	5b                   	pop    ebx
c0011ec0:	5e                   	pop    esi
c0011ec1:	5f                   	pop    edi
c0011ec2:	5d                   	pop    ebp
c0011ec3:	c3                   	ret    

c0011ec4 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ec4:	83 ec 40             	sub    esp,0x40
c0011ec7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ecb:	50                   	push   eax
c0011ecc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ed0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ed4:	e8 38 ff ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	83 c8 ff             	or     eax,0xffffffff
c0011edf:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ee4:	75 19                	jne    c0011eff <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ee6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011eeb:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ef0:	c1 e0 08             	shl    eax,0x8
c0011ef3:	09 c2                	or     edx,eax
c0011ef5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011efa:	c1 e0 10             	shl    eax,0x10
c0011efd:	09 d0                	or     eax,edx
c0011eff:	83 c4 3c             	add    esp,0x3c
c0011f02:	c3                   	ret    

c0011f03 <CmGetNext(Reghive_Tag*, int)>:
c0011f03:	83 ec 40             	sub    esp,0x40
c0011f06:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f0a:	50                   	push   eax
c0011f0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f13:	e8 f9 fe ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f18:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f1d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f22:	c1 e0 08             	shl    eax,0x8
c0011f25:	09 c2                	or     edx,eax
c0011f27:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f2c:	c1 e0 10             	shl    eax,0x10
c0011f2f:	83 c4 4c             	add    esp,0x4c
c0011f32:	09 d0                	or     eax,edx
c0011f34:	c3                   	ret    

c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f35:	53                   	push   ebx
c0011f36:	83 ec 18             	sub    esp,0x18
c0011f39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f3d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f41:	74 29                	je     c0011f6c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f43:	50                   	push   eax
c0011f44:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f49:	99                   	cdq    
c0011f4a:	52                   	push   edx
c0011f4b:	50                   	push   eax
c0011f4c:	ff 33                	push   DWORD PTR [ebx]
c0011f4e:	e8 f3 90 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011f53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f55:	5a                   	pop    edx
c0011f56:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f58:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f5c:	51                   	push   ecx
c0011f5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f61:	6a 00                	push   0x0
c0011f63:	6a 2b                	push   0x2b
c0011f65:	50                   	push   eax
c0011f66:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f69:	83 c4 20             	add    esp,0x20
c0011f6c:	83 c4 18             	add    esp,0x18
c0011f6f:	5b                   	pop    ebx
c0011f70:	c3                   	ret    

c0011f71 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f71:	53                   	push   ebx
c0011f72:	83 ec 3c             	sub    esp,0x3c
c0011f75:	6a 2b                	push   0x2b
c0011f77:	6a 00                	push   0x0
c0011f79:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f7d:	53                   	push   ebx
c0011f7e:	e8 5d e5 fe ff       	call   c00004e0 <memset>
c0011f83:	83 c4 0c             	add    esp,0xc
c0011f86:	53                   	push   ebx
c0011f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f8f:	e8 a1 ff ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f94:	83 c4 48             	add    esp,0x48
c0011f97:	5b                   	pop    ebx
c0011f98:	c3                   	ret    

c0011f99 <CmUpdateHeader(Reghive_Tag*)>:
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fa4:	74 10                	je     c0011fb6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fa6:	52                   	push   edx
c0011fa7:	8d 50 05             	lea    edx,[eax+0x5]
c0011faa:	52                   	push   edx
c0011fab:	6a 00                	push   0x0
c0011fad:	50                   	push   eax
c0011fae:	e8 82 ff ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	c3                   	ret    

c0011fba <CmExpand(Reghive_Tag*, int)>:
c0011fba:	57                   	push   edi
c0011fbb:	56                   	push   esi
c0011fbc:	83 ce ff             	or     esi,0xffffffff
c0011fbf:	53                   	push   ebx
c0011fc0:	83 ec 30             	sub    esp,0x30
c0011fc3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fc7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fcb:	74 5f                	je     c001202c <CmExpand(Reghive_Tag*, int)+0x72>
c0011fcd:	50                   	push   eax
c0011fce:	31 d2                	xor    edx,edx
c0011fd0:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fd4:	52                   	push   edx
c0011fd5:	31 f6                	xor    esi,esi
c0011fd7:	50                   	push   eax
c0011fd8:	ff 33                	push   DWORD PTR [ebx]
c0011fda:	e8 67 90 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0011fdf:	83 c4 0c             	add    esp,0xc
c0011fe2:	6a 2b                	push   0x2b
c0011fe4:	6a 00                	push   0x0
c0011fe6:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011fea:	57                   	push   edi
c0011feb:	e8 f0 e4 fe ff       	call   c00004e0 <memset>
c0011ff0:	83 c4 10             	add    esp,0x10
c0011ff3:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011ff7:	7d 1b                	jge    c0012014 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011ff9:	83 ec 0c             	sub    esp,0xc
c0011ffc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ffe:	46                   	inc    esi
c0011fff:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012003:	8b 10                	mov    edx,DWORD PTR [eax]
c0012005:	51                   	push   ecx
c0012006:	57                   	push   edi
c0012007:	6a 00                	push   0x0
c0012009:	6a 2b                	push   0x2b
c001200b:	50                   	push   eax
c001200c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001200f:	83 c4 20             	add    esp,0x20
c0012012:	eb df                	jmp    c0011ff3 <CmExpand(Reghive_Tag*, int)+0x39>
c0012014:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012018:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001201b:	83 ec 0c             	sub    esp,0xc
c001201e:	01 f2                	add    edx,esi
c0012020:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012023:	53                   	push   ebx
c0012024:	e8 70 ff ff ff       	call   c0011f99 <CmUpdateHeader(Reghive_Tag*)>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	83 c4 30             	add    esp,0x30
c001202f:	89 f0                	mov    eax,esi
c0012031:	5b                   	pop    ebx
c0012032:	5e                   	pop    esi
c0012033:	5f                   	pop    edi
c0012034:	c3                   	ret    

c0012035 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012035:	55                   	push   ebp
c0012036:	57                   	push   edi
c0012037:	56                   	push   esi
c0012038:	53                   	push   ebx
c0012039:	83 cb ff             	or     ebx,0xffffffff
c001203c:	83 ec 1c             	sub    esp,0x1c
c001203f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012043:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012047:	74 68                	je     c00120b1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012049:	51                   	push   ecx
c001204a:	be 2b 00 00 00       	mov    esi,0x2b
c001204f:	6a 00                	push   0x0
c0012051:	31 ff                	xor    edi,edi
c0012053:	6a 00                	push   0x0
c0012055:	31 db                	xor    ebx,ebx
c0012057:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001205a:	e8 e7 8f ff ff       	call   c000b046 <File::seek(unsigned long long)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012065:	76 3b                	jbe    c00120a2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012067:	83 ec 0c             	sub    esp,0xc
c001206a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001206d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012071:	8b 10                	mov    edx,DWORD PTR [eax]
c0012073:	51                   	push   ecx
c0012074:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012078:	51                   	push   ecx
c0012079:	6a 00                	push   0x0
c001207b:	6a 01                	push   0x1
c001207d:	50                   	push   eax
c001207e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012081:	83 c4 20             	add    esp,0x20
c0012084:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012089:	74 26                	je     c00120b1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001208b:	52                   	push   edx
c001208c:	43                   	inc    ebx
c001208d:	57                   	push   edi
c001208e:	56                   	push   esi
c001208f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012092:	e8 af 8f ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0012097:	83 c6 2b             	add    esi,0x2b
c001209a:	83 d7 00             	adc    edi,0x0
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	eb c0                	jmp    c0012062 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00120a2:	50                   	push   eax
c00120a3:	50                   	push   eax
c00120a4:	6a 40                	push   0x40
c00120a6:	55                   	push   ebp
c00120a7:	e8 0e ff ff ff       	call   c0011fba <CmExpand(Reghive_Tag*, int)>
c00120ac:	83 c4 10             	add    esp,0x10
c00120af:	89 c3                	mov    ebx,eax
c00120b1:	83 c4 1c             	add    esp,0x1c
c00120b4:	89 d8                	mov    eax,ebx
c00120b6:	5b                   	pop    ebx
c00120b7:	5e                   	pop    esi
c00120b8:	5f                   	pop    edi
c00120b9:	5d                   	pop    ebp
c00120ba:	c3                   	ret    

c00120bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120bb:	55                   	push   ebp
c00120bc:	57                   	push   edi
c00120bd:	56                   	push   esi
c00120be:	53                   	push   ebx
c00120bf:	81 ec 88 00 00 00    	sub    esp,0x88
c00120c5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120cc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120d3:	e8 5d ff ff ff       	call   c0012035 <CmFindUnusedExtent(Reghive_Tag*)>
c00120d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120dc:	83 c4 0c             	add    esp,0xc
c00120df:	6a 2b                	push   0x2b
c00120e1:	6a 00                	push   0x0
c00120e3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120e7:	55                   	push   ebp
c00120e8:	e8 f3 e3 fe ff       	call   c00004e0 <memset>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	85 db                	test   ebx,ebx
c00120f2:	74 12                	je     c0012106 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120f4:	51                   	push   ecx
c00120f5:	55                   	push   ebp
c00120f6:	53                   	push   ebx
c00120f7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120fe:	e8 0e fd ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001210a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012111:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012118:	85 db                	test   ebx,ebx
c001211a:	74 49                	je     c0012165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001211c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012121:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012126:	c1 e0 08             	shl    eax,0x8
c0012129:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001212d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012133:	09 c8                	or     eax,ecx
c0012135:	74 11                	je     c0012148 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012137:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001213b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001213f:	c1 e8 10             	shr    eax,0x10
c0012142:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012146:	eb 0f                	jmp    c0012157 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012148:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001214d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012152:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012157:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001215b:	c1 ea 08             	shr    edx,0x8
c001215e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012163:	eb 0f                	jmp    c0012174 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012165:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001216a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001216f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012174:	52                   	push   edx
c0012175:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012179:	50                   	push   eax
c001217a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001217e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012185:	e8 ab fd ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001218a:	83 c4 10             	add    esp,0x10
c001218d:	85 db                	test   ebx,ebx
c001218f:	74 12                	je     c00121a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012191:	50                   	push   eax
c0012192:	55                   	push   ebp
c0012193:	53                   	push   ebx
c0012194:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001219b:	e8 95 fd ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121a0:	83 c4 10             	add    esp,0x10
c00121a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a7:	83 c4 7c             	add    esp,0x7c
c00121aa:	5b                   	pop    ebx
c00121ab:	5e                   	pop    esi
c00121ac:	5f                   	pop    edi
c00121ad:	5d                   	pop    ebp
c00121ae:	c3                   	ret    

c00121af <CmSetString(Reghive_Tag*, int, char const*)>:
c00121af:	55                   	push   ebp
c00121b0:	57                   	push   edi
c00121b1:	56                   	push   esi
c00121b2:	53                   	push   ebx
c00121b3:	bb 27 00 00 00       	mov    ebx,0x27
c00121b8:	81 ec 88 00 00 00    	sub    esp,0x88
c00121be:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121c5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121cc:	e8 8f e3 fe ff       	call   c0000560 <strlen>
c00121d1:	8d 48 26             	lea    ecx,[eax+0x26]
c00121d4:	89 c8                	mov    eax,ecx
c00121d6:	99                   	cdq    
c00121d7:	f7 fb                	idiv   ebx
c00121d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121e6:	7e 10                	jle    c00121f8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121e8:	83 ec 0c             	sub    esp,0xc
c00121eb:	68 9c 0d 02 c0       	push   0xc0020d9c
c00121f0:	e8 42 e6 ff ff       	call   c0010837 <KePanic(char const*)>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	50                   	push   eax
c00121f9:	31 ff                	xor    edi,edi
c00121fb:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121ff:	53                   	push   ebx
c0012200:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012207:	56                   	push   esi
c0012208:	e8 04 fc ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012214:	89 d0                	mov    eax,edx
c0012216:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001221a:	c1 e0 08             	shl    eax,0x8
c001221d:	09 c2                	or     edx,eax
c001221f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012223:	c1 e2 08             	shl    edx,0x8
c0012226:	09 c2                	or     edx,eax
c0012228:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001222c:	7e 76                	jle    c00122a4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001222e:	85 d2                	test   edx,edx
c0012230:	75 25                	jne    c0012257 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012232:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012236:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001223b:	50                   	push   eax
c001223c:	6a 00                	push   0x0
c001223e:	6a 00                	push   0x0
c0012240:	56                   	push   esi
c0012241:	e8 75 fe ff ff       	call   c00120bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012246:	89 c2                	mov    edx,eax
c0012248:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001224b:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	c1 f8 10             	sar    eax,0x10
c0012254:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012257:	55                   	push   ebp
c0012258:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001225c:	55                   	push   ebp
c001225d:	52                   	push   edx
c001225e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012262:	56                   	push   esi
c0012263:	e8 a9 fb ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012268:	83 c4 0c             	add    esp,0xc
c001226b:	6a 27                	push   0x27
c001226d:	6a 00                	push   0x0
c001226f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012273:	51                   	push   ecx
c0012274:	e8 67 e2 fe ff       	call   c00004e0 <memset>
c0012279:	6b c7 27             	imul   eax,edi,0x27
c001227c:	83 c4 0c             	add    esp,0xc
c001227f:	6a 27                	push   0x27
c0012281:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012288:	50                   	push   eax
c0012289:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001228d:	51                   	push   ecx
c001228e:	e8 dd e3 fe ff       	call   c0000670 <strncpy>
c0012293:	83 c4 0c             	add    esp,0xc
c0012296:	55                   	push   ebp
c0012297:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001229b:	52                   	push   edx
c001229c:	56                   	push   esi
c001229d:	e8 93 fc ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122a2:	eb 19                	jmp    c00122bd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00122a4:	85 d2                	test   edx,edx
c00122a6:	74 18                	je     c00122c0 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00122a8:	51                   	push   ecx
c00122a9:	51                   	push   ecx
c00122aa:	52                   	push   edx
c00122ab:	56                   	push   esi
c00122ac:	e8 c0 fc ff ff       	call   c0011f71 <CmFreeExtent(Reghive_Tag*, int)>
c00122b1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122b5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122b9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	47                   	inc    edi
c00122c1:	83 c3 03             	add    ebx,0x3
c00122c4:	83 ff 07             	cmp    edi,0x7
c00122c7:	0f 85 43 ff ff ff    	jne    c0012210 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122cd:	50                   	push   eax
c00122ce:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122d2:	50                   	push   eax
c00122d3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122da:	56                   	push   esi
c00122db:	e8 55 fc ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122e0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122e6:	5b                   	pop    ebx
c00122e7:	5e                   	pop    esi
c00122e8:	5f                   	pop    edi
c00122e9:	5d                   	pop    ebp
c00122ea:	c3                   	ret    

c00122eb <CmGetMatch(char*, char*, bool, bool*)>:
c00122eb:	56                   	push   esi
c00122ec:	53                   	push   ebx
c00122ed:	50                   	push   eax
c00122ee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122f2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122f7:	74 25                	je     c001231e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122f9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122fc:	31 db                	xor    ebx,ebx
c00122fe:	50                   	push   eax
c00122ff:	50                   	push   eax
c0012300:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c0012307:	50                   	push   eax
c0012308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001230c:	e8 2f e4 fe ff       	call   c0000740 <strcmp>
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	85 c0                	test   eax,eax
c0012316:	74 2e                	je     c0012346 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012318:	43                   	inc    ebx
c0012319:	83 fb 3f             	cmp    ebx,0x3f
c001231c:	75 e0                	jne    c00122fe <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001231e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012321:	31 db                	xor    ebx,ebx
c0012323:	51                   	push   ecx
c0012324:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c001232b:	51                   	push   ecx
c001232c:	50                   	push   eax
c001232d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012331:	e8 0a e4 fe ff       	call   c0000740 <strcmp>
c0012336:	83 c4 10             	add    esp,0x10
c0012339:	85 c0                	test   eax,eax
c001233b:	74 09                	je     c0012346 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001233d:	43                   	inc    ebx
c001233e:	83 fb 3f             	cmp    ebx,0x3f
c0012341:	75 e0                	jne    c0012323 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012343:	83 cb ff             	or     ebx,0xffffffff
c0012346:	5a                   	pop    edx
c0012347:	89 d8                	mov    eax,ebx
c0012349:	5b                   	pop    ebx
c001234a:	5e                   	pop    esi
c001234b:	c3                   	ret    

c001234c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001234c:	55                   	push   ebp
c001234d:	31 c0                	xor    eax,eax
c001234f:	57                   	push   edi
c0012350:	56                   	push   esi
c0012351:	53                   	push   ebx
c0012352:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012356:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001235a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001235e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012362:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012364:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012367:	83 fd 1f             	cmp    ebp,0x1f
c001236a:	7f 0b                	jg     c0012377 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001236c:	0f b6 c2             	movzx  eax,dl
c001236f:	d3 e0                	shl    eax,cl
c0012371:	09 07                	or     DWORD PTR [edi],eax
c0012373:	b0 01                	mov    al,0x1
c0012375:	01 33                	add    DWORD PTR [ebx],esi
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	5f                   	pop    edi
c001237a:	5d                   	pop    ebp
c001237b:	c3                   	ret    

c001237c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001237c:	57                   	push   edi
c001237d:	56                   	push   esi
c001237e:	53                   	push   ebx
c001237f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012383:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012387:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001238b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001238f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012391:	7c 17                	jl     c00123aa <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012393:	b8 01 00 00 00       	mov    eax,0x1
c0012398:	8b 17                	mov    edx,DWORD PTR [edi]
c001239a:	d3 e0                	shl    eax,cl
c001239c:	48                   	dec    eax
c001239d:	21 d0                	and    eax,edx
c001239f:	d3 ea                	shr    edx,cl
c00123a1:	89 17                	mov    DWORD PTR [edi],edx
c00123a3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00123a5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123a8:	eb 05                	jmp    c00123af <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123ad:	31 c0                	xor    eax,eax
c00123af:	5b                   	pop    ebx
c00123b0:	5e                   	pop    esi
c00123b1:	5f                   	pop    edi
c00123b2:	c3                   	ret    

c00123b3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123b3:	83 ec 40             	sub    esp,0x40
c00123b6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123ba:	50                   	push   eax
c00123bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123c3:	e8 49 fa ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123cc:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123d0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123d4:	89 10                	mov    DWORD PTR [eax],edx
c00123d6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123d9:	83 c4 4c             	add    esp,0x4c
c00123dc:	c3                   	ret    

c00123dd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123dd:	55                   	push   ebp
c00123de:	57                   	push   edi
c00123df:	56                   	push   esi
c00123e0:	53                   	push   ebx
c00123e1:	83 ec 40             	sub    esp,0x40
c00123e4:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123e8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123ec:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123f0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123f4:	53                   	push   ebx
c00123f5:	56                   	push   esi
c00123f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123fa:	e8 12 fa ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123ff:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012403:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012407:	83 c4 0c             	add    esp,0xc
c001240a:	53                   	push   ebx
c001240b:	56                   	push   esi
c001240c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012410:	e8 20 fb ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012415:	83 c4 4c             	add    esp,0x4c
c0012418:	5b                   	pop    ebx
c0012419:	5e                   	pop    esi
c001241a:	5f                   	pop    edi
c001241b:	5d                   	pop    ebp
c001241c:	c3                   	ret    

c001241d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001241d:	55                   	push   ebp
c001241e:	57                   	push   edi
c001241f:	56                   	push   esi
c0012420:	31 f6                	xor    esi,esi
c0012422:	53                   	push   ebx
c0012423:	31 db                	xor    ebx,ebx
c0012425:	83 ec 40             	sub    esp,0x40
c0012428:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012430:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012438:	6a 12                	push   0x12
c001243a:	68 ee 00 00 00       	push   0xee
c001243f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012443:	e8 98 e0 fe ff       	call   c00004e0 <memset>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001244f:	6a 08                	push   0x8
c0012451:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012455:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012459:	50                   	push   eax
c001245a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001245e:	55                   	push   ebp
c001245f:	57                   	push   edi
c0012460:	e8 e7 fe ff ff       	call   c001234c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001246c:	50                   	push   eax
c001246d:	6a 06                	push   0x6
c001246f:	55                   	push   ebp
c0012470:	57                   	push   edi
c0012471:	e8 06 ff ff ff       	call   c001237c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001247e:	74 07                	je     c0012487 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012480:	46                   	inc    esi
c0012481:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012485:	eb e1                	jmp    c0012468 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012487:	43                   	inc    ebx
c0012488:	83 fb 12             	cmp    ebx,0x12
c001248b:	75 c2                	jne    c001244f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001248d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012491:	31 db                	xor    ebx,ebx
c0012493:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012496:	50                   	push   eax
c0012497:	50                   	push   eax
c0012498:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001249d:	43                   	inc    ebx
c001249e:	8d 04 85 e0 21 02 c0 	lea    eax,[eax*4-0x3ffdde20]
c00124a5:	50                   	push   eax
c00124a6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124aa:	e8 81 e3 fe ff       	call   c0000830 <strcat>
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	83 fb 18             	cmp    ebx,0x18
c00124b5:	75 df                	jne    c0012496 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124b7:	83 c4 3c             	add    esp,0x3c
c00124ba:	31 c0                	xor    eax,eax
c00124bc:	5b                   	pop    ebx
c00124bd:	5e                   	pop    esi
c00124be:	5f                   	pop    edi
c00124bf:	5d                   	pop    ebp
c00124c0:	c3                   	ret    

c00124c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124c1:	83 ec 40             	sub    esp,0x40
c00124c4:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124c8:	50                   	push   eax
c00124c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d1:	e8 3b f9 ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124d6:	58                   	pop    eax
c00124d7:	5a                   	pop    edx
c00124d8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124dc:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124e0:	50                   	push   eax
c00124e1:	e8 37 ff ff ff       	call   c001241d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124e6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124eb:	83 c4 4c             	add    esp,0x4c
c00124ee:	c3                   	ret    

c00124ef <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124ef:	55                   	push   ebp
c00124f0:	57                   	push   edi
c00124f1:	56                   	push   esi
c00124f2:	53                   	push   ebx
c00124f3:	31 db                	xor    ebx,ebx
c00124f5:	83 ec 70             	sub    esp,0x70
c00124f8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124ff:	6a 30                	push   0x30
c0012501:	6a 00                	push   0x0
c0012503:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012507:	56                   	push   esi
c0012508:	e8 d3 df fe ff       	call   c00004e0 <memset>
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	83 ec 0c             	sub    esp,0xc
c0012513:	57                   	push   edi
c0012514:	e8 47 e0 fe ff       	call   c0000560 <strlen>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	39 d8                	cmp    eax,ebx
c001251e:	76 16                	jbe    c0012536 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012527:	50                   	push   eax
c0012528:	e8 f3 e3 fe ff       	call   c0000920 <toupper>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012533:	43                   	inc    ebx
c0012534:	eb da                	jmp    c0012510 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012536:	52                   	push   edx
c0012537:	31 db                	xor    ebx,ebx
c0012539:	6a 18                	push   0x18
c001253b:	31 ff                	xor    edi,edi
c001253d:	6a 3f                	push   0x3f
c001253f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012543:	50                   	push   eax
c0012544:	e8 97 df fe ff       	call   c00004e0 <memset>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012550:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012554:	84 c0                	test   al,al
c0012556:	0f 84 af 00 00 00    	je     c001260b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001255c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001255f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012563:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012568:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001256c:	8a 54 2c 30          	mov    dl,BYTE PTR [esp+ebp*1+0x30]
c0012570:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012575:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c0012579:	83 ec 0c             	sub    esp,0xc
c001257c:	56                   	push   esi
c001257d:	e8 de df fe ff       	call   c0000560 <strlen>
c0012582:	83 c4 10             	add    esp,0x10
c0012585:	85 c0                	test   eax,eax
c0012587:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001258b:	74 0b                	je     c0012598 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001258d:	50                   	push   eax
c001258e:	6a 01                	push   0x1
c0012590:	56                   	push   esi
c0012591:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012595:	50                   	push   eax
c0012596:	eb 0a                	jmp    c00125a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012598:	50                   	push   eax
c0012599:	6a 00                	push   0x0
c001259b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001259f:	50                   	push   eax
c00125a0:	6a 00                	push   0x0
c00125a2:	e8 44 fd ff ff       	call   c00122eb <CmGetMatch(char*, char*, bool, bool*)>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	83 f8 ff             	cmp    eax,0xffffffff
c00125ad:	75 1a                	jne    c00125c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125af:	83 ec 0c             	sub    esp,0xc
c00125b2:	68 b1 0d 02 c0       	push   0xc0020db1
c00125b7:	e8 7b e2 ff ff       	call   c0010837 <KePanic(char const*)>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	b8 02 00 00 00       	mov    eax,0x2
c00125c4:	e9 bb 00 00 00       	jmp    c0012684 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125c9:	83 ff 18             	cmp    edi,0x18
c00125cc:	75 1a                	jne    c00125e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125ce:	83 ec 0c             	sub    esp,0xc
c00125d1:	68 c6 0d 02 c0       	push   0xc0020dc6
c00125d6:	e8 5c e2 ff ff       	call   c0010837 <KePanic(char const*)>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	b8 01 00 00 00       	mov    eax,0x1
c00125e3:	e9 9c 00 00 00       	jmp    c0012684 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125e8:	47                   	inc    edi
c00125e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125ee:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125f2:	0f 45 dd             	cmovne ebx,ebp
c00125f5:	83 ec 0c             	sub    esp,0xc
c00125f8:	56                   	push   esi
c00125f9:	e8 62 df fe ff       	call   c0000560 <strlen>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	85 c0                	test   eax,eax
c0012603:	74 06                	je     c001260b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012605:	43                   	inc    ebx
c0012606:	e9 41 ff ff ff       	jmp    c001254c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001260b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012613:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001261b:	50                   	push   eax
c001261c:	31 db                	xor    ebx,ebx
c001261e:	6a 12                	push   0x12
c0012620:	31 ff                	xor    edi,edi
c0012622:	68 ee 00 00 00       	push   0xee
c0012627:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001262e:	e8 ad de fe ff       	call   c00004e0 <memset>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	83 fb 17             	cmp    ebx,0x17
c0012639:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001263d:	7e 26                	jle    c0012665 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001263f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012643:	50                   	push   eax
c0012644:	6a 08                	push   0x8
c0012646:	55                   	push   ebp
c0012647:	56                   	push   esi
c0012648:	e8 2f fd ff ff       	call   c001237c <CmGetShift(unsigned int*, int*, int, bool*)>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012655:	74 26                	je     c001267d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012657:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001265e:	4b                   	dec    ebx
c001265f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012662:	47                   	inc    edi
c0012663:	eb 1c                	jmp    c0012681 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012665:	6a 06                	push   0x6
c0012667:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001266c:	50                   	push   eax
c001266d:	55                   	push   ebp
c001266e:	56                   	push   esi
c001266f:	e8 d8 fc ff ff       	call   c001234c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	84 c0                	test   al,al
c0012679:	75 06                	jne    c0012681 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001267b:	eb c2                	jmp    c001263f <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001267d:	31 c0                	xor    eax,eax
c001267f:	eb 03                	jmp    c0012684 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012681:	43                   	inc    ebx
c0012682:	eb b2                	jmp    c0012636 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012684:	83 c4 6c             	add    esp,0x6c
c0012687:	5b                   	pop    ebx
c0012688:	5e                   	pop    esi
c0012689:	5f                   	pop    edi
c001268a:	5d                   	pop    ebp
c001268b:	c3                   	ret    

c001268c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001268c:	53                   	push   ebx
c001268d:	83 ec 3c             	sub    esp,0x3c
c0012690:	6a 2b                	push   0x2b
c0012692:	6a 00                	push   0x0
c0012694:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012698:	53                   	push   ebx
c0012699:	e8 42 de fe ff       	call   c00004e0 <memset>
c001269e:	58                   	pop    eax
c001269f:	5a                   	pop    edx
c00126a0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126a4:	50                   	push   eax
c00126a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126a9:	e8 41 fe ff ff       	call   c00124ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126ae:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126b3:	83 c4 0c             	add    esp,0xc
c00126b6:	6a 15                	push   0x15
c00126b8:	6a 00                	push   0x0
c00126ba:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126be:	50                   	push   eax
c00126bf:	e8 1c de fe ff       	call   c00004e0 <memset>
c00126c4:	53                   	push   ebx
c00126c5:	6a 00                	push   0x0
c00126c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126cf:	e8 e7 f9 ff ff       	call   c00120bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126d4:	83 c4 58             	add    esp,0x58
c00126d7:	5b                   	pop    ebx
c00126d8:	c3                   	ret    

c00126d9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126d9:	56                   	push   esi
c00126da:	53                   	push   ebx
c00126db:	83 ec 48             	sub    esp,0x48
c00126de:	6a 12                	push   0x12
c00126e0:	68 ff 00 00 00       	push   0xff
c00126e5:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126e9:	56                   	push   esi
c00126ea:	e8 f1 dd fe ff       	call   c00004e0 <memset>
c00126ef:	5a                   	pop    edx
c00126f0:	59                   	pop    ecx
c00126f1:	56                   	push   esi
c00126f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126f6:	e8 f4 fd ff ff       	call   c00124ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126fb:	83 c4 10             	add    esp,0x10
c00126fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012702:	85 db                	test   ebx,ebx
c0012704:	74 42                	je     c0012748 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012706:	50                   	push   eax
c0012707:	8d 44 24 19          	lea    eax,[esp+0x19]
c001270b:	50                   	push   eax
c001270c:	53                   	push   ebx
c001270d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012711:	e8 fb f6 ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012716:	83 c4 0c             	add    esp,0xc
c0012719:	6a 12                	push   0x12
c001271b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001271f:	50                   	push   eax
c0012720:	56                   	push   esi
c0012721:	e8 5a dc fe ff       	call   c0000380 <memcmp>
c0012726:	83 c4 10             	add    esp,0x10
c0012729:	85 c0                	test   eax,eax
c001272b:	74 1e                	je     c001274b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001272d:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012732:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012737:	c1 e3 08             	shl    ebx,0x8
c001273a:	09 d8                	or     eax,ebx
c001273c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012741:	c1 e3 10             	shl    ebx,0x10
c0012744:	09 c3                	or     ebx,eax
c0012746:	eb ba                	jmp    c0012702 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012748:	83 cb ff             	or     ebx,0xffffffff
c001274b:	83 c4 44             	add    esp,0x44
c001274e:	89 d8                	mov    eax,ebx
c0012750:	5b                   	pop    ebx
c0012751:	5e                   	pop    esi
c0012752:	c3                   	ret    

c0012753 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012753:	57                   	push   edi
c0012754:	56                   	push   esi
c0012755:	53                   	push   ebx
c0012756:	83 ec 34             	sub    esp,0x34
c0012759:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001275d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012761:	6a 2b                	push   0x2b
c0012763:	6a 00                	push   0x0
c0012765:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012769:	53                   	push   ebx
c001276a:	e8 71 dd fe ff       	call   c00004e0 <memset>
c001276f:	58                   	pop    eax
c0012770:	5a                   	pop    edx
c0012771:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012775:	50                   	push   eax
c0012776:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001277a:	e8 70 fd ff ff       	call   c00124ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c001277f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012783:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012787:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001278b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001278f:	53                   	push   ebx
c0012790:	6a 00                	push   0x0
c0012792:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012796:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001279a:	e8 1c f9 ff ff       	call   c00120bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001279f:	83 c4 50             	add    esp,0x50
c00127a2:	5b                   	pop    ebx
c00127a3:	5e                   	pop    esi
c00127a4:	5f                   	pop    edi
c00127a5:	c3                   	ret    

c00127a6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00127a6:	55                   	push   ebp
c00127a7:	57                   	push   edi
c00127a8:	56                   	push   esi
c00127a9:	53                   	push   ebx
c00127aa:	83 ec 40             	sub    esp,0x40
c00127ad:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127b1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127b5:	6a 2b                	push   0x2b
c00127b7:	6a 00                	push   0x0
c00127b9:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127bd:	56                   	push   esi
c00127be:	e8 1d dd fe ff       	call   c00004e0 <memset>
c00127c3:	5f                   	pop    edi
c00127c4:	89 ef                	mov    edi,ebp
c00127c6:	58                   	pop    eax
c00127c7:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127cb:	50                   	push   eax
c00127cc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127d0:	e8 1a fd ff ff       	call   c00124ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127d5:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127da:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127df:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127e4:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127e9:	83 c4 10             	add    esp,0x10
c00127ec:	85 ed                	test   ebp,ebp
c00127ee:	74 14                	je     c0012804 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127f0:	51                   	push   ecx
c00127f1:	51                   	push   ecx
c00127f2:	57                   	push   edi
c00127f3:	53                   	push   ebx
c00127f4:	e8 0a f7 ff ff       	call   c0011f03 <CmGetNext(Reghive_Tag*, int)>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	85 c0                	test   eax,eax
c00127fe:	74 04                	je     c0012804 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012800:	89 c7                	mov    edi,eax
c0012802:	eb e8                	jmp    c00127ec <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012804:	56                   	push   esi
c0012805:	6a 00                	push   0x0
c0012807:	57                   	push   edi
c0012808:	53                   	push   ebx
c0012809:	e8 ad f8 ff ff       	call   c00120bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001280e:	83 c4 0c             	add    esp,0xc
c0012811:	89 c7                	mov    edi,eax
c0012813:	56                   	push   esi
c0012814:	50                   	push   eax
c0012815:	53                   	push   ebx
c0012816:	e8 f6 f5 ff ff       	call   c0011e11 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001281b:	58                   	pop    eax
c001281c:	5a                   	pop    edx
c001281d:	6a 6c                	push   0x6c
c001281f:	6a 00                	push   0x0
c0012821:	6a 00                	push   0x0
c0012823:	68 d7 0d 02 c0       	push   0xc0020dd7
c0012828:	57                   	push   edi
c0012829:	53                   	push   ebx
c001282a:	e8 24 ff ff ff       	call   c0012753 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001282f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012833:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012837:	c1 e8 10             	shr    eax,0x10
c001283a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001283e:	83 c4 1c             	add    esp,0x1c
c0012841:	56                   	push   esi
c0012842:	57                   	push   edi
c0012843:	53                   	push   ebx
c0012844:	e8 ec f6 ff ff       	call   c0011f35 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001284e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012853:	c1 e0 08             	shl    eax,0x8
c0012856:	09 c2                	or     edx,eax
c0012858:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001285d:	c1 e0 10             	shl    eax,0x10
c0012860:	83 c4 4c             	add    esp,0x4c
c0012863:	09 d0                	or     eax,edx
c0012865:	5b                   	pop    ebx
c0012866:	5e                   	pop    esi
c0012867:	5f                   	pop    edi
c0012868:	5d                   	pop    ebp
c0012869:	c3                   	ret    

c001286a <zStrtok(char*, char const*)>:
c001286a:	55                   	push   ebp
c001286b:	57                   	push   edi
c001286c:	56                   	push   esi
c001286d:	53                   	push   ebx
c001286e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012876:	85 db                	test   ebx,ebx
c0012878:	74 2f                	je     c00128a9 <zStrtok(char*, char const*)+0x3f>
c001287a:	85 c0                	test   eax,eax
c001287c:	75 09                	jne    c0012887 <zStrtok(char*, char const*)+0x1d>
c001287e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012883:	85 c0                	test   eax,eax
c0012885:	74 50                	je     c00128d7 <zStrtok(char*, char const*)+0x6d>
c0012887:	31 c9                	xor    ecx,ecx
c0012889:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001288d:	74 03                	je     c0012892 <zStrtok(char*, char const*)+0x28>
c001288f:	41                   	inc    ecx
c0012890:	eb f7                	jmp    c0012889 <zStrtok(char*, char const*)+0x1f>
c0012892:	31 d2                	xor    edx,edx
c0012894:	39 ca                	cmp    edx,ecx
c0012896:	74 15                	je     c00128ad <zStrtok(char*, char const*)+0x43>
c0012898:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001289c:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001289f:	8d 3c 10             	lea    edi,[eax+edx*1]
c00128a2:	39 ee                	cmp    esi,ebp
c00128a4:	74 13                	je     c00128b9 <zStrtok(char*, char const*)+0x4f>
c00128a6:	42                   	inc    edx
c00128a7:	eb eb                	jmp    c0012894 <zStrtok(char*, char const*)+0x2a>
c00128a9:	31 c0                	xor    eax,eax
c00128ab:	eb 2a                	jmp    c00128d7 <zStrtok(char*, char const*)+0x6d>
c00128ad:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128b7:	eb 1e                	jmp    c00128d7 <zStrtok(char*, char const*)+0x6d>
c00128b9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128bc:	39 ce                	cmp    esi,ecx
c00128be:	75 0a                	jne    c00128ca <zStrtok(char*, char const*)+0x60>
c00128c0:	40                   	inc    eax
c00128c1:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128c6:	89 d8                	mov    eax,ebx
c00128c8:	eb 0d                	jmp    c00128d7 <zStrtok(char*, char const*)+0x6d>
c00128ca:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128ce:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128d1:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128d7:	5b                   	pop    ebx
c00128d8:	5e                   	pop    esi
c00128d9:	5f                   	pop    edi
c00128da:	5d                   	pop    ebp
c00128db:	c3                   	ret    

c00128dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128dc:	57                   	push   edi
c00128dd:	56                   	push   esi
c00128de:	53                   	push   ebx
c00128df:	81 ec 08 01 00 00    	sub    esp,0x108
c00128e5:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128ec:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128f3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128f7:	53                   	push   ebx
c00128f8:	e8 33 dd fe ff       	call   c0000630 <strcpy>
c00128fd:	59                   	pop    ecx
c00128fe:	5e                   	pop    esi
c00128ff:	68 3b 11 02 c0       	push   0xc002113b
c0012904:	53                   	push   ebx
c0012905:	e8 60 ff ff ff       	call   c001286a <zStrtok(char*, char const*)>
c001290a:	bb 01 00 00 00       	mov    ebx,0x1
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	85 c0                	test   eax,eax
c0012914:	74 3b                	je     c0012951 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012916:	52                   	push   edx
c0012917:	50                   	push   eax
c0012918:	6a 01                	push   0x1
c001291a:	57                   	push   edi
c001291b:	e8 b9 fd ff ff       	call   c00126d9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012920:	59                   	pop    ecx
c0012921:	89 c3                	mov    ebx,eax
c0012923:	5e                   	pop    esi
c0012924:	68 3b 11 02 c0       	push   0xc002113b
c0012929:	6a 00                	push   0x0
c001292b:	e8 3a ff ff ff       	call   c001286a <zStrtok(char*, char const*)>
c0012930:	83 c4 10             	add    esp,0x10
c0012933:	89 c6                	mov    esi,eax
c0012935:	85 c0                	test   eax,eax
c0012937:	74 18                	je     c0012951 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012939:	52                   	push   edx
c001293a:	52                   	push   edx
c001293b:	53                   	push   ebx
c001293c:	57                   	push   edi
c001293d:	e8 82 f5 ff ff       	call   c0011ec4 <CmEnterDirectory(Reghive_Tag*, int)>
c0012942:	83 c4 10             	add    esp,0x10
c0012945:	89 c3                	mov    ebx,eax
c0012947:	83 f8 ff             	cmp    eax,0xffffffff
c001294a:	74 05                	je     c0012951 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001294c:	50                   	push   eax
c001294d:	56                   	push   esi
c001294e:	53                   	push   ebx
c001294f:	eb c9                	jmp    c001291a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012951:	81 c4 00 01 00 00    	add    esp,0x100
c0012957:	89 d8                	mov    eax,ebx
c0012959:	5b                   	pop    ebx
c001295a:	5e                   	pop    esi
c001295b:	5f                   	pop    edi
c001295c:	c3                   	ret    

c001295d <CmDisplayTree(Reghive_Tag*, int, int)>:
c001295d:	55                   	push   ebp
c001295e:	57                   	push   edi
c001295f:	56                   	push   esi
c0012960:	53                   	push   ebx
c0012961:	83 ec 5c             	sub    esp,0x5c
c0012964:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012968:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001296c:	85 db                	test   ebx,ebx
c001296e:	0f 8e 84 00 00 00    	jle    c00129f8 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012974:	57                   	push   edi
c0012975:	31 ed                	xor    ebp,ebp
c0012977:	6a 32                	push   0x32
c0012979:	6a 00                	push   0x0
c001297b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001297f:	57                   	push   edi
c0012980:	e8 5b db fe ff       	call   c00004e0 <memset>
c0012985:	83 c4 0c             	add    esp,0xc
c0012988:	57                   	push   edi
c0012989:	53                   	push   ebx
c001298a:	56                   	push   esi
c001298b:	e8 31 fb ff ff       	call   c00124c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012990:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001299b:	7d 13                	jge    c00129b0 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001299d:	83 ec 0c             	sub    esp,0xc
c00129a0:	45                   	inc    ebp
c00129a1:	68 a8 14 02 c0       	push   0xc00214a8
c00129a6:	e8 9e 7f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	eb e7                	jmp    c0012997 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129b0:	51                   	push   ecx
c00129b1:	57                   	push   edi
c00129b2:	53                   	push   ebx
c00129b3:	68 dd 0d 02 c0       	push   0xc0020ddd
c00129b8:	e8 8c 7f ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00129bd:	83 c4 10             	add    esp,0x10
c00129c0:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129c5:	75 1e                	jne    c00129e5 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129c7:	52                   	push   edx
c00129c8:	52                   	push   edx
c00129c9:	53                   	push   ebx
c00129ca:	56                   	push   esi
c00129cb:	e8 f4 f4 ff ff       	call   c0011ec4 <CmEnterDirectory(Reghive_Tag*, int)>
c00129d0:	83 c4 0c             	add    esp,0xc
c00129d3:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129d7:	8d 51 04             	lea    edx,[ecx+0x4]
c00129da:	52                   	push   edx
c00129db:	50                   	push   eax
c00129dc:	56                   	push   esi
c00129dd:	e8 7b ff ff ff       	call   c001295d <CmDisplayTree(Reghive_Tag*, int, int)>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	50                   	push   eax
c00129e6:	50                   	push   eax
c00129e7:	53                   	push   ebx
c00129e8:	56                   	push   esi
c00129e9:	e8 15 f5 ff ff       	call   c0011f03 <CmGetNext(Reghive_Tag*, int)>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	89 c3                	mov    ebx,eax
c00129f3:	e9 74 ff ff ff       	jmp    c001296c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129f8:	83 c4 5c             	add    esp,0x5c
c00129fb:	5b                   	pop    ebx
c00129fc:	5e                   	pop    esi
c00129fd:	5f                   	pop    edi
c00129fe:	5d                   	pop    ebp
c00129ff:	c3                   	ret    

c0012a00 <CmSplitFinalSlashInPlace(char*)>:
c0012a00:	53                   	push   ebx
c0012a01:	83 ec 14             	sub    esp,0x14
c0012a04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a08:	53                   	push   ebx
c0012a09:	e8 52 db fe ff       	call   c0000560 <strlen>
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	48                   	dec    eax
c0012a12:	85 c0                	test   eax,eax
c0012a14:	74 15                	je     c0012a2b <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a16:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a19:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a1d:	75 09                	jne    c0012a28 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a1f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a22:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a26:	eb 05                	jmp    c0012a2d <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a28:	48                   	dec    eax
c0012a29:	eb e7                	jmp    c0012a12 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a2b:	31 c0                	xor    eax,eax
c0012a2d:	83 c4 08             	add    esp,0x8
c0012a30:	5b                   	pop    ebx
c0012a31:	c3                   	ret    

c0012a32 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a32:	55                   	push   ebp
c0012a33:	57                   	push   edi
c0012a34:	56                   	push   esi
c0012a35:	53                   	push   ebx
c0012a36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a3c:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a43:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a46:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a4c:	80 fa 40             	cmp    dl,0x40
c0012a4f:	75 1b                	jne    c0012a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0x3a>
c0012a51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a54:	85 c0                	test   eax,eax
c0012a56:	74 08                	je     c0012a60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2e>
c0012a58:	83 f8 3a             	cmp    eax,0x3a
c0012a5b:	74 03                	je     c0012a60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2e>
c0012a5d:	43                   	inc    ebx
c0012a5e:	eb f1                	jmp    c0012a51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0012a60:	85 c0                	test   eax,eax
c0012a62:	0f 84 49 01 00 00    	je     c0012bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012a68:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a6b:	43                   	inc    ebx
c0012a6c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012a70:	50                   	push   eax
c0012a71:	6a 40                	push   0x40
c0012a73:	6a 00                	push   0x0
c0012a75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a79:	50                   	push   eax
c0012a7a:	e8 61 da fe ff       	call   c00004e0 <memset>
c0012a7f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012a8e:	31 c0                	xor    eax,eax
c0012a90:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a93:	89 d1                	mov    ecx,edx
c0012a95:	85 d2                	test   edx,edx
c0012a97:	0f 84 14 01 00 00    	je     c0012bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012a9d:	3d c7 00 00 00       	cmp    eax,0xc7
c0012aa2:	0f 8f 09 01 00 00    	jg     c0012bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012aa8:	83 fa 0a             	cmp    edx,0xa
c0012aab:	0f 85 f1 00 00 00    	jne    c0012ba2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x170>
c0012ab1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ab6:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012abb:	89 c8                	mov    eax,ecx
c0012abd:	a8 df                	test   al,0xdf
c0012abf:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ac4:	83 f9 23             	cmp    ecx,0x23
c0012ac7:	0f 94 c2             	sete   dl
c0012aca:	89 d5                	mov    ebp,edx
c0012acc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ad0:	09 ea                	or     edx,ebp
c0012ad2:	80 e2 01             	and    dl,0x1
c0012ad5:	75 47                	jne    c0012b1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ad7:	83 e8 09             	sub    eax,0x9
c0012ada:	3c 01                	cmp    al,0x1
c0012adc:	76 40                	jbe    c0012b1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ade:	83 f9 5b             	cmp    ecx,0x5b
c0012ae1:	75 42                	jne    c0012b25 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf3>
c0012ae3:	83 fe 40             	cmp    esi,0x40
c0012ae6:	75 36                	jne    c0012b1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ae8:	83 ec 0c             	sub    esp,0xc
c0012aeb:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012aef:	55                   	push   ebp
c0012af0:	e8 6b da fe ff       	call   c0000560 <strlen>
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	83 f8 3f             	cmp    eax,0x3f
c0012afb:	0f 87 b0 00 00 00    	ja     c0012bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b01:	50                   	push   eax
c0012b02:	50                   	push   eax
c0012b03:	55                   	push   ebp
c0012b04:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012b08:	55                   	push   ebp
c0012b09:	e8 22 db fe ff       	call   c0000630 <strcpy>
c0012b0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b11:	e8 4a da fe ff       	call   c0000560 <strlen>
c0012b16:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	31 d2                	xor    edx,edx
c0012b20:	e9 84 00 00 00       	jmp    c0012ba9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x177>
c0012b25:	83 fe 40             	cmp    esi,0x40
c0012b28:	74 06                	je     c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfe>
c0012b2a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b2e:	eb 19                	jmp    c0012b49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b30:	51                   	push   ecx
c0012b31:	51                   	push   ecx
c0012b32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b3a:	50                   	push   eax
c0012b3b:	e8 00 dc fe ff       	call   c0000740 <strcmp>
c0012b40:	83 c4 10             	add    esp,0x10
c0012b43:	85 c0                	test   eax,eax
c0012b45:	75 d7                	jne    c0012b1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b47:	eb e1                	jmp    c0012b2a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf8>
c0012b49:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b4c:	85 c9                	test   ecx,ecx
c0012b4e:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b53:	83 f9 3d             	cmp    ecx,0x3d
c0012b56:	0f 94 c0             	sete   al
c0012b59:	89 c5                	mov    ebp,eax
c0012b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b5f:	09 e8                	or     eax,ebp
c0012b61:	89 c5                	mov    ebp,eax
c0012b63:	a8 01                	test   al,0x1
c0012b65:	75 03                	jne    c0012b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x138>
c0012b67:	42                   	inc    edx
c0012b68:	eb df                	jmp    c0012b49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b6a:	85 c9                	test   ecx,ecx
c0012b6c:	74 43                	je     c0012bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b72:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b75:	52                   	push   edx
c0012b76:	52                   	push   edx
c0012b77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b7b:	50                   	push   eax
c0012b7c:	53                   	push   ebx
c0012b7d:	e8 be db fe ff       	call   c0000740 <strcmp>
c0012b82:	83 c4 10             	add    esp,0x10
c0012b85:	85 c0                	test   eax,eax
c0012b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b8b:	75 91                	jne    c0012b1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b8d:	50                   	push   eax
c0012b8e:	42                   	inc    edx
c0012b8f:	50                   	push   eax
c0012b90:	52                   	push   edx
c0012b91:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b98:	e8 93 da fe ff       	call   c0000630 <strcpy>
c0012b9d:	83 c4 10             	add    esp,0x10
c0012ba0:	eb 11                	jmp    c0012bb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x181>
c0012ba2:	8d 50 01             	lea    edx,[eax+0x1]
c0012ba5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012ba9:	47                   	inc    edi
c0012baa:	89 d0                	mov    eax,edx
c0012bac:	e9 df fe ff ff       	jmp    c0012a90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5e>
c0012bb1:	31 ed                	xor    ebp,ebp
c0012bb3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bb9:	89 e8                	mov    eax,ebp
c0012bbb:	5b                   	pop    ebx
c0012bbc:	5e                   	pop    esi
c0012bbd:	5f                   	pop    edi
c0012bbe:	5d                   	pop    ebp
c0012bbf:	c3                   	ret    

c0012bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bc0:	57                   	push   edi
c0012bc1:	56                   	push   esi
c0012bc2:	53                   	push   ebx
c0012bc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bc9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bd0:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bd7:	53                   	push   ebx
c0012bd8:	e8 83 d9 fe ff       	call   c0000560 <strlen>
c0012bdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012be0:	89 c7                	mov    edi,eax
c0012be2:	e8 79 d9 fe ff       	call   c0000560 <strlen>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bee:	3d ff 00 00 00       	cmp    eax,0xff
c0012bf3:	0f 87 d3 00 00 00    	ja     c0012ccc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bf9:	57                   	push   edi
c0012bfa:	57                   	push   edi
c0012bfb:	56                   	push   esi
c0012bfc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c00:	56                   	push   esi
c0012c01:	e8 2a da fe ff       	call   c0000630 <strcpy>
c0012c06:	58                   	pop    eax
c0012c07:	5a                   	pop    edx
c0012c08:	68 3b 11 02 c0       	push   0xc002113b
c0012c0d:	56                   	push   esi
c0012c0e:	e8 1d dc fe ff       	call   c0000830 <strcat>
c0012c13:	59                   	pop    ecx
c0012c14:	5f                   	pop    edi
c0012c15:	53                   	push   ebx
c0012c16:	56                   	push   esi
c0012c17:	e8 14 dc fe ff       	call   c0000830 <strcat>
c0012c1c:	58                   	pop    eax
c0012c1d:	5a                   	pop    edx
c0012c1e:	68 e7 0d 02 c0       	push   0xc0020de7
c0012c23:	56                   	push   esi
c0012c24:	e8 07 dc fe ff       	call   c0000830 <strcat>
c0012c29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c30:	e8 52 4e ff ff       	call   c0007a87 <malloc>
c0012c35:	83 c4 0c             	add    esp,0xc
c0012c38:	89 c3                	mov    ebx,eax
c0012c3a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c40:	56                   	push   esi
c0012c41:	50                   	push   eax
c0012c42:	e8 85 82 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	85 db                	test   ebx,ebx
c0012c4c:	74 7e                	je     c0012ccc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c4e:	51                   	push   ecx
c0012c4f:	51                   	push   ecx
c0012c50:	6a 01                	push   0x1
c0012c52:	53                   	push   ebx
c0012c53:	e8 30 83 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	85 c0                	test   eax,eax
c0012c5d:	74 08                	je     c0012c67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c64:	53                   	push   ebx
c0012c65:	eb 5f                	jmp    c0012cc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c67:	52                   	push   edx
c0012c68:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c6c:	50                   	push   eax
c0012c6d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c71:	50                   	push   eax
c0012c72:	53                   	push   ebx
c0012c73:	e8 bc 85 ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0012c78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c7c:	83 c4 10             	add    esp,0x10
c0012c7f:	89 c1                	mov    ecx,eax
c0012c81:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c85:	74 31                	je     c0012cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c87:	83 ec 0c             	sub    esp,0xc
c0012c8a:	50                   	push   eax
c0012c8b:	e8 f7 4d ff ff       	call   c0007a87 <malloc>
c0012c90:	89 c6                	mov    esi,eax
c0012c92:	58                   	pop    eax
c0012c93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c99:	52                   	push   edx
c0012c9a:	56                   	push   esi
c0012c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ca3:	53                   	push   ebx
c0012ca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ca7:	83 c4 20             	add    esp,0x20
c0012caa:	85 c0                	test   eax,eax
c0012cac:	75 0a                	jne    c0012cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cb2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012cb6:	74 18                	je     c0012cd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	53                   	push   ebx
c0012cbc:	e8 25 83 ff ff       	call   c000afe6 <File::close()>
c0012cc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	31 c0                	xor    eax,eax
c0012cce:	eb 3b                	jmp    c0012d0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cd0:	83 ec 0c             	sub    esp,0xc
c0012cd3:	53                   	push   ebx
c0012cd4:	e8 0d 83 ff ff       	call   c000afe6 <File::close()>
c0012cd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ce1:	83 c4 0c             	add    esp,0xc
c0012ce4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ceb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cf2:	56                   	push   esi
c0012cf3:	e8 3a fd ff ff       	call   c0012a32 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cf8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cfb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cff:	e8 93 4d ff ff       	call   c0007a97 <free>
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d0b:	81 c4 20 01 00 00    	add    esp,0x120
c0012d11:	5b                   	pop    ebx
c0012d12:	5e                   	pop    esi
c0012d13:	5f                   	pop    edi
c0012d14:	c3                   	ret    

c0012d15 <Reg::getLine(char*, char*, char*)>:
c0012d15:	57                   	push   edi
c0012d16:	56                   	push   esi
c0012d17:	53                   	push   ebx
c0012d18:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d24:	57                   	push   edi
c0012d25:	56                   	push   esi
c0012d26:	53                   	push   ebx
c0012d27:	68 ec 0d 02 c0       	push   0xc0020dec
c0012d2c:	e8 8f fe ff ff       	call   c0012bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	84 c0                	test   al,al
c0012d36:	75 10                	jne    c0012d48 <Reg::getLine(char*, char*, char*)+0x33>
c0012d38:	57                   	push   edi
c0012d39:	56                   	push   esi
c0012d3a:	53                   	push   ebx
c0012d3b:	68 11 0e 02 c0       	push   0xc0020e11
c0012d40:	e8 7b fe ff ff       	call   c0012bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	5b                   	pop    ebx
c0012d49:	5e                   	pop    esi
c0012d4a:	5f                   	pop    edi
c0012d4b:	c3                   	ret    

c0012d4c <Reg::readInt(char*, char*, int*)>:
c0012d4c:	55                   	push   ebp
c0012d4d:	57                   	push   edi
c0012d4e:	56                   	push   esi
c0012d4f:	53                   	push   ebx
c0012d50:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d56:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d5a:	55                   	push   ebp
c0012d5b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d62:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d69:	e8 a7 ff ff ff       	call   c0012d15 <Reg::getLine(char*, char*, char*)>
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	84 c0                	test   al,al
c0012d73:	0f 84 b6 00 00 00    	je     c0012e2f <Reg::readInt(char*, char*, int*)+0xe3>
c0012d79:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d7e:	83 fa 2b             	cmp    edx,0x2b
c0012d81:	74 0c                	je     c0012d8f <Reg::readInt(char*, char*, int*)+0x43>
c0012d83:	83 fa 2d             	cmp    edx,0x2d
c0012d86:	75 0e                	jne    c0012d96 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d88:	ba 01 00 00 00       	mov    edx,0x1
c0012d8d:	eb 0b                	jmp    c0012d9a <Reg::readInt(char*, char*, int*)+0x4e>
c0012d8f:	ba 01 00 00 00       	mov    edx,0x1
c0012d94:	eb 02                	jmp    c0012d98 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d96:	31 d2                	xor    edx,edx
c0012d98:	31 c0                	xor    eax,eax
c0012d9a:	be 0a 00 00 00       	mov    esi,0xa
c0012d9f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012da4:	75 21                	jne    c0012dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012da6:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012dab:	83 f9 78             	cmp    ecx,0x78
c0012dae:	75 0a                	jne    c0012dba <Reg::readInt(char*, char*, int*)+0x6e>
c0012db0:	83 c2 02             	add    edx,0x2
c0012db3:	be 10 00 00 00       	mov    esi,0x10
c0012db8:	eb 0d                	jmp    c0012dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dba:	83 f9 62             	cmp    ecx,0x62
c0012dbd:	75 08                	jne    c0012dc7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dbf:	83 c2 02             	add    edx,0x2
c0012dc2:	be 02 00 00 00       	mov    esi,0x2
c0012dc7:	01 d5                	add    ebp,edx
c0012dc9:	31 d2                	xor    edx,edx
c0012dcb:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012dcf:	85 c9                	test   ecx,ecx
c0012dd1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012dd5:	0f 94 c3             	sete   bl
c0012dd8:	89 df                	mov    edi,ebx
c0012dda:	83 f9 0d             	cmp    ecx,0xd
c0012ddd:	0f 94 c3             	sete   bl
c0012de0:	09 df                	or     edi,ebx
c0012de2:	89 fb                	mov    ebx,edi
c0012de4:	83 e7 01             	and    edi,0x1
c0012de7:	75 35                	jne    c0012e1e <Reg::readInt(char*, char*, int*)+0xd2>
c0012de9:	0f af d6             	imul   edx,esi
c0012dec:	83 fe 10             	cmp    esi,0x10
c0012def:	75 26                	jne    c0012e17 <Reg::readInt(char*, char*, int*)+0xcb>
c0012df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012df5:	83 ef 41             	sub    edi,0x41
c0012df8:	89 fb                	mov    ebx,edi
c0012dfa:	80 fb 05             	cmp    bl,0x5
c0012dfd:	77 06                	ja     c0012e05 <Reg::readInt(char*, char*, int*)+0xb9>
c0012dff:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e03:	eb 16                	jmp    c0012e1b <Reg::readInt(char*, char*, int*)+0xcf>
c0012e05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e09:	83 eb 61             	sub    ebx,0x61
c0012e0c:	80 fb 05             	cmp    bl,0x5
c0012e0f:	77 06                	ja     c0012e17 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e11:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e15:	eb 04                	jmp    c0012e1b <Reg::readInt(char*, char*, int*)+0xcf>
c0012e17:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e1b:	45                   	inc    ebp
c0012e1c:	eb ad                	jmp    c0012dcb <Reg::readInt(char*, char*, int*)+0x7f>
c0012e1e:	84 c0                	test   al,al
c0012e20:	74 02                	je     c0012e24 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e22:	f7 da                	neg    edx
c0012e24:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e2b:	89 10                	mov    DWORD PTR [eax],edx
c0012e2d:	88 d8                	mov    al,bl
c0012e2f:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e35:	5b                   	pop    ebx
c0012e36:	5e                   	pop    esi
c0012e37:	5f                   	pop    edi
c0012e38:	5d                   	pop    ebp
c0012e39:	c3                   	ret    

c0012e3a <Reg::readString(char*, char*, char*, int)>:
c0012e3a:	57                   	push   edi
c0012e3b:	56                   	push   esi
c0012e3c:	53                   	push   ebx
c0012e3d:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e43:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e47:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e4e:	57                   	push   edi
c0012e4f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e56:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e5d:	e8 b3 fe ff ff       	call   c0012d15 <Reg::getLine(char*, char*, char*)>
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	89 c6                	mov    esi,eax
c0012e67:	84 c0                	test   al,al
c0012e69:	74 44                	je     c0012eaf <Reg::readString(char*, char*, char*, int)+0x75>
c0012e6b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e72:	31 c0                	xor    eax,eax
c0012e74:	4a                   	dec    edx
c0012e75:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e78:	84 c9                	test   cl,cl
c0012e7a:	74 0f                	je     c0012e8b <Reg::readString(char*, char*, char*, int)+0x51>
c0012e7c:	39 c2                	cmp    edx,eax
c0012e7e:	7e 0b                	jle    c0012e8b <Reg::readString(char*, char*, char*, int)+0x51>
c0012e80:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e83:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e88:	40                   	inc    eax
c0012e89:	eb ea                	jmp    c0012e75 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e8b:	83 ec 0c             	sub    esp,0xc
c0012e8e:	53                   	push   ebx
c0012e8f:	e8 cc d6 fe ff       	call   c0000560 <strlen>
c0012e94:	83 c4 10             	add    esp,0x10
c0012e97:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e9c:	75 11                	jne    c0012eaf <Reg::readString(char*, char*, char*, int)+0x75>
c0012e9e:	83 ec 0c             	sub    esp,0xc
c0012ea1:	53                   	push   ebx
c0012ea2:	e8 b9 d6 fe ff       	call   c0000560 <strlen>
c0012ea7:	83 c4 10             	add    esp,0x10
c0012eaa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012eaf:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012eb5:	89 f0                	mov    eax,esi
c0012eb7:	5b                   	pop    ebx
c0012eb8:	5e                   	pop    esi
c0012eb9:	5f                   	pop    edi
c0012eba:	c3                   	ret    

c0012ebb <Reg::readBool(char*, char*, bool*)>:
c0012ebb:	83 ec 20             	sub    esp,0x20
c0012ebe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ec2:	50                   	push   eax
c0012ec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ecb:	e8 7c fe ff ff       	call   c0012d4c <Reg::readInt(char*, char*, int*)>
c0012ed0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ed4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ed9:	0f 95 02             	setne  BYTE PTR [edx]
c0012edc:	83 c4 2c             	add    esp,0x2c
c0012edf:	c3                   	ret    

c0012ee0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ee0:	53                   	push   ebx
c0012ee1:	83 ec 1c             	sub    esp,0x1c
c0012ee4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012ee8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012eec:	50                   	push   eax
c0012eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ef5:	e8 c1 ff ff ff       	call   c0012ebb <Reg::readBool(char*, char*, bool*)>
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	84 c0                	test   al,al
c0012eff:	74 04                	je     c0012f05 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f01:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f05:	83 c4 18             	add    esp,0x18
c0012f08:	88 d8                	mov    al,bl
c0012f0a:	5b                   	pop    ebx
c0012f0b:	c3                   	ret    

c0012f0c <Reg::readIntWithDefault(char*, char*, int)>:
c0012f0c:	53                   	push   ebx
c0012f0d:	83 ec 1c             	sub    esp,0x1c
c0012f10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f18:	50                   	push   eax
c0012f19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f21:	e8 26 fe ff ff       	call   c0012d4c <Reg::readInt(char*, char*, int*)>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	84 c0                	test   al,al
c0012f2b:	74 04                	je     c0012f31 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f31:	83 c4 18             	add    esp,0x18
c0012f34:	89 d8                	mov    eax,ebx
c0012f36:	5b                   	pop    ebx
c0012f37:	c3                   	ret    

c0012f38 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f38:	57                   	push   edi
c0012f39:	56                   	push   esi
c0012f3a:	56                   	push   esi
c0012f3b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f3f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f43:	56                   	push   esi
c0012f44:	57                   	push   edi
c0012f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4d:	e8 e8 fe ff ff       	call   c0012e3a <Reg::readString(char*, char*, char*, int)>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	84 c0                	test   al,al
c0012f57:	75 1a                	jne    c0012f73 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f59:	51                   	push   ecx
c0012f5a:	56                   	push   esi
c0012f5b:	6a 00                	push   0x0
c0012f5d:	57                   	push   edi
c0012f5e:	e8 7d d5 fe ff       	call   c00004e0 <memset>
c0012f63:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f66:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012f6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f6c:	83 c4 10             	add    esp,0x10
c0012f6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f73:	5a                   	pop    edx
c0012f74:	89 f8                	mov    eax,edi
c0012f76:	5e                   	pop    esi
c0012f77:	5f                   	pop    edi
c0012f78:	c3                   	ret    

c0012f79 <SysEject(regs*)>:
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	83 ca ff             	or     edx,0xffffffff
c0012f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f83:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f86:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f8b:	83 e9 41             	sub    ecx,0x41
c0012f8e:	83 f9 19             	cmp    ecx,0x19
c0012f91:	77 18                	ja     c0012fab <SysEject(regs*)+0x32>
c0012f93:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f9a:	85 c9                	test   ecx,ecx
c0012f9c:	74 0d                	je     c0012fab <SysEject(regs*)+0x32>
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	51                   	push   ecx
c0012fa2:	e8 59 a1 ff ff       	call   c000d100 <LogicalDisk::eject()>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	99                   	cdq    
c0012fab:	83 c4 0c             	add    esp,0xc
c0012fae:	c3                   	ret    

c0012faf <SysExit(regs*)>:
c0012faf:	83 ec 18             	sub    esp,0x18
c0012fb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fb9:	e8 0e 2a 00 00       	call   c00159cc <terminateTask(int)>
c0012fbe:	83 c8 ff             	or     eax,0xffffffff
c0012fc1:	89 c2                	mov    edx,eax
c0012fc3:	83 c4 1c             	add    esp,0x1c
c0012fc6:	c3                   	ret    

c0012fc7 <SysGetCwd(regs*)>:
c0012fc7:	83 ec 10             	sub    esp,0x10
c0012fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fce:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fd1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fd9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fdc:	e8 e1 7c ff ff       	call   c000acc2 <Fs::getcwd(Process*, char*, int)>
c0012fe1:	83 c4 1c             	add    esp,0x1c
c0012fe4:	99                   	cdq    
c0012fe5:	c3                   	ret    

c0012fe6 <SysGetPID(regs*)>:
c0012fe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012feb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ff0:	99                   	cdq    
c0012ff1:	c3                   	ret    

c0012ff2 <SysGetRAMData(regs*)>:
c0012ff2:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012ffc:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013002:	99                   	cdq    
c0013003:	f7 f9                	idiv   ecx
c0013005:	c1 e0 18             	shl    eax,0x18
c0013008:	09 c8                	or     eax,ecx
c001300a:	99                   	cdq    
c001300b:	c3                   	ret    

c001300c <SysGetVGAPtr(regs*)>:
c001300c:	55                   	push   ebp
c001300d:	57                   	push   edi
c001300e:	56                   	push   esi
c001300f:	53                   	push   ebx
c0013010:	83 ec 18             	sub    esp,0x18
c0013013:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001301a:	e8 79 24 00 00       	call   c0015498 <Thr::processFromPID(int)>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	89 c1                	mov    ecx,eax
c0013024:	b8 01 00 00 00       	mov    eax,0x1
c0013029:	85 c9                	test   ecx,ecx
c001302b:	74 57                	je     c0013084 <SysGetVGAPtr(regs*)+0x78>
c001302d:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013033:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013037:	74 0c                	je     c0013045 <SysGetVGAPtr(regs*)+0x39>
c0013039:	83 ec 0c             	sub    esp,0xc
c001303c:	55                   	push   ebp
c001303d:	e8 ed 56 ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013048:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001304b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013050:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013052:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013055:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013058:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001305e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013061:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013064:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001306a:	50                   	push   eax
c001306b:	50                   	push   eax
c001306c:	68 2c 0e 02 c0       	push   0xc0020e2c
c0013071:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013074:	05 a8 0f 00 00       	add    eax,0xfa8
c0013079:	50                   	push   eax
c001307a:	e8 b1 d5 fe ff       	call   c0000630 <strcpy>
c001307f:	83 c4 10             	add    esp,0x10
c0013082:	31 c0                	xor    eax,eax
c0013084:	83 c4 0c             	add    esp,0xc
c0013087:	31 d2                	xor    edx,edx
c0013089:	5b                   	pop    ebx
c001308a:	5e                   	pop    esi
c001308b:	5f                   	pop    edi
c001308c:	5d                   	pop    ebp
c001308d:	c3                   	ret    
c001308e:	66 90                	xchg   ax,ax

c0013090 <SysKill(regs*)>:
c0013090:	53                   	push   ebx
c0013091:	83 ec 08             	sub    esp,0x8
c0013094:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013098:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001309c:	75 16                	jne    c00130b4 <SysKill(regs*)+0x24>
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	68 36 0e 02 c0       	push   0xc0020e36
c00130a6:	e8 8c d7 ff ff       	call   c0010837 <KePanic(char const*)>
c00130ab:	83 c4 10             	add    esp,0x10
c00130ae:	e9 89 00 00 00       	jmp    c001313c <SysKill(regs*)+0xac>
c00130b3:	90                   	nop
c00130b4:	83 ec 0c             	sub    esp,0xc
c00130b7:	68 84 81 02 c0       	push   0xc0028184
c00130bc:	e8 fb ba 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130c1:	8d 76 00             	lea    esi,[esi+0x0]
c00130c4:	83 c4 10             	add    esp,0x10
c00130c7:	85 c0                	test   eax,eax
c00130c9:	74 19                	je     c00130e4 <SysKill(regs*)+0x54>
c00130cb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130d3:	74 33                	je     c0013108 <SysKill(regs*)+0x78>
c00130d5:	52                   	push   edx
c00130d6:	52                   	push   edx
c00130d7:	50                   	push   eax
c00130d8:	68 84 81 02 c0       	push   0xc0028184
c00130dd:	e8 fa bd 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130e2:	eb e0                	jmp    c00130c4 <SysKill(regs*)+0x34>
c00130e4:	83 ec 0c             	sub    esp,0xc
c00130e7:	68 78 81 02 c0       	push   0xc0028178
c00130ec:	e8 cb ba 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130f1:	8d 76 00             	lea    esi,[esi+0x0]
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	85 c0                	test   eax,eax
c00130f9:	74 41                	je     c001313c <SysKill(regs*)+0xac>
c00130fb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013101:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013103:	75 27                	jne    c001312c <SysKill(regs*)+0x9c>
c0013105:	8d 76 00             	lea    esi,[esi+0x0]
c0013108:	51                   	push   ecx
c0013109:	51                   	push   ecx
c001310a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001310d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013112:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013115:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001311b:	e8 af db ff ff       	call   c0010ccf <KeRaiseSignal(SigHandlerBlock*, int)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	31 c0                	xor    eax,eax
c0013125:	31 d2                	xor    edx,edx
c0013127:	eb 1b                	jmp    c0013144 <SysKill(regs*)+0xb4>
c0013129:	8d 76 00             	lea    esi,[esi+0x0]
c001312c:	52                   	push   edx
c001312d:	52                   	push   edx
c001312e:	50                   	push   eax
c001312f:	68 78 81 02 c0       	push   0xc0028178
c0013134:	e8 a3 bd 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013139:	eb b9                	jmp    c00130f4 <SysKill(regs*)+0x64>
c001313b:	90                   	nop
c001313c:	83 c8 ff             	or     eax,0xffffffff
c001313f:	89 c2                	mov    edx,eax
c0013141:	8d 76 00             	lea    esi,[esi+0x0]
c0013144:	83 c4 08             	add    esp,0x8
c0013147:	5b                   	pop    ebx
c0013148:	c3                   	ret    

c0013149 <SysLoadDLL(regs*)>:
c0013149:	56                   	push   esi
c001314a:	31 d2                	xor    edx,edx
c001314c:	53                   	push   ebx
c001314d:	b8 01 00 00 00       	mov    eax,0x1
c0013152:	51                   	push   ecx
c0013153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013157:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001315b:	0f 84 8c 00 00 00    	je     c00131ed <SysLoadDLL(regs*)+0xa4>
c0013161:	83 ec 0c             	sub    esp,0xc
c0013164:	68 14 01 00 00       	push   0x114
c0013169:	e8 19 49 ff ff       	call   c0007a87 <malloc>
c001316e:	89 c3                	mov    ebx,eax
c0013170:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013175:	83 c4 0c             	add    esp,0xc
c0013178:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001317b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001317e:	53                   	push   ebx
c001317f:	e8 48 7d ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	31 d2                	xor    edx,edx
c0013189:	b8 02 00 00 00       	mov    eax,0x2
c001318e:	85 db                	test   ebx,ebx
c0013190:	74 5b                	je     c00131ed <SysLoadDLL(regs*)+0xa4>
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	53                   	push   ebx
c0013196:	e8 5b 80 ff ff       	call   c000b1f6 <File::exists()>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	84 c0                	test   al,al
c00131a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131a2:	75 11                	jne    c00131b5 <SysLoadDLL(regs*)+0x6c>
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	53                   	push   ebx
c00131a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	b8 03 00 00 00       	mov    eax,0x3
c00131b3:	eb 36                	jmp    c00131eb <SysLoadDLL(regs*)+0xa2>
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	53                   	push   ebx
c00131b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131bc:	58                   	pop    eax
c00131bd:	5a                   	pop    edx
c00131be:	6a 00                	push   0x0
c00131c0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131c3:	e8 13 14 00 00       	call   c00145db <Thr::loadDLL(char const*, bool)>
c00131c8:	83 c4 10             	add    esp,0x10
c00131cb:	89 c1                	mov    ecx,eax
c00131cd:	31 d2                	xor    edx,edx
c00131cf:	b8 04 00 00 00       	mov    eax,0x4
c00131d4:	85 c9                	test   ecx,ecx
c00131d6:	74 15                	je     c00131ed <SysLoadDLL(regs*)+0xa4>
c00131d8:	53                   	push   ebx
c00131d9:	53                   	push   ebx
c00131da:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131e0:	51                   	push   ecx
c00131e1:	e8 35 16 00 00       	call   c001481b <Thr::executeDLL(unsigned long, void*)>
c00131e6:	83 c4 10             	add    esp,0x10
c00131e9:	31 c0                	xor    eax,eax
c00131eb:	31 d2                	xor    edx,edx
c00131ed:	59                   	pop    ecx
c00131ee:	5b                   	pop    ebx
c00131ef:	5e                   	pop    esi
c00131f0:	c3                   	ret    

c00131f1 <SysRead(regs*)>:
c00131f1:	57                   	push   edi
c00131f2:	56                   	push   esi
c00131f3:	53                   	push   ebx
c00131f4:	83 ec 10             	sub    esp,0x10
c00131f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131fe:	83 f8 02             	cmp    eax,0x2
c0013201:	77 10                	ja     c0013213 <SysRead(regs*)+0x22>
c0013203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001320b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013211:	eb 0e                	jmp    c0013221 <SysRead(regs*)+0x30>
c0013213:	83 ec 0c             	sub    esp,0xc
c0013216:	50                   	push   eax
c0013217:	e8 73 62 ff ff       	call   c000948f <getFromFileDescriptor(int)>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	89 c1                	mov    ecx,eax
c0013221:	83 c8 ff             	or     eax,0xffffffff
c0013224:	85 c9                	test   ecx,ecx
c0013226:	89 c2                	mov    edx,eax
c0013228:	74 28                	je     c0013252 <SysRead(regs*)+0x61>
c001322a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013237:	31 ff                	xor    edi,edi
c0013239:	8d 54 24 18          	lea    edx,[esp+0x18]
c001323d:	52                   	push   edx
c001323e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013241:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013244:	57                   	push   edi
c0013245:	56                   	push   esi
c0013246:	51                   	push   ecx
c0013247:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001324a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001324e:	83 c4 20             	add    esp,0x20
c0013251:	99                   	cdq    
c0013252:	83 c4 10             	add    esp,0x10
c0013255:	5b                   	pop    ebx
c0013256:	5e                   	pop    esi
c0013257:	5f                   	pop    edi
c0013258:	c3                   	ret    

c0013259 <SysRegisterSignal(regs*)>:
c0013259:	83 ec 18             	sub    esp,0x18
c001325c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013260:	6a 00                	push   0x0
c0013262:	6a 00                	push   0x0
c0013264:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013267:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001326a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001326f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013272:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013278:	e8 1c da ff ff       	call   c0010c99 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001327d:	83 c4 2c             	add    esp,0x2c
c0013280:	99                   	cdq    
c0013281:	c3                   	ret    

c0013282 <SysRegistryGetTypeFromPath(regs*)>:
c0013282:	57                   	push   edi
c0013283:	56                   	push   esi
c0013284:	53                   	push   ebx
c0013285:	81 ec 38 01 00 00    	sub    esp,0x138
c001328b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013292:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013295:	68 57 0e 02 c0       	push   0xc0020e57
c001329a:	e8 aa 76 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001329f:	5a                   	pop    edx
c00132a0:	59                   	pop    ecx
c00132a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132a7:	e8 30 f6 ff ff       	call   c00128dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132ac:	5f                   	pop    edi
c00132ad:	89 c6                	mov    esi,eax
c00132af:	5a                   	pop    edx
c00132b0:	50                   	push   eax
c00132b1:	68 77 0e 02 c0       	push   0xc0020e77
c00132b6:	e8 8e 76 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	85 f6                	test   esi,esi
c00132c0:	74 28                	je     c00132ea <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132c2:	50                   	push   eax
c00132c3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132c7:	57                   	push   edi
c00132c8:	56                   	push   esi
c00132c9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132cc:	e8 f0 f1 ff ff       	call   c00124c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	57                   	push   edi
c00132d5:	89 c3                	mov    ebx,eax
c00132d7:	50                   	push   eax
c00132d8:	68 7f 0e 02 c0       	push   0xc0020e7f
c00132dd:	e8 67 76 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00132e2:	89 d8                	mov    eax,ebx
c00132e4:	83 c4 10             	add    esp,0x10
c00132e7:	99                   	cdq    
c00132e8:	eb 05                	jmp    c00132ef <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132ea:	83 c8 ff             	or     eax,0xffffffff
c00132ed:	89 c2                	mov    edx,eax
c00132ef:	81 c4 30 01 00 00    	add    esp,0x130
c00132f5:	5b                   	pop    ebx
c00132f6:	5e                   	pop    esi
c00132f7:	5f                   	pop    edi
c00132f8:	c3                   	ret    

c00132f9 <SysRegistryReadExtent(regs*)>:
c00132f9:	83 ec 1c             	sub    esp,0x1c
c00132fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013300:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013303:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013306:	85 c0                	test   eax,eax
c0013308:	79 1f                	jns    c0013329 <SysRegistryReadExtent(regs*)+0x30>
c001330a:	52                   	push   edx
c001330b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013310:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013314:	52                   	push   edx
c0013315:	50                   	push   eax
c0013316:	51                   	push   ecx
c0013317:	e8 97 f0 ff ff       	call   c00123b3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001331c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013324:	83 c4 10             	add    esp,0x10
c0013327:	eb 14                	jmp    c001333d <SysRegistryReadExtent(regs*)+0x44>
c0013329:	83 ec 04             	sub    esp,0x4
c001332c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001332f:	50                   	push   eax
c0013330:	51                   	push   ecx
c0013331:	e8 17 eb ff ff       	call   c0011e4d <CmGetString(Reghive_Tag*, int, char*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	31 c0                	xor    eax,eax
c001333b:	31 d2                	xor    edx,edx
c001333d:	83 c4 1c             	add    esp,0x1c
c0013340:	c3                   	ret    

c0013341 <SysRegistryPathToExtentLookup(regs*)>:
c0013341:	53                   	push   ebx
c0013342:	83 ec 10             	sub    esp,0x10
c0013345:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013349:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001334c:	68 95 0e 02 c0       	push   0xc0020e95
c0013351:	e8 f3 75 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0013356:	58                   	pop    eax
c0013357:	5a                   	pop    edx
c0013358:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001335b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001335e:	e8 79 f5 ff ff       	call   c00128dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013363:	83 c4 18             	add    esp,0x18
c0013366:	99                   	cdq    
c0013367:	5b                   	pop    ebx
c0013368:	c3                   	ret    

c0013369 <SysRegistryEnterDirectory(regs*)>:
c0013369:	53                   	push   ebx
c001336a:	83 ec 10             	sub    esp,0x10
c001336d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013371:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013374:	68 b8 0e 02 c0       	push   0xc0020eb8
c0013379:	e8 cb 75 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001337e:	58                   	pop    eax
c001337f:	5a                   	pop    edx
c0013380:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013383:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013386:	e8 39 eb ff ff       	call   c0011ec4 <CmEnterDirectory(Reghive_Tag*, int)>
c001338b:	83 c4 18             	add    esp,0x18
c001338e:	99                   	cdq    
c001338f:	5b                   	pop    ebx
c0013390:	c3                   	ret    

c0013391 <SysRegistryGetNext(regs*)>:
c0013391:	53                   	push   ebx
c0013392:	83 ec 10             	sub    esp,0x10
c0013395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013399:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001339c:	68 d6 0e 02 c0       	push   0xc0020ed6
c00133a1:	e8 a3 75 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00133a6:	58                   	pop    eax
c00133a7:	5a                   	pop    edx
c00133a8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ae:	e8 50 eb ff ff       	call   c0011f03 <CmGetNext(Reghive_Tag*, int)>
c00133b3:	83 c4 18             	add    esp,0x18
c00133b6:	99                   	cdq    
c00133b7:	5b                   	pop    ebx
c00133b8:	c3                   	ret    

c00133b9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133b9:	57                   	push   edi
c00133ba:	56                   	push   esi
c00133bb:	53                   	push   ebx
c00133bc:	81 ec 34 01 00 00    	sub    esp,0x134
c00133c2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133c9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133cd:	57                   	push   edi
c00133ce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133d4:	e8 e8 f0 ff ff       	call   c00124c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133d9:	89 c3                	mov    ebx,eax
c00133db:	58                   	pop    eax
c00133dc:	5a                   	pop    edx
c00133dd:	57                   	push   edi
c00133de:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133e1:	e8 4a d2 fe ff       	call   c0000630 <strcpy>
c00133e6:	81 c4 40 01 00 00    	add    esp,0x140
c00133ec:	89 d8                	mov    eax,ebx
c00133ee:	5b                   	pop    ebx
c00133ef:	5e                   	pop    esi
c00133f0:	99                   	cdq    
c00133f1:	5f                   	pop    edi
c00133f2:	c3                   	ret    

c00133f3 <SysRegistryOpen(regs*)>:
c00133f3:	83 ec 18             	sub    esp,0x18
c00133f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133fd:	e8 db e8 ff ff       	call   c0011cdd <CmOpen(char const*)>
c0013402:	83 c4 1c             	add    esp,0x1c
c0013405:	99                   	cdq    
c0013406:	c3                   	ret    

c0013407 <SysRegistryClose(regs*)>:
c0013407:	83 ec 18             	sub    esp,0x18
c001340a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001340e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013411:	e8 e5 e9 ff ff       	call   c0011dfb <CmClose(Reghive_Tag*)>
c0013416:	31 c0                	xor    eax,eax
c0013418:	31 d2                	xor    edx,edx
c001341a:	83 c4 1c             	add    esp,0x1c
c001341d:	c3                   	ret    

c001341e <SysSbrk(regs*)>:
c001341e:	56                   	push   esi
c001341f:	53                   	push   ebx
c0013420:	50                   	push   eax
c0013421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013426:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001342a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001342d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013430:	85 db                	test   ebx,ebx
c0013432:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013438:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001343b:	74 02                	je     c001343f <SysSbrk(regs*)+0x21>
c001343d:	79 06                	jns    c0013445 <SysSbrk(regs*)+0x27>
c001343f:	89 f0                	mov    eax,esi
c0013441:	31 d2                	xor    edx,edx
c0013443:	eb 2a                	jmp    c001346f <SysSbrk(regs*)+0x51>
c0013445:	83 c8 ff             	or     eax,0xffffffff
c0013448:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001344e:	89 c2                	mov    edx,eax
c0013450:	77 1d                	ja     c001346f <SysSbrk(regs*)+0x51>
c0013452:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013458:	50                   	push   eax
c0013459:	c1 ea 0c             	shr    edx,0xc
c001345c:	68 07 0c 00 00       	push   0xc07
c0013461:	52                   	push   edx
c0013462:	51                   	push   ecx
c0013463:	e8 6e 69 ff ff       	call   c0009dd6 <VAS::allocatePages(int, int)>
c0013468:	89 f0                	mov    eax,esi
c001346a:	31 d2                	xor    edx,edx
c001346c:	83 c4 10             	add    esp,0x10
c001346f:	59                   	pop    ecx
c0013470:	5b                   	pop    ebx
c0013471:	5e                   	pop    esi
c0013472:	c3                   	ret    

c0013473 <SysSetCwd(regs*)>:
c0013473:	83 ec 14             	sub    esp,0x14
c0013476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001347a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001347d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013482:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013485:	e8 0b 7e ff ff       	call   c000b295 <Fs::setcwd(Process*, char*)>
c001348a:	83 c4 1c             	add    esp,0x1c
c001348d:	99                   	cdq    
c001348e:	c3                   	ret    

c001348f <SysSetTime(regs*)>:
c001348f:	55                   	push   ebp
c0013490:	31 c9                	xor    ecx,ecx
c0013492:	57                   	push   edi
c0013493:	bd 0c 00 00 00       	mov    ebp,0xc
c0013498:	56                   	push   esi
c0013499:	53                   	push   ebx
c001349a:	31 db                	xor    ebx,ebx
c001349c:	83 ec 10             	sub    esp,0x10
c001349f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134a3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134a6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00134a9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00134ac:	89 c2                	mov    edx,eax
c00134ae:	83 e2 1f             	and    edx,0x1f
c00134b1:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134b7:	c1 e8 05             	shr    eax,0x5
c00134ba:	42                   	inc    edx
c00134bb:	c1 e7 10             	shl    edi,0x10
c00134be:	88 d1                	mov    cl,dl
c00134c0:	31 d2                	xor    edx,edx
c00134c2:	f7 f5                	div    ebp
c00134c4:	88 d5                	mov    ch,dl
c00134c6:	31 d2                	xor    edx,edx
c00134c8:	0f b7 c1             	movzx  eax,cx
c00134cb:	09 f8                	or     eax,edi
c00134cd:	bf 3c 00 00 00       	mov    edi,0x3c
c00134d2:	89 c1                	mov    ecx,eax
c00134d4:	89 f0                	mov    eax,esi
c00134d6:	f7 f7                	div    edi
c00134d8:	c1 e2 10             	shl    edx,0x10
c00134db:	89 dd                	mov    ebp,ebx
c00134dd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134e3:	09 d5                	or     ebp,edx
c00134e5:	31 d2                	xor    edx,edx
c00134e7:	f7 f7                	div    edi
c00134e9:	89 eb                	mov    ebx,ebp
c00134eb:	bf 10 0e 00 00       	mov    edi,0xe10
c00134f0:	88 d7                	mov    bh,dl
c00134f2:	89 f0                	mov    eax,esi
c00134f4:	31 d2                	xor    edx,edx
c00134f6:	f7 f7                	div    edi
c00134f8:	bf 18 00 00 00       	mov    edi,0x18
c00134fd:	31 d2                	xor    edx,edx
c00134ff:	f7 f7                	div    edi
c0013501:	88 d3                	mov    bl,dl
c0013503:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013508:	53                   	push   ebx
c0013509:	51                   	push   ecx
c001350a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013510:	e8 7d 85 ff ff       	call   c000ba92 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013515:	83 c4 1c             	add    esp,0x1c
c0013518:	5b                   	pop    ebx
c0013519:	83 f0 01             	xor    eax,0x1
c001351c:	5e                   	pop    esi
c001351d:	31 d2                	xor    edx,edx
c001351f:	5f                   	pop    edi
c0013520:	0f b6 c0             	movzx  eax,al
c0013523:	5d                   	pop    ebp
c0013524:	c3                   	ret    

c0013525 <SysTimezone(regs*)>:
c0013525:	53                   	push   ebx
c0013526:	83 ec 08             	sub    esp,0x8
c0013529:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001352d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013531:	75 17                	jne    c001354a <SysTimezone(regs*)+0x25>
c0013533:	83 ec 0c             	sub    esp,0xc
c0013536:	68 ed 0e 02 c0       	push   0xc0020eed
c001353b:	e8 09 74 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0013540:	83 c8 ff             	or     eax,0xffffffff
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	89 c2                	mov    edx,eax
c0013548:	eb 20                	jmp    c001356a <SysTimezone(regs*)+0x45>
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	68 02 0f 02 c0       	push   0xc0020f02
c0013552:	e8 f2 73 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0013557:	58                   	pop    eax
c0013558:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001355b:	e8 9c 82 ff ff       	call   c000b7fc <User::loadClockSettings(int)>
c0013560:	83 c4 10             	add    esp,0x10
c0013563:	b8 01 00 00 00       	mov    eax,0x1
c0013568:	31 d2                	xor    edx,edx
c001356a:	83 c4 08             	add    esp,0x8
c001356d:	5b                   	pop    ebx
c001356e:	c3                   	ret    

c001356f <SysWrite(regs*)>:
c001356f:	57                   	push   edi
c0013570:	56                   	push   esi
c0013571:	53                   	push   ebx
c0013572:	83 ec 10             	sub    esp,0x10
c0013575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013579:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001357c:	83 f8 02             	cmp    eax,0x2
c001357f:	77 10                	ja     c0013591 <SysWrite(regs*)+0x22>
c0013581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013586:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013589:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001358f:	eb 0e                	jmp    c001359f <SysWrite(regs*)+0x30>
c0013591:	83 ec 0c             	sub    esp,0xc
c0013594:	50                   	push   eax
c0013595:	e8 f5 5e ff ff       	call   c000948f <getFromFileDescriptor(int)>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	89 c1                	mov    ecx,eax
c001359f:	83 c8 ff             	or     eax,0xffffffff
c00135a2:	85 c9                	test   ecx,ecx
c00135a4:	89 c2                	mov    edx,eax
c00135a6:	74 28                	je     c00135d0 <SysWrite(regs*)+0x61>
c00135a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135b0:	83 ec 0c             	sub    esp,0xc
c00135b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b5:	31 ff                	xor    edi,edi
c00135b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135bb:	52                   	push   edx
c00135bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135bf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135c2:	57                   	push   edi
c00135c3:	56                   	push   esi
c00135c4:	51                   	push   ecx
c00135c5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135cc:	83 c4 20             	add    esp,0x20
c00135cf:	99                   	cdq    
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	5b                   	pop    ebx
c00135d4:	5e                   	pop    esi
c00135d5:	5f                   	pop    edi
c00135d6:	c3                   	ret    

c00135d7 <SysWsbe(regs*)>:
c00135d7:	57                   	push   edi
c00135d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00135dd:	56                   	push   esi
c00135de:	be 41 0f 02 c0       	mov    esi,0xc0020f41
c00135e3:	53                   	push   ebx
c00135e4:	83 ec 30             	sub    esp,0x30
c00135e7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135eb:	fc                   	cld    
c00135ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135f3:	83 ec 0c             	sub    esp,0xc
c00135f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135f9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135fd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013603:	8b 06                	mov    eax,DWORD PTR [esi]
c0013605:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013608:	57                   	push   edi
c0013609:	e8 52 cf fe ff       	call   c0000560 <strlen>
c001360e:	5a                   	pop    edx
c001360f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013613:	52                   	push   edx
c0013614:	31 d2                	xor    edx,edx
c0013616:	57                   	push   edi
c0013617:	52                   	push   edx
c0013618:	50                   	push   eax
c0013619:	56                   	push   esi
c001361a:	ff d3                	call   ebx
c001361c:	83 c4 14             	add    esp,0x14
c001361f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013623:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013626:	e8 a1 23 00 00       	call   c00159cc <terminateTask(int)>
c001362b:	83 c4 40             	add    esp,0x40
c001362e:	5b                   	pop    ebx
c001362f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013634:	5e                   	pop    esi
c0013635:	31 d2                	xor    edx,edx
c0013637:	5f                   	pop    edi
c0013638:	c3                   	ret    

c0013639 <SysYield(regs*)>:
c0013639:	83 ec 0c             	sub    esp,0xc
c001363c:	fa                   	cli    
c001363d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013643:	e8 f8 19 00 00       	call   c0015040 <schedule()>
c0013648:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001364d:	48                   	dec    eax
c001364e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013653:	75 01                	jne    c0013656 <SysYield(regs*)+0x1d>
c0013655:	fb                   	sti    
c0013656:	31 c0                	xor    eax,eax
c0013658:	31 d2                	xor    edx,edx
c001365a:	83 c4 0c             	add    esp,0xc
c001365d:	c3                   	ret    

c001365e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001365e:	55                   	push   ebp
c001365f:	57                   	push   edi
c0013660:	56                   	push   esi
c0013661:	53                   	push   ebx
c0013662:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013668:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013673:	74 3b                	je     c00136b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013675:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001367d:	74 31                	je     c00136b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001367f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013687:	75 27                	jne    c00136b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013689:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013690:	05 00 10 00 00       	add    eax,0x1000
c0013695:	89 c2                	mov    edx,eax
c0013697:	25 00 f0 ff ff       	and    eax,0xfffff000
c001369c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00136a2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00136a9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00136b0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136b7:	83 ec 0c             	sub    esp,0xc
c00136ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136c0:	6a 01                	push   0x1
c00136c2:	e8 22 5f ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c00136c7:	83 c4 10             	add    esp,0x10
c00136ca:	89 c3                	mov    ebx,eax
c00136cc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136d2:	0f 86 26 01 00 00    	jbe    c00137fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00136d8:	c1 ee 0c             	shr    esi,0xc
c00136db:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136e2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136ee:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136f9:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013700:	29 ef                	sub    edi,ebp
c0013702:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013706:	0f 83 f9 00 00 00    	jae    c0013805 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001370c:	b8 00 10 00 00       	mov    eax,0x1000
c0013711:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013717:	0f 47 f8             	cmova  edi,eax
c001371a:	83 ec 0c             	sub    esp,0xc
c001371d:	31 d2                	xor    edx,edx
c001371f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013726:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013728:	8d 44 24 28          	lea    eax,[esp+0x28]
c001372c:	50                   	push   eax
c001372d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013731:	56                   	push   esi
c0013732:	52                   	push   edx
c0013733:	57                   	push   edi
c0013734:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001373b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001373e:	83 c4 20             	add    esp,0x20
c0013741:	85 c0                	test   eax,eax
c0013743:	75 06                	jne    c001374b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013745:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013749:	74 13                	je     c001375e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001374b:	83 ec 0c             	sub    esp,0xc
c001374e:	53                   	push   ebx
c001374f:	e8 af 61 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	31 c0                	xor    eax,eax
c0013759:	e9 7c 01 00 00       	jmp    c00138da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001375e:	fa                   	cli    
c001375f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013765:	e8 28 46 ff ff       	call   c0007d92 <Phys::allocatePage()>
c001376a:	6a 07                	push   0x7
c001376c:	89 c7                	mov    edi,eax
c001376e:	53                   	push   ebx
c001376f:	50                   	push   eax
c0013770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013775:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013778:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001377e:	e8 4d 65 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013783:	83 c4 0c             	add    esp,0xc
c0013786:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001378d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013793:	6a 00                	push   0x0
c0013795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001379a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001379d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a3:	e8 8e 63 ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c00137a8:	58                   	pop    eax
c00137a9:	5a                   	pop    edx
c00137aa:	68 07 0c 00 00       	push   0xc07
c00137af:	55                   	push   ebp
c00137b0:	57                   	push   edi
c00137b1:	89 df                	mov    edi,ebx
c00137b3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137c0:	6a 00                	push   0x0
c00137c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137d0:	e8 e5 68 ff ff       	call   c000a0ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137d5:	b9 00 10 00 00       	mov    ecx,0x1000
c00137da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137e1:	83 c4 20             	add    esp,0x20
c00137e4:	48                   	dec    eax
c00137e5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137ea:	85 c0                	test   eax,eax
c00137ec:	75 01                	jne    c00137ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137ee:	fb                   	sti    
c00137ef:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137f5:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137f9:	e9 f0 fe ff ff       	jmp    c00136ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137fe:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013805:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001380c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013812:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013818:	0f 86 ae 00 00 00    	jbe    c00138cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001381e:	fa                   	cli    
c001381f:	51                   	push   ecx
c0013820:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013826:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001382d:	31 ff                	xor    edi,edi
c001382f:	c1 ee 0c             	shr    esi,0xc
c0013832:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013838:	6a 00                	push   0x0
c001383a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013842:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013848:	e8 e9 62 ff ff       	call   c0009b36 <VAS::mapOtherVASIn(bool, VAS*)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	e8 3d 45 ff ff       	call   c0007d92 <Phys::allocatePage()>
c0013855:	6a 07                	push   0x7
c0013857:	53                   	push   ebx
c0013858:	47                   	inc    edi
c0013859:	50                   	push   eax
c001385a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001385e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013864:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013867:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001386d:	e8 5e 64 ff ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013872:	58                   	pop    eax
c0013873:	5a                   	pop    edx
c0013874:	68 07 0c 00 00       	push   0xc07
c0013879:	55                   	push   ebp
c001387a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013884:	50                   	push   eax
c0013885:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001388c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013892:	6a 00                	push   0x0
c0013894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013899:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001389c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138a2:	e8 13 68 ff ff       	call   c000a0ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00138a7:	83 c4 1c             	add    esp,0x1c
c00138aa:	68 00 10 00 00       	push   0x1000
c00138af:	6a 00                	push   0x0
c00138b1:	53                   	push   ebx
c00138b2:	e8 29 cc fe ff       	call   c00004e0 <memset>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	39 fe                	cmp    esi,edi
c00138bc:	77 92                	ja     c0013850 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00138be:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138c3:	48                   	dec    eax
c00138c4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138c9:	75 01                	jne    c00138cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138cb:	fb                   	sti    
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	53                   	push   ebx
c00138d0:	e8 2e 60 ff ff       	call   c0009903 <Virt::freeKernelVirtualPages(unsigned long)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	b0 01                	mov    al,0x1
c00138da:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138e0:	5b                   	pop    ebx
c00138e1:	5e                   	pop    esi
c00138e2:	5f                   	pop    edi
c00138e3:	5d                   	pop    ebp
c00138e4:	c3                   	ret    

c00138e5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138e5:	55                   	push   ebp
c00138e6:	57                   	push   edi
c00138e7:	56                   	push   esi
c00138e8:	53                   	push   ebx
c00138e9:	83 ec 48             	sub    esp,0x48
c00138ec:	68 14 01 00 00       	push   0x114
c00138f1:	e8 91 41 ff ff       	call   c0007a87 <malloc>
c00138f6:	83 c4 0c             	add    esp,0xc
c00138f9:	89 c6                	mov    esi,eax
c00138fb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013903:	50                   	push   eax
c0013904:	e8 c3 75 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0013909:	58                   	pop    eax
c001390a:	5a                   	pop    edx
c001390b:	6a 01                	push   0x1
c001390d:	56                   	push   esi
c001390e:	e8 75 76 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	85 c0                	test   eax,eax
c0013918:	0f 85 47 01 00 00    	jne    c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001391e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	6a 34                	push   0x34
c001392b:	e8 57 41 ff ff       	call   c0007a87 <malloc>
c0013930:	89 c3                	mov    ebx,eax
c0013932:	58                   	pop    eax
c0013933:	8b 06                	mov    eax,DWORD PTR [esi]
c0013935:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013939:	57                   	push   edi
c001393a:	53                   	push   ebx
c001393b:	6a 00                	push   0x0
c001393d:	6a 34                	push   0x34
c001393f:	56                   	push   esi
c0013940:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013943:	83 c4 20             	add    esp,0x20
c0013946:	85 c0                	test   eax,eax
c0013948:	0f 85 17 01 00 00    	jne    c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001394e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013954:	0f 85 0b 01 00 00    	jne    c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001395a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001395d:	85 c0                	test   eax,eax
c001395f:	0f 84 00 01 00 00    	je     c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013965:	31 d2                	xor    edx,edx
c0013967:	55                   	push   ebp
c0013968:	52                   	push   edx
c0013969:	50                   	push   eax
c001396a:	56                   	push   esi
c001396b:	e8 d6 76 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	85 c0                	test   eax,eax
c0013975:	0f 85 ea 00 00 00    	jne    c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001397b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001397e:	83 ec 0c             	sub    esp,0xc
c0013981:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013985:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013989:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001398d:	0f af c2             	imul   eax,edx
c0013990:	50                   	push   eax
c0013991:	e8 f1 40 ff ff       	call   c0007a87 <malloc>
c0013996:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001399a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001399c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001399f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139a3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139a7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139ab:	0f af c2             	imul   eax,edx
c00139ae:	99                   	cdq    
c00139af:	52                   	push   edx
c00139b0:	50                   	push   eax
c00139b1:	56                   	push   esi
c00139b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139b5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139b8:	83 c4 20             	add    esp,0x20
c00139bb:	85 c0                	test   eax,eax
c00139bd:	0f 84 a2 00 00 00    	je     c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00139c3:	31 d2                	xor    edx,edx
c00139c5:	51                   	push   ecx
c00139c6:	52                   	push   edx
c00139c7:	50                   	push   eax
c00139c8:	56                   	push   esi
c00139c9:	e8 78 76 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	85 c0                	test   eax,eax
c00139d3:	0f 85 8c 00 00 00    	jne    c0013a65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00139d9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139dd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139e1:	0f af c2             	imul   eax,edx
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	31 ed                	xor    ebp,ebp
c00139e9:	50                   	push   eax
c00139ea:	e8 98 40 ff ff       	call   c0007a87 <malloc>
c00139ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00139f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139fc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a00:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a04:	0f af c2             	imul   eax,edx
c0013a07:	99                   	cdq    
c0013a08:	52                   	push   edx
c0013a09:	50                   	push   eax
c0013a0a:	56                   	push   esi
c0013a0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a0e:	83 c4 20             	add    esp,0x20
c0013a11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a19:	0f b7 fd             	movzx  edi,bp
c0013a1c:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013a20:	0f 83 80 00 00 00    	jae    c0013aa6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013a26:	c1 e7 05             	shl    edi,0x5
c0013a29:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013a2d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013a30:	75 6e                	jne    c0013aa0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1bb>
c0013a32:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013a35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a39:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013a3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a40:	52                   	push   edx
c0013a41:	31 d2                	xor    edx,edx
c0013a43:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013a46:	52                   	push   edx
c0013a47:	50                   	push   eax
c0013a48:	56                   	push   esi
c0013a49:	e8 f8 75 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	85 c0                	test   eax,eax
c0013a53:	74 17                	je     c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0013a55:	83 ec 0c             	sub    esp,0xc
c0013a58:	68 6d 0f 02 c0       	push   0xc0020f6d
c0013a5d:	e8 e7 6e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0013a62:	83 c4 10             	add    esp,0x10
c0013a65:	31 c0                	xor    eax,eax
c0013a67:	e9 8a 00 00 00       	jmp    c0013af6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x211>
c0013a6c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013a75:	50                   	push   eax
c0013a76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7e:	56                   	push   esi
c0013a7f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a83:	e8 d6 fb ff ff       	call   c001365e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a8c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013a90:	83 c4 20             	add    esp,0x20
c0013a93:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013a97:	0f 43 44 24 08       	cmovae eax,DWORD PTR [esp+0x8]
c0013a9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aa0:	45                   	inc    ebp
c0013aa1:	e9 73 ff ff ff       	jmp    c0013a19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013aa6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013aaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ab2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ab7:	83 ec 0c             	sub    esp,0xc
c0013aba:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013ac0:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ac6:	05 00 10 00 00       	add    eax,0x1000
c0013acb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad2:	e8 c0 3f ff ff       	call   c0007a97 <free>
c0013ad7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ada:	e8 b8 3f ff ff       	call   c0007a97 <free>
c0013adf:	58                   	pop    eax
c0013ae0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae4:	e8 ae 3f ff ff       	call   c0007a97 <free>
c0013ae9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013aec:	e8 f5 74 ff ff       	call   c000afe6 <File::close()>
c0013af1:	83 c4 10             	add    esp,0x10
c0013af4:	b0 01                	mov    al,0x1
c0013af6:	83 c4 3c             	add    esp,0x3c
c0013af9:	5b                   	pop    ebx
c0013afa:	5e                   	pop    esi
c0013afb:	5f                   	pop    edi
c0013afc:	5d                   	pop    ebp
c0013afd:	c3                   	ret    

c0013afe <Thr::runtimeReferenceHelper()>:
c0013afe:	83 ec 18             	sub    esp,0x18
c0013b01:	68 75 0f 02 c0       	push   0xc0020f75
c0013b06:	e8 3e 6e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0013b0b:	fa                   	cli    
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	eb fe                	jmp    c0013b0f <Thr::runtimeReferenceHelper()+0x11>

c0013b11 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b11:	57                   	push   edi
c0013b12:	56                   	push   esi
c0013b13:	53                   	push   ebx
c0013b14:	31 db                	xor    ebx,ebx
c0013b16:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b1c:	7e 3c                	jle    c0013b5a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b1e:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b25:	31 ff                	xor    edi,edi
c0013b27:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b2e:	7e 27                	jle    c0013b57 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b30:	50                   	push   eax
c0013b31:	50                   	push   eax
c0013b32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b36:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b38:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b3f:	50                   	push   eax
c0013b40:	e8 fb cb fe ff       	call   c0000740 <strcmp>
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	85 c0                	test   eax,eax
c0013b4a:	75 05                	jne    c0013b51 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b4f:	eb 0b                	jmp    c0013b5c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b51:	83 c6 10             	add    esi,0x10
c0013b54:	47                   	inc    edi
c0013b55:	eb d0                	jmp    c0013b27 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b57:	43                   	inc    ebx
c0013b58:	eb bc                	jmp    c0013b16 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b5a:	31 c0                	xor    eax,eax
c0013b5c:	5b                   	pop    ebx
c0013b5d:	5e                   	pop    esi
c0013b5e:	5f                   	pop    edi
c0013b5f:	c3                   	ret    

c0013b60 <Thr::loadKernelSymbolTable(char const*)>:
c0013b60:	55                   	push   ebp
c0013b61:	57                   	push   edi
c0013b62:	56                   	push   esi
c0013b63:	53                   	push   ebx
c0013b64:	83 ec 68             	sub    esp,0x68
c0013b67:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b6d:	68 14 01 00 00       	push   0x114
c0013b72:	e8 10 3f ff ff       	call   c0007a87 <malloc>
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	89 c3                	mov    ebx,eax
c0013b7c:	56                   	push   esi
c0013b7d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b81:	50                   	push   eax
c0013b82:	e8 45 73 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0013b87:	5e                   	pop    esi
c0013b88:	5f                   	pop    edi
c0013b89:	6a 01                	push   0x1
c0013b8b:	53                   	push   ebx
c0013b8c:	e8 f7 73 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	85 c0                	test   eax,eax
c0013b96:	74 0a                	je     c0013ba2 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	68 97 0f 02 c0       	push   0xc0020f97
c0013ba0:	eb 34                	jmp    c0013bd6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013ba2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	6a 34                	push   0x34
c0013baf:	e8 d3 3e ff ff       	call   c0007a87 <malloc>
c0013bb4:	59                   	pop    ecx
c0013bb5:	89 c7                	mov    edi,eax
c0013bb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb9:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bbd:	56                   	push   esi
c0013bbe:	57                   	push   edi
c0013bbf:	6a 00                	push   0x0
c0013bc1:	6a 34                	push   0x34
c0013bc3:	53                   	push   ebx
c0013bc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc7:	83 c4 20             	add    esp,0x20
c0013bca:	85 c0                	test   eax,eax
c0013bcc:	74 17                	je     c0013be5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bce:	83 ec 0c             	sub    esp,0xc
c0013bd1:	68 ae 0f 02 c0       	push   0xc0020fae
c0013bd6:	e8 5c cc ff ff       	call   c0010837 <KePanic(char const*)>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	31 c0                	xor    eax,eax
c0013be0:	e9 31 02 00 00       	jmp    c0013e16 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013be5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013beb:	75 e1                	jne    c0013bce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bed:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bf0:	85 c0                	test   eax,eax
c0013bf2:	74 da                	je     c0013bce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bf4:	52                   	push   edx
c0013bf5:	31 d2                	xor    edx,edx
c0013bf7:	52                   	push   edx
c0013bf8:	50                   	push   eax
c0013bf9:	53                   	push   ebx
c0013bfa:	e8 47 74 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013bff:	83 c4 10             	add    esp,0x10
c0013c02:	85 c0                	test   eax,eax
c0013c04:	75 c8                	jne    c0013bce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c06:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c0a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c0e:	0f af c2             	imul   eax,edx
c0013c11:	83 ec 0c             	sub    esp,0xc
c0013c14:	31 ed                	xor    ebp,ebp
c0013c16:	50                   	push   eax
c0013c17:	e8 6b 3e ff ff       	call   c0007a87 <malloc>
c0013c1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c20:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c22:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c29:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c2d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c31:	0f af c2             	imul   eax,edx
c0013c34:	99                   	cdq    
c0013c35:	52                   	push   edx
c0013c36:	50                   	push   eax
c0013c37:	53                   	push   ebx
c0013c38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c3b:	83 c4 20             	add    esp,0x20
c0013c3e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c46:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c4e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c5e:	0f b7 f5             	movzx  esi,bp
c0013c61:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c65:	0f 83 a7 00 00 00    	jae    c0013d12 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c6b:	6b f6 28             	imul   esi,esi,0x28
c0013c6e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c79:	50                   	push   eax
c0013c7a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c7e:	6b c0 28             	imul   eax,eax,0x28
c0013c81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c85:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c87:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c8b:	89 d0                	mov    eax,edx
c0013c8d:	31 d2                	xor    edx,edx
c0013c8f:	52                   	push   edx
c0013c90:	50                   	push   eax
c0013c91:	53                   	push   ebx
c0013c92:	e8 af 73 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013c97:	83 c4 0c             	add    esp,0xc
c0013c9a:	6a 20                	push   0x20
c0013c9c:	6a 00                	push   0x0
c0013c9e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ca2:	52                   	push   edx
c0013ca3:	e8 38 c8 fe ff       	call   c00004e0 <memset>
c0013ca8:	58                   	pop    eax
c0013ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cab:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013caf:	51                   	push   ecx
c0013cb0:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013cb4:	52                   	push   edx
c0013cb5:	6a 00                	push   0x0
c0013cb7:	6a 1f                	push   0x1f
c0013cb9:	53                   	push   ebx
c0013cba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cbd:	83 c4 18             	add    esp,0x18
c0013cc0:	68 c5 0f 02 c0       	push   0xc0020fc5
c0013cc5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cc9:	52                   	push   edx
c0013cca:	e8 71 ca fe ff       	call   c0000740 <strcmp>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	85 c0                	test   eax,eax
c0013cd4:	75 0f                	jne    c0013ce5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cd6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ce5:	50                   	push   eax
c0013ce6:	50                   	push   eax
c0013ce7:	68 cd 0f 02 c0       	push   0xc0020fcd
c0013cec:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cf0:	50                   	push   eax
c0013cf1:	e8 4a ca fe ff       	call   c0000740 <strcmp>
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	85 c0                	test   eax,eax
c0013cfb:	75 0f                	jne    c0013d0c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013cfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d0c:	45                   	inc    ebp
c0013d0d:	e9 4c ff ff ff       	jmp    c0013c5e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d12:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d17:	75 10                	jne    c0013d29 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d19:	83 ec 0c             	sub    esp,0xc
c0013d1c:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d21:	e8 11 cb ff ff       	call   c0010837 <KePanic(char const*)>
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d2e:	75 10                	jne    c0013d40 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d30:	83 ec 0c             	sub    esp,0xc
c0013d33:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d38:	e8 fa ca ff ff       	call   c0010837 <KePanic(char const*)>
c0013d3d:	83 c4 10             	add    esp,0x10
c0013d40:	31 d2                	xor    edx,edx
c0013d42:	50                   	push   eax
c0013d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d47:	52                   	push   edx
c0013d48:	50                   	push   eax
c0013d49:	53                   	push   ebx
c0013d4a:	e8 f7 72 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013d4f:	5a                   	pop    edx
c0013d50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d54:	e8 2e 3d ff ff       	call   c0007a87 <malloc>
c0013d59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d61:	5e                   	pop    esi
c0013d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d64:	31 c9                	xor    ecx,ecx
c0013d66:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d6a:	55                   	push   ebp
c0013d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6f:	51                   	push   ecx
c0013d70:	52                   	push   edx
c0013d71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d75:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d79:	53                   	push   ebx
c0013d7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d7d:	83 c4 14             	add    esp,0x14
c0013d80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d84:	e8 fe 3c ff ff       	call   c0007a87 <malloc>
c0013d89:	89 c6                	mov    esi,eax
c0013d8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d8d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d90:	56                   	push   esi
c0013d91:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d95:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d99:	51                   	push   ecx
c0013d9a:	52                   	push   edx
c0013d9b:	53                   	push   ebx
c0013d9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013da3:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013da9:	c1 e8 04             	shr    eax,0x4
c0013dac:	83 c4 1c             	add    esp,0x1c
c0013daf:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013db6:	31 d2                	xor    edx,edx
c0013db8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dbc:	52                   	push   edx
c0013dbd:	50                   	push   eax
c0013dbe:	53                   	push   ebx
c0013dbf:	e8 82 72 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013dc4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013dc6:	31 d2                	xor    edx,edx
c0013dc8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dcb:	56                   	push   esi
c0013dcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dd0:	52                   	push   edx
c0013dd1:	50                   	push   eax
c0013dd2:	53                   	push   ebx
c0013dd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dd6:	83 c4 14             	add    esp,0x14
c0013dd9:	53                   	push   ebx
c0013dda:	e8 07 72 ff ff       	call   c000afe6 <File::close()>
c0013ddf:	5d                   	pop    ebp
c0013de0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013de4:	e8 ae 3c ff ff       	call   c0007a97 <free>
c0013de9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dec:	e8 a6 3c ff ff       	call   c0007a97 <free>
c0013df1:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013df6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dfa:	8d 50 01             	lea    edx,[eax+0x1]
c0013dfd:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e04:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e0b:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	b0 01                	mov    al,0x1
c0013e16:	83 c4 5c             	add    esp,0x5c
c0013e19:	5b                   	pop    ebx
c0013e1a:	5e                   	pop    esi
c0013e1b:	5f                   	pop    edi
c0013e1c:	5d                   	pop    ebp
c0013e1d:	c3                   	ret    

c0013e1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e1e:	55                   	push   ebp
c0013e1f:	57                   	push   edi
c0013e20:	56                   	push   esi
c0013e21:	53                   	push   ebx
c0013e22:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e28:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e2e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e35:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013e39:	68 14 01 00 00       	push   0x114
c0013e3e:	e8 44 3c ff ff       	call   c0007a87 <malloc>
c0013e43:	83 c4 0c             	add    esp,0xc
c0013e46:	53                   	push   ebx
c0013e47:	89 c5                	mov    ebp,eax
c0013e49:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e50:	50                   	push   eax
c0013e51:	e8 76 70 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0013e56:	5e                   	pop    esi
c0013e57:	5f                   	pop    edi
c0013e58:	6a 01                	push   0x1
c0013e5a:	55                   	push   ebp
c0013e5b:	e8 28 71 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	85 c0                	test   eax,eax
c0013e65:	0f 85 ab 06 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013e6b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e73:	83 ec 0c             	sub    esp,0xc
c0013e76:	6a 34                	push   0x34
c0013e78:	e8 0a 3c ff ff       	call   c0007a87 <malloc>
c0013e7d:	5b                   	pop    ebx
c0013e7e:	89 c7                	mov    edi,eax
c0013e80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e83:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e87:	53                   	push   ebx
c0013e88:	57                   	push   edi
c0013e89:	6a 00                	push   0x0
c0013e8b:	6a 34                	push   0x34
c0013e8d:	55                   	push   ebp
c0013e8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e91:	83 c4 20             	add    esp,0x20
c0013e94:	85 c0                	test   eax,eax
c0013e96:	0f 85 7a 06 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013e9c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ea2:	0f 85 6e 06 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013ea8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013eab:	85 c0                	test   eax,eax
c0013ead:	0f 84 63 06 00 00    	je     c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013eb3:	31 d2                	xor    edx,edx
c0013eb5:	51                   	push   ecx
c0013eb6:	52                   	push   edx
c0013eb7:	50                   	push   eax
c0013eb8:	55                   	push   ebp
c0013eb9:	e8 88 71 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013ebe:	83 c4 10             	add    esp,0x10
c0013ec1:	85 c0                	test   eax,eax
c0013ec3:	0f 85 4d 06 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013ec9:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013ed3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ed7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013edb:	0f af c2             	imul   eax,edx
c0013ede:	50                   	push   eax
c0013edf:	e8 a3 3b ff ff       	call   c0007a87 <malloc>
c0013ee4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013eeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ef2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ef6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013efa:	0f af c2             	imul   eax,edx
c0013efd:	99                   	cdq    
c0013efe:	52                   	push   edx
c0013eff:	50                   	push   eax
c0013f00:	55                   	push   ebp
c0013f01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f04:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013f07:	83 c4 20             	add    esp,0x20
c0013f0a:	85 c0                	test   eax,eax
c0013f0c:	0f 84 04 06 00 00    	je     c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013f12:	52                   	push   edx
c0013f13:	31 d2                	xor    edx,edx
c0013f15:	52                   	push   edx
c0013f16:	50                   	push   eax
c0013f17:	55                   	push   ebp
c0013f18:	e8 29 71 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	85 c0                	test   eax,eax
c0013f22:	0f 85 ee 05 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013f28:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f2c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f30:	0f af c2             	imul   eax,edx
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	31 f6                	xor    esi,esi
c0013f38:	50                   	push   eax
c0013f39:	e8 49 3b ff ff       	call   c0007a87 <malloc>
c0013f3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f42:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f50:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f54:	0f af c2             	imul   eax,edx
c0013f57:	99                   	cdq    
c0013f58:	52                   	push   edx
c0013f59:	50                   	push   eax
c0013f5a:	55                   	push   ebp
c0013f5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f5e:	83 c4 20             	add    esp,0x20
c0013f61:	0f b7 de             	movzx  ebx,si
c0013f64:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013f68:	0f 83 86 00 00 00    	jae    c0013ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d6>
c0013f6e:	c1 e3 05             	shl    ebx,0x5
c0013f71:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0013f75:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013f78:	75 74                	jne    c0013fee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d0>
c0013f7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013f7d:	31 d2                	xor    edx,edx
c0013f7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013f85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f89:	50                   	push   eax
c0013f8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f8d:	52                   	push   edx
c0013f8e:	50                   	push   eax
c0013f8f:	55                   	push   ebp
c0013f90:	e8 b1 70 ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0013f95:	83 c4 10             	add    esp,0x10
c0013f98:	85 c0                	test   eax,eax
c0013f9a:	0f 85 76 05 00 00    	jne    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013fa0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0013fae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fb1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013fb5:	31 d2                	xor    edx,edx
c0013fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fbb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fc2:	50                   	push   eax
c0013fc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013fc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	55                   	push   ebp
c0013fce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fd1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013fd4:	83 c4 1c             	add    esp,0x1c
c0013fd7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013fda:	50                   	push   eax
c0013fdb:	6a 00                	push   0x0
c0013fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fe1:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0013fe5:	50                   	push   eax
c0013fe6:	e8 f5 c4 fe ff       	call   c00004e0 <memset>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	46                   	inc    esi
c0013fef:	e9 6d ff ff ff       	jmp    c0013f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013ff4:	50                   	push   eax
c0013ff5:	31 db                	xor    ebx,ebx
c0013ff7:	68 00 01 00 00       	push   0x100
c0013ffc:	6a 00                	push   0x0
c0013ffe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014002:	50                   	push   eax
c0014003:	e8 d8 c4 fe ff       	call   c00004e0 <memset>
c0014008:	83 c4 0c             	add    esp,0xc
c001400b:	68 00 01 00 00       	push   0x100
c0014010:	6a 00                	push   0x0
c0014012:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014019:	50                   	push   eax
c001401a:	e8 c1 c4 fe ff       	call   c00004e0 <memset>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014029:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014031:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014039:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014041:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014049:	0f b7 f3             	movzx  esi,bx
c001404c:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014050:	0f 83 27 01 00 00    	jae    c001417d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35f>
c0014056:	6b f6 28             	imul   esi,esi,0x28
c0014059:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c001405d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014064:	50                   	push   eax
c0014065:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014069:	6b d2 28             	imul   edx,edx,0x28
c001406c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014070:	8b 06                	mov    eax,DWORD PTR [esi]
c0014072:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014076:	31 d2                	xor    edx,edx
c0014078:	52                   	push   edx
c0014079:	50                   	push   eax
c001407a:	55                   	push   ebp
c001407b:	e8 c6 6f ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0014080:	83 c4 0c             	add    esp,0xc
c0014083:	6a 20                	push   0x20
c0014085:	6a 00                	push   0x0
c0014087:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001408e:	51                   	push   ecx
c001408f:	e8 4c c4 fe ff       	call   c00004e0 <memset>
c0014094:	58                   	pop    eax
c0014095:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014098:	8d 54 24 58          	lea    edx,[esp+0x58]
c001409c:	52                   	push   edx
c001409d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00140a4:	51                   	push   ecx
c00140a5:	6a 00                	push   0x0
c00140a7:	6a 1f                	push   0x1f
c00140a9:	55                   	push   ebp
c00140aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140ad:	83 c4 1c             	add    esp,0x1c
c00140b0:	6a 09                	push   0x9
c00140b2:	68 ef 0f 02 c0       	push   0xc0020fef
c00140b7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140be:	51                   	push   ecx
c00140bf:	e8 bc c2 fe ff       	call   c0000380 <memcmp>
c00140c4:	83 c4 10             	add    esp,0x10
c00140c7:	85 c0                	test   eax,eax
c00140c9:	75 1e                	jne    c00140e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2cb>
c00140cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140d2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00140d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140dc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140e3:	89 d0                	mov    eax,edx
c00140e5:	40                   	inc    eax
c00140e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e9:	50                   	push   eax
c00140ea:	6a 09                	push   0x9
c00140ec:	68 f9 0f 02 c0       	push   0xc0020ff9
c00140f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140f8:	50                   	push   eax
c00140f9:	e8 82 c2 fe ff       	call   c0000380 <memcmp>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	85 c0                	test   eax,eax
c0014103:	75 1e                	jne    c0014123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x305>
c0014105:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014108:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001410c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001410f:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014113:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014116:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001411d:	89 d0                	mov    eax,edx
c001411f:	40                   	inc    eax
c0014120:	89 04 24             	mov    DWORD PTR [esp],eax
c0014123:	50                   	push   eax
c0014124:	50                   	push   eax
c0014125:	68 c5 0f 02 c0       	push   0xc0020fc5
c001412a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014131:	50                   	push   eax
c0014132:	e8 09 c6 fe ff       	call   c0000740 <strcmp>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	85 c0                	test   eax,eax
c001413c:	75 0f                	jne    c001414d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001413e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014141:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001414d:	51                   	push   ecx
c001414e:	51                   	push   ecx
c001414f:	68 cd 0f 02 c0       	push   0xc0020fcd
c0014154:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001415b:	50                   	push   eax
c001415c:	e8 df c5 fe ff       	call   c0000740 <strcmp>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	85 c0                	test   eax,eax
c0014166:	75 0f                	jne    c0014177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0014168:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001416b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001416f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014173:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014177:	43                   	inc    ebx
c0014178:	e9 cc fe ff ff       	jmp    c0014049 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22b>
c001417d:	31 d2                	xor    edx,edx
c001417f:	50                   	push   eax
c0014180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014184:	52                   	push   edx
c0014185:	50                   	push   eax
c0014186:	55                   	push   ebp
c0014187:	e8 ba 6e ff ff       	call   c000b046 <File::seek(unsigned long long)>
c001418c:	58                   	pop    eax
c001418d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014191:	e8 f1 38 ff ff       	call   c0007a87 <malloc>
c0014196:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014199:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001419d:	5a                   	pop    edx
c001419e:	31 d2                	xor    edx,edx
c00141a0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00141a4:	53                   	push   ebx
c00141a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00141a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141ad:	52                   	push   edx
c00141ae:	50                   	push   eax
c00141af:	55                   	push   ebp
c00141b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b3:	83 c4 14             	add    esp,0x14
c00141b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141ba:	e8 c8 38 ff ff       	call   c0007a87 <malloc>
c00141bf:	31 d2                	xor    edx,edx
c00141c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141c5:	83 c4 0c             	add    esp,0xc
c00141c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141cc:	52                   	push   edx
c00141cd:	50                   	push   eax
c00141ce:	55                   	push   ebp
c00141cf:	e8 72 6e ff ff       	call   c000b046 <File::seek(unsigned long long)>
c00141d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141de:	31 d2                	xor    edx,edx
c00141e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141e4:	52                   	push   edx
c00141e5:	50                   	push   eax
c00141e6:	55                   	push   ebp
c00141e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141ea:	83 c4 20             	add    esp,0x20
c00141ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00141f5:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00141fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00141fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014202:	39 34 24             	cmp    DWORD PTR [esp],esi
c0014205:	0f 84 0f 03 00 00    	je     c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fc>
c001420b:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0014212:	31 d2                	xor    edx,edx
c0014214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014218:	c1 e8 03             	shr    eax,0x3
c001421b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001421f:	50                   	push   eax
c0014220:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014224:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014228:	52                   	push   edx
c0014229:	50                   	push   eax
c001422a:	55                   	push   ebp
c001422b:	e8 16 6e ff ff       	call   c000b046 <File::seek(unsigned long long)>
c0014230:	58                   	pop    eax
c0014231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014235:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001423c:	e8 46 38 ff ff       	call   c0007a87 <malloc>
c0014241:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014244:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014248:	58                   	pop    eax
c0014249:	31 d2                	xor    edx,edx
c001424b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001424f:	50                   	push   eax
c0014250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014258:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001425f:	52                   	push   edx
c0014260:	50                   	push   eax
c0014261:	55                   	push   ebp
c0014262:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014265:	83 c4 20             	add    esp,0x20
c0014268:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014270:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014274:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0014278:	0f 8d 80 02 00 00    	jge    c00144fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c001427e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014286:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c0014289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001428d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014291:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0014295:	31 f6                	xor    esi,esi
c0014297:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001429b:	c1 e8 08             	shr    eax,0x8
c001429e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00142a2:	c1 e0 04             	shl    eax,0x4
c00142a5:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00142a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142ad:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c00142b0:	85 db                	test   ebx,ebx
c00142b2:	0f 85 ab 00 00 00    	jne    c0014363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142b8:	83 ec 0c             	sub    esp,0xc
c00142bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00142bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142c3:	03 06                	add    eax,DWORD PTR [esi]
c00142c5:	be 01 00 00 00       	mov    esi,0x1
c00142ca:	50                   	push   eax
c00142cb:	e8 41 f8 ff ff       	call   c0013b11 <Thr::getAddressOfKernelSymbol(char const*)>
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	89 c3                	mov    ebx,eax
c00142d5:	85 c0                	test   eax,eax
c00142d7:	0f 85 86 00 00 00    	jne    c0014363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00142e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142e8:	03 01                	add    eax,DWORD PTR [ecx]
c00142ea:	50                   	push   eax
c00142eb:	e8 30 c7 ff ff       	call   c0010a20 <KeResolveCompatibilitySymbol(char*)>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	89 c3                	mov    ebx,eax
c00142f5:	85 c0                	test   eax,eax
c00142f7:	75 6a                	jne    c0014363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142f9:	51                   	push   ecx
c00142fa:	51                   	push   ecx
c00142fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014303:	03 06                	add    eax,DWORD PTR [esi]
c0014305:	50                   	push   eax
c0014306:	68 03 10 02 c0       	push   0xc0021003
c001430b:	e8 39 66 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014310:	5e                   	pop    esi
c0014311:	58                   	pop    eax
c0014312:	68 1d 10 02 c0       	push   0xc002101d
c0014317:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c001431e:	56                   	push   esi
c001431f:	e8 0c c3 fe ff       	call   c0000630 <strcpy>
c0014324:	58                   	pop    eax
c0014325:	5a                   	pop    edx
c0014326:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001432a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001432e:	03 02                	add    eax,DWORD PTR [edx]
c0014330:	50                   	push   eax
c0014331:	56                   	push   esi
c0014332:	e8 f9 c4 fe ff       	call   c0000830 <strcat>
c0014337:	59                   	pop    ecx
c0014338:	58                   	pop    eax
c0014339:	68 b3 10 02 c0       	push   0xc00210b3
c001433e:	56                   	push   esi
c001433f:	e8 ec c4 fe ff       	call   c0000830 <strcat>
c0014344:	83 c4 10             	add    esp,0x10
c0014347:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001434c:	0f 84 66 01 00 00    	je     c00144b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	56                   	push   esi
c0014356:	e8 dc c4 ff ff       	call   c0010837 <KePanic(char const*)>
c001435b:	83 c4 10             	add    esp,0x10
c001435e:	0f b6 74 24 3b       	movzx  esi,BYTE PTR [esp+0x3b]
c0014363:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0014368:	83 f8 01             	cmp    eax,0x1
c001436b:	0f 85 95 00 00 00    	jne    c0014406 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e8>
c0014371:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014378:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001437c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014380:	01 c8                	add    eax,ecx
c0014382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014386:	8b 00                	mov    eax,DWORD PTR [eax]
c0014388:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001438c:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0014394:	0f 94 c2             	sete   dl
c0014397:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c001439f:	0f 94 c0             	sete   al
c00143a2:	09 c2                	or     edx,eax
c00143a4:	89 f0                	mov    eax,esi
c00143a6:	84 c0                	test   al,al
c00143a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143ac:	0f b6 d2             	movzx  edx,dl
c00143af:	74 38                	je     c00143e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cb>
c00143b1:	01 de                	add    esi,ebx
c00143b3:	85 d2                	test   edx,edx
c00143b5:	75 15                	jne    c00143cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ae>
c00143b7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143bb:	66 83 f8 0c          	cmp    ax,0xc
c00143bf:	76 05                	jbe    c00143c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c00143c1:	b8 0c 00 00 00       	mov    eax,0xc
c00143c6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143ca:	76 2f                	jbe    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143cc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143d1:	0f 84 e1 00 00 00    	je     c00144b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c00143d7:	83 ec 0c             	sub    esp,0xc
c00143da:	68 34 10 02 c0       	push   0xc0021034
c00143df:	e8 53 c4 ff ff       	call   c0010837 <KePanic(char const*)>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	eb 12                	jmp    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143e9:	01 ce                	add    esi,ecx
c00143eb:	85 d2                	test   edx,edx
c00143ed:	75 0c                	jne    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143f3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143f7:	77 02                	ja     c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143f9:	01 de                	add    esi,ebx
c00143fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143ff:	89 30                	mov    DWORD PTR [eax],esi
c0014401:	e9 ef 00 00 00       	jmp    c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c0014406:	83 f8 02             	cmp    eax,0x2
c0014409:	0f 85 80 00 00 00    	jne    c001448f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x671>
c001440f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014416:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001441a:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001441e:	01 c1                	add    ecx,eax
c0014420:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0014428:	74 21                	je     c001444b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001442a:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c0014432:	74 17                	je     c001444b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014434:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014438:	b8 0a 00 00 00       	mov    eax,0xa
c001443d:	83 fa 0e             	cmp    edx,0xe
c0014440:	77 03                	ja     c0014445 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x627>
c0014442:	8d 42 fc             	lea    eax,[edx-0x4]
c0014445:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014449:	76 1f                	jbe    c001446a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64c>
c001444b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001444f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014454:	74 62                	je     c00144b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	68 50 10 02 c0       	push   0xc0021050
c001445e:	e8 d4 c3 ff ff       	call   c0010837 <KePanic(char const*)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001446a:	89 f2                	mov    edx,esi
c001446c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001446e:	84 d2                	test   dl,dl
c0014470:	74 13                	je     c0014485 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x667>
c0014472:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014476:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001447d:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014481:	01 d0                	add    eax,edx
c0014483:	eb 04                	jmp    c0014489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66b>
c0014485:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014489:	01 c3                	add    ebx,eax
c001448b:	89 19                	mov    DWORD PTR [ecx],ebx
c001448d:	eb 66                	jmp    c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c001448f:	52                   	push   edx
c0014490:	52                   	push   edx
c0014491:	50                   	push   eax
c0014492:	68 6c 10 02 c0       	push   0xc002106c
c0014497:	e8 ad 64 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144a4:	74 12                	je     c00144b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c00144a6:	83 ec 0c             	sub    esp,0xc
c00144a9:	68 77 10 02 c0       	push   0xc0021077
c00144ae:	e8 84 c3 ff ff       	call   c0010837 <KePanic(char const*)>
c00144b3:	83 c4 10             	add    esp,0x10
c00144b6:	eb 3d                	jmp    c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	55                   	push   ebp
c00144bc:	e8 25 6b ff ff       	call   c000afe6 <File::close()>
c00144c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144ca:	59                   	pop    ecx
c00144cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144cf:	e8 c3 35 ff ff       	call   c0007a97 <free>
c00144d4:	5b                   	pop    ebx
c00144d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144d9:	e8 b9 35 ff ff       	call   c0007a97 <free>
c00144de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144e1:	e8 b1 35 ff ff       	call   c0007a97 <free>
c00144e6:	5e                   	pop    esi
c00144e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144eb:	e8 a7 35 ff ff       	call   c0007a97 <free>
c00144f0:	83 c4 10             	add    esp,0x10
c00144f3:	eb 21                	jmp    c0014516 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00144f5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00144f9:	e9 72 fd ff ff       	jmp    c0014270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00144fe:	83 ec 0c             	sub    esp,0xc
c0014501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014505:	e8 8d 35 ff ff       	call   c0007a97 <free>
c001450a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	e9 e8 fc ff ff       	jmp    c00141fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e0>
c0014516:	31 c0                	xor    eax,eax
c0014518:	eb 33                	jmp    c001454d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72f>
c001451a:	83 ec 0c             	sub    esp,0xc
c001451d:	55                   	push   ebp
c001451e:	e8 c3 6a ff ff       	call   c000afe6 <File::close()>
c0014523:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014526:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014529:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001452c:	58                   	pop    eax
c001452d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014531:	e8 61 35 ff ff       	call   c0007a97 <free>
c0014536:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014539:	e8 59 35 ff ff       	call   c0007a97 <free>
c001453e:	5a                   	pop    edx
c001453f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014543:	e8 4f 35 ff ff       	call   c0007a97 <free>
c0014548:	83 c4 10             	add    esp,0x10
c001454b:	b0 01                	mov    al,0x1
c001454d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014553:	5b                   	pop    ebx
c0014554:	5e                   	pop    esi
c0014555:	5f                   	pop    edi
c0014556:	5d                   	pop    ebp
c0014557:	c3                   	ret    

c0014558 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014558:	56                   	push   esi
c0014559:	31 d2                	xor    edx,edx
c001455b:	53                   	push   ebx
c001455c:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014566:	39 d3                	cmp    ebx,edx
c0014568:	7e 1b                	jle    c0014585 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001456a:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014571:	39 c8                	cmp    eax,ecx
c0014573:	77 0d                	ja     c0014582 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014575:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001457c:	01 c6                	add    esi,eax
c001457e:	39 ce                	cmp    esi,ecx
c0014580:	77 05                	ja     c0014587 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014582:	42                   	inc    edx
c0014583:	eb e1                	jmp    c0014566 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014585:	31 c0                	xor    eax,eax
c0014587:	5b                   	pop    ebx
c0014588:	5e                   	pop    esi
c0014589:	c3                   	ret    

c001458a <Thr::getDriverNameFromAddress(unsigned long)>:
c001458a:	53                   	push   ebx
c001458b:	31 c0                	xor    eax,eax
c001458d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014591:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014597:	39 c3                	cmp    ebx,eax
c0014599:	7e 22                	jle    c00145bd <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001459b:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00145a2:	39 ca                	cmp    edx,ecx
c00145a4:	77 14                	ja     c00145ba <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145a6:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00145ad:	39 ca                	cmp    edx,ecx
c00145af:	76 09                	jbe    c00145ba <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145b1:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145b8:	eb 05                	jmp    c00145bf <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145ba:	40                   	inc    eax
c00145bb:	eb da                	jmp    c0014597 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145bd:	31 c0                	xor    eax,eax
c00145bf:	5b                   	pop    ebx
c00145c0:	c3                   	ret    

c00145c1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145c1:	53                   	push   ebx
c00145c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145c6:	53                   	push   ebx
c00145c7:	e8 8c ff ff ff       	call   c0014558 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145cc:	5a                   	pop    edx
c00145cd:	31 d2                	xor    edx,edx
c00145cf:	85 c0                	test   eax,eax
c00145d1:	74 04                	je     c00145d7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145d3:	89 da                	mov    edx,ebx
c00145d5:	29 c2                	sub    edx,eax
c00145d7:	89 d0                	mov    eax,edx
c00145d9:	5b                   	pop    ebx
c00145da:	c3                   	ret    

c00145db <Thr::loadDLL(char const*, bool)>:
c00145db:	55                   	push   ebp
c00145dc:	57                   	push   edi
c00145dd:	56                   	push   esi
c00145de:	53                   	push   ebx
c00145df:	81 ec 34 01 00 00    	sub    esp,0x134
c00145e5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145ec:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00145f3:	56                   	push   esi
c00145f4:	68 8f 10 02 c0       	push   0xc002108f
c00145f9:	e8 4b 63 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00145fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014605:	e8 7d 34 ff ff       	call   c0007a87 <malloc>
c001460a:	83 c4 0c             	add    esp,0xc
c001460d:	89 c3                	mov    ebx,eax
c001460f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014615:	56                   	push   esi
c0014616:	50                   	push   eax
c0014617:	e8 b0 68 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c001461c:	83 c4 10             	add    esp,0x10
c001461f:	85 db                	test   ebx,ebx
c0014621:	75 3c                	jne    c001465f <Thr::loadDLL(char const*, bool)+0x84>
c0014623:	89 e8                	mov    eax,ebp
c0014625:	84 c0                	test   al,al
c0014627:	0f 84 e1 01 00 00    	je     c001480e <Thr::loadDLL(char const*, bool)+0x233>
c001462d:	50                   	push   eax
c001462e:	50                   	push   eax
c001462f:	68 a0 10 02 c0       	push   0xc00210a0
c0014634:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014638:	57                   	push   edi
c0014639:	e8 f2 bf fe ff       	call   c0000630 <strcpy>
c001463e:	58                   	pop    eax
c001463f:	5a                   	pop    edx
c0014640:	56                   	push   esi
c0014641:	57                   	push   edi
c0014642:	e8 e9 c1 fe ff       	call   c0000830 <strcat>
c0014647:	59                   	pop    ecx
c0014648:	58                   	pop    eax
c0014649:	68 b3 10 02 c0       	push   0xc00210b3
c001464e:	57                   	push   edi
c001464f:	e8 dc c1 fe ff       	call   c0000830 <strcat>
c0014654:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014657:	e8 db c1 ff ff       	call   c0010837 <KePanic(char const*)>
c001465c:	83 c4 10             	add    esp,0x10
c001465f:	50                   	push   eax
c0014660:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014664:	50                   	push   eax
c0014665:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014669:	50                   	push   eax
c001466a:	53                   	push   ebx
c001466b:	e8 c4 6b ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	85 db                	test   ebx,ebx
c0014675:	74 0c                	je     c0014683 <Thr::loadDLL(char const*, bool)+0xa8>
c0014677:	83 ec 0c             	sub    esp,0xc
c001467a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001467c:	53                   	push   ebx
c001467d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014680:	83 c4 10             	add    esp,0x10
c0014683:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014688:	75 0a                	jne    c0014694 <Thr::loadDLL(char const*, bool)+0xb9>
c001468a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001468e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014692:	75 3e                	jne    c00146d2 <Thr::loadDLL(char const*, bool)+0xf7>
c0014694:	89 e8                	mov    eax,ebp
c0014696:	31 db                	xor    ebx,ebx
c0014698:	84 c0                	test   al,al
c001469a:	0f 84 6e 01 00 00    	je     c001480e <Thr::loadDLL(char const*, bool)+0x233>
c00146a0:	50                   	push   eax
c00146a1:	50                   	push   eax
c00146a2:	68 a0 10 02 c0       	push   0xc00210a0
c00146a7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00146ab:	53                   	push   ebx
c00146ac:	e8 7f bf fe ff       	call   c0000630 <strcpy>
c00146b1:	58                   	pop    eax
c00146b2:	5a                   	pop    edx
c00146b3:	56                   	push   esi
c00146b4:	53                   	push   ebx
c00146b5:	e8 76 c1 fe ff       	call   c0000830 <strcat>
c00146ba:	59                   	pop    ecx
c00146bb:	5f                   	pop    edi
c00146bc:	68 b3 10 02 c0       	push   0xc00210b3
c00146c1:	53                   	push   ebx
c00146c2:	e8 69 c1 fe ff       	call   c0000830 <strcat>
c00146c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146ca:	e8 68 c1 ff ff       	call   c0010837 <KePanic(char const*)>
c00146cf:	83 c4 10             	add    esp,0x10
c00146d2:	53                   	push   ebx
c00146d3:	6a 03                	push   0x3
c00146d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146dd:	05 ff 0f 00 00       	add    eax,0xfff
c00146e2:	83 d2 00             	adc    edx,0x0
c00146e5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146e9:	50                   	push   eax
c00146ea:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146f0:	e8 e1 56 ff ff       	call   c0009dd6 <VAS::allocatePages(int, int)>
c00146f5:	89 c3                	mov    ebx,eax
c00146f7:	58                   	pop    eax
c00146f8:	5a                   	pop    edx
c00146f9:	53                   	push   ebx
c00146fa:	68 2e fc 01 c0       	push   0xc001fc2e
c00146ff:	e8 45 62 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014704:	89 34 24             	mov    DWORD PTR [esp],esi
c0014707:	e8 54 be fe ff       	call   c0000560 <strlen>
c001470c:	40                   	inc    eax
c001470d:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c0014713:	89 04 24             	mov    DWORD PTR [esp],eax
c0014716:	e8 6c 33 ff ff       	call   c0007a87 <malloc>
c001471b:	59                   	pop    ecx
c001471c:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014723:	5f                   	pop    edi
c0014724:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014729:	56                   	push   esi
c001472a:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014731:	e8 fa be fe ff       	call   c0000630 <strcpy>
c0014736:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001473b:	8d 50 01             	lea    edx,[eax+0x1]
c001473e:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014745:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001474b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001474f:	83 c4 0c             	add    esp,0xc
c0014752:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014759:	6a 01                	push   0x1
c001475b:	53                   	push   ebx
c001475c:	56                   	push   esi
c001475d:	e8 bc f6 ff ff       	call   c0013e1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014762:	89 c7                	mov    edi,eax
c0014764:	83 c4 10             	add    esp,0x10
c0014767:	89 f8                	mov    eax,edi
c0014769:	83 f0 01             	xor    eax,0x1
c001476c:	84 c0                	test   al,al
c001476e:	74 18                	je     c0014788 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014770:	89 e8                	mov    eax,ebp
c0014772:	84 c0                	test   al,al
c0014774:	74 12                	je     c0014788 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	68 b5 10 02 c0       	push   0xc00210b5
c001477e:	e8 b4 c0 ff ff       	call   c0010837 <KePanic(char const*)>
c0014783:	83 c4 10             	add    esp,0x10
c0014786:	eb 06                	jmp    c001478e <Thr::loadDLL(char const*, bool)+0x1b3>
c0014788:	89 f8                	mov    eax,edi
c001478a:	84 c0                	test   al,al
c001478c:	75 10                	jne    c001479e <Thr::loadDLL(char const*, bool)+0x1c3>
c001478e:	83 ec 0c             	sub    esp,0xc
c0014791:	68 d4 10 02 c0       	push   0xc00210d4
c0014796:	e8 9c c0 ff ff       	call   c0010837 <KePanic(char const*)>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	31 f6                	xor    esi,esi
c00147a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147a8:	05 ff 0f 00 00       	add    eax,0xfff
c00147ad:	83 d2 00             	adc    edx,0x0
c00147b0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147b4:	c1 ea 0c             	shr    edx,0xc
c00147b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147bf:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147c3:	ba 00 00 00 00       	mov    edx,0x0
c00147c8:	89 d0                	mov    eax,edx
c00147ca:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147ce:	73 32                	jae    c0014802 <Thr::loadDLL(char const*, bool)+0x227>
c00147d0:	50                   	push   eax
c00147d1:	50                   	push   eax
c00147d2:	89 f0                	mov    eax,esi
c00147d4:	c1 e0 0c             	shl    eax,0xc
c00147d7:	01 d8                	add    eax,ebx
c00147d9:	50                   	push   eax
c00147da:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147e0:	e8 ff 50 ff ff       	call   c00098e4 <VAS::getPageTableEntry(unsigned long)>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00147ea:	a8 60                	test   al,0x60
c00147ec:	75 11                	jne    c00147ff <Thr::loadDLL(char const*, bool)+0x224>
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147f6:	50                   	push   eax
c00147f7:	e8 2d 35 ff ff       	call   c0007d29 <Phys::freePage(unsigned long)>
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	46                   	inc    esi
c0014800:	eb 9e                	jmp    c00147a0 <Thr::loadDLL(char const*, bool)+0x1c5>
c0014802:	89 f8                	mov    eax,edi
c0014804:	84 c0                	test   al,al
c0014806:	b8 00 00 00 00       	mov    eax,0x0
c001480b:	0f 44 d8             	cmove  ebx,eax
c001480e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014814:	89 d8                	mov    eax,ebx
c0014816:	5b                   	pop    ebx
c0014817:	5e                   	pop    esi
c0014818:	5f                   	pop    edi
c0014819:	5d                   	pop    ebp
c001481a:	c3                   	ret    

c001481b <Thr::executeDLL(unsigned long, void*)>:
c001481b:	56                   	push   esi
c001481c:	53                   	push   ebx
c001481d:	52                   	push   edx
c001481e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014822:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014826:	85 db                	test   ebx,ebx
c0014828:	75 10                	jne    c001483a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001482a:	83 ec 0c             	sub    esp,0xc
c001482d:	68 f0 10 02 c0       	push   0xc00210f0
c0014832:	e8 00 c0 ff ff       	call   c0010837 <KePanic(char const*)>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	50                   	push   eax
c001483b:	50                   	push   eax
c001483c:	53                   	push   ebx
c001483d:	68 1a 11 02 c0       	push   0xc002111a
c0014842:	e8 02 61 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014847:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001484b:	83 c4 14             	add    esp,0x14
c001484e:	89 d8                	mov    eax,ebx
c0014850:	5b                   	pop    ebx
c0014851:	5e                   	pop    esi
c0014852:	ff e0                	jmp    eax

c0014854 <userModeEntryPoint(void*)>:
c0014854:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014859:	83 e8 01             	sub    eax,0x1
c001485c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014861:	75 01                	jne    c0014864 <userModeEntryPoint(void*)+0x10>
c0014863:	fb                   	sti    
c0014864:	fb                   	sti    
c0014865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001486d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014877:	e9 c3 b9 fe ff       	jmp    c000023f <goToUsermode>

c001487c <changeTSS>:
c001487c:	83 ec 14             	sub    esp,0x14
c001487f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014884:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014887:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001488c:	c1 e2 15             	shl    edx,0x15
c001488f:	29 d0                	sub    eax,edx
c0014891:	50                   	push   eax
c0014892:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014897:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001489d:	05 7c 11 00 00       	add    eax,0x117c
c00148a2:	50                   	push   eax
c00148a3:	e8 88 46 ff ff       	call   c0008f30 <TSS::setESP(unsigned long)>
c00148a8:	83 c4 1c             	add    esp,0x1c
c00148ab:	c3                   	ret    

c00148ac <switchToThread(ThreadControlBlock*)>:
c00148ac:	57                   	push   edi
c00148ad:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148b3:	56                   	push   esi
c00148b4:	85 c9                	test   ecx,ecx
c00148b6:	53                   	push   ebx
c00148b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148bb:	0f 85 8b 00 00 00    	jne    c001494c <switchToThread(ThreadControlBlock*)+0xa0>
c00148c1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148c5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148cb:	74 7b                	je     c0014948 <switchToThread(ThreadControlBlock*)+0x9c>
c00148cd:	b8 00 04 00 00       	mov    eax,0x400
c00148d2:	29 d0                	sub    eax,edx
c00148d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148d7:	d1 f8                	sar    eax,1
c00148d9:	01 d0                	add    eax,edx
c00148db:	90                   	nop
c00148dc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148df:	e8 85 27 00 00       	call   c0017069 <HalQueryPerformanceCounter()>
c00148e4:	89 c6                	mov    esi,eax
c00148e6:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148eb:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148f1:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148f6:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148fc:	89 d7                	mov    edi,edx
c00148fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014904:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001490a:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014910:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014916:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014919:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001491c:	01 c6                	add    esi,eax
c001491e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014924:	11 d7                	adc    edi,edx
c0014926:	83 ec 0c             	sub    esp,0xc
c0014929:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001492c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001492f:	53                   	push   ebx
c0014930:	e8 42 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014935:	0f 20 c0             	mov    eax,cr0
c0014938:	83 c8 08             	or     eax,0x8
c001493b:	0f 22 c0             	mov    cr0,eax
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	5b                   	pop    ebx
c0014942:	5e                   	pop    esi
c0014943:	5f                   	pop    edi
c0014944:	c3                   	ret    
c0014945:	8d 76 00             	lea    esi,[esi+0x0]
c0014948:	31 c0                	xor    eax,eax
c001494a:	eb 90                	jmp    c00148dc <switchToThread(ThreadControlBlock*)+0x30>
c001494c:	5b                   	pop    ebx
c001494d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	c3                   	ret    
c001495a:	66 90                	xchg   ax,ax

c001495c <Process::addArgs(char**)>:
c001495c:	57                   	push   edi
c001495d:	56                   	push   esi
c001495e:	53                   	push   ebx
c001495f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014963:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014967:	85 ff                	test   edi,edi
c0014969:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014973:	74 4f                	je     c00149c4 <Process::addArgs(char**)+0x68>
c0014975:	8b 07                	mov    eax,DWORD PTR [edi]
c0014977:	85 c0                	test   eax,eax
c0014979:	74 49                	je     c00149c4 <Process::addArgs(char**)+0x68>
c001497b:	31 db                	xor    ebx,ebx
c001497d:	8d 76 00             	lea    esi,[esi+0x0]
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	50                   	push   eax
c0014984:	e8 d7 bb fe ff       	call   c0000560 <strlen>
c0014989:	83 c0 01             	add    eax,0x1
c001498c:	89 04 24             	mov    DWORD PTR [esp],eax
c001498f:	e8 f3 30 ff ff       	call   c0007a87 <malloc>
c0014994:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001499b:	5a                   	pop    edx
c001499c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001499f:	59                   	pop    ecx
c00149a0:	83 c3 01             	add    ebx,0x1
c00149a3:	52                   	push   edx
c00149a4:	50                   	push   eax
c00149a5:	e8 86 bc fe ff       	call   c0000630 <strcpy>
c00149aa:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00149b0:	83 c4 10             	add    esp,0x10
c00149b3:	83 c1 01             	add    ecx,0x1
c00149b6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00149bc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00149bf:	85 c0                	test   eax,eax
c00149c1:	75 bd                	jne    c0014980 <Process::addArgs(char**)+0x24>
c00149c3:	90                   	nop
c00149c4:	5b                   	pop    ebx
c00149c5:	5e                   	pop    esi
c00149c6:	5f                   	pop    edi
c00149c7:	c3                   	ret    

c00149c8 <Process::Process(char const*, Process*, char**)>:
c00149c8:	56                   	push   esi
c00149c9:	53                   	push   ebx
c00149ca:	83 ec 14             	sub    esp,0x14
c00149cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d1:	05 0c 02 00 00       	add    eax,0x20c
c00149d6:	bb 07 00 00 00       	mov    ebx,0x7
c00149db:	89 c6                	mov    esi,eax
c00149dd:	8d 76 00             	lea    esi,[esi+0x0]
c00149e0:	85 db                	test   ebx,ebx
c00149e2:	78 14                	js     c00149f8 <Process::Process(char const*, Process*, char**)+0x30>
c00149e4:	83 ec 0c             	sub    esp,0xc
c00149e7:	56                   	push   esi
c00149e8:	e8 fb a4 00 00       	call   c001eee8 <ThreadControlBlock::ThreadControlBlock()>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	83 c6 5f             	add    esi,0x5f
c00149f3:	83 eb 01             	sub    ebx,0x1
c00149f6:	eb e8                	jmp    c00149e0 <Process::Process(char const*, Process*, char**)+0x18>
c00149f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149fc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a07:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a15:	e8 12 bc ff ff       	call   c001062c <Krnl::newProcessEnv(Process*)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	89 c2                	mov    edx,eax
c0014a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a23:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a2d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a36:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3e:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014a44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a48:	89 02                	mov    DWORD PTR [edx],eax
c0014a4a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a59:	e8 29 30 ff ff       	call   c0007a87 <malloc>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	89 c3                	mov    ebx,eax
c0014a63:	83 ec 08             	sub    esp,0x8
c0014a66:	6a 00                	push   0x0
c0014a68:	53                   	push   ebx
c0014a69:	e8 42 57 ff ff       	call   c000a1b0 <VAS::VAS(bool)>
c0014a6e:	83 c4 10             	add    esp,0x10
c0014a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a75:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a7f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a91:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a97:	e8 b2 c1 ff ff       	call   c0010c4e <KeInitSignals()>
c0014a9c:	89 c2                	mov    edx,eax
c0014a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ab2:	85 c0                	test   eax,eax
c0014ab4:	74 42                	je     c0014af8 <Process::Process(char const*, Process*, char**)+0x130>
c0014ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ac0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ada:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae4:	05 0c 01 00 00       	add    eax,0x10c
c0014ae9:	83 ec 08             	sub    esp,0x8
c0014aec:	52                   	push   edx
c0014aed:	50                   	push   eax
c0014aee:	e8 3d bb fe ff       	call   c0000630 <strcpy>
c0014af3:	83 c4 10             	add    esp,0x10
c0014af6:	eb 64                	jmp    c0014b5c <Process::Process(char const*, Process*, char**)+0x194>
c0014af8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b07:	e8 7b 2f ff ff       	call   c0007a87 <malloc>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	89 c3                	mov    ebx,eax
c0014b11:	83 ec 08             	sub    esp,0x8
c0014b14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b18:	53                   	push   ebx
c0014b19:	e8 1e 41 ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b25:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	50                   	push   eax
c0014b39:	e8 9c 39 ff ff       	call   c00084da <addToTerminalCycle(VgaText*)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b45:	05 0c 01 00 00       	add    eax,0x10c
c0014b4a:	83 ec 08             	sub    esp,0x8
c0014b4d:	68 39 11 02 c0       	push   0xc0021139
c0014b52:	50                   	push   eax
c0014b53:	e8 d8 ba fe ff       	call   c0000630 <strcpy>
c0014b58:	83 c4 10             	add    esp,0x10
c0014b5b:	90                   	nop
c0014b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b60:	83 c0 0c             	add    eax,0xc
c0014b63:	83 ec 08             	sub    esp,0x8
c0014b66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b6a:	50                   	push   eax
c0014b6b:	e8 c0 ba fe ff       	call   c0000630 <strcpy>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	83 ec 08             	sub    esp,0x8
c0014b76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b7e:	e8 d9 fd ff ff       	call   c001495c <Process::addArgs(char**)>
c0014b83:	83 c4 10             	add    esp,0x10
c0014b86:	83 ec 08             	sub    esp,0x8
c0014b89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b91:	e8 4f ed ff ff       	call   c00138e5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ba1:	83 f0 01             	xor    eax,0x1
c0014ba4:	88 c2                	mov    dl,al
c0014ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014baa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bb0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014bb5:	83 ec 08             	sub    esp,0x8
c0014bb8:	50                   	push   eax
c0014bb9:	68 90 11 02 c0       	push   0xc0021190
c0014bbe:	e8 86 5d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	90                   	nop
c0014bc7:	83 c4 14             	add    esp,0x14
c0014bca:	5b                   	pop    ebx
c0014bcb:	5e                   	pop    esi
c0014bcc:	c3                   	ret    
c0014bcd:	90                   	nop
c0014bce:	66 90                	xchg   ax,ax

c0014bd0 <Process::Process(bool, char const*, Process*, char**)>:
c0014bd0:	56                   	push   esi
c0014bd1:	53                   	push   ebx
c0014bd2:	83 ec 24             	sub    esp,0x24
c0014bd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bd9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014bdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be1:	05 0c 02 00 00       	add    eax,0x20c
c0014be6:	bb 07 00 00 00       	mov    ebx,0x7
c0014beb:	89 c6                	mov    esi,eax
c0014bed:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf0:	85 db                	test   ebx,ebx
c0014bf2:	78 14                	js     c0014c08 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bf4:	83 ec 0c             	sub    esp,0xc
c0014bf7:	56                   	push   esi
c0014bf8:	e8 eb a2 00 00       	call   c001eee8 <ThreadControlBlock::ThreadControlBlock()>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	83 c6 5f             	add    esi,0x5f
c0014c03:	83 eb 01             	sub    ebx,0x1
c0014c06:	eb e8                	jmp    c0014bf0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c17:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c1e:	83 ec 0c             	sub    esp,0xc
c0014c21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c25:	e8 02 ba ff ff       	call   c001062c <Krnl::newProcessEnv(Process*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	89 c2                	mov    edx,eax
c0014c2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c33:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c46:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4e:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014c54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c58:	89 02                	mov    DWORD PTR [edx],eax
c0014c5a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c62:	83 ec 0c             	sub    esp,0xc
c0014c65:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c69:	e8 19 2e ff ff       	call   c0007a87 <malloc>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	89 c3                	mov    ebx,eax
c0014c73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c78:	83 ec 08             	sub    esp,0x8
c0014c7b:	50                   	push   eax
c0014c7c:	53                   	push   ebx
c0014c7d:	e8 2e 55 ff ff       	call   c000a1b0 <VAS::VAS(bool)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c89:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c93:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ca5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014cab:	e8 9e bf ff ff       	call   c0010c4e <KeInitSignals()>
c0014cb0:	89 c2                	mov    edx,eax
c0014cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cc6:	85 c0                	test   eax,eax
c0014cc8:	74 42                	je     c0014d0c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cd4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cde:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf8:	05 0c 01 00 00       	add    eax,0x10c
c0014cfd:	83 ec 08             	sub    esp,0x8
c0014d00:	52                   	push   edx
c0014d01:	50                   	push   eax
c0014d02:	e8 29 b9 fe ff       	call   c0000630 <strcpy>
c0014d07:	83 c4 10             	add    esp,0x10
c0014d0a:	eb 64                	jmp    c0014d70 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d0c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d14:	83 ec 0c             	sub    esp,0xc
c0014d17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d1b:	e8 67 2d ff ff       	call   c0007a87 <malloc>
c0014d20:	83 c4 10             	add    esp,0x10
c0014d23:	89 c3                	mov    ebx,eax
c0014d25:	83 ec 08             	sub    esp,0x8
c0014d28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d2c:	53                   	push   ebx
c0014d2d:	e8 0a 3f ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0014d32:	83 c4 10             	add    esp,0x10
c0014d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d39:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d49:	83 ec 0c             	sub    esp,0xc
c0014d4c:	50                   	push   eax
c0014d4d:	e8 88 37 ff ff       	call   c00084da <addToTerminalCycle(VgaText*)>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d59:	05 0c 01 00 00       	add    eax,0x10c
c0014d5e:	83 ec 08             	sub    esp,0x8
c0014d61:	68 39 11 02 c0       	push   0xc0021139
c0014d66:	50                   	push   eax
c0014d67:	e8 c4 b8 fe ff       	call   c0000630 <strcpy>
c0014d6c:	83 c4 10             	add    esp,0x10
c0014d6f:	90                   	nop
c0014d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d74:	83 c0 0c             	add    eax,0xc
c0014d77:	83 ec 08             	sub    esp,0x8
c0014d7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d7e:	50                   	push   eax
c0014d7f:	e8 ac b8 fe ff       	call   c0000630 <strcpy>
c0014d84:	83 c4 10             	add    esp,0x10
c0014d87:	83 ec 08             	sub    esp,0x8
c0014d8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d92:	e8 c5 fb ff ff       	call   c001495c <Process::addArgs(char**)>
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	90                   	nop
c0014d9b:	83 c4 24             	add    esp,0x24
c0014d9e:	5b                   	pop    ebx
c0014d9f:	5e                   	pop    esi
c0014da0:	c3                   	ret    
c0014da1:	8d 76 00             	lea    esi,[esi+0x0]

c0014da4 <taskStartupFunction>:
c0014da4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014da9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014dac:	c3                   	ret    
c0014dad:	90                   	nop
c0014dae:	66 90                	xchg   ax,ax

c0014db0 <Semaphore::Semaphore(int)>:
c0014db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db8:	89 10                	mov    DWORD PTR [eax],edx
c0014dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014dc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014ddb:	90                   	nop
c0014ddc:	c3                   	ret    
c0014ddd:	90                   	nop
c0014dde:	66 90                	xchg   ax,ax

c0014de0 <Mutex::Mutex()>:
c0014de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de4:	6a 01                	push   0x1
c0014de6:	50                   	push   eax
c0014de7:	e8 c4 ff ff ff       	call   c0014db0 <Semaphore::Semaphore(int)>
c0014dec:	83 c4 08             	add    esp,0x8
c0014def:	90                   	nop
c0014df0:	c3                   	ret    
c0014df1:	90                   	nop
c0014df2:	66 90                	xchg   ax,ax

c0014df4 <Process::createThread(void (*)(void*), void*, int)>:
c0014df4:	57                   	push   edi
c0014df5:	31 c9                	xor    ecx,ecx
c0014df7:	56                   	push   esi
c0014df8:	53                   	push   ebx
c0014df9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dfd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e04:	89 f2                	mov    edx,esi
c0014e06:	66 90                	xchg   ax,ax
c0014e08:	0f b7 c2             	movzx  eax,dx
c0014e0b:	80 e2 01             	and    dl,0x1
c0014e0e:	74 14                	je     c0014e24 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e10:	d1 f8                	sar    eax,1
c0014e12:	83 c1 01             	add    ecx,0x1
c0014e15:	89 c2                	mov    edx,eax
c0014e17:	83 f9 10             	cmp    ecx,0x10
c0014e1a:	75 ec                	jne    c0014e08 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e1c:	31 db                	xor    ebx,ebx
c0014e1e:	89 d8                	mov    eax,ebx
c0014e20:	5b                   	pop    ebx
c0014e21:	5e                   	pop    esi
c0014e22:	5f                   	pop    edi
c0014e23:	c3                   	ret    
c0014e24:	b8 01 00 00 00       	mov    eax,0x1
c0014e29:	d3 e0                	shl    eax,cl
c0014e2b:	09 c6                	or     esi,eax
c0014e2d:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e30:	c1 e0 05             	shl    eax,0x5
c0014e33:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e3a:	29 c8                	sub    eax,ecx
c0014e3c:	01 d8                	add    eax,ebx
c0014e3e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e45:	75 0d                	jne    c0014e54 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e47:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e51:	8d 76 00             	lea    esi,[esi+0x0]
c0014e54:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e57:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e5d:	c1 e6 05             	shl    esi,0x5
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	29 ce                	sub    esi,ecx
c0014e65:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e68:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e6b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e75:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e7b:	89 ca                	mov    edx,ecx
c0014e7d:	f7 da                	neg    edx
c0014e7f:	c1 e2 15             	shl    edx,0x15
c0014e82:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e88:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e8e:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e94:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e9e:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014ea4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ea8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014eb2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014eb8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ec2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ecc:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014ed2:	68 00 01 00 00       	push   0x100
c0014ed7:	e8 ab 2b ff ff       	call   c0007a87 <malloc>
c0014edc:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014ee3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014ee6:	58                   	pop    eax
c0014ee7:	5a                   	pop    edx
c0014ee8:	53                   	push   ebx
c0014ee9:	68 84 81 02 c0       	push   0xc0028184
c0014eee:	e8 8d 9d 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	89 d8                	mov    eax,ebx
c0014ef8:	5b                   	pop    ebx
c0014ef9:	5e                   	pop    esi
c0014efa:	5f                   	pop    edi
c0014efb:	c3                   	ret    

c0014efc <Process::createUserThread()>:
c0014efc:	83 ec 0c             	sub    esp,0xc
c0014eff:	68 80 00 00 00       	push   0x80
c0014f04:	6a 00                	push   0x0
c0014f06:	68 54 48 01 c0       	push   0xc0014854
c0014f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f0f:	50                   	push   eax
c0014f10:	e8 df fe ff ff       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0014f15:	83 c4 1c             	add    esp,0x1c
c0014f18:	c3                   	ret    
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]

c0014f1c <setupMultitasking(void (*)())>:
c0014f1c:	56                   	push   esi
c0014f1d:	53                   	push   ebx
c0014f1e:	83 ec 04             	sub    esp,0x4
c0014f21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f25:	eb 11                	jmp    c0014f38 <setupMultitasking(void (*)())+0x1c>
c0014f27:	90                   	nop
c0014f28:	83 ec 0c             	sub    esp,0xc
c0014f2b:	68 84 81 02 c0       	push   0xc0028184
c0014f30:	e8 8f 9c 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f35:	83 c4 10             	add    esp,0x10
c0014f38:	83 ec 0c             	sub    esp,0xc
c0014f3b:	68 84 81 02 c0       	push   0xc0028184
c0014f40:	e8 5b 9c 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	84 c0                	test   al,al
c0014f4a:	74 dc                	je     c0014f28 <setupMultitasking(void (*)())+0xc>
c0014f4c:	83 ec 0c             	sub    esp,0xc
c0014f4f:	68 24 07 00 00       	push   0x724
c0014f54:	e8 2e 2b ff ff       	call   c0007a87 <malloc>
c0014f59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f60:	6a 00                	push   0x0
c0014f62:	68 3d 11 02 c0       	push   0xc002113d
c0014f67:	89 c3                	mov    ebx,eax
c0014f69:	6a 01                	push   0x1
c0014f6b:	50                   	push   eax
c0014f6c:	e8 5f fc ff ff       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0014f71:	83 c4 14             	add    esp,0x14
c0014f74:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f7a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f80:	50                   	push   eax
c0014f81:	e8 a9 37 ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c0014f86:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f8d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f97:	83 c8 01             	or     eax,0x1
c0014f9a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fa1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fa7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014faa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fb4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fba:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fc0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fca:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fd4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fde:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fe4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fee:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014ff8:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fff:	e8 83 2a ff ff       	call   c0007a87 <malloc>
c0015004:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001500a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015010:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015016:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001501c:	5a                   	pop    edx
c001501d:	59                   	pop    ecx
c001501e:	68 39 11 02 c0       	push   0xc0021139
c0015023:	50                   	push   eax
c0015024:	e8 07 b6 fe ff       	call   c0000630 <strcpy>
c0015029:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015030:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015034:	83 c4 14             	add    esp,0x14
c0015037:	5b                   	pop    ebx
c0015038:	5e                   	pop    esi
c0015039:	e9 2b b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001503e:	66 90                	xchg   ax,ax

c0015040 <schedule()>:
c0015040:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015046:	85 d2                	test   edx,edx
c0015048:	74 0e                	je     c0015058 <schedule()+0x18>
c001504a:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015054:	c3                   	ret    
c0015055:	8d 76 00             	lea    esi,[esi+0x0]
c0015058:	53                   	push   ebx
c0015059:	83 ec 14             	sub    esp,0x14
c001505c:	68 84 81 02 c0       	push   0xc0028184
c0015061:	e8 3a 9b 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015066:	83 c4 10             	add    esp,0x10
c0015069:	84 c0                	test   al,al
c001506b:	75 3f                	jne    c00150ac <schedule()+0x6c>
c001506d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015072:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015075:	83 fa 01             	cmp    edx,0x1
c0015078:	74 3a                	je     c00150b4 <schedule()+0x74>
c001507a:	66 90                	xchg   ax,ax
c001507c:	83 ec 0c             	sub    esp,0xc
c001507f:	68 84 81 02 c0       	push   0xc0028184
c0015084:	e8 33 9b 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015089:	89 c3                	mov    ebx,eax
c001508b:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015092:	e8 2d 9b 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015097:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001509e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150a1:	e8 06 f8 ff ff       	call   c00148ac <switchToThread(ThreadControlBlock*)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	8d 76 00             	lea    esi,[esi+0x0]
c00150ac:	83 c4 08             	add    esp,0x8
c00150af:	5b                   	pop    ebx
c00150b0:	c3                   	ret    
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150bb:	83 ec 08             	sub    esp,0x8
c00150be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c3:	50                   	push   eax
c00150c4:	68 84 81 02 c0       	push   0xc0028184
c00150c9:	e8 b2 9b 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150ce:	83 c4 10             	add    esp,0x10
c00150d1:	eb a9                	jmp    c001507c <schedule()+0x3c>
c00150d3:	90                   	nop

c00150d4 <Semaphore::tryAcquire()>:
c00150d4:	53                   	push   ebx
c00150d5:	83 ec 08             	sub    esp,0x8
c00150d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150dc:	fa                   	cli    
c00150dd:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150e3:	8d 42 01             	lea    eax,[edx+0x1]
c00150e6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150eb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150f0:	8d 58 01             	lea    ebx,[eax+0x1]
c00150f3:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150f9:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150fc:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150fe:	7c 2c                	jl     c001512c <Semaphore::tryAcquire()+0x58>
c0015100:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015105:	85 c0                	test   eax,eax
c0015107:	75 0b                	jne    c0015114 <Semaphore::tryAcquire()+0x40>
c0015109:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001510e:	85 c0                	test   eax,eax
c0015110:	75 5a                	jne    c001516c <Semaphore::tryAcquire()+0x98>
c0015112:	66 90                	xchg   ax,ax
c0015114:	31 c0                	xor    eax,eax
c0015116:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001511c:	85 d2                	test   edx,edx
c001511e:	75 04                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c0015120:	fb                   	sti    
c0015121:	8d 76 00             	lea    esi,[esi+0x0]
c0015124:	83 c4 08             	add    esp,0x8
c0015127:	5b                   	pop    ebx
c0015128:	c3                   	ret    
c0015129:	8d 76 00             	lea    esi,[esi+0x0]
c001512c:	83 c3 01             	add    ebx,0x1
c001512f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015134:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015137:	85 c0                	test   eax,eax
c0015139:	75 21                	jne    c001515c <Semaphore::tryAcquire()+0x88>
c001513b:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015141:	85 c9                	test   ecx,ecx
c0015143:	74 17                	je     c001515c <Semaphore::tryAcquire()+0x88>
c0015145:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001514f:	e8 ec fe ff ff       	call   c0015040 <schedule()>
c0015154:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015159:	8d 50 ff             	lea    edx,[eax-0x1]
c001515c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015162:	b0 01                	mov    al,0x1
c0015164:	85 d2                	test   edx,edx
c0015166:	75 bc                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c0015168:	eb b6                	jmp    c0015120 <Semaphore::tryAcquire()+0x4c>
c001516a:	66 90                	xchg   ax,ax
c001516c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015176:	e8 c5 fe ff ff       	call   c0015040 <schedule()>
c001517b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015180:	8d 50 ff             	lea    edx,[eax-0x1]
c0015183:	31 c0                	xor    eax,eax
c0015185:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001518b:	85 d2                	test   edx,edx
c001518d:	75 95                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c001518f:	eb 8f                	jmp    c0015120 <Semaphore::tryAcquire()+0x4c>
c0015191:	90                   	nop
c0015192:	66 90                	xchg   ax,ax

c0015194 <Semaphore::assertLocked(char const*)>:
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001519b:	fa                   	cli    
c001519c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00151a2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151a7:	83 c1 01             	add    ecx,0x1
c00151aa:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151b0:	8d 48 01             	lea    ecx,[eax+0x1]
c00151b3:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151bb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151be:	7c 28                	jl     c00151e8 <Semaphore::assertLocked(char const*)+0x54>
c00151c0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151c5:	85 c0                	test   eax,eax
c00151c7:	75 0b                	jne    c00151d4 <Semaphore::assertLocked(char const*)+0x40>
c00151c9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151ce:	85 c0                	test   eax,eax
c00151d0:	75 32                	jne    c0015204 <Semaphore::assertLocked(char const*)+0x70>
c00151d2:	66 90                	xchg   ax,ax
c00151d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d9:	83 e8 01             	sub    eax,0x1
c00151dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e1:	75 01                	jne    c00151e4 <Semaphore::assertLocked(char const*)+0x50>
c00151e3:	fb                   	sti    
c00151e4:	83 c4 0c             	add    esp,0xc
c00151e7:	c3                   	ret    
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151ef:	52                   	push   edx
c00151f0:	e8 42 b6 ff ff       	call   c0010837 <KePanic(char const*)>
c00151f5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	83 e8 01             	sub    eax,0x1
c0015200:	eb be                	jmp    c00151c0 <Semaphore::assertLocked(char const*)+0x2c>
c0015202:	66 90                	xchg   ax,ax
c0015204:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001520e:	e8 2d fe ff ff       	call   c0015040 <schedule()>
c0015213:	eb bf                	jmp    c00151d4 <Semaphore::assertLocked(char const*)+0x40>
c0015215:	8d 76 00             	lea    esi,[esi+0x0]

c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015224:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015227:	e8 14 fe ff ff       	call   c0015040 <schedule()>
c001522c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015231:	83 e8 01             	sub    eax,0x1
c0015234:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015239:	75 01                	jne    c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001523b:	fb                   	sti    
c001523c:	83 c4 0c             	add    esp,0xc
c001523f:	c3                   	ret    

c0015240 <blockTask(TaskState)>:
c0015240:	83 ec 0c             	sub    esp,0xc
c0015243:	fa                   	cli    
c0015244:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015249:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001524d:	83 c0 01             	add    eax,0x1
c0015250:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001525a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001525d:	e8 de fd ff ff       	call   c0015040 <schedule()>
c0015262:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015267:	83 e8 01             	sub    eax,0x1
c001526a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001526f:	75 03                	jne    c0015274 <blockTask(TaskState)+0x34>
c0015271:	fb                   	sti    
c0015272:	66 90                	xchg   ax,ax
c0015274:	83 c4 0c             	add    esp,0xc
c0015277:	c3                   	ret    

c0015278 <waitTask(int, int*, int)>:
c0015278:	83 ec 18             	sub    esp,0x18
c001527b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015280:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015284:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015287:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015293:	6a 07                	push   0x7
c0015295:	e8 a6 ff ff ff       	call   c0015240 <blockTask(TaskState)>
c001529a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529f:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	85 d2                	test   edx,edx
c00152a7:	74 0b                	je     c00152b4 <waitTask(int, int*, int)+0x3c>
c00152a9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152ac:	89 02                	mov    DWORD PTR [edx],eax
c00152ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b3:	90                   	nop
c00152b4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152b7:	83 c4 0c             	add    esp,0xc
c00152ba:	c3                   	ret    
c00152bb:	90                   	nop

c00152bc <milliTenthSleepUntil(unsigned int)>:
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152c3:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152c9:	76 05                	jbe    c00152d0 <milliTenthSleepUntil(unsigned int)+0x14>
c00152cb:	90                   	nop
c00152cc:	83 c4 0c             	add    esp,0xc
c00152cf:	c3                   	ret    
c00152d0:	fa                   	cli    
c00152d1:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152d7:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152dd:	83 c1 01             	add    ecx,0x1
c00152e0:	83 c2 01             	add    edx,0x1
c00152e3:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152e9:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152f5:	83 ec 08             	sub    esp,0x8
c00152f8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015300:	50                   	push   eax
c0015301:	68 78 81 02 c0       	push   0xc0028178
c0015306:	e8 75 99 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001530b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015312:	e8 29 ff ff ff       	call   c0015240 <blockTask(TaskState)>
c0015317:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	83 e8 01             	sub    eax,0x1
c0015322:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015327:	85 c0                	test   eax,eax
c0015329:	75 09                	jne    c0015334 <milliTenthSleepUntil(unsigned int)+0x78>
c001532b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015330:	85 c0                	test   eax,eax
c0015332:	75 14                	jne    c0015348 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015334:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015339:	83 e8 01             	sub    eax,0x1
c001533c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015341:	75 89                	jne    c00152cc <milliTenthSleepUntil(unsigned int)+0x10>
c0015343:	fb                   	sti    
c0015344:	83 c4 0c             	add    esp,0xc
c0015347:	c3                   	ret    
c0015348:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015352:	e8 e9 fc ff ff       	call   c0015040 <schedule()>
c0015357:	eb db                	jmp    c0015334 <milliTenthSleepUntil(unsigned int)+0x78>
c0015359:	8d 76 00             	lea    esi,[esi+0x0]

c001535c <milliTenthSleep(unsigned int)>:
c001535c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015360:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015365:	01 c2                	add    edx,eax
c0015367:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001536b:	e9 4c ff ff ff       	jmp    c00152bc <milliTenthSleepUntil(unsigned int)>

c0015370 <sleep(unsigned int)>:
c0015370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015374:	8d 04 80             	lea    eax,[eax+eax*4]
c0015377:	8d 04 80             	lea    eax,[eax+eax*4]
c001537a:	8d 04 80             	lea    eax,[eax+eax*4]
c001537d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015380:	c1 e0 04             	shl    eax,0x4
c0015383:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015387:	eb d3                	jmp    c001535c <milliTenthSleep(unsigned int)>
c0015389:	90                   	nop
c001538a:	66 90                	xchg   ax,ax

c001538c <Semaphore::acquire()>:
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015393:	fa                   	cli    
c0015394:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015399:	83 c0 01             	add    eax,0x1
c001539c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153a1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00153a9:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153af:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153b2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153b4:	7d 2e                	jge    c00153e4 <Semaphore::acquire()+0x58>
c00153b6:	83 c1 01             	add    ecx,0x1
c00153b9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153bc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153c1:	85 c0                	test   eax,eax
c00153c3:	75 0b                	jne    c00153d0 <Semaphore::acquire()+0x44>
c00153c5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153ca:	85 c0                	test   eax,eax
c00153cc:	75 66                	jne    c0015434 <Semaphore::acquire()+0xa8>
c00153ce:	66 90                	xchg   ax,ax
c00153d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153d5:	83 e8 01             	sub    eax,0x1
c00153d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153dd:	75 01                	jne    c00153e0 <Semaphore::acquire()+0x54>
c00153df:	fb                   	sti    
c00153e0:	83 c4 0c             	add    esp,0xc
c00153e3:	c3                   	ret    
c00153e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153f0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153f3:	85 c9                	test   ecx,ecx
c00153f5:	74 51                	je     c0015448 <Semaphore::acquire()+0xbc>
c00153f7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015400:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015403:	90                   	nop
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001540f:	68 b8 11 02 c0       	push   0xc00211b8
c0015414:	e8 30 55 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0015419:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015420:	e8 1b fe ff ff       	call   c0015240 <blockTask(TaskState)>
c0015425:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	83 e8 01             	sub    eax,0x1
c0015430:	eb 8a                	jmp    c00153bc <Semaphore::acquire()+0x30>
c0015432:	66 90                	xchg   ax,ax
c0015434:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001543e:	e8 fd fb ff ff       	call   c0015040 <schedule()>
c0015443:	eb 8b                	jmp    c00153d0 <Semaphore::acquire()+0x44>
c0015445:	8d 76 00             	lea    esi,[esi+0x0]
c0015448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015450:	eb b2                	jmp    c0015404 <Semaphore::acquire()+0x78>
c0015452:	66 90                	xchg   ax,ax

c0015454 <taskReturned>:
c0015454:	83 ec 18             	sub    esp,0x18
c0015457:	68 d8 11 02 c0       	push   0xc00211d8
c001545c:	e8 d6 b3 ff ff       	call   c0010837 <KePanic(char const*)>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	6a 02                	push   0x2
c0015469:	e8 d2 fd ff ff       	call   c0015240 <blockTask(TaskState)>
c001546e:	fa                   	cli    
c001546f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015474:	83 c0 01             	add    eax,0x1
c0015477:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001547c:	e8 bf fb ff ff       	call   c0015040 <schedule()>
c0015481:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	83 e8 01             	sub    eax,0x1
c001548c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015491:	85 c0                	test   eax,eax
c0015493:	75 cf                	jne    c0015464 <taskReturned+0x10>
c0015495:	fb                   	sti    
c0015496:	eb cc                	jmp    c0015464 <taskReturned+0x10>

c0015498 <Thr::processFromPID(int)>:
c0015498:	57                   	push   edi
c0015499:	56                   	push   esi
c001549a:	53                   	push   ebx
c001549b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001549f:	fa                   	cli    
c00154a0:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	83 c1 01             	add    ecx,0x1
c00154ac:	68 84 81 02 c0       	push   0xc0028184
c00154b1:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154b7:	e8 00 97 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	89 c7                	mov    edi,eax
c00154c1:	eb 15                	jmp    c00154d8 <Thr::processFromPID(int)+0x40>
c00154c3:	90                   	nop
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 84 81 02 c0       	push   0xc0028184
c00154cc:	e8 eb 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	39 f8                	cmp    eax,edi
c00154d6:	74 50                	je     c0015528 <Thr::processFromPID(int)+0x90>
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	68 84 81 02 c0       	push   0xc0028184
c00154e0:	e8 d7 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154ec:	89 c3                	mov    ebx,eax
c00154ee:	e8 d1 96 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154f3:	58                   	pop    eax
c00154f4:	5a                   	pop    edx
c00154f5:	53                   	push   ebx
c00154f6:	68 84 81 02 c0       	push   0xc0028184
c00154fb:	e8 80 97 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015500:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	39 30                	cmp    DWORD PTR [eax],esi
c0015508:	75 ba                	jne    c00154c4 <Thr::processFromPID(int)+0x2c>
c001550a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001550f:	83 e8 01             	sub    eax,0x1
c0015512:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015517:	74 0b                	je     c0015524 <Thr::processFromPID(int)+0x8c>
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001551f:	90                   	nop
c0015520:	5b                   	pop    ebx
c0015521:	5e                   	pop    esi
c0015522:	5f                   	pop    edi
c0015523:	c3                   	ret    
c0015524:	fb                   	sti    
c0015525:	eb f5                	jmp    c001551c <Thr::processFromPID(int)+0x84>
c0015527:	90                   	nop
c0015528:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001552d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015530:	31 c0                	xor    eax,eax
c0015532:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015538:	85 d2                	test   edx,edx
c001553a:	75 e4                	jne    c0015520 <Thr::processFromPID(int)+0x88>
c001553c:	fb                   	sti    
c001553d:	5b                   	pop    ebx
c001553e:	5e                   	pop    esi
c001553f:	5f                   	pop    edi
c0015540:	c3                   	ret    
c0015541:	8d 76 00             	lea    esi,[esi+0x0]

c0015544 <unblockTask(ThreadControlBlock*)>:
c0015544:	53                   	push   ebx
c0015545:	83 ec 08             	sub    esp,0x8
c0015548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001554c:	fa                   	cli    
c001554d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015552:	83 c0 01             	add    eax,0x1
c0015555:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001555a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001555d:	85 c0                	test   eax,eax
c001555f:	74 67                	je     c00155c8 <unblockTask(ThreadControlBlock*)+0x84>
c0015561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015564:	83 f8 01             	cmp    eax,0x1
c0015567:	74 37                	je     c00155a0 <unblockTask(ThreadControlBlock*)+0x5c>
c0015569:	83 ec 0c             	sub    esp,0xc
c001556c:	68 84 81 02 c0       	push   0xc0028184
c0015571:	e8 46 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015576:	83 c4 10             	add    esp,0x10
c0015579:	85 c0                	test   eax,eax
c001557b:	75 1b                	jne    c0015598 <unblockTask(ThreadControlBlock*)+0x54>
c001557d:	eb 5d                	jmp    c00155dc <unblockTask(ThreadControlBlock*)+0x98>
c001557f:	90                   	nop
c0015580:	83 ec 08             	sub    esp,0x8
c0015583:	50                   	push   eax
c0015584:	68 84 81 02 c0       	push   0xc0028184
c0015589:	e8 4e 99 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	85 c0                	test   eax,eax
c0015593:	74 47                	je     c00155dc <unblockTask(ThreadControlBlock*)+0x98>
c0015595:	8d 76 00             	lea    esi,[esi+0x0]
c0015598:	39 c3                	cmp    ebx,eax
c001559a:	75 e4                	jne    c0015580 <unblockTask(ThreadControlBlock*)+0x3c>
c001559c:	eb 12                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c001559e:	66 90                	xchg   ax,ax
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 5b 11 02 c0       	push   0xc002115b
c00155a8:	e8 9c 53 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b5:	83 e8 01             	sub    eax,0x1
c00155b8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155bd:	75 01                	jne    c00155c0 <unblockTask(ThreadControlBlock*)+0x7c>
c00155bf:	fb                   	sti    
c00155c0:	83 c4 08             	add    esp,0x8
c00155c3:	5b                   	pop    ebx
c00155c4:	c3                   	ret    
c00155c5:	8d 76 00             	lea    esi,[esi+0x0]
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	68 44 11 02 c0       	push   0xc0021144
c00155d0:	e8 74 53 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	eb d6                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00155da:	66 90                	xchg   ax,ax
c00155dc:	83 ec 08             	sub    esp,0x8
c00155df:	53                   	push   ebx
c00155e0:	68 84 81 02 c0       	push   0xc0028184
c00155e5:	e8 96 96 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	eb c1                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00155ef:	90                   	nop

c00155f0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155f0:	55                   	push   ebp
c00155f1:	57                   	push   edi
c00155f2:	56                   	push   esi
c00155f3:	53                   	push   ebx
c00155f4:	83 ec 1c             	sub    esp,0x1c
c00155f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155fe:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015604:	85 ed                	test   ebp,ebp
c0015606:	7e 28                	jle    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015608:	31 f6                	xor    esi,esi
c001560a:	66 90                	xchg   ax,ax
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015616:	83 c6 01             	add    esi,0x1
c0015619:	57                   	push   edi
c001561a:	e8 78 24 ff ff       	call   c0007a97 <free>
c001561f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001562b:	7f df                	jg     c001560c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001562d:	8d 76 00             	lea    esi,[esi+0x0]
c0015630:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001563a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001563f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015642:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015645:	d3 c0                	rol    eax,cl
c0015647:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001564e:	21 c8                	and    eax,ecx
c0015650:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015657:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001565a:	89 f7                	mov    edi,esi
c001565c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015664:	0f 85 72 01 00 00    	jne    c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001566a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015670:	85 ed                	test   ebp,ebp
c0015672:	74 1c                	je     c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	55                   	push   ebp
c0015678:	e8 cb ae ff ff       	call   c0010548 <EnvVarContainer::~EnvVarContainer()>
c001567d:	59                   	pop    ecx
c001567e:	5e                   	pop    esi
c001567f:	6a 0c                	push   0xc
c0015681:	55                   	push   ebp
c0015682:	e8 c6 51 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c0015687:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001568a:	83 c4 10             	add    esp,0x10
c001568d:	89 f7                	mov    edi,esi
c001568f:	90                   	nop
c0015690:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015696:	85 c0                	test   eax,eax
c0015698:	0f 84 b2 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001569e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00156a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156a5:	31 c9                	xor    ecx,ecx
c00156a7:	eb 17                	jmp    c00156c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156a9:	8d 76 00             	lea    esi,[esi+0x0]
c00156ac:	83 c1 01             	add    ecx,0x1
c00156af:	83 f9 10             	cmp    ecx,0x10
c00156b2:	0f 84 98 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156be:	66 90                	xchg   ax,ax
c00156c0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156c7:	d3 fa                	sar    edx,cl
c00156c9:	80 e2 01             	and    dl,0x1
c00156cc:	74 de                	je     c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ce:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156d1:	c1 e2 05             	shl    edx,0x5
c00156d4:	29 ca                	sub    edx,ecx
c00156d6:	01 d0                	add    eax,edx
c00156d8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156de:	83 fd 07             	cmp    ebp,0x7
c00156e1:	75 c9                	jne    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156e3:	05 40 02 00 00       	add    eax,0x240
c00156e8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156eb:	83 fd ff             	cmp    ebp,0xffffffff
c00156ee:	0f 8c f0 00 00 00    	jl     c00157e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156f4:	0f 84 ae 01 00 00    	je     c00158a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156fa:	85 ed                	test   ebp,ebp
c00156fc:	0f 84 92 01 00 00    	je     c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015702:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015704:	75 a6                	jne    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015706:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015710:	01 d0                	add    eax,edx
c0015712:	66 90                	xchg   ax,ax
c0015714:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015721:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015724:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015731:	50                   	push   eax
c0015732:	e8 0d fe ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015737:	83 c4 10             	add    esp,0x10
c001573a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001573e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015741:	83 c1 01             	add    ecx,0x1
c0015744:	89 f7                	mov    edi,esi
c0015746:	83 f9 10             	cmp    ecx,0x10
c0015749:	0f 85 69 ff ff ff    	jne    c00156b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001574f:	90                   	nop
c0015750:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015756:	85 c0                	test   eax,eax
c0015758:	74 62                	je     c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001575a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015760:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015766:	74 54                	je     c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	68 84 81 02 c0       	push   0xc0028184
c0015770:	e8 47 94 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015775:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001577c:	89 c7                	mov    edi,eax
c001577e:	e8 1d 94 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015783:	83 c4 10             	add    esp,0x10
c0015786:	84 c0                	test   al,al
c0015788:	0f 84 ce 00 00 00    	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001578e:	66 90                	xchg   ax,ax
c0015790:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015793:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015799:	85 d2                	test   edx,edx
c001579b:	74 0f                	je     c00157ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001579d:	83 ec 0c             	sub    esp,0xc
c00157a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00157a2:	52                   	push   edx
c00157a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157b9:	8d 76 00             	lea    esi,[esi+0x0]
c00157bc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157c2:	85 db                	test   ebx,ebx
c00157c4:	74 16                	je     c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	53                   	push   ebx
c00157ca:	e8 93 43 ff ff       	call   c0009b62 <VAS::~VAS()>
c00157cf:	58                   	pop    eax
c00157d0:	5a                   	pop    edx
c00157d1:	6a 14                	push   0x14
c00157d3:	53                   	push   ebx
c00157d4:	e8 74 50 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	83 c4 1c             	add    esp,0x1c
c00157df:	5b                   	pop    ebx
c00157e0:	5e                   	pop    esi
c00157e1:	5f                   	pop    edi
c00157e2:	5d                   	pop    ebp
c00157e3:	c3                   	ret    
c00157e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157e8:	83 ec 0c             	sub    esp,0xc
c00157eb:	68 0c 12 02 c0       	push   0xc002120c
c00157f0:	e8 42 b0 ff ff       	call   c0010837 <KePanic(char const*)>
c00157f5:	83 c4 10             	add    esp,0x10
c00157f8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157ff:	89 f7                	mov    edi,esi
c0015801:	e9 a6 fe ff ff       	jmp    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015806:	66 90                	xchg   ax,ax
c0015808:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001580e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015814:	75 1e                	jne    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015816:	83 ec 0c             	sub    esp,0xc
c0015819:	68 74 12 02 c0       	push   0xc0021274
c001581e:	e8 26 51 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0015823:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001582a:	e8 11 fa ff ff       	call   c0015240 <blockTask(TaskState)>
c001582f:	83 c4 10             	add    esp,0x10
c0015832:	66 90                	xchg   ax,ax
c0015834:	83 ec 08             	sub    esp,0x8
c0015837:	56                   	push   esi
c0015838:	68 84 81 02 c0       	push   0xc0028184
c001583d:	e8 3e 94 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015842:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015849:	e8 6e 93 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584e:	83 c4 10             	add    esp,0x10
c0015851:	39 f8                	cmp    eax,edi
c0015853:	0f 84 37 ff ff ff    	je     c0015790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015859:	8d 76 00             	lea    esi,[esi+0x0]
c001585c:	83 ec 0c             	sub    esp,0xc
c001585f:	68 84 81 02 c0       	push   0xc0028184
c0015864:	e8 53 93 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015869:	89 c6                	mov    esi,eax
c001586b:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015872:	e8 4d 93 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	39 f3                	cmp    ebx,esi
c001587c:	74 b6                	je     c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001587e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015881:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015884:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001588a:	75 a8                	jne    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001588c:	e9 77 ff ff ff       	jmp    c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015891:	8d 76 00             	lea    esi,[esi+0x0]
c0015894:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	68 40 12 02 c0       	push   0xc0021240
c00158a0:	e9 4b ff ff ff       	jmp    c00157f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158a5:	8d 76 00             	lea    esi,[esi+0x0]
c00158a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00158aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158ae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158b4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158ba:	01 d7                	add    edi,edx
c00158bc:	89 f8                	mov    eax,edi
c00158be:	e9 51 fe ff ff       	jmp    c0015714 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158c3:	90                   	nop

c00158c4 <cleanerTaskFunction(void*)>:
c00158c4:	53                   	push   ebx
c00158c5:	83 ec 08             	sub    esp,0x8
c00158c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158cd:	83 e8 01             	sub    eax,0x1
c00158d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158d5:	75 01                	jne    c00158d8 <cleanerTaskFunction(void*)+0x14>
c00158d7:	fb                   	sti    
c00158d8:	fa                   	cli    
c00158d9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158de:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158e5:	8d 50 01             	lea    edx,[eax+0x1]
c00158e8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158ee:	0f 84 c4 00 00 00    	je     c00159b8 <cleanerTaskFunction(void*)+0xf4>
c00158f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158f9:	85 c0                	test   eax,eax
c00158fb:	75 03                	jne    c0015900 <cleanerTaskFunction(void*)+0x3c>
c00158fd:	fb                   	sti    
c00158fe:	66 90                	xchg   ax,ax
c0015900:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015907:	fa                   	cli    
c0015908:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001590e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015914:	83 c2 01             	add    edx,0x1
c0015917:	83 c1 01             	add    ecx,0x1
c001591a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015920:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015926:	fa                   	cli    
c0015927:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c001592d:	83 c3 01             	add    ebx,0x1
c0015930:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015936:	eb 28                	jmp    c0015960 <cleanerTaskFunction(void*)+0x9c>
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 6c 81 02 c0       	push   0xc002816c
c0015940:	e8 77 92 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015945:	89 c3                	mov    ebx,eax
c0015947:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001594e:	e8 71 92 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015956:	e8 95 fc ff ff       	call   c00155f0 <cleanupTerminatedTask(ThreadControlBlock*)>
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	66 90                	xchg   ax,ax
c0015960:	83 ec 0c             	sub    esp,0xc
c0015963:	68 6c 81 02 c0       	push   0xc002816c
c0015968:	e8 33 92 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	84 c0                	test   al,al
c0015972:	74 c4                	je     c0015938 <cleanerTaskFunction(void*)+0x74>
c0015974:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015979:	83 e8 01             	sub    eax,0x1
c001597c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015981:	75 01                	jne    c0015984 <cleanerTaskFunction(void*)+0xc0>
c0015983:	fb                   	sti    
c0015984:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015989:	83 e8 01             	sub    eax,0x1
c001598c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015991:	0f 85 31 ff ff ff    	jne    c00158c8 <cleanerTaskFunction(void*)+0x4>
c0015997:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001599c:	85 c0                	test   eax,eax
c001599e:	0f 84 24 ff ff ff    	je     c00158c8 <cleanerTaskFunction(void*)+0x4>
c00159a4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159ae:	e8 8d f6 ff ff       	call   c0015040 <schedule()>
c00159b3:	e9 10 ff ff ff       	jmp    c00158c8 <cleanerTaskFunction(void*)+0x4>
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	6a 02                	push   0x2
c00159bd:	e8 56 f8 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	e9 36 ff ff ff       	jmp    c0015900 <cleanerTaskFunction(void*)+0x3c>
c00159ca:	66 90                	xchg   ax,ax

c00159cc <terminateTask(int)>:
c00159cc:	83 ec 14             	sub    esp,0x14
c00159cf:	fa                   	cli    
c00159d0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159d6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159dc:	83 c2 01             	add    edx,0x1
c00159df:	83 c1 01             	add    ecx,0x1
c00159e2:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159e8:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ee:	fa                   	cli    
c00159ef:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159f8:	83 c0 01             	add    eax,0x1
c00159fb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a05:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a10:	50                   	push   eax
c0015a11:	68 6c 81 02 c0       	push   0xc002816c
c0015a16:	e8 65 92 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a2a:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a2f:	85 c0                	test   eax,eax
c0015a31:	74 65                	je     c0015a98 <terminateTask(int)+0xcc>
c0015a33:	83 ec 0c             	sub    esp,0xc
c0015a36:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a3d:	50                   	push   eax
c0015a3e:	e8 01 fb ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	66 90                	xchg   ax,ax
c0015a48:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a4d:	83 e8 01             	sub    eax,0x1
c0015a50:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a55:	75 01                	jne    c0015a58 <terminateTask(int)+0x8c>
c0015a57:	fb                   	sti    
c0015a58:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a5d:	83 e8 01             	sub    eax,0x1
c0015a60:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a65:	75 09                	jne    c0015a70 <terminateTask(int)+0xa4>
c0015a67:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a6e:	75 3c                	jne    c0015aac <terminateTask(int)+0xe0>
c0015a70:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a75:	83 e8 01             	sub    eax,0x1
c0015a78:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a7d:	75 01                	jne    c0015a80 <terminateTask(int)+0xb4>
c0015a7f:	fb                   	sti    
c0015a80:	fa                   	cli    
c0015a81:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a86:	83 c0 01             	add    eax,0x1
c0015a89:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a8e:	66 90                	xchg   ax,ax
c0015a90:	e8 ab f5 ff ff       	call   c0015040 <schedule()>
c0015a95:	eb d9                	jmp    c0015a70 <terminateTask(int)+0xa4>
c0015a97:	90                   	nop
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 72 11 02 c0       	push   0xc0021172
c0015aa0:	e8 a4 4e ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	eb 9e                	jmp    c0015a48 <terminateTask(int)+0x7c>
c0015aaa:	66 90                	xchg   ax,ax
c0015aac:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ab6:	eb d8                	jmp    c0015a90 <terminateTask(int)+0xc4>

c0015ab8 <Thr::terminateFromIRQ(int)>:
c0015ab8:	83 ec 18             	sub    esp,0x18
c0015abb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abf:	50                   	push   eax
c0015ac0:	e8 07 ff ff ff       	call   c00159cc <terminateTask(int)>
c0015ac5:	90                   	nop
c0015ac6:	66 90                	xchg   ax,ax

c0015ac8 <Semaphore::release()>:
c0015ac8:	83 ec 0c             	sub    esp,0xc
c0015acb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015acf:	fa                   	cli    
c0015ad0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ad5:	83 c0 01             	add    eax,0x1
c0015ad8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015add:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ae2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ae5:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015aeb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aee:	85 c9                	test   ecx,ecx
c0015af0:	74 42                	je     c0015b34 <Semaphore::release()+0x6c>
c0015af2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015af5:	83 ec 0c             	sub    esp,0xc
c0015af8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015afb:	51                   	push   ecx
c0015afc:	e8 43 fa ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015b01:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	83 e8 01             	sub    eax,0x1
c0015b0c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b11:	85 c0                	test   eax,eax
c0015b13:	75 0b                	jne    c0015b20 <Semaphore::release()+0x58>
c0015b15:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b1a:	85 c0                	test   eax,eax
c0015b1c:	75 22                	jne    c0015b40 <Semaphore::release()+0x78>
c0015b1e:	66 90                	xchg   ax,ax
c0015b20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b25:	83 e8 01             	sub    eax,0x1
c0015b28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b2d:	75 01                	jne    c0015b30 <Semaphore::release()+0x68>
c0015b2f:	fb                   	sti    
c0015b30:	83 c4 0c             	add    esp,0xc
c0015b33:	c3                   	ret    
c0015b34:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b37:	83 e9 01             	sub    ecx,0x1
c0015b3a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b3d:	eb cd                	jmp    c0015b0c <Semaphore::release()+0x44>
c0015b3f:	90                   	nop
c0015b40:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b4a:	e8 f1 f4 ff ff       	call   c0015040 <schedule()>
c0015b4f:	eb cf                	jmp    c0015b20 <Semaphore::release()+0x58>
c0015b51:	8d 76 00             	lea    esi,[esi+0x0]

c0015b54 <__static_initialization_and_destruction_0(int, int)>:
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b5c:	0f 85 8e 00 00 00    	jne    c0015bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b6a:	0f 85 80 00 00 00    	jne    c0015bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	68 84 81 02 c0       	push   0xc0028184
c0015b78:	e8 b7 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	83 ec 04             	sub    esp,0x4
c0015b83:	68 08 1e 02 c0       	push   0xc0021e08
c0015b88:	68 84 81 02 c0       	push   0xc0028184
c0015b8d:	68 e4 ee 01 c0       	push   0xc001eee4
c0015b92:	e8 66 4c ff ff       	call   c000a7fd <__cxa_atexit>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	83 ec 0c             	sub    esp,0xc
c0015b9d:	68 78 81 02 c0       	push   0xc0028178
c0015ba2:	e8 8d 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	83 ec 04             	sub    esp,0x4
c0015bad:	68 08 1e 02 c0       	push   0xc0021e08
c0015bb2:	68 78 81 02 c0       	push   0xc0028178
c0015bb7:	68 e4 ee 01 c0       	push   0xc001eee4
c0015bbc:	e8 3c 4c ff ff       	call   c000a7fd <__cxa_atexit>
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	68 6c 81 02 c0       	push   0xc002816c
c0015bcc:	e8 63 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	83 ec 04             	sub    esp,0x4
c0015bd7:	68 08 1e 02 c0       	push   0xc0021e08
c0015bdc:	68 6c 81 02 c0       	push   0xc002816c
c0015be1:	68 e4 ee 01 c0       	push   0xc001eee4
c0015be6:	e8 12 4c ff ff       	call   c000a7fd <__cxa_atexit>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	66 90                	xchg   ax,ax
c0015bf0:	90                   	nop
c0015bf1:	83 c4 0c             	add    esp,0xc
c0015bf4:	c3                   	ret    
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0015bf8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	83 ec 08             	sub    esp,0x8
c0015bfe:	68 ff ff 00 00       	push   0xffff
c0015c03:	6a 01                	push   0x1
c0015c05:	e8 4a ff ff ff       	call   c0015b54 <__static_initialization_and_destruction_0(int, int)>
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	83 c4 0c             	add    esp,0xc
c0015c10:	c3                   	ret    

c0015c11 <Vm::inbv(unsigned short)>:
c0015c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c15:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c1a:	75 06                	jne    c0015c22 <Vm::inbv(unsigned short)+0x11>
c0015c1c:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c21:	c3                   	ret    
c0015c22:	ec                   	in     al,dx
c0015c23:	c3                   	ret    

c0015c24 <Vm::outbv(unsigned short, unsigned char)>:
c0015c24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c31:	75 25                	jne    c0015c58 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c33:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c39:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c3c:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c42:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c48:	83 fa 20             	cmp    edx,0x20
c0015c4b:	75 0c                	jne    c0015c59 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c4d:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c57:	c3                   	ret    
c0015c58:	ee                   	out    dx,al
c0015c59:	c3                   	ret    

c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c64:	c1 e0 04             	shl    eax,0x4
c0015c67:	01 d0                	add    eax,edx
c0015c69:	c3                   	ret    

c0015c6a <Vm::getSegment(unsigned int)>:
c0015c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c6e:	c1 e8 10             	shr    eax,0x10
c0015c71:	c3                   	ret    

c0015c72 <Vm::getOffset(unsigned int)>:
c0015c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c76:	c3                   	ret    

c0015c77 <Vm::mainloop2()>:
c0015c77:	83 ec 18             	sub    esp,0x18
c0015c7a:	fa                   	cli    
c0015c7b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c81:	6a 02                	push   0x2
c0015c83:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c8a:	e8 89 f5 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c94:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c98:	52                   	push   edx
c0015c99:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c9d:	52                   	push   edx
c0015c9e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015ca2:	52                   	push   edx
c0015ca3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ca7:	50                   	push   eax
c0015ca8:	e8 62 a5 fe ff       	call   c000020f <goToVM86>
c0015cad:	83 c4 2c             	add    esp,0x2c
c0015cb0:	c3                   	ret    

c0015cb1 <Vm::mainVm8086Loop(void*)>:
c0015cb1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb6:	48                   	dec    eax
c0015cb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cbc:	75 01                	jne    c0015cbf <Vm::mainVm8086Loop(void*)+0xe>
c0015cbe:	fb                   	sti    
c0015cbf:	eb b6                	jmp    c0015c77 <Vm::mainloop2()>

c0015cc1 <Vm::mainloop3(unsigned long)>:
c0015cc1:	83 ec 18             	sub    esp,0x18
c0015cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc8:	fa                   	cli    
c0015cc9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccf:	6a 02                	push   0x2
c0015cd1:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cd8:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cdd:	e8 36 f5 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ce2:	83 c4 1c             	add    esp,0x1c
c0015ce5:	eb 90                	jmp    c0015c77 <Vm::mainloop2()>

c0015ce7 <Vm::initialise8086()>:
c0015ce7:	83 ec 0c             	sub    esp,0xc
c0015cea:	68 80 00 00 00       	push   0x80
c0015cef:	6a 00                	push   0x0
c0015cf1:	68 b1 5c 01 c0       	push   0xc0015cb1
c0015cf6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cfc:	e8 f3 f0 ff ff       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0015d01:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d08:	68 00 01 00 00       	push   0x100
c0015d0d:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d12:	6a 00                	push   0x0
c0015d14:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d19:	6a 00                	push   0x0
c0015d1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d21:	e8 be 42 ff ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d26:	83 c4 2c             	add    esp,0x2c
c0015d29:	c3                   	ret    

c0015d2a <Vm::finish8086()>:
c0015d2a:	53                   	push   ebx
c0015d2b:	83 ec 08             	sub    esp,0x8
c0015d2e:	fa                   	cli    
c0015d2f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d35:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d3c:	75 15                	jne    c0015d53 <Vm::finish8086()+0x29>
c0015d3e:	e8 fd f2 ff ff       	call   c0015040 <schedule()>
c0015d43:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d48:	48                   	dec    eax
c0015d49:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d4e:	75 de                	jne    c0015d2e <Vm::finish8086()+0x4>
c0015d50:	fb                   	sti    
c0015d51:	eb db                	jmp    c0015d2e <Vm::finish8086()+0x4>
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d5c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d62:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d69:	e8 d6 f7 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015d6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d73:	83 c4 10             	add    esp,0x10
c0015d76:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d79:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d7f:	85 d2                	test   edx,edx
c0015d81:	75 01                	jne    c0015d84 <Vm::finish8086()+0x5a>
c0015d83:	fb                   	sti    
c0015d84:	83 c4 08             	add    esp,0x8
c0015d87:	89 d8                	mov    eax,ebx
c0015d89:	5b                   	pop    ebx
c0015d8a:	c3                   	ret    

c0015d8b <Vm::getOutput8086(unsigned char*)>:
c0015d8b:	57                   	push   edi
c0015d8c:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d92:	56                   	push   esi
c0015d93:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d9e:	5e                   	pop    esi
c0015d9f:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015da4:	5f                   	pop    edi
c0015da5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015daf:	c3                   	ret    

c0015db0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015db0:	55                   	push   ebp
c0015db1:	57                   	push   edi
c0015db2:	56                   	push   esi
c0015db3:	53                   	push   ebx
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015dbb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015dbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015dc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015dc7:	fa                   	cli    
c0015dc8:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dce:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dd5:	75 15                	jne    c0015dec <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dd7:	e8 64 f2 ff ff       	call   c0015040 <schedule()>
c0015ddc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015de1:	48                   	dec    eax
c0015de2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015de7:	75 de                	jne    c0015dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de9:	fb                   	sti    
c0015dea:	eb db                	jmp    c0015dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dec:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015df1:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dfb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dff:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e03:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e07:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e0b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e0f:	50                   	push   eax
c0015e10:	6a 20                	push   0x20
c0015e12:	6a 00                	push   0x0
c0015e14:	68 e0 81 02 c0       	push   0xc00281e0
c0015e19:	e8 c2 a6 fe ff       	call   c00004e0 <memset>
c0015e1e:	5a                   	pop    edx
c0015e1f:	59                   	pop    ecx
c0015e20:	0f b7 ff             	movzx  edi,di
c0015e23:	57                   	push   edi
c0015e24:	0f b7 f6             	movzx  esi,si
c0015e27:	56                   	push   esi
c0015e28:	e8 2d fe ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	89 c7                	mov    edi,eax
c0015e32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e41:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e48:	48                   	dec    eax
c0015e49:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4e:	75 01                	jne    c0015e51 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e50:	fb                   	sti    
c0015e51:	83 ec 0c             	sub    esp,0xc
c0015e54:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e5a:	e8 e5 f6 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015e5f:	83 c4 1c             	add    esp,0x1c
c0015e62:	5b                   	pop    ebx
c0015e63:	b0 01                	mov    al,0x1
c0015e65:	5e                   	pop    esi
c0015e66:	5f                   	pop    edi
c0015e67:	5d                   	pop    ebp
c0015e68:	c3                   	ret    

c0015e69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e69:	55                   	push   ebp
c0015e6a:	57                   	push   edi
c0015e6b:	56                   	push   esi
c0015e6c:	53                   	push   ebx
c0015e6d:	83 ec 2c             	sub    esp,0x2c
c0015e70:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015e74:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015e78:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e7c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015e80:	fa                   	cli    
c0015e81:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015e88:	89 f0                	mov    eax,esi
c0015e8a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e90:	84 c0                	test   al,al
c0015e92:	75 1d                	jne    c0015eb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e98:	e8 a3 f1 ff ff       	call   c0015040 <schedule()>
c0015e9d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ea2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea6:	48                   	dec    eax
c0015ea7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015eac:	75 d2                	jne    c0015e80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eae:	fb                   	sti    
c0015eaf:	eb cf                	jmp    c0015e80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eb1:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015eb6:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ec0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ec4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ec8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015ecc:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015ed0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ed4:	50                   	push   eax
c0015ed5:	6a 20                	push   0x20
c0015ed7:	6a 00                	push   0x0
c0015ed9:	68 e0 81 02 c0       	push   0xc00281e0
c0015ede:	e8 fd a5 fe ff       	call   c00004e0 <memset>
c0015ee3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eea:	e8 98 1b ff ff       	call   c0007a87 <malloc>
c0015eef:	83 c4 0c             	add    esp,0xc
c0015ef2:	89 c3                	mov    ebx,eax
c0015ef4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015efa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015efe:	50                   	push   eax
c0015eff:	e8 c8 4f ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	85 db                	test   ebx,ebx
c0015f09:	75 0a                	jne    c0015f15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	68 9c 12 02 c0       	push   0xc002129c
c0015f13:	eb 2b                	jmp    c0015f40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015f15:	50                   	push   eax
c0015f16:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f1a:	50                   	push   eax
c0015f1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f1f:	50                   	push   eax
c0015f20:	53                   	push   ebx
c0015f21:	e8 0e 53 ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0015f26:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f2a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f36:	74 27                	je     c0015f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	68 b0 12 02 c0       	push   0xc00212b0
c0015f40:	e8 f2 a8 ff ff       	call   c0010837 <KePanic(char const*)>
c0015f45:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4a:	48                   	dec    eax
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f53:	85 c0                	test   eax,eax
c0015f55:	75 01                	jne    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f57:	fb                   	sti    
c0015f58:	31 f6                	xor    esi,esi
c0015f5a:	e9 8f 00 00 00       	jmp    c0015fee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f5f:	51                   	push   ecx
c0015f60:	51                   	push   ecx
c0015f61:	6a 01                	push   0x1
c0015f63:	53                   	push   ebx
c0015f64:	e8 1f 50 ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	85 c0                	test   eax,eax
c0015f6e:	74 26                	je     c0015f96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	68 c9 12 02 c0       	push   0xc00212c9
c0015f78:	e8 ba a8 ff ff       	call   c0010837 <KePanic(char const*)>
c0015f7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	48                   	dec    eax
c0015f86:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f8b:	85 c0                	test   eax,eax
c0015f8d:	75 c9                	jne    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f8f:	fb                   	sti    
c0015f90:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f94:	eb 58                	jmp    c0015fee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f96:	50                   	push   eax
c0015f97:	50                   	push   eax
c0015f98:	0f b7 ed             	movzx  ebp,bp
c0015f9b:	55                   	push   ebp
c0015f9c:	0f b7 ff             	movzx  edi,di
c0015f9f:	57                   	push   edi
c0015fa0:	e8 b5 fc ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0015fa5:	5a                   	pop    edx
c0015fa6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fa8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015fac:	51                   	push   ecx
c0015fad:	50                   	push   eax
c0015fae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb6:	53                   	push   ebx
c0015fb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fba:	83 c4 14             	add    esp,0x14
c0015fbd:	53                   	push   ebx
c0015fbe:	e8 23 50 ff ff       	call   c000afe6 <File::close()>
c0015fc3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc8:	83 c4 10             	add    esp,0x10
c0015fcb:	48                   	dec    eax
c0015fcc:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fd3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fd8:	85 c0                	test   eax,eax
c0015fda:	75 01                	jne    c0015fdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0015fdc:	fb                   	sti    
c0015fdd:	83 ec 0c             	sub    esp,0xc
c0015fe0:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fe6:	e8 59 f5 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	83 c4 2c             	add    esp,0x2c
c0015ff1:	89 f0                	mov    eax,esi
c0015ff3:	5b                   	pop    ebx
c0015ff4:	5e                   	pop    esi
c0015ff5:	5f                   	pop    edi
c0015ff6:	5d                   	pop    ebp
c0015ff7:	c3                   	ret    

c0015ff8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015ff8:	57                   	push   edi
c0015ff9:	56                   	push   esi
c0015ffa:	53                   	push   ebx
c0015ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016003:	83 e8 06             	sub    eax,0x6
c0016006:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001600a:	0f b7 c0             	movzx  eax,ax
c001600d:	50                   	push   eax
c001600e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016013:	50                   	push   eax
c0016014:	e8 41 fc ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016019:	5a                   	pop    edx
c001601a:	5e                   	pop    esi
c001601b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001601e:	8d 56 fa             	lea    edx,[esi-0x6]
c0016021:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016024:	81 e2 ff ff 00 00    	and    edx,0xffff
c001602a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001602d:	8d 56 02             	lea    edx,[esi+0x2]
c0016030:	66 89 10             	mov    WORD PTR [eax],dx
c0016033:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016036:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001603a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001603d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016041:	89 d6                	mov    esi,edx
c0016043:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016049:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c001604f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016053:	74 05                	je     c001605a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016055:	80 ce 02             	or     dh,0x2
c0016058:	89 d6                	mov    esi,edx
c001605a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001605e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016063:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016067:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001606f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016072:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001607a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001607d:	5b                   	pop    ebx
c001607e:	5e                   	pop    esi
c001607f:	5f                   	pop    edi
c0016080:	c3                   	ret    

c0016081 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016081:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016086:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001608b:	c1 e0 04             	shl    eax,0x4
c001608e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016091:	c3                   	ret    

c0016092 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016092:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016097:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001609c:	c1 e0 04             	shl    eax,0x4
c001609f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00160a3:	c3                   	ret    

c00160a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00160a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ae:	c1 e0 04             	shl    eax,0x4
c00160b1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160b4:	c3                   	ret    

c00160b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160bf:	c1 e0 04             	shl    eax,0x4
c00160c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160c6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160c9:	c3                   	ret    

c00160ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d4:	c1 e0 04             	shl    eax,0x4
c00160d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160db:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160df:	c3                   	ret    

c00160e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ea:	c1 e0 04             	shl    eax,0x4
c00160ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160f1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160f4:	c3                   	ret    

c00160f5 <Vm::faultHandler(regs*)>:
c00160f5:	55                   	push   ebp
c00160f6:	57                   	push   edi
c00160f7:	56                   	push   esi
c00160f8:	53                   	push   ebx
c00160f9:	83 ec 2c             	sub    esp,0x2c
c00160fc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016100:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016104:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016107:	52                   	push   edx
c0016108:	0f b7 f8             	movzx  edi,ax
c001610b:	0f b7 c0             	movzx  eax,ax
c001610e:	50                   	push   eax
c001610f:	e8 46 fb ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016114:	5a                   	pop    edx
c0016115:	59                   	pop    ecx
c0016116:	89 c1                	mov    ecx,eax
c0016118:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001611b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001611f:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016128:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001612b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001612f:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001613c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016140:	e8 15 fb ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016145:	5e                   	pop    esi
c0016146:	be 06 00 00 00       	mov    esi,0x6
c001614b:	5d                   	pop    ebp
c001614c:	31 ed                	xor    ebp,ebp
c001614e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016153:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016156:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001615c:	0f 84 54 02 00 00    	je     c00163b6 <Vm::faultHandler(regs*)+0x2c1>
c0016162:	0f 87 94 00 00 00    	ja     c00161fc <Vm::faultHandler(regs*)+0x107>
c0016168:	83 fa 66             	cmp    edx,0x66
c001616b:	0f 84 c2 01 00 00    	je     c0016333 <Vm::faultHandler(regs*)+0x23e>
c0016171:	77 47                	ja     c00161ba <Vm::faultHandler(regs*)+0xc5>
c0016173:	83 fa 36             	cmp    edx,0x36
c0016176:	0f 84 aa 01 00 00    	je     c0016326 <Vm::faultHandler(regs*)+0x231>
c001617c:	77 1a                	ja     c0016198 <Vm::faultHandler(regs*)+0xa3>
c001617e:	83 fa 26             	cmp    edx,0x26
c0016181:	0f 84 78 01 00 00    	je     c00162ff <Vm::faultHandler(regs*)+0x20a>
c0016187:	83 fa 2e             	cmp    edx,0x2e
c001618a:	0f 85 07 06 00 00    	jne    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c0016190:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016193:	31 f6                	xor    esi,esi
c0016195:	41                   	inc    ecx
c0016196:	eb bb                	jmp    c0016153 <Vm::faultHandler(regs*)+0x5e>
c0016198:	83 fa 64             	cmp    edx,0x64
c001619b:	0f 84 6b 01 00 00    	je     c001630c <Vm::faultHandler(regs*)+0x217>
c00161a1:	0f 87 72 01 00 00    	ja     c0016319 <Vm::faultHandler(regs*)+0x224>
c00161a7:	83 fa 3e             	cmp    edx,0x3e
c00161aa:	0f 85 e7 05 00 00    	jne    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c00161b0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161b3:	be 01 00 00 00       	mov    esi,0x1
c00161b8:	eb db                	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c00161ba:	83 fa 6d             	cmp    edx,0x6d
c00161bd:	0f 84 14 03 00 00    	je     c00164d7 <Vm::faultHandler(regs*)+0x3e2>
c00161c3:	77 17                	ja     c00161dc <Vm::faultHandler(regs*)+0xe7>
c00161c5:	83 fa 67             	cmp    edx,0x67
c00161c8:	0f 84 72 01 00 00    	je     c0016340 <Vm::faultHandler(regs*)+0x24b>
c00161ce:	83 fa 6c             	cmp    edx,0x6c
c00161d1:	0f 84 91 02 00 00    	je     c0016468 <Vm::faultHandler(regs*)+0x373>
c00161d7:	e9 bb 05 00 00       	jmp    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c00161dc:	83 fa 6f             	cmp    edx,0x6f
c00161df:	0f 84 20 04 00 00    	je     c0016605 <Vm::faultHandler(regs*)+0x510>
c00161e5:	0f 82 82 03 00 00    	jb     c001656d <Vm::faultHandler(regs*)+0x478>
c00161eb:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161f1:	0f 84 56 01 00 00    	je     c001634d <Vm::faultHandler(regs*)+0x258>
c00161f7:	e9 9b 05 00 00       	jmp    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c00161fc:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016202:	0f 84 37 05 00 00    	je     c001673f <Vm::faultHandler(regs*)+0x64a>
c0016208:	0f 87 89 00 00 00    	ja     c0016297 <Vm::faultHandler(regs*)+0x1a2>
c001620e:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016214:	0f 84 b6 04 00 00    	je     c00166d0 <Vm::faultHandler(regs*)+0x5db>
c001621a:	77 58                	ja     c0016274 <Vm::faultHandler(regs*)+0x17f>
c001621c:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016222:	0f 84 ee 01 00 00    	je     c0016416 <Vm::faultHandler(regs*)+0x321>
c0016228:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001622e:	0f 85 63 05 00 00    	jne    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c0016234:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016237:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001623a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001623e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016241:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016245:	81 ca 00 02 02 00    	or     edx,0x20200
c001624b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001624e:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016252:	c1 e8 09             	shr    eax,0x9
c0016255:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001625b:	83 e0 01             	and    eax,0x1
c001625e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016261:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016264:	83 c0 06             	add    eax,0x6
c0016267:	25 ff ff 00 00       	and    eax,0xffff
c001626c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001626f:	e9 1f 05 00 00       	jmp    c0016793 <Vm::faultHandler(regs*)+0x69e>
c0016274:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001627a:	0f 84 95 04 00 00    	je     c0016715 <Vm::faultHandler(regs*)+0x620>
c0016280:	0f 82 66 04 00 00    	jb     c00166ec <Vm::faultHandler(regs*)+0x5f7>
c0016286:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001628c:	0f 84 9a 04 00 00    	je     c001672c <Vm::faultHandler(regs*)+0x637>
c0016292:	e9 00 05 00 00       	jmp    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c0016297:	81 fa ef 00 00 00    	cmp    edx,0xef
c001629d:	0f 84 dd 04 00 00    	je     c0016780 <Vm::faultHandler(regs*)+0x68b>
c00162a3:	77 2e                	ja     c00162d3 <Vm::faultHandler(regs*)+0x1de>
c00162a5:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162ab:	0f 84 aa 04 00 00    	je     c001675b <Vm::faultHandler(regs*)+0x666>
c00162b1:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162b7:	0f 85 da 04 00 00    	jne    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c00162bd:	50                   	push   eax
c00162be:	50                   	push   eax
c00162bf:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162c3:	50                   	push   eax
c00162c4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162c8:	50                   	push   eax
c00162c9:	e8 56 f9 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c00162ce:	e9 a5 04 00 00       	jmp    c0016778 <Vm::faultHandler(regs*)+0x683>
c00162d3:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162d9:	0f 84 6d 01 00 00    	je     c001644c <Vm::faultHandler(regs*)+0x357>
c00162df:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162e5:	0f 84 6f 01 00 00    	je     c001645a <Vm::faultHandler(regs*)+0x365>
c00162eb:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162f1:	0f 85 a0 04 00 00    	jne    c0016797 <Vm::faultHandler(regs*)+0x6a2>
c00162f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162fa:	e9 96 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c00162ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016302:	be 02 00 00 00       	mov    esi,0x2
c0016307:	e9 89 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c001630c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630f:	be 03 00 00 00       	mov    esi,0x3
c0016314:	e9 7c fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001631c:	be 04 00 00 00       	mov    esi,0x4
c0016321:	e9 6f fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016326:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016329:	be 05 00 00 00       	mov    esi,0x5
c001632e:	e9 62 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016333:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016336:	bd 01 00 00 00       	mov    ebp,0x1
c001633b:	e9 55 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016340:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016343:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016348:	e9 48 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c001634d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016350:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016354:	83 e5 01             	and    ebp,0x1
c0016357:	74 30                	je     c0016389 <Vm::faultHandler(regs*)+0x294>
c0016359:	83 e9 04             	sub    ecx,0x4
c001635c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016362:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016368:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001636b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001636e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016374:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016378:	0f 84 12 04 00 00    	je     c0016790 <Vm::faultHandler(regs*)+0x69b>
c001637e:	80 ce 02             	or     dh,0x2
c0016381:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016384:	e9 07 04 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c0016389:	83 e9 02             	sub    ecx,0x2
c001638c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016392:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016395:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016399:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001639f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00163a3:	74 05                	je     c00163aa <Vm::faultHandler(regs*)+0x2b5>
c00163a5:	80 ce 02             	or     dh,0x2
c00163a8:	eb 03                	jmp    c00163ad <Vm::faultHandler(regs*)+0x2b8>
c00163aa:	80 e6 fd             	and    dh,0xfd
c00163ad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163b1:	e9 da 03 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c00163b6:	83 e5 01             	and    ebp,0x1
c00163b9:	74 2a                	je     c00163e5 <Vm::faultHandler(regs*)+0x2f0>
c00163bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00163bd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163c3:	81 ca 00 02 02 00    	or     edx,0x20200
c00163c9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00163ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163d4:	c1 e8 09             	shr    eax,0x9
c00163d7:	83 e0 01             	and    eax,0x1
c00163da:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163dd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163e0:	83 c0 04             	add    eax,0x4
c00163e3:	eb 24                	jmp    c0016409 <Vm::faultHandler(regs*)+0x314>
c00163e5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163e8:	81 ca 00 02 02 00    	or     edx,0x20200
c00163ee:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163f1:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163f4:	c1 e8 09             	shr    eax,0x9
c00163f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163fd:	83 e0 01             	and    eax,0x1
c0016400:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016403:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016406:	83 c0 02             	add    eax,0x2
c0016409:	25 ff ff 00 00       	and    eax,0xffff
c001640e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016411:	e9 7a 03 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c0016416:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001641a:	3d ee 00 00 00       	cmp    eax,0xee
c001641f:	75 10                	jne    c0016431 <Vm::faultHandler(regs*)+0x33c>
c0016421:	83 ec 0c             	sub    esp,0xc
c0016424:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016427:	e8 95 f8 ff ff       	call   c0015cc1 <Vm::mainloop3(unsigned long)>
c001642c:	e9 4a 03 00 00       	jmp    c001677b <Vm::faultHandler(regs*)+0x686>
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016438:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001643c:	51                   	push   ecx
c001643d:	50                   	push   eax
c001643e:	53                   	push   ebx
c001643f:	e8 b4 fb ff ff       	call   c0015ff8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016444:	83 c4 20             	add    esp,0x20
c0016447:	e9 47 03 00 00       	jmp    c0016793 <Vm::faultHandler(regs*)+0x69e>
c001644c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016451:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016455:	e9 36 03 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c001645a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016463:	e9 28 03 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c0016468:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001646b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016470:	74 2b                	je     c001649d <Vm::faultHandler(regs*)+0x3a8>
c0016472:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016479:	76 22                	jbe    c001649d <Vm::faultHandler(regs*)+0x3a8>
c001647b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001647f:	50                   	push   eax
c0016480:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016484:	50                   	push   eax
c0016485:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016489:	50                   	push   eax
c001648a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001648e:	50                   	push   eax
c001648f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016493:	50                   	push   eax
c0016494:	6a 6c                	push   0x6c
c0016496:	6a 6c                	push   0x6c
c0016498:	e9 c0 01 00 00       	jmp    c001665d <Vm::faultHandler(regs*)+0x568>
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164a4:	50                   	push   eax
c00164a5:	e8 67 f7 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00164aa:	83 c4 0c             	add    esp,0xc
c00164ad:	0f b6 c0             	movzx  eax,al
c00164b0:	50                   	push   eax
c00164b1:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164b5:	0f b7 f6             	movzx  esi,si
c00164b8:	50                   	push   eax
c00164b9:	56                   	push   esi
c00164ba:	e8 f6 fb ff ff       	call   c00160b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164c9:	74 03                	je     c00164ce <Vm::faultHandler(regs*)+0x3d9>
c00164cb:	48                   	dec    eax
c00164cc:	eb 01                	jmp    c00164cf <Vm::faultHandler(regs*)+0x3da>
c00164ce:	40                   	inc    eax
c00164cf:	0f b7 c0             	movzx  eax,ax
c00164d2:	e9 8e 00 00 00       	jmp    c0016565 <Vm::faultHandler(regs*)+0x470>
c00164d7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164dd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164e2:	74 29                	je     c001650d <Vm::faultHandler(regs*)+0x418>
c00164e4:	3d ff ff 00 00       	cmp    eax,0xffff
c00164e9:	76 22                	jbe    c001650d <Vm::faultHandler(regs*)+0x418>
c00164eb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164ef:	50                   	push   eax
c00164f0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164f4:	50                   	push   eax
c00164f5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164f9:	50                   	push   eax
c00164fa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164fe:	50                   	push   eax
c00164ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016503:	50                   	push   eax
c0016504:	6a 6d                	push   0x6d
c0016506:	6a 6d                	push   0x6d
c0016508:	e9 50 01 00 00       	jmp    c001665d <Vm::faultHandler(regs*)+0x568>
c001650d:	0f b7 c8             	movzx  ecx,ax
c0016510:	0f b7 f6             	movzx  esi,si
c0016513:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016516:	83 e5 01             	and    ebp,0x1
c0016519:	74 1e                	je     c0016539 <Vm::faultHandler(regs*)+0x444>
c001651b:	ed                   	in     eax,dx
c001651c:	55                   	push   ebp
c001651d:	50                   	push   eax
c001651e:	51                   	push   ecx
c001651f:	56                   	push   esi
c0016520:	e8 bb fb ff ff       	call   c00160e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016525:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016528:	83 c4 10             	add    esp,0x10
c001652b:	8d 50 04             	lea    edx,[eax+0x4]
c001652e:	83 e8 04             	sub    eax,0x4
c0016531:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016537:	eb 20                	jmp    c0016559 <Vm::faultHandler(regs*)+0x464>
c0016539:	66 ed                	in     ax,dx
c001653b:	0f b7 c0             	movzx  eax,ax
c001653e:	57                   	push   edi
c001653f:	50                   	push   eax
c0016540:	51                   	push   ecx
c0016541:	56                   	push   esi
c0016542:	e8 83 fb ff ff       	call   c00160ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016547:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	8d 50 02             	lea    edx,[eax+0x2]
c0016550:	83 e8 02             	sub    eax,0x2
c0016553:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016559:	25 ff ff 00 00       	and    eax,0xffff
c001655e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016562:	0f 44 c2             	cmove  eax,edx
c0016565:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016568:	e9 23 02 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c001656d:	8d 46 ff             	lea    eax,[esi-0x1]
c0016570:	0f b6 f0             	movzx  esi,al
c0016573:	83 fe 05             	cmp    esi,0x5
c0016576:	77 23                	ja     c001659b <Vm::faultHandler(regs*)+0x4a6>
c0016578:	ff 24 b5 3c 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecc4]
c001657f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016584:	eb 15                	jmp    c001659b <Vm::faultHandler(regs*)+0x4a6>
c0016586:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001658a:	eb 0f                	jmp    c001659b <Vm::faultHandler(regs*)+0x4a6>
c001658c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016590:	eb 09                	jmp    c001659b <Vm::faultHandler(regs*)+0x4a6>
c0016592:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016596:	eb 03                	jmp    c001659b <Vm::faultHandler(regs*)+0x4a6>
c0016598:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001659b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001659e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165a3:	74 29                	je     c00165ce <Vm::faultHandler(regs*)+0x4d9>
c00165a5:	3d ff ff 00 00       	cmp    eax,0xffff
c00165aa:	76 22                	jbe    c00165ce <Vm::faultHandler(regs*)+0x4d9>
c00165ac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165b0:	50                   	push   eax
c00165b1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165b5:	50                   	push   eax
c00165b6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165ba:	50                   	push   eax
c00165bb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165bf:	50                   	push   eax
c00165c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165c4:	50                   	push   eax
c00165c5:	6a 6e                	push   0x6e
c00165c7:	6a 6e                	push   0x6e
c00165c9:	e9 8f 00 00 00       	jmp    c001665d <Vm::faultHandler(regs*)+0x568>
c00165ce:	52                   	push   edx
c00165cf:	52                   	push   edx
c00165d0:	0f b7 c0             	movzx  eax,ax
c00165d3:	50                   	push   eax
c00165d4:	57                   	push   edi
c00165d5:	e8 a7 fa ff ff       	call   c0016081 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165da:	59                   	pop    ecx
c00165db:	5e                   	pop    esi
c00165dc:	0f b6 c0             	movzx  eax,al
c00165df:	50                   	push   eax
c00165e0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165e4:	50                   	push   eax
c00165e5:	e8 3a f6 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165f4:	74 03                	je     c00165f9 <Vm::faultHandler(regs*)+0x504>
c00165f6:	48                   	dec    eax
c00165f7:	eb 01                	jmp    c00165fa <Vm::faultHandler(regs*)+0x505>
c00165f9:	40                   	inc    eax
c00165fa:	0f b7 c0             	movzx  eax,ax
c00165fd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016600:	e9 8b 01 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c0016605:	8d 46 ff             	lea    eax,[esi-0x1]
c0016608:	0f b6 f0             	movzx  esi,al
c001660b:	83 fe 05             	cmp    esi,0x5
c001660e:	77 1e                	ja     c001662e <Vm::faultHandler(regs*)+0x539>
c0016610:	ff 24 b5 54 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecac]
c0016617:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001661b:	eb 11                	jmp    c001662e <Vm::faultHandler(regs*)+0x539>
c001661d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016620:	eb 0c                	jmp    c001662e <Vm::faultHandler(regs*)+0x539>
c0016622:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016625:	eb 07                	jmp    c001662e <Vm::faultHandler(regs*)+0x539>
c0016627:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001662a:	eb 02                	jmp    c001662e <Vm::faultHandler(regs*)+0x539>
c001662c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001662e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016636:	74 37                	je     c001666f <Vm::faultHandler(regs*)+0x57a>
c0016638:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001663e:	76 2f                	jbe    c001666f <Vm::faultHandler(regs*)+0x57a>
c0016640:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016644:	50                   	push   eax
c0016645:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016649:	50                   	push   eax
c001664a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001664e:	50                   	push   eax
c001664f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016653:	50                   	push   eax
c0016654:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016658:	50                   	push   eax
c0016659:	6a 6f                	push   0x6f
c001665b:	6a 6f                	push   0x6f
c001665d:	68 e2 12 02 c0       	push   0xc00212e2
c0016662:	e8 e2 42 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016667:	83 c4 20             	add    esp,0x20
c001666a:	e9 86 01 00 00       	jmp    c00167f5 <Vm::faultHandler(regs*)+0x700>
c001666f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016672:	0f b7 d7             	movzx  edx,di
c0016675:	81 e1 00 04 00 00    	and    ecx,0x400
c001667b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001667e:	0f b7 c6             	movzx  eax,si
c0016681:	83 e5 01             	and    ebp,0x1
c0016684:	74 1c                	je     c00166a2 <Vm::faultHandler(regs*)+0x5ad>
c0016686:	55                   	push   ebp
c0016687:	55                   	push   ebp
c0016688:	50                   	push   eax
c0016689:	52                   	push   edx
c001668a:	e8 15 fa ff ff       	call   c00160a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001668f:	83 c4 10             	add    esp,0x10
c0016692:	89 fa                	mov    edx,edi
c0016694:	ef                   	out    dx,eax
c0016695:	8d 46 04             	lea    eax,[esi+0x4]
c0016698:	83 ee 04             	sub    esi,0x4
c001669b:	25 ff ff 00 00       	and    eax,0xffff
c00166a0:	eb 1b                	jmp    c00166bd <Vm::faultHandler(regs*)+0x5c8>
c00166a2:	55                   	push   ebp
c00166a3:	55                   	push   ebp
c00166a4:	50                   	push   eax
c00166a5:	52                   	push   edx
c00166a6:	e8 e7 f9 ff ff       	call   c0016092 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166ab:	83 c4 10             	add    esp,0x10
c00166ae:	89 fa                	mov    edx,edi
c00166b0:	66 ef                	out    dx,ax
c00166b2:	8d 46 02             	lea    eax,[esi+0x2]
c00166b5:	83 ee 02             	sub    esi,0x2
c00166b8:	25 ff ff 00 00       	and    eax,0xffff
c00166bd:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166c3:	85 c9                	test   ecx,ecx
c00166c5:	0f 44 f0             	cmove  esi,eax
c00166c8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166cb:	e9 c0 00 00 00       	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c00166d0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166d7:	83 ec 0c             	sub    esp,0xc
c00166da:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166de:	50                   	push   eax
c00166df:	e8 2d f5 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00166e4:	0f b6 c0             	movzx  eax,al
c00166e7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166ea:	eb 3a                	jmp    c0016726 <Vm::faultHandler(regs*)+0x631>
c00166ec:	83 e5 01             	and    ebp,0x1
c00166ef:	74 07                	je     c00166f8 <Vm::faultHandler(regs*)+0x603>
c00166f1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166f5:	ed                   	in     eax,dx
c00166f6:	eb 14                	jmp    c001670c <Vm::faultHandler(regs*)+0x617>
c00166f8:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166fb:	66 31 f6             	xor    si,si
c00166fe:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016701:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016705:	66 ed                	in     ax,dx
c0016707:	0f b7 c0             	movzx  eax,ax
c001670a:	09 f0                	or     eax,esi
c001670c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001670f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016713:	eb 7e                	jmp    c0016793 <Vm::faultHandler(regs*)+0x69e>
c0016715:	52                   	push   edx
c0016716:	52                   	push   edx
c0016717:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001671b:	50                   	push   eax
c001671c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016720:	50                   	push   eax
c0016721:	e8 fe f4 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c0016726:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001672a:	eb 4f                	jmp    c001677b <Vm::faultHandler(regs*)+0x686>
c001672c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001672f:	83 e5 01             	and    ebp,0x1
c0016732:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016736:	74 03                	je     c001673b <Vm::faultHandler(regs*)+0x646>
c0016738:	ef                   	out    dx,eax
c0016739:	eb d4                	jmp    c001670f <Vm::faultHandler(regs*)+0x61a>
c001673b:	66 ef                	out    dx,ax
c001673d:	eb d0                	jmp    c001670f <Vm::faultHandler(regs*)+0x61a>
c001673f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016746:	83 ec 0c             	sub    esp,0xc
c0016749:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001674d:	50                   	push   eax
c001674e:	e8 be f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c0016753:	0f b6 c0             	movzx  eax,al
c0016756:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016759:	eb 1d                	jmp    c0016778 <Vm::faultHandler(regs*)+0x683>
c001675b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001675e:	83 e5 01             	and    ebp,0x1
c0016761:	74 03                	je     c0016766 <Vm::faultHandler(regs*)+0x671>
c0016763:	ed                   	in     eax,dx
c0016764:	eb 0d                	jmp    c0016773 <Vm::faultHandler(regs*)+0x67e>
c0016766:	66 ed                	in     ax,dx
c0016768:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001676b:	66 31 d2             	xor    dx,dx
c001676e:	0f b7 c0             	movzx  eax,ax
c0016771:	09 d0                	or     eax,edx
c0016773:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016776:	eb 18                	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c0016778:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	eb 13                	jmp    c0016793 <Vm::faultHandler(regs*)+0x69e>
c0016780:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016783:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016786:	83 e5 01             	and    ebp,0x1
c0016789:	74 03                	je     c001678e <Vm::faultHandler(regs*)+0x699>
c001678b:	ef                   	out    dx,eax
c001678c:	eb 02                	jmp    c0016790 <Vm::faultHandler(regs*)+0x69b>
c001678e:	66 ef                	out    dx,ax
c0016790:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016793:	b0 01                	mov    al,0x1
c0016795:	eb 60                	jmp    c00167f7 <Vm::faultHandler(regs*)+0x702>
c0016797:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001679b:	50                   	push   eax
c001679c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167a0:	50                   	push   eax
c00167a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167a5:	50                   	push   eax
c00167a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167aa:	50                   	push   eax
c00167ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167af:	50                   	push   eax
c00167b0:	52                   	push   edx
c00167b1:	52                   	push   edx
c00167b2:	68 0f 13 02 c0       	push   0xc002130f
c00167b7:	e8 8d 41 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00167bc:	83 c4 20             	add    esp,0x20
c00167bf:	83 ec 0c             	sub    esp,0xc
c00167c2:	6a 60                	push   0x60
c00167c4:	e8 48 f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00167c9:	0f b6 d0             	movzx  edx,al
c00167cc:	83 c4 10             	add    esp,0x10
c00167cf:	83 fa 1c             	cmp    edx,0x1c
c00167d2:	74 05                	je     c00167d9 <Vm::faultHandler(regs*)+0x6e4>
c00167d4:	83 fa 5a             	cmp    edx,0x5a
c00167d7:	75 e6                	jne    c00167bf <Vm::faultHandler(regs*)+0x6ca>
c00167d9:	0f b6 c0             	movzx  eax,al
c00167dc:	83 f8 1c             	cmp    eax,0x1c
c00167df:	74 05                	je     c00167e6 <Vm::faultHandler(regs*)+0x6f1>
c00167e1:	83 f8 5a             	cmp    eax,0x5a
c00167e4:	75 0f                	jne    c00167f5 <Vm::faultHandler(regs*)+0x700>
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	6a 60                	push   0x60
c00167eb:	e8 21 f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00167f0:	83 c4 10             	add    esp,0x10
c00167f3:	eb e4                	jmp    c00167d9 <Vm::faultHandler(regs*)+0x6e4>
c00167f5:	31 c0                	xor    eax,eax
c00167f7:	83 c4 2c             	add    esp,0x2c
c00167fa:	5b                   	pop    ebx
c00167fb:	5e                   	pop    esi
c00167fc:	5f                   	pop    edi
c00167fd:	5d                   	pop    ebp
c00167fe:	c3                   	ret    

c00167ff <noCopro(unsigned long)>:
c00167ff:	c3                   	ret    

c0016800 <nmiHandler(regs*, void*)>:
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	50                   	push   eax
c001680c:	e8 7b 0a ff ff       	call   c000728c <Computer::handleNMI()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	90                   	nop
c0016815:	83 c4 0c             	add    esp,0xc
c0016818:	c3                   	ret    

c0016819 <doubleFault(regs*, void*)>:
c0016819:	55                   	push   ebp
c001681a:	89 e5                	mov    ebp,esp
c001681c:	83 ec 08             	sub    esp,0x8
c001681f:	83 ec 0c             	sub    esp,0xc
c0016822:	68 6c 13 02 c0       	push   0xc002136c
c0016827:	e8 0b a0 ff ff       	call   c0010837 <KePanic(char const*)>
c001682c:	83 c4 10             	add    esp,0x10
c001682f:	90                   	nop
c0016830:	c9                   	leave  
c0016831:	c3                   	ret    

c0016832 <displayDebugInfo(regs*)>:
c0016832:	83 ec 1c             	sub    esp,0x1c
c0016835:	0f 20 c0             	mov    eax,cr0
c0016838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001683c:	0f 20 d0             	mov    eax,cr2
c001683f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016843:	0f 20 d8             	mov    eax,cr3
c0016846:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001684a:	0f 20 e0             	mov    eax,cr4
c001684d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016854:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016857:	83 ec 08             	sub    esp,0x8
c001685a:	50                   	push   eax
c001685b:	68 88 13 02 c0       	push   0xc0021388
c0016860:	e8 e4 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001686f:	83 ec 08             	sub    esp,0x8
c0016872:	50                   	push   eax
c0016873:	68 79 13 02 c0       	push   0xc0021379
c0016878:	e8 cc 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016884:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016887:	83 ec 08             	sub    esp,0x8
c001688a:	50                   	push   eax
c001688b:	68 84 13 02 c0       	push   0xc0021384
c0016890:	e8 b4 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001689f:	83 ec 08             	sub    esp,0x8
c00168a2:	50                   	push   eax
c00168a3:	68 93 13 02 c0       	push   0xc0021393
c00168a8:	e8 9c 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b4:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168b7:	83 ec 08             	sub    esp,0x8
c00168ba:	50                   	push   eax
c00168bb:	68 9e 13 02 c0       	push   0xc002139e
c00168c0:	e8 84 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	83 ec 08             	sub    esp,0x8
c00168cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168cf:	68 a9 13 02 c0       	push   0xc00213a9
c00168d4:	e8 70 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	83 ec 08             	sub    esp,0x8
c00168df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168e3:	68 b4 13 02 c0       	push   0xc00213b4
c00168e8:	e8 5c 40 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168fb:	83 ec 0c             	sub    esp,0xc
c00168fe:	50                   	push   eax
c00168ff:	e8 2b 1e ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016912:	83 ec 08             	sub    esp,0x8
c0016915:	68 bf 13 02 c0       	push   0xc00213bf
c001691a:	50                   	push   eax
c001691b:	e8 5c 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016920:	83 c4 10             	add    esp,0x10
c0016923:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016928:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001692e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016932:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016935:	83 ec 08             	sub    esp,0x8
c0016938:	52                   	push   edx
c0016939:	50                   	push   eax
c001693a:	e8 f7 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c001693f:	83 c4 10             	add    esp,0x10
c0016942:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016947:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001694d:	83 ec 08             	sub    esp,0x8
c0016950:	68 cd 13 02 c0       	push   0xc00213cd
c0016955:	50                   	push   eax
c0016956:	e8 21 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016963:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016969:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001696e:	8b 12                	mov    edx,DWORD PTR [edx]
c0016970:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016973:	83 c2 0c             	add    edx,0xc
c0016976:	83 ec 08             	sub    esp,0x8
c0016979:	52                   	push   edx
c001697a:	50                   	push   eax
c001697b:	e8 fc 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016988:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001698e:	83 ec 08             	sub    esp,0x8
c0016991:	68 d6 13 02 c0       	push   0xc00213d6
c0016996:	50                   	push   eax
c0016997:	e8 e0 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169ae:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169b1:	83 ec 08             	sub    esp,0x8
c00169b4:	52                   	push   edx
c00169b5:	50                   	push   eax
c00169b6:	e8 7b 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c00169bb:	83 c4 10             	add    esp,0x10
c00169be:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c9:	83 ec 08             	sub    esp,0x8
c00169cc:	68 de 13 02 c0       	push   0xc00213de
c00169d1:	50                   	push   eax
c00169d2:	e8 a5 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c00169d7:	83 c4 10             	add    esp,0x10
c00169da:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169e9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169ec:	83 ec 08             	sub    esp,0x8
c00169ef:	52                   	push   edx
c00169f0:	50                   	push   eax
c00169f1:	e8 40 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c00169f6:	83 c4 10             	add    esp,0x10
c00169f9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a04:	83 ec 08             	sub    esp,0x8
c0016a07:	68 e6 13 02 c0       	push   0xc00213e6
c0016a0c:	50                   	push   eax
c0016a0d:	e8 6a 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016a12:	83 c4 10             	add    esp,0x10
c0016a15:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a24:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a27:	83 ec 08             	sub    esp,0x8
c0016a2a:	52                   	push   edx
c0016a2b:	50                   	push   eax
c0016a2c:	e8 05 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a3f:	83 ec 08             	sub    esp,0x8
c0016a42:	68 ee 13 02 c0       	push   0xc00213ee
c0016a47:	50                   	push   eax
c0016a48:	e8 2f 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016a4d:	83 c4 10             	add    esp,0x10
c0016a50:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a5f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a62:	83 ec 08             	sub    esp,0x8
c0016a65:	52                   	push   edx
c0016a66:	50                   	push   eax
c0016a67:	e8 ca 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016a6c:	83 c4 10             	add    esp,0x10
c0016a6f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7a:	83 ec 08             	sub    esp,0x8
c0016a7d:	68 f6 13 02 c0       	push   0xc00213f6
c0016a82:	50                   	push   eax
c0016a83:	e8 f4 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a9a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a9d:	83 ec 08             	sub    esp,0x8
c0016aa0:	52                   	push   edx
c0016aa1:	50                   	push   eax
c0016aa2:	e8 8f 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aaf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ab5:	83 ec 08             	sub    esp,0x8
c0016ab8:	68 fe 13 02 c0       	push   0xc00213fe
c0016abd:	50                   	push   eax
c0016abe:	e8 b9 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016acb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ad5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016ad8:	83 ec 08             	sub    esp,0x8
c0016adb:	52                   	push   edx
c0016adc:	50                   	push   eax
c0016add:	e8 54 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af0:	83 ec 08             	sub    esp,0x8
c0016af3:	68 06 14 02 c0       	push   0xc0021406
c0016af8:	50                   	push   eax
c0016af9:	e8 7e 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016afe:	83 c4 10             	add    esp,0x10
c0016b01:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b0c:	83 ec 08             	sub    esp,0x8
c0016b0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b13:	50                   	push   eax
c0016b14:	e8 1d 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b27:	83 ec 08             	sub    esp,0x8
c0016b2a:	68 0f 14 02 c0       	push   0xc002140f
c0016b2f:	50                   	push   eax
c0016b30:	e8 47 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b43:	83 ec 08             	sub    esp,0x8
c0016b46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b4a:	50                   	push   eax
c0016b4b:	e8 e6 1e ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016b50:	83 c4 10             	add    esp,0x10
c0016b53:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b5e:	83 ec 08             	sub    esp,0x8
c0016b61:	68 17 14 02 c0       	push   0xc0021417
c0016b66:	50                   	push   eax
c0016b67:	e8 10 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b7a:	83 ec 08             	sub    esp,0x8
c0016b7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b81:	50                   	push   eax
c0016b82:	e8 af 1e ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016b87:	83 c4 10             	add    esp,0x10
c0016b8a:	fa                   	cli    
c0016b8b:	f4                   	hlt    
c0016b8c:	eb fe                	jmp    c0016b8c <displayDebugInfo(regs*)+0x35a>

c0016b8e <HalSystemIdle()>:
c0016b8e:	56                   	push   esi
c0016b8f:	53                   	push   ebx
c0016b90:	83 ec 14             	sub    esp,0x14
c0016b93:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b9e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016ba4:	83 e0 04             	and    eax,0x4
c0016ba7:	0f b6 c0             	movzx  eax,al
c0016baa:	85 c0                	test   eax,eax
c0016bac:	0f 95 c0             	setne  al
c0016baf:	0f b6 c0             	movzx  eax,al
c0016bb2:	85 c0                	test   eax,eax
c0016bb4:	74 4c                	je     c0016c02 <HalSystemIdle()+0x74>
c0016bb6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bbb:	83 ec 08             	sub    esp,0x8
c0016bbe:	68 e1 00 00 00       	push   0xe1
c0016bc3:	50                   	push   eax
c0016bc4:	e8 e1 04 ff ff       	call   c00070aa <Computer::rdmsr(unsigned int)>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bd4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bdd:	83 e2 02             	and    edx,0x2
c0016be0:	89 d3                	mov    ebx,edx
c0016be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be6:	83 e2 00             	and    edx,0x0
c0016be9:	89 d6                	mov    esi,edx
c0016beb:	56                   	push   esi
c0016bec:	53                   	push   ebx
c0016bed:	68 e1 00 00 00       	push   0xe1
c0016bf2:	50                   	push   eax
c0016bf3:	e8 de 04 ff ff       	call   c00070d6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	e8 94 95 fe ff       	call   c0000194 <doTPAUSE>
c0016c00:	eb 01                	jmp    c0016c03 <HalSystemIdle()+0x75>
c0016c02:	f4                   	hlt    
c0016c03:	90                   	nop
c0016c04:	83 c4 14             	add    esp,0x14
c0016c07:	5b                   	pop    ebx
c0016c08:	5e                   	pop    esi
c0016c09:	c3                   	ret    

c0016c0a <displayProgramFault(char const*)>:
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	83 ec 0c             	sub    esp,0xc
c0016c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c14:	e8 30 3d ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c2c:	85 c0                	test   eax,eax
c0016c2e:	74 21                	je     c0016c51 <displayProgramFault(char const*)+0x47>
c0016c30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c40:	6a 04                	push   0x4
c0016c42:	6a 0f                	push   0xf
c0016c44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c48:	50                   	push   eax
c0016c49:	e8 a0 1e ff ff       	call   c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	90                   	nop
c0016c52:	83 c4 0c             	add    esp,0xc
c0016c55:	c3                   	ret    

c0016c56 <gpFault(regs*, void*)>:
c0016c56:	83 ec 1c             	sub    esp,0x1c
c0016c59:	c7 05 10 82 02 c0 f5 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160f5
c0016c63:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c68:	85 c0                	test   eax,eax
c0016c6a:	74 1e                	je     c0016c8a <gpFault(regs*, void*)+0x34>
c0016c6c:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c78:	ff d0                	call   eax
c0016c7a:	83 c4 10             	add    esp,0x10
c0016c7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c81:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c86:	85 c0                	test   eax,eax
c0016c88:	75 2e                	jne    c0016cb8 <gpFault(regs*, void*)+0x62>
c0016c8a:	83 ec 0c             	sub    esp,0xc
c0016c8d:	68 1f 14 02 c0       	push   0xc002141f
c0016c92:	e8 73 ff ff ff       	call   c0016c0a <displayProgramFault(char const*)>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	83 ec 0c             	sub    esp,0xc
c0016c9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ca1:	e8 8c fb ff ff       	call   c0016832 <displayDebugInfo(regs*)>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	83 ec 0c             	sub    esp,0xc
c0016cac:	6a 00                	push   0x0
c0016cae:	e8 05 ee ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	eb 01                	jmp    c0016cb9 <gpFault(regs*, void*)+0x63>
c0016cb8:	90                   	nop
c0016cb9:	83 c4 1c             	add    esp,0x1c
c0016cbc:	c3                   	ret    

c0016cbd <pgFault(regs*, void*)>:
c0016cbd:	83 ec 1c             	sub    esp,0x1c
c0016cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cc7:	0f 20 d0             	mov    eax,cr2
c0016cca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cd2:	83 ec 04             	sub    esp,0x4
c0016cd5:	52                   	push   edx
c0016cd6:	50                   	push   eax
c0016cd7:	68 fc 14 02 c0       	push   0xc00214fc
c0016cdc:	e8 68 3c ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ceb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cee:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cf4:	0f 20 d2             	mov    edx,cr2
c0016cf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	52                   	push   edx
c0016d03:	50                   	push   eax
c0016d04:	e8 05 38 ff ff       	call   c000a50e <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	0f b6 c0             	movzx  eax,al
c0016d0f:	85 c0                	test   eax,eax
c0016d11:	75 2e                	jne    c0016d41 <pgFault(regs*, void*)+0x84>
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	68 38 14 02 c0       	push   0xc0021438
c0016d1b:	e8 ea fe ff ff       	call   c0016c0a <displayProgramFault(char const*)>
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d2a:	e8 03 fb ff ff       	call   c0016832 <displayDebugInfo(regs*)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	6a 00                	push   0x0
c0016d37:	e8 7c ed ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	eb 01                	jmp    c0016d42 <pgFault(regs*, void*)+0x85>
c0016d41:	90                   	nop
c0016d42:	83 c4 1c             	add    esp,0x1c
c0016d45:	c3                   	ret    

c0016d46 <otherISRHandler(regs*, void*)>:
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	83 ec 0c             	sub    esp,0xc
c0016d4c:	68 24 15 02 c0       	push   0xc0021524
c0016d51:	e8 b4 fe ff ff       	call   c0016c0a <displayProgramFault(char const*)>
c0016d56:	83 c4 10             	add    esp,0x10
c0016d59:	83 ec 0c             	sub    esp,0xc
c0016d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d60:	e8 cd fa ff ff       	call   c0016832 <displayDebugInfo(regs*)>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	6a 00                	push   0x0
c0016d6d:	e8 46 ed ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	90                   	nop
c0016d76:	83 c4 0c             	add    esp,0xc
c0016d79:	c3                   	ret    

c0016d7a <opcodeFault(regs*, void*)>:
c0016d7a:	55                   	push   ebp
c0016d7b:	89 e5                	mov    ebp,esp
c0016d7d:	83 ec 08             	sub    esp,0x8
c0016d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d86:	83 ec 08             	sub    esp,0x8
c0016d89:	50                   	push   eax
c0016d8a:	68 43 14 02 c0       	push   0xc0021443
c0016d8f:	e8 b5 3b ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016da2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016da8:	0f b6 c0             	movzx  eax,al
c0016dab:	85 c0                	test   eax,eax
c0016dad:	74 21                	je     c0016dd0 <opcodeFault(regs*, void*)+0x56>
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	68 4c 15 02 c0       	push   0xc002154c
c0016db7:	e8 8d 3b ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016dbc:	83 c4 10             	add    esp,0x10
c0016dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dc2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016dc5:	8d 50 19             	lea    edx,[eax+0x19]
c0016dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dcb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016dce:	eb 2b                	jmp    c0016dfb <opcodeFault(regs*, void*)+0x81>
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 51 14 02 c0       	push   0xc0021451
c0016dd8:	e8 2d fe ff ff       	call   c0016c0a <displayProgramFault(char const*)>
c0016ddd:	83 c4 10             	add    esp,0x10
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016de6:	e8 47 fa ff ff       	call   c0016832 <displayDebugInfo(regs*)>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	6a 00                	push   0x0
c0016df3:	e8 c0 ec ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	c9                   	leave  
c0016dfc:	c3                   	ret    

c0016dfd <i386SaveCoprocessor(void*)>:
c0016dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e01:	83 c0 3f             	add    eax,0x3f
c0016e04:	83 e0 c0             	and    eax,0xffffffc0
c0016e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e0b:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e11 <i386LoadCoprocessor(void*)>:
c0016e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e15:	83 c0 3f             	add    eax,0x3f
c0016e18:	83 e0 c0             	and    eax,0xffffffc0
c0016e1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e1f:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016e25 <x87EmulHandler(regs*, void*)>:
c0016e25:	53                   	push   ebx
c0016e26:	83 ec 08             	sub    esp,0x8
c0016e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e2e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e32:	74 10                	je     c0016e44 <x87EmulHandler(regs*, void*)+0x1f>
c0016e34:	83 ec 0c             	sub    esp,0xc
c0016e37:	68 5e 14 02 c0       	push   0xc002145e
c0016e3c:	e8 f6 99 ff ff       	call   c0010837 <KePanic(char const*)>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	0f 20 c0             	mov    eax,cr0
c0016e47:	a8 08                	test   al,0x8
c0016e49:	74 59                	je     c0016ea4 <x87EmulHandler(regs*, void*)+0x7f>
c0016e4b:	0f 06                	clts   
c0016e4d:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e52:	85 c0                	test   eax,eax
c0016e54:	74 0e                	je     c0016e64 <x87EmulHandler(regs*, void*)+0x3f>
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e5c:	e8 9c ff ff ff       	call   c0016dfd <i386SaveCoprocessor(void*)>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e6a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e6e:	75 12                	jne    c0016e82 <x87EmulHandler(regs*, void*)+0x5d>
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	68 40 02 00 00       	push   0x240
c0016e78:	e8 0a 0c ff ff       	call   c0007a87 <malloc>
c0016e7d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e80:	eb 10                	jmp    c0016e92 <x87EmulHandler(regs*, void*)+0x6d>
c0016e82:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e8d:	e8 7f ff ff ff       	call   c0016e11 <i386LoadCoprocessor(void*)>
c0016e92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e97:	83 c4 10             	add    esp,0x10
c0016e9a:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e9f:	83 c4 08             	add    esp,0x8
c0016ea2:	5b                   	pop    ebx
c0016ea3:	c3                   	ret    
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	68 72 14 02 c0       	push   0xc0021472
c0016eac:	e8 98 3a ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016eb1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016eb9:	83 c4 18             	add    esp,0x18
c0016ebc:	5b                   	pop    ebx
c0016ebd:	e9 f6 eb ff ff       	jmp    c0015ab8 <Thr::terminateFromIRQ(int)>

c0016ec2 <HalInitialiseCoprocessor()>:
c0016ec2:	83 ec 10             	sub    esp,0x10
c0016ec5:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016ecf:	6a 00                	push   0x0
c0016ed1:	68 25 6e 01 c0       	push   0xc0016e25
c0016ed6:	6a 07                	push   0x7
c0016ed8:	e8 d1 53 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016edd:	e8 de 6f 00 00       	call   c001dec0 <avxDetect>
c0016ee2:	83 c4 10             	add    esp,0x10
c0016ee5:	85 c0                	test   eax,eax
c0016ee7:	74 1c                	je     c0016f05 <HalInitialiseCoprocessor()+0x43>
c0016ee9:	c7 05 0c 82 02 c0 ea de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001deea
c0016ef3:	c7 05 08 82 02 c0 fb de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001defb
c0016efd:	83 c4 0c             	add    esp,0xc
c0016f00:	e9 07 70 00 00       	jmp    c001df0c <avxInit>
c0016f05:	e8 46 73 00 00       	call   c001e250 <absolutelyNoChanceInHell>
c0016f0a:	85 c0                	test   eax,eax
c0016f0c:	74 1c                	je     c0016f2a <HalInitialiseCoprocessor()+0x68>
c0016f0e:	c7 05 0c 82 02 c0 68 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e268
c0016f18:	c7 05 08 82 02 c0 70 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e270
c0016f22:	83 c4 0c             	add    esp,0xc
c0016f25:	e9 4e 73 00 00       	jmp    c001e278 <sseInit>
c0016f2a:	e8 67 73 00 00       	call   c001e296 <x87Detect>
c0016f2f:	85 c0                	test   eax,eax
c0016f31:	74 1c                	je     c0016f4f <HalInitialiseCoprocessor()+0x8d>
c0016f33:	c7 05 0c 82 02 c0 b1 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2b1
c0016f3d:	c7 05 08 82 02 c0 b8 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e2b8
c0016f47:	83 c4 0c             	add    esp,0xc
c0016f4a:	e9 70 73 00 00       	jmp    c001e2bf <x87Init>
c0016f4f:	c7 05 0c 82 02 c0 ff 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167ff
c0016f59:	c7 05 08 82 02 c0 ff 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc00167ff
c0016f63:	0f 20 c0             	mov    eax,cr0
c0016f66:	83 c8 04             	or     eax,0x4
c0016f69:	0f 22 c0             	mov    cr0,eax
c0016f6c:	83 c4 0c             	add    esp,0xc
c0016f6f:	c3                   	ret    

c0016f70 <HalPanic(char const*)>:
c0016f70:	53                   	push   ebx
c0016f71:	83 ec 10             	sub    esp,0x10
c0016f74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f78:	fa                   	cli    
c0016f79:	53                   	push   ebx
c0016f7a:	68 88 14 02 c0       	push   0xc0021488
c0016f7f:	e8 c5 39 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0016f84:	83 c4 0c             	add    esp,0xc
c0016f87:	6a 01                	push   0x1
c0016f89:	6a 0f                	push   0xf
c0016f8b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f91:	e8 f4 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f96:	58                   	pop    eax
c0016f97:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f9d:	e8 d8 17 ff ff       	call   c000877a <VgaText::clearScreen()>
c0016fa2:	5a                   	pop    edx
c0016fa3:	59                   	pop    ecx
c0016fa4:	68 e0 fc 01 c0       	push   0xc001fce0
c0016fa9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016faf:	e8 0e 16 ff ff       	call   c00085c2 <VgaText::setTitle(char*)>
c0016fb4:	83 c4 0c             	add    esp,0xc
c0016fb7:	6a 01                	push   0x1
c0016fb9:	6a 0f                	push   0xf
c0016fbb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc1:	e8 c4 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fc6:	58                   	pop    eax
c0016fc7:	5a                   	pop    edx
c0016fc8:	68 a1 14 02 c0       	push   0xc00214a1
c0016fcd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fd3:	e8 a4 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016fd8:	83 c4 0c             	add    esp,0xc
c0016fdb:	6a 0f                	push   0xf
c0016fdd:	6a 01                	push   0x1
c0016fdf:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe5:	e8 a0 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fea:	59                   	pop    ecx
c0016feb:	58                   	pop    eax
c0016fec:	68 aa 14 02 c0       	push   0xc00214aa
c0016ff1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff7:	e8 80 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016ffc:	83 c4 0c             	add    esp,0xc
c0016fff:	6a 01                	push   0x1
c0017001:	6a 0f                	push   0xf
c0017003:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017009:	e8 7c 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001700e:	58                   	pop    eax
c001700f:	5a                   	pop    edx
c0017010:	68 ee 14 02 c0       	push   0xc00214ee
c0017015:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001701b:	e8 5c 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017020:	59                   	pop    ecx
c0017021:	58                   	pop    eax
c0017022:	68 b7 14 02 c0       	push   0xc00214b7
c0017027:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001702d:	e8 4a 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017032:	58                   	pop    eax
c0017033:	5a                   	pop    edx
c0017034:	68 f1 14 02 c0       	push   0xc00214f1
c0017039:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001703f:	e8 38 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017044:	59                   	pop    ecx
c0017045:	58                   	pop    eax
c0017046:	53                   	push   ebx
c0017047:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001704d:	e8 2a 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017052:	58                   	pop    eax
c0017053:	5a                   	pop    edx
c0017054:	68 ee 14 02 c0       	push   0xc00214ee
c0017059:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001705f:	e8 18 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	eb fe                	jmp    c0017067 <HalPanic(char const*)+0xf7>

c0017069 <HalQueryPerformanceCounter()>:
c0017069:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001706e:	31 d2                	xor    edx,edx
c0017070:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017076:	31 c0                	xor    eax,eax
c0017078:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001707f:	74 02                	je     c0017083 <HalQueryPerformanceCounter()+0x1a>
c0017081:	0f 31                	rdtsc  
c0017083:	c3                   	ret    

c0017084 <HalInitialise()>:
c0017084:	53                   	push   ebx
c0017085:	83 ec 08             	sub    esp,0x8
c0017088:	e8 60 54 ff ff       	call   c000c4ed <setupINTS()>
c001708d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017092:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017099:	75 0f                	jne    c00170aa <HalInitialise()+0x26>
c001709b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170a1:	83 e2 fe             	and    edx,0xfffffffe
c00170a4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170aa:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170b0:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170b7:	83 e2 fe             	and    edx,0xfffffffe
c00170ba:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170c0:	e8 9f 02 00 00       	call   c0017364 <picOpen()>
c00170c5:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170cc:	74 0a                	je     c00170d8 <HalInitialise()+0x54>
c00170ce:	e8 e1 01 00 00       	call   c00172b4 <picDisable()>
c00170d3:	e8 5e 67 00 00       	call   c001d836 <apicOpen()>
c00170d8:	50                   	push   eax
c00170d9:	bb 0f 00 00 00       	mov    ebx,0xf
c00170de:	6a 00                	push   0x0
c00170e0:	68 46 6d 01 c0       	push   0xc0016d46
c00170e5:	6a 00                	push   0x0
c00170e7:	e8 c2 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ec:	83 c4 0c             	add    esp,0xc
c00170ef:	6a 00                	push   0x0
c00170f1:	68 46 6d 01 c0       	push   0xc0016d46
c00170f6:	6a 01                	push   0x1
c00170f8:	e8 b1 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170fd:	83 c4 0c             	add    esp,0xc
c0017100:	6a 00                	push   0x0
c0017102:	68 00 68 01 c0       	push   0xc0016800
c0017107:	6a 02                	push   0x2
c0017109:	e8 a0 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c001710e:	83 c4 0c             	add    esp,0xc
c0017111:	6a 00                	push   0x0
c0017113:	68 46 6d 01 c0       	push   0xc0016d46
c0017118:	6a 03                	push   0x3
c001711a:	e8 8f 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c001711f:	83 c4 0c             	add    esp,0xc
c0017122:	6a 00                	push   0x0
c0017124:	68 46 6d 01 c0       	push   0xc0016d46
c0017129:	6a 04                	push   0x4
c001712b:	e8 7e 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017130:	83 c4 0c             	add    esp,0xc
c0017133:	6a 00                	push   0x0
c0017135:	68 46 6d 01 c0       	push   0xc0016d46
c001713a:	6a 05                	push   0x5
c001713c:	e8 6d 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017141:	83 c4 0c             	add    esp,0xc
c0017144:	6a 00                	push   0x0
c0017146:	68 7a 6d 01 c0       	push   0xc0016d7a
c001714b:	6a 06                	push   0x6
c001714d:	e8 5c 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017152:	83 c4 0c             	add    esp,0xc
c0017155:	6a 00                	push   0x0
c0017157:	68 19 68 01 c0       	push   0xc0016819
c001715c:	6a 08                	push   0x8
c001715e:	e8 4b 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017163:	83 c4 0c             	add    esp,0xc
c0017166:	6a 00                	push   0x0
c0017168:	68 46 6d 01 c0       	push   0xc0016d46
c001716d:	6a 09                	push   0x9
c001716f:	e8 3a 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017174:	83 c4 0c             	add    esp,0xc
c0017177:	6a 00                	push   0x0
c0017179:	68 46 6d 01 c0       	push   0xc0016d46
c001717e:	6a 0a                	push   0xa
c0017180:	e8 29 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017185:	83 c4 0c             	add    esp,0xc
c0017188:	6a 00                	push   0x0
c001718a:	68 46 6d 01 c0       	push   0xc0016d46
c001718f:	6a 0b                	push   0xb
c0017191:	e8 18 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017196:	83 c4 0c             	add    esp,0xc
c0017199:	6a 00                	push   0x0
c001719b:	68 56 6c 01 c0       	push   0xc0016c56
c00171a0:	6a 0d                	push   0xd
c00171a2:	e8 07 51 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a7:	83 c4 0c             	add    esp,0xc
c00171aa:	6a 00                	push   0x0
c00171ac:	68 bd 6c 01 c0       	push   0xc0016cbd
c00171b1:	6a 0e                	push   0xe
c00171b3:	e8 f6 50 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	50                   	push   eax
c00171bc:	6a 00                	push   0x0
c00171be:	68 46 6d 01 c0       	push   0xc0016d46
c00171c3:	53                   	push   ebx
c00171c4:	43                   	inc    ebx
c00171c5:	e8 e4 50 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ca:	83 c4 10             	add    esp,0x10
c00171cd:	83 fb 1e             	cmp    ebx,0x1e
c00171d0:	75 e9                	jne    c00171bb <HalInitialise()+0x137>
c00171d2:	50                   	push   eax
c00171d3:	6a 00                	push   0x0
c00171d5:	68 42 1b 01 c0       	push   0xc0011b42
c00171da:	6a 60                	push   0x60
c00171dc:	e8 cd 50 ff ff       	call   c000c2ae <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171e6:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171f0:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171f7:	e8 8b 08 ff ff       	call   c0007a87 <malloc>
c00171fc:	89 c3                	mov    ebx,eax
c00171fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0017201:	e8 2c 09 00 00       	call   c0017b32 <RTC::RTC()>
c0017206:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017210:	5a                   	pop    edx
c0017211:	59                   	pop    ecx
c0017212:	53                   	push   ebx
c0017213:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017219:	e8 5c 4b ff ff       	call   c000bd7a <Device::addChild(Device*)>
c001721e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017220:	6a 00                	push   0x0
c0017222:	6a 00                	push   0x0
c0017224:	6a 00                	push   0x0
c0017226:	53                   	push   ebx
c0017227:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001722a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001722f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017235:	83 c4 28             	add    esp,0x28
c0017238:	5b                   	pop    ebx
c0017239:	c3                   	ret    

c001723a <HalMakeBeep(int)>:
c001723a:	53                   	push   ebx
c001723b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001723f:	85 db                	test   ebx,ebx
c0017241:	75 07                	jne    c001724a <HalMakeBeep(int)+0x10>
c0017243:	e4 61                	in     al,0x61
c0017245:	83 e0 fc             	and    eax,0xfffffffc
c0017248:	eb 26                	jmp    c0017270 <HalMakeBeep(int)+0x36>
c001724a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001724f:	99                   	cdq    
c0017250:	f7 fb                	idiv   ebx
c0017252:	89 c1                	mov    ecx,eax
c0017254:	b0 b6                	mov    al,0xb6
c0017256:	e6 43                	out    0x43,al
c0017258:	88 c8                	mov    al,cl
c001725a:	e6 42                	out    0x42,al
c001725c:	89 c8                	mov    eax,ecx
c001725e:	c1 e8 08             	shr    eax,0x8
c0017261:	e6 42                	out    0x42,al
c0017263:	e4 61                	in     al,0x61
c0017265:	89 c2                	mov    edx,eax
c0017267:	83 ca 03             	or     edx,0x3
c001726a:	38 d0                	cmp    al,dl
c001726c:	74 04                	je     c0017272 <HalMakeBeep(int)+0x38>
c001726e:	88 d0                	mov    al,dl
c0017270:	e6 61                	out    0x61,al
c0017272:	5b                   	pop    ebx
c0017273:	c3                   	ret    

c0017274 <HalGetRand()>:
c0017274:	31 c0                	xor    eax,eax
c0017276:	c3                   	ret    

c0017277 <HalEndOfInterrupt(int)>:
c0017277:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001727e:	74 23                	je     c00172a3 <HalEndOfInterrupt(int)+0x2c>
c0017280:	83 ec 14             	sub    esp,0x14
c0017283:	6a 1b                	push   0x1b
c0017285:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001728b:	e8 1a fe fe ff       	call   c00070aa <Computer::rdmsr(unsigned int)>
c0017290:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017295:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001729f:	83 c4 1c             	add    esp,0x1c
c00172a2:	c3                   	ret    
c00172a3:	e9 40 02 00 00       	jmp    c00174e8 <picEOI(int)>

c00172a8 <HalRestart()>:
c00172a8:	c3                   	ret    

c00172a9 <HalShutdown()>:
c00172a9:	c3                   	ret    

c00172aa <HalSleep()>:
c00172aa:	c3                   	ret    
c00172ab:	90                   	nop

c00172ac <picIoWait()>:
c00172ac:	eb 00                	jmp    c00172ae <picIoWait()+0x2>
c00172ae:	eb 00                	jmp    c00172b0 <picIoWait()+0x4>
c00172b0:	90                   	nop
c00172b1:	c3                   	ret    
c00172b2:	66 90                	xchg   ax,ax

c00172b4 <picDisable()>:
c00172b4:	83 ec 10             	sub    esp,0x10
c00172b7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172be:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172cc:	ee                   	out    dx,al
c00172cd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172d4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172dd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172e2:	ee                   	out    dx,al
c00172e3:	90                   	nop
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	c3                   	ret    

c00172e8 <picGetIRQReg(int)>:
c00172e8:	83 ec 10             	sub    esp,0x10
c00172eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172ef:	0f b6 c0             	movzx  eax,al
c00172f2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172f9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172fd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017301:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017306:	ee                   	out    dx,al
c0017307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001730b:	0f b6 c0             	movzx  eax,al
c001730e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017315:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017319:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001731d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017322:	ee                   	out    dx,al
c0017323:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001732a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001732f:	89 c2                	mov    edx,eax
c0017331:	ec                   	in     al,dx
c0017332:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017336:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001733a:	0f b6 c0             	movzx  eax,al
c001733d:	c1 e0 08             	shl    eax,0x8
c0017340:	89 c1                	mov    ecx,eax
c0017342:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017349:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001734e:	89 c2                	mov    edx,eax
c0017350:	ec                   	in     al,dx
c0017351:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017355:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017359:	0f b6 c0             	movzx  eax,al
c001735c:	09 c8                	or     eax,ecx
c001735e:	83 c4 10             	add    esp,0x10
c0017361:	c3                   	ret    
c0017362:	66 90                	xchg   ax,ax

c0017364 <picOpen()>:
c0017364:	83 ec 50             	sub    esp,0x50
c0017367:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001736e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017373:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017377:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001737b:	ee                   	out    dx,al
c001737c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017383:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017388:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001738c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017390:	ee                   	out    dx,al
c0017391:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017399:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00173a1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173ac:	89 c2                	mov    edx,eax
c00173ae:	ec                   	in     al,dx
c00173af:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173b7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173bb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173c6:	89 c2                	mov    edx,eax
c00173c8:	ec                   	in     al,dx
c00173c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173cd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173d1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173d5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173dc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173e9:	ee                   	out    dx,al
c00173ea:	e8 bd fe ff ff       	call   c00172ac <picIoWait()>
c00173ef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173f6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173fb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017403:	ee                   	out    dx,al
c0017404:	e8 a3 fe ff ff       	call   c00172ac <picIoWait()>
c0017409:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001740d:	0f b6 c0             	movzx  eax,al
c0017410:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017417:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001741b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001741f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017423:	ee                   	out    dx,al
c0017424:	e8 83 fe ff ff       	call   c00172ac <picIoWait()>
c0017429:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001742d:	0f b6 c0             	movzx  eax,al
c0017430:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017437:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001743b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001743f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017443:	ee                   	out    dx,al
c0017444:	e8 63 fe ff ff       	call   c00172ac <picIoWait()>
c0017449:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017450:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017455:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017459:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001745d:	ee                   	out    dx,al
c001745e:	e8 49 fe ff ff       	call   c00172ac <picIoWait()>
c0017463:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001746a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001746f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017473:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017477:	ee                   	out    dx,al
c0017478:	e8 2f fe ff ff       	call   c00172ac <picIoWait()>
c001747d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017484:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017489:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001748d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017491:	ee                   	out    dx,al
c0017492:	e8 15 fe ff ff       	call   c00172ac <picIoWait()>
c0017497:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001749e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00174a3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00174a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174ab:	ee                   	out    dx,al
c00174ac:	e8 fb fd ff ff       	call   c00172ac <picIoWait()>
c00174b1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174b6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174bd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174c1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174c5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174c9:	ee                   	out    dx,al
c00174ca:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174cf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174d6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174da:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174e2:	ee                   	out    dx,al
c00174e3:	90                   	nop
c00174e4:	83 c4 50             	add    esp,0x50
c00174e7:	c3                   	ret    

c00174e8 <picEOI(int)>:
c00174e8:	83 ec 10             	sub    esp,0x10
c00174eb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174f0:	75 1e                	jne    c0017510 <picEOI(int)+0x28>
c00174f2:	6a 0b                	push   0xb
c00174f4:	e8 ef fd ff ff       	call   c00172e8 <picGetIRQReg(int)>
c00174f9:	83 c4 04             	add    esp,0x4
c00174fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017501:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017506:	25 80 00 00 00       	and    eax,0x80
c001750b:	74 73                	je     c0017580 <picEOI(int)+0x98>
c001750d:	8d 76 00             	lea    esi,[esi+0x0]
c0017510:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017515:	75 31                	jne    c0017548 <picEOI(int)+0x60>
c0017517:	6a 0b                	push   0xb
c0017519:	e8 ca fd ff ff       	call   c00172e8 <picGetIRQReg(int)>
c001751e:	83 c4 04             	add    esp,0x4
c0017521:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001752a:	98                   	cwde   
c001752b:	85 c0                	test   eax,eax
c001752d:	78 19                	js     c0017548 <picEOI(int)+0x60>
c001752f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017536:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001753b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001753f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017544:	ee                   	out    dx,al
c0017545:	eb 3d                	jmp    c0017584 <picEOI(int)+0x9c>
c0017547:	90                   	nop
c0017548:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001754d:	7e 19                	jle    c0017568 <picEOI(int)+0x80>
c001754f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017556:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001755b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001755f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017564:	ee                   	out    dx,al
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001756f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017574:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017578:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001757d:	ee                   	out    dx,al
c001757e:	eb 04                	jmp    c0017584 <picEOI(int)+0x9c>
c0017580:	90                   	nop
c0017581:	8d 76 00             	lea    esi,[esi+0x0]
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	c3                   	ret    

c0017588 <RTC::open(int, int, void*)>:
c0017588:	31 c0                	xor    eax,eax
c001758a:	c3                   	ret    
c001758b:	90                   	nop

c001758c <RTC::close(int, int, void*)>:
c001758c:	31 c0                	xor    eax,eax
c001758e:	c3                   	ret    
c001758f:	90                   	nop

c0017590 <RTC::timeInSecondsUTC()>:
c0017590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017594:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001759a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175a0:	c3                   	ret    
c00175a1:	90                   	nop

c00175a2 <RTC::timeInDatetimeUTC()>:
c00175a2:	53                   	push   ebx
c00175a3:	83 ec 14             	sub    esp,0x14
c00175a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00175b0:	50                   	push   eax
c00175b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175b4:	83 c4 0c             	add    esp,0xc
c00175b7:	52                   	push   edx
c00175b8:	50                   	push   eax
c00175b9:	53                   	push   ebx
c00175ba:	e8 33 45 ff ff       	call   c000baf2 <secondsToDatetime(unsigned long long)>
c00175bf:	83 c4 14             	add    esp,0x14
c00175c2:	89 d8                	mov    eax,ebx
c00175c4:	5b                   	pop    ebx
c00175c5:	c2 04 00             	ret    0x4

c00175c8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175c8:	56                   	push   esi
c00175c9:	53                   	push   ebx
c00175ca:	83 ec 14             	sub    esp,0x14
c00175cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175d3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175da:	52                   	push   edx
c00175db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175e3:	50                   	push   eax
c00175e4:	e8 09 45 ff ff       	call   c000baf2 <secondsToDatetime(unsigned long long)>
c00175e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175fd:	83 c4 20             	add    esp,0x20
c0017600:	89 f0                	mov    eax,esi
c0017602:	5b                   	pop    ebx
c0017603:	5e                   	pop    esi
c0017604:	ff e0                	jmp    eax

c0017606 <RTC::~RTC()>:
c0017606:	83 ec 0c             	sub    esp,0xc
c0017609:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c001760e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017612:	89 10                	mov    DWORD PTR [eax],edx
c0017614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	50                   	push   eax
c001761c:	e8 63 42 ff ff       	call   c000b884 <Clock::~Clock()>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	90                   	nop
c0017625:	83 c4 0c             	add    esp,0xc
c0017628:	c3                   	ret    
c0017629:	90                   	nop

c001762a <RTC::~RTC()>:
c001762a:	83 ec 0c             	sub    esp,0xc
c001762d:	83 ec 0c             	sub    esp,0xc
c0017630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017634:	e8 cd ff ff ff       	call   c0017606 <RTC::~RTC()>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	83 ec 08             	sub    esp,0x8
c001763f:	68 60 01 00 00       	push   0x160
c0017644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017648:	e8 00 32 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	83 c4 0c             	add    esp,0xc
c0017653:	c3                   	ret    

c0017654 <RTC::get_update_in_progress_flag()>:
c0017654:	83 ec 14             	sub    esp,0x14
c0017657:	6a 0a                	push   0xa
c0017659:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001765f:	e8 fe fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017664:	83 c4 1c             	add    esp,0x1c
c0017667:	0f b6 c0             	movzx  eax,al
c001766a:	c1 e8 07             	shr    eax,0x7
c001766d:	c3                   	ret    

c001766e <RTC::completeRTCRefresh()>:
c001766e:	55                   	push   ebp
c001766f:	57                   	push   edi
c0017670:	56                   	push   esi
c0017671:	53                   	push   ebx
c0017672:	83 ec 3c             	sub    esp,0x3c
c0017675:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001767b:	83 ec 0c             	sub    esp,0xc
c001767e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017682:	e8 cd ff ff ff       	call   c0017654 <RTC::get_update_in_progress_flag()>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	84 c0                	test   al,al
c001768c:	74 0e                	je     c001769c <RTC::completeRTCRefresh()+0x2e>
c001768e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017694:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001769a:	73 df                	jae    c001767b <RTC::completeRTCRefresh()+0xd>
c001769c:	51                   	push   ecx
c001769d:	51                   	push   ecx
c001769e:	6a 00                	push   0x0
c00176a0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176a6:	e8 b7 fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00176ab:	5b                   	pop    ebx
c00176ac:	89 c7                	mov    edi,eax
c00176ae:	5e                   	pop    esi
c00176af:	6a 02                	push   0x2
c00176b1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b7:	e8 a6 fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00176bc:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176c0:	5d                   	pop    ebp
c00176c1:	58                   	pop    eax
c00176c2:	6a 04                	push   0x4
c00176c4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ca:	e8 93 fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00176cf:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00176d3:	58                   	pop    eax
c00176d4:	5a                   	pop    edx
c00176d5:	6a 07                	push   0x7
c00176d7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176dd:	e8 80 fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00176e2:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c00176e6:	59                   	pop    ecx
c00176e7:	5b                   	pop    ebx
c00176e8:	6a 08                	push   0x8
c00176ea:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176f0:	e8 6d fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00176f5:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c00176f9:	5e                   	pop    esi
c00176fa:	5d                   	pop    ebp
c00176fb:	6a 09                	push   0x9
c00176fd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017703:	e8 5a fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017708:	0f b6 c0             	movzx  eax,al
c001770b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001770f:	83 c4 10             	add    esp,0x10
c0017712:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017718:	83 ec 0c             	sub    esp,0xc
c001771b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001771f:	e8 30 ff ff ff       	call   c0017654 <RTC::get_update_in_progress_flag()>
c0017724:	83 c4 10             	add    esp,0x10
c0017727:	84 c0                	test   al,al
c0017729:	74 0e                	je     c0017739 <RTC::completeRTCRefresh()+0xcb>
c001772b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017731:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017737:	73 df                	jae    c0017718 <RTC::completeRTCRefresh()+0xaa>
c0017739:	51                   	push   ecx
c001773a:	51                   	push   ecx
c001773b:	6a 00                	push   0x0
c001773d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017743:	e8 1a fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017748:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001774c:	5b                   	pop    ebx
c001774d:	5e                   	pop    esi
c001774e:	6a 02                	push   0x2
c0017750:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017756:	e8 07 fa fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c001775b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001775f:	5d                   	pop    ebp
c0017760:	58                   	pop    eax
c0017761:	6a 04                	push   0x4
c0017763:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017769:	e8 f4 f9 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c001776e:	88 c3                	mov    bl,al
c0017770:	58                   	pop    eax
c0017771:	5a                   	pop    edx
c0017772:	6a 07                	push   0x7
c0017774:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001777a:	e8 e3 f9 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c001777f:	59                   	pop    ecx
c0017780:	89 c6                	mov    esi,eax
c0017782:	5d                   	pop    ebp
c0017783:	6a 08                	push   0x8
c0017785:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001778b:	e8 d2 f9 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017790:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017794:	58                   	pop    eax
c0017795:	5a                   	pop    edx
c0017796:	6a 09                	push   0x9
c0017798:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001779e:	e8 bf f9 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00177a3:	89 f9                	mov    ecx,edi
c00177a5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00177a9:	83 c4 10             	add    esp,0x10
c00177ac:	0f b6 e8             	movzx  ebp,al
c00177af:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00177b4:	38 4c 24 0c          	cmp    BYTE PTR [esp+0xc],cl
c00177b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177bc:	74 27                	je     c00177e5 <RTC::completeRTCRefresh()+0x177>
c00177be:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00177c2:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
c00177c6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00177ca:	89 f0                	mov    eax,esi
c00177cc:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c00177d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177d4:	88 5c 24 20          	mov    BYTE PTR [esp+0x20],bl
c00177d8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00177dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00177e0:	e9 2d ff ff ff       	jmp    c0017712 <RTC::completeRTCRefresh()+0xa4>
c00177e5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177e9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00177ee:	3a 44 24 1c          	cmp    al,BYTE PTR [esp+0x1c]
c00177f2:	75 ca                	jne    c00177be <RTC::completeRTCRefresh()+0x150>
c00177f4:	89 f0                	mov    eax,esi
c00177f6:	3a 5c 24 20          	cmp    bl,BYTE PTR [esp+0x20]
c00177fa:	0f b6 c0             	movzx  eax,al
c00177fd:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c0017802:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017806:	89 f0                	mov    eax,esi
c0017808:	0f 94 c2             	sete   dl
c001780b:	3a 44 24 26          	cmp    al,BYTE PTR [esp+0x26]
c001780f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017813:	0f 94 c0             	sete   al
c0017816:	21 d0                	and    eax,edx
c0017818:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c001781c:	31 d2                	xor    edx,edx
c001781e:	3a 4c 24 27          	cmp    cl,BYTE PTR [esp+0x27]
c0017822:	0f 94 c2             	sete   dl
c0017825:	85 c2                	test   edx,eax
c0017827:	74 95                	je     c00177be <RTC::completeRTCRefresh()+0x150>
c0017829:	39 6c 24 28          	cmp    DWORD PTR [esp+0x28],ebp
c001782d:	75 8f                	jne    c00177be <RTC::completeRTCRefresh()+0x150>
c001782f:	52                   	push   edx
c0017830:	52                   	push   edx
c0017831:	6a 0b                	push   0xb
c0017833:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017839:	e8 24 f9 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	a8 04                	test   al,0x4
c0017843:	75 77                	jne    c00178bc <RTC::completeRTCRefresh()+0x24e>
c0017845:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001784d:	c1 ea 04             	shr    edx,0x4
c0017850:	83 e1 0f             	and    ecx,0xf
c0017853:	6b d2 0a             	imul   edx,edx,0xa
c0017856:	c1 ef 04             	shr    edi,0x4
c0017859:	01 d1                	add    ecx,edx
c001785b:	6b d7 0a             	imul   edx,edi,0xa
c001785e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017862:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017866:	83 e1 0f             	and    ecx,0xf
c0017869:	83 e6 0f             	and    esi,0xf
c001786c:	c1 ed 04             	shr    ebp,0x4
c001786f:	01 d1                	add    ecx,edx
c0017871:	0f b6 d3             	movzx  edx,bl
c0017874:	c1 ea 04             	shr    edx,0x4
c0017877:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001787b:	83 e2 07             	and    edx,0x7
c001787e:	89 d9                	mov    ecx,ebx
c0017880:	6b d2 0a             	imul   edx,edx,0xa
c0017883:	83 e1 0f             	and    ecx,0xf
c0017886:	83 e3 80             	and    ebx,0xffffff80
c0017889:	01 d1                	add    ecx,edx
c001788b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001788f:	c1 ea 04             	shr    edx,0x4
c0017892:	09 cb                	or     ebx,ecx
c0017894:	6b d2 0a             	imul   edx,edx,0xa
c0017897:	01 d6                	add    esi,edx
c0017899:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001789d:	c1 ea 04             	shr    edx,0x4
c00178a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00178a4:	6b d2 0a             	imul   edx,edx,0xa
c00178a7:	6b ed 0a             	imul   ebp,ebp,0xa
c00178aa:	83 e1 0f             	and    ecx,0xf
c00178ad:	01 d1                	add    ecx,edx
c00178af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178b3:	83 e2 0f             	and    edx,0xf
c00178b6:	88 4c 24 14          	mov    BYTE PTR [esp+0x14],cl
c00178ba:	01 d5                	add    ebp,edx
c00178bc:	a8 02                	test   al,0x2
c00178be:	75 15                	jne    c00178d5 <RTC::completeRTCRefresh()+0x267>
c00178c0:	f6 c3 80             	test   bl,0x80
c00178c3:	74 10                	je     c00178d5 <RTC::completeRTCRefresh()+0x267>
c00178c5:	83 e3 7f             	and    ebx,0x7f
c00178c8:	b9 18 00 00 00       	mov    ecx,0x18
c00178cd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178d0:	99                   	cdq    
c00178d1:	f7 f9                	idiv   ecx
c00178d3:	88 d3                	mov    bl,dl
c00178d5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178db:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178e1:	77 06                	ja     c00178e9 <RTC::completeRTCRefresh()+0x27b>
c00178e3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00178ee:	31 c9                	xor    ecx,ecx
c00178f0:	31 d2                	xor    edx,edx
c00178f2:	c1 e0 10             	shl    eax,0x10
c00178f5:	89 cd                	mov    ebp,ecx
c00178f7:	c1 e7 10             	shl    edi,0x10
c00178fa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017900:	09 c5                	or     ebp,eax
c0017902:	89 f0                	mov    eax,esi
c0017904:	88 c2                	mov    dl,al
c0017906:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001790a:	8a 74 24 14          	mov    dh,BYTE PTR [esp+0x14]
c001790e:	89 e9                	mov    ecx,ebp
c0017910:	0f b7 c2             	movzx  eax,dx
c0017913:	09 f8                	or     eax,edi
c0017915:	8a 6c 24 10          	mov    ch,BYTE PTR [esp+0x10]
c0017919:	89 c2                	mov    edx,eax
c001791b:	50                   	push   eax
c001791c:	50                   	push   eax
c001791d:	88 d9                	mov    cl,bl
c001791f:	51                   	push   ecx
c0017920:	52                   	push   edx
c0017921:	e8 4d 40 ff ff       	call   c000b973 <datetimeToSeconds(datetime_t)>
c0017926:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001792a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017930:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017936:	83 c4 4c             	add    esp,0x4c
c0017939:	5b                   	pop    ebx
c001793a:	5e                   	pop    esi
c001793b:	5f                   	pop    edi
c001793c:	5d                   	pop    ebp
c001793d:	c3                   	ret    

c001793e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001793e:	55                   	push   ebp
c001793f:	57                   	push   edi
c0017940:	56                   	push   esi
c0017941:	53                   	push   ebx
c0017942:	83 ec 30             	sub    esp,0x30
c0017945:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017949:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001794d:	6a 00                	push   0x0
c001794f:	6a 00                	push   0x0
c0017951:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017957:	e8 0c f9 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c001795c:	83 c4 0c             	add    esp,0xc
c001795f:	6a 00                	push   0x0
c0017961:	6a 02                	push   0x2
c0017963:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017969:	e8 fa f8 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c001796e:	89 f8                	mov    eax,edi
c0017970:	0f b6 c4             	movzx  eax,ah
c0017973:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017977:	89 f0                	mov    eax,esi
c0017979:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001797d:	89 f0                	mov    eax,esi
c001797f:	0f b6 c4             	movzx  eax,ah
c0017982:	89 f9                	mov    ecx,edi
c0017984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017988:	c1 e9 10             	shr    ecx,0x10
c001798b:	89 f0                	mov    eax,esi
c001798d:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017991:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017995:	c1 e8 10             	shr    eax,0x10
c0017998:	b9 64 00 00 00       	mov    ecx,0x64
c001799d:	31 d2                	xor    edx,edx
c001799f:	f7 f1                	div    ecx
c00179a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179a5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179a9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179ad:	59                   	pop    ecx
c00179ae:	5b                   	pop    ebx
c00179af:	89 fb                	mov    ebx,edi
c00179b1:	6a 0b                	push   0xb
c00179b3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179b9:	e8 a4 f7 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	89 c5                	mov    ebp,eax
c00179c3:	a8 04                	test   al,0x4
c00179c5:	75 6e                	jne    c0017a35 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179cb:	31 d2                	xor    edx,edx
c00179cd:	0f b6 c1             	movzx  eax,cl
c00179d0:	b9 0a 00 00 00       	mov    ecx,0xa
c00179d5:	f7 f1                	div    ecx
c00179d7:	c1 e0 04             	shl    eax,0x4
c00179da:	09 d0                	or     eax,edx
c00179dc:	31 d2                	xor    edx,edx
c00179de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179e2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179e7:	f7 f1                	div    ecx
c00179e9:	c1 e0 04             	shl    eax,0x4
c00179ec:	09 d0                	or     eax,edx
c00179ee:	31 d2                	xor    edx,edx
c00179f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f4:	0f b6 c3             	movzx  eax,bl
c00179f7:	f7 f1                	div    ecx
c00179f9:	c1 e0 04             	shl    eax,0x4
c00179fc:	09 d0                	or     eax,edx
c00179fe:	31 d2                	xor    edx,edx
c0017a00:	89 c3                	mov    ebx,eax
c0017a02:	89 f0                	mov    eax,esi
c0017a04:	0f b6 c0             	movzx  eax,al
c0017a07:	f7 f1                	div    ecx
c0017a09:	c1 e0 04             	shl    eax,0x4
c0017a0c:	09 d0                	or     eax,edx
c0017a0e:	31 d2                	xor    edx,edx
c0017a10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a19:	f7 f1                	div    ecx
c0017a1b:	c1 e0 04             	shl    eax,0x4
c0017a1e:	09 d0                	or     eax,edx
c0017a20:	31 d2                	xor    edx,edx
c0017a22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a2a:	f7 f1                	div    ecx
c0017a2c:	c1 e0 04             	shl    eax,0x4
c0017a2f:	09 d0                	or     eax,edx
c0017a31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a35:	83 e5 02             	and    ebp,0x2
c0017a38:	75 1e                	jne    c0017a58 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a3a:	0f b6 c3             	movzx  eax,bl
c0017a3d:	83 f8 0b             	cmp    eax,0xb
c0017a40:	76 10                	jbe    c0017a52 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a42:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a45:	88 d3                	mov    bl,dl
c0017a47:	84 d2                	test   dl,dl
c0017a49:	75 02                	jne    c0017a4d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a4b:	b3 0c                	mov    bl,0xc
c0017a4d:	83 cb 80             	or     ebx,0xffffff80
c0017a50:	eb 06                	jmp    c0017a58 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a52:	85 c0                	test   eax,eax
c0017a54:	75 02                	jne    c0017a58 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a56:	b3 0c                	mov    bl,0xc
c0017a58:	50                   	push   eax
c0017a59:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a5e:	52                   	push   edx
c0017a5f:	6a 00                	push   0x0
c0017a61:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a67:	e8 fc f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a6c:	83 c4 0c             	add    esp,0xc
c0017a6f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a74:	50                   	push   eax
c0017a75:	6a 02                	push   0x2
c0017a77:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a7d:	e8 e6 f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a82:	83 c4 0c             	add    esp,0xc
c0017a85:	0f b6 db             	movzx  ebx,bl
c0017a88:	53                   	push   ebx
c0017a89:	6a 04                	push   0x4
c0017a8b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a91:	e8 d2 f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a96:	83 c4 0c             	add    esp,0xc
c0017a99:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a9e:	52                   	push   edx
c0017a9f:	6a 07                	push   0x7
c0017aa1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa7:	e8 bc f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aac:	83 c4 0c             	add    esp,0xc
c0017aaf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ab4:	50                   	push   eax
c0017ab5:	6a 08                	push   0x8
c0017ab7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017abd:	e8 a6 f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac2:	83 c4 0c             	add    esp,0xc
c0017ac5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017aca:	55                   	push   ebp
c0017acb:	6a 09                	push   0x9
c0017acd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ad3:	e8 90 f7 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ad8:	5a                   	pop    edx
c0017ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017add:	e8 8c fb ff ff       	call   c001766e <RTC::completeRTCRefresh()>
c0017ae2:	83 c4 3c             	add    esp,0x3c
c0017ae5:	5b                   	pop    ebx
c0017ae6:	b0 01                	mov    al,0x1
c0017ae8:	5e                   	pop    esi
c0017ae9:	5f                   	pop    edi
c0017aea:	5d                   	pop    ebp
c0017aeb:	c3                   	ret    

c0017aec <rtcIRQHandler(regs*, void*)>:
c0017aec:	53                   	push   ebx
c0017aed:	83 ec 10             	sub    esp,0x10
c0017af0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017af4:	6a 0c                	push   0xc
c0017af6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afc:	e8 61 f6 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	a8 80                	test   al,0x80
c0017b06:	74 24                	je     c0017b2c <rtcIRQHandler(regs*, void*)+0x40>
c0017b08:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b0f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b16:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017b1d:	75 0d                	jne    c0017b2c <rtcIRQHandler(regs*, void*)+0x40>
c0017b1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b23:	83 c4 08             	add    esp,0x8
c0017b26:	5b                   	pop    ebx
c0017b27:	e9 42 fb ff ff       	jmp    c001766e <RTC::completeRTCRefresh()>
c0017b2c:	83 c4 08             	add    esp,0x8
c0017b2f:	5b                   	pop    ebx
c0017b30:	c3                   	ret    
c0017b31:	90                   	nop

c0017b32 <RTC::RTC()>:
c0017b32:	83 ec 1c             	sub    esp,0x1c
c0017b35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b39:	83 ec 08             	sub    esp,0x8
c0017b3c:	68 6f 15 02 c0       	push   0xc002156f
c0017b41:	50                   	push   eax
c0017b42:	e8 07 3d ff ff       	call   c000b84e <Clock::Clock(char const*)>
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c0017b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b53:	89 10                	mov    DWORD PTR [eax],edx
c0017b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b59:	83 ec 0c             	sub    esp,0xc
c0017b5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b60:	6a 01                	push   0x1
c0017b62:	68 ec 7a 01 c0       	push   0xc0017aec
c0017b67:	6a 08                	push   0x8
c0017b69:	50                   	push   eax
c0017b6a:	e8 b7 41 ff ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b6f:	83 c4 20             	add    esp,0x20
c0017b72:	89 c2                	mov    edx,eax
c0017b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b78:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b7e:	fa                   	cli    
c0017b7f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b84:	83 c0 01             	add    eax,0x1
c0017b87:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b8c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b91:	83 ec 08             	sub    esp,0x8
c0017b94:	6a 0b                	push   0xb
c0017b96:	50                   	push   eax
c0017b97:	e8 c6 f5 fe ff       	call   c0007162 <Computer::readCMOS(unsigned char)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ba3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017ba8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bac:	83 ca 10             	or     edx,0x10
c0017baf:	0f b6 d2             	movzx  edx,dl
c0017bb2:	83 ec 04             	sub    esp,0x4
c0017bb5:	52                   	push   edx
c0017bb6:	6a 0b                	push   0xb
c0017bb8:	50                   	push   eax
c0017bb9:	e8 aa f6 fe ff       	call   c0007268 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	83 ec 0c             	sub    esp,0xc
c0017bc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc8:	e8 a1 fa ff ff       	call   c001766e <RTC::completeRTCRefresh()>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bd5:	83 e8 01             	sub    eax,0x1
c0017bd8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bdd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017be2:	85 c0                	test   eax,eax
c0017be4:	75 01                	jne    c0017be7 <RTC::RTC()+0xb5>
c0017be6:	fb                   	sti    
c0017be7:	90                   	nop
c0017be8:	83 c4 1c             	add    esp,0x1c
c0017beb:	c3                   	ret    

c0017bec <HalConsoleScroll(int, int)>:
c0017bec:	83 ec 10             	sub    esp,0x10
c0017bef:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017bf7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017bff:	90                   	nop
c0017c00:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c05:	0f 8f e1 00 00 00    	jg     c0017cec <HalConsoleScroll(int, int)+0x100>
c0017c0b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c13:	90                   	nop
c0017c14:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c1c:	0f 8f be 00 00 00    	jg     c0017ce0 <HalConsoleScroll(int, int)+0xf4>
c0017c22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c26:	89 d0                	mov    eax,edx
c0017c28:	c1 e0 02             	shl    eax,0x2
c0017c2b:	01 d0                	add    eax,edx
c0017c2d:	c1 e0 05             	shl    eax,0x5
c0017c30:	89 c2                	mov    edx,eax
c0017c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c36:	01 d0                	add    eax,edx
c0017c38:	89 c2                	mov    edx,eax
c0017c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c3e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c45:	89 d0                	mov    eax,edx
c0017c47:	c1 e0 02             	shl    eax,0x2
c0017c4a:	01 d0                	add    eax,edx
c0017c4c:	c1 e0 05             	shl    eax,0x5
c0017c4f:	89 c2                	mov    edx,eax
c0017c51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c55:	01 d0                	add    eax,edx
c0017c57:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c61:	01 c2                	add    edx,eax
c0017c63:	8a 01                	mov    al,BYTE PTR [ecx]
c0017c65:	88 02                	mov    BYTE PTR [edx],al
c0017c67:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c6c:	75 66                	jne    c0017cd4 <HalConsoleScroll(int, int)+0xe8>
c0017c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c72:	83 e0 01             	and    eax,0x1
c0017c75:	74 39                	je     c0017cb0 <HalConsoleScroll(int, int)+0xc4>
c0017c77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c7b:	83 e0 0f             	and    eax,0xf
c0017c7e:	88 c2                	mov    dl,al
c0017c80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c84:	c1 e0 04             	shl    eax,0x4
c0017c87:	09 d0                	or     eax,edx
c0017c89:	88 c1                	mov    cl,al
c0017c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c8f:	89 d0                	mov    eax,edx
c0017c91:	c1 e0 02             	shl    eax,0x2
c0017c94:	01 d0                	add    eax,edx
c0017c96:	c1 e0 05             	shl    eax,0x5
c0017c99:	89 c2                	mov    edx,eax
c0017c9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c9f:	01 d0                	add    eax,edx
c0017ca1:	89 c2                	mov    edx,eax
c0017ca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca7:	01 d0                	add    eax,edx
c0017ca9:	88 ca                	mov    dl,cl
c0017cab:	88 10                	mov    BYTE PTR [eax],dl
c0017cad:	eb 25                	jmp    c0017cd4 <HalConsoleScroll(int, int)+0xe8>
c0017caf:	90                   	nop
c0017cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cb4:	89 d0                	mov    eax,edx
c0017cb6:	c1 e0 02             	shl    eax,0x2
c0017cb9:	01 d0                	add    eax,edx
c0017cbb:	c1 e0 05             	shl    eax,0x5
c0017cbe:	89 c2                	mov    edx,eax
c0017cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc4:	01 d0                	add    eax,edx
c0017cc6:	89 c2                	mov    edx,eax
c0017cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ccc:	01 d0                	add    eax,edx
c0017cce:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cd9:	e9 36 ff ff ff       	jmp    c0017c14 <HalConsoleScroll(int, int)+0x28>
c0017cde:	66 90                	xchg   ax,ax
c0017ce0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017ce5:	e9 16 ff ff ff       	jmp    c0017c00 <HalConsoleScroll(int, int)+0x14>
c0017cea:	66 90                	xchg   ax,ax
c0017cec:	90                   	nop
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	c3                   	ret    
c0017cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0017cf4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017cf4:	83 ec 14             	sub    esp,0x14
c0017cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cfb:	88 04 24             	mov    BYTE PTR [esp],al
c0017cfe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d01:	0f b6 c0             	movzx  eax,al
c0017d04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d08:	89 d1                	mov    ecx,edx
c0017d0a:	83 e1 0f             	and    ecx,0xf
c0017d0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d11:	c1 e2 04             	shl    edx,0x4
c0017d14:	0f b6 d2             	movzx  edx,dl
c0017d17:	09 ca                	or     edx,ecx
c0017d19:	c1 e2 08             	shl    edx,0x8
c0017d1c:	09 d0                	or     eax,edx
c0017d1e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d23:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d2f:	89 d0                	mov    eax,edx
c0017d31:	c1 e0 02             	shl    eax,0x2
c0017d34:	01 d0                	add    eax,edx
c0017d36:	c1 e0 04             	shl    eax,0x4
c0017d39:	89 c2                	mov    edx,eax
c0017d3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3f:	01 d0                	add    eax,edx
c0017d41:	d1 e0                	shl    eax,1
c0017d43:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d4b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017d50:	66 89 02             	mov    WORD PTR [edx],ax
c0017d53:	90                   	nop
c0017d54:	83 c4 14             	add    esp,0x14
c0017d57:	c3                   	ret    

c0017d58 <HalConsoleCursorUpdate(int, int)>:
c0017d58:	83 ec 20             	sub    esp,0x20
c0017d5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d5f:	89 c2                	mov    edx,eax
c0017d61:	c1 e2 02             	shl    edx,0x2
c0017d64:	01 d0                	add    eax,edx
c0017d66:	c1 e0 04             	shl    eax,0x4
c0017d69:	89 c2                	mov    edx,eax
c0017d6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d6f:	01 d0                	add    eax,edx
c0017d71:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d76:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d7d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d8a:	ee                   	out    dx,al
c0017d8b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d90:	0f b6 c0             	movzx  eax,al
c0017d93:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d9a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d9e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017da2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017da6:	ee                   	out    dx,al
c0017da7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017dae:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017db3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017db7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dbb:	ee                   	out    dx,al
c0017dbc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017dc1:	c1 e8 08             	shr    eax,0x8
c0017dc4:	0f b6 c0             	movzx  eax,al
c0017dc7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017dce:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dd2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dda:	ee                   	out    dx,al
c0017ddb:	90                   	nop
c0017ddc:	83 c4 20             	add    esp,0x20
c0017ddf:	c3                   	ret    

c0017de0 <FAT::getName()>:
c0017de0:	b8 c0 15 02 c0       	mov    eax,0xc00215c0
c0017de5:	c3                   	ret    
c0017de6:	66 90                	xchg   ax,ax

c0017de8 <FAT::tell(void*, unsigned long long*)>:
c0017de8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ded:	75 09                	jne    c0017df8 <FAT::tell(void*, unsigned long long*)+0x10>
c0017def:	b8 04 00 00 00       	mov    eax,0x4
c0017df4:	c3                   	ret    
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017dfd:	75 09                	jne    c0017e08 <FAT::tell(void*, unsigned long long*)+0x20>
c0017dff:	b8 04 00 00 00       	mov    eax,0x4
c0017e04:	c3                   	ret    
c0017e05:	8d 76 00             	lea    esi,[esi+0x0]
c0017e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e0f:	ba 00 00 00 00       	mov    edx,0x0
c0017e14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e18:	89 01                	mov    DWORD PTR [ecx],eax
c0017e1a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e1d:	b8 00 00 00 00       	mov    eax,0x0
c0017e22:	c3                   	ret    
c0017e23:	90                   	nop

c0017e24 <FAT::stat(void*, unsigned long long*)>:
c0017e24:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e29:	75 09                	jne    c0017e34 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e2b:	b8 04 00 00 00       	mov    eax,0x4
c0017e30:	c3                   	ret    
c0017e31:	8d 76 00             	lea    esi,[esi+0x0]
c0017e34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e39:	75 09                	jne    c0017e44 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e3b:	b8 04 00 00 00       	mov    eax,0x4
c0017e40:	c3                   	ret    
c0017e41:	8d 76 00             	lea    esi,[esi+0x0]
c0017e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e4b:	ba 00 00 00 00       	mov    edx,0x0
c0017e50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e54:	89 01                	mov    DWORD PTR [ecx],eax
c0017e56:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e59:	b8 00 00 00 00       	mov    eax,0x0
c0017e5e:	c3                   	ret    
c0017e5f:	90                   	nop

c0017e60 <FAT::~FAT()>:
c0017e60:	83 ec 0c             	sub    esp,0xc
c0017e63:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c0017e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e6c:	89 10                	mov    DWORD PTR [eax],edx
c0017e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e72:	83 ec 0c             	sub    esp,0xc
c0017e75:	50                   	push   eax
c0017e76:	e8 15 2e ff ff       	call   c000ac90 <Filesystem::~Filesystem()>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	90                   	nop
c0017e7f:	83 c4 0c             	add    esp,0xc
c0017e82:	c3                   	ret    
c0017e83:	90                   	nop

c0017e84 <FAT::~FAT()>:
c0017e84:	83 ec 0c             	sub    esp,0xc
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e8e:	e8 cd ff ff ff       	call   c0017e60 <FAT::~FAT()>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	83 ec 08             	sub    esp,0x8
c0017e99:	6a 08                	push   0x8
c0017e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e9f:	e8 a9 29 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c0017ea4:	83 c4 10             	add    esp,0x10
c0017ea7:	83 c4 0c             	add    esp,0xc
c0017eaa:	c3                   	ret    
c0017eab:	90                   	nop

c0017eac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017eac:	83 ec 1c             	sub    esp,0x1c
c0017eaf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017eb6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017ebb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebf:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ec6:	83 f8 ff             	cmp    eax,0xffffffff
c0017ec9:	75 35                	jne    c0017f00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ecb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ecf:	88 c2                	mov    dl,al
c0017ed1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ed6:	01 d0                	add    eax,edx
c0017ed8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017edc:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ee2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee6:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017eed:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ef2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ef6:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017efd:	eb 19                	jmp    c0017f18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017eff:	90                   	nop
c0017f00:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f04:	88 c2                	mov    dl,al
c0017f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f11:	01 d0                	add    eax,edx
c0017f13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f17:	90                   	nop
c0017f18:	83 ec 04             	sub    esp,0x4
c0017f1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f23:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f27:	50                   	push   eax
c0017f28:	e8 9b d0 fe ff       	call   c0004fc8 <f_getlabel>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f39:	75 09                	jne    c0017f44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f3b:	b8 00 00 00 00       	mov    eax,0x0
c0017f40:	eb 0a                	jmp    c0017f4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f42:	66 90                	xchg   ax,ax
c0017f44:	b8 01 00 00 00       	mov    eax,0x1
c0017f49:	8d 76 00             	lea    esi,[esi+0x0]
c0017f4c:	83 c4 1c             	add    esp,0x1c
c0017f4f:	c3                   	ret    

c0017f50 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f50:	57                   	push   edi
c0017f51:	83 ec 58             	sub    esp,0x58
c0017f54:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f5c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f60:	b8 00 00 00 00       	mov    eax,0x0
c0017f65:	b9 0f 00 00 00       	mov    ecx,0xf
c0017f6a:	fc                   	cld    
c0017f6b:	89 d7                	mov    edi,edx
c0017f6d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017f6f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f73:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f7a:	83 f8 ff             	cmp    eax,0xffffffff
c0017f7d:	75 35                	jne    c0017fb4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017f7f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f83:	88 c2                	mov    dl,al
c0017f85:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f8a:	01 d0                	add    eax,edx
c0017f8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f90:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f96:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f9a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fa1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fa6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017faa:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fb1:	eb 19                	jmp    c0017fcc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017fb3:	90                   	nop
c0017fb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fb8:	88 c2                	mov    dl,al
c0017fba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fbe:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fc5:	01 d0                	add    eax,edx
c0017fc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fcb:	90                   	nop
c0017fcc:	83 ec 08             	sub    esp,0x8
c0017fcf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017fd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fd7:	50                   	push   eax
c0017fd8:	e8 53 88 fe ff       	call   c0000830 <strcat>
c0017fdd:	83 c4 10             	add    esp,0x10
c0017fe0:	83 ec 0c             	sub    esp,0xc
c0017fe3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fe7:	50                   	push   eax
c0017fe8:	e8 33 d1 fe ff       	call   c0005120 <f_setlabel>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017ff4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017ff9:	75 09                	jne    c0018004 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017ffb:	b8 00 00 00 00       	mov    eax,0x0
c0018000:	eb 0a                	jmp    c001800c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018002:	66 90                	xchg   ax,ax
c0018004:	b8 01 00 00 00       	mov    eax,0x1
c0018009:	8d 76 00             	lea    esi,[esi+0x0]
c001800c:	83 c4 58             	add    esp,0x58
c001800f:	5f                   	pop    edi
c0018010:	c3                   	ret    
c0018011:	90                   	nop
c0018012:	66 90                	xchg   ax,ax

c0018014 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018014:	83 ec 2c             	sub    esp,0x2c
c0018017:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001801f:	83 ec 08             	sub    esp,0x8
c0018022:	68 e4 15 02 c0       	push   0xc00215e4
c0018027:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001802b:	e8 10 87 fe ff       	call   c0000740 <strcmp>
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	85 c0                	test   eax,eax
c0018035:	0f 94 c0             	sete   al
c0018038:	0f b6 c0             	movzx  eax,al
c001803b:	85 c0                	test   eax,eax
c001803d:	74 0d                	je     c001804c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001803f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018047:	e9 c0 00 00 00       	jmp    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001804c:	83 ec 08             	sub    esp,0x8
c001804f:	68 d6 15 02 c0       	push   0xc00215d6
c0018054:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018058:	e8 e3 86 fe ff       	call   c0000740 <strcmp>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	85 c0                	test   eax,eax
c0018062:	0f 94 c0             	sete   al
c0018065:	0f b6 c0             	movzx  eax,al
c0018068:	85 c0                	test   eax,eax
c001806a:	74 10                	je     c001807c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001806c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018074:	e9 93 00 00 00       	jmp    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018079:	8d 76 00             	lea    esi,[esi+0x0]
c001807c:	83 ec 08             	sub    esp,0x8
c001807f:	68 dc 15 02 c0       	push   0xc00215dc
c0018084:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018088:	e8 b3 86 fe ff       	call   c0000740 <strcmp>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	85 c0                	test   eax,eax
c0018092:	0f 94 c0             	sete   al
c0018095:	0f b6 c0             	movzx  eax,al
c0018098:	85 c0                	test   eax,eax
c001809a:	74 0c                	je     c00180a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001809c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180a4:	eb 66                	jmp    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180a6:	66 90                	xchg   ax,ax
c00180a8:	83 ec 08             	sub    esp,0x8
c00180ab:	68 bc f3 01 c0       	push   0xc001f3bc
c00180b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180b4:	e8 87 86 fe ff       	call   c0000740 <strcmp>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	85 c0                	test   eax,eax
c00180be:	0f 94 c0             	sete   al
c00180c1:	0f b6 c0             	movzx  eax,al
c00180c4:	85 c0                	test   eax,eax
c00180c6:	74 0c                	je     c00180d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180d0:	eb 3a                	jmp    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180d2:	66 90                	xchg   ax,ax
c00180d4:	83 ec 08             	sub    esp,0x8
c00180d7:	68 e2 15 02 c0       	push   0xc00215e2
c00180dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e0:	e8 5b 86 fe ff       	call   c0000740 <strcmp>
c00180e5:	83 c4 10             	add    esp,0x10
c00180e8:	85 c0                	test   eax,eax
c00180ea:	0f 94 c0             	sete   al
c00180ed:	0f b6 c0             	movzx  eax,al
c00180f0:	85 c0                	test   eax,eax
c00180f2:	74 0c                	je     c0018100 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180f4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00180fc:	eb 0e                	jmp    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180fe:	66 90                	xchg   ax,ax
c0018100:	b8 08 00 00 00       	mov    eax,0x8
c0018105:	e9 ea 00 00 00       	jmp    c00181f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001810a:	66 90                	xchg   ax,ax
c001810c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018113:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018118:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001811c:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018123:	83 f8 ff             	cmp    eax,0xffffffff
c0018126:	75 34                	jne    c001815c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018128:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001812c:	88 c2                	mov    dl,al
c001812e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018133:	01 d0                	add    eax,edx
c0018135:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018139:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001813f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018143:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001814a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001814f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018153:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001815a:	eb 18                	jmp    c0018174 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001815c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018160:	88 c2                	mov    dl,al
c0018162:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018166:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001816d:	01 d0                	add    eax,edx
c001816f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018173:	90                   	nop
c0018174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018178:	88 04 24             	mov    BYTE PTR [esp],al
c001817b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001817f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018183:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001818b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018190:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	68 00 20 00 00       	push   0x2000
c00181a0:	e8 e2 f8 fe ff       	call   c0007a87 <malloc>
c00181a5:	83 c4 10             	add    esp,0x10
c00181a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181ac:	68 00 20 00 00       	push   0x2000
c00181b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181b9:	50                   	push   eax
c00181ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181be:	50                   	push   eax
c00181bf:	e8 59 d2 fe ff       	call   c000541d <f_mkfs>
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181d0:	75 0a                	jne    c00181dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181d2:	b8 00 00 00 00       	mov    eax,0x0
c00181d7:	eb 1b                	jmp    c00181f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181d9:	8d 76 00             	lea    esi,[esi+0x0]
c00181dc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00181e1:	75 09                	jne    c00181ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181e3:	b8 09 00 00 00       	mov    eax,0x9
c00181e8:	eb 0a                	jmp    c00181f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181ea:	66 90                	xchg   ax,ax
c00181ec:	b8 01 00 00 00       	mov    eax,0x1
c00181f1:	8d 76 00             	lea    esi,[esi+0x0]
c00181f4:	83 c4 2c             	add    esp,0x2c
c00181f7:	c3                   	ret    

c00181f8 <FAT::tryMount(LogicalDisk*, int)>:
c00181f8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00181fe:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018203:	83 f8 14             	cmp    eax,0x14
c0018206:	75 18                	jne    c0018220 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	68 e8 15 02 c0       	push   0xc00215e8
c0018210:	e8 22 86 ff ff       	call   c0010837 <KePanic(char const*)>
c0018215:	83 c4 10             	add    esp,0x10
c0018218:	b0 00                	mov    al,0x0
c001821a:	e9 ed 01 00 00       	jmp    c001840c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001821f:	90                   	nop
c0018220:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018227:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001822d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018233:	3d 00 02 00 00       	cmp    eax,0x200
c0018238:	74 0a                	je     c0018244 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001823a:	b0 00                	mov    al,0x0
c001823c:	e9 cb 01 00 00       	jmp    c001840c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018241:	8d 76 00             	lea    esi,[esi+0x0]
c0018244:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001824c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018253:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001825a:	83 f8 ff             	cmp    eax,0xffffffff
c001825d:	74 09                	je     c0018268 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001825f:	b0 01                	mov    al,0x1
c0018261:	e9 a6 01 00 00       	jmp    c001840c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018266:	66 90                	xchg   ax,ax
c0018268:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018272:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001827a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018281:	88 c2                	mov    dl,al
c0018283:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018288:	01 d0                	add    eax,edx
c001828a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018291:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018297:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001829e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182a5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182aa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182b1:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182b8:	83 ec 0c             	sub    esp,0xc
c00182bb:	68 34 02 00 00       	push   0x234
c00182c0:	e8 c2 f7 fe ff       	call   c0007a87 <malloc>
c00182c5:	83 c4 10             	add    esp,0x10
c00182c8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182cf:	83 ec 04             	sub    esp,0x4
c00182d2:	6a 00                	push   0x0
c00182d4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182db:	50                   	push   eax
c00182dc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182e3:	e8 2c b9 fe ff       	call   c0003c14 <f_mount>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00182f2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00182fa:	74 1c                	je     c0018318 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00182fc:	83 ec 0c             	sub    esp,0xc
c00182ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018306:	e8 9c f7 fe ff       	call   c0007aa7 <rfree>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	b0 00                	mov    al,0x0
c0018310:	e9 f7 00 00 00       	jmp    c001840c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018315:	8d 76 00             	lea    esi,[esi+0x0]
c0018318:	83 ec 04             	sub    esp,0x4
c001831b:	68 00 01 00 00       	push   0x100
c0018320:	6a 00                	push   0x0
c0018322:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018329:	50                   	push   eax
c001832a:	e8 b1 81 fe ff       	call   c00004e0 <memset>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	83 ec 08             	sub    esp,0x8
c0018335:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001833c:	50                   	push   eax
c001833d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018344:	50                   	push   eax
c0018345:	e8 e6 84 fe ff       	call   c0000830 <strcat>
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	83 ec 08             	sub    esp,0x8
c0018350:	68 f6 15 02 c0       	push   0xc00215f6
c0018355:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001835c:	50                   	push   eax
c001835d:	e8 ce 84 fe ff       	call   c0000830 <strcat>
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	83 ec 04             	sub    esp,0x4
c0018368:	6a 01                	push   0x1
c001836a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018371:	50                   	push   eax
c0018372:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018376:	50                   	push   eax
c0018377:	e8 fa b8 fe ff       	call   c0003c76 <f_open>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018386:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001838d:	85 c0                	test   eax,eax
c001838f:	74 0b                	je     c001839c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018391:	78 31                	js     c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018393:	83 e8 04             	sub    eax,0x4
c0018396:	83 f8 01             	cmp    eax,0x1
c0018399:	77 29                	ja     c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001839b:	90                   	nop
c001839c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183a4:	83 ec 0c             	sub    esp,0xc
c00183a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183ab:	50                   	push   eax
c00183ac:	e8 74 c0 fe ff       	call   c0004425 <f_close>
c00183b1:	83 c4 10             	add    esp,0x10
c00183b4:	90                   	nop
c00183b5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183bd:	85 c0                	test   eax,eax
c00183bf:	74 43                	je     c0018404 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183c1:	eb 31                	jmp    c00183f4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183c3:	90                   	nop
c00183c4:	83 ec 0c             	sub    esp,0xc
c00183c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183ce:	e8 d4 f6 fe ff       	call   c0007aa7 <rfree>
c00183d3:	83 c4 10             	add    esp,0x10
c00183d6:	83 ec 04             	sub    esp,0x4
c00183d9:	6a 00                	push   0x0
c00183db:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183e2:	50                   	push   eax
c00183e3:	6a 00                	push   0x0
c00183e5:	e8 2a b8 fe ff       	call   c0003c14 <f_mount>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	b0 00                	mov    al,0x0
c00183ef:	eb 1b                	jmp    c001840c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183f9:	83 c0 01             	add    eax,0x1
c00183fc:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001840b:	90                   	nop
c001840c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018412:	c3                   	ret    
c0018413:	90                   	nop

c0018414 <FAT::allocateSwapfile(char const*, int)>:
c0018414:	55                   	push   ebp
c0018415:	57                   	push   edi
c0018416:	56                   	push   esi
c0018417:	53                   	push   ebx
c0018418:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001841e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018429:	83 ec 0c             	sub    esp,0xc
c001842c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018433:	e8 4f f6 fe ff       	call   c0007a87 <malloc>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	89 c7                	mov    edi,eax
c001843d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018442:	83 ec 04             	sub    esp,0x4
c0018445:	50                   	push   eax
c0018446:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001844d:	57                   	push   edi
c001844e:	e8 79 2a ff ff       	call   c000aecc <File::File(char const*, Process*)>
c0018453:	83 c4 10             	add    esp,0x10
c0018456:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001845d:	83 ec 04             	sub    esp,0x4
c0018460:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018464:	50                   	push   eax
c0018465:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018469:	50                   	push   eax
c001846a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018471:	e8 be 2d ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018480:	c1 e0 14             	shl    eax,0x14
c0018483:	89 c7                	mov    edi,eax
c0018485:	89 c5                	mov    ebp,eax
c0018487:	c1 fd 1f             	sar    ebp,0x1f
c001848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001848e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018492:	89 f9                	mov    ecx,edi
c0018494:	31 c1                	xor    ecx,eax
c0018496:	89 cb                	mov    ebx,ecx
c0018498:	89 e9                	mov    ecx,ebp
c001849a:	31 d1                	xor    ecx,edx
c001849c:	89 ce                	mov    esi,ecx
c001849e:	89 f0                	mov    eax,esi
c00184a0:	09 d8                	or     eax,ebx
c00184a2:	0f 84 9c 00 00 00    	je     c0018544 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184a8:	83 ec 0c             	sub    esp,0xc
c00184ab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184b2:	e8 49 2c ff ff       	call   c000b100 <File::unlink()>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	83 ec 08             	sub    esp,0x8
c00184bd:	6a 12                	push   0x12
c00184bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184c6:	e8 bd 2a ff ff       	call   c000af88 <File::open(FileOpenMode)>
c00184cb:	83 c4 10             	add    esp,0x10
c00184ce:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184d5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184db:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00184e2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184e9:	c1 e0 14             	shl    eax,0x14
c00184ec:	83 ec 04             	sub    esp,0x4
c00184ef:	6a 01                	push   0x1
c00184f1:	50                   	push   eax
c00184f2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00184f9:	e8 b2 cd fe ff       	call   c00052b0 <f_expand>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018508:	8b 00                	mov    eax,DWORD PTR [eax]
c001850a:	83 c0 10             	add    eax,0x10
c001850d:	8b 00                	mov    eax,DWORD PTR [eax]
c001850f:	83 ec 0c             	sub    esp,0xc
c0018512:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018516:	52                   	push   edx
c0018517:	8d 54 24 30          	lea    edx,[esp+0x30]
c001851b:	52                   	push   edx
c001851c:	6a 00                	push   0x0
c001851e:	68 00 04 00 00       	push   0x400
c0018523:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001852a:	ff d0                	call   eax
c001852c:	83 c4 20             	add    esp,0x20
c001852f:	83 ec 0c             	sub    esp,0xc
c0018532:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018539:	e8 a8 2a ff ff       	call   c000afe6 <File::close()>
c001853e:	83 c4 10             	add    esp,0x10
c0018541:	8d 76 00             	lea    esi,[esi+0x0]
c0018544:	83 ec 08             	sub    esp,0x8
c0018547:	6a 01                	push   0x1
c0018549:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018550:	e8 33 2a ff ff       	call   c000af88 <File::open(FileOpenMode)>
c0018555:	83 c4 10             	add    esp,0x10
c0018558:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001855f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018561:	83 c0 0c             	add    eax,0xc
c0018564:	8b 00                	mov    eax,DWORD PTR [eax]
c0018566:	83 ec 0c             	sub    esp,0xc
c0018569:	8d 54 24 24          	lea    edx,[esp+0x24]
c001856d:	52                   	push   edx
c001856e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018572:	52                   	push   edx
c0018573:	6a 00                	push   0x0
c0018575:	6a 04                	push   0x4
c0018577:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001857e:	ff d0                	call   eax
c0018580:	83 c4 20             	add    esp,0x20
c0018583:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001858a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018590:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018597:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001859e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185a1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185a8:	83 ec 0c             	sub    esp,0xc
c00185ab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185b2:	e8 2f 2a ff ff       	call   c000afe6 <File::close()>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185c1:	ba 00 00 00 00       	mov    edx,0x0
c00185c6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185cc:	5b                   	pop    ebx
c00185cd:	5e                   	pop    esi
c00185ce:	5f                   	pop    edi
c00185cf:	5d                   	pop    ebp
c00185d0:	c3                   	ret    
c00185d1:	90                   	nop
c00185d2:	66 90                	xchg   ax,ax

c00185d4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185d4:	57                   	push   edi
c00185d5:	56                   	push   esi
c00185d6:	53                   	push   ebx
c00185d7:	81 ec 50 02 00 00    	sub    esp,0x250
c00185dd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00185e5:	74 0d                	je     c00185f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185e7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00185ef:	75 0f                	jne    c0018600 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185f1:	8d 76 00             	lea    esi,[esi+0x0]
c00185f4:	b8 04 00 00 00       	mov    eax,0x4
c00185f9:	e9 3a 01 00 00       	jmp    c0018738 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00185fe:	66 90                	xchg   ax,ax
c0018600:	83 ec 08             	sub    esp,0x8
c0018603:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001860a:	50                   	push   eax
c001860b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018612:	e8 da c0 fe ff       	call   c00046f1 <f_readdir>
c0018617:	83 c4 10             	add    esp,0x10
c001861a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018621:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018632:	83 c0 16             	add    eax,0x16
c0018635:	50                   	push   eax
c0018636:	e8 25 7f fe ff       	call   c0000560 <strlen>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	ba 00 00 00 00       	mov    edx,0x0
c0018643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018647:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001864b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	83 e0 10             	and    eax,0x10
c0018658:	74 0a                	je     c0018664 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001865a:	b8 02 00 00 00       	mov    eax,0x2
c001865f:	eb 0b                	jmp    c001866c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	b8 01 00 00 00       	mov    eax,0x1
c0018669:	8d 76 00             	lea    esi,[esi+0x0]
c001866c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018670:	83 ec 08             	sub    esp,0x8
c0018673:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001867a:	83 c0 16             	add    eax,0x16
c001867d:	50                   	push   eax
c001867e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018682:	83 c0 10             	add    eax,0x10
c0018685:	50                   	push   eax
c0018686:	e8 a5 7f fe ff       	call   c0000630 <strcpy>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018695:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001869c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186a0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186a7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186ae:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186b5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186bc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186c3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186ca:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186d1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186d8:	89 c6                	mov    esi,eax
c00186da:	89 d7                	mov    edi,edx
c00186dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186de:	89 c8                	mov    eax,ecx
c00186e0:	89 fa                	mov    edx,edi
c00186e2:	89 f3                	mov    ebx,esi
c00186e4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00186eb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00186f2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00186f9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018700:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018706:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001870d:	0f be c0             	movsx  eax,al
c0018710:	85 c0                	test   eax,eax
c0018712:	75 08                	jne    c001871c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018714:	b8 07 00 00 00       	mov    eax,0x7
c0018719:	eb 1d                	jmp    c0018738 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001871b:	90                   	nop
c001871c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018723:	85 c0                	test   eax,eax
c0018725:	75 09                	jne    c0018730 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018727:	b8 00 00 00 00       	mov    eax,0x0
c001872c:	eb 0a                	jmp    c0018738 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001872e:	66 90                	xchg   ax,ax
c0018730:	b8 01 00 00 00       	mov    eax,0x1
c0018735:	8d 76 00             	lea    esi,[esi+0x0]
c0018738:	81 c4 50 02 00 00    	add    esp,0x250
c001873e:	5b                   	pop    ebx
c001873f:	5e                   	pop    esi
c0018740:	5f                   	pop    edi
c0018741:	c3                   	ret    
c0018742:	66 90                	xchg   ax,ax

c0018744 <FAT::read(void*, unsigned long, void*, int*)>:
c0018744:	83 ec 1c             	sub    esp,0x1c
c0018747:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001874c:	74 0a                	je     c0018758 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001874e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018753:	75 0b                	jne    c0018760 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018755:	8d 76 00             	lea    esi,[esi+0x0]
c0018758:	b8 04 00 00 00       	mov    eax,0x4
c001875d:	eb 41                	jmp    c00187a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001875f:	90                   	nop
c0018760:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018764:	50                   	push   eax
c0018765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018769:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001876d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018771:	e8 c4 b7 fe ff       	call   c0003f3a <f_read>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001877d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018781:	89 c2                	mov    edx,eax
c0018783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018787:	89 10                	mov    DWORD PTR [eax],edx
c0018789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001878d:	85 c0                	test   eax,eax
c001878f:	75 07                	jne    c0018798 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018791:	b8 00 00 00 00       	mov    eax,0x0
c0018796:	eb 08                	jmp    c00187a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018798:	b8 01 00 00 00       	mov    eax,0x1
c001879d:	8d 76 00             	lea    esi,[esi+0x0]
c00187a0:	83 c4 1c             	add    esp,0x1c
c00187a3:	c3                   	ret    

c00187a4 <FAT::write(void*, unsigned long, void*, int*)>:
c00187a4:	83 ec 1c             	sub    esp,0x1c
c00187a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187ac:	74 0a                	je     c00187b8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187ae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187b3:	75 0b                	jne    c00187c0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187b5:	8d 76 00             	lea    esi,[esi+0x0]
c00187b8:	b8 04 00 00 00       	mov    eax,0x4
c00187bd:	eb 41                	jmp    c0018800 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187bf:	90                   	nop
c00187c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187c4:	50                   	push   eax
c00187c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187d1:	e8 45 b9 fe ff       	call   c000411b <f_write>
c00187d6:	83 c4 10             	add    esp,0x10
c00187d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e1:	89 c2                	mov    edx,eax
c00187e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187e7:	89 10                	mov    DWORD PTR [eax],edx
c00187e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187ed:	85 c0                	test   eax,eax
c00187ef:	75 07                	jne    c00187f8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00187f1:	b8 00 00 00 00       	mov    eax,0x0
c00187f6:	eb 08                	jmp    c0018800 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187f8:	b8 01 00 00 00       	mov    eax,0x1
c00187fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018800:	83 c4 1c             	add    esp,0x1c
c0018803:	c3                   	ret    

c0018804 <FAT::close(void*)>:
c0018804:	83 ec 1c             	sub    esp,0x1c
c0018807:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001880c:	75 0a                	jne    c0018818 <FAT::close(void*)+0x14>
c001880e:	b8 04 00 00 00       	mov    eax,0x4
c0018813:	eb 3f                	jmp    c0018854 <FAT::close(void*)+0x50>
c0018815:	8d 76 00             	lea    esi,[esi+0x0]
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001881f:	e8 01 bc fe ff       	call   c0004425 <f_close>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001882b:	83 ec 0c             	sub    esp,0xc
c001882e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018832:	e8 60 f2 fe ff       	call   c0007a97 <free>
c0018837:	83 c4 10             	add    esp,0x10
c001883a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883e:	85 c0                	test   eax,eax
c0018840:	75 0a                	jne    c001884c <FAT::close(void*)+0x48>
c0018842:	b8 00 00 00 00       	mov    eax,0x0
c0018847:	eb 0b                	jmp    c0018854 <FAT::close(void*)+0x50>
c0018849:	8d 76 00             	lea    esi,[esi+0x0]
c001884c:	b8 01 00 00 00       	mov    eax,0x1
c0018851:	8d 76 00             	lea    esi,[esi+0x0]
c0018854:	83 c4 1c             	add    esp,0x1c
c0018857:	c3                   	ret    

c0018858 <FAT::closeDir(void*)>:
c0018858:	83 ec 1c             	sub    esp,0x1c
c001885b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018860:	75 0a                	jne    c001886c <FAT::closeDir(void*)+0x14>
c0018862:	b8 04 00 00 00       	mov    eax,0x4
c0018867:	eb 3f                	jmp    c00188a8 <FAT::closeDir(void*)+0x50>
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	83 ec 0c             	sub    esp,0xc
c001886f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018873:	e8 57 be fe ff       	call   c00046cf <f_closedir>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001887f:	83 ec 0c             	sub    esp,0xc
c0018882:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018886:	e8 0c f2 fe ff       	call   c0007a97 <free>
c001888b:	83 c4 10             	add    esp,0x10
c001888e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018892:	85 c0                	test   eax,eax
c0018894:	75 0a                	jne    c00188a0 <FAT::closeDir(void*)+0x48>
c0018896:	b8 00 00 00 00       	mov    eax,0x0
c001889b:	eb 0b                	jmp    c00188a8 <FAT::closeDir(void*)+0x50>
c001889d:	8d 76 00             	lea    esi,[esi+0x0]
c00188a0:	b8 01 00 00 00       	mov    eax,0x1
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]
c00188a8:	83 c4 1c             	add    esp,0x1c
c00188ab:	c3                   	ret    

c00188ac <FAT::seek(void*, unsigned long long)>:
c00188ac:	83 ec 2c             	sub    esp,0x2c
c00188af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188c4:	75 0a                	jne    c00188d0 <FAT::seek(void*, unsigned long long)+0x24>
c00188c6:	b8 04 00 00 00       	mov    eax,0x4
c00188cb:	eb 33                	jmp    c0018900 <FAT::seek(void*, unsigned long long)+0x54>
c00188cd:	8d 76 00             	lea    esi,[esi+0x0]
c00188d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d4:	83 ec 08             	sub    esp,0x8
c00188d7:	50                   	push   eax
c00188d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188dc:	e8 73 bb fe ff       	call   c0004454 <f_lseek>
c00188e1:	83 c4 10             	add    esp,0x10
c00188e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188ec:	85 c0                	test   eax,eax
c00188ee:	75 08                	jne    c00188f8 <FAT::seek(void*, unsigned long long)+0x4c>
c00188f0:	b8 00 00 00 00       	mov    eax,0x0
c00188f5:	eb 09                	jmp    c0018900 <FAT::seek(void*, unsigned long long)+0x54>
c00188f7:	90                   	nop
c00188f8:	b8 01 00 00 00       	mov    eax,0x1
c00188fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018900:	83 c4 2c             	add    esp,0x2c
c0018903:	c3                   	ret    

c0018904 <fatWrapperReadDisk>:
c0018904:	53                   	push   ebx
c0018905:	83 ec 18             	sub    esp,0x18
c0018908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001890c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018910:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018915:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001891c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018920:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018924:	ba 00 00 00 00       	mov    edx,0x0
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018930:	53                   	push   ebx
c0018931:	52                   	push   edx
c0018932:	50                   	push   eax
c0018933:	51                   	push   ecx
c0018934:	e8 31 48 ff ff       	call   c000d16a <LogicalDisk::read(unsigned long long, int, void*)>
c0018939:	83 c4 20             	add    esp,0x20
c001893c:	83 c4 18             	add    esp,0x18
c001893f:	5b                   	pop    ebx
c0018940:	c3                   	ret    
c0018941:	8d 76 00             	lea    esi,[esi+0x0]

c0018944 <fatWrapperWriteDisk>:
c0018944:	53                   	push   ebx
c0018945:	83 ec 18             	sub    esp,0x18
c0018948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001894c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018950:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018955:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001895c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018960:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018964:	ba 00 00 00 00       	mov    edx,0x0
c0018969:	83 ec 0c             	sub    esp,0xc
c001896c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018970:	53                   	push   ebx
c0018971:	52                   	push   edx
c0018972:	50                   	push   eax
c0018973:	51                   	push   ecx
c0018974:	e8 5d 48 ff ff       	call   c000d1d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0018979:	83 c4 20             	add    esp,0x20
c001897c:	83 c4 18             	add    esp,0x18
c001897f:	5b                   	pop    ebx
c0018980:	c3                   	ret    
c0018981:	8d 76 00             	lea    esi,[esi+0x0]

c0018984 <fatWrapperIoctl>:
c0018984:	53                   	push   ebx
c0018985:	83 ec 28             	sub    esp,0x28
c0018988:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001898c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018990:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018994:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018998:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001899d:	83 f8 02             	cmp    eax,0x2
c00189a0:	75 32                	jne    c00189d4 <fatWrapperIoctl+0x50>
c00189a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189af:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189c6:	66 89 02             	mov    WORD PTR [edx],ax
c00189c9:	b8 00 00 00 00       	mov    eax,0x0
c00189ce:	e9 c5 00 00 00       	jmp    c0018a98 <fatWrapperIoctl+0x114>
c00189d3:	90                   	nop
c00189d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d9:	83 f8 01             	cmp    eax,0x1
c00189dc:	75 6a                	jne    c0018a48 <fatWrapperIoctl+0xc4>
c00189de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189eb:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189f8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189fe:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a04:	89 c8                	mov    eax,ecx
c0018a06:	89 da                	mov    edx,ebx
c0018a08:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a0c:	c1 e0 0a             	shl    eax,0xa
c0018a0f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a14:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a1b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a21:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a27:	89 cb                	mov    ebx,ecx
c0018a29:	c1 fb 1f             	sar    ebx,0x1f
c0018a2c:	53                   	push   ebx
c0018a2d:	51                   	push   ecx
c0018a2e:	52                   	push   edx
c0018a2f:	50                   	push   eax
c0018a30:	e8 9b 5b 00 00       	call   c001e5d0 <__udivdi3>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	89 c2                	mov    edx,eax
c0018a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a3e:	89 10                	mov    DWORD PTR [eax],edx
c0018a40:	b8 00 00 00 00       	mov    eax,0x0
c0018a45:	eb 51                	jmp    c0018a98 <fatWrapperIoctl+0x114>
c0018a47:	90                   	nop
c0018a48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a4d:	85 c0                	test   eax,eax
c0018a4f:	75 07                	jne    c0018a58 <fatWrapperIoctl+0xd4>
c0018a51:	b8 00 00 00 00       	mov    eax,0x0
c0018a56:	eb 40                	jmp    c0018a98 <fatWrapperIoctl+0x114>
c0018a58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a5d:	83 f8 03             	cmp    eax,0x3
c0018a60:	75 1a                	jne    c0018a7c <fatWrapperIoctl+0xf8>
c0018a62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a74:	b8 00 00 00 00       	mov    eax,0x0
c0018a79:	eb 1d                	jmp    c0018a98 <fatWrapperIoctl+0x114>
c0018a7b:	90                   	nop
c0018a7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a81:	83 f8 04             	cmp    eax,0x4
c0018a84:	75 0a                	jne    c0018a90 <fatWrapperIoctl+0x10c>
c0018a86:	b8 00 00 00 00       	mov    eax,0x0
c0018a8b:	eb 0b                	jmp    c0018a98 <fatWrapperIoctl+0x114>
c0018a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a90:	b8 04 00 00 00       	mov    eax,0x4
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	83 c4 28             	add    esp,0x28
c0018a9b:	5b                   	pop    ebx
c0018a9c:	c3                   	ret    
c0018a9d:	90                   	nop
c0018a9e:	66 90                	xchg   ax,ax

c0018aa0 <FAT::FAT()>:
c0018aa0:	83 ec 1c             	sub    esp,0x1c
c0018aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa7:	83 ec 0c             	sub    esp,0xc
c0018aaa:	50                   	push   eax
c0018aab:	e8 bc 21 ff ff       	call   c000ac6c <Filesystem::Filesystem()>
c0018ab0:	83 c4 10             	add    esp,0x10
c0018ab3:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c0018ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018abc:	89 10                	mov    DWORD PTR [eax],edx
c0018abe:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ac8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018ad0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018ad5:	7f 19                	jg     c0018af0 <FAT::FAT()+0x50>
c0018ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018adb:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ae6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018aeb:	eb e3                	jmp    c0018ad0 <FAT::FAT()+0x30>
c0018aed:	8d 76 00             	lea    esi,[esi+0x0]
c0018af0:	90                   	nop
c0018af1:	83 c4 1c             	add    esp,0x1c
c0018af4:	c3                   	ret    
c0018af5:	90                   	nop
c0018af6:	66 90                	xchg   ax,ax

c0018af8 <FAT::fixFilepath(char*)>:
c0018af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018afc:	8a 00                	mov    al,BYTE PTR [eax]
c0018afe:	0f be c0             	movsx  eax,al
c0018b01:	83 f8 40             	cmp    eax,0x40
c0018b04:	7e 2e                	jle    c0018b34 <FAT::fixFilepath(char*)+0x3c>
c0018b06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0018b0c:	83 e8 41             	sub    eax,0x41
c0018b0f:	88 c2                	mov    dl,al
c0018b11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b15:	88 10                	mov    BYTE PTR [eax],dl
c0018b17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b1b:	8a 00                	mov    al,BYTE PTR [eax]
c0018b1d:	0f be c0             	movsx  eax,al
c0018b20:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b27:	83 c0 30             	add    eax,0x30
c0018b2a:	88 c2                	mov    dl,al
c0018b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b30:	88 10                	mov    BYTE PTR [eax],dl
c0018b32:	66 90                	xchg   ax,ax
c0018b34:	90                   	nop
c0018b35:	c3                   	ret    
c0018b36:	66 90                	xchg   ax,ax

c0018b38 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b46:	74 0c                	je     c0018b54 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b48:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b50:	75 0e                	jne    c0018b60 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b52:	66 90                	xchg   ax,ax
c0018b54:	b8 04 00 00 00       	mov    eax,0x4
c0018b59:	e9 46 01 00 00       	jmp    c0018ca4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b5e:	66 90                	xchg   ax,ax
c0018b60:	83 ec 08             	sub    esp,0x8
c0018b63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b6e:	50                   	push   eax
c0018b6f:	e8 bc 7a fe ff       	call   c0000630 <strcpy>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	83 ec 08             	sub    esp,0x8
c0018b7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b7e:	50                   	push   eax
c0018b7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b86:	e8 6d ff ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b9d:	83 e0 01             	and    eax,0x1
c0018ba0:	74 12                	je     c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018ba2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ba9:	83 c8 01             	or     eax,0x1
c0018bac:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bb3:	90                   	nop
c0018bb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bbb:	83 e0 04             	and    eax,0x4
c0018bbe:	74 24                	je     c0018be4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bc0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bc7:	83 c8 30             	or     eax,0x30
c0018bca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bd8:	83 c8 02             	or     eax,0x2
c0018bdb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018be2:	66 90                	xchg   ax,ax
c0018be4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018beb:	83 e0 02             	and    eax,0x2
c0018bee:	74 14                	je     c0018c04 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bf0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bf7:	83 c8 02             	or     eax,0x2
c0018bfa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c0b:	83 e0 08             	and    eax,0x8
c0018c0e:	74 14                	je     c0018c24 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c10:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c17:	83 c8 04             	or     eax,0x4
c0018c1a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c21:	8d 76 00             	lea    esi,[esi+0x0]
c0018c24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c2b:	83 e0 10             	and    eax,0x10
c0018c2e:	74 14                	je     c0018c44 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c30:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c37:	83 c8 08             	or     eax,0x8
c0018c3a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c41:	8d 76 00             	lea    esi,[esi+0x0]
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	68 28 02 00 00       	push   0x228
c0018c4c:	e8 36 ee fe ff       	call   c0007a87 <malloc>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	89 c2                	mov    edx,eax
c0018c56:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c5d:	89 10                	mov    DWORD PTR [eax],edx
c0018c5f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c67:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c70:	83 ec 04             	sub    esp,0x4
c0018c73:	52                   	push   edx
c0018c74:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c78:	52                   	push   edx
c0018c79:	50                   	push   eax
c0018c7a:	e8 f7 af fe ff       	call   c0003c76 <f_open>
c0018c7f:	83 c4 10             	add    esp,0x10
c0018c82:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c89:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c91:	74 09                	je     c0018c9c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c93:	b8 01 00 00 00       	mov    eax,0x1
c0018c98:	eb 0a                	jmp    c0018ca4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c9a:	66 90                	xchg   ax,ax
c0018c9c:	b8 00 00 00 00       	mov    eax,0x0
c0018ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018caa:	c3                   	ret    
c0018cab:	90                   	nop

c0018cac <FAT::openDir(char const*, void**)>:
c0018cac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cba:	74 0c                	je     c0018cc8 <FAT::openDir(char const*, void**)+0x1c>
c0018cbc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018cc4:	75 0e                	jne    c0018cd4 <FAT::openDir(char const*, void**)+0x28>
c0018cc6:	66 90                	xchg   ax,ax
c0018cc8:	b8 04 00 00 00       	mov    eax,0x4
c0018ccd:	e9 82 00 00 00       	jmp    c0018d54 <FAT::openDir(char const*, void**)+0xa8>
c0018cd2:	66 90                	xchg   ax,ax
c0018cd4:	83 ec 08             	sub    esp,0x8
c0018cd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ce2:	50                   	push   eax
c0018ce3:	e8 48 79 fe ff       	call   c0000630 <strcpy>
c0018ce8:	83 c4 10             	add    esp,0x10
c0018ceb:	83 ec 08             	sub    esp,0x8
c0018cee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018cf2:	50                   	push   eax
c0018cf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cfa:	e8 f9 fd ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0018cff:	83 c4 10             	add    esp,0x10
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	6a 30                	push   0x30
c0018d07:	e8 7b ed fe ff       	call   c0007a87 <malloc>
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	89 c2                	mov    edx,eax
c0018d11:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d18:	89 10                	mov    DWORD PTR [eax],edx
c0018d1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d23:	83 ec 08             	sub    esp,0x8
c0018d26:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d2a:	52                   	push   edx
c0018d2b:	50                   	push   eax
c0018d2c:	e8 d3 b8 fe ff       	call   c0004604 <f_opendir>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d3b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d43:	74 07                	je     c0018d4c <FAT::openDir(char const*, void**)+0xa0>
c0018d45:	b8 01 00 00 00       	mov    eax,0x1
c0018d4a:	eb 08                	jmp    c0018d54 <FAT::openDir(char const*, void**)+0xa8>
c0018d4c:	b8 00 00 00 00       	mov    eax,0x0
c0018d51:	8d 76 00             	lea    esi,[esi+0x0]
c0018d54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d5a:	c3                   	ret    
c0018d5b:	90                   	nop

c0018d5c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d62:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d6a:	75 0c                	jne    c0018d78 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d6c:	b8 04 00 00 00       	mov    eax,0x4
c0018d71:	e9 d6 00 00 00       	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d76:	66 90                	xchg   ax,ax
c0018d78:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d80:	75 0a                	jne    c0018d8c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d82:	b8 04 00 00 00       	mov    eax,0x4
c0018d87:	e9 c0 00 00 00       	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d8c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d94:	75 0a                	jne    c0018da0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d96:	b8 04 00 00 00       	mov    eax,0x4
c0018d9b:	e9 ac 00 00 00       	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018da0:	83 ec 08             	sub    esp,0x8
c0018da3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018daa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018db1:	50                   	push   eax
c0018db2:	e8 79 78 fe ff       	call   c0000630 <strcpy>
c0018db7:	83 c4 10             	add    esp,0x10
c0018dba:	83 ec 08             	sub    esp,0x8
c0018dbd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018dc4:	50                   	push   eax
c0018dc5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dcc:	e8 27 fd ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0018dd1:	83 c4 10             	add    esp,0x10
c0018dd4:	83 ec 08             	sub    esp,0x8
c0018dd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddb:	50                   	push   eax
c0018ddc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018de3:	50                   	push   eax
c0018de4:	e8 9a b9 fe ff       	call   c0004783 <f_stat>
c0018de9:	83 c4 10             	add    esp,0x10
c0018dec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018df3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018dfa:	85 c0                	test   eax,eax
c0018dfc:	74 0a                	je     c0018e08 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018dfe:	83 f8 04             	cmp    eax,0x4
c0018e01:	74 39                	je     c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e03:	eb 3f                	jmp    c0018e44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e05:	8d 76 00             	lea    esi,[esi+0x0]
c0018e08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e0c:	0f b6 c0             	movzx  eax,al
c0018e0f:	83 e0 10             	and    eax,0x10
c0018e12:	0f 95 c2             	setne  dl
c0018e15:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e1c:	88 10                	mov    BYTE PTR [eax],dl
c0018e1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e22:	ba 00 00 00 00       	mov    edx,0x0
c0018e27:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e2e:	89 01                	mov    DWORD PTR [ecx],eax
c0018e30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e33:	b8 00 00 00 00       	mov    eax,0x0
c0018e38:	eb 12                	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e3a:	66 90                	xchg   ax,ax
c0018e3c:	b8 02 00 00 00       	mov    eax,0x2
c0018e41:	eb 09                	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e43:	90                   	nop
c0018e44:	b8 01 00 00 00       	mov    eax,0x1
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e52:	c3                   	ret    
c0018e53:	90                   	nop

c0018e54 <FAT::unlink(char const*)>:
c0018e54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e62:	75 08                	jne    c0018e6c <FAT::unlink(char const*)+0x18>
c0018e64:	b8 04 00 00 00       	mov    eax,0x4
c0018e69:	eb 61                	jmp    c0018ecc <FAT::unlink(char const*)+0x78>
c0018e6b:	90                   	nop
c0018e6c:	83 ec 08             	sub    esp,0x8
c0018e6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e7a:	50                   	push   eax
c0018e7b:	e8 b0 77 fe ff       	call   c0000630 <strcpy>
c0018e80:	83 c4 10             	add    esp,0x10
c0018e83:	83 ec 08             	sub    esp,0x8
c0018e86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e8a:	50                   	push   eax
c0018e8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e92:	e8 61 fc ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ea1:	50                   	push   eax
c0018ea2:	e8 4e bb fe ff       	call   c00049f5 <f_unlink>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018eb1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018eb8:	85 c0                	test   eax,eax
c0018eba:	75 08                	jne    c0018ec4 <FAT::unlink(char const*)+0x70>
c0018ebc:	b8 00 00 00 00       	mov    eax,0x0
c0018ec1:	eb 09                	jmp    c0018ecc <FAT::unlink(char const*)+0x78>
c0018ec3:	90                   	nop
c0018ec4:	b8 01 00 00 00       	mov    eax,0x1
c0018ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ecc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ed2:	c3                   	ret    
c0018ed3:	90                   	nop

c0018ed4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ed4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018eda:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018ee1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ee8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018eec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ef0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018ef8:	75 0a                	jne    c0018f04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018efa:	b8 04 00 00 00       	mov    eax,0x4
c0018eff:	e9 7c 01 00 00       	jmp    c0019080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018f04:	83 ec 08             	sub    esp,0x8
c0018f07:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f12:	50                   	push   eax
c0018f13:	e8 18 77 fe ff       	call   c0000630 <strcpy>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	83 ec 08             	sub    esp,0x8
c0018f1e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f22:	50                   	push   eax
c0018f23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f2a:	e8 c9 fb ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0018f2f:	83 c4 10             	add    esp,0x10
c0018f32:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f3a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f47:	83 e0 01             	and    eax,0x1
c0018f4a:	74 14                	je     c0018f60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018f4c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f53:	83 c8 01             	or     eax,0x1
c0018f56:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f65:	83 e0 02             	and    eax,0x2
c0018f68:	74 12                	je     c0018f7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018f6a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f71:	83 c8 20             	or     eax,0x20
c0018f74:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f7b:	90                   	nop
c0018f7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f81:	83 e0 04             	and    eax,0x4
c0018f84:	74 12                	je     c0018f98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0018f86:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f8d:	83 c8 04             	or     eax,0x4
c0018f90:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f97:	90                   	nop
c0018f98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f9d:	83 e0 08             	and    eax,0x8
c0018fa0:	74 12                	je     c0018fb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0018fa2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fa9:	83 c8 02             	or     eax,0x2
c0018fac:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fb3:	90                   	nop
c0018fb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fb9:	83 e0 01             	and    eax,0x1
c0018fbc:	74 12                	je     c0018fd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018fbe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fc5:	83 c8 01             	or     eax,0x1
c0018fc8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fcf:	90                   	nop
c0018fd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fd5:	83 e0 02             	and    eax,0x2
c0018fd8:	74 12                	je     c0018fec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0018fda:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fe1:	83 c8 20             	or     eax,0x20
c0018fe4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018feb:	90                   	nop
c0018fec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ff1:	83 e0 04             	and    eax,0x4
c0018ff4:	74 12                	je     c0019008 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0018ff6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018ffd:	83 c8 04             	or     eax,0x4
c0019000:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019007:	90                   	nop
c0019008:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001900d:	83 e0 08             	and    eax,0x8
c0019010:	74 12                	je     c0019024 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019012:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019019:	83 c8 02             	or     eax,0x2
c001901c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019023:	90                   	nop
c0019024:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001902b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019032:	09 d0                	or     eax,edx
c0019034:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001903b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019043:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001904b:	83 ec 04             	sub    esp,0x4
c001904e:	52                   	push   edx
c001904f:	50                   	push   eax
c0019050:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019054:	50                   	push   eax
c0019055:	e8 0e be fe ff       	call   c0004e68 <f_chmod>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019064:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001906b:	85 c0                	test   eax,eax
c001906d:	75 09                	jne    c0019078 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001906f:	b8 00 00 00 00       	mov    eax,0x0
c0019074:	eb 0a                	jmp    c0019080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019076:	66 90                	xchg   ax,ax
c0019078:	b8 01 00 00 00       	mov    eax,0x1
c001907d:	8d 76 00             	lea    esi,[esi+0x0]
c0019080:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019086:	c3                   	ret    
c0019087:	90                   	nop

c0019088 <FAT::rename(char const*, char const*)>:
c0019088:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001908e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019096:	74 0c                	je     c00190a4 <FAT::rename(char const*, char const*)+0x1c>
c0019098:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190a0:	75 0e                	jne    c00190b0 <FAT::rename(char const*, char const*)+0x28>
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	b8 04 00 00 00       	mov    eax,0x4
c00190a9:	e9 9e 00 00 00       	jmp    c001914c <FAT::rename(char const*, char const*)+0xc4>
c00190ae:	66 90                	xchg   ax,ax
c00190b0:	83 ec 08             	sub    esp,0x8
c00190b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190c1:	50                   	push   eax
c00190c2:	e8 69 75 fe ff       	call   c0000630 <strcpy>
c00190c7:	83 c4 10             	add    esp,0x10
c00190ca:	83 ec 08             	sub    esp,0x8
c00190cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190d4:	50                   	push   eax
c00190d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190dc:	e8 17 fa ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c00190e1:	83 c4 10             	add    esp,0x10
c00190e4:	83 ec 08             	sub    esp,0x8
c00190e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190f2:	50                   	push   eax
c00190f3:	e8 38 75 fe ff       	call   c0000630 <strcpy>
c00190f8:	83 c4 10             	add    esp,0x10
c00190fb:	83 ec 08             	sub    esp,0x8
c00190fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019102:	50                   	push   eax
c0019103:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001910a:	e8 e9 f9 ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c001910f:	83 c4 10             	add    esp,0x10
c0019112:	83 ec 08             	sub    esp,0x8
c0019115:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019119:	50                   	push   eax
c001911a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019121:	50                   	push   eax
c0019122:	e8 89 bb fe ff       	call   c0004cb0 <f_rename>
c0019127:	83 c4 10             	add    esp,0x10
c001912a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019131:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019138:	85 c0                	test   eax,eax
c001913a:	75 08                	jne    c0019144 <FAT::rename(char const*, char const*)+0xbc>
c001913c:	b8 00 00 00 00       	mov    eax,0x0
c0019141:	eb 09                	jmp    c001914c <FAT::rename(char const*, char const*)+0xc4>
c0019143:	90                   	nop
c0019144:	b8 01 00 00 00       	mov    eax,0x1
c0019149:	8d 76 00             	lea    esi,[esi+0x0]
c001914c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019152:	c3                   	ret    
c0019153:	90                   	nop

c0019154 <FAT::mkdir(char const*)>:
c0019154:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001915a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019162:	75 08                	jne    c001916c <FAT::mkdir(char const*)+0x18>
c0019164:	b8 04 00 00 00       	mov    eax,0x4
c0019169:	eb 61                	jmp    c00191cc <FAT::mkdir(char const*)+0x78>
c001916b:	90                   	nop
c001916c:	83 ec 08             	sub    esp,0x8
c001916f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019176:	8d 44 24 18          	lea    eax,[esp+0x18]
c001917a:	50                   	push   eax
c001917b:	e8 b0 74 fe ff       	call   c0000630 <strcpy>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	83 ec 08             	sub    esp,0x8
c0019186:	8d 44 24 14          	lea    eax,[esp+0x14]
c001918a:	50                   	push   eax
c001918b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019192:	e8 61 f9 ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	83 ec 0c             	sub    esp,0xc
c001919d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a1:	50                   	push   eax
c00191a2:	e8 6e b9 fe ff       	call   c0004b15 <f_mkdir>
c00191a7:	83 c4 10             	add    esp,0x10
c00191aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191b8:	85 c0                	test   eax,eax
c00191ba:	75 08                	jne    c00191c4 <FAT::mkdir(char const*)+0x70>
c00191bc:	b8 00 00 00 00       	mov    eax,0x0
c00191c1:	eb 09                	jmp    c00191cc <FAT::mkdir(char const*)+0x78>
c00191c3:	90                   	nop
c00191c4:	b8 01 00 00 00       	mov    eax,0x1
c00191c9:	8d 76 00             	lea    esi,[esi+0x0]
c00191cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191d2:	c3                   	ret    
c00191d3:	90                   	nop

c00191d4 <FAT::exists(char const*)>:
c00191d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191da:	83 ec 08             	sub    esp,0x8
c00191dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191e8:	50                   	push   eax
c00191e9:	e8 42 74 fe ff       	call   c0000630 <strcpy>
c00191ee:	83 c4 10             	add    esp,0x10
c00191f1:	83 ec 08             	sub    esp,0x8
c00191f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191f8:	50                   	push   eax
c00191f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019200:	e8 f3 f8 ff ff       	call   c0018af8 <FAT::fixFilepath(char*)>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	83 ec 08             	sub    esp,0x8
c001920b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019212:	50                   	push   eax
c0019213:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019217:	50                   	push   eax
c0019218:	e8 66 b5 fe ff       	call   c0004783 <f_stat>
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019227:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001922e:	85 c0                	test   eax,eax
c0019230:	75 06                	jne    c0019238 <FAT::exists(char const*)+0x64>
c0019232:	b0 01                	mov    al,0x1
c0019234:	eb 06                	jmp    c001923c <FAT::exists(char const*)+0x68>
c0019236:	66 90                	xchg   ax,ax
c0019238:	b0 00                	mov    al,0x0
c001923a:	66 90                	xchg   ax,ax
c001923c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019242:	c3                   	ret    
c0019243:	90                   	nop

c0019244 <isoReadDiscSectorHelper>:
c0019244:	83 ec 2c             	sub    esp,0x2c
c0019247:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001924b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001924f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019254:	83 e8 41             	sub    eax,0x41
c0019257:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001925e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019262:	ba 00 00 00 00       	mov    edx,0x0
c0019267:	83 ec 0c             	sub    esp,0xc
c001926a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001926e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019272:	52                   	push   edx
c0019273:	50                   	push   eax
c0019274:	51                   	push   ecx
c0019275:	e8 f0 3e ff ff       	call   c000d16a <LogicalDisk::read(unsigned long long, int, void*)>
c001927a:	83 c4 20             	add    esp,0x20
c001927d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019281:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019286:	74 0c                	je     c0019294 <isoReadDiscSectorHelper+0x50>
c0019288:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001928c:	c1 e0 0b             	shl    eax,0xb
c001928f:	eb 0b                	jmp    c001929c <isoReadDiscSectorHelper+0x58>
c0019291:	8d 76 00             	lea    esi,[esi+0x0]
c0019294:	b8 00 00 00 00       	mov    eax,0x0
c0019299:	8d 76 00             	lea    esi,[esi+0x0]
c001929c:	83 c4 2c             	add    esp,0x2c
c001929f:	c3                   	ret    

c00192a0 <iso_kprintf>:
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	83 ec 08             	sub    esp,0x8
c00192a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192aa:	68 19 10 02 c0       	push   0xc0021019
c00192af:	e8 95 16 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	90                   	nop
c00192b8:	83 c4 0c             	add    esp,0xc
c00192bb:	c3                   	ret    

c00192bc <iso_kprintfd>:
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	83 ec 08             	sub    esp,0x8
c00192c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192c6:	68 37 00 02 c0       	push   0xc0020037
c00192cb:	e8 79 16 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	90                   	nop
c00192d4:	83 c4 0c             	add    esp,0xc
c00192d7:	c3                   	ret    

c00192d8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00192d8:	b8 08 00 00 00       	mov    eax,0x8
c00192dd:	c3                   	ret    

c00192de <ISO9660::getName()>:
c00192de:	b8 6c 16 02 c0       	mov    eax,0xc002166c
c00192e3:	c3                   	ret    

c00192e4 <ISO9660::closeDir(void*)>:
c00192e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ea:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192ed:	90                   	nop

c00192ee <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192ee:	b8 01 00 00 00       	mov    eax,0x1
c00192f3:	c3                   	ret    

c00192f4 <ISO9660::unlink(char const*)>:
c00192f4:	b8 01 00 00 00       	mov    eax,0x1
c00192f9:	c3                   	ret    

c00192fa <ISO9660::write(void*, unsigned long, void*, int*)>:
c00192fa:	b8 03 00 00 00       	mov    eax,0x3
c00192ff:	c3                   	ret    

c0019300 <ISO9660::rename(char const*, char const*)>:
c0019300:	b8 01 00 00 00       	mov    eax,0x1
c0019305:	c3                   	ret    

c0019306 <ISO9660::mkdir(char const*)>:
c0019306:	b8 01 00 00 00       	mov    eax,0x1
c001930b:	c3                   	ret    

c001930c <ISO9660::~ISO9660()>:
c001930c:	83 ec 0c             	sub    esp,0xc
c001930f:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c0019314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019318:	89 10                	mov    DWORD PTR [eax],edx
c001931a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001931e:	83 ec 0c             	sub    esp,0xc
c0019321:	50                   	push   eax
c0019322:	e8 69 19 ff ff       	call   c000ac90 <Filesystem::~Filesystem()>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	90                   	nop
c001932b:	83 c4 0c             	add    esp,0xc
c001932e:	c3                   	ret    
c001932f:	90                   	nop

c0019330 <ISO9660::~ISO9660()>:
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	83 ec 0c             	sub    esp,0xc
c0019336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001933a:	e8 cd ff ff ff       	call   c001930c <ISO9660::~ISO9660()>
c001933f:	83 c4 10             	add    esp,0x10
c0019342:	83 ec 08             	sub    esp,0x8
c0019345:	6a 08                	push   0x8
c0019347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001934b:	e8 fd 14 ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	83 c4 0c             	add    esp,0xc
c0019356:	c3                   	ret    
c0019357:	90                   	nop

c0019358 <ISO9660::exists(char const*)>:
c0019358:	83 ec 18             	sub    esp,0x18
c001935b:	68 87 16 02 c0       	push   0xc0021687
c0019360:	e8 d2 74 ff ff       	call   c0010837 <KePanic(char const*)>
c0019365:	31 c0                	xor    eax,eax
c0019367:	83 c4 1c             	add    esp,0x1c
c001936a:	c3                   	ret    
c001936b:	90                   	nop

c001936c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001936c:	56                   	push   esi
c001936d:	53                   	push   ebx
c001936e:	53                   	push   ebx
c001936f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019373:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019377:	85 db                	test   ebx,ebx
c0019379:	0f 84 ca 00 00 00    	je     c0019449 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001937f:	85 f6                	test   esi,esi
c0019381:	0f 84 c2 00 00 00    	je     c0019449 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019387:	b8 03 00 00 00       	mov    eax,0x3
c001938c:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019391:	0f 85 b7 00 00 00    	jne    c001944e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019397:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019399:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193a0:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193a6:	74 1b                	je     c00193c3 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193a8:	85 c0                	test   eax,eax
c00193aa:	74 10                	je     c00193bc <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	68 a5 16 02 c0       	push   0xc00216a5
c00193b4:	e8 7e 74 ff ff       	call   c0010837 <KePanic(char const*)>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	8a 03                	mov    al,BYTE PTR [ebx]
c00193be:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193c6:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193cd:	85 c0                	test   eax,eax
c00193cf:	74 09                	je     c00193da <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193d1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00193d8:	74 48                	je     c0019422 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	68 b5 16 02 c0       	push   0xc00216b5
c00193e2:	e8 62 15 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00193e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193f4:	85 c0                	test   eax,eax
c00193f6:	74 17                	je     c001940f <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00193f8:	83 ec 0c             	sub    esp,0xc
c00193fb:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019402:	68 d5 16 02 c0       	push   0xc00216d5
c0019407:	e8 3d 15 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	83 ec 0c             	sub    esp,0xc
c0019412:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019419:	50                   	push   eax
c001941a:	e8 18 d6 fe ff       	call   c0006a37 <init_percd>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	51                   	push   ecx
c0019423:	83 c3 03             	add    ebx,0x3
c0019426:	51                   	push   ecx
c0019427:	6a 00                	push   0x0
c0019429:	53                   	push   ebx
c001942a:	e8 cf d0 fe ff       	call   c00064fe <iso_open>
c001942f:	89 c2                	mov    edx,eax
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	b8 01 00 00 00       	mov    eax,0x1
c0019439:	83 fa ff             	cmp    edx,0xffffffff
c001943c:	74 10                	je     c001944e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001943e:	83 c2 32             	add    edx,0x32
c0019441:	31 c0                	xor    eax,eax
c0019443:	01 d2                	add    edx,edx
c0019445:	89 16                	mov    DWORD PTR [esi],edx
c0019447:	eb 05                	jmp    c001944e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019449:	b8 04 00 00 00       	mov    eax,0x4
c001944e:	5a                   	pop    edx
c001944f:	5b                   	pop    ebx
c0019450:	5e                   	pop    esi
c0019451:	c3                   	ret    

c0019452 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019452:	53                   	push   ebx
c0019453:	83 ec 08             	sub    esp,0x8
c0019456:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001945a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001945e:	85 c0                	test   eax,eax
c0019460:	74 2d                	je     c001948f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019462:	85 db                	test   ebx,ebx
c0019464:	74 29                	je     c001948f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019466:	52                   	push   edx
c0019467:	b9 02 00 00 00       	mov    ecx,0x2
c001946c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019470:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019474:	99                   	cdq    
c0019475:	f7 f9                	idiv   ecx
c0019477:	83 e8 32             	sub    eax,0x32
c001947a:	50                   	push   eax
c001947b:	e8 26 d1 fe ff       	call   c00065a6 <iso_read>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	89 03                	mov    DWORD PTR [ebx],eax
c0019485:	09 d0                	or     eax,edx
c0019487:	0f 94 c0             	sete   al
c001948a:	0f b6 c0             	movzx  eax,al
c001948d:	eb 05                	jmp    c0019494 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001948f:	b8 04 00 00 00       	mov    eax,0x4
c0019494:	83 c4 08             	add    esp,0x8
c0019497:	5b                   	pop    ebx
c0019498:	c3                   	ret    
c0019499:	90                   	nop

c001949a <ISO9660::seek(void*, unsigned long long)>:
c001949a:	57                   	push   edi
c001949b:	b8 04 00 00 00       	mov    eax,0x4
c00194a0:	56                   	push   esi
c00194a1:	51                   	push   ecx
c00194a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194ae:	85 d2                	test   edx,edx
c00194b0:	74 26                	je     c00194d8 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194b2:	89 d0                	mov    eax,edx
c00194b4:	6a 00                	push   0x0
c00194b6:	b9 02 00 00 00       	mov    ecx,0x2
c00194bb:	57                   	push   edi
c00194bc:	99                   	cdq    
c00194bd:	f7 f9                	idiv   ecx
c00194bf:	56                   	push   esi
c00194c0:	83 e8 32             	sub    eax,0x32
c00194c3:	50                   	push   eax
c00194c4:	e8 f3 d1 fe ff       	call   c00066bc <iso_seek>
c00194c9:	31 f0                	xor    eax,esi
c00194cb:	31 fa                	xor    edx,edi
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	09 d0                	or     eax,edx
c00194d2:	0f 95 c0             	setne  al
c00194d5:	0f b6 c0             	movzx  eax,al
c00194d8:	5a                   	pop    edx
c00194d9:	5e                   	pop    esi
c00194da:	5f                   	pop    edi
c00194db:	c3                   	ret    

c00194dc <ISO9660::tell(void*, unsigned long long*)>:
c00194dc:	53                   	push   ebx
c00194dd:	83 ec 08             	sub    esp,0x8
c00194e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194e8:	85 c0                	test   eax,eax
c00194ea:	74 24                	je     c0019510 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194ec:	85 db                	test   ebx,ebx
c00194ee:	74 20                	je     c0019510 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194f0:	b9 02 00 00 00       	mov    ecx,0x2
c00194f5:	83 ec 0c             	sub    esp,0xc
c00194f8:	99                   	cdq    
c00194f9:	f7 f9                	idiv   ecx
c00194fb:	83 e8 32             	sub    eax,0x32
c00194fe:	50                   	push   eax
c00194ff:	e8 3c d2 fe ff       	call   c0006740 <iso_tell>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	89 03                	mov    DWORD PTR [ebx],eax
c0019509:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001950c:	31 c0                	xor    eax,eax
c001950e:	eb 05                	jmp    c0019515 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019510:	b8 04 00 00 00       	mov    eax,0x4
c0019515:	83 c4 08             	add    esp,0x8
c0019518:	5b                   	pop    ebx
c0019519:	c3                   	ret    

c001951a <ISO9660::stat(void*, unsigned long long*)>:
c001951a:	53                   	push   ebx
c001951b:	83 ec 14             	sub    esp,0x14
c001951e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019522:	68 f9 16 02 c0       	push   0xc00216f9
c0019527:	e8 1d 14 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019534:	74 2c                	je     c0019562 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019536:	85 db                	test   ebx,ebx
c0019538:	74 28                	je     c0019562 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	b9 02 00 00 00       	mov    ecx,0x2
c0019542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019546:	99                   	cdq    
c0019547:	f7 f9                	idiv   ecx
c0019549:	83 e8 32             	sub    eax,0x32
c001954c:	50                   	push   eax
c001954d:	e8 1f d2 fe ff       	call   c0006771 <iso_total>
c0019552:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019559:	89 03                	mov    DWORD PTR [ebx],eax
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	31 c0                	xor    eax,eax
c0019560:	eb 05                	jmp    c0019567 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019562:	b8 04 00 00 00       	mov    eax,0x4
c0019567:	83 c4 08             	add    esp,0x8
c001956a:	5b                   	pop    ebx
c001956b:	c3                   	ret    

c001956c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001956c:	55                   	push   ebp
c001956d:	57                   	push   edi
c001956e:	56                   	push   esi
c001956f:	53                   	push   ebx
c0019570:	83 ec 18             	sub    esp,0x18
c0019573:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019577:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001957b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001957f:	68 01 17 02 c0       	push   0xc0021701
c0019584:	e8 c0 13 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	85 ff                	test   edi,edi
c001958e:	0f 94 c0             	sete   al
c0019591:	85 f6                	test   esi,esi
c0019593:	0f 94 c2             	sete   dl
c0019596:	09 d0                	or     eax,edx
c0019598:	a8 01                	test   al,0x1
c001959a:	0f 85 dd 00 00 00    	jne    c001967d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195a0:	85 db                	test   ebx,ebx
c00195a2:	0f 84 d5 00 00 00    	je     c001967d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195a8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195ab:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195b1:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195b8:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195ba:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195c1:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195c7:	74 1b                	je     c00195e4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195c9:	85 c0                	test   eax,eax
c00195cb:	74 10                	je     c00195dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195cd:	83 ec 0c             	sub    esp,0xc
c00195d0:	68 a5 16 02 c0       	push   0xc00216a5
c00195d5:	e8 5d 72 ff ff       	call   c0010837 <KePanic(char const*)>
c00195da:	83 c4 10             	add    esp,0x10
c00195dd:	8a 03                	mov    al,BYTE PTR [ebx]
c00195df:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195e7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195ee:	85 c0                	test   eax,eax
c00195f0:	74 09                	je     c00195fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195f2:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00195f9:	74 51                	je     c001964c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00195fb:	83 ec 0c             	sub    esp,0xc
c00195fe:	68 09 17 02 c0       	push   0xc0021709
c0019603:	e8 41 13 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0019608:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001960b:	83 c4 10             	add    esp,0x10
c001960e:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019616:	74 21                	je     c0019639 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019618:	83 ec 0c             	sub    esp,0xc
c001961b:	68 29 17 02 c0       	push   0xc0021729
c0019620:	e8 24 13 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c0019625:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019628:	83 c4 10             	add    esp,0x10
c001962b:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019632:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019639:	83 ec 0c             	sub    esp,0xc
c001963c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019643:	50                   	push   eax
c0019644:	e8 ee d3 fe ff       	call   c0006a37 <init_percd>
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	52                   	push   edx
c001964d:	83 c3 03             	add    ebx,0x3
c0019650:	52                   	push   edx
c0019651:	6a 00                	push   0x0
c0019653:	53                   	push   ebx
c0019654:	e8 a5 ce fe ff       	call   c00064fe <iso_open>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	89 c5                	mov    ebp,eax
c001965e:	83 f8 ff             	cmp    eax,0xffffffff
c0019661:	75 21                	jne    c0019684 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019663:	50                   	push   eax
c0019664:	50                   	push   eax
c0019665:	6a 01                	push   0x1
c0019667:	53                   	push   ebx
c0019668:	e8 91 ce fe ff       	call   c00064fe <iso_open>
c001966d:	83 c4 10             	add    esp,0x10
c0019670:	ba 02 00 00 00       	mov    edx,0x2
c0019675:	40                   	inc    eax
c0019676:	74 2b                	je     c00196a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019678:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001967b:	eb 24                	jmp    c00196a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001967d:	ba 04 00 00 00       	mov    edx,0x4
c0019682:	eb 1f                	jmp    c00196a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019684:	83 ec 0c             	sub    esp,0xc
c0019687:	50                   	push   eax
c0019688:	e8 e4 d0 fe ff       	call   c0006771 <iso_total>
c001968d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019694:	89 07                	mov    DWORD PTR [edi],eax
c0019696:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019699:	e8 ea ce fe ff       	call   c0006588 <iso_close>
c001969e:	83 c4 10             	add    esp,0x10
c00196a1:	31 d2                	xor    edx,edx
c00196a3:	83 c4 0c             	add    esp,0xc
c00196a6:	89 d0                	mov    eax,edx
c00196a8:	5b                   	pop    ebx
c00196a9:	5e                   	pop    esi
c00196aa:	5f                   	pop    edi
c00196ab:	5d                   	pop    ebp
c00196ac:	c3                   	ret    
c00196ad:	90                   	nop

c00196ae <ISO9660::close(void*)>:
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	b8 04 00 00 00       	mov    eax,0x4
c00196b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196ba:	85 d2                	test   edx,edx
c00196bc:	74 1b                	je     c00196d9 <ISO9660::close(void*)+0x2b>
c00196be:	89 d0                	mov    eax,edx
c00196c0:	b9 02 00 00 00       	mov    ecx,0x2
c00196c5:	99                   	cdq    
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	f7 f9                	idiv   ecx
c00196cb:	83 e8 32             	sub    eax,0x32
c00196ce:	50                   	push   eax
c00196cf:	e8 b4 ce fe ff       	call   c0006588 <iso_close>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	31 c0                	xor    eax,eax
c00196d9:	83 c4 0c             	add    esp,0xc
c00196dc:	c3                   	ret    
c00196dd:	90                   	nop

c00196de <ISO9660::openDir(char const*, void**)>:
c00196de:	56                   	push   esi
c00196df:	53                   	push   ebx
c00196e0:	50                   	push   eax
c00196e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00196e9:	85 db                	test   ebx,ebx
c00196eb:	0f 84 bd 00 00 00    	je     c00197ae <ISO9660::openDir(char const*, void**)+0xd0>
c00196f1:	85 f6                	test   esi,esi
c00196f3:	0f 84 b5 00 00 00    	je     c00197ae <ISO9660::openDir(char const*, void**)+0xd0>
c00196f9:	8a 13                	mov    dl,BYTE PTR [ebx]
c00196fb:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019702:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019708:	74 1b                	je     c0019725 <ISO9660::openDir(char const*, void**)+0x47>
c001970a:	85 c0                	test   eax,eax
c001970c:	74 10                	je     c001971e <ISO9660::openDir(char const*, void**)+0x40>
c001970e:	83 ec 0c             	sub    esp,0xc
c0019711:	68 a5 16 02 c0       	push   0xc00216a5
c0019716:	e8 1c 71 ff ff       	call   c0010837 <KePanic(char const*)>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019720:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019725:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019728:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001972f:	85 c0                	test   eax,eax
c0019731:	74 10                	je     c0019743 <ISO9660::openDir(char const*, void**)+0x65>
c0019733:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001973a:	74 1a                	je     c0019756 <ISO9660::openDir(char const*, void**)+0x78>
c001973c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019743:	83 ec 0c             	sub    esp,0xc
c0019746:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001974d:	50                   	push   eax
c001974e:	e8 e4 d2 fe ff       	call   c0006a37 <init_percd>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	50                   	push   eax
c0019757:	83 c3 03             	add    ebx,0x3
c001975a:	50                   	push   eax
c001975b:	6a 01                	push   0x1
c001975d:	53                   	push   ebx
c001975e:	e8 9b cd fe ff       	call   c00064fe <iso_open>
c0019763:	83 c4 10             	add    esp,0x10
c0019766:	89 c3                	mov    ebx,eax
c0019768:	83 f8 ff             	cmp    eax,0xffffffff
c001976b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019770:	75 1c                	jne    c001978e <ISO9660::openDir(char const*, void**)+0xb0>
c0019772:	53                   	push   ebx
c0019773:	53                   	push   ebx
c0019774:	68 4d 17 02 c0       	push   0xc002174d
c0019779:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001977f:	e8 f8 f2 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	b8 01 00 00 00       	mov    eax,0x1
c001978c:	eb 25                	jmp    c00197b3 <ISO9660::openDir(char const*, void**)+0xd5>
c001978e:	51                   	push   ecx
c001978f:	01 db                	add    ebx,ebx
c0019791:	51                   	push   ecx
c0019792:	83 c3 65             	add    ebx,0x65
c0019795:	68 60 17 02 c0       	push   0xc0021760
c001979a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197a0:	e8 d7 f2 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c00197a5:	89 1e                	mov    DWORD PTR [esi],ebx
c00197a7:	83 c4 10             	add    esp,0x10
c00197aa:	31 c0                	xor    eax,eax
c00197ac:	eb 05                	jmp    c00197b3 <ISO9660::openDir(char const*, void**)+0xd5>
c00197ae:	b8 04 00 00 00       	mov    eax,0x4
c00197b3:	5a                   	pop    edx
c00197b4:	5b                   	pop    ebx
c00197b5:	5e                   	pop    esi
c00197b6:	c3                   	ret    
c00197b7:	90                   	nop

c00197b8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197b8:	55                   	push   ebp
c00197b9:	57                   	push   edi
c00197ba:	56                   	push   esi
c00197bb:	53                   	push   ebx
c00197bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197c2:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197c9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00197d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00197d8:	0f 84 e7 00 00 00    	je     c00198c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197de:	85 db                	test   ebx,ebx
c00197e0:	0f 84 df 00 00 00    	je     c00198c5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197e6:	83 ec 0c             	sub    esp,0xc
c00197e9:	68 73 17 02 c0       	push   0xc0021773
c00197ee:	e8 56 11 ff ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c00197f3:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00197fa:	b9 02 00 00 00       	mov    ecx,0x2
c00197ff:	99                   	cdq    
c0019800:	f7 f9                	idiv   ecx
c0019802:	83 e8 32             	sub    eax,0x32
c0019805:	89 04 24             	mov    DWORD PTR [esp],eax
c0019808:	e8 b6 cf fe ff       	call   c00067c3 <iso_readdir>
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	89 c6                	mov    esi,eax
c0019812:	85 c0                	test   eax,eax
c0019814:	75 37                	jne    c001984d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019816:	56                   	push   esi
c0019817:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001981c:	56                   	push   esi
c001981d:	68 7e 17 02 c0       	push   0xc002177e
c0019822:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019828:	e8 4f f2 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c001982d:	83 c4 0c             	add    esp,0xc
c0019830:	68 10 01 00 00       	push   0x110
c0019835:	6a 00                	push   0x0
c0019837:	57                   	push   edi
c0019838:	e8 a3 6c fe ff       	call   c00004e0 <memset>
c001983d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019843:	83 c4 10             	add    esp,0x10
c0019846:	b8 01 00 00 00       	mov    eax,0x1
c001984b:	eb 7d                	jmp    c00198ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001984d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019853:	83 ec 0c             	sub    esp,0xc
c0019856:	8d 68 08             	lea    ebp,[eax+0x8]
c0019859:	55                   	push   ebp
c001985a:	e8 01 6d fe ff       	call   c0000560 <strlen>
c001985f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019867:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001986b:	83 c4 10             	add    esp,0x10
c001986e:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019872:	75 0a                	jne    c001987e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019874:	b8 02 00 00 00       	mov    eax,0x2
c0019879:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001987c:	74 05                	je     c0019883 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001987e:	b8 01 00 00 00       	mov    eax,0x1
c0019883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019887:	50                   	push   eax
c0019888:	50                   	push   eax
c0019889:	55                   	push   ebp
c001988a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001988e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019892:	50                   	push   eax
c0019893:	e8 98 6d fe ff       	call   c0000630 <strcpy>
c0019898:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001989f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198a1:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00198a7:	5a                   	pop    edx
c00198a8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198ad:	59                   	pop    ecx
c00198ae:	68 91 17 02 c0       	push   0xc0021791
c00198b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198b9:	e8 be f1 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c00198be:	83 c4 10             	add    esp,0x10
c00198c1:	31 c0                	xor    eax,eax
c00198c3:	eb 05                	jmp    c00198ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00198c5:	b8 04 00 00 00       	mov    eax,0x4
c00198ca:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198d0:	5b                   	pop    ebx
c00198d1:	5e                   	pop    esi
c00198d2:	5f                   	pop    edi
c00198d3:	5d                   	pop    ebp
c00198d4:	c3                   	ret    

c00198d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198d5:	57                   	push   edi
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198e0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198e4:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00198ea:	0f be cb             	movsx  ecx,bl
c00198ed:	75 0b                	jne    c00198fa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198ef:	0f be 05 e4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222e4
c00198f6:	39 c8                	cmp    eax,ecx
c00198f8:	74 47                	je     c0019941 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198fa:	83 ec 0c             	sub    esp,0xc
c00198fd:	31 d2                	xor    edx,edx
c00198ff:	68 40 83 02 c0       	push   0xc0028340
c0019904:	6a 01                	push   0x1
c0019906:	52                   	push   edx
c0019907:	56                   	push   esi
c0019908:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c001990f:	e8 56 38 ff ff       	call   c000d16a <LogicalDisk::read(unsigned long long, int, void*)>
c0019914:	83 c4 20             	add    esp,0x20
c0019917:	85 c0                	test   eax,eax
c0019919:	75 0e                	jne    c0019929 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001991b:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019921:	88 1d e4 22 02 c0    	mov    BYTE PTR ds:0xc00222e4,bl
c0019927:	eb 18                	jmp    c0019941 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019929:	50                   	push   eax
c001992a:	68 00 08 00 00       	push   0x800
c001992f:	6a 00                	push   0x0
c0019931:	57                   	push   edi
c0019932:	e8 a9 6b fe ff       	call   c00004e0 <memset>
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	b8 01 00 00 00       	mov    eax,0x1
c001993f:	eb 0e                	jmp    c001994f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019941:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019946:	b9 00 08 00 00       	mov    ecx,0x800
c001994b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001994d:	31 c0                	xor    eax,eax
c001994f:	5b                   	pop    ebx
c0019950:	5e                   	pop    esi
c0019951:	5f                   	pop    edi
c0019952:	c3                   	ret    
c0019953:	90                   	nop

c0019954 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019954:	53                   	push   ebx
c0019955:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001995b:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019965:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001996c:	8d 58 41             	lea    ebx,[eax+0x41]
c001996f:	0f be db             	movsx  ebx,bl
c0019972:	53                   	push   ebx
c0019973:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019977:	50                   	push   eax
c0019978:	6a 10                	push   0x10
c001997a:	e8 56 ff ff ff       	call   c00198d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001997f:	83 c4 10             	add    esp,0x10
c0019982:	31 d2                	xor    edx,edx
c0019984:	85 c0                	test   eax,eax
c0019986:	75 33                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019988:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001998d:	75 2c                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001998f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019994:	75 25                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019996:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001999b:	75 1e                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001999d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199a2:	75 17                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199a9:	75 10                	jne    c00199bb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ab:	83 ec 0c             	sub    esp,0xc
c00199ae:	53                   	push   ebx
c00199af:	e8 83 d0 fe ff       	call   c0006a37 <init_percd>
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	40                   	inc    eax
c00199b8:	0f 95 c2             	setne  dl
c00199bb:	81 c4 08 08 00 00    	add    esp,0x808
c00199c1:	88 d0                	mov    al,dl
c00199c3:	5b                   	pop    ebx
c00199c4:	c3                   	ret    
c00199c5:	90                   	nop

c00199c6 <ISO9660::ISO9660()>:
c00199c6:	83 ec 0c             	sub    esp,0xc
c00199c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199cd:	83 ec 0c             	sub    esp,0xc
c00199d0:	50                   	push   eax
c00199d1:	e8 96 12 ff ff       	call   c000ac6c <Filesystem::Filesystem()>
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c00199de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199e2:	89 10                	mov    DWORD PTR [eax],edx
c00199e4:	e8 60 d1 fe ff       	call   c0006b49 <fs_iso9660_init>
c00199e9:	90                   	nop
c00199ea:	83 c4 0c             	add    esp,0xc
c00199ed:	c3                   	ret    

c00199ee <SoundCard::beginPlayback()>:
c00199ee:	c7 44 24 04 0c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002180c
c00199f6:	e9 3c 6e ff ff       	jmp    c0010837 <KePanic(char const*)>
c00199fb:	90                   	nop

c00199fc <SoundCard::stopPlayback()>:
c00199fc:	c7 44 24 04 0c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002180c
c0019a04:	e9 2e 6e ff ff       	jmp    c0010837 <KePanic(char const*)>
c0019a09:	90                   	nop

c0019a0a <SoundCard::SoundCard(char const*)>:
c0019a0a:	83 ec 1c             	sub    esp,0x1c
c0019a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a11:	83 ec 08             	sub    esp,0x8
c0019a14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a18:	50                   	push   eax
c0019a19:	e8 f4 24 ff ff       	call   c000bf12 <Device::Device(char const*)>
c0019a1e:	83 c4 10             	add    esp,0x10
c0019a21:	ba 58 18 02 c0       	mov    edx,0xc0021858
c0019a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a2a:	89 10                	mov    DWORD PTR [eax],edx
c0019a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a30:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a3b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a49:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a57:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a65:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a77:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a7c:	7f 1a                	jg     c0019a98 <SoundCard::SoundCard(char const*)+0x8e>
c0019a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a86:	83 c2 54             	add    edx,0x54
c0019a89:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a91:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a96:	eb df                	jmp    c0019a77 <SoundCard::SoundCard(char const*)+0x6d>
c0019a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019aa3:	90                   	nop
c0019aa4:	83 c4 1c             	add    esp,0x1c
c0019aa7:	c3                   	ret    

c0019aa8 <SoundCard::~SoundCard()>:
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	ba 58 18 02 c0       	mov    edx,0xc0021858
c0019ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab4:	89 10                	mov    DWORD PTR [eax],edx
c0019ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aba:	83 ec 0c             	sub    esp,0xc
c0019abd:	50                   	push   eax
c0019abe:	e8 bd 21 ff ff       	call   c000bc80 <Device::~Device()>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	90                   	nop
c0019ac7:	83 c4 0c             	add    esp,0xc
c0019aca:	c3                   	ret    
c0019acb:	90                   	nop

c0019acc <SoundCard::~SoundCard()>:
c0019acc:	83 ec 0c             	sub    esp,0xc
c0019acf:	83 ec 0c             	sub    esp,0xc
c0019ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ad6:	e8 cd ff ff ff       	call   c0019aa8 <SoundCard::~SoundCard()>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	83 ec 08             	sub    esp,0x8
c0019ae1:	68 e8 01 00 00       	push   0x1e8
c0019ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aea:	e8 5e 0d ff ff       	call   c000a84d <operator delete(void*, unsigned long)>
c0019aef:	83 c4 10             	add    esp,0x10
c0019af2:	83 c4 0c             	add    esp,0xc
c0019af5:	c3                   	ret    

c0019af6 <SoundCard::configureRates(int, int, int)>:
c0019af6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019afa:	31 c0                	xor    eax,eax
c0019afc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b03:	75 20                	jne    c0019b25 <SoundCard::configureRates(int, int, int)+0x2f>
c0019b05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b09:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b13:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b1d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b23:	b0 01                	mov    al,0x1
c0019b25:	c3                   	ret    

c0019b26 <SoundCard::getSamples16(int, short*)>:
c0019b26:	55                   	push   ebp
c0019b27:	57                   	push   edi
c0019b28:	31 ff                	xor    edi,edi
c0019b2a:	56                   	push   esi
c0019b2b:	53                   	push   ebx
c0019b2c:	31 db                	xor    ebx,ebx
c0019b2e:	83 ec 10             	sub    esp,0x10
c0019b31:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b35:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b39:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b3c:	50                   	push   eax
c0019b3d:	6a 00                	push   0x0
c0019b3f:	55                   	push   ebp
c0019b40:	e8 9b 69 fe ff       	call   c00004e0 <memset>
c0019b45:	83 c4 10             	add    esp,0x10
c0019b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b4c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019b53:	85 c0                	test   eax,eax
c0019b55:	74 1a                	je     c0019b71 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b57:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b5b:	75 14                	jne    c0019b71 <SoundCard::getSamples16(int, short*)+0x4b>
c0019b5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b61:	55                   	push   ebp
c0019b62:	56                   	push   esi
c0019b63:	50                   	push   eax
c0019b64:	e8 f3 02 00 00       	call   c0019e5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	39 c3                	cmp    ebx,eax
c0019b6e:	0f 4c d8             	cmovl  ebx,eax
c0019b71:	47                   	inc    edi
c0019b72:	83 ff 20             	cmp    edi,0x20
c0019b75:	75 d1                	jne    c0019b48 <SoundCard::getSamples16(int, short*)+0x22>
c0019b77:	83 c4 0c             	add    esp,0xc
c0019b7a:	89 d8                	mov    eax,ebx
c0019b7c:	5b                   	pop    ebx
c0019b7d:	5e                   	pop    esi
c0019b7e:	5f                   	pop    edi
c0019b7f:	5d                   	pop    ebp
c0019b80:	c3                   	ret    
c0019b81:	90                   	nop

c0019b82 <SoundCard::getSamples32(int, int*)>:
c0019b82:	55                   	push   ebp
c0019b83:	57                   	push   edi
c0019b84:	31 ff                	xor    edi,edi
c0019b86:	56                   	push   esi
c0019b87:	31 f6                	xor    esi,esi
c0019b89:	53                   	push   ebx
c0019b8a:	83 ec 10             	sub    esp,0x10
c0019b8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b91:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b95:	c1 e0 02             	shl    eax,0x2
c0019b98:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b9c:	50                   	push   eax
c0019b9d:	6a 00                	push   0x0
c0019b9f:	55                   	push   ebp
c0019ba0:	e8 3b 69 fe ff       	call   c00004e0 <memset>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019baf:	85 c0                	test   eax,eax
c0019bb1:	74 1a                	je     c0019bcd <SoundCard::getSamples32(int, int*)+0x4b>
c0019bb3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bb7:	75 14                	jne    c0019bcd <SoundCard::getSamples32(int, int*)+0x4b>
c0019bb9:	53                   	push   ebx
c0019bba:	55                   	push   ebp
c0019bbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bbf:	50                   	push   eax
c0019bc0:	e8 67 03 00 00       	call   c0019f2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	39 c6                	cmp    esi,eax
c0019bca:	0f 4c f0             	cmovl  esi,eax
c0019bcd:	47                   	inc    edi
c0019bce:	83 ff 20             	cmp    edi,0x20
c0019bd1:	75 d5                	jne    c0019ba8 <SoundCard::getSamples32(int, int*)+0x26>
c0019bd3:	85 f6                	test   esi,esi
c0019bd5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019bdc:	75 0f                	jne    c0019bed <SoundCard::getSamples32(int, int*)+0x6b>
c0019bde:	85 c0                	test   eax,eax
c0019be0:	74 1b                	je     c0019bfd <SoundCard::getSamples32(int, int*)+0x7b>
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be7:	53                   	push   ebx
c0019be8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019beb:	eb 0d                	jmp    c0019bfa <SoundCard::getSamples32(int, int*)+0x78>
c0019bed:	85 c0                	test   eax,eax
c0019bef:	75 0c                	jne    c0019bfd <SoundCard::getSamples32(int, int*)+0x7b>
c0019bf1:	83 ec 0c             	sub    esp,0xc
c0019bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bf6:	53                   	push   ebx
c0019bf7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	83 c4 0c             	add    esp,0xc
c0019c00:	89 f0                	mov    eax,esi
c0019c02:	5b                   	pop    ebx
c0019c03:	5e                   	pop    esi
c0019c04:	5f                   	pop    edi
c0019c05:	5d                   	pop    ebp
c0019c06:	c3                   	ret    
c0019c07:	90                   	nop

c0019c08 <SoundCard::addChannel(SoundPort*)>:
c0019c08:	83 ec 0c             	sub    esp,0xc
c0019c0b:	31 c0                	xor    eax,eax
c0019c0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c11:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c19:	74 1b                	je     c0019c36 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c1b:	40                   	inc    eax
c0019c1c:	83 f8 20             	cmp    eax,0x20
c0019c1f:	75 f0                	jne    c0019c11 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c21:	83 ec 0c             	sub    esp,0xc
c0019c24:	68 31 18 02 c0       	push   0xc0021831
c0019c29:	e8 09 6c ff ff       	call   c0010837 <KePanic(char const*)>
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	83 c8 ff             	or     eax,0xffffffff
c0019c34:	eb 0b                	jmp    c0019c41 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c3a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c41:	83 c4 0c             	add    esp,0xc
c0019c44:	c3                   	ret    
c0019c45:	90                   	nop

c0019c46 <SoundCard::removeChannel(int)>:
c0019c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c4e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c59:	c3                   	ret    
c0019c5a:	66 90                	xchg   ax,ax

c0019c5c <SoundPort::SoundPort(int, int, int, int)>:
c0019c5c:	83 ec 0c             	sub    esp,0xc
c0019c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c63:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c7a:	89 10                	mov    DWORD PTR [eax],edx
c0019c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c8f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c92:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c97:	75 13                	jne    c0019cac <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c9f:	05 a0 0f 00 00       	add    eax,0xfa0
c0019ca4:	d1 e0                	shl    eax,1
c0019ca6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019caa:	66 90                	xchg   ax,ax
c0019cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cb4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cbb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cc9:	c1 e0 02             	shl    eax,0x2
c0019ccc:	83 ec 0c             	sub    esp,0xc
c0019ccf:	50                   	push   eax
c0019cd0:	e8 b2 dd fe ff       	call   c0007a87 <malloc>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	89 c2                	mov    edx,eax
c0019cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cde:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019ce1:	90                   	nop
c0019ce2:	83 c4 0c             	add    esp,0xc
c0019ce5:	c3                   	ret    
c0019ce6:	66 90                	xchg   ax,ax

c0019ce8 <SoundPort::~SoundPort()>:
c0019ce8:	83 ec 0c             	sub    esp,0xc
c0019ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cf2:	85 c0                	test   eax,eax
c0019cf4:	74 1e                	je     c0019d14 <SoundPort::~SoundPort()+0x2c>
c0019cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cfa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cfd:	83 ec 0c             	sub    esp,0xc
c0019d00:	50                   	push   eax
c0019d01:	e8 91 dd fe ff       	call   c0007a97 <free>
c0019d06:	83 c4 10             	add    esp,0x10
c0019d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d0d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d14:	90                   	nop
c0019d15:	83 c4 0c             	add    esp,0xc
c0019d18:	c3                   	ret    
c0019d19:	90                   	nop
c0019d1a:	66 90                	xchg   ax,ax

c0019d1c <SoundPort::unpause()>:
c0019d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d20:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d24:	c3                   	ret    
c0019d25:	90                   	nop
c0019d26:	66 90                	xchg   ax,ax

c0019d28 <SoundPort::pause()>:
c0019d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d2c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d30:	c3                   	ret    
c0019d31:	90                   	nop
c0019d32:	66 90                	xchg   ax,ax

c0019d34 <SoundPort::getBufferUsed()>:
c0019d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d3b:	c3                   	ret    

c0019d3c <SoundPort::getBufferSize()>:
c0019d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d40:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d43:	c3                   	ret    

c0019d44 <SoundPort::buffer16(short*, int)>:
c0019d44:	55                   	push   ebp
c0019d45:	57                   	push   edi
c0019d46:	56                   	push   esi
c0019d47:	53                   	push   ebx
c0019d48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d4c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d50:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d53:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d56:	74 68                	je     c0019dc0 <SoundPort::buffer16(short*, int)+0x7c>
c0019d58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d5c:	85 c9                	test   ecx,ecx
c0019d5e:	7e 60                	jle    c0019dc0 <SoundPort::buffer16(short*, int)+0x7c>
c0019d60:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d64:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d67:	8d 70 01             	lea    esi,[eax+0x1]
c0019d6a:	c1 e1 0f             	shl    ecx,0xf
c0019d6d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d70:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d79:	74 4d                	je     c0019dc8 <SoundPort::buffer16(short*, int)+0x84>
c0019d7b:	31 f6                	xor    esi,esi
c0019d7d:	eb 21                	jmp    c0019da0 <SoundPort::buffer16(short*, int)+0x5c>
c0019d7f:	90                   	nop
c0019d80:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d85:	c1 e3 0f             	shl    ebx,0xf
c0019d88:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d8b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d8e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d91:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d97:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d9a:	74 1c                	je     c0019db8 <SoundPort::buffer16(short*, int)+0x74>
c0019d9c:	89 c6                	mov    esi,eax
c0019d9e:	66 90                	xchg   ax,ax
c0019da0:	8d 46 01             	lea    eax,[esi+0x1]
c0019da3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019da7:	75 d7                	jne    c0019d80 <SoundPort::buffer16(short*, int)+0x3c>
c0019da9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dad:	8d 76 00             	lea    esi,[esi+0x0]
c0019db0:	5b                   	pop    ebx
c0019db1:	5e                   	pop    esi
c0019db2:	5f                   	pop    edi
c0019db3:	5d                   	pop    ebp
c0019db4:	c3                   	ret    
c0019db5:	8d 76 00             	lea    esi,[esi+0x0]
c0019db8:	5b                   	pop    ebx
c0019db9:	8d 46 02             	lea    eax,[esi+0x2]
c0019dbc:	5e                   	pop    esi
c0019dbd:	5f                   	pop    edi
c0019dbe:	5d                   	pop    ebp
c0019dbf:	c3                   	ret    
c0019dc0:	5b                   	pop    ebx
c0019dc1:	31 c0                	xor    eax,eax
c0019dc3:	5e                   	pop    esi
c0019dc4:	5f                   	pop    edi
c0019dc5:	5d                   	pop    ebp
c0019dc6:	c3                   	ret    
c0019dc7:	90                   	nop
c0019dc8:	b8 01 00 00 00       	mov    eax,0x1
c0019dcd:	eb e1                	jmp    c0019db0 <SoundPort::buffer16(short*, int)+0x6c>
c0019dcf:	90                   	nop

c0019dd0 <SoundPort::buffer32(int*, int)>:
c0019dd0:	55                   	push   ebp
c0019dd1:	57                   	push   edi
c0019dd2:	56                   	push   esi
c0019dd3:	53                   	push   ebx
c0019dd4:	83 ec 04             	sub    esp,0x4
c0019dd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ddf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019de3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019de6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019de9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019dec:	74 5a                	je     c0019e48 <SoundPort::buffer32(int*, int)+0x78>
c0019dee:	85 c0                	test   eax,eax
c0019df0:	7e 56                	jle    c0019e48 <SoundPort::buffer32(int*, int)+0x78>
c0019df2:	8d 71 01             	lea    esi,[ecx+0x1]
c0019df5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019df8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019dfb:	8b 37                	mov    esi,DWORD PTR [edi]
c0019dfd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e03:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e06:	74 4c                	je     c0019e54 <SoundPort::buffer32(int*, int)+0x84>
c0019e08:	31 f6                	xor    esi,esi
c0019e0a:	eb 1c                	jmp    c0019e28 <SoundPort::buffer32(int*, int)+0x58>
c0019e0c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e0f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e12:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e15:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e18:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e1c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e1f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e22:	74 18                	je     c0019e3c <SoundPort::buffer32(int*, int)+0x6c>
c0019e24:	89 de                	mov    esi,ebx
c0019e26:	66 90                	xchg   ax,ax
c0019e28:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e2b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e2e:	75 dc                	jne    c0019e0c <SoundPort::buffer32(int*, int)+0x3c>
c0019e30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e33:	90                   	nop
c0019e34:	83 c4 04             	add    esp,0x4
c0019e37:	5b                   	pop    ebx
c0019e38:	5e                   	pop    esi
c0019e39:	5f                   	pop    edi
c0019e3a:	5d                   	pop    ebp
c0019e3b:	c3                   	ret    
c0019e3c:	83 c4 04             	add    esp,0x4
c0019e3f:	8d 46 02             	lea    eax,[esi+0x2]
c0019e42:	5b                   	pop    ebx
c0019e43:	5e                   	pop    esi
c0019e44:	5f                   	pop    edi
c0019e45:	5d                   	pop    ebp
c0019e46:	c3                   	ret    
c0019e47:	90                   	nop
c0019e48:	83 c4 04             	add    esp,0x4
c0019e4b:	31 c0                	xor    eax,eax
c0019e4d:	5b                   	pop    ebx
c0019e4e:	5e                   	pop    esi
c0019e4f:	5f                   	pop    edi
c0019e50:	5d                   	pop    ebp
c0019e51:	c3                   	ret    
c0019e52:	66 90                	xchg   ax,ax
c0019e54:	b8 01 00 00 00       	mov    eax,0x1
c0019e59:	eb d9                	jmp    c0019e34 <SoundPort::buffer32(int*, int)+0x64>
c0019e5b:	90                   	nop

c0019e5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e5c:	55                   	push   ebp
c0019e5d:	57                   	push   edi
c0019e5e:	56                   	push   esi
c0019e5f:	53                   	push   ebx
c0019e60:	83 ec 0c             	sub    esp,0xc
c0019e63:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019e67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019e6b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019e6f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019e73:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e79:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e7b:	74 13                	je     c0019e90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019e7d:	83 ec 0c             	sub    esp,0xc
c0019e80:	68 84 18 02 c0       	push   0xc0021884
c0019e85:	e8 ad 69 ff ff       	call   c0010837 <KePanic(char const*)>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e90:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e99:	74 11                	je     c0019eac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	68 c3 18 02 c0       	push   0xc00218c3
c0019ea3:	e8 8f 69 ff ff       	call   c0010837 <KePanic(char const*)>
c0019ea8:	83 c4 10             	add    esp,0x10
c0019eab:	90                   	nop
c0019eac:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019eb2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019eb5:	74 11                	je     c0019ec8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019eb7:	83 ec 0c             	sub    esp,0xc
c0019eba:	68 c3 18 02 c0       	push   0xc00218c3
c0019ebf:	e8 73 69 ff ff       	call   c0010837 <KePanic(char const*)>
c0019ec4:	83 c4 10             	add    esp,0x10
c0019ec7:	90                   	nop
c0019ec8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019ecb:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019ecf:	85 f6                	test   esi,esi
c0019ed1:	7e 2d                	jle    c0019f00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019ed3:	31 c0                	xor    eax,eax
c0019ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019edb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019ede:	85 c9                	test   ecx,ecx
c0019ee0:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019ee6:	0f 49 d1             	cmovns edx,ecx
c0019ee9:	c1 fa 0f             	sar    edx,0xf
c0019eec:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019ef0:	01 d1                	add    ecx,edx
c0019ef2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019ef6:	83 c0 01             	add    eax,0x1
c0019ef9:	39 f0                	cmp    eax,esi
c0019efb:	75 db                	jne    c0019ed8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019efd:	8d 76 00             	lea    esi,[esi+0x0]
c0019f00:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f03:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f06:	83 ec 04             	sub    esp,0x4
c0019f09:	29 f0                	sub    eax,esi
c0019f0b:	c1 e0 02             	shl    eax,0x2
c0019f0e:	50                   	push   eax
c0019f0f:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f12:	50                   	push   eax
c0019f13:	52                   	push   edx
c0019f14:	e8 b7 64 fe ff       	call   c00003d0 <memmove>
c0019f19:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f1c:	29 f0                	sub    eax,esi
c0019f1e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f21:	83 c4 1c             	add    esp,0x1c
c0019f24:	89 f0                	mov    eax,esi
c0019f26:	5b                   	pop    ebx
c0019f27:	5e                   	pop    esi
c0019f28:	5f                   	pop    edi
c0019f29:	5d                   	pop    ebp
c0019f2a:	c3                   	ret    
c0019f2b:	90                   	nop

c0019f2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f2c:	55                   	push   ebp
c0019f2d:	57                   	push   edi
c0019f2e:	56                   	push   esi
c0019f2f:	53                   	push   ebx
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f3b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019f3f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f43:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019f49:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f4b:	74 13                	je     c0019f60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019f4d:	83 ec 0c             	sub    esp,0xc
c0019f50:	68 a4 18 02 c0       	push   0xc00218a4
c0019f55:	e8 dd 68 ff ff       	call   c0010837 <KePanic(char const*)>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f60:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019f66:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f69:	74 11                	je     c0019f7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019f6b:	83 ec 0c             	sub    esp,0xc
c0019f6e:	68 df 18 02 c0       	push   0xc00218df
c0019f73:	e8 bf 68 ff ff       	call   c0010837 <KePanic(char const*)>
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	90                   	nop
c0019f7c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019f82:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f85:	74 11                	je     c0019f98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019f87:	83 ec 0c             	sub    esp,0xc
c0019f8a:	68 df 18 02 c0       	push   0xc00218df
c0019f8f:	e8 a3 68 ff ff       	call   c0010837 <KePanic(char const*)>
c0019f94:	83 c4 10             	add    esp,0x10
c0019f97:	90                   	nop
c0019f98:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019f9b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019f9f:	85 ff                	test   edi,edi
c0019fa1:	7e 21                	jle    c0019fc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019fa3:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019faa:	31 c0                	xor    eax,eax
c0019fac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019faf:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019fb2:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fb5:	01 d5                	add    ebp,edx
c0019fb7:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019fba:	83 c0 04             	add    eax,0x4
c0019fbd:	39 c1                	cmp    ecx,eax
c0019fbf:	75 eb                	jne    c0019fac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fca:	83 ec 04             	sub    esp,0x4
c0019fcd:	29 f8                	sub    eax,edi
c0019fcf:	c1 e0 02             	shl    eax,0x2
c0019fd2:	50                   	push   eax
c0019fd3:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019fd6:	50                   	push   eax
c0019fd7:	52                   	push   edx
c0019fd8:	e8 f3 63 fe ff       	call   c00003d0 <memmove>
c0019fdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fe0:	29 f8                	sub    eax,edi
c0019fe2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fe5:	83 c4 1c             	add    esp,0x1c
c0019fe8:	89 f8                	mov    eax,edi
c0019fea:	5b                   	pop    ebx
c0019feb:	5e                   	pop    esi
c0019fec:	5f                   	pop    edi
c0019fed:	5d                   	pop    ebp
c0019fee:	c3                   	ret    
c0019fef:	90                   	nop

c0019ff0 <PCI::open(int, int, void*)>:
c0019ff0:	83 ec 18             	sub    esp,0x18
c0019ff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ff7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ffb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a001:	8b 10                	mov    edx,DWORD PTR [eax]
c001a003:	50                   	push   eax
c001a004:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a007:	31 c0                	xor    eax,eax
c001a009:	83 c4 1c             	add    esp,0x1c
c001a00c:	c3                   	ret    
c001a00d:	90                   	nop

c001a00e <PCI::close(int, int, void*)>:
c001a00e:	31 c0                	xor    eax,eax
c001a010:	c3                   	ret    
c001a011:	90                   	nop

c001a012 <PCI::PCI()>:
c001a012:	83 ec 0c             	sub    esp,0xc
c001a015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a019:	83 ec 08             	sub    esp,0x8
c001a01c:	68 fb 18 02 c0       	push   0xc00218fb
c001a021:	50                   	push   eax
c001a022:	e8 b9 16 ff ff       	call   c000b6e0 <Bus::Bus(char const*)>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c001a02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a033:	89 10                	mov    DWORD PTR [eax],edx
c001a035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a039:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a047:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a050:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a056:	0f b6 d0             	movzx  edx,al
c001a059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a068:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a06e:	0f b6 d0             	movzx  edx,al
c001a071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a075:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a084:	8d 50 01             	lea    edx,[eax+0x1]
c001a087:	88 d1                	mov    cl,dl
c001a089:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a08d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a093:	0f b6 d0             	movzx  edx,al
c001a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a09e:	83 c9 c0             	or     ecx,0xffffffc0
c001a0a1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0a5:	90                   	nop
c001a0a6:	83 c4 0c             	add    esp,0xc
c001a0a9:	c3                   	ret    

c001a0aa <PCI::readBAR8(unsigned int, int)>:
c001a0aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b2:	f6 c2 01             	test   dl,0x1
c001a0b5:	74 07                	je     c001a0be <PCI::readBAR8(unsigned int, int)+0x14>
c001a0b7:	83 e2 fc             	and    edx,0xfffffffc
c001a0ba:	01 c2                	add    edx,eax
c001a0bc:	ec                   	in     al,dx
c001a0bd:	c3                   	ret    
c001a0be:	83 e2 f0             	and    edx,0xfffffff0
c001a0c1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0c4:	c3                   	ret    
c001a0c5:	90                   	nop

c001a0c6 <PCI::readBAR16(unsigned int, int)>:
c001a0c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ce:	f6 c2 01             	test   dl,0x1
c001a0d1:	74 08                	je     c001a0db <PCI::readBAR16(unsigned int, int)+0x15>
c001a0d3:	83 e2 fc             	and    edx,0xfffffffc
c001a0d6:	01 c2                	add    edx,eax
c001a0d8:	66 ed                	in     ax,dx
c001a0da:	c3                   	ret    
c001a0db:	83 e2 f0             	and    edx,0xfffffff0
c001a0de:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a0e2:	c3                   	ret    
c001a0e3:	90                   	nop

c001a0e4 <PCI::readBAR32(unsigned int, int)>:
c001a0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ec:	f6 c2 01             	test   dl,0x1
c001a0ef:	74 07                	je     c001a0f8 <PCI::readBAR32(unsigned int, int)+0x14>
c001a0f1:	83 e2 fc             	and    edx,0xfffffffc
c001a0f4:	01 c2                	add    edx,eax
c001a0f6:	ed                   	in     eax,dx
c001a0f7:	c3                   	ret    
c001a0f8:	83 e2 f0             	and    edx,0xfffffff0
c001a0fb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a0fe:	c3                   	ret    
c001a0ff:	90                   	nop

c001a100 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a10c:	f6 c2 01             	test   dl,0x1
c001a10f:	74 07                	je     c001a118 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a111:	83 e2 fc             	and    edx,0xfffffffc
c001a114:	01 ca                	add    edx,ecx
c001a116:	ee                   	out    dx,al
c001a117:	c3                   	ret    
c001a118:	83 e2 f0             	and    edx,0xfffffff0
c001a11b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a11e:	c3                   	ret    
c001a11f:	90                   	nop

c001a120 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a128:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a12c:	f6 c2 01             	test   dl,0x1
c001a12f:	74 08                	je     c001a139 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a131:	83 e2 fc             	and    edx,0xfffffffc
c001a134:	01 ca                	add    edx,ecx
c001a136:	66 ef                	out    dx,ax
c001a138:	c3                   	ret    
c001a139:	83 e2 f0             	and    edx,0xfffffff0
c001a13c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a140:	c3                   	ret    
c001a141:	90                   	nop

c001a142 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a14a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a14e:	f6 c2 01             	test   dl,0x1
c001a151:	74 07                	je     c001a15a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a153:	83 e2 fc             	and    edx,0xfffffffc
c001a156:	01 ca                	add    edx,ecx
c001a158:	ef                   	out    dx,eax
c001a159:	c3                   	ret    
c001a15a:	83 e2 f0             	and    edx,0xfffffff0
c001a15d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a160:	c3                   	ret    
c001a161:	90                   	nop

c001a162 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a162:	55                   	push   ebp
c001a163:	57                   	push   edi
c001a164:	56                   	push   esi
c001a165:	53                   	push   ebx
c001a166:	83 ec 0c             	sub    esp,0xc
c001a169:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a16e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a172:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a176:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a17a:	83 fe 07             	cmp    esi,0x7
c001a17d:	76 10                	jbe    c001a18f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a17f:	83 ec 0c             	sub    esp,0xc
c001a182:	68 03 19 02 c0       	push   0xc0021903
c001a187:	e8 ab 66 ff ff       	call   c0010837 <KePanic(char const*)>
c001a18c:	83 c4 10             	add    esp,0x10
c001a18f:	0f b6 db             	movzx  ebx,bl
c001a192:	83 fb 0f             	cmp    ebx,0xf
c001a195:	76 10                	jbe    c001a1a7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a197:	83 ec 0c             	sub    esp,0xc
c001a19a:	68 33 19 02 c0       	push   0xc0021933
c001a19f:	e8 93 66 ff ff       	call   c0010837 <KePanic(char const*)>
c001a1a4:	83 c4 10             	add    esp,0x10
c001a1a7:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1aa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1af:	83 c8 f0             	or     eax,0xfffffff0
c001a1b2:	ee                   	out    dx,al
c001a1b3:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1b8:	89 e8                	mov    eax,ebp
c001a1ba:	ee                   	out    dx,al
c001a1bb:	89 f9                	mov    ecx,edi
c001a1bd:	83 c4 0c             	add    esp,0xc
c001a1c0:	89 d8                	mov    eax,ebx
c001a1c2:	0f b6 d9             	movzx  ebx,cl
c001a1c5:	c1 e0 08             	shl    eax,0x8
c001a1c8:	83 e3 fc             	and    ebx,0xfffffffc
c001a1cb:	09 d8                	or     eax,ebx
c001a1cd:	5b                   	pop    ebx
c001a1ce:	5e                   	pop    esi
c001a1cf:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1d4:	5f                   	pop    edi
c001a1d5:	5d                   	pop    ebp
c001a1d6:	c3                   	ret    
c001a1d7:	90                   	nop

c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1d8:	57                   	push   edi
c001a1d9:	56                   	push   esi
c001a1da:	53                   	push   ebx
c001a1db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1eb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1f5:	83 ff 01             	cmp    edi,0x1
c001a1f8:	75 3f                	jne    c001a239 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a1fa:	89 de                	mov    esi,ebx
c001a1fc:	0f b6 c0             	movzx  eax,al
c001a1ff:	c1 e0 10             	shl    eax,0x10
c001a202:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a208:	0f b6 c9             	movzx  ecx,cl
c001a20b:	c1 e1 08             	shl    ecx,0x8
c001a20e:	09 f0                	or     eax,esi
c001a210:	0f b6 d2             	movzx  edx,dl
c001a213:	c1 e2 0b             	shl    edx,0xb
c001a216:	09 c8                	or     eax,ecx
c001a218:	09 d0                	or     eax,edx
c001a21a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a21f:	0d 00 00 00 80       	or     eax,0x80000000
c001a224:	ef                   	out    dx,eax
c001a225:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a22a:	ed                   	in     eax,dx
c001a22b:	83 e3 02             	and    ebx,0x2
c001a22e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a235:	d3 e8                	shr    eax,cl
c001a237:	eb 44                	jmp    c001a27d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a239:	83 ff 02             	cmp    edi,0x2
c001a23c:	75 2d                	jne    c001a26b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a23e:	83 ec 0c             	sub    esp,0xc
c001a241:	0f b6 fb             	movzx  edi,bl
c001a244:	57                   	push   edi
c001a245:	0f b6 c9             	movzx  ecx,cl
c001a248:	51                   	push   ecx
c001a249:	0f b6 d2             	movzx  edx,dl
c001a24c:	52                   	push   edx
c001a24d:	0f b6 c0             	movzx  eax,al
c001a250:	50                   	push   eax
c001a251:	56                   	push   esi
c001a252:	e8 0b ff ff ff       	call   c001a162 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a257:	89 c2                	mov    edx,eax
c001a259:	ed                   	in     eax,dx
c001a25a:	83 e3 02             	and    ebx,0x2
c001a25d:	83 c4 20             	add    esp,0x20
c001a260:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a267:	d3 e8                	shr    eax,cl
c001a269:	eb 12                	jmp    c001a27d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a26b:	83 ec 0c             	sub    esp,0xc
c001a26e:	68 63 19 02 c0       	push   0xc0021963
c001a273:	e8 bf 65 ff ff       	call   c0010837 <KePanic(char const*)>
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	31 c0                	xor    eax,eax
c001a27d:	5b                   	pop    ebx
c001a27e:	5e                   	pop    esi
c001a27f:	5f                   	pop    edi
c001a280:	c3                   	ret    
c001a281:	90                   	nop

c001a282 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a282:	83 ec 18             	sub    esp,0x18
c001a285:	6a 00                	push   0x0
c001a287:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a28c:	50                   	push   eax
c001a28d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a292:	50                   	push   eax
c001a293:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a298:	50                   	push   eax
c001a299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a29d:	e8 36 ff ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2a2:	83 c4 2c             	add    esp,0x2c
c001a2a5:	c3                   	ret    

c001a2a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2a6:	83 ec 18             	sub    esp,0x18
c001a2a9:	6a 0e                	push   0xe
c001a2ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b0:	50                   	push   eax
c001a2b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b6:	50                   	push   eax
c001a2b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2bc:	50                   	push   eax
c001a2bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c1:	e8 12 ff ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c6:	83 c4 2c             	add    esp,0x2c
c001a2c9:	0f b6 c0             	movzx  eax,al
c001a2cc:	c3                   	ret    
c001a2cd:	90                   	nop

c001a2ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2ce:	55                   	push   ebp
c001a2cf:	57                   	push   edi
c001a2d0:	56                   	push   esi
c001a2d1:	53                   	push   ebx
c001a2d2:	83 ec 18             	sub    esp,0x18
c001a2d5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2da:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a2df:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a2e4:	6a 0a                	push   0xa
c001a2e6:	56                   	push   esi
c001a2e7:	55                   	push   ebp
c001a2e8:	57                   	push   edi
c001a2e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2ed:	e8 e6 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2f2:	83 c4 14             	add    esp,0x14
c001a2f5:	6a 0a                	push   0xa
c001a2f7:	89 c3                	mov    ebx,eax
c001a2f9:	56                   	push   esi
c001a2fa:	55                   	push   ebp
c001a2fb:	57                   	push   edi
c001a2fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a300:	e8 d3 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a305:	83 c4 2c             	add    esp,0x2c
c001a308:	0f b6 db             	movzx  ebx,bl
c001a30b:	25 00 ff 00 00       	and    eax,0xff00
c001a310:	09 d8                	or     eax,ebx
c001a312:	5b                   	pop    ebx
c001a313:	5e                   	pop    esi
c001a314:	5f                   	pop    edi
c001a315:	5d                   	pop    ebp
c001a316:	c3                   	ret    
c001a317:	90                   	nop

c001a318 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a318:	83 ec 18             	sub    esp,0x18
c001a31b:	6a 08                	push   0x8
c001a31d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a322:	50                   	push   eax
c001a323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a328:	50                   	push   eax
c001a329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a32e:	50                   	push   eax
c001a32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a333:	e8 a0 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a338:	83 c4 2c             	add    esp,0x2c
c001a33b:	0f b6 c4             	movzx  eax,ah
c001a33e:	c3                   	ret    
c001a33f:	90                   	nop

c001a340 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a340:	83 ec 18             	sub    esp,0x18
c001a343:	6a 08                	push   0x8
c001a345:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34a:	50                   	push   eax
c001a34b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a350:	50                   	push   eax
c001a351:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a356:	50                   	push   eax
c001a357:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a35b:	e8 78 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a360:	83 c4 2c             	add    esp,0x2c
c001a363:	c3                   	ret    

c001a364 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a364:	83 ec 18             	sub    esp,0x18
c001a367:	6a 3c                	push   0x3c
c001a369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36e:	50                   	push   eax
c001a36f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a374:	50                   	push   eax
c001a375:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37a:	50                   	push   eax
c001a37b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a37f:	e8 54 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a384:	83 c4 2c             	add    esp,0x2c
c001a387:	c3                   	ret    

c001a388 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a388:	83 ec 18             	sub    esp,0x18
c001a38b:	6a 18                	push   0x18
c001a38d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a392:	50                   	push   eax
c001a393:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a398:	50                   	push   eax
c001a399:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a39e:	50                   	push   eax
c001a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a3:	e8 30 fe ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3a8:	83 c4 2c             	add    esp,0x2c
c001a3ab:	0f b6 c4             	movzx  eax,ah
c001a3ae:	c3                   	ret    
c001a3af:	90                   	nop

c001a3b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3b0:	55                   	push   ebp
c001a3b1:	57                   	push   edi
c001a3b2:	56                   	push   esi
c001a3b3:	53                   	push   ebx
c001a3b4:	83 ec 28             	sub    esp,0x28
c001a3b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3bb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3c0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3c7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3cc:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3cf:	83 c3 10             	add    ebx,0x10
c001a3d2:	0f b6 c0             	movzx  eax,al
c001a3d5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3da:	50                   	push   eax
c001a3db:	51                   	push   ecx
c001a3dc:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a3e0:	57                   	push   edi
c001a3e1:	55                   	push   ebp
c001a3e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3e6:	e8 ed fd ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3eb:	83 c4 14             	add    esp,0x14
c001a3ee:	0f b6 db             	movzx  ebx,bl
c001a3f1:	53                   	push   ebx
c001a3f2:	89 c6                	mov    esi,eax
c001a3f4:	c1 e6 10             	shl    esi,0x10
c001a3f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3fb:	51                   	push   ecx
c001a3fc:	57                   	push   edi
c001a3fd:	55                   	push   ebp
c001a3fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a402:	e8 d1 fd ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a407:	83 c4 3c             	add    esp,0x3c
c001a40a:	0f b7 c0             	movzx  eax,ax
c001a40d:	5b                   	pop    ebx
c001a40e:	09 f0                	or     eax,esi
c001a410:	5e                   	pop    esi
c001a411:	5f                   	pop    edi
c001a412:	5d                   	pop    ebp
c001a413:	c3                   	ret    

c001a414 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a414:	55                   	push   ebp
c001a415:	57                   	push   edi
c001a416:	56                   	push   esi
c001a417:	53                   	push   ebx
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a41f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a423:	89 f5                	mov    ebp,esi
c001a425:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a429:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a42f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a433:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a437:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a43b:	83 f9 01             	cmp    ecx,0x1
c001a43e:	75 5d                	jne    c001a49d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a440:	0f b6 c8             	movzx  ecx,al
c001a443:	c1 e1 10             	shl    ecx,0x10
c001a446:	89 f0                	mov    eax,esi
c001a448:	25 fc 00 00 00       	and    eax,0xfc
c001a44d:	09 c1                	or     ecx,eax
c001a44f:	89 e8                	mov    eax,ebp
c001a451:	0f b6 c0             	movzx  eax,al
c001a454:	c1 e0 08             	shl    eax,0x8
c001a457:	0f b6 d2             	movzx  edx,dl
c001a45a:	c1 e2 0b             	shl    edx,0xb
c001a45d:	09 c1                	or     ecx,eax
c001a45f:	09 d1                	or     ecx,edx
c001a461:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a466:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a46c:	89 c8                	mov    eax,ecx
c001a46e:	ef                   	out    dx,eax
c001a46f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a474:	ed                   	in     eax,dx
c001a475:	0f b7 db             	movzx  ebx,bx
c001a478:	83 e6 02             	and    esi,0x2
c001a47b:	74 0a                	je     c001a487 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a47d:	0f b7 d0             	movzx  edx,ax
c001a480:	c1 e3 10             	shl    ebx,0x10
c001a483:	09 d3                	or     ebx,edx
c001a485:	eb 05                	jmp    c001a48c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a487:	66 31 c0             	xor    ax,ax
c001a48a:	09 c3                	or     ebx,eax
c001a48c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a491:	89 c8                	mov    eax,ecx
c001a493:	ef                   	out    dx,eax
c001a494:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a499:	89 d8                	mov    eax,ebx
c001a49b:	eb 41                	jmp    c001a4de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a49d:	83 f9 02             	cmp    ecx,0x2
c001a4a0:	75 45                	jne    c001a4e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a4a2:	83 ec 0c             	sub    esp,0xc
c001a4a5:	89 f1                	mov    ecx,esi
c001a4a7:	0f b6 f1             	movzx  esi,cl
c001a4aa:	89 e9                	mov    ecx,ebp
c001a4ac:	56                   	push   esi
c001a4ad:	0f b6 c9             	movzx  ecx,cl
c001a4b0:	51                   	push   ecx
c001a4b1:	0f b6 d2             	movzx  edx,dl
c001a4b4:	52                   	push   edx
c001a4b5:	0f b6 c0             	movzx  eax,al
c001a4b8:	50                   	push   eax
c001a4b9:	57                   	push   edi
c001a4ba:	e8 a3 fc ff ff       	call   c001a162 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4bf:	89 c2                	mov    edx,eax
c001a4c1:	ed                   	in     eax,dx
c001a4c2:	83 c4 20             	add    esp,0x20
c001a4c5:	0f b7 db             	movzx  ebx,bx
c001a4c8:	f6 c2 02             	test   dl,0x2
c001a4cb:	74 0c                	je     c001a4d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a4cd:	0f b7 c8             	movzx  ecx,ax
c001a4d0:	89 d8                	mov    eax,ebx
c001a4d2:	c1 e0 10             	shl    eax,0x10
c001a4d5:	09 c8                	or     eax,ecx
c001a4d7:	eb 05                	jmp    c001a4de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a4d9:	66 31 c0             	xor    ax,ax
c001a4dc:	09 d8                	or     eax,ebx
c001a4de:	ef                   	out    dx,eax
c001a4df:	83 c4 0c             	add    esp,0xc
c001a4e2:	5b                   	pop    ebx
c001a4e3:	5e                   	pop    esi
c001a4e4:	5f                   	pop    edi
c001a4e5:	5d                   	pop    ebp
c001a4e6:	c3                   	ret    
c001a4e7:	c7 44 24 20 63 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021963
c001a4ef:	83 c4 0c             	add    esp,0xc
c001a4f2:	5b                   	pop    ebx
c001a4f3:	5e                   	pop    esi
c001a4f4:	5f                   	pop    edi
c001a4f5:	5d                   	pop    ebp
c001a4f6:	e9 3c 63 ff ff       	jmp    c0010837 <KePanic(char const*)>
c001a4fb:	90                   	nop

c001a4fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a4fc:	55                   	push   ebp
c001a4fd:	57                   	push   edi
c001a4fe:	56                   	push   esi
c001a4ff:	53                   	push   ebx
c001a500:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a506:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a50d:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a514:	0f 85 bd 00 00 00    	jne    c001a5d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a51a:	83 ec 0c             	sub    esp,0xc
c001a51d:	68 14 01 00 00       	push   0x114
c001a522:	e8 60 d5 fe ff       	call   c0007a87 <malloc>
c001a527:	83 c4 0c             	add    esp,0xc
c001a52a:	89 c3                	mov    ebx,eax
c001a52c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a532:	68 69 19 02 c0       	push   0xc0021969
c001a537:	50                   	push   eax
c001a538:	e8 8f 09 ff ff       	call   c000aecc <File::File(char const*, Process*)>
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	85 db                	test   ebx,ebx
c001a542:	0f 84 67 02 00 00    	je     c001a7af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a548:	56                   	push   esi
c001a549:	56                   	push   esi
c001a54a:	6a 01                	push   0x1
c001a54c:	53                   	push   ebx
c001a54d:	e8 36 0a ff ff       	call   c000af88 <File::open(FileOpenMode)>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	85 c0                	test   eax,eax
c001a557:	0f 85 52 02 00 00    	jne    c001a7af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a55d:	52                   	push   edx
c001a55e:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a562:	50                   	push   eax
c001a563:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a567:	50                   	push   eax
c001a568:	53                   	push   ebx
c001a569:	e8 c6 0c ff ff       	call   c000b234 <File::stat(unsigned long long*, bool*)>
c001a56e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a572:	40                   	inc    eax
c001a573:	89 04 24             	mov    DWORD PTR [esp],eax
c001a576:	e8 0c d5 fe ff       	call   c0007a87 <malloc>
c001a57b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a57f:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a584:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a588:	59                   	pop    ecx
c001a589:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a58b:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a58f:	51                   	push   ecx
c001a590:	50                   	push   eax
c001a591:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a595:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a599:	53                   	push   ebx
c001a59a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a59d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a5a1:	83 c4 20             	add    esp,0x20
c001a5a4:	89 c8                	mov    eax,ecx
c001a5a6:	99                   	cdq    
c001a5a7:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5ab:	0f 85 fe 01 00 00    	jne    c001a7af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5b1:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5b5:	0f 85 f4 01 00 00    	jne    c001a7af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5bb:	83 ec 0c             	sub    esp,0xc
c001a5be:	53                   	push   ebx
c001a5bf:	e8 22 0a ff ff       	call   c000afe6 <File::close()>
c001a5c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5c8:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5cf:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a5dc:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a5e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5e6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a5ee:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a5f3:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a5fb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a600:	31 f6                	xor    esi,esi
c001a602:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a60e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a615:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a61d:	31 c9                	xor    ecx,ecx
c001a61f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a623:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a627:	0f 8e 82 01 00 00    	jle    c001a7af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a62d:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a630:	d4 40                	aam    0x40
c001a632:	d5 39                	aad    0x39
c001a634:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a638:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a63c:	d4 40                	aam    0x40
c001a63e:	d5 39                	aad    0x39
c001a640:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a644:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a648:	d4 40                	aam    0x40
c001a64a:	d5 39                	aad    0x39
c001a64c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a650:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a654:	d4 40                	aam    0x40
c001a656:	d5 39                	aad    0x39
c001a658:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a65c:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a660:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a664:	3c 56                	cmp    al,0x56
c001a666:	74 43                	je     c001a6ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a668:	d4 40                	aam    0x40
c001a66a:	d5 39                	aad    0x39
c001a66c:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a66f:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a673:	0f b6 c9             	movzx  ecx,cl
c001a676:	c1 e1 04             	shl    ecx,0x4
c001a679:	d4 40                	aam    0x40
c001a67b:	d5 39                	aad    0x39
c001a67d:	83 e8 30             	sub    eax,0x30
c001a680:	0f b6 c0             	movzx  eax,al
c001a683:	09 c1                	or     ecx,eax
c001a685:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a689:	c1 e1 04             	shl    ecx,0x4
c001a68c:	d4 40                	aam    0x40
c001a68e:	d5 39                	aad    0x39
c001a690:	83 e8 30             	sub    eax,0x30
c001a693:	0f b6 c0             	movzx  eax,al
c001a696:	09 c1                	or     ecx,eax
c001a698:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a69c:	c1 e1 04             	shl    ecx,0x4
c001a69f:	d4 40                	aam    0x40
c001a6a1:	d5 39                	aad    0x39
c001a6a3:	83 e8 30             	sub    eax,0x30
c001a6a6:	0f b6 c0             	movzx  eax,al
c001a6a9:	09 c1                	or     ecx,eax
c001a6ab:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a6af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a6b3:	3c 58                	cmp    al,0x58
c001a6b5:	74 47                	je     c001a6fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a6b7:	d4 40                	aam    0x40
c001a6b9:	d5 39                	aad    0x39
c001a6bb:	8d 50 d0             	lea    edx,[eax-0x30]
c001a6be:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a6c2:	0f b6 d2             	movzx  edx,dl
c001a6c5:	c1 e2 04             	shl    edx,0x4
c001a6c8:	d4 40                	aam    0x40
c001a6ca:	d5 39                	aad    0x39
c001a6cc:	83 e8 30             	sub    eax,0x30
c001a6cf:	0f b6 c0             	movzx  eax,al
c001a6d2:	09 c2                	or     edx,eax
c001a6d4:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a6d8:	c1 e2 04             	shl    edx,0x4
c001a6db:	d4 40                	aam    0x40
c001a6dd:	d5 39                	aad    0x39
c001a6df:	83 e8 30             	sub    eax,0x30
c001a6e2:	0f b6 c0             	movzx  eax,al
c001a6e5:	09 c2                	or     edx,eax
c001a6e7:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a6eb:	c1 e2 04             	shl    edx,0x4
c001a6ee:	d4 40                	aam    0x40
c001a6f0:	d5 39                	aad    0x39
c001a6f2:	83 e8 30             	sub    eax,0x30
c001a6f5:	0f b6 c0             	movzx  eax,al
c001a6f8:	09 c2                	or     edx,eax
c001a6fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6fe:	83 c6 10             	add    esi,0x10
c001a701:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a705:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a709:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a70d:	83 fa 0a             	cmp    edx,0xa
c001a710:	74 0b                	je     c001a71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a712:	47                   	inc    edi
c001a713:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a717:	75 19                	jne    c001a732 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a719:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a71d:	31 c0                	xor    eax,eax
c001a71f:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a724:	0f 94 c0             	sete   al
c001a727:	01 c6                	add    esi,eax
c001a729:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a72e:	75 0b                	jne    c001a73b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a730:	eb 14                	jmp    c001a746 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a732:	46                   	inc    esi
c001a733:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a736:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a739:	eb ca                	jmp    c001a705 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a73b:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a740:	0f 85 dd fe ff ff    	jne    c001a623 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a746:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a74b:	74 10                	je     c001a75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a74d:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a752:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a757:	0f 85 c6 fe ff ff    	jne    c001a623 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a75d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a761:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a765:	83 e8 30             	sub    eax,0x30
c001a768:	83 ef 30             	sub    edi,0x30
c001a76b:	c1 e0 04             	shl    eax,0x4
c001a76e:	09 f8                	or     eax,edi
c001a770:	0f b6 c0             	movzx  eax,al
c001a773:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a777:	0f 85 a6 fe ff ff    	jne    c001a623 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a781:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a785:	83 e8 30             	sub    eax,0x30
c001a788:	83 ef 30             	sub    edi,0x30
c001a78b:	c1 e0 04             	shl    eax,0x4
c001a78e:	09 f8                	or     eax,edi
c001a790:	0f b6 c0             	movzx  eax,al
c001a793:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a797:	0f 85 86 fe ff ff    	jne    c001a623 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a79d:	50                   	push   eax
c001a79e:	50                   	push   eax
c001a79f:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7a3:	50                   	push   eax
c001a7a4:	55                   	push   ebp
c001a7a5:	e8 86 5e fe ff       	call   c0000630 <strcpy>
c001a7aa:	83 c4 10             	add    esp,0x10
c001a7ad:	eb 06                	jmp    c001a7b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a7af:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a7b3:	31 ed                	xor    ebp,ebp
c001a7b5:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7bb:	89 e8                	mov    eax,ebp
c001a7bd:	5b                   	pop    ebx
c001a7be:	5e                   	pop    esi
c001a7bf:	5f                   	pop    edi
c001a7c0:	5d                   	pop    ebp
c001a7c1:	c3                   	ret    

c001a7c2 <PCI::checkBus(unsigned char)>:
c001a7c2:	56                   	push   esi
c001a7c3:	53                   	push   ebx
c001a7c4:	31 db                	xor    ebx,ebx
c001a7c6:	51                   	push   ecx
c001a7c7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7cc:	52                   	push   edx
c001a7cd:	53                   	push   ebx
c001a7ce:	43                   	inc    ebx
c001a7cf:	56                   	push   esi
c001a7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7d4:	e8 03 03 00 00       	call   c001aadc <PCI::checkDevice(unsigned char, unsigned char)>
c001a7d9:	83 c4 10             	add    esp,0x10
c001a7dc:	83 fb 20             	cmp    ebx,0x20
c001a7df:	75 eb                	jne    c001a7cc <PCI::checkBus(unsigned char)+0xa>
c001a7e1:	58                   	pop    eax
c001a7e2:	5b                   	pop    ebx
c001a7e3:	5e                   	pop    esi
c001a7e4:	c3                   	ret    
c001a7e5:	90                   	nop

c001a7e6 <PCI::foundDevice(PCIDeviceInfo)>:
c001a7e6:	55                   	push   ebp
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 1c             	sub    esp,0x1c
c001a7ed:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7f2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7f6:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7fb:	0f 84 57 01 00 00    	je     c001a958 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a801:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a806:	66 3d 06 04          	cmp    ax,0x406
c001a80a:	75 2c                	jne    c001a838 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a80c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a811:	50                   	push   eax
c001a812:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a817:	50                   	push   eax
c001a818:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a81d:	50                   	push   eax
c001a81e:	53                   	push   ebx
c001a81f:	e8 64 fb ff ff       	call   c001a388 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a824:	0f b6 c0             	movzx  eax,al
c001a827:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a82b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a82f:	83 c4 2c             	add    esp,0x2c
c001a832:	5b                   	pop    ebx
c001a833:	5e                   	pop    esi
c001a834:	5f                   	pop    edi
c001a835:	5d                   	pop    ebp
c001a836:	eb 8a                	jmp    c001a7c2 <PCI::checkBus(unsigned char)>
c001a838:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a83c:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a842:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a846:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a84a:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a84f:	85 d2                	test   edx,edx
c001a851:	74 36                	je     c001a889 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a853:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a856:	85 c9                	test   ecx,ecx
c001a858:	74 2b                	je     c001a885 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a85a:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a860:	31 ee                	xor    esi,ebp
c001a862:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a868:	75 1b                	jne    c001a885 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a86a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a86e:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a874:	75 0f                	jne    c001a885 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a876:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a87d:	39 f9                	cmp    ecx,edi
c001a87f:	0f 84 d3 00 00 00    	je     c001a958 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a885:	8b 12                	mov    edx,DWORD PTR [edx]
c001a887:	eb c6                	jmp    c001a84f <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a889:	3d 01 06 00 00       	cmp    eax,0x601
c001a88e:	75 19                	jne    c001a8a9 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	68 64 01 00 00       	push   0x164
c001a898:	e8 ea d1 fe ff       	call   c0007a87 <malloc>
c001a89d:	89 c5                	mov    ebp,eax
c001a89f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8a2:	e8 97 0e 00 00       	call   c001b73e <SATABus::SATABus()>
c001a8a7:	eb 1e                	jmp    c001a8c7 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a8a9:	3d 01 01 00 00       	cmp    eax,0x101
c001a8ae:	75 62                	jne    c001a912 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a8b0:	83 ec 0c             	sub    esp,0xc
c001a8b3:	68 70 02 00 00       	push   0x270
c001a8b8:	e8 ca d1 fe ff       	call   c0007a87 <malloc>
c001a8bd:	89 c5                	mov    ebp,eax
c001a8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8c2:	e8 e5 02 00 00       	call   c001abac <IDE::IDE()>
c001a8c7:	5f                   	pop    edi
c001a8c8:	58                   	pop    eax
c001a8c9:	55                   	push   ebp
c001a8ca:	53                   	push   ebx
c001a8cb:	e8 aa 14 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c001a8d0:	83 ec 1c             	sub    esp,0x1c
c001a8d3:	b9 09 00 00 00       	mov    ecx,0x9
c001a8d8:	fc                   	cld    
c001a8d9:	89 e7                	mov    edi,esp
c001a8db:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a8df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8e1:	55                   	push   ebp
c001a8e2:	e8 dd 13 ff ff       	call   c000bcc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001a8e7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8ea:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a8ee:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8f6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a8fe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a906:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a909:	83 c4 4c             	add    esp,0x4c
c001a90c:	5b                   	pop    ebx
c001a90d:	5e                   	pop    esi
c001a90e:	5f                   	pop    edi
c001a90f:	5d                   	pop    ebp
c001a910:	ff e0                	jmp    eax
c001a912:	83 ec 0c             	sub    esp,0xc
c001a915:	68 58 01 00 00       	push   0x158
c001a91a:	e8 68 d1 fe ff       	call   c0007a87 <malloc>
c001a91f:	89 c5                	mov    ebp,eax
c001a921:	58                   	pop    eax
c001a922:	5a                   	pop    edx
c001a923:	68 82 19 02 c0       	push   0xc0021982
c001a928:	55                   	push   ebp
c001a929:	e8 ea 16 ff ff       	call   c000c018 <DriverlessDevice::DriverlessDevice(char const*)>
c001a92e:	59                   	pop    ecx
c001a92f:	5e                   	pop    esi
c001a930:	55                   	push   ebp
c001a931:	53                   	push   ebx
c001a932:	e8 43 14 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	b9 09 00 00 00       	mov    ecx,0x9
c001a93f:	fc                   	cld    
c001a940:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a944:	89 fe                	mov    esi,edi
c001a946:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a948:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a94c:	83 c4 1c             	add    esp,0x1c
c001a94f:	5b                   	pop    ebx
c001a950:	5e                   	pop    esi
c001a951:	5f                   	pop    edi
c001a952:	5d                   	pop    ebp
c001a953:	e9 6c 13 ff ff       	jmp    c000bcc4 <Device::preOpenPCI(PCIDeviceInfo)>
c001a958:	83 c4 1c             	add    esp,0x1c
c001a95b:	5b                   	pop    ebx
c001a95c:	5e                   	pop    esi
c001a95d:	5f                   	pop    edi
c001a95e:	5d                   	pop    ebp
c001a95f:	c3                   	ret    

c001a960 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a960:	55                   	push   ebp
c001a961:	57                   	push   edi
c001a962:	56                   	push   esi
c001a963:	53                   	push   ebx
c001a964:	83 ec 68             	sub    esp,0x68
c001a967:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a96e:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a972:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a976:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a97d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a981:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a988:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a98c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a991:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a996:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a99b:	6a 0c                	push   0xc
c001a99d:	57                   	push   edi
c001a99e:	53                   	push   ebx
c001a99f:	56                   	push   esi
c001a9a0:	55                   	push   ebp
c001a9a1:	e8 32 f8 ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9a6:	83 c4 20             	add    esp,0x20
c001a9a9:	57                   	push   edi
c001a9aa:	53                   	push   ebx
c001a9ab:	56                   	push   esi
c001a9ac:	55                   	push   ebp
c001a9ad:	e8 1c f9 ff ff       	call   c001a2ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9b2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9b7:	57                   	push   edi
c001a9b8:	53                   	push   ebx
c001a9b9:	56                   	push   esi
c001a9ba:	55                   	push   ebp
c001a9bb:	e8 a4 f9 ff ff       	call   c001a364 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9c0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9c4:	83 c4 14             	add    esp,0x14
c001a9c7:	6a 3c                	push   0x3c
c001a9c9:	57                   	push   edi
c001a9ca:	53                   	push   ebx
c001a9cb:	56                   	push   esi
c001a9cc:	55                   	push   ebp
c001a9cd:	e8 06 f8 ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9d2:	0f b6 c4             	movzx  eax,ah
c001a9d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9d9:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a9dd:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a9e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9e6:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a9ec:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a9f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9f6:	83 c4 20             	add    esp,0x20
c001a9f9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9fe:	74 30                	je     c001aa30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa00:	31 c0                	xor    eax,eax
c001aa02:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa06:	7e 28                	jle    c001aa30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa08:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa10:	39 cb                	cmp    ebx,ecx
c001aa12:	75 19                	jne    c001aa2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa14:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa1c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa20:	75 0b                	jne    c001aa2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa22:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa29:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa2d:	40                   	inc    eax
c001aa2e:	eb d2                	jmp    c001aa02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa30:	31 d2                	xor    edx,edx
c001aa32:	83 ec 0c             	sub    esp,0xc
c001aa35:	57                   	push   edi
c001aa36:	53                   	push   ebx
c001aa37:	56                   	push   esi
c001aa38:	52                   	push   edx
c001aa39:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa3d:	55                   	push   ebp
c001aa3e:	e8 6d f9 ff ff       	call   c001a3b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa43:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa47:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa4b:	42                   	inc    edx
c001aa4c:	83 c4 20             	add    esp,0x20
c001aa4f:	83 fa 06             	cmp    edx,0x6
c001aa52:	75 de                	jne    c001aa32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa5c:	c1 e2 08             	shl    edx,0x8
c001aa5f:	83 ec 0c             	sub    esp,0xc
c001aa62:	0f b6 c4             	movzx  eax,ah
c001aa65:	09 d0                	or     eax,edx
c001aa67:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa6c:	6a 02                	push   0x2
c001aa6e:	57                   	push   edi
c001aa6f:	53                   	push   ebx
c001aa70:	56                   	push   esi
c001aa71:	55                   	push   ebp
c001aa72:	e8 61 f7 ff ff       	call   c001a1d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa77:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa7c:	83 c4 20             	add    esp,0x20
c001aa7f:	57                   	push   edi
c001aa80:	53                   	push   ebx
c001aa81:	56                   	push   esi
c001aa82:	55                   	push   ebp
c001aa83:	e8 90 f8 ff ff       	call   c001a318 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa88:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa8c:	57                   	push   edi
c001aa8d:	53                   	push   ebx
c001aa8e:	56                   	push   esi
c001aa8f:	55                   	push   ebp
c001aa90:	e8 ed f7 ff ff       	call   c001a282 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa95:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa9a:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa9e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aaa2:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aaa6:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aaaa:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aaae:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aab2:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aab6:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aaba:	b9 09 00 00 00       	mov    ecx,0x9
c001aabf:	83 ec 0c             	sub    esp,0xc
c001aac2:	fc                   	cld    
c001aac3:	89 e7                	mov    edi,esp
c001aac5:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aac9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aacb:	55                   	push   ebp
c001aacc:	e8 15 fd ff ff       	call   c001a7e6 <PCI::foundDevice(PCIDeviceInfo)>
c001aad1:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aad7:	5b                   	pop    ebx
c001aad8:	5e                   	pop    esi
c001aad9:	5f                   	pop    edi
c001aada:	5d                   	pop    ebp
c001aadb:	c3                   	ret    

c001aadc <PCI::checkDevice(unsigned char, unsigned char)>:
c001aadc:	55                   	push   ebp
c001aadd:	57                   	push   edi
c001aade:	56                   	push   esi
c001aadf:	53                   	push   ebx
c001aae0:	83 ec 0c             	sub    esp,0xc
c001aae3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aae8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aaec:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aaf1:	6a 00                	push   0x0
c001aaf3:	56                   	push   esi
c001aaf4:	57                   	push   edi
c001aaf5:	55                   	push   ebp
c001aaf6:	e8 87 f7 ff ff       	call   c001a282 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aafb:	6a 00                	push   0x0
c001aafd:	56                   	push   esi
c001aafe:	57                   	push   edi
c001aaff:	55                   	push   ebp
c001ab00:	e8 5b fe ff ff       	call   c001a960 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab05:	83 c4 20             	add    esp,0x20
c001ab08:	6a 00                	push   0x0
c001ab0a:	56                   	push   esi
c001ab0b:	57                   	push   edi
c001ab0c:	55                   	push   ebp
c001ab0d:	e8 94 f7 ff ff       	call   c001a2a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	a8 80                	test   al,0x80
c001ab17:	74 2d                	je     c001ab46 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab19:	bb 01 00 00 00       	mov    ebx,0x1
c001ab1e:	53                   	push   ebx
c001ab1f:	56                   	push   esi
c001ab20:	57                   	push   edi
c001ab21:	55                   	push   ebp
c001ab22:	e8 5b f7 ff ff       	call   c001a282 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab27:	0f b7 c0             	movzx  eax,ax
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab32:	74 0c                	je     c001ab40 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab34:	53                   	push   ebx
c001ab35:	56                   	push   esi
c001ab36:	57                   	push   edi
c001ab37:	55                   	push   ebp
c001ab38:	e8 23 fe ff ff       	call   c001a960 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab3d:	83 c4 10             	add    esp,0x10
c001ab40:	43                   	inc    ebx
c001ab41:	83 fb 08             	cmp    ebx,0x8
c001ab44:	75 d8                	jne    c001ab1e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab46:	83 c4 0c             	add    esp,0xc
c001ab49:	5b                   	pop    ebx
c001ab4a:	5e                   	pop    esi
c001ab4b:	5f                   	pop    edi
c001ab4c:	5d                   	pop    ebp
c001ab4d:	c3                   	ret    

c001ab4e <PCI::detect()>:
c001ab4e:	56                   	push   esi
c001ab4f:	53                   	push   ebx
c001ab50:	53                   	push   ebx
c001ab51:	31 db                	xor    ebx,ebx
c001ab53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab57:	6a 00                	push   0x0
c001ab59:	6a 00                	push   0x0
c001ab5b:	6a 00                	push   0x0
c001ab5d:	56                   	push   esi
c001ab5e:	e8 43 f7 ff ff       	call   c001a2a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	a8 80                	test   al,0x80
c001ab68:	75 21                	jne    c001ab8b <PCI::detect()+0x3d>
c001ab6a:	51                   	push   ecx
c001ab6b:	51                   	push   ecx
c001ab6c:	6a 00                	push   0x0
c001ab6e:	56                   	push   esi
c001ab6f:	e8 4e fc ff ff       	call   c001a7c2 <PCI::checkBus(unsigned char)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	eb 2a                	jmp    c001aba3 <PCI::detect()+0x55>
c001ab79:	52                   	push   edx
c001ab7a:	52                   	push   edx
c001ab7b:	53                   	push   ebx
c001ab7c:	43                   	inc    ebx
c001ab7d:	56                   	push   esi
c001ab7e:	e8 3f fc ff ff       	call   c001a7c2 <PCI::checkBus(unsigned char)>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	83 fb 08             	cmp    ebx,0x8
c001ab89:	74 18                	je     c001aba3 <PCI::detect()+0x55>
c001ab8b:	53                   	push   ebx
c001ab8c:	6a 00                	push   0x0
c001ab8e:	6a 00                	push   0x0
c001ab90:	56                   	push   esi
c001ab91:	e8 ec f6 ff ff       	call   c001a282 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab96:	0f b7 c0             	movzx  eax,ax
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	3d ff ff 00 00       	cmp    eax,0xffff
c001aba1:	74 d6                	je     c001ab79 <PCI::detect()+0x2b>
c001aba3:	58                   	pop    eax
c001aba4:	5b                   	pop    ebx
c001aba5:	5e                   	pop    esi
c001aba6:	c3                   	ret    
c001aba7:	90                   	nop

c001aba8 <IDE::close(int, int, void*)>:
c001aba8:	83 c8 ff             	or     eax,0xffffffff
c001abab:	c3                   	ret    

c001abac <IDE::IDE()>:
c001abac:	83 ec 0c             	sub    esp,0xc
c001abaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb3:	83 ec 08             	sub    esp,0x8
c001abb6:	68 c8 19 02 c0       	push   0xc00219c8
c001abbb:	50                   	push   eax
c001abbc:	e8 fb 14 ff ff       	call   c000c0bc <HardDiskController::HardDiskController(char const*)>
c001abc1:	83 c4 10             	add    esp,0x10
c001abc4:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c001abc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcd:	89 10                	mov    DWORD PTR [eax],edx
c001abcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001abda:	90                   	nop
c001abdb:	83 c4 0c             	add    esp,0xc
c001abde:	c3                   	ret    
c001abdf:	90                   	nop

c001abe0 <IDE::prepareInterrupt(unsigned char)>:
c001abe0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abe5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abe9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001abf1:	c3                   	ret    

c001abf2 <selectDrive(unsigned char, unsigned char)>:
c001abf2:	c3                   	ret    
c001abf3:	90                   	nop

c001abf4 <IDE::getBase(unsigned char)>:
c001abf4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001abf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abfd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac05:	c3                   	ret    

c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac06:	55                   	push   ebp
c001ac07:	57                   	push   edi
c001ac08:	56                   	push   esi
c001ac09:	53                   	push   ebx
c001ac0a:	83 ec 1c             	sub    esp,0x1c
c001ac0d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac1d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac20:	80 f9 03             	cmp    cl,0x3
c001ac23:	77 4f                	ja     c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac25:	0f b6 fa             	movzx  edi,dl
c001ac28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac2c:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ac2f:	0f b6 db             	movzx  ebx,bl
c001ac32:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ac37:	80 ca 80             	or     dl,0x80
c001ac3a:	52                   	push   edx
c001ac3b:	6a 0c                	push   0xc
c001ac3d:	57                   	push   edi
c001ac3e:	56                   	push   esi
c001ac3f:	e8 c2 ff ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac44:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac4d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac51:	ee                   	out    dx,al
c001ac52:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac57:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ac5b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac63:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac6b:	83 c4 2c             	add    esp,0x2c
c001ac6e:	5b                   	pop    ebx
c001ac6f:	5e                   	pop    esi
c001ac70:	5f                   	pop    edi
c001ac71:	5d                   	pop    ebp
c001ac72:	eb 92                	jmp    c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac74:	0f b6 cb             	movzx  ecx,bl
c001ac77:	83 f9 07             	cmp    ecx,0x7
c001ac7a:	77 12                	ja     c001ac8e <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac7c:	0f b6 d2             	movzx  edx,dl
c001ac7f:	0f b6 db             	movzx  ebx,bl
c001ac82:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ac8a:	01 da                	add    edx,ebx
c001ac8c:	eb 2f                	jmp    c001acbd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac8e:	83 f9 0d             	cmp    ecx,0xd
c001ac91:	77 13                	ja     c001aca6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac93:	0f b6 d2             	movzx  edx,dl
c001ac96:	0f b6 db             	movzx  ebx,bl
c001ac99:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001aca0:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001aca4:	eb 17                	jmp    c001acbd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001aca6:	83 f9 15             	cmp    ecx,0x15
c001aca9:	77 13                	ja     c001acbe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001acab:	0f b6 d2             	movzx  edx,dl
c001acae:	0f b6 db             	movzx  ebx,bl
c001acb1:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001acb9:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001acbd:	ee                   	out    dx,al
c001acbe:	83 c4 1c             	add    esp,0x1c
c001acc1:	5b                   	pop    ebx
c001acc2:	5e                   	pop    esi
c001acc3:	5f                   	pop    edi
c001acc4:	5d                   	pop    ebp
c001acc5:	c3                   	ret    

c001acc6 <IDE::read(unsigned char, unsigned char)>:
c001acc6:	55                   	push   ebp
c001acc7:	57                   	push   edi
c001acc8:	56                   	push   esi
c001acc9:	53                   	push   ebx
c001acca:	83 ec 1c             	sub    esp,0x1c
c001accd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acd5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001acd9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001acdc:	3c 03                	cmp    al,0x3
c001acde:	77 40                	ja     c001ad20 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ace0:	0f b6 f9             	movzx  edi,cl
c001ace3:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ace6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aceb:	0c 80                	or     al,0x80
c001aced:	50                   	push   eax
c001acee:	6a 0c                	push   0xc
c001acf0:	57                   	push   edi
c001acf1:	56                   	push   esi
c001acf2:	e8 0f ff ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acf7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001acfc:	0f b6 d3             	movzx  edx,bl
c001acff:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad03:	ec                   	in     al,dx
c001ad04:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ad09:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ad0d:	52                   	push   edx
c001ad0e:	6a 0c                	push   0xc
c001ad10:	57                   	push   edi
c001ad11:	56                   	push   esi
c001ad12:	e8 ef fe ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad17:	83 c4 20             	add    esp,0x20
c001ad1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad1e:	eb 4c                	jmp    c001ad6c <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad20:	0f b6 d3             	movzx  edx,bl
c001ad23:	83 fa 07             	cmp    edx,0x7
c001ad26:	77 12                	ja     c001ad3a <IDE::read(unsigned char, unsigned char)+0x74>
c001ad28:	0f b6 c9             	movzx  ecx,cl
c001ad2b:	0f b6 d3             	movzx  edx,bl
c001ad2e:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ad36:	01 c2                	add    edx,eax
c001ad38:	eb 31                	jmp    c001ad6b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad3a:	83 fa 0d             	cmp    edx,0xd
c001ad3d:	77 13                	ja     c001ad52 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ad3f:	0f b6 c9             	movzx  ecx,cl
c001ad42:	0f b6 d3             	movzx  edx,bl
c001ad45:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ad4c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad50:	eb 19                	jmp    c001ad6b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad52:	31 c0                	xor    eax,eax
c001ad54:	83 fa 15             	cmp    edx,0x15
c001ad57:	77 13                	ja     c001ad6c <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad59:	0f b6 c9             	movzx  ecx,cl
c001ad5c:	0f b6 d3             	movzx  edx,bl
c001ad5f:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ad67:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad6b:	ec                   	in     al,dx
c001ad6c:	83 c4 1c             	add    esp,0x1c
c001ad6f:	5b                   	pop    ebx
c001ad70:	5e                   	pop    esi
c001ad71:	5f                   	pop    edi
c001ad72:	5d                   	pop    ebp
c001ad73:	c3                   	ret    

c001ad74 <IDE::waitInterrupt(unsigned char)>:
c001ad74:	55                   	push   ebp
c001ad75:	57                   	push   edi
c001ad76:	56                   	push   esi
c001ad77:	53                   	push   ebx
c001ad78:	31 db                	xor    ebx,ebx
c001ad7a:	83 ec 0c             	sub    esp,0xc
c001ad7d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad86:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad8e:	89 e8                	mov    eax,ebp
c001ad90:	84 c0                	test   al,al
c001ad92:	75 30                	jne    c001adc4 <IDE::waitInterrupt(unsigned char)+0x50>
c001ad94:	50                   	push   eax
c001ad95:	6a 0c                	push   0xc
c001ad97:	56                   	push   esi
c001ad98:	57                   	push   edi
c001ad99:	e8 28 ff ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001ad9e:	83 c4 10             	add    esp,0x10
c001ada1:	a8 01                	test   al,0x1
c001ada3:	75 27                	jne    c001adcc <IDE::waitInterrupt(unsigned char)+0x58>
c001ada5:	f6 c3 04             	test   bl,0x4
c001ada8:	75 12                	jne    c001adbc <IDE::waitInterrupt(unsigned char)+0x48>
c001adaa:	83 fb 32             	cmp    ebx,0x32
c001adad:	7e 0d                	jle    c001adbc <IDE::waitInterrupt(unsigned char)+0x48>
c001adaf:	83 ec 0c             	sub    esp,0xc
c001adb2:	6a 64                	push   0x64
c001adb4:	e8 a3 a5 ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	83 fb 3c             	cmp    ebx,0x3c
c001adbf:	74 0b                	je     c001adcc <IDE::waitInterrupt(unsigned char)+0x58>
c001adc1:	43                   	inc    ebx
c001adc2:	eb c2                	jmp    c001ad86 <IDE::waitInterrupt(unsigned char)+0x12>
c001adc4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001adcc:	83 c4 0c             	add    esp,0xc
c001adcf:	89 e8                	mov    eax,ebp
c001add1:	5b                   	pop    ebx
c001add2:	5e                   	pop    esi
c001add3:	5f                   	pop    edi
c001add4:	5d                   	pop    ebp
c001add5:	c3                   	ret    

c001add6 <ideChannel0IRQHandler(regs*, void*)>:
c001add6:	83 ec 10             	sub    esp,0x10
c001add9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001addd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ade4:	6a 07                	push   0x7
c001ade6:	6a 00                	push   0x0
c001ade8:	50                   	push   eax
c001ade9:	e8 d8 fe ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001adee:	83 c4 1c             	add    esp,0x1c
c001adf1:	c3                   	ret    

c001adf2 <ideChannel1IRQHandler(regs*, void*)>:
c001adf2:	83 ec 10             	sub    esp,0x10
c001adf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ae00:	6a 07                	push   0x7
c001ae02:	6a 01                	push   0x1
c001ae04:	50                   	push   eax
c001ae05:	e8 bc fe ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001ae0a:	83 c4 1c             	add    esp,0x1c
c001ae0d:	c3                   	ret    

c001ae0e <IDE::enableIRQs(unsigned char, bool)>:
c001ae0e:	57                   	push   edi
c001ae0f:	b8 02 00 00 00       	mov    eax,0x2
c001ae14:	56                   	push   esi
c001ae15:	53                   	push   ebx
c001ae16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae1e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae23:	74 02                	je     c001ae27 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae25:	31 c0                	xor    eax,eax
c001ae27:	0f b6 db             	movzx  ebx,bl
c001ae2a:	bf 04 00 00 00       	mov    edi,0x4
c001ae2f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae36:	50                   	push   eax
c001ae37:	6a 0c                	push   0xc
c001ae39:	53                   	push   ebx
c001ae3a:	56                   	push   esi
c001ae3b:	e8 c6 fd ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae40:	83 c4 10             	add    esp,0x10
c001ae43:	50                   	push   eax
c001ae44:	6a 0c                	push   0xc
c001ae46:	53                   	push   ebx
c001ae47:	56                   	push   esi
c001ae48:	e8 79 fe ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	4f                   	dec    edi
c001ae51:	75 f0                	jne    c001ae43 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae53:	5b                   	pop    ebx
c001ae54:	5e                   	pop    esi
c001ae55:	5f                   	pop    edi
c001ae56:	c3                   	ret    
c001ae57:	90                   	nop

c001ae58 <IDE::open(int, int, void*)>:
c001ae58:	55                   	push   ebp
c001ae59:	57                   	push   edi
c001ae5a:	56                   	push   esi
c001ae5b:	53                   	push   ebx
c001ae5c:	83 ec 1c             	sub    esp,0x1c
c001ae5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae63:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae6c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae75:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae7c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae83:	0f 85 dc 02 00 00    	jne    c001b165 <IDE::open(int, int, void*)+0x30d>
c001ae89:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae8f:	88 04 24             	mov    BYTE PTR [esp],al
c001ae92:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ae95:	83 e0 7f             	and    eax,0x7f
c001ae98:	83 f8 05             	cmp    eax,0x5
c001ae9b:	74 05                	je     c001aea2 <IDE::open(int, int, void*)+0x4a>
c001ae9d:	83 f8 0f             	cmp    eax,0xf
c001aea0:	75 32                	jne    c001aed4 <IDE::open(int, int, void*)+0x7c>
c001aea2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001aea8:	83 e0 fc             	and    eax,0xfffffffc
c001aeab:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aeb2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001aeb8:	83 e0 fc             	and    eax,0xfffffffc
c001aebb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aec2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001aec8:	83 e0 fc             	and    eax,0xfffffffc
c001aecb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aed2:	eb 14                	jmp    c001aee8 <IDE::open(int, int, void*)+0x90>
c001aed4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aede:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001aee8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001aeef:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aef6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aefa:	89 c6                	mov    esi,eax
c001aefc:	89 e8                	mov    eax,ebp
c001aefe:	bf f8 0c 00 00       	mov    edi,0xcf8
c001af03:	c1 e6 10             	shl    esi,0x10
c001af06:	89 fa                	mov    edx,edi
c001af08:	c1 e0 0b             	shl    eax,0xb
c001af0b:	09 f0                	or     eax,esi
c001af0d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001af14:	c1 e6 08             	shl    esi,0x8
c001af17:	09 c6                	or     esi,eax
c001af19:	89 f0                	mov    eax,esi
c001af1b:	0d 08 00 00 80       	or     eax,0x80000008
c001af20:	ef                   	out    dx,eax
c001af21:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001af26:	89 ca                	mov    edx,ecx
c001af28:	ed                   	in     eax,dx
c001af29:	c1 e8 10             	shr    eax,0x10
c001af2c:	3d ff ff 00 00       	cmp    eax,0xffff
c001af31:	0f 84 f7 00 00 00    	je     c001b02e <IDE::open(int, int, void*)+0x1d6>
c001af37:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001af3d:	89 fa                	mov    edx,edi
c001af3f:	89 f0                	mov    eax,esi
c001af41:	ef                   	out    dx,eax
c001af42:	b0 fe                	mov    al,0xfe
c001af44:	89 ca                	mov    edx,ecx
c001af46:	ee                   	out    dx,al
c001af47:	89 f0                	mov    eax,esi
c001af49:	89 fa                	mov    edx,edi
c001af4b:	ef                   	out    dx,eax
c001af4c:	89 ca                	mov    edx,ecx
c001af4e:	ed                   	in     eax,dx
c001af4f:	3c fe                	cmp    al,0xfe
c001af51:	0f 85 a9 00 00 00    	jne    c001b000 <IDE::open(int, int, void*)+0x1a8>
c001af57:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af5d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af64:	74 33                	je     c001af99 <IDE::open(int, int, void*)+0x141>
c001af66:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af6c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af70:	40                   	inc    eax
c001af71:	83 ec 0c             	sub    esp,0xc
c001af74:	0f b6 c0             	movzx  eax,al
c001af77:	50                   	push   eax
c001af78:	55                   	push   ebp
c001af79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af7d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af83:	51                   	push   ecx
c001af84:	e8 77 3d ff ff       	call   c000ed00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af89:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af8e:	83 c4 1c             	add    esp,0x1c
c001af91:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af97:	eb 0a                	jmp    c001afa3 <IDE::open(int, int, void*)+0x14b>
c001af99:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001afa3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001afaa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001afb1:	c1 e1 10             	shl    ecx,0x10
c001afb4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afb9:	c1 e0 08             	shl    eax,0x8
c001afbc:	89 fa                	mov    edx,edi
c001afbe:	09 c1                	or     ecx,eax
c001afc0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001afc7:	c1 e0 0b             	shl    eax,0xb
c001afca:	09 c1                	or     ecx,eax
c001afcc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afd2:	89 c8                	mov    eax,ecx
c001afd4:	ef                   	out    dx,eax
c001afd5:	be fc 0c 00 00       	mov    esi,0xcfc
c001afda:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001afe0:	89 f2                	mov    edx,esi
c001afe2:	ee                   	out    dx,al
c001afe3:	89 c8                	mov    eax,ecx
c001afe5:	89 fa                	mov    edx,edi
c001afe7:	ef                   	out    dx,eax
c001afe8:	89 f2                	mov    edx,esi
c001afea:	ed                   	in     eax,dx
c001afeb:	0f b6 c0             	movzx  eax,al
c001afee:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001aff4:	74 48                	je     c001b03e <IDE::open(int, int, void*)+0x1e6>
c001aff6:	83 ec 0c             	sub    esp,0xc
c001aff9:	68 e0 19 02 c0       	push   0xc00219e0
c001affe:	eb 36                	jmp    c001b036 <IDE::open(int, int, void*)+0x1de>
c001b000:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b009:	75 19                	jne    c001b024 <IDE::open(int, int, void*)+0x1cc>
c001b00b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b00f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b014:	74 05                	je     c001b01b <IDE::open(int, int, void*)+0x1c3>
c001b016:	83 c0 80             	add    eax,0xffffff80
c001b019:	75 09                	jne    c001b024 <IDE::open(int, int, void*)+0x1cc>
c001b01b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b022:	eb 1a                	jmp    c001b03e <IDE::open(int, int, void*)+0x1e6>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	68 e8 19 02 c0       	push   0xc00219e8
c001b02c:	eb 08                	jmp    c001b036 <IDE::open(int, int, void*)+0x1de>
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	68 19 1a 02 c0       	push   0xc0021a19
c001b036:	e8 fc 57 ff ff       	call   c0010837 <KePanic(char const*)>
c001b03b:	83 c4 10             	add    esp,0x10
c001b03e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b045:	74 1a                	je     c001b061 <IDE::open(int, int, void*)+0x209>
c001b047:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b04d:	83 e0 fc             	and    eax,0xfffffffc
c001b050:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b057:	83 c0 08             	add    eax,0x8
c001b05a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b061:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b067:	89 c2                	mov    edx,eax
c001b069:	83 e2 0f             	and    edx,0xf
c001b06c:	83 fa 08             	cmp    edx,0x8
c001b06f:	75 0a                	jne    c001b07b <IDE::open(int, int, void*)+0x223>
c001b071:	83 e8 02             	sub    eax,0x2
c001b074:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b07b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b081:	89 c2                	mov    edx,eax
c001b083:	83 e2 0f             	and    edx,0xf
c001b086:	83 fa 08             	cmp    edx,0x8
c001b089:	75 0a                	jne    c001b095 <IDE::open(int, int, void*)+0x23d>
c001b08b:	83 e8 02             	sub    eax,0x2
c001b08e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b095:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b09c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b0a3:	89 d0                	mov    eax,edx
c001b0a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0a8:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0ab:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0af:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0b3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0b7:	83 e1 3f             	and    ecx,0x3f
c001b0ba:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0be:	89 f9                	mov    ecx,edi
c001b0c0:	0f b6 c9             	movzx  ecx,cl
c001b0c3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0ca:	8d 78 02             	lea    edi,[eax+0x2]
c001b0cd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0d0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0d4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b0d8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0dc:	83 e2 3f             	and    edx,0x3f
c001b0df:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0e3:	89 f9                	mov    ecx,edi
c001b0e5:	0f b6 d1             	movzx  edx,cl
c001b0e8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b0ee:	8d 78 03             	lea    edi,[eax+0x3]
c001b0f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0f8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0fc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b100:	83 e1 3f             	and    ecx,0x3f
c001b103:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b107:	89 f9                	mov    ecx,edi
c001b109:	0f b6 c9             	movzx  ecx,cl
c001b10c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b112:	8d 78 04             	lea    edi,[eax+0x4]
c001b115:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b118:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b11c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b120:	89 fa                	mov    edx,edi
c001b122:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b128:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b12c:	83 e2 3f             	and    edx,0x3f
c001b12f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b133:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b13a:	66 85 f6             	test   si,si
c001b13d:	74 65                	je     c001b1a4 <IDE::open(int, int, void*)+0x34c>
c001b13f:	89 f9                	mov    ecx,edi
c001b141:	83 c0 05             	add    eax,0x5
c001b144:	0f b6 d1             	movzx  edx,cl
c001b147:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b14a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b14e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b152:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b158:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b15c:	83 e0 3f             	and    eax,0x3f
c001b15f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b163:	eb 3f                	jmp    c001b1a4 <IDE::open(int, int, void*)+0x34c>
c001b165:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b16b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b172:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b179:	05 06 02 00 00       	add    eax,0x206
c001b17e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b185:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b18c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b193:	05 06 02 00 00       	add    eax,0x206
c001b198:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b19f:	e9 bd fe ff ff       	jmp    c001b061 <IDE::open(int, int, void*)+0x209>
c001b1a4:	50                   	push   eax
c001b1a5:	50                   	push   eax
c001b1a6:	6a 00                	push   0x0
c001b1a8:	53                   	push   ebx
c001b1a9:	e8 32 fa ff ff       	call   c001abe0 <IDE::prepareInterrupt(unsigned char)>
c001b1ae:	5a                   	pop    edx
c001b1af:	59                   	pop    ecx
c001b1b0:	6a 01                	push   0x1
c001b1b2:	53                   	push   ebx
c001b1b3:	e8 28 fa ff ff       	call   c001abe0 <IDE::prepareInterrupt(unsigned char)>
c001b1b8:	83 c4 0c             	add    esp,0xc
c001b1bb:	6a 00                	push   0x0
c001b1bd:	6a 00                	push   0x0
c001b1bf:	53                   	push   ebx
c001b1c0:	e8 49 fc ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001b1c5:	83 c4 0c             	add    esp,0xc
c001b1c8:	6a 00                	push   0x0
c001b1ca:	6a 01                	push   0x1
c001b1cc:	53                   	push   ebx
c001b1cd:	e8 3c fc ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001b1d2:	83 c4 10             	add    esp,0x10
c001b1d5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b1dc:	74 34                	je     c001b212 <IDE::open(int, int, void*)+0x3ba>
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	53                   	push   ebx
c001b1e2:	6a 01                	push   0x1
c001b1e4:	68 d6 ad 01 c0       	push   0xc001add6
c001b1e9:	6a 0e                	push   0xe
c001b1eb:	53                   	push   ebx
c001b1ec:	e8 35 0b ff ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1f1:	83 c4 14             	add    esp,0x14
c001b1f4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1fa:	53                   	push   ebx
c001b1fb:	6a 01                	push   0x1
c001b1fd:	68 f2 ad 01 c0       	push   0xc001adf2
c001b202:	6a 0f                	push   0xf
c001b204:	53                   	push   ebx
c001b205:	e8 1c 0b ff ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b20a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b210:	eb 38                	jmp    c001b24a <IDE::open(int, int, void*)+0x3f2>
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b21f:	53                   	push   ebx
c001b220:	6a 00                	push   0x0
c001b222:	68 d6 ad 01 c0       	push   0xc001add6
c001b227:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b22d:	53                   	push   ebx
c001b22e:	e8 f3 0a ff ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b233:	83 c4 14             	add    esp,0x14
c001b236:	53                   	push   ebx
c001b237:	6a 00                	push   0x0
c001b239:	68 f2 ad 01 c0       	push   0xc001adf2
c001b23e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b244:	53                   	push   ebx
c001b245:	e8 dc 0a ff ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b24a:	83 c4 20             	add    esp,0x20
c001b24d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	53                   	push   ebx
c001b253:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b256:	83 c4 0c             	add    esp,0xc
c001b259:	6a 07                	push   0x7
c001b25b:	6a 00                	push   0x0
c001b25d:	53                   	push   ebx
c001b25e:	e8 63 fa ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b263:	83 c4 0c             	add    esp,0xc
c001b266:	6a 07                	push   0x7
c001b268:	6a 01                	push   0x1
c001b26a:	53                   	push   ebx
c001b26b:	e8 56 fa ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b270:	83 c4 0c             	add    esp,0xc
c001b273:	6a 01                	push   0x1
c001b275:	6a 00                	push   0x0
c001b277:	53                   	push   ebx
c001b278:	e8 91 fb ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	6a 01                	push   0x1
c001b282:	6a 01                	push   0x1
c001b284:	53                   	push   ebx
c001b285:	e8 84 fb ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001b28a:	83 c4 2c             	add    esp,0x2c
c001b28d:	31 c0                	xor    eax,eax
c001b28f:	5b                   	pop    ebx
c001b290:	5e                   	pop    esi
c001b291:	5f                   	pop    edi
c001b292:	5d                   	pop    ebp
c001b293:	c3                   	ret    

c001b294 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b294:	55                   	push   ebp
c001b295:	57                   	push   edi
c001b296:	56                   	push   esi
c001b297:	53                   	push   ebx
c001b298:	83 ec 1c             	sub    esp,0x1c
c001b29b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b29f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2a7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2ab:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2ae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2b2:	3c 03                	cmp    al,0x3
c001b2b4:	77 5a                	ja     c001b310 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b2b6:	0f b6 db             	movzx  ebx,bl
c001b2b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2bd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2c1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2c4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2c9:	0c 80                	or     al,0x80
c001b2cb:	50                   	push   eax
c001b2cc:	6a 0c                	push   0xc
c001b2ce:	53                   	push   ebx
c001b2cf:	56                   	push   esi
c001b2d0:	e8 31 f9 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2d9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2de:	0f b6 d2             	movzx  edx,dl
c001b2e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2e5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b2e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b2f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b304:	83 c4 2c             	add    esp,0x2c
c001b307:	5b                   	pop    ebx
c001b308:	5e                   	pop    esi
c001b309:	5f                   	pop    edi
c001b30a:	5d                   	pop    ebp
c001b30b:	e9 f6 f8 ff ff       	jmp    c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b310:	0f b6 c2             	movzx  eax,dl
c001b313:	83 f8 07             	cmp    eax,0x7
c001b316:	77 12                	ja     c001b32a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b318:	0f b6 db             	movzx  ebx,bl
c001b31b:	0f b6 c2             	movzx  eax,dl
c001b31e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b326:	01 c2                	add    edx,eax
c001b328:	eb 2f                	jmp    c001b359 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b32a:	83 f8 0d             	cmp    eax,0xd
c001b32d:	77 13                	ja     c001b342 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b32f:	0f b6 db             	movzx  ebx,bl
c001b332:	0f b6 d2             	movzx  edx,dl
c001b335:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b33c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b340:	eb 17                	jmp    c001b359 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b342:	83 f8 15             	cmp    eax,0x15
c001b345:	77 14                	ja     c001b35b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b347:	0f b6 db             	movzx  ebx,bl
c001b34a:	0f b6 d2             	movzx  edx,dl
c001b34d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b355:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b359:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b35b:	83 c4 1c             	add    esp,0x1c
c001b35e:	5b                   	pop    ebx
c001b35f:	5e                   	pop    esi
c001b360:	5f                   	pop    edi
c001b361:	5d                   	pop    ebp
c001b362:	c3                   	ret    
c001b363:	90                   	nop

c001b364 <IDE::detect()>:
c001b364:	55                   	push   ebp
c001b365:	57                   	push   edi
c001b366:	56                   	push   esi
c001b367:	53                   	push   ebx
c001b368:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b36e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b375:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b37c:	0f 85 9d 02 00 00    	jne    c001b61f <IDE::detect()+0x2bb>
c001b382:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b389:	31 f6                	xor    esi,esi
c001b38b:	31 ed                	xor    ebp,ebp
c001b38d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b395:	89 e8                	mov    eax,ebp
c001b397:	c1 e0 06             	shl    eax,0x6
c001b39a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b3a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3ae:	c1 e0 04             	shl    eax,0x4
c001b3b1:	83 c8 a0             	or     eax,0xffffffa0
c001b3b4:	0f b6 c0             	movzx  eax,al
c001b3b7:	50                   	push   eax
c001b3b8:	6a 06                	push   0x6
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 45 f8 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 f9 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 ed f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b3d9:	83 c4 0c             	add    esp,0xc
c001b3dc:	6a 0c                	push   0xc
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 e1 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b3e5:	83 c4 0c             	add    esp,0xc
c001b3e8:	6a 0c                	push   0xc
c001b3ea:	56                   	push   esi
c001b3eb:	53                   	push   ebx
c001b3ec:	e8 d5 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b3f1:	68 ec 00 00 00       	push   0xec
c001b3f6:	6a 07                	push   0x7
c001b3f8:	56                   	push   esi
c001b3f9:	53                   	push   ebx
c001b3fa:	e8 07 f8 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3ff:	83 c4 1c             	add    esp,0x1c
c001b402:	6a 0c                	push   0xc
c001b404:	56                   	push   esi
c001b405:	53                   	push   ebx
c001b406:	e8 bb f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b40b:	83 c4 0c             	add    esp,0xc
c001b40e:	6a 0c                	push   0xc
c001b410:	56                   	push   esi
c001b411:	53                   	push   ebx
c001b412:	e8 af f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b417:	83 c4 0c             	add    esp,0xc
c001b41a:	6a 0c                	push   0xc
c001b41c:	56                   	push   esi
c001b41d:	53                   	push   ebx
c001b41e:	e8 a3 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b423:	83 c4 0c             	add    esp,0xc
c001b426:	6a 0c                	push   0xc
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	e8 97 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b42f:	83 c4 0c             	add    esp,0xc
c001b432:	6a 0c                	push   0xc
c001b434:	56                   	push   esi
c001b435:	53                   	push   ebx
c001b436:	e8 8b f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	84 c0                	test   al,al
c001b440:	0f 84 60 01 00 00    	je     c001b5a6 <IDE::detect()+0x242>
c001b446:	31 ff                	xor    edi,edi
c001b448:	50                   	push   eax
c001b449:	6a 0c                	push   0xc
c001b44b:	56                   	push   esi
c001b44c:	53                   	push   ebx
c001b44d:	e8 74 f8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b452:	83 c4 10             	add    esp,0x10
c001b455:	a8 01                	test   al,0x1
c001b457:	0f 85 6a 01 00 00    	jne    c001b5c7 <IDE::detect()+0x263>
c001b45d:	a8 80                	test   al,0x80
c001b45f:	75 04                	jne    c001b465 <IDE::detect()+0x101>
c001b461:	a8 08                	test   al,0x8
c001b463:	75 23                	jne    c001b488 <IDE::detect()+0x124>
c001b465:	47                   	inc    edi
c001b466:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b46c:	7e da                	jle    c001b448 <IDE::detect()+0xe4>
c001b46e:	83 ec 0c             	sub    esp,0xc
c001b471:	6a 32                	push   0x32
c001b473:	e8 e4 9e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b481:	75 c5                	jne    c001b448 <IDE::detect()+0xe4>
c001b483:	e9 3f 01 00 00       	jmp    c001b5c7 <IDE::detect()+0x263>
c001b488:	31 c9                	xor    ecx,ecx
c001b48a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b48e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b492:	83 ec 0c             	sub    esp,0xc
c001b495:	68 80 00 00 00       	push   0x80
c001b49a:	57                   	push   edi
c001b49b:	6a 00                	push   0x0
c001b49d:	56                   	push   esi
c001b49e:	53                   	push   ebx
c001b49f:	e8 f0 fd ff ff       	call   c001b294 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b4a4:	89 e8                	mov    eax,ebp
c001b4a6:	c1 e0 06             	shl    eax,0x6
c001b4a9:	01 d8                	add    eax,ebx
c001b4ab:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4b0:	89 d1                	mov    ecx,edx
c001b4b2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4b9:	89 f2                	mov    edx,esi
c001b4bb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4c2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4c8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b4cc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b4d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4d6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b4dd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4e5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b4ec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b4f4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4fa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b501:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b507:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b50b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b50f:	83 c4 20             	add    esp,0x20
c001b512:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b515:	83 c7 02             	add    edi,0x2
c001b518:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001b51e:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b521:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001b527:	83 c0 02             	add    eax,0x2
c001b52a:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001b52e:	75 e2                	jne    c001b512 <IDE::detect()+0x1ae>
c001b530:	89 e8                	mov    eax,ebp
c001b532:	c1 e0 06             	shl    eax,0x6
c001b535:	01 d8                	add    eax,ebx
c001b537:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b53e:	c1 ea 09             	shr    edx,0x9
c001b541:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b548:	83 e2 01             	and    edx,0x1
c001b54b:	80 e1 01             	and    cl,0x1
c001b54e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b554:	75 22                	jne    c001b578 <IDE::detect()+0x214>
c001b556:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b55d:	74 46                	je     c001b5a5 <IDE::detect()+0x241>
c001b55f:	83 ec 0c             	sub    esp,0xc
c001b562:	68 7c 01 00 00       	push   0x17c
c001b567:	e8 1b c5 fe ff       	call   c0007a87 <malloc>
c001b56c:	89 c7                	mov    edi,eax
c001b56e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b571:	e8 12 05 00 00       	call   c001ba88 <ATA::ATA()>
c001b576:	eb 17                	jmp    c001b58f <IDE::detect()+0x22b>
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	68 84 01 00 00       	push   0x184
c001b580:	e8 02 c5 fe ff       	call   c0007a87 <malloc>
c001b585:	89 c7                	mov    edi,eax
c001b587:	89 04 24             	mov    DWORD PTR [esp],eax
c001b58a:	e8 6b 0e 00 00       	call   c001c3fa <ATAPI::ATAPI()>
c001b58f:	5a                   	pop    edx
c001b590:	59                   	pop    ecx
c001b591:	57                   	push   edi
c001b592:	53                   	push   ebx
c001b593:	e8 e2 07 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c001b598:	8b 07                	mov    eax,DWORD PTR [edi]
c001b59a:	53                   	push   ebx
c001b59b:	55                   	push   ebp
c001b59c:	6a 00                	push   0x0
c001b59e:	57                   	push   edi
c001b59f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5a2:	83 c4 20             	add    esp,0x20
c001b5a5:	45                   	inc    ebp
c001b5a6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5ab:	74 0d                	je     c001b5ba <IDE::detect()+0x256>
c001b5ad:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b5b5:	e9 db fd ff ff       	jmp    c001b395 <IDE::detect()+0x31>
c001b5ba:	4e                   	dec    esi
c001b5bb:	74 62                	je     c001b61f <IDE::detect()+0x2bb>
c001b5bd:	be 01 00 00 00       	mov    esi,0x1
c001b5c2:	e9 c6 fd ff ff       	jmp    c001b38d <IDE::detect()+0x29>
c001b5c7:	50                   	push   eax
c001b5c8:	6a 04                	push   0x4
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	e8 f5 f6 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b5d1:	83 c4 0c             	add    esp,0xc
c001b5d4:	89 c7                	mov    edi,eax
c001b5d6:	6a 05                	push   0x5
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	e8 e7 f6 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b5df:	89 f9                	mov    ecx,edi
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	0f b6 f9             	movzx  edi,cl
c001b5e7:	83 ff 14             	cmp    edi,0x14
c001b5ea:	74 2d                	je     c001b619 <IDE::detect()+0x2b5>
c001b5ec:	83 ff 69             	cmp    edi,0x69
c001b5ef:	75 b5                	jne    c001b5a6 <IDE::detect()+0x242>
c001b5f1:	3c 96                	cmp    al,0x96
c001b5f3:	75 b1                	jne    c001b5a6 <IDE::detect()+0x242>
c001b5f5:	68 a1 00 00 00       	push   0xa1
c001b5fa:	6a 07                	push   0x7
c001b5fc:	56                   	push   esi
c001b5fd:	53                   	push   ebx
c001b5fe:	e8 03 f6 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b603:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b60a:	e8 4d 9d ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	b1 01                	mov    cl,0x1
c001b614:	e9 71 fe ff ff       	jmp    c001b48a <IDE::detect()+0x126>
c001b619:	3c eb                	cmp    al,0xeb
c001b61b:	75 cf                	jne    c001b5ec <IDE::detect()+0x288>
c001b61d:	eb d6                	jmp    c001b5f5 <IDE::detect()+0x291>
c001b61f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b625:	5b                   	pop    ebx
c001b626:	5e                   	pop    esi
c001b627:	5f                   	pop    edi
c001b628:	5d                   	pop    ebp
c001b629:	c3                   	ret    

c001b62a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b62a:	55                   	push   ebp
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	83 ec 1c             	sub    esp,0x1c
c001b631:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b635:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b63d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b641:	88 c3                	mov    bl,al
c001b643:	25 ff 00 00 00       	and    eax,0xff
c001b648:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b64c:	0f 84 88 00 00 00    	je     c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	89 c7                	mov    edi,eax
c001b657:	68 43 1a 02 c0       	push   0xc0021a43
c001b65c:	e8 e8 f2 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	83 ff 01             	cmp    edi,0x1
c001b667:	74 6b                	je     c001b6d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b669:	83 ff 02             	cmp    edi,0x2
c001b66c:	75 58                	jne    c001b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b66e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b673:	01 ff                	add    edi,edi
c001b675:	50                   	push   eax
c001b676:	09 fe                	or     esi,edi
c001b678:	6a 01                	push   0x1
c001b67a:	89 f0                	mov    eax,esi
c001b67c:	0f b6 f0             	movzx  esi,al
c001b67f:	c1 e6 06             	shl    esi,0x6
c001b682:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b68a:	50                   	push   eax
c001b68b:	55                   	push   ebp
c001b68c:	e8 35 f6 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b691:	83 c4 10             	add    esp,0x10
c001b694:	a8 01                	test   al,0x1
c001b696:	74 02                	je     c001b69a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b698:	b3 07                	mov    bl,0x7
c001b69a:	a8 02                	test   al,0x2
c001b69c:	74 02                	je     c001b6a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b69e:	b3 03                	mov    bl,0x3
c001b6a0:	a8 04                	test   al,0x4
c001b6a2:	74 02                	je     c001b6a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b6a4:	b3 14                	mov    bl,0x14
c001b6a6:	a8 08                	test   al,0x8
c001b6a8:	74 02                	je     c001b6ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6aa:	b3 03                	mov    bl,0x3
c001b6ac:	a8 10                	test   al,0x10
c001b6ae:	74 02                	je     c001b6b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6b0:	b3 15                	mov    bl,0x15
c001b6b2:	a8 20                	test   al,0x20
c001b6b4:	74 02                	je     c001b6b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6b6:	b3 03                	mov    bl,0x3
c001b6b8:	a8 40                	test   al,0x40
c001b6ba:	74 02                	je     c001b6be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6bc:	b3 16                	mov    bl,0x16
c001b6be:	a8 80                	test   al,0x80
c001b6c0:	74 18                	je     c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c2:	b3 0d                	mov    bl,0xd
c001b6c4:	eb 14                	jmp    c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c6:	83 ff 03             	cmp    edi,0x3
c001b6c9:	74 0d                	je     c001b6d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b6cb:	83 ff 04             	cmp    edi,0x4
c001b6ce:	75 0a                	jne    c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6d0:	b3 08                	mov    bl,0x8
c001b6d2:	eb 06                	jmp    c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6d4:	b3 13                	mov    bl,0x13
c001b6d6:	eb 02                	jmp    c001b6da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6d8:	b3 17                	mov    bl,0x17
c001b6da:	83 c4 1c             	add    esp,0x1c
c001b6dd:	88 d8                	mov    al,bl
c001b6df:	5b                   	pop    ebx
c001b6e0:	5e                   	pop    esi
c001b6e1:	5f                   	pop    edi
c001b6e2:	5d                   	pop    ebp
c001b6e3:	c3                   	ret    

c001b6e4 <IDE::polling(unsigned char, unsigned int)>:
c001b6e4:	57                   	push   edi
c001b6e5:	56                   	push   esi
c001b6e6:	53                   	push   ebx
c001b6e7:	bb 04 00 00 00       	mov    ebx,0x4
c001b6ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6f1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b6f5:	52                   	push   edx
c001b6f6:	6a 0c                	push   0xc
c001b6f8:	56                   	push   esi
c001b6f9:	57                   	push   edi
c001b6fa:	e8 c7 f5 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	4b                   	dec    ebx
c001b703:	75 f0                	jne    c001b6f5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b705:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b70a:	50                   	push   eax
c001b70b:	6a 0c                	push   0xc
c001b70d:	56                   	push   esi
c001b70e:	57                   	push   edi
c001b70f:	e8 b2 f5 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	a8 01                	test   al,0x1
c001b719:	75 17                	jne    c001b732 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b71b:	a8 20                	test   al,0x20
c001b71d:	75 0f                	jne    c001b72e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b71f:	4b                   	dec    ebx
c001b720:	74 10                	je     c001b732 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b722:	a8 80                	test   al,0x80
c001b724:	75 e4                	jne    c001b70a <IDE::polling(unsigned char, unsigned int)+0x26>
c001b726:	a8 08                	test   al,0x8
c001b728:	74 e0                	je     c001b70a <IDE::polling(unsigned char, unsigned int)+0x26>
c001b72a:	31 c0                	xor    eax,eax
c001b72c:	eb 06                	jmp    c001b734 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b72e:	b0 01                	mov    al,0x1
c001b730:	eb 02                	jmp    c001b734 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b732:	b0 02                	mov    al,0x2
c001b734:	5b                   	pop    ebx
c001b735:	5e                   	pop    esi
c001b736:	5f                   	pop    edi
c001b737:	c3                   	ret    

c001b738 <SATABus::close(int, int, void*)>:
c001b738:	31 c0                	xor    eax,eax
c001b73a:	c3                   	ret    
c001b73b:	90                   	nop

c001b73c <SATABus::detect()>:
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <SATABus::SATABus()>:
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b745:	83 ec 08             	sub    esp,0x8
c001b748:	68 7c 1a 02 c0       	push   0xc0021a7c
c001b74d:	50                   	push   eax
c001b74e:	e8 69 09 ff ff       	call   c000c0bc <HardDiskController::HardDiskController(char const*)>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001b75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75f:	89 10                	mov    DWORD PTR [eax],edx
c001b761:	83 ec 0c             	sub    esp,0xc
c001b764:	6a 50                	push   0x50
c001b766:	e8 f6 c6 fe ff       	call   c0007e61 <Phys::allocateContiguousPages(int)>
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	89 c2                	mov    edx,eax
c001b770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b774:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b77a:	83 ec 0c             	sub    esp,0xc
c001b77d:	6a 50                	push   0x50
c001b77f:	e8 65 de fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001b784:	83 c4 10             	add    esp,0x10
c001b787:	89 c2                	mov    edx,eax
c001b789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b793:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b79c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b7a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7a6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	6a 03                	push   0x3
c001b7b1:	6a 50                	push   0x50
c001b7b3:	51                   	push   ecx
c001b7b4:	52                   	push   edx
c001b7b5:	50                   	push   eax
c001b7b6:	e8 29 e8 fe ff       	call   c0009fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7bb:	83 c4 20             	add    esp,0x20
c001b7be:	90                   	nop
c001b7bf:	83 c4 0c             	add    esp,0xc
c001b7c2:	c3                   	ret    
c001b7c3:	90                   	nop

c001b7c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7c8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b7cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7ce:	09 c2                	or     edx,eax
c001b7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b7da:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7dc:	31 c0                	xor    eax,eax
c001b7de:	c1 e9 08             	shr    ecx,0x8
c001b7e1:	83 e1 0f             	and    ecx,0xf
c001b7e4:	39 c8                	cmp    eax,ecx
c001b7e6:	74 0a                	je     c001b7f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b7e8:	f6 c2 01             	test   dl,0x1
c001b7eb:	74 08                	je     c001b7f5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b7ed:	d1 ea                	shr    edx,1
c001b7ef:	40                   	inc    eax
c001b7f0:	eb f2                	jmp    c001b7e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b7f2:	83 c8 ff             	or     eax,0xffffffff
c001b7f5:	c3                   	ret    

c001b7f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b7fa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7fd:	89 c2                	mov    edx,eax
c001b7ff:	c1 ea 08             	shr    edx,0x8
c001b802:	83 e2 0f             	and    edx,0xf
c001b805:	4a                   	dec    edx
c001b806:	75 32                	jne    c001b83a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b808:	83 e0 0f             	and    eax,0xf
c001b80b:	83 f8 03             	cmp    eax,0x3
c001b80e:	75 2a                	jne    c001b83a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b810:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b813:	b8 02 00 00 00       	mov    eax,0x2
c001b818:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b81e:	74 1c                	je     c001b83c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b820:	b8 04 00 00 00       	mov    eax,0x4
c001b825:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b82b:	74 0f                	je     c001b83c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b82d:	31 c0                	xor    eax,eax
c001b82f:	83 fa 03             	cmp    edx,0x3
c001b832:	0f 94 c0             	sete   al
c001b835:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b839:	c3                   	ret    
c001b83a:	31 c0                	xor    eax,eax
c001b83c:	c3                   	ret    
c001b83d:	90                   	nop

c001b83e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b83e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b842:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b845:	0f ba e2 0f          	bt     edx,0xf
c001b849:	72 f7                	jb     c001b842 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b84b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b84e:	83 ca 10             	or     edx,0x10
c001b851:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b854:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b857:	83 ca 01             	or     edx,0x1
c001b85a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b85d:	c3                   	ret    

c001b85e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b85e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b862:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b865:	83 e2 fe             	and    edx,0xfffffffe
c001b868:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b86b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b86e:	83 e2 ef             	and    edx,0xffffffef
c001b871:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b874:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b877:	0f ba e2 0e          	bt     edx,0xe
c001b87b:	72 f7                	jb     c001b874 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b87d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b880:	0f ba e2 0f          	bt     edx,0xf
c001b884:	72 ee                	jb     c001b874 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b886:	c3                   	ret    
c001b887:	90                   	nop

c001b888 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b888:	55                   	push   ebp
c001b889:	57                   	push   edi
c001b88a:	56                   	push   esi
c001b88b:	53                   	push   ebx
c001b88c:	83 ec 1c             	sub    esp,0x1c
c001b88f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b893:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b897:	53                   	push   ebx
c001b898:	56                   	push   esi
c001b899:	e8 c0 ff ff ff       	call   c001b85e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b89e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b8a2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8a8:	c1 e5 0a             	shl    ebp,0xa
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	01 e8                	add    eax,ebp
c001b8b0:	89 03                	mov    DWORD PTR [ebx],eax
c001b8b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8b4:	68 00 04 00 00       	push   0x400
c001b8b9:	6a 00                	push   0x0
c001b8bb:	50                   	push   eax
c001b8bc:	e8 1f 4c fe ff       	call   c00004e0 <memset>
c001b8c1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b8c7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b8cb:	01 e8                	add    eax,ebp
c001b8cd:	83 c4 1c             	add    esp,0x1c
c001b8d0:	c1 e2 08             	shl    edx,0x8
c001b8d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b8d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8dc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8e2:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b8e8:	01 f8                	add    eax,edi
c001b8ea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8f0:	68 00 01 00 00       	push   0x100
c001b8f5:	6a 00                	push   0x0
c001b8f7:	50                   	push   eax
c001b8f8:	e8 e3 4b fe ff       	call   c00004e0 <memset>
c001b8fd:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b903:	01 fa                	add    edx,edi
c001b905:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b909:	c1 e7 0d             	shl    edi,0xd
c001b90c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b90f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b916:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b91c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b922:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b926:	31 ff                	xor    edi,edi
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b935:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b93b:	83 c5 20             	add    ebp,0x20
c001b93e:	01 f8                	add    eax,edi
c001b940:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b943:	52                   	push   edx
c001b944:	68 00 01 00 00       	push   0x100
c001b949:	6a 00                	push   0x0
c001b94b:	50                   	push   eax
c001b94c:	e8 8f 4b fe ff       	call   c00004e0 <memset>
c001b951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b955:	83 c4 10             	add    esp,0x10
c001b958:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b95e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b965:	01 f8                	add    eax,edi
c001b967:	81 c7 00 01 00 00    	add    edi,0x100
c001b96d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b970:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b976:	75 b3                	jne    c001b92b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b978:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b97f:	50                   	push   eax
c001b980:	50                   	push   eax
c001b981:	53                   	push   ebx
c001b982:	56                   	push   esi
c001b983:	e8 b6 fe ff ff       	call   c001b83e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b988:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b98f:	83 c4 2c             	add    esp,0x2c
c001b992:	5b                   	pop    ebx
c001b993:	5e                   	pop    esi
c001b994:	5f                   	pop    edi
c001b995:	5d                   	pop    ebp
c001b996:	c3                   	ret    
c001b997:	90                   	nop

c001b998 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b998:	55                   	push   ebp
c001b999:	57                   	push   edi
c001b99a:	56                   	push   esi
c001b99b:	53                   	push   ebx
c001b99c:	31 db                	xor    ebx,ebx
c001b99e:	83 ec 0c             	sub    esp,0xc
c001b9a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b9a9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9ac:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9b2:	74 7a                	je     c001ba2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9b4:	89 d8                	mov    eax,ebx
c001b9b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9ba:	c1 e0 07             	shl    eax,0x7
c001b9bd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9c4:	55                   	push   ebp
c001b9c5:	56                   	push   esi
c001b9c6:	e8 2b fe ff ff       	call   c001b7f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b9cb:	5a                   	pop    edx
c001b9cc:	83 f8 01             	cmp    eax,0x1
c001b9cf:	59                   	pop    ecx
c001b9d0:	75 21                	jne    c001b9f3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b9d2:	50                   	push   eax
c001b9d3:	53                   	push   ebx
c001b9d4:	55                   	push   ebp
c001b9d5:	56                   	push   esi
c001b9d6:	e8 ad fe ff ff       	call   c001b888 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9db:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b9e2:	e8 a0 c0 fe ff       	call   c0007a87 <malloc>
c001b9e7:	89 c5                	mov    ebp,eax
c001b9e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9ec:	e8 c9 10 00 00       	call   c001caba <SATA::SATA()>
c001b9f1:	eb 24                	jmp    c001ba17 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9f3:	83 f8 04             	cmp    eax,0x4
c001b9f6:	75 36                	jne    c001ba2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9f8:	51                   	push   ecx
c001b9f9:	53                   	push   ebx
c001b9fa:	55                   	push   ebp
c001b9fb:	56                   	push   esi
c001b9fc:	e8 87 fe ff ff       	call   c001b888 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba01:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba08:	e8 7a c0 fe ff       	call   c0007a87 <malloc>
c001ba0d:	89 c5                	mov    ebp,eax
c001ba0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba12:	e8 05 18 00 00       	call   c001d21c <SATAPI::SATAPI()>
c001ba17:	58                   	pop    eax
c001ba18:	5a                   	pop    edx
c001ba19:	55                   	push   ebp
c001ba1a:	56                   	push   esi
c001ba1b:	e8 5a 03 ff ff       	call   c000bd7a <Device::addChild(Device*)>
c001ba20:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba23:	56                   	push   esi
c001ba24:	6a 00                	push   0x0
c001ba26:	53                   	push   ebx
c001ba27:	55                   	push   ebp
c001ba28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba2b:	83 c4 20             	add    esp,0x20
c001ba2e:	d1 ef                	shr    edi,1
c001ba30:	43                   	inc    ebx
c001ba31:	83 fb 20             	cmp    ebx,0x20
c001ba34:	0f 85 72 ff ff ff    	jne    c001b9ac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba3a:	83 c4 0c             	add    esp,0xc
c001ba3d:	5b                   	pop    ebx
c001ba3e:	5e                   	pop    esi
c001ba3f:	5f                   	pop    edi
c001ba40:	5d                   	pop    ebp
c001ba41:	c3                   	ret    

c001ba42 <SATABus::open(int, int, void*)>:
c001ba42:	83 ec 14             	sub    esp,0x14
c001ba45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba49:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba4f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba55:	52                   	push   edx
c001ba56:	50                   	push   eax
c001ba57:	e8 3c ff ff ff       	call   c001b998 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba5c:	31 c0                	xor    eax,eax
c001ba5e:	83 c4 1c             	add    esp,0x1c
c001ba61:	c3                   	ret    

c001ba62 <ATA::close(int, int, void*)>:
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba6f:	85 c0                	test   eax,eax
c001ba71:	74 0c                	je     c001ba7f <ATA::close(int, int, void*)+0x1d>
c001ba73:	83 ec 0c             	sub    esp,0xc
c001ba76:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba78:	50                   	push   eax
c001ba79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	31 c0                	xor    eax,eax
c001ba81:	83 c4 0c             	add    esp,0xc
c001ba84:	c3                   	ret    
c001ba85:	90                   	nop

c001ba86 <ATA::powerSaving(PowerSavingLevel)>:
c001ba86:	c3                   	ret    
c001ba87:	90                   	nop

c001ba88 <ATA::ATA()>:
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8f:	83 ec 04             	sub    esp,0x4
c001ba92:	68 00 02 00 00       	push   0x200
c001ba97:	68 75 1b 02 c0       	push   0xc0021b75
c001ba9c:	50                   	push   eax
c001ba9d:	e8 a4 06 ff ff       	call   c000c146 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001baa2:	83 c4 10             	add    esp,0x10
c001baa5:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c001baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baae:	89 10                	mov    DWORD PTR [eax],edx
c001bab0:	90                   	nop
c001bab1:	83 c4 0c             	add    esp,0xc
c001bab4:	c3                   	ret    
c001bab5:	90                   	nop

c001bab6 <ATA::flush(bool)>:
c001bab6:	53                   	push   ebx
c001bab7:	83 ec 08             	sub    esp,0x8
c001baba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001babf:	83 f8 01             	cmp    eax,0x1
c001bac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bac6:	19 c0                	sbb    eax,eax
c001bac8:	83 e0 fd             	and    eax,0xfffffffd
c001bacb:	05 ea 00 00 00       	add    eax,0xea
c001bad0:	50                   	push   eax
c001bad1:	6a 07                	push   0x7
c001bad3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bada:	50                   	push   eax
c001badb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bae1:	e8 20 f1 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bae6:	83 c4 0c             	add    esp,0xc
c001bae9:	6a 00                	push   0x0
c001baeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001baf2:	50                   	push   eax
c001baf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001baf9:	e8 e6 fb ff ff       	call   c001b6e4 <IDE::polling(unsigned char, unsigned int)>
c001bafe:	83 c4 18             	add    esp,0x18
c001bb01:	5b                   	pop    ebx
c001bb02:	c3                   	ret    
c001bb03:	90                   	nop

c001bb04 <ATA::readyForCommand()>:
c001bb04:	56                   	push   esi
c001bb05:	53                   	push   ebx
c001bb06:	53                   	push   ebx
c001bb07:	31 db                	xor    ebx,ebx
c001bb09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb0d:	51                   	push   ecx
c001bb0e:	6a 0c                	push   0xc
c001bb10:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb17:	50                   	push   eax
c001bb18:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb1e:	e8 a3 f1 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	a8 88                	test   al,0x88
c001bb28:	74 1f                	je     c001bb49 <ATA::readyForCommand()+0x45>
c001bb2a:	43                   	inc    ebx
c001bb2b:	83 fb 63             	cmp    ebx,0x63
c001bb2e:	7e dd                	jle    c001bb0d <ATA::readyForCommand()+0x9>
c001bb30:	83 ec 0c             	sub    esp,0xc
c001bb33:	6a 0a                	push   0xa
c001bb35:	e8 22 98 ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb43:	75 c8                	jne    c001bb0d <ATA::readyForCommand()+0x9>
c001bb45:	31 c0                	xor    eax,eax
c001bb47:	eb 02                	jmp    c001bb4b <ATA::readyForCommand()+0x47>
c001bb49:	b0 01                	mov    al,0x1
c001bb4b:	5a                   	pop    edx
c001bb4c:	5b                   	pop    ebx
c001bb4d:	5e                   	pop    esi
c001bb4e:	c3                   	ret    
c001bb4f:	90                   	nop

c001bb50 <ATA::access(unsigned long long, int, void*, bool)>:
c001bb50:	55                   	push   ebp
c001bb51:	57                   	push   edi
c001bb52:	56                   	push   esi
c001bb53:	53                   	push   ebx
c001bb54:	83 ec 2c             	sub    esp,0x2c
c001bb57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb5b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb63:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb67:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb6b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bb73:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb7d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb83:	c1 e0 06             	shl    eax,0x6
c001bb86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb8a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb92:	74 5b                	je     c001bbef <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bb94:	89 fa                	mov    edx,edi
c001bb96:	89 f0                	mov    eax,esi
c001bb98:	c1 ea 1c             	shr    edx,0x1c
c001bb9b:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bb9f:	89 d1                	mov    ecx,edx
c001bba1:	09 c1                	or     ecx,eax
c001bba3:	74 25                	je     c001bbca <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bba5:	31 ed                	xor    ebp,ebp
c001bba7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bbae:	89 fa                	mov    edx,edi
c001bbb0:	89 f0                	mov    eax,esi
c001bbb2:	0f ad d0             	shrd   eax,edx,cl
c001bbb5:	d3 ea                	shr    edx,cl
c001bbb7:	f6 c1 20             	test   cl,0x20
c001bbba:	74 02                	je     c001bbbe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbbc:	89 d0                	mov    eax,edx
c001bbbe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbc2:	45                   	inc    ebp
c001bbc3:	83 fd 06             	cmp    ebp,0x6
c001bbc6:	75 df                	jne    c001bba7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bbc8:	eb 71                	jmp    c001bc3b <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bbca:	89 f0                	mov    eax,esi
c001bbcc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bbd1:	0f ac f8 10          	shrd   eax,edi,0x10
c001bbd5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bbd9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbe0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbe5:	bf 01 00 00 00       	mov    edi,0x1
c001bbea:	c1 ee 18             	shr    esi,0x18
c001bbed:	eb 53                	jmp    c001bc42 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bbef:	6a 00                	push   0x0
c001bbf1:	6a 3f                	push   0x3f
c001bbf3:	57                   	push   edi
c001bbf4:	56                   	push   esi
c001bbf5:	e8 d6 2a 00 00       	call   c001e6d0 <__umoddi3>
c001bbfa:	83 c4 10             	add    esp,0x10
c001bbfd:	40                   	inc    eax
c001bbfe:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc02:	6a 00                	push   0x0
c001bc04:	68 f0 03 00 00       	push   0x3f0
c001bc09:	57                   	push   edi
c001bc0a:	56                   	push   esi
c001bc0b:	e8 c0 29 00 00       	call   c001e5d0 <__udivdi3>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc18:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc1f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc24:	6a 00                	push   0x0
c001bc26:	6a 3f                	push   0x3f
c001bc28:	57                   	push   edi
c001bc29:	31 ff                	xor    edi,edi
c001bc2b:	56                   	push   esi
c001bc2c:	e8 9f 29 00 00       	call   c001e5d0 <__udivdi3>
c001bc31:	83 e0 0f             	and    eax,0xf
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	89 c6                	mov    esi,eax
c001bc39:	eb 07                	jmp    c001bc42 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bc3b:	31 f6                	xor    esi,esi
c001bc3d:	bf 02 00 00 00       	mov    edi,0x2
c001bc42:	50                   	push   eax
c001bc43:	6a 00                	push   0x0
c001bc45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc4c:	50                   	push   eax
c001bc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc51:	e8 b8 f1 ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001bc56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc59:	e8 a6 fe ff ff       	call   c001bb04 <ATA::readyForCommand()>
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	84 c0                	test   al,al
c001bc63:	75 0a                	jne    c001bc6f <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc65:	be 01 00 00 00       	mov    esi,0x1
c001bc6a:	e9 9b 02 00 00       	jmp    c001bf0a <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bc6f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc75:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc7b:	c1 e0 04             	shl    eax,0x4
c001bc7e:	09 c6                	or     esi,eax
c001bc80:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc87:	f7 c7 03 00 00 00    	test   edi,0x3
c001bc8d:	75 05                	jne    c001bc94 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bc8f:	83 ce a0             	or     esi,0xffffffa0
c001bc92:	eb 03                	jmp    c001bc97 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc94:	83 ce e0             	or     esi,0xffffffe0
c001bc97:	89 f0                	mov    eax,esi
c001bc99:	0f b6 f0             	movzx  esi,al
c001bc9c:	56                   	push   esi
c001bc9d:	6a 06                	push   0x6
c001bc9f:	51                   	push   ecx
c001bca0:	52                   	push   edx
c001bca1:	e8 60 ef ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	6a 00                	push   0x0
c001bcab:	6a 01                	push   0x1
c001bcad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcb4:	50                   	push   eax
c001bcb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcbb:	e8 46 ef ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc0:	89 f8                	mov    eax,edi
c001bcc2:	0f b6 f0             	movzx  esi,al
c001bcc5:	83 c4 10             	add    esp,0x10
c001bcc8:	83 fe 02             	cmp    esi,0x2
c001bccb:	75 6e                	jne    c001bd3b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bccd:	6a 00                	push   0x0
c001bccf:	6a 08                	push   0x8
c001bcd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcd8:	50                   	push   eax
c001bcd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcdf:	e8 22 ef ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bce9:	50                   	push   eax
c001bcea:	6a 09                	push   0x9
c001bcec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcf3:	50                   	push   eax
c001bcf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcfa:	e8 07 ef ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcff:	83 c4 20             	add    esp,0x20
c001bd02:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd07:	50                   	push   eax
c001bd08:	6a 0a                	push   0xa
c001bd0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd11:	50                   	push   eax
c001bd12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd18:	e8 e9 ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd1d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd22:	50                   	push   eax
c001bd23:	6a 0b                	push   0xb
c001bd25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd2c:	50                   	push   eax
c001bd2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd33:	e8 ce ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd38:	83 c4 20             	add    esp,0x20
c001bd3b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd40:	50                   	push   eax
c001bd41:	6a 02                	push   0x2
c001bd43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd4a:	50                   	push   eax
c001bd4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd51:	e8 b0 ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd56:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd5b:	50                   	push   eax
c001bd5c:	6a 03                	push   0x3
c001bd5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd65:	50                   	push   eax
c001bd66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd6c:	e8 95 ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd71:	83 c4 20             	add    esp,0x20
c001bd74:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd79:	50                   	push   eax
c001bd7a:	6a 04                	push   0x4
c001bd7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd83:	50                   	push   eax
c001bd84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd8a:	e8 77 ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd94:	50                   	push   eax
c001bd95:	6a 05                	push   0x5
c001bd97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd9e:	50                   	push   eax
c001bd9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bda5:	e8 5c ee ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdaa:	83 c4 20             	add    esp,0x20
c001bdad:	83 fe 02             	cmp    esi,0x2
c001bdb0:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bdb5:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bdba:	85 c9                	test   ecx,ecx
c001bdbc:	74 07                	je     c001bdc5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bdbe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdc3:	75 47                	jne    c001be0c <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bdc5:	89 f8                	mov    eax,edi
c001bdc7:	0f b6 f8             	movzx  edi,al
c001bdca:	31 c0                	xor    eax,eax
c001bdcc:	83 ff 02             	cmp    edi,0x2
c001bdcf:	0f 95 c0             	setne  al
c001bdd2:	89 c6                	mov    esi,eax
c001bdd4:	74 0c                	je     c001bde2 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001bdd6:	b8 30 00 00 00       	mov    eax,0x30
c001bddb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bde0:	75 2f                	jne    c001be11 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bde2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bde6:	83 f2 01             	xor    edx,0x1
c001bde9:	85 c9                	test   ecx,ecx
c001bdeb:	74 09                	je     c001bdf6 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001bded:	b8 24 00 00 00       	mov    eax,0x24
c001bdf2:	84 d2                	test   dl,dl
c001bdf4:	75 1b                	jne    c001be11 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bdf6:	85 f6                	test   esi,esi
c001bdf8:	0f 84 67 fe ff ff    	je     c001bc65 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdfe:	b8 20 00 00 00       	mov    eax,0x20
c001be03:	84 d2                	test   dl,dl
c001be05:	75 0a                	jne    c001be11 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001be07:	e9 59 fe ff ff       	jmp    c001bc65 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001be0c:	b8 34 00 00 00       	mov    eax,0x34
c001be11:	50                   	push   eax
c001be12:	6a 07                	push   0x7
c001be14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be1b:	50                   	push   eax
c001be1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be22:	e8 df ed ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be27:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	0f b6 6c 24 0c       	movzx  ebp,BYTE PTR [esp+0xc]
c001be33:	85 f6                	test   esi,esi
c001be35:	0f 84 b5 00 00 00    	je     c001bef0 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001be3b:	50                   	push   eax
c001be3c:	6a 01                	push   0x1
c001be3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be45:	50                   	push   eax
c001be46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be4c:	e8 93 f8 ff ff       	call   c001b6e4 <IDE::polling(unsigned char, unsigned int)>
c001be51:	83 c4 10             	add    esp,0x10
c001be54:	0f b6 c0             	movzx  eax,al
c001be57:	85 c0                	test   eax,eax
c001be59:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be5f:	74 1f                	je     c001be80 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001be61:	50                   	push   eax
c001be62:	89 c6                	mov    esi,eax
c001be64:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be6b:	0f b6 d2             	movzx  edx,dl
c001be6e:	50                   	push   eax
c001be6f:	52                   	push   edx
c001be70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be76:	e8 af f7 ff ff       	call   c001b62a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be7b:	e9 87 00 00 00       	jmp    c001bf07 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001be80:	85 ed                	test   ebp,ebp
c001be82:	74 3b                	je     c001bebf <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001be84:	31 c9                	xor    ecx,ecx
c001be86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be8e:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001be92:	50                   	push   eax
c001be93:	50                   	push   eax
c001be94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be9b:	50                   	push   eax
c001be9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bea2:	e8 4d ed ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001bea7:	89 c2                	mov    edx,eax
c001bea9:	89 f8                	mov    eax,edi
c001beab:	66 ef                	out    dx,ax
c001bead:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	41                   	inc    ecx
c001beb5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001bebb:	75 c9                	jne    c001be86 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001bebd:	eb 23                	jmp    c001bee2 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bebf:	51                   	push   ecx
c001bec0:	51                   	push   ecx
c001bec1:	0f b6 d2             	movzx  edx,dl
c001bec4:	52                   	push   edx
c001bec5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001becb:	e8 24 ed ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001bed0:	b9 00 01 00 00       	mov    ecx,0x100
c001bed5:	89 c2                	mov    edx,eax
c001bed7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bedb:	fc                   	cld    
c001bedc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bedf:	83 c4 10             	add    esp,0x10
c001bee2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001beea:	4e                   	dec    esi
c001beeb:	e9 43 ff ff ff       	jmp    c001be33 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001bef0:	31 f6                	xor    esi,esi
c001bef2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bef7:	74 11                	je     c001bf0a <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bef9:	50                   	push   eax
c001befa:	50                   	push   eax
c001befb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf00:	50                   	push   eax
c001bf01:	53                   	push   ebx
c001bf02:	e8 af fb ff ff       	call   c001bab6 <ATA::flush(bool)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	83 c4 2c             	add    esp,0x2c
c001bf0d:	89 f0                	mov    eax,esi
c001bf0f:	5b                   	pop    ebx
c001bf10:	5e                   	pop    esi
c001bf11:	5f                   	pop    edi
c001bf12:	5d                   	pop    ebp
c001bf13:	c3                   	ret    

c001bf14 <ATA::detectCHS()>:
c001bf14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf18:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf1e:	c1 e0 06             	shl    eax,0x6
c001bf21:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf27:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf31:	c7 44 24 04 cc 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021acc
c001bf39:	e9 f9 48 ff ff       	jmp    c0010837 <KePanic(char const*)>

c001bf3e <ATA::open(int, int, void*)>:
c001bf3e:	53                   	push   ebx
c001bf3f:	83 ec 08             	sub    esp,0x8
c001bf42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf4e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf54:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf5a:	c1 e0 06             	shl    eax,0x6
c001bf5d:	01 d0                	add    eax,edx
c001bf5f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf66:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf6c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf73:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf7d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf83:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf8a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf91:	75 0c                	jne    c001bf9f <ATA::open(int, int, void*)+0x61>
c001bf93:	83 ec 0c             	sub    esp,0xc
c001bf96:	53                   	push   ebx
c001bf97:	e8 78 ff ff ff       	call   c001bf14 <ATA::detectCHS()>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bfa5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bfab:	c1 e0 06             	shl    eax,0x6
c001bfae:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bfb5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bfbf:	d1 e8                	shr    eax,1
c001bfc1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bfc7:	6a 04                	push   0x4
c001bfc9:	6a 0c                	push   0xc
c001bfcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfd2:	50                   	push   eax
c001bfd3:	52                   	push   edx
c001bfd4:	e8 2d ec ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfd9:	90                   	nop
c001bfda:	90                   	nop
c001bfdb:	6a 00                	push   0x0
c001bfdd:	6a 0c                	push   0xc
c001bfdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfe6:	50                   	push   eax
c001bfe7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bfed:	e8 14 ec ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bff2:	83 c4 14             	add    esp,0x14
c001bff5:	53                   	push   ebx
c001bff6:	e8 b3 01 ff ff       	call   c000c1ae <PhysicalDisk::startCache()>
c001bffb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bffe:	e8 ff 13 ff ff       	call   c000d402 <createPartitionsForDisk(PhysicalDisk*)>
c001c003:	83 c4 18             	add    esp,0x18
c001c006:	31 c0                	xor    eax,eax
c001c008:	5b                   	pop    ebx
c001c009:	c3                   	ret    

c001c00a <combineCharAndColour(char, unsigned char)>:
c001c00a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c00f:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c015:	c1 e0 08             	shl    eax,0x8
c001c018:	09 d0                	or     eax,edx
c001c01a:	c3                   	ret    

c001c01b <combineColours(unsigned char, unsigned char)>:
c001c01b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c020:	c1 e0 04             	shl    eax,0x4
c001c023:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c027:	c3                   	ret    

c001c028 <ATA::read(unsigned long long, int, void*)>:
c001c028:	55                   	push   ebp
c001c029:	57                   	push   edi
c001c02a:	56                   	push   esi
c001c02b:	be 04 00 00 00       	mov    esi,0x4
c001c030:	53                   	push   ebx
c001c031:	83 ec 0c             	sub    esp,0xc
c001c034:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c03c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c040:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c044:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c047:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c04d:	0f 87 a1 01 00 00    	ja     c001c1f4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c053:	be 06 00 00 00       	mov    esi,0x6
c001c058:	85 c9                	test   ecx,ecx
c001c05a:	0f 84 94 01 00 00    	je     c001c1f4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c060:	55                   	push   ebp
c001c061:	55                   	push   ebp
c001c062:	6a 00                	push   0x0
c001c064:	51                   	push   ecx
c001c065:	53                   	push   ebx
c001c066:	52                   	push   edx
c001c067:	50                   	push   eax
c001c068:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c06c:	e8 df fa ff ff       	call   c001bb50 <ATA::access(unsigned long long, int, void*, bool)>
c001c071:	83 c4 20             	add    esp,0x20
c001c074:	89 c6                	mov    esi,eax
c001c076:	85 c0                	test   eax,eax
c001c078:	0f 85 71 01 00 00    	jne    c001c1ef <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c07e:	50                   	push   eax
c001c07f:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c085:	50                   	push   eax
c001c086:	89 da                	mov    edx,ebx
c001c088:	6a 0f                	push   0xf
c001c08a:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c090:	6a 00                	push   0x0
c001c092:	e8 84 ff ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001c097:	59                   	pop    ecx
c001c098:	bd 10 27 00 00       	mov    ebp,0x2710
c001c09d:	5b                   	pop    ebx
c001c09e:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0a3:	0f b6 d8             	movzx  ebx,al
c001c0a6:	89 d0                	mov    eax,edx
c001c0a8:	53                   	push   ebx
c001c0a9:	99                   	cdq    
c001c0aa:	f7 fd                	idiv   ebp
c001c0ac:	99                   	cdq    
c001c0ad:	f7 f9                	idiv   ecx
c001c0af:	83 c2 30             	add    edx,0x30
c001c0b2:	0f b6 d2             	movzx  edx,dl
c001c0b5:	52                   	push   edx
c001c0b6:	e8 4f ff ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c0bb:	5f                   	pop    edi
c001c0bc:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0c1:	5a                   	pop    edx
c001c0c2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c0c8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0cd:	53                   	push   ebx
c001c0ce:	99                   	cdq    
c001c0cf:	f7 ff                	idiv   edi
c001c0d1:	99                   	cdq    
c001c0d2:	f7 f9                	idiv   ecx
c001c0d4:	8d 42 30             	lea    eax,[edx+0x30]
c001c0d7:	0f b6 c0             	movzx  eax,al
c001c0da:	50                   	push   eax
c001c0db:	e8 2a ff ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c0e0:	5f                   	pop    edi
c001c0e1:	bf 64 00 00 00       	mov    edi,0x64
c001c0e6:	5a                   	pop    edx
c001c0e7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c0ed:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0f2:	53                   	push   ebx
c001c0f3:	99                   	cdq    
c001c0f4:	f7 ff                	idiv   edi
c001c0f6:	99                   	cdq    
c001c0f7:	f7 f9                	idiv   ecx
c001c0f9:	8d 42 30             	lea    eax,[edx+0x30]
c001c0fc:	0f b6 c0             	movzx  eax,al
c001c0ff:	50                   	push   eax
c001c100:	e8 05 ff ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c105:	5a                   	pop    edx
c001c106:	5a                   	pop    edx
c001c107:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c10d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c112:	53                   	push   ebx
c001c113:	99                   	cdq    
c001c114:	f7 f9                	idiv   ecx
c001c116:	99                   	cdq    
c001c117:	f7 f9                	idiv   ecx
c001c119:	8d 42 30             	lea    eax,[edx+0x30]
c001c11c:	0f b6 c0             	movzx  eax,al
c001c11f:	50                   	push   eax
c001c120:	e8 e5 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c125:	5a                   	pop    edx
c001c126:	5a                   	pop    edx
c001c127:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c12d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c132:	53                   	push   ebx
c001c133:	99                   	cdq    
c001c134:	f7 f9                	idiv   ecx
c001c136:	83 c2 30             	add    edx,0x30
c001c139:	0f b6 d2             	movzx  edx,dl
c001c13c:	52                   	push   edx
c001c13d:	e8 c8 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c142:	5a                   	pop    edx
c001c143:	5a                   	pop    edx
c001c144:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c14a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c14f:	53                   	push   ebx
c001c150:	99                   	cdq    
c001c151:	f7 fd                	idiv   ebp
c001c153:	99                   	cdq    
c001c154:	f7 f9                	idiv   ecx
c001c156:	8d 42 30             	lea    eax,[edx+0x30]
c001c159:	0f b6 c0             	movzx  eax,al
c001c15c:	50                   	push   eax
c001c15d:	e8 a8 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c162:	5d                   	pop    ebp
c001c163:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c168:	5a                   	pop    edx
c001c169:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c16f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c174:	53                   	push   ebx
c001c175:	99                   	cdq    
c001c176:	f7 fd                	idiv   ebp
c001c178:	99                   	cdq    
c001c179:	f7 f9                	idiv   ecx
c001c17b:	8d 42 30             	lea    eax,[edx+0x30]
c001c17e:	0f b6 c0             	movzx  eax,al
c001c181:	50                   	push   eax
c001c182:	e8 83 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c187:	5d                   	pop    ebp
c001c188:	5a                   	pop    edx
c001c189:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c18f:	53                   	push   ebx
c001c190:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c195:	99                   	cdq    
c001c196:	f7 ff                	idiv   edi
c001c198:	99                   	cdq    
c001c199:	f7 f9                	idiv   ecx
c001c19b:	8d 42 30             	lea    eax,[edx+0x30]
c001c19e:	0f b6 c0             	movzx  eax,al
c001c1a1:	50                   	push   eax
c001c1a2:	e8 63 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c1a7:	5f                   	pop    edi
c001c1a8:	5d                   	pop    ebp
c001c1a9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1af:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1b4:	53                   	push   ebx
c001c1b5:	99                   	cdq    
c001c1b6:	f7 f9                	idiv   ecx
c001c1b8:	99                   	cdq    
c001c1b9:	f7 f9                	idiv   ecx
c001c1bb:	8d 42 30             	lea    eax,[edx+0x30]
c001c1be:	0f b6 c0             	movzx  eax,al
c001c1c1:	50                   	push   eax
c001c1c2:	e8 43 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c1c7:	5a                   	pop    edx
c001c1c8:	5f                   	pop    edi
c001c1c9:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c1cf:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1d4:	53                   	push   ebx
c001c1d5:	99                   	cdq    
c001c1d6:	f7 f9                	idiv   ecx
c001c1d8:	83 c2 30             	add    edx,0x30
c001c1db:	0f b6 d2             	movzx  edx,dl
c001c1de:	52                   	push   edx
c001c1df:	e8 26 fe ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c1ed:	eb 05                	jmp    c001c1f4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c1ef:	be 01 00 00 00       	mov    esi,0x1
c001c1f4:	83 c4 0c             	add    esp,0xc
c001c1f7:	89 f0                	mov    eax,esi
c001c1f9:	5b                   	pop    ebx
c001c1fa:	5e                   	pop    esi
c001c1fb:	5f                   	pop    edi
c001c1fc:	5d                   	pop    ebp
c001c1fd:	c3                   	ret    

c001c1fe <ATA::write(unsigned long long, int, void*)>:
c001c1fe:	55                   	push   ebp
c001c1ff:	57                   	push   edi
c001c200:	56                   	push   esi
c001c201:	be 04 00 00 00       	mov    esi,0x4
c001c206:	53                   	push   ebx
c001c207:	83 ec 0c             	sub    esp,0xc
c001c20a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c20e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c212:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c216:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c21a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c21d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c223:	0f 87 9c 01 00 00    	ja     c001c3c5 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c229:	be 06 00 00 00       	mov    esi,0x6
c001c22e:	85 c9                	test   ecx,ecx
c001c230:	0f 84 8f 01 00 00    	je     c001c3c5 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c236:	55                   	push   ebp
c001c237:	55                   	push   ebp
c001c238:	6a 01                	push   0x1
c001c23a:	51                   	push   ecx
c001c23b:	53                   	push   ebx
c001c23c:	52                   	push   edx
c001c23d:	50                   	push   eax
c001c23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c242:	e8 09 f9 ff ff       	call   c001bb50 <ATA::access(unsigned long long, int, void*, bool)>
c001c247:	83 c4 20             	add    esp,0x20
c001c24a:	89 c6                	mov    esi,eax
c001c24c:	85 c0                	test   eax,eax
c001c24e:	0f 85 6c 01 00 00    	jne    c001c3c0 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c254:	50                   	push   eax
c001c255:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c25b:	50                   	push   eax
c001c25c:	bd 10 27 00 00       	mov    ebp,0x2710
c001c261:	6a 0f                	push   0xf
c001c263:	6a 00                	push   0x0
c001c265:	e8 b1 fd ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001c26a:	0f b6 d8             	movzx  ebx,al
c001c26d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c272:	5a                   	pop    edx
c001c273:	99                   	cdq    
c001c274:	f7 fd                	idiv   ebp
c001c276:	59                   	pop    ecx
c001c277:	b9 0a 00 00 00       	mov    ecx,0xa
c001c27c:	99                   	cdq    
c001c27d:	f7 f9                	idiv   ecx
c001c27f:	53                   	push   ebx
c001c280:	8d 42 30             	lea    eax,[edx+0x30]
c001c283:	0f b6 c0             	movzx  eax,al
c001c286:	50                   	push   eax
c001c287:	e8 7e fd ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c28c:	5f                   	pop    edi
c001c28d:	bf e8 03 00 00       	mov    edi,0x3e8
c001c292:	5a                   	pop    edx
c001c293:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c299:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c29e:	53                   	push   ebx
c001c29f:	99                   	cdq    
c001c2a0:	f7 ff                	idiv   edi
c001c2a2:	99                   	cdq    
c001c2a3:	f7 f9                	idiv   ecx
c001c2a5:	8d 42 30             	lea    eax,[edx+0x30]
c001c2a8:	0f b6 c0             	movzx  eax,al
c001c2ab:	50                   	push   eax
c001c2ac:	e8 59 fd ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c2b1:	5f                   	pop    edi
c001c2b2:	bf 64 00 00 00       	mov    edi,0x64
c001c2b7:	5a                   	pop    edx
c001c2b8:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2be:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2c3:	53                   	push   ebx
c001c2c4:	99                   	cdq    
c001c2c5:	f7 ff                	idiv   edi
c001c2c7:	99                   	cdq    
c001c2c8:	f7 f9                	idiv   ecx
c001c2ca:	8d 42 30             	lea    eax,[edx+0x30]
c001c2cd:	0f b6 c0             	movzx  eax,al
c001c2d0:	50                   	push   eax
c001c2d1:	e8 34 fd ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c2d6:	5a                   	pop    edx
c001c2d7:	5a                   	pop    edx
c001c2d8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2de:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2e3:	53                   	push   ebx
c001c2e4:	99                   	cdq    
c001c2e5:	f7 f9                	idiv   ecx
c001c2e7:	99                   	cdq    
c001c2e8:	f7 f9                	idiv   ecx
c001c2ea:	8d 42 30             	lea    eax,[edx+0x30]
c001c2ed:	0f b6 c0             	movzx  eax,al
c001c2f0:	50                   	push   eax
c001c2f1:	e8 14 fd ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c2f6:	5a                   	pop    edx
c001c2f7:	5a                   	pop    edx
c001c2f8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2fe:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c303:	53                   	push   ebx
c001c304:	99                   	cdq    
c001c305:	f7 f9                	idiv   ecx
c001c307:	8d 42 30             	lea    eax,[edx+0x30]
c001c30a:	0f b6 c0             	movzx  eax,al
c001c30d:	50                   	push   eax
c001c30e:	e8 f7 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c313:	5a                   	pop    edx
c001c314:	5a                   	pop    edx
c001c315:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c31b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c320:	53                   	push   ebx
c001c321:	99                   	cdq    
c001c322:	f7 fd                	idiv   ebp
c001c324:	99                   	cdq    
c001c325:	f7 f9                	idiv   ecx
c001c327:	8d 42 30             	lea    eax,[edx+0x30]
c001c32a:	0f b6 c0             	movzx  eax,al
c001c32d:	50                   	push   eax
c001c32e:	e8 d7 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c333:	5d                   	pop    ebp
c001c334:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c339:	5a                   	pop    edx
c001c33a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c340:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c345:	53                   	push   ebx
c001c346:	99                   	cdq    
c001c347:	f7 fd                	idiv   ebp
c001c349:	99                   	cdq    
c001c34a:	f7 f9                	idiv   ecx
c001c34c:	8d 42 30             	lea    eax,[edx+0x30]
c001c34f:	0f b6 c0             	movzx  eax,al
c001c352:	50                   	push   eax
c001c353:	e8 b2 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c358:	5d                   	pop    ebp
c001c359:	5a                   	pop    edx
c001c35a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c360:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c365:	53                   	push   ebx
c001c366:	99                   	cdq    
c001c367:	f7 ff                	idiv   edi
c001c369:	99                   	cdq    
c001c36a:	f7 f9                	idiv   ecx
c001c36c:	8d 42 30             	lea    eax,[edx+0x30]
c001c36f:	0f b6 c0             	movzx  eax,al
c001c372:	50                   	push   eax
c001c373:	e8 92 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c378:	5f                   	pop    edi
c001c379:	5d                   	pop    ebp
c001c37a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c380:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c385:	53                   	push   ebx
c001c386:	99                   	cdq    
c001c387:	f7 f9                	idiv   ecx
c001c389:	99                   	cdq    
c001c38a:	f7 f9                	idiv   ecx
c001c38c:	8d 42 30             	lea    eax,[edx+0x30]
c001c38f:	0f b6 c0             	movzx  eax,al
c001c392:	50                   	push   eax
c001c393:	e8 72 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c398:	5a                   	pop    edx
c001c399:	5f                   	pop    edi
c001c39a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c3a0:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3a5:	53                   	push   ebx
c001c3a6:	99                   	cdq    
c001c3a7:	f7 f9                	idiv   ecx
c001c3a9:	83 c2 30             	add    edx,0x30
c001c3ac:	0f b6 d2             	movzx  edx,dl
c001c3af:	52                   	push   edx
c001c3b0:	e8 55 fc ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c3be:	eb 05                	jmp    c001c3c5 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c3c0:	be 01 00 00 00       	mov    esi,0x1
c001c3c5:	83 c4 0c             	add    esp,0xc
c001c3c8:	89 f0                	mov    eax,esi
c001c3ca:	5b                   	pop    ebx
c001c3cb:	5e                   	pop    esi
c001c3cc:	5f                   	pop    edi
c001c3cd:	5d                   	pop    ebp
c001c3ce:	c3                   	ret    
c001c3cf:	90                   	nop

c001c3d0 <ATAPI::write(unsigned long long, int, void*)>:
c001c3d0:	b8 03 00 00 00       	mov    eax,0x3
c001c3d5:	c3                   	ret    

c001c3d6 <ATAPI::close(int, int, void*)>:
c001c3d6:	83 ec 0c             	sub    esp,0xc
c001c3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3e3:	85 c0                	test   eax,eax
c001c3e5:	74 0c                	je     c001c3f3 <ATAPI::close(int, int, void*)+0x1d>
c001c3e7:	83 ec 0c             	sub    esp,0xc
c001c3ea:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3ec:	50                   	push   eax
c001c3ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3f0:	83 c4 10             	add    esp,0x10
c001c3f3:	31 c0                	xor    eax,eax
c001c3f5:	83 c4 0c             	add    esp,0xc
c001c3f8:	c3                   	ret    
c001c3f9:	90                   	nop

c001c3fa <ATAPI::ATAPI()>:
c001c3fa:	83 ec 0c             	sub    esp,0xc
c001c3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c401:	83 ec 04             	sub    esp,0x4
c001c404:	68 00 08 00 00       	push   0x800
c001c409:	68 15 1c 02 c0       	push   0xc0021c15
c001c40e:	50                   	push   eax
c001c40f:	e8 32 fd fe ff       	call   c000c146 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c414:	83 c4 10             	add    esp,0x10
c001c417:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001c41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c420:	89 10                	mov    DWORD PTR [eax],edx
c001c422:	90                   	nop
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	c3                   	ret    
c001c427:	90                   	nop

c001c428 <ATAPI::readyForCommand()>:
c001c428:	56                   	push   esi
c001c429:	53                   	push   ebx
c001c42a:	53                   	push   ebx
c001c42b:	31 db                	xor    ebx,ebx
c001c42d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c431:	51                   	push   ecx
c001c432:	6a 0c                	push   0xc
c001c434:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c43b:	50                   	push   eax
c001c43c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c442:	e8 7f e8 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	a8 88                	test   al,0x88
c001c44c:	74 25                	je     c001c473 <ATAPI::readyForCommand()+0x4b>
c001c44e:	43                   	inc    ebx
c001c44f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c455:	7e da                	jle    c001c431 <ATAPI::readyForCommand()+0x9>
c001c457:	83 ec 0c             	sub    esp,0xc
c001c45a:	68 5e 01 00 00       	push   0x15e
c001c45f:	e8 f8 8e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c46d:	75 c2                	jne    c001c431 <ATAPI::readyForCommand()+0x9>
c001c46f:	31 c0                	xor    eax,eax
c001c471:	eb 02                	jmp    c001c475 <ATAPI::readyForCommand()+0x4d>
c001c473:	b0 01                	mov    al,0x1
c001c475:	5a                   	pop    edx
c001c476:	5b                   	pop    ebx
c001c477:	5e                   	pop    esi
c001c478:	c3                   	ret    
c001c479:	90                   	nop

c001c47a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c47a:	55                   	push   ebp
c001c47b:	57                   	push   edi
c001c47c:	56                   	push   esi
c001c47d:	53                   	push   ebx
c001c47e:	83 ec 20             	sub    esp,0x20
c001c481:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c485:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c489:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c48d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c491:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c495:	6a 01                	push   0x1
c001c497:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c49e:	50                   	push   eax
c001c49f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4a5:	e8 64 e9 ff ff       	call   c001ae0e <IDE::enableIRQs(unsigned char, bool)>
c001c4aa:	5e                   	pop    esi
c001c4ab:	58                   	pop    eax
c001c4ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4b3:	50                   	push   eax
c001c4b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ba:	e8 21 e7 ff ff       	call   c001abe0 <IDE::prepareInterrupt(unsigned char)>
c001c4bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4c2:	e8 61 ff ff ff       	call   c001c428 <ATAPI::readyForCommand()>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	84 c0                	test   al,al
c001c4cc:	75 0a                	jne    c001c4d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c4ce:	bb 01 00 00 00       	mov    ebx,0x1
c001c4d3:	e9 60 02 00 00       	jmp    c001c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c4d8:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c4de:	c1 e0 04             	shl    eax,0x4
c001c4e1:	0f b6 c0             	movzx  eax,al
c001c4e4:	50                   	push   eax
c001c4e5:	6a 06                	push   0x6
c001c4e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ee:	50                   	push   eax
c001c4ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4f5:	e8 0c e7 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4fa:	6a 00                	push   0x0
c001c4fc:	6a 01                	push   0x1
c001c4fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c505:	50                   	push   eax
c001c506:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c50c:	e8 f5 e6 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c511:	83 c4 20             	add    esp,0x20
c001c514:	0f b6 c3             	movzx  eax,bl
c001c517:	50                   	push   eax
c001c518:	6a 04                	push   0x4
c001c51a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c521:	50                   	push   eax
c001c522:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c528:	0f b6 df             	movzx  ebx,bh
c001c52b:	e8 d6 e6 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c530:	53                   	push   ebx
c001c531:	6a 05                	push   0x5
c001c533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c53a:	50                   	push   eax
c001c53b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c541:	e8 c0 e6 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c546:	83 c4 20             	add    esp,0x20
c001c549:	68 a0 00 00 00       	push   0xa0
c001c54e:	6a 07                	push   0x7
c001c550:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c557:	50                   	push   eax
c001c558:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c55e:	e8 a3 e6 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c563:	83 c4 0c             	add    esp,0xc
c001c566:	6a 01                	push   0x1
c001c568:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c56f:	50                   	push   eax
c001c570:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c576:	e8 69 f1 ff ff       	call   c001b6e4 <IDE::polling(unsigned char, unsigned int)>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	0f b6 d8             	movzx  ebx,al
c001c581:	85 db                	test   ebx,ebx
c001c583:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c589:	74 20                	je     c001c5ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c58b:	53                   	push   ebx
c001c58c:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c593:	0f b6 c0             	movzx  eax,al
c001c596:	52                   	push   edx
c001c597:	50                   	push   eax
c001c598:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c59e:	e8 87 f0 ff ff       	call   c001b62a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	e9 8d 01 00 00       	jmp    c001c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c5ab:	53                   	push   ebx
c001c5ac:	53                   	push   ebx
c001c5ad:	0f b6 c0             	movzx  eax,al
c001c5b0:	50                   	push   eax
c001c5b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5b7:	e8 38 e6 ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001c5bc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c5c0:	b9 06 00 00 00       	mov    ecx,0x6
c001c5c5:	89 c2                	mov    edx,eax
c001c5c7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c5ca:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c5d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5da:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5e0:	85 db                	test   ebx,ebx
c001c5e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5e9:	0f 84 ec 00 00 00    	je     c001c6db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c5ef:	51                   	push   ecx
c001c5f0:	51                   	push   ecx
c001c5f1:	52                   	push   edx
c001c5f2:	50                   	push   eax
c001c5f3:	e8 7c e7 ff ff       	call   c001ad74 <IDE::waitInterrupt(unsigned char)>
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	84 c0                	test   al,al
c001c5fd:	0f 84 cb fe ff ff    	je     c001c4ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c603:	56                   	push   esi
c001c604:	56                   	push   esi
c001c605:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c60c:	50                   	push   eax
c001c60d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c613:	e8 c8 e5 ff ff       	call   c001abe0 <IDE::prepareInterrupt(unsigned char)>
c001c618:	83 c4 0c             	add    esp,0xc
c001c61b:	6a 04                	push   0x4
c001c61d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c624:	50                   	push   eax
c001c625:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c62b:	e8 96 e6 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001c630:	83 c4 0c             	add    esp,0xc
c001c633:	6a 05                	push   0x5
c001c635:	89 c6                	mov    esi,eax
c001c637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c63e:	50                   	push   eax
c001c63f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c645:	e8 7c e6 ff ff       	call   c001acc6 <IDE::read(unsigned char, unsigned char)>
c001c64a:	89 f1                	mov    ecx,esi
c001c64c:	0f b6 c0             	movzx  eax,al
c001c64f:	c1 e0 08             	shl    eax,0x8
c001c652:	0f b6 f1             	movzx  esi,cl
c001c655:	09 c6                	or     esi,eax
c001c657:	d1 fe                	sar    esi,1
c001c659:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c65d:	83 c4 10             	add    esp,0x10
c001c660:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c665:	74 41                	je     c001c6a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c667:	31 c9                	xor    ecx,ecx
c001c669:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c66f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c673:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c67a:	75 0a                	jne    c001c686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c67c:	01 c9                	add    ecx,ecx
c001c67e:	01 cd                	add    ebp,ecx
c001c680:	4b                   	dec    ebx
c001c681:	e9 54 ff ff ff       	jmp    c001c5da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c686:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c68b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c68f:	51                   	push   ecx
c001c690:	51                   	push   ecx
c001c691:	52                   	push   edx
c001c692:	50                   	push   eax
c001c693:	e8 5c e5 ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001c698:	89 c2                	mov    edx,eax
c001c69a:	89 f0                	mov    eax,esi
c001c69c:	66 ef                	out    dx,ax
c001c69e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c6a2:	83 c4 10             	add    esp,0x10
c001c6a5:	41                   	inc    ecx
c001c6a6:	eb c1                	jmp    c001c669 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c6a8:	31 f6                	xor    esi,esi
c001c6aa:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6b0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c6b4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6bb:	75 06                	jne    c001c6c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c6bd:	01 f6                	add    esi,esi
c001c6bf:	01 f5                	add    ebp,esi
c001c6c1:	eb bd                	jmp    c001c680 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c6c3:	51                   	push   ecx
c001c6c4:	51                   	push   ecx
c001c6c5:	52                   	push   edx
c001c6c6:	50                   	push   eax
c001c6c7:	e8 28 e5 ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001c6cc:	89 c2                	mov    edx,eax
c001c6ce:	66 ed                	in     ax,dx
c001c6d0:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	46                   	inc    esi
c001c6d9:	eb cf                	jmp    c001c6aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c6db:	51                   	push   ecx
c001c6dc:	51                   	push   ecx
c001c6dd:	52                   	push   edx
c001c6de:	50                   	push   eax
c001c6df:	e8 90 e6 ff ff       	call   c001ad74 <IDE::waitInterrupt(unsigned char)>
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	84 c0                	test   al,al
c001c6e9:	0f 84 df fd ff ff    	je     c001c4ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c6ef:	52                   	push   edx
c001c6f0:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6f5:	52                   	push   edx
c001c6f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6fd:	50                   	push   eax
c001c6fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c704:	e8 d7 e4 ff ff       	call   c001abe0 <IDE::prepareInterrupt(unsigned char)>
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	50                   	push   eax
c001c70d:	50                   	push   eax
c001c70e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c715:	50                   	push   eax
c001c716:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c71c:	e8 d3 e4 ff ff       	call   c001abf4 <IDE::getBase(unsigned char)>
c001c721:	8d 50 07             	lea    edx,[eax+0x7]
c001c724:	ec                   	in     al,dx
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	a8 88                	test   al,0x88
c001c72a:	74 0a                	je     c001c736 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c72c:	4b                   	dec    ebx
c001c72d:	75 dd                	jne    c001c70c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c72f:	bb 02 00 00 00       	mov    ebx,0x2
c001c734:	eb 02                	jmp    c001c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c736:	31 db                	xor    ebx,ebx
c001c738:	83 c4 1c             	add    esp,0x1c
c001c73b:	89 d8                	mov    eax,ebx
c001c73d:	5b                   	pop    ebx
c001c73e:	5e                   	pop    esi
c001c73f:	5f                   	pop    edi
c001c740:	5d                   	pop    ebp
c001c741:	c3                   	ret    

c001c742 <ATAPI::diskRemoved()>:
c001c742:	53                   	push   ebx
c001c743:	83 ec 14             	sub    esp,0x14
c001c746:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c74a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c751:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c757:	e8 94 09 ff ff       	call   c000d0f0 <LogicalDisk::unmount()>
c001c75c:	58                   	pop    eax
c001c75d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c763:	e8 6c 13 ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c001c768:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c76e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c772:	83 c4 18             	add    esp,0x18
c001c775:	5b                   	pop    ebx
c001c776:	e9 49 13 ff ff       	jmp    c000dac4 <VCache::invalidateReadBuffer()>
c001c77b:	90                   	nop

c001c77c <ATAPI::eject()>:
c001c77c:	57                   	push   edi
c001c77d:	b9 03 00 00 00       	mov    ecx,0x3
c001c782:	53                   	push   ebx
c001c783:	83 ec 14             	sub    esp,0x14
c001c786:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c78a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c78e:	fc                   	cld    
c001c78f:	31 c0                	xor    eax,eax
c001c791:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c793:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c798:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c79d:	50                   	push   eax
c001c79e:	50                   	push   eax
c001c79f:	6a 00                	push   0x0
c001c7a1:	6a 00                	push   0x0
c001c7a3:	6a 00                	push   0x0
c001c7a5:	6a 02                	push   0x2
c001c7a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7ab:	50                   	push   eax
c001c7ac:	53                   	push   ebx
c001c7ad:	e8 c8 fc ff ff       	call   c001c47a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7b2:	83 c4 14             	add    esp,0x14
c001c7b5:	53                   	push   ebx
c001c7b6:	e8 87 ff ff ff       	call   c001c742 <ATAPI::diskRemoved()>
c001c7bb:	83 c4 24             	add    esp,0x24
c001c7be:	31 c0                	xor    eax,eax
c001c7c0:	5b                   	pop    ebx
c001c7c1:	5f                   	pop    edi
c001c7c2:	c3                   	ret    
c001c7c3:	90                   	nop

c001c7c4 <ATAPI::diskInserted()>:
c001c7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c8:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c7cf:	c3                   	ret    

c001c7d0 <ATAPI::detectMedia()>:
c001c7d0:	56                   	push   esi
c001c7d1:	53                   	push   ebx
c001c7d2:	83 ec 28             	sub    esp,0x28
c001c7d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c7d9:	6a 0c                	push   0xc
c001c7db:	6a 00                	push   0x0
c001c7dd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c7e1:	56                   	push   esi
c001c7e2:	e8 f9 3c fe ff       	call   c00004e0 <memset>
c001c7e7:	58                   	pop    eax
c001c7e8:	5a                   	pop    edx
c001c7e9:	6a 00                	push   0x0
c001c7eb:	6a 00                	push   0x0
c001c7ed:	6a 00                	push   0x0
c001c7ef:	6a 00                	push   0x0
c001c7f1:	56                   	push   esi
c001c7f2:	53                   	push   ebx
c001c7f3:	e8 82 fc ff ff       	call   c001c47a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7f8:	83 c4 1c             	add    esp,0x1c
c001c7fb:	6a 0c                	push   0xc
c001c7fd:	6a 00                	push   0x0
c001c7ff:	56                   	push   esi
c001c800:	e8 db 3c fe ff       	call   c00004e0 <memset>
c001c805:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c80a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c80f:	59                   	pop    ecx
c001c810:	58                   	pop    eax
c001c811:	6a 01                	push   0x1
c001c813:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c817:	50                   	push   eax
c001c818:	6a 00                	push   0x0
c001c81a:	6a 12                	push   0x12
c001c81c:	56                   	push   esi
c001c81d:	53                   	push   ebx
c001c81e:	e8 57 fc ff ff       	call   c001c47a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c823:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c827:	83 c4 20             	add    esp,0x20
c001c82a:	83 e0 7f             	and    eax,0x7f
c001c82d:	83 f8 70             	cmp    eax,0x70
c001c830:	74 15                	je     c001c847 <ATAPI::detectMedia()+0x77>
c001c832:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c839:	75 0c                	jne    c001c847 <ATAPI::detectMedia()+0x77>
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	53                   	push   ebx
c001c83f:	e8 80 ff ff ff       	call   c001c7c4 <ATAPI::diskInserted()>
c001c844:	83 c4 10             	add    esp,0x10
c001c847:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c84b:	83 e0 0f             	and    eax,0xf
c001c84e:	0f b6 c0             	movzx  eax,al
c001c851:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c856:	75 19                	jne    c001c871 <ATAPI::detectMedia()+0xa1>
c001c858:	83 f8 02             	cmp    eax,0x2
c001c85b:	75 14                	jne    c001c871 <ATAPI::detectMedia()+0xa1>
c001c85d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c864:	74 24                	je     c001c88a <ATAPI::detectMedia()+0xba>
c001c866:	83 ec 0c             	sub    esp,0xc
c001c869:	53                   	push   ebx
c001c86a:	e8 d3 fe ff ff       	call   c001c742 <ATAPI::diskRemoved()>
c001c86f:	eb 16                	jmp    c001c887 <ATAPI::detectMedia()+0xb7>
c001c871:	85 c0                	test   eax,eax
c001c873:	75 15                	jne    c001c88a <ATAPI::detectMedia()+0xba>
c001c875:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c87c:	75 0c                	jne    c001c88a <ATAPI::detectMedia()+0xba>
c001c87e:	83 ec 0c             	sub    esp,0xc
c001c881:	53                   	push   ebx
c001c882:	e8 3d ff ff ff       	call   c001c7c4 <ATAPI::diskInserted()>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	83 c4 24             	add    esp,0x24
c001c88d:	5b                   	pop    ebx
c001c88e:	5e                   	pop    esi
c001c88f:	c3                   	ret    

c001c890 <ATAPI::open(int, int, void*)>:
c001c890:	56                   	push   esi
c001c891:	53                   	push   ebx
c001c892:	50                   	push   eax
c001c893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c897:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c89b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c89f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8a5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8ab:	c1 e0 06             	shl    eax,0x6
c001c8ae:	01 d0                	add    eax,edx
c001c8b0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c8b7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c8bd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c8c4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c8ce:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8d4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c8db:	6a 04                	push   0x4
c001c8dd:	6a 0c                	push   0xc
c001c8df:	51                   	push   ecx
c001c8e0:	52                   	push   edx
c001c8e1:	e8 20 e3 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e6:	90                   	nop
c001c8e7:	90                   	nop
c001c8e8:	6a 00                	push   0x0
c001c8ea:	6a 0c                	push   0xc
c001c8ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8f3:	50                   	push   eax
c001c8f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8fa:	e8 07 e3 ff ff       	call   c001ac06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ff:	83 c4 14             	add    esp,0x14
c001c902:	68 78 01 00 00       	push   0x178
c001c907:	e8 7b b1 fe ff       	call   c0007a87 <malloc>
c001c90c:	83 c4 0c             	add    esp,0xc
c001c90f:	89 c6                	mov    esi,eax
c001c911:	6a 00                	push   0x0
c001c913:	68 ff ff ff 7f       	push   0x7fffffff
c001c918:	6a 00                	push   0x0
c001c91a:	6a 00                	push   0x0
c001c91c:	53                   	push   ebx
c001c91d:	68 c7 1c 02 c0       	push   0xc0021cc7
c001c922:	50                   	push   eax
c001c923:	e8 06 06 ff ff       	call   c000cf2e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c928:	83 c4 14             	add    esp,0x14
c001c92b:	56                   	push   esi
c001c92c:	e8 bd 06 ff ff       	call   c000cfee <LogicalDisk::assignDriveLetter()>
c001c931:	5a                   	pop    edx
c001c932:	59                   	pop    ecx
c001c933:	0f be c0             	movsx  eax,al
c001c936:	50                   	push   eax
c001c937:	68 18 1b 02 c0       	push   0xc0021b18
c001c93c:	e8 08 e0 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001c941:	58                   	pop    eax
c001c942:	5a                   	pop    edx
c001c943:	56                   	push   esi
c001c944:	53                   	push   ebx
c001c945:	e8 30 f4 fe ff       	call   c000bd7a <Device::addChild(Device*)>
c001c94a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c950:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c953:	e8 56 f8 fe ff       	call   c000c1ae <PhysicalDisk::startCache()>
c001c958:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c95f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c962:	e8 69 fe ff ff       	call   c001c7d0 <ATAPI::detectMedia()>
c001c967:	83 c4 14             	add    esp,0x14
c001c96a:	31 c0                	xor    eax,eax
c001c96c:	5b                   	pop    ebx
c001c96d:	5e                   	pop    esi
c001c96e:	c3                   	ret    
c001c96f:	90                   	nop

c001c970 <ATAPI::read(unsigned long long, int, void*)>:
c001c970:	55                   	push   ebp
c001c971:	57                   	push   edi
c001c972:	56                   	push   esi
c001c973:	53                   	push   ebx
c001c974:	83 ec 1c             	sub    esp,0x1c
c001c977:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c97b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c97f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c983:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c98a:	74 3c                	je     c001c9c8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c98c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c990:	b9 03 00 00 00       	mov    ecx,0x3
c001c995:	fc                   	cld    
c001c996:	31 c0                	xor    eax,eax
c001c998:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c99a:	0f ce                	bswap  esi
c001c99c:	89 e8                	mov    eax,ebp
c001c99e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c9a3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c9a7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c9ab:	50                   	push   eax
c001c9ac:	50                   	push   eax
c001c9ad:	55                   	push   ebp
c001c9ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9b2:	c1 e5 0b             	shl    ebp,0xb
c001c9b5:	6a 00                	push   0x0
c001c9b7:	55                   	push   ebp
c001c9b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9bc:	50                   	push   eax
c001c9bd:	53                   	push   ebx
c001c9be:	e8 b7 fa ff ff       	call   c001c47a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c9c3:	83 c4 20             	add    esp,0x20
c001c9c6:	eb 1a                	jmp    c001c9e2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c9c8:	83 ec 0c             	sub    esp,0xc
c001c9cb:	53                   	push   ebx
c001c9cc:	e8 ff fd ff ff       	call   c001c7d0 <ATAPI::detectMedia()>
c001c9d1:	83 c4 10             	add    esp,0x10
c001c9d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9db:	75 af                	jne    c001c98c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c9dd:	b8 02 00 00 00       	mov    eax,0x2
c001c9e2:	83 c4 1c             	add    esp,0x1c
c001c9e5:	5b                   	pop    ebx
c001c9e6:	5e                   	pop    esi
c001c9e7:	5f                   	pop    edi
c001c9e8:	5d                   	pop    ebp
c001c9e9:	c3                   	ret    

c001c9ea <SATA::close(int, int, void*)>:
c001c9ea:	83 ec 0c             	sub    esp,0xc
c001c9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9f7:	85 c0                	test   eax,eax
c001c9f9:	74 0c                	je     c001ca07 <SATA::close(int, int, void*)+0x1d>
c001c9fb:	83 ec 0c             	sub    esp,0xc
c001c9fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca00:	50                   	push   eax
c001ca01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	31 c0                	xor    eax,eax
c001ca09:	83 c4 0c             	add    esp,0xc
c001ca0c:	c3                   	ret    
c001ca0d:	90                   	nop

c001ca0e <SATA::powerSaving(PowerSavingLevel)>:
c001ca0e:	c3                   	ret    
c001ca0f:	90                   	nop

c001ca10 <SATA::open(int, int, void*)>:
c001ca10:	56                   	push   esi
c001ca11:	53                   	push   ebx
c001ca12:	50                   	push   eax
c001ca13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca1b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca2b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca35:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca49:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca50:	e8 3d b3 fe ff       	call   c0007d92 <Phys::allocatePage()>
c001ca55:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca5b:	89 c6                	mov    esi,eax
c001ca5d:	e8 30 b3 fe ff       	call   c0007d92 <Phys::allocatePage()>
c001ca62:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca68:	39 c6                	cmp    esi,eax
c001ca6a:	74 10                	je     c001ca7c <SATA::open(int, int, void*)+0x6c>
c001ca6c:	83 ec 0c             	sub    esp,0xc
c001ca6f:	68 60 1b 02 c0       	push   0xc0021b60
c001ca74:	e8 be 3d ff ff       	call   c0010837 <KePanic(char const*)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	6a 02                	push   0x2
c001ca81:	e8 63 cb fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001ca86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca8c:	6a 03                	push   0x3
c001ca8e:	50                   	push   eax
c001ca8f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca95:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca9b:	e8 30 d2 fe ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001caa0:	83 c4 14             	add    esp,0x14
c001caa3:	53                   	push   ebx
c001caa4:	e8 05 f7 fe ff       	call   c000c1ae <PhysicalDisk::startCache()>
c001caa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caac:	e8 51 09 ff ff       	call   c000d402 <createPartitionsForDisk(PhysicalDisk*)>
c001cab1:	83 c4 14             	add    esp,0x14
c001cab4:	31 c0                	xor    eax,eax
c001cab6:	5b                   	pop    ebx
c001cab7:	5e                   	pop    esi
c001cab8:	c3                   	ret    
c001cab9:	90                   	nop

c001caba <SATA::SATA()>:
c001caba:	83 ec 0c             	sub    esp,0xc
c001cabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac1:	83 ec 04             	sub    esp,0x4
c001cac4:	68 00 02 00 00       	push   0x200
c001cac9:	68 74 1b 02 c0       	push   0xc0021b74
c001cace:	50                   	push   eax
c001cacf:	e8 72 f6 fe ff       	call   c000c146 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cad4:	83 c4 10             	add    esp,0x10
c001cad7:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001cadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae0:	89 10                	mov    DWORD PTR [eax],edx
c001cae2:	90                   	nop
c001cae3:	83 c4 0c             	add    esp,0xc
c001cae6:	c3                   	ret    
c001cae7:	90                   	nop

c001cae8 <SATA::access(unsigned long long, int, void*, bool)>:
c001cae8:	55                   	push   ebp
c001cae9:	57                   	push   edi
c001caea:	56                   	push   esi
c001caeb:	53                   	push   ebx
c001caec:	83 ec 2c             	sub    esp,0x2c
c001caef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001caf3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001caf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cafb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001caff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb07:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb0c:	7e 10                	jle    c001cb1e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cb0e:	83 ec 0c             	sub    esp,0xc
c001cb11:	68 84 1b 02 c0       	push   0xc0021b84
c001cb16:	e8 1c 3d ff ff       	call   c0010837 <KePanic(char const*)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb24:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb34:	89 d0                	mov    eax,edx
c001cb36:	c1 e0 07             	shl    eax,0x7
c001cb39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb3d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb47:	51                   	push   ecx
c001cb48:	8d 42 02             	lea    eax,[edx+0x2]
c001cb4b:	51                   	push   ecx
c001cb4c:	c1 e0 07             	shl    eax,0x7
c001cb4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cb57:	50                   	push   eax
c001cb58:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb5e:	e8 61 ec ff ff       	call   c001b7c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb6e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cb73:	0f 84 57 01 00 00    	je     c001ccd0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb7d:	c1 e0 09             	shl    eax,0x9
c001cb80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb84:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cb89:	74 0e                	je     c001cb99 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cb8b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb91:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb95:	89 c1                	mov    ecx,eax
c001cb97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb99:	8d 42 02             	lea    eax,[edx+0x2]
c001cb9c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cba2:	c1 e0 07             	shl    eax,0x7
c001cba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cba9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cbad:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbaf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cbb5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cbbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbbf:	c1 e1 05             	shl    ecx,0x5
c001cbc2:	01 c8                	add    eax,ecx
c001cbc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbc8:	83 e1 01             	and    ecx,0x1
c001cbcb:	89 ce                	mov    esi,ecx
c001cbcd:	8a 08                	mov    cl,BYTE PTR [eax]
c001cbcf:	c1 e6 06             	shl    esi,0x6
c001cbd2:	83 e1 bf             	and    ecx,0xffffffbf
c001cbd5:	09 f1                	or     ecx,esi
c001cbd7:	88 08                	mov    BYTE PTR [eax],cl
c001cbd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbdb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cbe1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cbe7:	89 08                	mov    DWORD PTR [eax],ecx
c001cbe9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbef:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cbf5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cbfb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cbfe:	50                   	push   eax
c001cbff:	68 90 00 00 00       	push   0x90
c001cc04:	6a 00                	push   0x0
c001cc06:	56                   	push   esi
c001cc07:	e8 d4 38 fe ff       	call   c00004e0 <memset>
c001cc0c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc12:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc1c:	48                   	dec    eax
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc25:	89 c1                	mov    ecx,eax
c001cc27:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc2d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc32:	09 c8                	or     eax,ecx
c001cc34:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc3a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc40:	83 c8 80             	or     eax,0xffffff80
c001cc43:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc49:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc4c:	25 00 7f 00 00       	and    eax,0x7f00
c001cc51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc55:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc5a:	66 89 06             	mov    WORD PTR [esi],ax
c001cc5d:	b0 35                	mov    al,0x35
c001cc5f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc64:	75 02                	jne    c001cc68 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001cc66:	b0 25                	mov    al,0x25
c001cc68:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc6b:	89 e8                	mov    eax,ebp
c001cc6d:	c1 e8 10             	shr    eax,0x10
c001cc70:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cc74:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc77:	89 e8                	mov    eax,ebp
c001cc79:	c1 e8 18             	shr    eax,0x18
c001cc7c:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc80:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc83:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc87:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc8e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc95:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc99:	89 d6                	mov    esi,edx
c001cc9b:	c1 e6 07             	shl    esi,0x7
c001cc9e:	31 c0                	xor    eax,eax
c001cca0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cca4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ccaa:	80 e1 88             	and    cl,0x88
c001ccad:	74 0a                	je     c001ccb9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ccaf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccb4:	74 0a                	je     c001ccc0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ccb6:	40                   	inc    eax
c001ccb7:	eb eb                	jmp    c001cca4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ccb9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccbe:	75 17                	jne    c001ccd7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	68 bd 1b 02 c0       	push   0xc0021bbd
c001ccc8:	e8 7c dc fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001cccd:	83 c4 10             	add    esp,0x10
c001ccd0:	b8 01 00 00 00       	mov    eax,0x1
c001ccd5:	eb 5d                	jmp    c001cd34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ccd7:	b8 01 00 00 00       	mov    eax,0x1
c001ccdc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cce0:	c1 e2 07             	shl    edx,0x7
c001cce3:	d3 e0                	shl    eax,cl
c001cce5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cce9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ccef:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ccf5:	85 c8                	test   eax,ecx
c001ccf7:	74 16                	je     c001cd0f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001ccf9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ccff:	0f ba e1 1e          	bt     ecx,0x1e
c001cd03:	73 ea                	jae    c001ccef <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	68 cb 1b 02 c0       	push   0xc0021bcb
c001cd0d:	eb b9                	jmp    c001ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd0f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd15:	0f ba e0 1e          	bt     eax,0x1e
c001cd19:	72 b5                	jb     c001ccd0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd1b:	31 c0                	xor    eax,eax
c001cd1d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cd22:	75 10                	jne    c001cd34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd24:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd2a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cd32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd34:	83 c4 2c             	add    esp,0x2c
c001cd37:	5b                   	pop    ebx
c001cd38:	5e                   	pop    esi
c001cd39:	5f                   	pop    edi
c001cd3a:	5d                   	pop    ebp
c001cd3b:	c3                   	ret    

c001cd3c <SATA::read(unsigned long long, int, void*)>:
c001cd3c:	55                   	push   ebp
c001cd3d:	57                   	push   edi
c001cd3e:	56                   	push   esi
c001cd3f:	be 04 00 00 00       	mov    esi,0x4
c001cd44:	53                   	push   ebx
c001cd45:	83 ec 0c             	sub    esp,0xc
c001cd48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd54:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd58:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd5b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd61:	0f 87 1a 02 00 00    	ja     c001cf81 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd67:	be 06 00 00 00       	mov    esi,0x6
c001cd6c:	85 c9                	test   ecx,ecx
c001cd6e:	0f 84 0d 02 00 00    	je     c001cf81 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd74:	56                   	push   esi
c001cd75:	56                   	push   esi
c001cd76:	6a 00                	push   0x0
c001cd78:	51                   	push   ecx
c001cd79:	53                   	push   ebx
c001cd7a:	52                   	push   edx
c001cd7b:	50                   	push   eax
c001cd7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd80:	e8 63 fd ff ff       	call   c001cae8 <SATA::access(unsigned long long, int, void*, bool)>
c001cd85:	83 c4 20             	add    esp,0x20
c001cd88:	89 c6                	mov    esi,eax
c001cd8a:	85 c0                	test   eax,eax
c001cd8c:	0f 85 ea 01 00 00    	jne    c001cf7c <SATA::read(unsigned long long, int, void*)+0x240>
c001cd92:	50                   	push   eax
c001cd93:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd99:	50                   	push   eax
c001cd9a:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd9f:	6a 0f                	push   0xf
c001cda1:	6a 00                	push   0x0
c001cda3:	e8 73 f2 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cda8:	5a                   	pop    edx
c001cda9:	59                   	pop    ecx
c001cdaa:	b9 10 27 00 00       	mov    ecx,0x2710
c001cdaf:	0f b6 c0             	movzx  eax,al
c001cdb2:	50                   	push   eax
c001cdb3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdb8:	99                   	cdq    
c001cdb9:	f7 f9                	idiv   ecx
c001cdbb:	99                   	cdq    
c001cdbc:	f7 fb                	idiv   ebx
c001cdbe:	8d 42 30             	lea    eax,[edx+0x30]
c001cdc1:	0f b6 c0             	movzx  eax,al
c001cdc4:	50                   	push   eax
c001cdc5:	e8 40 f2 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cdca:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdd0:	5f                   	pop    edi
c001cdd1:	5d                   	pop    ebp
c001cdd2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdd7:	6a 0f                	push   0xf
c001cdd9:	6a 00                	push   0x0
c001cddb:	e8 3b f2 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cde0:	5a                   	pop    edx
c001cde1:	59                   	pop    ecx
c001cde2:	0f b6 c0             	movzx  eax,al
c001cde5:	50                   	push   eax
c001cde6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdeb:	99                   	cdq    
c001cdec:	f7 fd                	idiv   ebp
c001cdee:	99                   	cdq    
c001cdef:	f7 fb                	idiv   ebx
c001cdf1:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf4:	0f b6 c0             	movzx  eax,al
c001cdf7:	50                   	push   eax
c001cdf8:	e8 0d f2 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cdfd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce03:	5f                   	pop    edi
c001ce04:	bf 64 00 00 00       	mov    edi,0x64
c001ce09:	58                   	pop    eax
c001ce0a:	6a 0f                	push   0xf
c001ce0c:	6a 00                	push   0x0
c001ce0e:	e8 08 f2 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001ce13:	5a                   	pop    edx
c001ce14:	59                   	pop    ecx
c001ce15:	0f b6 c0             	movzx  eax,al
c001ce18:	50                   	push   eax
c001ce19:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce1e:	99                   	cdq    
c001ce1f:	f7 ff                	idiv   edi
c001ce21:	99                   	cdq    
c001ce22:	f7 fb                	idiv   ebx
c001ce24:	8d 42 30             	lea    eax,[edx+0x30]
c001ce27:	0f b6 c0             	movzx  eax,al
c001ce2a:	50                   	push   eax
c001ce2b:	e8 da f1 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001ce30:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce36:	58                   	pop    eax
c001ce37:	5a                   	pop    edx
c001ce38:	6a 0f                	push   0xf
c001ce3a:	6a 00                	push   0x0
c001ce3c:	e8 da f1 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001ce41:	59                   	pop    ecx
c001ce42:	5a                   	pop    edx
c001ce43:	0f b6 c0             	movzx  eax,al
c001ce46:	50                   	push   eax
c001ce47:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce4c:	99                   	cdq    
c001ce4d:	f7 fb                	idiv   ebx
c001ce4f:	99                   	cdq    
c001ce50:	f7 fb                	idiv   ebx
c001ce52:	8d 42 30             	lea    eax,[edx+0x30]
c001ce55:	0f b6 c0             	movzx  eax,al
c001ce58:	50                   	push   eax
c001ce59:	e8 ac f1 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001ce5e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce64:	59                   	pop    ecx
c001ce65:	58                   	pop    eax
c001ce66:	6a 0f                	push   0xf
c001ce68:	6a 00                	push   0x0
c001ce6a:	e8 ac f1 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001ce6f:	5a                   	pop    edx
c001ce70:	59                   	pop    ecx
c001ce71:	0f b6 c0             	movzx  eax,al
c001ce74:	50                   	push   eax
c001ce75:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7a:	99                   	cdq    
c001ce7b:	f7 fb                	idiv   ebx
c001ce7d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	50                   	push   eax
c001ce84:	e8 81 f1 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001ce89:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce8f:	58                   	pop    eax
c001ce90:	5a                   	pop    edx
c001ce91:	6a 0f                	push   0xf
c001ce93:	6a 00                	push   0x0
c001ce95:	e8 81 f1 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001ce9a:	59                   	pop    ecx
c001ce9b:	b9 10 27 00 00       	mov    ecx,0x2710
c001cea0:	5a                   	pop    edx
c001cea1:	0f b6 c0             	movzx  eax,al
c001cea4:	50                   	push   eax
c001cea5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceaa:	99                   	cdq    
c001ceab:	f7 f9                	idiv   ecx
c001cead:	99                   	cdq    
c001ceae:	f7 fb                	idiv   ebx
c001ceb0:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb3:	0f b6 c0             	movzx  eax,al
c001ceb6:	50                   	push   eax
c001ceb7:	e8 4e f1 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cebc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cec2:	59                   	pop    ecx
c001cec3:	58                   	pop    eax
c001cec4:	6a 0f                	push   0xf
c001cec6:	6a 00                	push   0x0
c001cec8:	e8 4e f1 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cecd:	5a                   	pop    edx
c001cece:	59                   	pop    ecx
c001cecf:	0f b6 c0             	movzx  eax,al
c001ced2:	50                   	push   eax
c001ced3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ced8:	99                   	cdq    
c001ced9:	f7 fd                	idiv   ebp
c001cedb:	99                   	cdq    
c001cedc:	f7 fb                	idiv   ebx
c001cede:	8d 42 30             	lea    eax,[edx+0x30]
c001cee1:	0f b6 c0             	movzx  eax,al
c001cee4:	50                   	push   eax
c001cee5:	e8 20 f1 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001ceea:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cef0:	5d                   	pop    ebp
c001cef1:	58                   	pop    eax
c001cef2:	6a 0f                	push   0xf
c001cef4:	6a 00                	push   0x0
c001cef6:	e8 20 f1 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cefb:	5a                   	pop    edx
c001cefc:	59                   	pop    ecx
c001cefd:	0f b6 c0             	movzx  eax,al
c001cf00:	50                   	push   eax
c001cf01:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf06:	99                   	cdq    
c001cf07:	f7 ff                	idiv   edi
c001cf09:	99                   	cdq    
c001cf0a:	f7 fb                	idiv   ebx
c001cf0c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf0f:	0f b6 c0             	movzx  eax,al
c001cf12:	50                   	push   eax
c001cf13:	e8 f2 f0 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cf18:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf1e:	5f                   	pop    edi
c001cf1f:	5d                   	pop    ebp
c001cf20:	6a 0f                	push   0xf
c001cf22:	6a 00                	push   0x0
c001cf24:	e8 f2 f0 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cf29:	5a                   	pop    edx
c001cf2a:	59                   	pop    ecx
c001cf2b:	0f b6 c0             	movzx  eax,al
c001cf2e:	50                   	push   eax
c001cf2f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf34:	99                   	cdq    
c001cf35:	f7 fb                	idiv   ebx
c001cf37:	99                   	cdq    
c001cf38:	f7 fb                	idiv   ebx
c001cf3a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf3d:	0f b6 c0             	movzx  eax,al
c001cf40:	50                   	push   eax
c001cf41:	e8 c4 f0 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cf46:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf4c:	5f                   	pop    edi
c001cf4d:	5d                   	pop    ebp
c001cf4e:	6a 0f                	push   0xf
c001cf50:	6a 00                	push   0x0
c001cf52:	e8 c4 f0 ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001cf57:	5a                   	pop    edx
c001cf58:	59                   	pop    ecx
c001cf59:	0f b6 c0             	movzx  eax,al
c001cf5c:	50                   	push   eax
c001cf5d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf62:	99                   	cdq    
c001cf63:	f7 fb                	idiv   ebx
c001cf65:	83 c2 30             	add    edx,0x30
c001cf68:	0f b6 d2             	movzx  edx,dl
c001cf6b:	52                   	push   edx
c001cf6c:	e8 99 f0 ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001cf71:	83 c4 10             	add    esp,0x10
c001cf74:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf7a:	eb 05                	jmp    c001cf81 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf7c:	be 01 00 00 00       	mov    esi,0x1
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	89 f0                	mov    eax,esi
c001cf86:	5b                   	pop    ebx
c001cf87:	5e                   	pop    esi
c001cf88:	5f                   	pop    edi
c001cf89:	5d                   	pop    ebp
c001cf8a:	c3                   	ret    
c001cf8b:	90                   	nop

c001cf8c <SATA::write(unsigned long long, int, void*)>:
c001cf8c:	55                   	push   ebp
c001cf8d:	b8 04 00 00 00       	mov    eax,0x4
c001cf92:	57                   	push   edi
c001cf93:	56                   	push   esi
c001cf94:	53                   	push   ebx
c001cf95:	83 ec 1c             	sub    esp,0x1c
c001cf98:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf9c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cfa0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cfa4:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001cfa8:	8d 75 ff             	lea    esi,[ebp-0x1]
c001cfab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cfb1:	0f 87 32 02 00 00    	ja     c001d1e9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cfb7:	b8 06 00 00 00       	mov    eax,0x6
c001cfbc:	85 ff                	test   edi,edi
c001cfbe:	0f 84 25 02 00 00    	je     c001d1e9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cfc4:	89 ee                	mov    esi,ebp
c001cfc6:	c1 e6 09             	shl    esi,0x9
c001cfc9:	01 fe                	add    esi,edi
c001cfcb:	89 c8                	mov    eax,ecx
c001cfcd:	89 da                	mov    edx,ebx
c001cfcf:	83 c0 01             	add    eax,0x1
c001cfd2:	83 d2 00             	adc    edx,0x0
c001cfd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cfd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cfdd:	50                   	push   eax
c001cfde:	50                   	push   eax
c001cfdf:	6a 01                	push   0x1
c001cfe1:	57                   	push   edi
c001cfe2:	81 c7 00 02 00 00    	add    edi,0x200
c001cfe8:	6a 01                	push   0x1
c001cfea:	53                   	push   ebx
c001cfeb:	51                   	push   ecx
c001cfec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cff0:	e8 f3 fa ff ff       	call   c001cae8 <SATA::access(unsigned long long, int, void*, bool)>
c001cff5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cff9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cffd:	83 c4 20             	add    esp,0x20
c001d000:	39 f7                	cmp    edi,esi
c001d002:	75 c7                	jne    c001cfcb <SATA::write(unsigned long long, int, void*)+0x3f>
c001d004:	50                   	push   eax
c001d005:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d00b:	50                   	push   eax
c001d00c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d011:	6a 0f                	push   0xf
c001d013:	bb 0a 00 00 00       	mov    ebx,0xa
c001d018:	6a 00                	push   0x0
c001d01a:	e8 fc ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d01f:	5a                   	pop    edx
c001d020:	59                   	pop    ecx
c001d021:	0f b6 c0             	movzx  eax,al
c001d024:	50                   	push   eax
c001d025:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d02a:	99                   	cdq    
c001d02b:	f7 fd                	idiv   ebp
c001d02d:	99                   	cdq    
c001d02e:	f7 fb                	idiv   ebx
c001d030:	8d 42 30             	lea    eax,[edx+0x30]
c001d033:	0f b6 c0             	movzx  eax,al
c001d036:	50                   	push   eax
c001d037:	e8 ce ef ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d03c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d042:	5e                   	pop    esi
c001d043:	5f                   	pop    edi
c001d044:	bf e8 03 00 00       	mov    edi,0x3e8
c001d049:	6a 0f                	push   0xf
c001d04b:	6a 00                	push   0x0
c001d04d:	e8 c9 ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d052:	5a                   	pop    edx
c001d053:	59                   	pop    ecx
c001d054:	0f b6 c0             	movzx  eax,al
c001d057:	50                   	push   eax
c001d058:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d05d:	99                   	cdq    
c001d05e:	f7 ff                	idiv   edi
c001d060:	99                   	cdq    
c001d061:	f7 fb                	idiv   ebx
c001d063:	8d 42 30             	lea    eax,[edx+0x30]
c001d066:	0f b6 c0             	movzx  eax,al
c001d069:	50                   	push   eax
c001d06a:	e8 9b ef ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d06f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d075:	5e                   	pop    esi
c001d076:	be 64 00 00 00       	mov    esi,0x64
c001d07b:	58                   	pop    eax
c001d07c:	6a 0f                	push   0xf
c001d07e:	6a 00                	push   0x0
c001d080:	e8 96 ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d085:	5a                   	pop    edx
c001d086:	59                   	pop    ecx
c001d087:	0f b6 c0             	movzx  eax,al
c001d08a:	50                   	push   eax
c001d08b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d090:	99                   	cdq    
c001d091:	f7 fe                	idiv   esi
c001d093:	99                   	cdq    
c001d094:	f7 fb                	idiv   ebx
c001d096:	8d 42 30             	lea    eax,[edx+0x30]
c001d099:	0f b6 c0             	movzx  eax,al
c001d09c:	50                   	push   eax
c001d09d:	e8 68 ef ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d0a2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0a8:	58                   	pop    eax
c001d0a9:	5a                   	pop    edx
c001d0aa:	6a 0f                	push   0xf
c001d0ac:	6a 00                	push   0x0
c001d0ae:	e8 68 ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d0b3:	59                   	pop    ecx
c001d0b4:	5a                   	pop    edx
c001d0b5:	0f b6 c0             	movzx  eax,al
c001d0b8:	50                   	push   eax
c001d0b9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0be:	99                   	cdq    
c001d0bf:	f7 fb                	idiv   ebx
c001d0c1:	99                   	cdq    
c001d0c2:	f7 fb                	idiv   ebx
c001d0c4:	8d 42 30             	lea    eax,[edx+0x30]
c001d0c7:	0f b6 c0             	movzx  eax,al
c001d0ca:	50                   	push   eax
c001d0cb:	e8 3a ef ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d0d0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0d6:	59                   	pop    ecx
c001d0d7:	58                   	pop    eax
c001d0d8:	6a 0f                	push   0xf
c001d0da:	6a 00                	push   0x0
c001d0dc:	e8 3a ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d0e1:	5a                   	pop    edx
c001d0e2:	59                   	pop    ecx
c001d0e3:	0f b6 c0             	movzx  eax,al
c001d0e6:	50                   	push   eax
c001d0e7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0ec:	99                   	cdq    
c001d0ed:	f7 fb                	idiv   ebx
c001d0ef:	83 c2 30             	add    edx,0x30
c001d0f2:	0f b6 d2             	movzx  edx,dl
c001d0f5:	52                   	push   edx
c001d0f6:	e8 0f ef ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d0fb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d101:	58                   	pop    eax
c001d102:	5a                   	pop    edx
c001d103:	6a 0f                	push   0xf
c001d105:	6a 00                	push   0x0
c001d107:	e8 0f ef ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d10c:	59                   	pop    ecx
c001d10d:	5a                   	pop    edx
c001d10e:	0f b6 c0             	movzx  eax,al
c001d111:	50                   	push   eax
c001d112:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d117:	99                   	cdq    
c001d118:	f7 fd                	idiv   ebp
c001d11a:	99                   	cdq    
c001d11b:	f7 fb                	idiv   ebx
c001d11d:	8d 42 30             	lea    eax,[edx+0x30]
c001d120:	0f b6 c0             	movzx  eax,al
c001d123:	50                   	push   eax
c001d124:	e8 e1 ee ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d129:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d12f:	59                   	pop    ecx
c001d130:	5d                   	pop    ebp
c001d131:	6a 0f                	push   0xf
c001d133:	6a 00                	push   0x0
c001d135:	e8 e1 ee ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d13a:	5a                   	pop    edx
c001d13b:	59                   	pop    ecx
c001d13c:	0f b6 c0             	movzx  eax,al
c001d13f:	50                   	push   eax
c001d140:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d145:	99                   	cdq    
c001d146:	f7 ff                	idiv   edi
c001d148:	99                   	cdq    
c001d149:	f7 fb                	idiv   ebx
c001d14b:	8d 42 30             	lea    eax,[edx+0x30]
c001d14e:	0f b6 c0             	movzx  eax,al
c001d151:	50                   	push   eax
c001d152:	e8 b3 ee ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d157:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d15d:	5f                   	pop    edi
c001d15e:	5d                   	pop    ebp
c001d15f:	6a 0f                	push   0xf
c001d161:	6a 00                	push   0x0
c001d163:	e8 b3 ee ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d168:	5a                   	pop    edx
c001d169:	59                   	pop    ecx
c001d16a:	0f b6 c0             	movzx  eax,al
c001d16d:	50                   	push   eax
c001d16e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d173:	99                   	cdq    
c001d174:	f7 fe                	idiv   esi
c001d176:	99                   	cdq    
c001d177:	f7 fb                	idiv   ebx
c001d179:	8d 42 30             	lea    eax,[edx+0x30]
c001d17c:	0f b6 c0             	movzx  eax,al
c001d17f:	50                   	push   eax
c001d180:	e8 85 ee ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d185:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d18b:	5e                   	pop    esi
c001d18c:	5f                   	pop    edi
c001d18d:	6a 0f                	push   0xf
c001d18f:	6a 00                	push   0x0
c001d191:	e8 85 ee ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d196:	5d                   	pop    ebp
c001d197:	5a                   	pop    edx
c001d198:	0f b6 c0             	movzx  eax,al
c001d19b:	50                   	push   eax
c001d19c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1a1:	99                   	cdq    
c001d1a2:	f7 fb                	idiv   ebx
c001d1a4:	99                   	cdq    
c001d1a5:	f7 fb                	idiv   ebx
c001d1a7:	8d 42 30             	lea    eax,[edx+0x30]
c001d1aa:	0f b6 c0             	movzx  eax,al
c001d1ad:	50                   	push   eax
c001d1ae:	e8 57 ee ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d1b3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d1b9:	59                   	pop    ecx
c001d1ba:	5e                   	pop    esi
c001d1bb:	6a 0f                	push   0xf
c001d1bd:	6a 00                	push   0x0
c001d1bf:	e8 57 ee ff ff       	call   c001c01b <combineColours(unsigned char, unsigned char)>
c001d1c4:	5f                   	pop    edi
c001d1c5:	5d                   	pop    ebp
c001d1c6:	0f b6 c0             	movzx  eax,al
c001d1c9:	50                   	push   eax
c001d1ca:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1cf:	99                   	cdq    
c001d1d0:	f7 fb                	idiv   ebx
c001d1d2:	83 c2 30             	add    edx,0x30
c001d1d5:	0f b6 d2             	movzx  edx,dl
c001d1d8:	52                   	push   edx
c001d1d9:	e8 2c ee ff ff       	call   c001c00a <combineCharAndColour(char, unsigned char)>
c001d1de:	83 c4 10             	add    esp,0x10
c001d1e1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d1e7:	31 c0                	xor    eax,eax
c001d1e9:	83 c4 1c             	add    esp,0x1c
c001d1ec:	5b                   	pop    ebx
c001d1ed:	5e                   	pop    esi
c001d1ee:	5f                   	pop    edi
c001d1ef:	5d                   	pop    ebp
c001d1f0:	c3                   	ret    
c001d1f1:	90                   	nop

c001d1f2 <SATAPI::write(unsigned long long, int, void*)>:
c001d1f2:	b8 03 00 00 00       	mov    eax,0x3
c001d1f7:	c3                   	ret    

c001d1f8 <SATAPI::close(int, int, void*)>:
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d205:	85 c0                	test   eax,eax
c001d207:	74 0c                	je     c001d215 <SATAPI::close(int, int, void*)+0x1d>
c001d209:	83 ec 0c             	sub    esp,0xc
c001d20c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d20e:	50                   	push   eax
c001d20f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d212:	83 c4 10             	add    esp,0x10
c001d215:	31 c0                	xor    eax,eax
c001d217:	83 c4 0c             	add    esp,0xc
c001d21a:	c3                   	ret    
c001d21b:	90                   	nop

c001d21c <SATAPI::SATAPI()>:
c001d21c:	83 ec 0c             	sub    esp,0xc
c001d21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d223:	83 ec 04             	sub    esp,0x4
c001d226:	68 00 08 00 00       	push   0x800
c001d22b:	68 14 1c 02 c0       	push   0xc0021c14
c001d230:	50                   	push   eax
c001d231:	e8 10 ef fe ff       	call   c000c146 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d236:	83 c4 10             	add    esp,0x10
c001d239:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001d23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d242:	89 10                	mov    DWORD PTR [eax],edx
c001d244:	90                   	nop
c001d245:	83 c4 0c             	add    esp,0xc
c001d248:	c3                   	ret    
c001d249:	90                   	nop

c001d24a <SATAPI::diskRemoved()>:
c001d24a:	c3                   	ret    
c001d24b:	90                   	nop

c001d24c <SATAPI::diskInserted()>:
c001d24c:	83 ec 18             	sub    esp,0x18
c001d24f:	68 20 1c 02 c0       	push   0xc0021c20
c001d254:	e8 f0 d6 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001d259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d25d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d264:	83 c4 1c             	add    esp,0x1c
c001d267:	c3                   	ret    

c001d268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d268:	55                   	push   ebp
c001d269:	57                   	push   edi
c001d26a:	56                   	push   esi
c001d26b:	53                   	push   ebx
c001d26c:	83 ec 34             	sub    esp,0x34
c001d26f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d273:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d277:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d27b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d27f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d285:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d289:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d28f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d293:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d299:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d29d:	83 c0 02             	add    eax,0x2
c001d2a0:	c1 e0 07             	shl    eax,0x7
c001d2a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2af:	c1 e0 07             	shl    eax,0x7
c001d2b2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2ba:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d2c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2c8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d2ce:	e8 f1 e4 ff ff       	call   c001b7c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d2d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2d7:	83 c4 10             	add    esp,0x10
c001d2da:	b8 01 00 00 00       	mov    eax,0x1
c001d2df:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d2e4:	0f 84 53 02 00 00    	je     c001d53d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ee:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2f6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d2fc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d302:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d306:	c1 e1 05             	shl    ecx,0x5
c001d309:	01 c8                	add    eax,ecx
c001d30b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d30d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d313:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d319:	89 08                	mov    DWORD PTR [eax],ecx
c001d31b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d321:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d327:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d32d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d330:	50                   	push   eax
c001d331:	68 90 00 00 00       	push   0x90
c001d336:	6a 00                	push   0x0
c001d338:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d33b:	53                   	push   ebx
c001d33c:	e8 9f 31 fe ff       	call   c00004e0 <memset>
c001d341:	b9 0c 00 00 00       	mov    ecx,0xc
c001d346:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d34a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d34c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d352:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d356:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d35c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d360:	48                   	dec    eax
c001d361:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d365:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d36a:	89 c1                	mov    ecx,eax
c001d36c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d372:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d377:	09 c8                	or     eax,ecx
c001d379:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d37f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d385:	83 c8 80             	or     eax,0xffffff80
c001d388:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d38e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d391:	25 00 7f 00 00       	and    eax,0x7f00
c001d396:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d39a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d39f:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d3a3:	66 89 03             	mov    WORD PTR [ebx],ax
c001d3a6:	89 d0                	mov    eax,edx
c001d3a8:	c1 e8 10             	shr    eax,0x10
c001d3ab:	c1 ea 18             	shr    edx,0x18
c001d3ae:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d3b1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3b5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d3b8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d3bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3bf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d3c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d3cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3d1:	31 c0                	xor    eax,eax
c001d3d3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d3d9:	80 e1 88             	and    cl,0x88
c001d3dc:	74 0a                	je     c001d3e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d3de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3e3:	74 0a                	je     c001d3ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d3e5:	40                   	inc    eax
c001d3e6:	eb eb                	jmp    c001d3d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d3e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3ed:	75 43                	jne    c001d432 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d3ef:	83 ec 0c             	sub    esp,0xc
c001d3f2:	68 38 1c 02 c0       	push   0xc0021c38
c001d3f7:	e8 4d d5 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001d3fc:	58                   	pop    eax
c001d3fd:	5a                   	pop    edx
c001d3fe:	68 4d 1c 02 c0       	push   0xc0021c4d
c001d403:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d409:	e8 6e b6 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c001d40e:	59                   	pop    ecx
c001d40f:	5b                   	pop    ebx
c001d410:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d414:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d41a:	e8 3f e4 ff ff       	call   c001b85e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d41f:	5e                   	pop    esi
c001d420:	5f                   	pop    edi
c001d421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d425:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d42b:	e8 0e e4 ff ff       	call   c001b83e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d430:	eb 48                	jmp    c001d47a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d432:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d436:	be 01 00 00 00       	mov    esi,0x1
c001d43b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d43f:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d444:	c1 e7 07             	shl    edi,0x7
c001d447:	d3 e6                	shl    esi,cl
c001d449:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d44d:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d453:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d459:	85 c6                	test   esi,eax
c001d45b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d461:	0f 84 a3 00 00 00    	je     c001d50a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d467:	0f ba e0 1e          	bt     eax,0x1e
c001d46b:	73 1a                	jae    c001d487 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d46d:	83 ec 0c             	sub    esp,0xc
c001d470:	68 5f 1c 02 c0       	push   0xc0021c5f
c001d475:	e8 cf d4 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	b8 01 00 00 00       	mov    eax,0x1
c001d482:	e9 b6 00 00 00       	jmp    c001d53d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d487:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d48d:	83 f8 0d             	cmp    eax,0xd
c001d490:	77 0a                	ja     c001d49c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	68 c8 00 00 00       	push   0xc8
c001d49a:	eb 28                	jmp    c001d4c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d49c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d4a2:	83 f8 0d             	cmp    eax,0xd
c001d4a5:	77 0a                	ja     c001d4b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d4a7:	83 ec 0c             	sub    esp,0xc
c001d4aa:	68 58 02 00 00       	push   0x258
c001d4af:	eb 13                	jmp    c001d4c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d4b1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d4b7:	83 f8 06             	cmp    eax,0x6
c001d4ba:	77 10                	ja     c001d4cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	68 dc 05 00 00       	push   0x5dc
c001d4c4:	e8 93 7e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d4d0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d4d3:	75 06                	jne    c001d4db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d4d5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d4d9:	74 15                	je     c001d4f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4db:	83 fb 06             	cmp    ebx,0x6
c001d4de:	77 10                	ja     c001d4f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4e0:	83 ec 0c             	sub    esp,0xc
c001d4e3:	68 c4 09 00 00       	push   0x9c4
c001d4e8:	e8 6f 7e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001d4ed:	83 c4 10             	add    esp,0x10
c001d4f0:	43                   	inc    ebx
c001d4f1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d4f7:	0f 85 56 ff ff ff    	jne    c001d453 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	68 72 1c 02 c0       	push   0xc0021c72
c001d505:	e9 6b ff ff ff       	jmp    c001d475 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d50a:	0f ba e0 1e          	bt     eax,0x1e
c001d50e:	73 0d                	jae    c001d51d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	68 86 1c 02 c0       	push   0xc0021c86
c001d518:	e9 58 ff ff ff       	jmp    c001d475 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d51d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d522:	74 17                	je     c001d53b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d524:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d529:	74 10                	je     c001d53b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d52b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d531:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d535:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d53b:	31 c0                	xor    eax,eax
c001d53d:	83 c4 2c             	add    esp,0x2c
c001d540:	5b                   	pop    ebx
c001d541:	5e                   	pop    esi
c001d542:	5f                   	pop    edi
c001d543:	5d                   	pop    ebp
c001d544:	c3                   	ret    
c001d545:	90                   	nop

c001d546 <SATAPI::eject()>:
c001d546:	57                   	push   edi
c001d547:	b9 03 00 00 00       	mov    ecx,0x3
c001d54c:	83 ec 18             	sub    esp,0x18
c001d54f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d553:	fc                   	cld    
c001d554:	31 c0                	xor    eax,eax
c001d556:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d558:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d55d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d562:	50                   	push   eax
c001d563:	6a 00                	push   0x0
c001d565:	6a 00                	push   0x0
c001d567:	6a 00                	push   0x0
c001d569:	6a 00                	push   0x0
c001d56b:	6a 02                	push   0x2
c001d56d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d571:	50                   	push   eax
c001d572:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d576:	e8 ed fc ff ff       	call   c001d268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d57b:	83 c4 38             	add    esp,0x38
c001d57e:	31 c0                	xor    eax,eax
c001d580:	5f                   	pop    edi
c001d581:	c3                   	ret    

c001d582 <SATAPI::detectMedia()>:
c001d582:	53                   	push   ebx
c001d583:	83 ec 14             	sub    esp,0x14
c001d586:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d58a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d590:	e8 3f 05 ff ff       	call   c000dad4 <VCache::writeWriteBuffer()>
c001d595:	59                   	pop    ecx
c001d596:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d59c:	e8 23 05 ff ff       	call   c000dac4 <VCache::invalidateReadBuffer()>
c001d5a1:	c7 04 24 9b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c9b
c001d5a8:	e8 9c d3 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	31 c0                	xor    eax,eax
c001d5b2:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d5b9:	85 d2                	test   edx,edx
c001d5bb:	74 0f                	je     c001d5cc <SATAPI::detectMedia()+0x4a>
c001d5bd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d5c3:	75 07                	jne    c001d5cc <SATAPI::detectMedia()+0x4a>
c001d5c5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d5cc:	40                   	inc    eax
c001d5cd:	83 f8 1a             	cmp    eax,0x1a
c001d5d0:	75 e0                	jne    c001d5b2 <SATAPI::detectMedia()+0x30>
c001d5d2:	83 c4 08             	add    esp,0x8
c001d5d5:	5b                   	pop    ebx
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <SATAPI::open(int, int, void*)>:
c001d5d8:	56                   	push   esi
c001d5d9:	53                   	push   ebx
c001d5da:	51                   	push   ecx
c001d5db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5ed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5f3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d607:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d611:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d618:	e8 75 a7 fe ff       	call   c0007d92 <Phys::allocatePage()>
c001d61d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d623:	89 c6                	mov    esi,eax
c001d625:	e8 68 a7 fe ff       	call   c0007d92 <Phys::allocatePage()>
c001d62a:	81 c6 00 10 00 00    	add    esi,0x1000
c001d630:	39 c6                	cmp    esi,eax
c001d632:	74 10                	je     c001d644 <SATAPI::open(int, int, void*)+0x6c>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	68 b0 1c 02 c0       	push   0xc0021cb0
c001d63c:	e8 f6 31 ff ff       	call   c0010837 <KePanic(char const*)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	83 ec 0c             	sub    esp,0xc
c001d647:	6a 02                	push   0x2
c001d649:	e8 9b bf fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001d64e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d654:	6a 03                	push   0x3
c001d656:	50                   	push   eax
c001d657:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d65d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d663:	e8 68 c6 fe ff       	call   c0009cd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d668:	83 c4 14             	add    esp,0x14
c001d66b:	68 78 01 00 00       	push   0x178
c001d670:	e8 12 a4 fe ff       	call   c0007a87 <malloc>
c001d675:	83 c4 0c             	add    esp,0xc
c001d678:	89 c6                	mov    esi,eax
c001d67a:	6a 00                	push   0x0
c001d67c:	68 ff ff ff 7f       	push   0x7fffffff
c001d681:	6a 00                	push   0x0
c001d683:	6a 00                	push   0x0
c001d685:	53                   	push   ebx
c001d686:	68 c6 1c 02 c0       	push   0xc0021cc6
c001d68b:	50                   	push   eax
c001d68c:	e8 9d f8 fe ff       	call   c000cf2e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d691:	83 c4 14             	add    esp,0x14
c001d694:	56                   	push   esi
c001d695:	e8 54 f9 fe ff       	call   c000cfee <LogicalDisk::assignDriveLetter()>
c001d69a:	5a                   	pop    edx
c001d69b:	59                   	pop    ecx
c001d69c:	0f be c0             	movsx  eax,al
c001d69f:	50                   	push   eax
c001d6a0:	68 18 1b 02 c0       	push   0xc0021b18
c001d6a5:	e8 9f d2 fe ff       	call   c000a949 <Dbg::kprintf(char const*, ...)>
c001d6aa:	58                   	pop    eax
c001d6ab:	5a                   	pop    edx
c001d6ac:	56                   	push   esi
c001d6ad:	53                   	push   ebx
c001d6ae:	e8 c7 e6 fe ff       	call   c000bd7a <Device::addChild(Device*)>
c001d6b3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d6b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6bc:	e8 ed ea fe ff       	call   c000c1ae <PhysicalDisk::startCache()>
c001d6c1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d6c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6cb:	e8 b2 fe ff ff       	call   c001d582 <SATAPI::detectMedia()>
c001d6d0:	83 c4 14             	add    esp,0x14
c001d6d3:	31 c0                	xor    eax,eax
c001d6d5:	5b                   	pop    ebx
c001d6d6:	5e                   	pop    esi
c001d6d7:	c3                   	ret    

c001d6d8 <SATAPI::read(unsigned long long, int, void*)>:
c001d6d8:	57                   	push   edi
c001d6d9:	56                   	push   esi
c001d6da:	53                   	push   ebx
c001d6db:	83 ec 30             	sub    esp,0x30
c001d6de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6e2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d6e6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d6ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6f6:	83 fe 04             	cmp    esi,0x4
c001d6f9:	7e 10                	jle    c001d70b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d6fb:	83 ec 0c             	sub    esp,0xc
c001d6fe:	68 d4 1c 02 c0       	push   0xc0021cd4
c001d703:	e8 2f 31 ff ff       	call   c0010837 <KePanic(char const*)>
c001d708:	83 c4 10             	add    esp,0x10
c001d70b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d711:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d717:	51                   	push   ecx
c001d718:	50                   	push   eax
c001d719:	83 c0 02             	add    eax,0x2
c001d71c:	c1 e0 07             	shl    eax,0x7
c001d71f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d725:	50                   	push   eax
c001d726:	52                   	push   edx
c001d727:	e8 5c e1 ff ff       	call   c001b888 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d72c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d730:	b9 03 00 00 00       	mov    ecx,0x3
c001d735:	fc                   	cld    
c001d736:	31 c0                	xor    eax,eax
c001d738:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d73a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d73f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d744:	83 c4 0c             	add    esp,0xc
c001d747:	6a 00                	push   0x0
c001d749:	6a 00                	push   0x0
c001d74b:	6a 00                	push   0x0
c001d74d:	6a 00                	push   0x0
c001d74f:	6a 02                	push   0x2
c001d751:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d755:	50                   	push   eax
c001d756:	53                   	push   ebx
c001d757:	e8 0c fb ff ff       	call   c001d268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d75c:	83 c4 20             	add    esp,0x20
c001d75f:	85 c0                	test   eax,eax
c001d761:	75 44                	jne    c001d7a7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d763:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d767:	b9 03 00 00 00       	mov    ecx,0x3
c001d76c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d76e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d772:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d777:	0f c8                	bswap  eax
c001d779:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d77d:	89 f0                	mov    eax,esi
c001d77f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d783:	50                   	push   eax
c001d784:	56                   	push   esi
c001d785:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d789:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d78d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d791:	c1 e6 0b             	shl    esi,0xb
c001d794:	56                   	push   esi
c001d795:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d799:	50                   	push   eax
c001d79a:	53                   	push   ebx
c001d79b:	e8 c8 fa ff ff       	call   c001d268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7a0:	83 c4 20             	add    esp,0x20
c001d7a3:	85 c0                	test   eax,eax
c001d7a5:	74 14                	je     c001d7bb <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d7a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7ab:	83 ec 0c             	sub    esp,0xc
c001d7ae:	53                   	push   ebx
c001d7af:	e8 ce fd ff ff       	call   c001d582 <SATAPI::detectMedia()>
c001d7b4:	83 c4 10             	add    esp,0x10
c001d7b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7bb:	83 c4 30             	add    esp,0x30
c001d7be:	5b                   	pop    ebx
c001d7bf:	5e                   	pop    esi
c001d7c0:	5f                   	pop    edi
c001d7c1:	c3                   	ret    

c001d7c2 <IOAPIC::close(int, int, void*)>:
c001d7c2:	b8 00 00 00 00       	mov    eax,0x0
c001d7c7:	c3                   	ret    

c001d7c8 <apicGetBase()>:
c001d7c8:	55                   	push   ebp
c001d7c9:	89 e5                	mov    ebp,esp
c001d7cb:	83 ec 18             	sub    esp,0x18
c001d7ce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d7d9:	83 e0 08             	and    eax,0x8
c001d7dc:	0f b6 c0             	movzx  eax,al
c001d7df:	85 c0                	test   eax,eax
c001d7e1:	75 07                	jne    c001d7ea <apicGetBase()+0x22>
c001d7e3:	b8 00 00 00 00       	mov    eax,0x0
c001d7e8:	eb 21                	jmp    c001d80b <apicGetBase()+0x43>
c001d7ea:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7ef:	83 ec 08             	sub    esp,0x8
c001d7f2:	6a 1b                	push   0x1b
c001d7f4:	50                   	push   eax
c001d7f5:	e8 b0 98 fe ff       	call   c00070aa <Computer::rdmsr(unsigned int)>
c001d7fa:	83 c4 10             	add    esp,0x10
c001d7fd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d800:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d803:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d806:	25 00 00 ff ff       	and    eax,0xffff0000
c001d80b:	c9                   	leave  
c001d80c:	c3                   	ret    
c001d80d:	90                   	nop

c001d80e <IOAPIC::IOAPIC()>:
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d815:	83 ec 08             	sub    esp,0x8
c001d818:	68 38 1d 02 c0       	push   0xc0021d38
c001d81d:	50                   	push   eax
c001d81e:	e8 ef e6 fe ff       	call   c000bf12 <Device::Device(char const*)>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c001d82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82f:	89 10                	mov    DWORD PTR [eax],edx
c001d831:	90                   	nop
c001d832:	83 c4 0c             	add    esp,0xc
c001d835:	c3                   	ret    

c001d836 <apicOpen()>:
c001d836:	55                   	push   ebp
c001d837:	89 e5                	mov    ebp,esp
c001d839:	53                   	push   ebx
c001d83a:	83 ec 34             	sub    esp,0x34
c001d83d:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d842:	83 f0 01             	xor    eax,0x1
c001d845:	0f b6 c0             	movzx  eax,al
c001d848:	85 c0                	test   eax,eax
c001d84a:	0f 84 a3 00 00 00    	je     c001d8f3 <apicOpen()+0xbd>
c001d850:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d854:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d859:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d85d:	0f b6 c0             	movzx  eax,al
c001d860:	39 c2                	cmp    edx,eax
c001d862:	0f 83 84 00 00 00    	jae    c001d8ec <apicOpen()+0xb6>
c001d868:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d86f:	83 ec 0c             	sub    esp,0xc
c001d872:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d875:	e8 0d a2 fe ff       	call   c0007a87 <malloc>
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	89 c3                	mov    ebx,eax
c001d87f:	83 ec 0c             	sub    esp,0xc
c001d882:	53                   	push   ebx
c001d883:	e8 86 ff ff ff       	call   c001d80e <IOAPIC::IOAPIC()>
c001d888:	83 c4 10             	add    esp,0x10
c001d88b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d88e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d892:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d895:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d89c:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d8a1:	83 c0 01             	add    eax,0x1
c001d8a4:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d8a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d8ae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d8b4:	83 ec 08             	sub    esp,0x8
c001d8b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8ba:	50                   	push   eax
c001d8bb:	e8 ba e4 fe ff       	call   c000bd7a <Device::addChild(Device*)>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8c8:	83 c0 08             	add    eax,0x8
c001d8cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8cd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8d1:	6a 00                	push   0x0
c001d8d3:	6a 00                	push   0x0
c001d8d5:	52                   	push   edx
c001d8d6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8d9:	ff d0                	call   eax
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d8e1:	83 c0 01             	add    eax,0x1
c001d8e4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8e7:	e9 68 ff ff ff       	jmp    c001d854 <apicOpen()+0x1e>
c001d8ec:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d8f3:	e8 d0 fe ff ff       	call   c001d7c8 <apicGetBase()>
c001d8f8:	05 f0 00 00 00       	add    eax,0xf0
c001d8fd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d900:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d903:	8b 00                	mov    eax,DWORD PTR [eax]
c001d905:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d908:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d90f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d916:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d919:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d91c:	89 10                	mov    DWORD PTR [eax],edx
c001d91e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d925:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d92a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d92d:	7d 7c                	jge    c001d9ab <apicOpen()+0x175>
c001d92f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d932:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d939:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d93c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d93f:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d946:	c1 e8 08             	shr    eax,0x8
c001d949:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d94d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d950:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d957:	c1 e8 18             	shr    eax,0x18
c001d95a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d95d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d961:	3d ff 00 00 00       	cmp    eax,0xff
c001d966:	75 3a                	jne    c001d9a2 <apicOpen()+0x16c>
c001d968:	e8 5b fe ff ff       	call   c001d7c8 <apicGetBase()>
c001d96d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d971:	83 fa 01             	cmp    edx,0x1
c001d974:	75 07                	jne    c001d97d <apicOpen()+0x147>
c001d976:	ba 60 03 00 00       	mov    edx,0x360
c001d97b:	eb 05                	jmp    c001d982 <apicOpen()+0x14c>
c001d97d:	ba 50 03 00 00       	mov    edx,0x350
c001d982:	01 d0                	add    eax,edx
c001d984:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d987:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d98a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d98c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d98f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d996:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d99a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d99d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d9a0:	89 10                	mov    DWORD PTR [eax],edx
c001d9a2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d9a6:	e9 7a ff ff ff       	jmp    c001d925 <apicOpen()+0xef>
c001d9ab:	90                   	nop
c001d9ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d9af:	c9                   	leave  
c001d9b0:	c3                   	ret    
c001d9b1:	90                   	nop

c001d9b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d9b2:	55                   	push   ebp
c001d9b3:	89 e5                	mov    ebp,esp
c001d9b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9be:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9c1:	72 1d                	jb     c001d9e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9c6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d9cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9cf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9d5:	01 d0                	add    eax,edx
c001d9d7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9da:	73 04                	jae    c001d9e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9dc:	b0 01                	mov    al,0x1
c001d9de:	eb 02                	jmp    c001d9e2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d9e0:	b0 00                	mov    al,0x0
c001d9e2:	5d                   	pop    ebp
c001d9e3:	c3                   	ret    

c001d9e4 <IOAPIC::read(int)>:
c001d9e4:	55                   	push   ebp
c001d9e5:	89 e5                	mov    ebp,esp
c001d9e7:	83 ec 10             	sub    esp,0x10
c001d9ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9f3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9f9:	0f b6 d0             	movzx  edx,al
c001d9fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9ff:	89 10                	mov    DWORD PTR [eax],edx
c001da01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da04:	83 c0 10             	add    eax,0x10
c001da07:	8b 00                	mov    eax,DWORD PTR [eax]
c001da09:	c9                   	leave  
c001da0a:	c3                   	ret    
c001da0b:	90                   	nop

c001da0c <IOAPIC::open(int, int, void*)>:
c001da0c:	55                   	push   ebp
c001da0d:	89 e5                	mov    ebp,esp
c001da0f:	57                   	push   edi
c001da10:	56                   	push   esi
c001da11:	53                   	push   ebx
c001da12:	83 ec 04             	sub    esp,0x4
c001da15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da24:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da2a:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da43:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da56:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da65:	0f b6 f0             	movzx  esi,al
c001da68:	89 d0                	mov    eax,edx
c001da6a:	ba 00 00 00 00       	mov    edx,0x0
c001da6f:	89 c7                	mov    edi,eax
c001da71:	83 e7 ff             	and    edi,0xffffffff
c001da74:	89 f9                	mov    ecx,edi
c001da76:	0f b6 da             	movzx  ebx,dl
c001da79:	89 c8                	mov    eax,ecx
c001da7b:	89 da                	mov    edx,ebx
c001da7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da80:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da83:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da87:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da8b:	83 e0 00             	and    eax,0x0
c001da8e:	09 d0                	or     eax,edx
c001da90:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da9d:	8d 50 01             	lea    edx,[eax+0x1]
c001daa0:	88 d1                	mov    cl,dl
c001daa2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001daa5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001daab:	0f b6 d0             	movzx  edx,al
c001daae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab1:	83 c2 08             	add    edx,0x8
c001dab4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dab8:	0f b6 c9             	movzx  ecx,cl
c001dabb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001dac1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dac5:	6a 01                	push   0x1
c001dac7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daca:	e8 15 ff ff ff       	call   c001d9e4 <IOAPIC::read(int)>
c001dacf:	83 c4 08             	add    esp,0x8
c001dad2:	c1 f8 10             	sar    eax,0x10
c001dad5:	0f b6 c0             	movzx  eax,al
c001dad8:	8d 50 01             	lea    edx,[eax+0x1]
c001dadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dade:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dae4:	b8 00 00 00 00       	mov    eax,0x0
c001dae9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001daec:	5b                   	pop    ebx
c001daed:	5e                   	pop    esi
c001daee:	5f                   	pop    edi
c001daef:	5d                   	pop    ebp
c001daf0:	c3                   	ret    
c001daf1:	90                   	nop

c001daf2 <IOAPIC::write(int, int)>:
c001daf2:	55                   	push   ebp
c001daf3:	89 e5                	mov    ebp,esp
c001daf5:	83 ec 10             	sub    esp,0x10
c001daf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dafb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001db04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db07:	0f b6 d0             	movzx  edx,al
c001db0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db0d:	89 10                	mov    DWORD PTR [eax],edx
c001db0f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db12:	8d 50 10             	lea    edx,[eax+0x10]
c001db15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db18:	89 02                	mov    DWORD PTR [edx],eax
c001db1a:	90                   	nop
c001db1b:	c9                   	leave  
c001db1c:	c3                   	ret    
c001db1d:	90                   	nop

c001db1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db1e:	55                   	push   ebp
c001db1f:	89 e5                	mov    ebp,esp
c001db21:	53                   	push   ebx
c001db22:	83 ec 2c             	sub    esp,0x2c
c001db25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db28:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db2b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db2e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db34:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db37:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db3a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db40:	88 d8                	mov    al,bl
c001db42:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db45:	88 c8                	mov    al,cl
c001db47:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db4a:	88 d0                	mov    al,dl
c001db4c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db4f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db53:	83 c0 08             	add    eax,0x8
c001db56:	d1 e0                	shl    eax,1
c001db58:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db5b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db5f:	83 c0 08             	add    eax,0x8
c001db62:	d1 e0                	shl    eax,1
c001db64:	83 c0 01             	add    eax,0x1
c001db67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db6d:	50                   	push   eax
c001db6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db71:	e8 6e fe ff ff       	call   c001d9e4 <IOAPIC::read(int)>
c001db76:	83 c4 08             	add    esp,0x8
c001db79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db86:	c1 e0 18             	shl    eax,0x18
c001db89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db92:	52                   	push   edx
c001db93:	50                   	push   eax
c001db94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db97:	e8 56 ff ff ff       	call   c001daf2 <IOAPIC::write(int, int)>
c001db9c:	83 c4 0c             	add    esp,0xc
c001db9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dba2:	50                   	push   eax
c001dba3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dba6:	e8 39 fe ff ff       	call   c001d9e4 <IOAPIC::read(int)>
c001dbab:	83 c4 08             	add    esp,0x8
c001dbae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dbb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dbb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dbbf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dbc6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dbca:	85 c0                	test   eax,eax
c001dbcc:	74 09                	je     c001dbd7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dbce:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dbd5:	eb 07                	jmp    c001dbde <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dbd7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dbde:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dbe2:	85 c0                	test   eax,eax
c001dbe4:	74 09                	je     c001dbef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dbe6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dbed:	eb 07                	jmp    c001dbf6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dbef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dbf6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dbfd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc01:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dc04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dc07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc0a:	52                   	push   edx
c001dc0b:	50                   	push   eax
c001dc0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc0f:	e8 de fe ff ff       	call   c001daf2 <IOAPIC::write(int, int)>
c001dc14:	83 c4 0c             	add    esp,0xc
c001dc17:	90                   	nop
c001dc18:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc1b:	c9                   	leave  
c001dc1c:	c3                   	ret    
c001dc1d:	66 90                	xchg   ax,ax
c001dc1f:	90                   	nop

c001dc20 <APICTimer::close(int, int, void*)>:
c001dc20:	b8 00 00 00 00       	mov    eax,0x0
c001dc25:	c3                   	ret    
c001dc26:	66 90                	xchg   ax,ax

c001dc28 <apicTimerHandler(regs*, void*)>:
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc31:	b8 10 27 00 00       	mov    eax,0x2710
c001dc36:	ba 00 00 00 00       	mov    edx,0x0
c001dc3b:	f7 f1                	div    ecx
c001dc3d:	83 ec 0c             	sub    esp,0xc
c001dc40:	50                   	push   eax
c001dc41:	e8 a6 fb fe ff       	call   c000d7ec <timerHandler(unsigned int)>
c001dc46:	83 c4 10             	add    esp,0x10
c001dc49:	90                   	nop
c001dc4a:	83 c4 0c             	add    esp,0xc
c001dc4d:	c3                   	ret    
c001dc4e:	66 90                	xchg   ax,ax

c001dc50 <APICTimer::open(int, int, void*)>:
c001dc50:	83 ec 0c             	sub    esp,0xc
c001dc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc57:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc59:	83 c0 24             	add    eax,0x24
c001dc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc5e:	83 ec 08             	sub    esp,0x8
c001dc61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc69:	ff d0                	call   eax
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc84:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	51                   	push   ecx
c001dc98:	6a 01                	push   0x1
c001dc9a:	68 28 dc 01 c0       	push   0xc001dc28
c001dc9f:	52                   	push   edx
c001dca0:	50                   	push   eax
c001dca1:	e8 80 e0 fe ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dca6:	83 c4 20             	add    esp,0x20
c001dca9:	89 c2                	mov    edx,eax
c001dcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcaf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dcb5:	b8 00 00 00 00       	mov    eax,0x0
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	c3                   	ret    
c001dcbe:	66 90                	xchg   ax,ax

c001dcc0 <APICTimer::write(int)>:
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	83 ec 0c             	sub    esp,0xc
c001dcc6:	68 6c 1d 02 c0       	push   0xc0021d6c
c001dccb:	e8 67 2b ff ff       	call   c0010837 <KePanic(char const*)>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dce1:	90                   	nop
c001dce2:	83 c4 0c             	add    esp,0xc
c001dce5:	c3                   	ret    
c001dce6:	66 90                	xchg   ax,ax

c001dce8 <APICTimer::APICTimer()>:
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcef:	83 ec 08             	sub    esp,0x8
c001dcf2:	68 7c 1d 02 c0       	push   0xc0021d7c
c001dcf7:	50                   	push   eax
c001dcf8:	e8 23 fa fe ff       	call   c000d720 <Timer::Timer(char const*)>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c001dd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd09:	89 10                	mov    DWORD PTR [eax],edx
c001dd0b:	90                   	nop
c001dd0c:	83 c4 0c             	add    esp,0xc
c001dd0f:	c3                   	ret    

c001dd10 <PIT::write(int)>:
c001dd10:	83 ec 10             	sub    esp,0x10
c001dd13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd25:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd2a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd2f:	89 c2                	mov    edx,eax
c001dd31:	c1 fa 1f             	sar    edx,0x1f
c001dd34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd51:	ee                   	out    dx,al
c001dd52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd56:	0f b6 c0             	movzx  eax,al
c001dd59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd6d:	ee                   	out    dx,al
c001dd6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd72:	c1 f8 08             	sar    eax,0x8
c001dd75:	0f b6 c0             	movzx  eax,al
c001dd78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd8c:	ee                   	out    dx,al
c001dd8d:	90                   	nop
c001dd8e:	83 c4 10             	add    esp,0x10
c001dd91:	c3                   	ret    
c001dd92:	66 90                	xchg   ax,ax

c001dd94 <pitHandler(regs*, void*)>:
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd9d:	b8 10 27 00 00       	mov    eax,0x2710
c001dda2:	89 c2                	mov    edx,eax
c001dda4:	c1 fa 1f             	sar    edx,0x1f
c001dda7:	f7 f9                	idiv   ecx
c001dda9:	83 ec 0c             	sub    esp,0xc
c001ddac:	50                   	push   eax
c001ddad:	e8 3a fa fe ff       	call   c000d7ec <timerHandler(unsigned int)>
c001ddb2:	83 c4 10             	add    esp,0x10
c001ddb5:	90                   	nop
c001ddb6:	83 c4 0c             	add    esp,0xc
c001ddb9:	c3                   	ret    
c001ddba:	66 90                	xchg   ax,ax

c001ddbc <PIT::open(int, int, void*)>:
c001ddbc:	83 ec 0c             	sub    esp,0xc
c001ddbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddc5:	83 c0 24             	add    eax,0x24
c001ddc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddca:	83 ec 08             	sub    esp,0x8
c001ddcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddd5:	ff d0                	call   eax
c001ddd7:	83 c4 10             	add    esp,0x10
c001ddda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddde:	83 ec 0c             	sub    esp,0xc
c001dde1:	6a 00                	push   0x0
c001dde3:	6a 01                	push   0x1
c001dde5:	68 94 dd 01 c0       	push   0xc001dd94
c001ddea:	6a 00                	push   0x0
c001ddec:	50                   	push   eax
c001dded:	e8 34 df fe ff       	call   c000bd26 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddf2:	83 c4 20             	add    esp,0x20
c001ddf5:	89 c2                	mov    edx,eax
c001ddf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de01:	b8 00 00 00 00       	mov    eax,0x0
c001de06:	83 c4 0c             	add    esp,0xc
c001de09:	c3                   	ret    
c001de0a:	66 90                	xchg   ax,ax

c001de0c <PIT::close(int, int, void*)>:
c001de0c:	83 ec 0c             	sub    esp,0xc
c001de0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de13:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de21:	6a 01                	push   0x1
c001de23:	68 94 dd 01 c0       	push   0xc001dd94
c001de28:	6a 00                	push   0x0
c001de2a:	50                   	push   eax
c001de2b:	e8 2c df fe ff       	call   c000bd5c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de30:	83 c4 10             	add    esp,0x10
c001de33:	b8 00 00 00 00       	mov    eax,0x0
c001de38:	83 c4 0c             	add    esp,0xc
c001de3b:	c3                   	ret    

c001de3c <PIT::PIT()>:
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de43:	83 ec 08             	sub    esp,0x8
c001de46:	68 b8 1d 02 c0       	push   0xc0021db8
c001de4b:	50                   	push   eax
c001de4c:	e8 cf f8 fe ff       	call   c000d720 <Timer::Timer(char const*)>
c001de51:	83 c4 10             	add    esp,0x10
c001de54:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c001de59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de5d:	89 10                	mov    DWORD PTR [eax],edx
c001de5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de69:	0f b6 d0             	movzx  edx,al
c001de6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de70:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de81:	0f b6 d0             	movzx  edx,al
c001de84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de88:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de97:	8d 50 01             	lea    edx,[eax+0x1]
c001de9a:	88 d1                	mov    cl,dl
c001de9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dea0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dea6:	0f b6 d0             	movzx  edx,al
c001dea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dead:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001deb1:	83 e1 3f             	and    ecx,0x3f
c001deb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001deb8:	90                   	nop
c001deb9:	83 c4 0c             	add    esp,0xc
c001debc:	c3                   	ret    
c001debd:	66 90                	xchg   ax,ax
c001debf:	90                   	nop

c001dec0 <avxDetect>:
c001dec0:	b8 01 00 00 00       	mov    eax,0x1
c001dec5:	0f a2                	cpuid  
c001dec7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001decd:	74 15                	je     c001dee4 <avxDetect.noAVX>
c001decf:	b8 01 00 00 00       	mov    eax,0x1
c001ded4:	0f a2                	cpuid  
c001ded6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dedc:	74 06                	je     c001dee4 <avxDetect.noAVX>
c001dede:	b8 01 00 00 00       	mov    eax,0x1
c001dee3:	c3                   	ret    

c001dee4 <avxDetect.noAVX>:
c001dee4:	b8 00 00 00 00       	mov    eax,0x0
c001dee9:	c3                   	ret    

c001deea <avxSave>:
c001deea:	53                   	push   ebx
c001deeb:	52                   	push   edx
c001deec:	31 c0                	xor    eax,eax
c001deee:	48                   	dec    eax
c001deef:	89 c2                	mov    edx,eax
c001def1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001def5:	0f ae 23             	xsave  [ebx]
c001def8:	5a                   	pop    edx
c001def9:	5b                   	pop    ebx
c001defa:	c3                   	ret    

c001defb <avxLoad>:
c001defb:	53                   	push   ebx
c001defc:	52                   	push   edx
c001defd:	31 c0                	xor    eax,eax
c001deff:	48                   	dec    eax
c001df00:	89 c2                	mov    edx,eax
c001df02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df06:	0f ae 2b             	xrstor [ebx]
c001df09:	5a                   	pop    edx
c001df0a:	5b                   	pop    ebx
c001df0b:	c3                   	ret    

c001df0c <avxInit>:
c001df0c:	e8 67 03 00 00       	call   c001e278 <sseInit>
c001df11:	50                   	push   eax
c001df12:	51                   	push   ecx
c001df13:	0f 20 e0             	mov    eax,cr4
c001df16:	0d 00 00 04 00       	or     eax,0x40000
c001df1b:	0f 22 e0             	mov    cr4,eax
c001df1e:	31 c9                	xor    ecx,ecx
c001df20:	0f 01 d0             	xgetbv 
c001df23:	0d 07 00 00 00       	or     eax,0x7
c001df28:	0f 01 d1             	xsetbv 
c001df2b:	59                   	pop    ecx
c001df2c:	58                   	pop    eax
c001df2d:	c3                   	ret    

c001df2e <avxClose>:
c001df2e:	c3                   	ret    

c001df2f <wouldSheSayYes>:
c001df2f:	c3                   	ret    
c001df30:	49                   	dec    ecx
c001df31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df39:	75 20                	jne    c001df5b <isr0+0xb>
c001df3b:	4e                   	dec    esi
c001df3c:	79 61                	jns    c001df9f <isr7+0x3>
c001df3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df43:	66 90                	xchg   ax,ax
c001df45:	66 90                	xchg   ax,ax
c001df47:	66 90                	xchg   ax,ax
c001df49:	66 90                	xchg   ax,ax
c001df4b:	66 90                	xchg   ax,ax
c001df4d:	66 90                	xchg   ax,ax
c001df4f:	90                   	nop

c001df50 <isr0>:
c001df50:	fa                   	cli    
c001df51:	68 00 00 00 00       	push   0x0
c001df56:	68 00 00 00 00       	push   0x0
c001df5b:	e9 56 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df60 <isr1>:
c001df60:	fa                   	cli    
c001df61:	6a 00                	push   0x0
c001df63:	6a 01                	push   0x1
c001df65:	e9 4c 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df6a <isr2>:
c001df6a:	fa                   	cli    
c001df6b:	6a 00                	push   0x0
c001df6d:	6a 02                	push   0x2
c001df6f:	e9 42 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df74 <isr3>:
c001df74:	fa                   	cli    
c001df75:	6a 00                	push   0x0
c001df77:	6a 03                	push   0x3
c001df79:	e9 38 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df7e <isr4>:
c001df7e:	fa                   	cli    
c001df7f:	6a 00                	push   0x0
c001df81:	6a 04                	push   0x4
c001df83:	e9 2e 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df88 <isr5>:
c001df88:	fa                   	cli    
c001df89:	6a 00                	push   0x0
c001df8b:	6a 05                	push   0x5
c001df8d:	e9 24 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df92 <isr6>:
c001df92:	fa                   	cli    
c001df93:	6a 00                	push   0x0
c001df95:	6a 06                	push   0x6
c001df97:	e9 1a 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df9c <isr7>:
c001df9c:	fa                   	cli    
c001df9d:	6a 00                	push   0x0
c001df9f:	6a 07                	push   0x7
c001dfa1:	e9 10 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfa6 <isr8>:
c001dfa6:	fa                   	cli    
c001dfa7:	6a 08                	push   0x8
c001dfa9:	e9 08 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfae <isr9>:
c001dfae:	fa                   	cli    
c001dfaf:	6a 00                	push   0x0
c001dfb1:	6a 09                	push   0x9
c001dfb3:	e9 fe 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfb8 <isr10>:
c001dfb8:	fa                   	cli    
c001dfb9:	6a 0a                	push   0xa
c001dfbb:	e9 f6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfc0 <isr11>:
c001dfc0:	fa                   	cli    
c001dfc1:	6a 0b                	push   0xb
c001dfc3:	e9 ee 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfc8 <isr12>:
c001dfc8:	fa                   	cli    
c001dfc9:	6a 0c                	push   0xc
c001dfcb:	e9 e6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfd0 <isr13>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 0d                	push   0xd
c001dfd3:	53                   	push   ebx
c001dfd4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfd8:	81 fb a6 e1 01 c0    	cmp    ebx,0xc001e1a6
c001dfde:	5b                   	pop    ebx
c001dfdf:	0f 84 c3 01 00 00    	je     c001e1a8 <finishSignal2>
c001dfe5:	e9 cc 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfea <isr14>:
c001dfea:	fa                   	cli    
c001dfeb:	6a 0e                	push   0xe
c001dfed:	e9 c4 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dff2 <isr15>:
c001dff2:	fa                   	cli    
c001dff3:	6a 00                	push   0x0
c001dff5:	6a 0f                	push   0xf
c001dff7:	e9 ba 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dffc <isr16>:
c001dffc:	fa                   	cli    
c001dffd:	6a 00                	push   0x0
c001dfff:	6a 10                	push   0x10
c001e001:	e9 b0 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e006 <isr17>:
c001e006:	fa                   	cli    
c001e007:	6a 00                	push   0x0
c001e009:	6a 11                	push   0x11
c001e00b:	e9 a6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e010 <isr18>:
c001e010:	fa                   	cli    
c001e011:	6a 00                	push   0x0
c001e013:	6a 12                	push   0x12
c001e015:	e9 9c 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e01a <irq3>:
c001e01a:	fa                   	cli    
c001e01b:	6a 00                	push   0x0
c001e01d:	6a 23                	push   0x23
c001e01f:	e9 92 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e024 <irq4>:
c001e024:	fa                   	cli    
c001e025:	6a 00                	push   0x0
c001e027:	6a 24                	push   0x24
c001e029:	e9 88 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e02e <irq5>:
c001e02e:	fa                   	cli    
c001e02f:	6a 00                	push   0x0
c001e031:	6a 25                	push   0x25
c001e033:	e9 7e 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e038 <irq6>:
c001e038:	fa                   	cli    
c001e039:	6a 00                	push   0x0
c001e03b:	6a 26                	push   0x26
c001e03d:	e9 74 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e042 <irq7>:
c001e042:	fa                   	cli    
c001e043:	6a 00                	push   0x0
c001e045:	6a 27                	push   0x27
c001e047:	e9 6a 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e04c <irq8>:
c001e04c:	fa                   	cli    
c001e04d:	6a 00                	push   0x0
c001e04f:	6a 28                	push   0x28
c001e051:	e9 60 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e056 <irq9>:
c001e056:	fa                   	cli    
c001e057:	6a 00                	push   0x0
c001e059:	6a 29                	push   0x29
c001e05b:	e9 56 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e060 <irq10>:
c001e060:	fa                   	cli    
c001e061:	6a 00                	push   0x0
c001e063:	6a 2a                	push   0x2a
c001e065:	e9 4c 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e06a <irq11>:
c001e06a:	fa                   	cli    
c001e06b:	6a 00                	push   0x0
c001e06d:	6a 2b                	push   0x2b
c001e06f:	e9 42 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e074 <irq12>:
c001e074:	fa                   	cli    
c001e075:	6a 00                	push   0x0
c001e077:	6a 2c                	push   0x2c
c001e079:	e9 38 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e07e <irq13>:
c001e07e:	fa                   	cli    
c001e07f:	6a 00                	push   0x0
c001e081:	6a 2d                	push   0x2d
c001e083:	e9 2e 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e088 <irq14>:
c001e088:	fa                   	cli    
c001e089:	6a 00                	push   0x0
c001e08b:	6a 2e                	push   0x2e
c001e08d:	e9 24 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e092 <irq15>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 2f                	push   0x2f
c001e097:	e9 1a 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e09c <irq1>:
c001e09c:	fa                   	cli    
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 21                	push   0x21
c001e0a1:	eb 13                	jmp    c001e0b6 <int_common_stub>

c001e0a3 <irq2>:
c001e0a3:	fa                   	cli    
c001e0a4:	6a 00                	push   0x0
c001e0a6:	6a 22                	push   0x22
c001e0a8:	eb 0c                	jmp    c001e0b6 <int_common_stub>

c001e0aa <isr96>:
c001e0aa:	6a 00                	push   0x0
c001e0ac:	6a 60                	push   0x60
c001e0ae:	fb                   	sti    
c001e0af:	eb 37                	jmp    c001e0e8 <syscall_common_stub>

c001e0b1 <irq0>:
c001e0b1:	fa                   	cli    
c001e0b2:	6a 00                	push   0x0
c001e0b4:	6a 20                	push   0x20

c001e0b6 <int_common_stub>:
c001e0b6:	60                   	pusha  
c001e0b7:	1e                   	push   ds
c001e0b8:	06                   	push   es
c001e0b9:	0f a0                	push   fs
c001e0bb:	0f a8                	push   gs
c001e0bd:	66 b8 10 00          	mov    ax,0x10
c001e0c1:	66 8e d8             	mov    ds,ax
c001e0c4:	66 8e c0             	mov    es,ax
c001e0c7:	66 8e e0             	mov    fs,ax
c001e0ca:	66 8e e8             	mov    gs,ax
c001e0cd:	54                   	push   esp
c001e0ce:	fc                   	cld    
c001e0cf:	e8 50 e1 fe ff       	call   c000c224 <int_handler>
c001e0d4:	81 c4 04 00 00 00    	add    esp,0x4
c001e0da:	0f a9                	pop    gs
c001e0dc:	0f a1                	pop    fs
c001e0de:	07                   	pop    es
c001e0df:	1f                   	pop    ds
c001e0e0:	61                   	popa   
c001e0e1:	81 c4 08 00 00 00    	add    esp,0x8
c001e0e7:	cf                   	iret   

c001e0e8 <syscall_common_stub>:
c001e0e8:	60                   	pusha  
c001e0e9:	1e                   	push   ds
c001e0ea:	06                   	push   es
c001e0eb:	0f a0                	push   fs
c001e0ed:	0f a8                	push   gs
c001e0ef:	66 b8 10 00          	mov    ax,0x10
c001e0f3:	66 8e d8             	mov    ds,ax
c001e0f6:	66 8e c0             	mov    es,ax
c001e0f9:	66 8e e0             	mov    fs,ax
c001e0fc:	66 8e e8             	mov    gs,ax
c001e0ff:	54                   	push   esp
c001e100:	fc                   	cld    
c001e101:	e8 1e e1 fe ff       	call   c000c224 <int_handler>
c001e106:	81 c4 04 00 00 00    	add    esp,0x4
c001e10c:	0f a9                	pop    gs
c001e10e:	0f a1                	pop    fs
c001e110:	07                   	pop    es
c001e111:	1f                   	pop    ds
c001e112:	e8 24 2d ff ff       	call   c0010e3b <KiCheckSignalZ>
c001e117:	3d 00 00 00 00       	cmp    eax,0x0
c001e11c:	0f 84 c0 00 00 00    	je     c001e1e2 <skipSignals>
c001e122:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e127:	61                   	popa   
c001e128:	53                   	push   ebx
c001e129:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e12f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e132:	5b                   	pop    ebx
c001e133:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e138:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e13b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e13e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e141:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e144:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e147:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e14a:	81 c4 08 00 00 00    	add    esp,0x8
c001e150:	5e                   	pop    esi
c001e151:	5b                   	pop    ebx
c001e152:	59                   	pop    ecx
c001e153:	5a                   	pop    edx
c001e154:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e157:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e15a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e15d:	52                   	push   edx
c001e15e:	51                   	push   ecx
c001e15f:	53                   	push   ebx
c001e160:	56                   	push   esi
c001e161:	81 ec 08 00 00 00    	sub    esp,0x8
c001e167:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e16a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e16d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e170:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e173:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e176:	60                   	pusha  
c001e177:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e17d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e180:	89 e3                	mov    ebx,esp
c001e182:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e185:	52                   	push   edx
c001e186:	68 a6 e1 01 c0       	push   0xc001e1a6
c001e18b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e18e:	89 dc                	mov    esp,ebx
c001e190:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e193:	68 23 00 00 00       	push   0x23
c001e198:	51                   	push   ecx
c001e199:	68 02 02 00 00       	push   0x202
c001e19e:	68 1b 00 00 00       	push   0x1b
c001e1a3:	ff 36                	push   DWORD PTR [esi]
c001e1a5:	cf                   	iret   

c001e1a6 <finishSignal>:
c001e1a6:	cd 0f                	int    0xf

c001e1a8 <finishSignal2>:
c001e1a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e1ae:	e8 05 2d ff ff       	call   c0010eb8 <KiFinishSignalZ>
c001e1b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e1b9:	68 23 00 00 00       	push   0x23
c001e1be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e1c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e1c4:	68 1b 00 00 00       	push   0x1b
c001e1c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e1cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e1d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e1d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e1d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e1db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e1de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e1e1:	cf                   	iret   

c001e1e2 <skipSignals>:
c001e1e2:	61                   	popa   
c001e1e3:	81 c4 08 00 00 00    	add    esp,0x8
c001e1e9:	cf                   	iret   
c001e1ea:	90                   	nop
c001e1eb:	90                   	nop

c001e1ec <irq16>:
c001e1ec:	fa                   	cli    
c001e1ed:	6a 00                	push   0x0
c001e1ef:	6a 30                	push   0x30
c001e1f1:	e9 c0 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e1f6 <irq17>:
c001e1f6:	fa                   	cli    
c001e1f7:	6a 00                	push   0x0
c001e1f9:	6a 31                	push   0x31
c001e1fb:	e9 b6 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e200 <irq18>:
c001e200:	fa                   	cli    
c001e201:	6a 00                	push   0x0
c001e203:	6a 32                	push   0x32
c001e205:	e9 ac fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e20a <irq19>:
c001e20a:	fa                   	cli    
c001e20b:	6a 00                	push   0x0
c001e20d:	6a 33                	push   0x33
c001e20f:	e9 a2 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e214 <irq20>:
c001e214:	fa                   	cli    
c001e215:	6a 00                	push   0x0
c001e217:	6a 34                	push   0x34
c001e219:	e9 98 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e21e <irq21>:
c001e21e:	fa                   	cli    
c001e21f:	6a 00                	push   0x0
c001e221:	6a 35                	push   0x35
c001e223:	e9 8e fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e228 <irq22>:
c001e228:	fa                   	cli    
c001e229:	6a 00                	push   0x0
c001e22b:	6a 36                	push   0x36
c001e22d:	e9 84 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e232 <irq23>:
c001e232:	fa                   	cli    
c001e233:	6a 00                	push   0x0
c001e235:	6a 37                	push   0x37
c001e237:	e9 7a fe ff ff       	jmp    c001e0b6 <int_common_stub>
c001e23c:	66 90                	xchg   ax,ax
c001e23e:	66 90                	xchg   ax,ax

c001e240 <i386GetRDRAND>:
c001e240:	b9 64 00 00 00       	mov    ecx,0x64

c001e245 <retry>:
c001e245:	0f c7 f0             	rdrand eax
c001e248:	72 05                	jb     c001e24f <retry.done>
c001e24a:	e2 f9                	loop   c001e245 <retry>

c001e24c <retry.fail>:
c001e24c:	31 c0                	xor    eax,eax
c001e24e:	c3                   	ret    

c001e24f <retry.done>:
c001e24f:	c3                   	ret    

c001e250 <absolutelyNoChanceInHell>:
c001e250:	b8 01 00 00 00       	mov    eax,0x1
c001e255:	0f a2                	cpuid  
c001e257:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e25d:	74 06                	je     c001e265 <sseDetect.noSSE>
c001e25f:	b8 01 00 00 00       	mov    eax,0x1
c001e264:	c3                   	ret    

c001e265 <sseDetect.noSSE>:
c001e265:	31 c0                	xor    eax,eax
c001e267:	c3                   	ret    

c001e268 <sseSave>:
c001e268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e26c:	0f ae 00             	fxsave [eax]
c001e26f:	c3                   	ret    

c001e270 <sseLoad>:
c001e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e274:	0f ae 08             	fxrstor [eax]
c001e277:	c3                   	ret    

c001e278 <sseInit>:
c001e278:	e8 42 00 00 00       	call   c001e2bf <x87Init>
c001e27d:	0f 20 e0             	mov    eax,cr4
c001e280:	66 0d 00 06          	or     ax,0x600
c001e284:	0f 22 e0             	mov    cr4,eax
c001e287:	c3                   	ret    

c001e288 <sseClose>:
c001e288:	c3                   	ret    
c001e289:	66 90                	xchg   ax,ax
c001e28b:	66 90                	xchg   ax,ax
c001e28d:	66 90                	xchg   ax,ax
c001e28f:	90                   	nop

c001e290 <value_37F>:
c001e290:	7f 03                	jg     c001e295 <value_37A+0x1>

c001e292 <value_37E>:
c001e292:	7e 03                	jle    c001e297 <x87Detect+0x1>

c001e294 <value_37A>:
c001e294:	7a 03                	jp     c001e299 <x87Detect+0x3>

c001e296 <x87Detect>:
c001e296:	b8 01 00 00 00       	mov    eax,0x1
c001e29b:	0f a2                	cpuid  
c001e29d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2a3:	74 06                	je     c001e2ab <x87Detect.nox87>
c001e2a5:	b8 01 00 00 00       	mov    eax,0x1
c001e2aa:	c3                   	ret    

c001e2ab <x87Detect.nox87>:
c001e2ab:	b8 00 00 00 00       	mov    eax,0x0
c001e2b0:	c3                   	ret    

c001e2b1 <x87Save>:
c001e2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2b5:	dd 30                	fnsave [eax]
c001e2b7:	c3                   	ret    

c001e2b8 <x87Load>:
c001e2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2bc:	dd 20                	frstor [eax]
c001e2be:	c3                   	ret    

c001e2bf <x87Init>:
c001e2bf:	0f 20 c0             	mov    eax,cr0
c001e2c2:	66 25 fb ff          	and    ax,0xfffb
c001e2c6:	66 0d 22 00          	or     ax,0x22
c001e2ca:	0f 22 c0             	mov    cr0,eax
c001e2cd:	db e3                	fninit 
c001e2cf:	0f 06                	clts   
c001e2d1:	d9 2d 94 e2 01 c0    	fldcw  WORD PTR ds:0xc001e294
c001e2d7:	c3                   	ret    

c001e2d8 <x87Close>:
c001e2d8:	c3                   	ret    
c001e2d9:	66 90                	xchg   ax,ax
c001e2db:	90                   	nop

c001e2dc <__do_global_ctors_aux>:
c001e2dc:	a1 90 f2 01 c0       	mov    eax,ds:0xc001f290
c001e2e1:	83 f8 ff             	cmp    eax,0xffffffff
c001e2e4:	74 1a                	je     c001e300 <__do_global_ctors_aux+0x24>
c001e2e6:	55                   	push   ebp
c001e2e7:	89 e5                	mov    ebp,esp
c001e2e9:	53                   	push   ebx
c001e2ea:	52                   	push   edx
c001e2eb:	bb 90 f2 01 c0       	mov    ebx,0xc001f290
c001e2f0:	ff d0                	call   eax
c001e2f2:	83 eb 04             	sub    ebx,0x4
c001e2f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2f7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2fa:	75 f4                	jne    c001e2f0 <__do_global_ctors_aux+0x14>
c001e2fc:	58                   	pop    eax
c001e2fd:	5b                   	pop    ebx
c001e2fe:	5d                   	pop    ebp
c001e2ff:	c3                   	ret    
c001e300:	c3                   	ret    
c001e301:	66 90                	xchg   ax,ax
c001e303:	90                   	nop

c001e304 <__divdi3>:
c001e304:	55                   	push   ebp
c001e305:	57                   	push   edi
c001e306:	56                   	push   esi
c001e307:	53                   	push   ebx
c001e308:	83 ec 1c             	sub    esp,0x1c
c001e30b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e30f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e313:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e316:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e31a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e31e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e322:	85 db                	test   ebx,ebx
c001e324:	0f 88 8e 00 00 00    	js     c001e3b8 <__divdi3+0xb4>
c001e32a:	89 dd                	mov    ebp,ebx
c001e32c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e334:	89 d3                	mov    ebx,edx
c001e336:	85 d2                	test   edx,edx
c001e338:	79 0d                	jns    c001e347 <__divdi3+0x43>
c001e33a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e33e:	f7 d8                	neg    eax
c001e340:	83 d2 00             	adc    edx,0x0
c001e343:	f7 da                	neg    edx
c001e345:	89 d3                	mov    ebx,edx
c001e347:	89 c7                	mov    edi,eax
c001e349:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e34c:	85 db                	test   ebx,ebx
c001e34e:	75 48                	jne    c001e398 <__divdi3+0x94>
c001e350:	39 ef                	cmp    edi,ebp
c001e352:	76 24                	jbe    c001e378 <__divdi3+0x74>
c001e354:	89 ea                	mov    edx,ebp
c001e356:	f7 f7                	div    edi
c001e358:	89 c1                	mov    ecx,eax
c001e35a:	31 f6                	xor    esi,esi
c001e35c:	89 c8                	mov    eax,ecx
c001e35e:	89 f2                	mov    edx,esi
c001e360:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e364:	85 c9                	test   ecx,ecx
c001e366:	74 07                	je     c001e36f <__divdi3+0x6b>
c001e368:	f7 d8                	neg    eax
c001e36a:	83 d2 00             	adc    edx,0x0
c001e36d:	f7 da                	neg    edx
c001e36f:	83 c4 1c             	add    esp,0x1c
c001e372:	5b                   	pop    ebx
c001e373:	5e                   	pop    esi
c001e374:	5f                   	pop    edi
c001e375:	5d                   	pop    ebp
c001e376:	c3                   	ret    
c001e377:	90                   	nop
c001e378:	85 ff                	test   edi,edi
c001e37a:	75 0b                	jne    c001e387 <__divdi3+0x83>
c001e37c:	b8 01 00 00 00       	mov    eax,0x1
c001e381:	31 d2                	xor    edx,edx
c001e383:	f7 f3                	div    ebx
c001e385:	89 c7                	mov    edi,eax
c001e387:	31 d2                	xor    edx,edx
c001e389:	89 e8                	mov    eax,ebp
c001e38b:	f7 f7                	div    edi
c001e38d:	89 c6                	mov    esi,eax
c001e38f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e392:	f7 f7                	div    edi
c001e394:	89 c1                	mov    ecx,eax
c001e396:	eb c4                	jmp    c001e35c <__divdi3+0x58>
c001e398:	39 eb                	cmp    ebx,ebp
c001e39a:	77 3c                	ja     c001e3d8 <__divdi3+0xd4>
c001e39c:	0f bd f3             	bsr    esi,ebx
c001e39f:	83 f6 1f             	xor    esi,0x1f
c001e3a2:	75 40                	jne    c001e3e4 <__divdi3+0xe0>
c001e3a4:	39 eb                	cmp    ebx,ebp
c001e3a6:	72 09                	jb     c001e3b1 <__divdi3+0xad>
c001e3a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3ab:	0f 87 97 00 00 00    	ja     c001e448 <__divdi3+0x144>
c001e3b1:	b9 01 00 00 00       	mov    ecx,0x1
c001e3b6:	eb a4                	jmp    c001e35c <__divdi3+0x58>
c001e3b8:	f7 d9                	neg    ecx
c001e3ba:	83 d3 00             	adc    ebx,0x0
c001e3bd:	f7 db                	neg    ebx
c001e3bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3c6:	89 dd                	mov    ebp,ebx
c001e3c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e3d0:	e9 5f ff ff ff       	jmp    c001e334 <__divdi3+0x30>
c001e3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d8:	31 f6                	xor    esi,esi
c001e3da:	31 c9                	xor    ecx,ecx
c001e3dc:	e9 7b ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3e4:	b8 20 00 00 00       	mov    eax,0x20
c001e3e9:	29 f0                	sub    eax,esi
c001e3eb:	89 f1                	mov    ecx,esi
c001e3ed:	d3 e3                	shl    ebx,cl
c001e3ef:	89 fa                	mov    edx,edi
c001e3f1:	88 c1                	mov    cl,al
c001e3f3:	d3 ea                	shr    edx,cl
c001e3f5:	09 da                	or     edx,ebx
c001e3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3fb:	89 f1                	mov    ecx,esi
c001e3fd:	d3 e7                	shl    edi,cl
c001e3ff:	89 eb                	mov    ebx,ebp
c001e401:	88 c1                	mov    cl,al
c001e403:	d3 eb                	shr    ebx,cl
c001e405:	89 f1                	mov    ecx,esi
c001e407:	d3 e5                	shl    ebp,cl
c001e409:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e40c:	88 c1                	mov    cl,al
c001e40e:	d3 ea                	shr    edx,cl
c001e410:	09 d5                	or     ebp,edx
c001e412:	89 e8                	mov    eax,ebp
c001e414:	89 da                	mov    edx,ebx
c001e416:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e41a:	89 d3                	mov    ebx,edx
c001e41c:	89 c5                	mov    ebp,eax
c001e41e:	f7 e7                	mul    edi
c001e420:	39 d3                	cmp    ebx,edx
c001e422:	72 18                	jb     c001e43c <__divdi3+0x138>
c001e424:	74 0a                	je     c001e430 <__divdi3+0x12c>
c001e426:	89 e9                	mov    ecx,ebp
c001e428:	31 f6                	xor    esi,esi
c001e42a:	e9 2d ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e42f:	90                   	nop
c001e430:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e433:	89 f1                	mov    ecx,esi
c001e435:	d3 e7                	shl    edi,cl
c001e437:	39 c7                	cmp    edi,eax
c001e439:	73 eb                	jae    c001e426 <__divdi3+0x122>
c001e43b:	90                   	nop
c001e43c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e43f:	31 f6                	xor    esi,esi
c001e441:	e9 16 ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e446:	66 90                	xchg   ax,ax
c001e448:	31 c9                	xor    ecx,ecx
c001e44a:	e9 0d ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e44f:	90                   	nop

c001e450 <__moddi3>:
c001e450:	55                   	push   ebp
c001e451:	57                   	push   edi
c001e452:	56                   	push   esi
c001e453:	53                   	push   ebx
c001e454:	83 ec 2c             	sub    esp,0x2c
c001e457:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e45b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e45f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e463:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e467:	85 db                	test   ebx,ebx
c001e469:	0f 88 85 00 00 00    	js     c001e4f4 <__moddi3+0xa4>
c001e46f:	89 de                	mov    esi,ebx
c001e471:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e479:	89 d7                	mov    edi,edx
c001e47b:	85 d2                	test   edx,edx
c001e47d:	79 09                	jns    c001e488 <__moddi3+0x38>
c001e47f:	f7 d8                	neg    eax
c001e481:	83 d2 00             	adc    edx,0x0
c001e484:	f7 da                	neg    edx
c001e486:	89 d7                	mov    edi,edx
c001e488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e48c:	89 cd                	mov    ebp,ecx
c001e48e:	85 ff                	test   edi,edi
c001e490:	75 52                	jne    c001e4e4 <__moddi3+0x94>
c001e492:	89 c3                	mov    ebx,eax
c001e494:	39 f0                	cmp    eax,esi
c001e496:	76 24                	jbe    c001e4bc <__moddi3+0x6c>
c001e498:	89 c8                	mov    eax,ecx
c001e49a:	89 f2                	mov    edx,esi
c001e49c:	f7 f3                	div    ebx
c001e49e:	89 d6                	mov    esi,edx
c001e4a0:	89 f0                	mov    eax,esi
c001e4a2:	31 d2                	xor    edx,edx
c001e4a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4a8:	85 c9                	test   ecx,ecx
c001e4aa:	74 07                	je     c001e4b3 <__moddi3+0x63>
c001e4ac:	f7 d8                	neg    eax
c001e4ae:	83 d2 00             	adc    edx,0x0
c001e4b1:	f7 da                	neg    edx
c001e4b3:	83 c4 2c             	add    esp,0x2c
c001e4b6:	5b                   	pop    ebx
c001e4b7:	5e                   	pop    esi
c001e4b8:	5f                   	pop    edi
c001e4b9:	5d                   	pop    ebp
c001e4ba:	c3                   	ret    
c001e4bb:	90                   	nop
c001e4bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4c0:	85 db                	test   ebx,ebx
c001e4c2:	75 0d                	jne    c001e4d1 <__moddi3+0x81>
c001e4c4:	b8 01 00 00 00       	mov    eax,0x1
c001e4c9:	31 d2                	xor    edx,edx
c001e4cb:	f7 f7                	div    edi
c001e4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4d1:	89 f0                	mov    eax,esi
c001e4d3:	31 d2                	xor    edx,edx
c001e4d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4d9:	f7 f7                	div    edi
c001e4db:	89 e8                	mov    eax,ebp
c001e4dd:	f7 f7                	div    edi
c001e4df:	89 d6                	mov    esi,edx
c001e4e1:	eb bd                	jmp    c001e4a0 <__moddi3+0x50>
c001e4e3:	90                   	nop
c001e4e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4e8:	39 f7                	cmp    edi,esi
c001e4ea:	76 20                	jbe    c001e50c <__moddi3+0xbc>
c001e4ec:	89 c8                	mov    eax,ecx
c001e4ee:	89 f2                	mov    edx,esi
c001e4f0:	eb b2                	jmp    c001e4a4 <__moddi3+0x54>
c001e4f2:	66 90                	xchg   ax,ax
c001e4f4:	f7 d9                	neg    ecx
c001e4f6:	83 d3 00             	adc    ebx,0x0
c001e4f9:	f7 db                	neg    ebx
c001e4fb:	89 de                	mov    esi,ebx
c001e4fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e505:	e9 6f ff ff ff       	jmp    c001e479 <__moddi3+0x29>
c001e50a:	66 90                	xchg   ax,ax
c001e50c:	0f bd c7             	bsr    eax,edi
c001e50f:	83 f0 1f             	xor    eax,0x1f
c001e512:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e516:	75 24                	jne    c001e53c <__moddi3+0xec>
c001e518:	39 f7                	cmp    edi,esi
c001e51a:	72 06                	jb     c001e522 <__moddi3+0xd2>
c001e51c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e520:	77 0c                	ja     c001e52e <__moddi3+0xde>
c001e522:	89 e9                	mov    ecx,ebp
c001e524:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e528:	19 fe                	sbb    esi,edi
c001e52a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e532:	89 f2                	mov    edx,esi
c001e534:	e9 6b ff ff ff       	jmp    c001e4a4 <__moddi3+0x54>
c001e539:	8d 76 00             	lea    esi,[esi+0x0]
c001e53c:	b8 20 00 00 00       	mov    eax,0x20
c001e541:	89 c2                	mov    edx,eax
c001e543:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e547:	29 da                	sub    edx,ebx
c001e549:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e54d:	88 d9                	mov    cl,bl
c001e54f:	d3 e7                	shl    edi,cl
c001e551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e555:	88 d1                	mov    cl,dl
c001e557:	d3 e8                	shr    eax,cl
c001e559:	09 c7                	or     edi,eax
c001e55b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e55f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e563:	89 d8                	mov    eax,ebx
c001e565:	88 d9                	mov    cl,bl
c001e567:	d3 e7                	shl    edi,cl
c001e569:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e56d:	89 f3                	mov    ebx,esi
c001e56f:	88 d1                	mov    cl,dl
c001e571:	d3 eb                	shr    ebx,cl
c001e573:	89 c7                	mov    edi,eax
c001e575:	88 c1                	mov    cl,al
c001e577:	d3 e6                	shl    esi,cl
c001e579:	89 e8                	mov    eax,ebp
c001e57b:	88 d1                	mov    cl,dl
c001e57d:	d3 e8                	shr    eax,cl
c001e57f:	09 f0                	or     eax,esi
c001e581:	89 f9                	mov    ecx,edi
c001e583:	d3 e5                	shl    ebp,cl
c001e585:	89 da                	mov    edx,ebx
c001e587:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e58b:	89 d3                	mov    ebx,edx
c001e58d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e591:	89 c6                	mov    esi,eax
c001e593:	89 d1                	mov    ecx,edx
c001e595:	39 d3                	cmp    ebx,edx
c001e597:	72 27                	jb     c001e5c0 <__moddi3+0x170>
c001e599:	74 21                	je     c001e5bc <__moddi3+0x16c>
c001e59b:	29 f5                	sub    ebp,esi
c001e59d:	19 cb                	sbb    ebx,ecx
c001e59f:	89 de                	mov    esi,ebx
c001e5a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5a5:	d3 e6                	shl    esi,cl
c001e5a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5ab:	89 f9                	mov    ecx,edi
c001e5ad:	d3 ed                	shr    ebp,cl
c001e5af:	09 ee                	or     esi,ebp
c001e5b1:	89 f0                	mov    eax,esi
c001e5b3:	d3 eb                	shr    ebx,cl
c001e5b5:	89 da                	mov    edx,ebx
c001e5b7:	e9 e8 fe ff ff       	jmp    c001e4a4 <__moddi3+0x54>
c001e5bc:	39 c5                	cmp    ebp,eax
c001e5be:	73 db                	jae    c001e59b <__moddi3+0x14b>
c001e5c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5c8:	89 d1                	mov    ecx,edx
c001e5ca:	89 c6                	mov    esi,eax
c001e5cc:	eb cd                	jmp    c001e59b <__moddi3+0x14b>
c001e5ce:	66 90                	xchg   ax,ax

c001e5d0 <__udivdi3>:
c001e5d0:	55                   	push   ebp
c001e5d1:	57                   	push   edi
c001e5d2:	56                   	push   esi
c001e5d3:	53                   	push   ebx
c001e5d4:	83 ec 1c             	sub    esp,0x1c
c001e5d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e5db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e5df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5e7:	85 d2                	test   edx,edx
c001e5e9:	75 41                	jne    c001e62c <__udivdi3+0x5c>
c001e5eb:	39 f7                	cmp    edi,esi
c001e5ed:	76 15                	jbe    c001e604 <__udivdi3+0x34>
c001e5ef:	89 e8                	mov    eax,ebp
c001e5f1:	89 f2                	mov    edx,esi
c001e5f3:	f7 f7                	div    edi
c001e5f5:	31 db                	xor    ebx,ebx
c001e5f7:	89 da                	mov    edx,ebx
c001e5f9:	83 c4 1c             	add    esp,0x1c
c001e5fc:	5b                   	pop    ebx
c001e5fd:	5e                   	pop    esi
c001e5fe:	5f                   	pop    edi
c001e5ff:	5d                   	pop    ebp
c001e600:	c3                   	ret    
c001e601:	8d 76 00             	lea    esi,[esi+0x0]
c001e604:	89 f9                	mov    ecx,edi
c001e606:	85 ff                	test   edi,edi
c001e608:	75 0b                	jne    c001e615 <__udivdi3+0x45>
c001e60a:	b8 01 00 00 00       	mov    eax,0x1
c001e60f:	31 d2                	xor    edx,edx
c001e611:	f7 f7                	div    edi
c001e613:	89 c1                	mov    ecx,eax
c001e615:	31 d2                	xor    edx,edx
c001e617:	89 f0                	mov    eax,esi
c001e619:	f7 f1                	div    ecx
c001e61b:	89 c3                	mov    ebx,eax
c001e61d:	89 e8                	mov    eax,ebp
c001e61f:	f7 f1                	div    ecx
c001e621:	89 da                	mov    edx,ebx
c001e623:	83 c4 1c             	add    esp,0x1c
c001e626:	5b                   	pop    ebx
c001e627:	5e                   	pop    esi
c001e628:	5f                   	pop    edi
c001e629:	5d                   	pop    ebp
c001e62a:	c3                   	ret    
c001e62b:	90                   	nop
c001e62c:	39 f2                	cmp    edx,esi
c001e62e:	77 1c                	ja     c001e64c <__udivdi3+0x7c>
c001e630:	0f bd da             	bsr    ebx,edx
c001e633:	83 f3 1f             	xor    ebx,0x1f
c001e636:	75 24                	jne    c001e65c <__udivdi3+0x8c>
c001e638:	39 f2                	cmp    edx,esi
c001e63a:	72 08                	jb     c001e644 <__udivdi3+0x74>
c001e63c:	39 ef                	cmp    edi,ebp
c001e63e:	0f 87 84 00 00 00    	ja     c001e6c8 <__udivdi3+0xf8>
c001e644:	b8 01 00 00 00       	mov    eax,0x1
c001e649:	eb ac                	jmp    c001e5f7 <__udivdi3+0x27>
c001e64b:	90                   	nop
c001e64c:	31 db                	xor    ebx,ebx
c001e64e:	31 c0                	xor    eax,eax
c001e650:	89 da                	mov    edx,ebx
c001e652:	83 c4 1c             	add    esp,0x1c
c001e655:	5b                   	pop    ebx
c001e656:	5e                   	pop    esi
c001e657:	5f                   	pop    edi
c001e658:	5d                   	pop    ebp
c001e659:	c3                   	ret    
c001e65a:	66 90                	xchg   ax,ax
c001e65c:	b8 20 00 00 00       	mov    eax,0x20
c001e661:	29 d8                	sub    eax,ebx
c001e663:	88 d9                	mov    cl,bl
c001e665:	d3 e2                	shl    edx,cl
c001e667:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e66b:	89 fa                	mov    edx,edi
c001e66d:	88 c1                	mov    cl,al
c001e66f:	d3 ea                	shr    edx,cl
c001e671:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e675:	09 d1                	or     ecx,edx
c001e677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e67b:	88 d9                	mov    cl,bl
c001e67d:	d3 e7                	shl    edi,cl
c001e67f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e683:	89 f7                	mov    edi,esi
c001e685:	88 c1                	mov    cl,al
c001e687:	d3 ef                	shr    edi,cl
c001e689:	88 d9                	mov    cl,bl
c001e68b:	d3 e6                	shl    esi,cl
c001e68d:	89 ea                	mov    edx,ebp
c001e68f:	88 c1                	mov    cl,al
c001e691:	d3 ea                	shr    edx,cl
c001e693:	09 d6                	or     esi,edx
c001e695:	89 f0                	mov    eax,esi
c001e697:	89 fa                	mov    edx,edi
c001e699:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e69d:	89 d7                	mov    edi,edx
c001e69f:	89 c6                	mov    esi,eax
c001e6a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6a5:	39 d7                	cmp    edi,edx
c001e6a7:	72 13                	jb     c001e6bc <__udivdi3+0xec>
c001e6a9:	74 09                	je     c001e6b4 <__udivdi3+0xe4>
c001e6ab:	89 f0                	mov    eax,esi
c001e6ad:	31 db                	xor    ebx,ebx
c001e6af:	e9 43 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6b4:	88 d9                	mov    cl,bl
c001e6b6:	d3 e5                	shl    ebp,cl
c001e6b8:	39 c5                	cmp    ebp,eax
c001e6ba:	73 ef                	jae    c001e6ab <__udivdi3+0xdb>
c001e6bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001e6bf:	31 db                	xor    ebx,ebx
c001e6c1:	e9 31 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6c6:	66 90                	xchg   ax,ax
c001e6c8:	31 c0                	xor    eax,eax
c001e6ca:	e9 28 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6cf:	90                   	nop

c001e6d0 <__umoddi3>:
c001e6d0:	55                   	push   ebp
c001e6d1:	57                   	push   edi
c001e6d2:	56                   	push   esi
c001e6d3:	53                   	push   ebx
c001e6d4:	83 ec 1c             	sub    esp,0x1c
c001e6d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6e7:	89 da                	mov    edx,ebx
c001e6e9:	85 c0                	test   eax,eax
c001e6eb:	75 37                	jne    c001e724 <__umoddi3+0x54>
c001e6ed:	39 df                	cmp    edi,ebx
c001e6ef:	76 13                	jbe    c001e704 <__umoddi3+0x34>
c001e6f1:	89 f0                	mov    eax,esi
c001e6f3:	f7 f7                	div    edi
c001e6f5:	89 d0                	mov    eax,edx
c001e6f7:	31 d2                	xor    edx,edx
c001e6f9:	83 c4 1c             	add    esp,0x1c
c001e6fc:	5b                   	pop    ebx
c001e6fd:	5e                   	pop    esi
c001e6fe:	5f                   	pop    edi
c001e6ff:	5d                   	pop    ebp
c001e700:	c3                   	ret    
c001e701:	8d 76 00             	lea    esi,[esi+0x0]
c001e704:	89 fd                	mov    ebp,edi
c001e706:	85 ff                	test   edi,edi
c001e708:	75 0b                	jne    c001e715 <__umoddi3+0x45>
c001e70a:	b8 01 00 00 00       	mov    eax,0x1
c001e70f:	31 d2                	xor    edx,edx
c001e711:	f7 f7                	div    edi
c001e713:	89 c5                	mov    ebp,eax
c001e715:	89 d8                	mov    eax,ebx
c001e717:	31 d2                	xor    edx,edx
c001e719:	f7 f5                	div    ebp
c001e71b:	89 f0                	mov    eax,esi
c001e71d:	f7 f5                	div    ebp
c001e71f:	89 d0                	mov    eax,edx
c001e721:	eb d4                	jmp    c001e6f7 <__umoddi3+0x27>
c001e723:	90                   	nop
c001e724:	89 f1                	mov    ecx,esi
c001e726:	39 d8                	cmp    eax,ebx
c001e728:	76 0a                	jbe    c001e734 <__umoddi3+0x64>
c001e72a:	89 f0                	mov    eax,esi
c001e72c:	83 c4 1c             	add    esp,0x1c
c001e72f:	5b                   	pop    ebx
c001e730:	5e                   	pop    esi
c001e731:	5f                   	pop    edi
c001e732:	5d                   	pop    ebp
c001e733:	c3                   	ret    
c001e734:	0f bd e8             	bsr    ebp,eax
c001e737:	83 f5 1f             	xor    ebp,0x1f
c001e73a:	75 1c                	jne    c001e758 <__umoddi3+0x88>
c001e73c:	39 d8                	cmp    eax,ebx
c001e73e:	72 04                	jb     c001e744 <__umoddi3+0x74>
c001e740:	39 f7                	cmp    edi,esi
c001e742:	77 08                	ja     c001e74c <__umoddi3+0x7c>
c001e744:	89 da                	mov    edx,ebx
c001e746:	29 fe                	sub    esi,edi
c001e748:	19 c2                	sbb    edx,eax
c001e74a:	89 f1                	mov    ecx,esi
c001e74c:	89 c8                	mov    eax,ecx
c001e74e:	83 c4 1c             	add    esp,0x1c
c001e751:	5b                   	pop    ebx
c001e752:	5e                   	pop    esi
c001e753:	5f                   	pop    edi
c001e754:	5d                   	pop    ebp
c001e755:	c3                   	ret    
c001e756:	66 90                	xchg   ax,ax
c001e758:	ba 20 00 00 00       	mov    edx,0x20
c001e75d:	29 ea                	sub    edx,ebp
c001e75f:	89 e9                	mov    ecx,ebp
c001e761:	d3 e0                	shl    eax,cl
c001e763:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e767:	89 f8                	mov    eax,edi
c001e769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e76d:	88 d1                	mov    cl,dl
c001e76f:	d3 e8                	shr    eax,cl
c001e771:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e775:	09 c1                	or     ecx,eax
c001e777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e77b:	89 e9                	mov    ecx,ebp
c001e77d:	d3 e7                	shl    edi,cl
c001e77f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e783:	89 d8                	mov    eax,ebx
c001e785:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e789:	88 d1                	mov    cl,dl
c001e78b:	d3 e8                	shr    eax,cl
c001e78d:	89 c7                	mov    edi,eax
c001e78f:	89 e9                	mov    ecx,ebp
c001e791:	d3 e3                	shl    ebx,cl
c001e793:	89 f0                	mov    eax,esi
c001e795:	88 d1                	mov    cl,dl
c001e797:	d3 e8                	shr    eax,cl
c001e799:	09 d8                	or     eax,ebx
c001e79b:	89 e9                	mov    ecx,ebp
c001e79d:	d3 e6                	shl    esi,cl
c001e79f:	89 f3                	mov    ebx,esi
c001e7a1:	89 fa                	mov    edx,edi
c001e7a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7a7:	89 d1                	mov    ecx,edx
c001e7a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7ad:	89 c6                	mov    esi,eax
c001e7af:	89 d7                	mov    edi,edx
c001e7b1:	39 d1                	cmp    ecx,edx
c001e7b3:	72 27                	jb     c001e7dc <__umoddi3+0x10c>
c001e7b5:	74 21                	je     c001e7d8 <__umoddi3+0x108>
c001e7b7:	89 ca                	mov    edx,ecx
c001e7b9:	29 f3                	sub    ebx,esi
c001e7bb:	19 fa                	sbb    edx,edi
c001e7bd:	89 d0                	mov    eax,edx
c001e7bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7c3:	d3 e0                	shl    eax,cl
c001e7c5:	89 e9                	mov    ecx,ebp
c001e7c7:	d3 eb                	shr    ebx,cl
c001e7c9:	09 d8                	or     eax,ebx
c001e7cb:	d3 ea                	shr    edx,cl
c001e7cd:	83 c4 1c             	add    esp,0x1c
c001e7d0:	5b                   	pop    ebx
c001e7d1:	5e                   	pop    esi
c001e7d2:	5f                   	pop    edi
c001e7d3:	5d                   	pop    ebp
c001e7d4:	c3                   	ret    
c001e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d8:	39 c3                	cmp    ebx,eax
c001e7da:	73 db                	jae    c001e7b7 <__umoddi3+0xe7>
c001e7dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7e4:	89 d7                	mov    edi,edx
c001e7e6:	89 c6                	mov    esi,eax
c001e7e8:	eb cd                	jmp    c001e7b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e7ea <_init>:
c001e7ea:	55                   	push   ebp
c001e7eb:	89 e5                	mov    ebp,esp
c001e7ed:	e8 02 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7f2:	e8 e5 fa ff ff       	call   c001e2dc <__do_global_ctors_aux>
c001e7f7:	5d                   	pop    ebp
c001e7f8:	c3                   	ret    

Disassembly of section .fini:

c001e7f9 <_fini>:
c001e7f9:	55                   	push   ebp
c001e7fa:	89 e5                	mov    ebp,esp
c001e7fc:	e8 83 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e801:	5d                   	pop    ebp
c001e802:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e804 <Computer::~Computer()>:
c001e804:	83 ec 0c             	sub    esp,0xc
c001e807:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c001e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e810:	89 10                	mov    DWORD PTR [eax],edx
c001e812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e816:	83 ec 0c             	sub    esp,0xc
c001e819:	50                   	push   eax
c001e81a:	e8 61 d4 fe ff       	call   c000bc80 <Device::~Device()>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	90                   	nop
c001e823:	83 c4 0c             	add    esp,0xc
c001e826:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e828 <Computer::~Computer()>:
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	83 ec 0c             	sub    esp,0xc
c001e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e832:	e8 cd ff ff ff       	call   c001e804 <Computer::~Computer()>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	83 ec 08             	sub    esp,0x8
c001e83d:	68 70 01 00 00       	push   0x170
c001e842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e846:	e8 02 c0 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e852 <idleCommon()>:
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	fa                   	cli    
c001e856:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e85c:	e8 df 67 ff ff       	call   c0015040 <schedule()>
c001e861:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e866:	48                   	dec    eax
c001e867:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e86c:	75 01                	jne    c001e86f <idleCommon()+0x1d>
c001e86e:	fb                   	sti    
c001e86f:	83 c4 0c             	add    esp,0xc
c001e872:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e874 <LinkedList<UnixFile>::~LinkedList()>:
c001e874:	90                   	nop
c001e875:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e876 <LinkedList<UnixFile>::LinkedList()>:
c001e876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8b6:	90                   	nop
c001e8b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8c0:	75 10                	jne    c001e8d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	68 04 fd 01 c0       	push   0xc001fd04
c001e8ca:	e8 68 1f ff ff       	call   c0010837 <KePanic(char const*)>
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d8:	85 c0                	test   eax,eax
c001e8da:	74 34                	je     c001e910 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e3:	85 c0                	test   eax,eax
c001e8e5:	74 29                	je     c001e910 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e907:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e90e:	eb 65                	jmp    c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e914:	8b 00                	mov    eax,DWORD PTR [eax]
c001e916:	85 c0                	test   eax,eax
c001e918:	75 4b                	jne    c001e965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e921:	85 c0                	test   eax,eax
c001e923:	75 40                	jne    c001e965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e92d:	89 10                	mov    DWORD PTR [eax],edx
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e937:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e941:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e94f:	85 c0                	test   eax,eax
c001e951:	74 22                	je     c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e953:	83 ec 0c             	sub    esp,0xc
c001e956:	68 26 fd 01 c0       	push   0xc001fd26
c001e95b:	e8 d7 1e ff ff       	call   c0010837 <KePanic(char const*)>
c001e960:	83 c4 10             	add    esp,0x10
c001e963:	eb 10                	jmp    c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e965:	83 ec 0c             	sub    esp,0xc
c001e968:	68 30 fd 01 c0       	push   0xc001fd30
c001e96d:	e8 c5 1e ff ff       	call   c0010837 <KePanic(char const*)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97c:	8d 50 01             	lea    edx,[eax+0x1]
c001e97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e983:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e986:	90                   	nop
c001e987:	83 c4 0c             	add    esp,0xc
c001e98a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e98c <LinkedList<UnixFile>::getFirstElement()>:
c001e98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e990:	8b 00                	mov    eax,DWORD PTR [eax]
c001e992:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e994 <LinkedList<UnixFile>::removeFirst()>:
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99d:	85 c0                	test   eax,eax
c001e99f:	75 12                	jne    c001e9b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 3c fd 01 c0       	push   0xc001fd3c
c001e9a9:	e8 89 1e ff ff       	call   c0010837 <KePanic(char const*)>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	eb 7e                	jmp    c001ea31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	74 10                	je     c001e9d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	68 87 fd 01 c0       	push   0xc001fd87
c001e9c9:	e8 69 1e ff ff       	call   c0010837 <KePanic(char const*)>
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9da:	85 c0                	test   eax,eax
c001e9dc:	75 33                	jne    c001ea11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9fa:	83 f8 01             	cmp    eax,0x1
c001e9fd:	74 21                	je     c001ea20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9ff:	83 ec 0c             	sub    esp,0xc
c001ea02:	68 60 fd 01 c0       	push   0xc001fd60
c001ea07:	e8 2b 1e ff ff       	call   c0010837 <KePanic(char const*)>
c001ea0c:	83 c4 10             	add    esp,0x10
c001ea0f:	eb 0f                	jmp    c001ea20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1e:	89 10                	mov    DWORD PTR [eax],edx
c001ea20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea27:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea31:	83 c4 0c             	add    esp,0xc
c001ea34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea3e <DriverlessDevice::~DriverlessDevice()>:
c001ea3e:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c001ea43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea47:	89 10                	mov    DWORD PTR [eax],edx
c001ea49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea4d:	50                   	push   eax
c001ea4e:	e8 2d d2 fe ff       	call   c000bc80 <Device::~Device()>
c001ea53:	83 c4 04             	add    esp,0x4
c001ea56:	90                   	nop
c001ea57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea58 <DriverlessDevice::~DriverlessDevice()>:
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea62:	e8 d7 ff ff ff       	call   c001ea3e <DriverlessDevice::~DriverlessDevice()>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	83 ec 08             	sub    esp,0x8
c001ea6d:	68 58 01 00 00       	push   0x158
c001ea72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea76:	e8 d2 bd fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001ea7b:	83 c4 10             	add    esp,0x10
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea82 <LinkedList<Device>::addElement(Device*)>:
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea8a:	75 10                	jne    c001ea9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	68 04 fd 01 c0       	push   0xc001fd04
c001ea94:	e8 9e 1d ff ff       	call   c0010837 <KePanic(char const*)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa2:	85 c0                	test   eax,eax
c001eaa4:	74 3a                	je     c001eae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaad:	85 c0                	test   eax,eax
c001eaaf:	74 2f                	je     c001eae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eade:	eb 68                	jmp    c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae6:	85 c0                	test   eax,eax
c001eae8:	75 4e                	jne    c001eb38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf1:	85 c0                	test   eax,eax
c001eaf3:	75 43                	jne    c001eb38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eafd:	89 10                	mov    DWORD PTR [eax],edx
c001eaff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb22:	85 c0                	test   eax,eax
c001eb24:	74 22                	je     c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb26:	83 ec 0c             	sub    esp,0xc
c001eb29:	68 26 fd 01 c0       	push   0xc001fd26
c001eb2e:	e8 04 1d ff ff       	call   c0010837 <KePanic(char const*)>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	eb 10                	jmp    c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	68 30 fd 01 c0       	push   0xc001fd30
c001eb40:	e8 f2 1c ff ff       	call   c0010837 <KePanic(char const*)>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb4f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb59:	90                   	nop
c001eb5a:	83 c4 0c             	add    esp,0xc
c001eb5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb5e <LinkedList<Device>::LinkedList()>:
c001eb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb9e:	90                   	nop
c001eb9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba6:	85 c0                	test   eax,eax
c001eba8:	75 0e                	jne    c001ebb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb1:	85 c0                	test   eax,eax
c001ebb3:	75 03                	jne    c001ebb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebb5:	b0 01                	mov    al,0x1
c001ebb7:	c3                   	ret    
c001ebb8:	b0 00                	mov    al,0x0
c001ebba:	90                   	nop
c001ebbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ebbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebcd:	85 c0                	test   eax,eax
c001ebcf:	75 17                	jne    c001ebe8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ebd1:	83 ec 0c             	sub    esp,0xc
c001ebd4:	68 3c fd 01 c0       	push   0xc001fd3c
c001ebd9:	e8 59 1c ff ff       	call   c0010837 <KePanic(char const*)>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	e9 96 00 00 00       	jmp    c001ec7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ebe6:	66 90                	xchg   ax,ax
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebf2:	85 c0                	test   eax,eax
c001ebf4:	0f 95 c0             	setne  al
c001ebf7:	0f b6 c0             	movzx  eax,al
c001ebfa:	85 c0                	test   eax,eax
c001ebfc:	74 12                	je     c001ec10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	68 87 fd 01 c0       	push   0xc001fd87
c001ec06:	e8 2c 1c ff ff       	call   c0010837 <KePanic(char const*)>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	66 90                	xchg   ax,ax
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec19:	85 c0                	test   eax,eax
c001ec1b:	0f 94 c0             	sete   al
c001ec1e:	0f b6 c0             	movzx  eax,al
c001ec21:	85 c0                	test   eax,eax
c001ec23:	74 33                	je     c001ec58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec41:	83 f8 01             	cmp    eax,0x1
c001ec44:	74 22                	je     c001ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec46:	83 ec 0c             	sub    esp,0xc
c001ec49:	68 60 fd 01 c0       	push   0xc001fd60
c001ec4e:	e8 e4 1b ff ff       	call   c0010837 <KePanic(char const*)>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	eb 10                	jmp    c001ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec65:	89 10                	mov    DWORD PTR [eax],edx
c001ec67:	90                   	nop
c001ec68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec6f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec79:	8d 76 00             	lea    esi,[esi+0x0]
c001ec7c:	83 c4 0c             	add    esp,0xc
c001ec7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec88:	75 12                	jne    c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec8a:	83 ec 0c             	sub    esp,0xc
c001ec8d:	68 04 fd 01 c0       	push   0xc001fd04
c001ec92:	e8 a0 1b ff ff       	call   c0010837 <KePanic(char const*)>
c001ec97:	83 c4 10             	add    esp,0x10
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca2:	85 c0                	test   eax,eax
c001eca4:	74 36                	je     c001ecdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	74 2b                	je     c001ecdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecbc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecd1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecd8:	eb 6a                	jmp    c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecda:	66 90                	xchg   ax,ax
c001ecdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ece2:	85 c0                	test   eax,eax
c001ece4:	75 4e                	jne    c001ed34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eced:	85 c0                	test   eax,eax
c001ecef:	75 43                	jne    c001ed34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecf9:	89 10                	mov    DWORD PTR [eax],edx
c001ecfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed1b:	85 c0                	test   eax,eax
c001ed1d:	74 25                	je     c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 26 fd 01 c0       	push   0xc001fd26
c001ed27:	e8 0b 1b ff ff       	call   c0010837 <KePanic(char const*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	eb 13                	jmp    c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed31:	8d 76 00             	lea    esi,[esi+0x0]
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	68 30 fd 01 c0       	push   0xc001fd30
c001ed3c:	e8 f6 1a ff ff       	call   c0010837 <KePanic(char const*)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed4b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed55:	90                   	nop
c001ed56:	83 c4 0c             	add    esp,0xc
c001ed59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed5c <ACPI::~ACPI()>:
c001ed5c:	83 ec 0c             	sub    esp,0xc
c001ed5f:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	89 10                	mov    DWORD PTR [eax],edx
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	83 ec 0c             	sub    esp,0xc
c001ed71:	50                   	push   eax
c001ed72:	e8 09 cf fe ff       	call   c000bc80 <Device::~Device()>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	90                   	nop
c001ed7b:	83 c4 0c             	add    esp,0xc
c001ed7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed80 <ACPI::~ACPI()>:
c001ed80:	83 ec 0c             	sub    esp,0xc
c001ed83:	83 ec 0c             	sub    esp,0xc
c001ed86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed8a:	e8 cd ff ff ff       	call   c001ed5c <ACPI::~ACPI()>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	83 ec 08             	sub    esp,0x8
c001ed95:	68 64 12 00 00       	push   0x1264
c001ed9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9e:	e8 aa ba fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001eda3:	83 c4 10             	add    esp,0x10
c001eda6:	83 c4 0c             	add    esp,0xc
c001eda9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001edac <LinkedList<Device>::~LinkedList()>:
c001edac:	90                   	nop
c001edad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001edb0 <LinkedList<Device>::isEmpty()>:
c001edb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb6:	85 c0                	test   eax,eax
c001edb8:	75 0e                	jne    c001edc8 <LinkedList<Device>::isEmpty()+0x18>
c001edba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edc1:	85 c0                	test   eax,eax
c001edc3:	75 03                	jne    c001edc8 <LinkedList<Device>::isEmpty()+0x18>
c001edc5:	b0 01                	mov    al,0x1
c001edc7:	c3                   	ret    
c001edc8:	b0 00                	mov    al,0x0
c001edca:	90                   	nop
c001edcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001edcc <LinkedList<Device>::getFirstElement()>:
c001edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001edd4 <LinkedList<Device>::removeFirst()>:
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eddd:	85 c0                	test   eax,eax
c001eddf:	75 17                	jne    c001edf8 <LinkedList<Device>::removeFirst()+0x24>
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	68 3c fd 01 c0       	push   0xc001fd3c
c001ede9:	e8 49 1a ff ff       	call   c0010837 <KePanic(char const*)>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	e9 92 00 00 00       	jmp    c001ee88 <LinkedList<Device>::removeFirst()+0xb4>
c001edf6:	66 90                	xchg   ax,ax
c001edf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee05:	85 c0                	test   eax,eax
c001ee07:	74 13                	je     c001ee1c <LinkedList<Device>::removeFirst()+0x48>
c001ee09:	83 ec 0c             	sub    esp,0xc
c001ee0c:	68 87 fd 01 c0       	push   0xc001fd87
c001ee11:	e8 21 1a ff ff       	call   c0010837 <KePanic(char const*)>
c001ee16:	83 c4 10             	add    esp,0x10
c001ee19:	8d 76 00             	lea    esi,[esi+0x0]
c001ee1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee28:	85 c0                	test   eax,eax
c001ee2a:	75 34                	jne    c001ee60 <LinkedList<Device>::removeFirst()+0x8c>
c001ee2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee48:	83 f8 01             	cmp    eax,0x1
c001ee4b:	74 27                	je     c001ee74 <LinkedList<Device>::removeFirst()+0xa0>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	68 60 fd 01 c0       	push   0xc001fd60
c001ee55:	e8 dd 19 ff ff       	call   c0010837 <KePanic(char const*)>
c001ee5a:	83 c4 10             	add    esp,0x10
c001ee5d:	eb 15                	jmp    c001ee74 <LinkedList<Device>::removeFirst()+0xa0>
c001ee5f:	90                   	nop
c001ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	89 10                	mov    DWORD PTR [eax],edx
c001ee72:	66 90                	xchg   ax,ax
c001ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee85:	8d 76 00             	lea    esi,[esi+0x0]
c001ee88:	83 c4 0c             	add    esp,0xc
c001ee8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee8c <CPU::~CPU()>:
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c001ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee98:	89 10                	mov    DWORD PTR [eax],edx
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	83 ec 0c             	sub    esp,0xc
c001eea1:	50                   	push   eax
c001eea2:	e8 d9 cd fe ff       	call   c000bc80 <Device::~Device()>
c001eea7:	83 c4 10             	add    esp,0x10
c001eeaa:	90                   	nop
c001eeab:	83 c4 0c             	add    esp,0xc
c001eeae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eeb0 <CPU::~CPU()>:
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeba:	e8 cd ff ff ff       	call   c001ee8c <CPU::~CPU()>
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	83 ec 08             	sub    esp,0x8
c001eec5:	68 94 11 00 00       	push   0x1194
c001eeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eece:	e8 7a b9 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eee0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eee3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eee4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eee4:	90                   	nop
c001eee5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eee8 <ThreadControlBlock::ThreadControlBlock()>:
c001eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef18:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef23:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef2f:	90                   	nop
c001ef30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef74:	90                   	nop
c001ef75:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef76 <PCI::~PCI()>:
c001ef76:	83 ec 0c             	sub    esp,0xc
c001ef79:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c001ef7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef82:	89 10                	mov    DWORD PTR [eax],edx
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	50                   	push   eax
c001ef8c:	e8 87 c7 fe ff       	call   c000b718 <Bus::~Bus()>
c001ef91:	83 c4 10             	add    esp,0x10
c001ef94:	90                   	nop
c001ef95:	83 c4 0c             	add    esp,0xc
c001ef98:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef9a <PCI::~PCI()>:
c001ef9a:	83 ec 0c             	sub    esp,0xc
c001ef9d:	83 ec 0c             	sub    esp,0xc
c001efa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa4:	e8 cd ff ff ff       	call   c001ef76 <PCI::~PCI()>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	83 ec 08             	sub    esp,0x8
c001efaf:	68 5c 01 00 00       	push   0x15c
c001efb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb8:	e8 90 b8 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	83 c4 0c             	add    esp,0xc
c001efc3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001efc4 <IDE::~IDE()>:
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c001efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd0:	89 10                	mov    DWORD PTR [eax],edx
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	50                   	push   eax
c001efda:	e8 15 d1 fe ff       	call   c000c0f4 <HardDiskController::~HardDiskController()>
c001efdf:	83 c4 10             	add    esp,0x10
c001efe2:	90                   	nop
c001efe3:	83 c4 0c             	add    esp,0xc
c001efe6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001efe8 <IDE::~IDE()>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	83 ec 0c             	sub    esp,0xc
c001efee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff2:	e8 cd ff ff ff       	call   c001efc4 <IDE::~IDE()>
c001eff7:	83 c4 10             	add    esp,0x10
c001effa:	83 ec 08             	sub    esp,0x8
c001effd:	68 70 02 00 00       	push   0x270
c001f002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f006:	e8 42 b8 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	83 c4 0c             	add    esp,0xc
c001f011:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f012 <SATABus::~SATABus()>:
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01e:	89 10                	mov    DWORD PTR [eax],edx
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	50                   	push   eax
c001f028:	e8 c7 d0 fe ff       	call   c000c0f4 <HardDiskController::~HardDiskController()>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	90                   	nop
c001f031:	83 c4 0c             	add    esp,0xc
c001f034:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f036 <SATABus::~SATABus()>:
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	83 ec 0c             	sub    esp,0xc
c001f03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f040:	e8 cd ff ff ff       	call   c001f012 <SATABus::~SATABus()>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	83 ec 08             	sub    esp,0x8
c001f04b:	68 64 01 00 00       	push   0x164
c001f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f054:	e8 f4 b7 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	83 c4 0c             	add    esp,0xc
c001f05f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f060 <ATA::~ATA()>:
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c001f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06c:	89 10                	mov    DWORD PTR [eax],edx
c001f06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	50                   	push   eax
c001f076:	e8 5b d1 fe ff       	call   c000c1d6 <PhysicalDisk::~PhysicalDisk()>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	90                   	nop
c001f07f:	83 c4 0c             	add    esp,0xc
c001f082:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f084 <ATA::~ATA()>:
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	83 ec 0c             	sub    esp,0xc
c001f08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08e:	e8 cd ff ff ff       	call   c001f060 <ATA::~ATA()>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	83 ec 08             	sub    esp,0x8
c001f099:	68 7c 01 00 00       	push   0x17c
c001f09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a2:	e8 a6 b7 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	83 c4 0c             	add    esp,0xc
c001f0ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0ae <ATAPI::~ATAPI()>:
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ba:	89 10                	mov    DWORD PTR [eax],edx
c001f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	50                   	push   eax
c001f0c4:	e8 0d d1 fe ff       	call   c000c1d6 <PhysicalDisk::~PhysicalDisk()>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	90                   	nop
c001f0cd:	83 c4 0c             	add    esp,0xc
c001f0d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f0d2 <ATAPI::~ATAPI()>:
c001f0d2:	83 ec 0c             	sub    esp,0xc
c001f0d5:	83 ec 0c             	sub    esp,0xc
c001f0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0dc:	e8 cd ff ff ff       	call   c001f0ae <ATAPI::~ATAPI()>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	83 ec 08             	sub    esp,0x8
c001f0e7:	68 84 01 00 00       	push   0x184
c001f0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f0:	e8 58 b7 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	83 c4 0c             	add    esp,0xc
c001f0fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0fc <SATA::~SATA()>:
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f108:	89 10                	mov    DWORD PTR [eax],edx
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	50                   	push   eax
c001f112:	e8 bf d0 fe ff       	call   c000c1d6 <PhysicalDisk::~PhysicalDisk()>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	90                   	nop
c001f11b:	83 c4 0c             	add    esp,0xc
c001f11e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f120 <SATA::~SATA()>:
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	83 ec 0c             	sub    esp,0xc
c001f126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12a:	e8 cd ff ff ff       	call   c001f0fc <SATA::~SATA()>
c001f12f:	83 c4 10             	add    esp,0x10
c001f132:	83 ec 08             	sub    esp,0x8
c001f135:	68 7c 01 00 00       	push   0x17c
c001f13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13e:	e8 0a b7 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	83 c4 0c             	add    esp,0xc
c001f149:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f14a <SATAPI::~SATAPI()>:
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001f152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f156:	89 10                	mov    DWORD PTR [eax],edx
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	50                   	push   eax
c001f160:	e8 71 d0 fe ff       	call   c000c1d6 <PhysicalDisk::~PhysicalDisk()>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	90                   	nop
c001f169:	83 c4 0c             	add    esp,0xc
c001f16c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f16e <SATAPI::~SATAPI()>:
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f178:	e8 cd ff ff ff       	call   c001f14a <SATAPI::~SATAPI()>
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	83 ec 08             	sub    esp,0x8
c001f183:	68 84 01 00 00       	push   0x184
c001f188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18c:	e8 bc b6 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f191:	83 c4 10             	add    esp,0x10
c001f194:	83 c4 0c             	add    esp,0xc
c001f197:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f198 <IOAPIC::~IOAPIC()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c001f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	50                   	push   eax
c001f1ae:	e8 cd ca fe ff       	call   c000bc80 <Device::~Device()>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f1bc <IOAPIC::~IOAPIC()>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c6:	e8 cd ff ff ff       	call   c001f198 <IOAPIC::~IOAPIC()>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 ec 08             	sub    esp,0x8
c001f1d1:	68 68 01 00 00       	push   0x168
c001f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1da:	e8 6e b6 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1e8 <APICTimer::~APICTimer()>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c001f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f4:	89 10                	mov    DWORD PTR [eax],edx
c001f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	50                   	push   eax
c001f1fe:	e8 55 e5 fe ff       	call   c000d758 <Timer::~Timer()>
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	90                   	nop
c001f207:	83 c4 0c             	add    esp,0xc
c001f20a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f20c <APICTimer::~APICTimer()>:
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	83 ec 0c             	sub    esp,0xc
c001f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f216:	e8 cd ff ff ff       	call   c001f1e8 <APICTimer::~APICTimer()>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	83 ec 08             	sub    esp,0x8
c001f221:	68 60 01 00 00       	push   0x160
c001f226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22a:	e8 1e b6 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f238 <PIT::~PIT()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	89 10                	mov    DWORD PTR [eax],edx
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	50                   	push   eax
c001f24e:	e8 05 e5 fe ff       	call   c000d758 <Timer::~Timer()>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	90                   	nop
c001f257:	83 c4 0c             	add    esp,0xc
c001f25a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f25c <PIT::~PIT()>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 cd ff ff ff       	call   c001f238 <PIT::~PIT()>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	68 5c 01 00 00       	push   0x15c
c001f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27a:	e8 ce b5 fe ff       	call   c000a84d <operator delete(void*, unsigned long)>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 35 0c 02 c0       	mov    esi,0xc0020c35
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	8d 44 24 04          	lea    eax,[esp+0x4]
c0023018:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 51 0c 02 c0       	mov    esi,0xc0020c51
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
