
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f4 63 01 00       	call   c0016414 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 47 03 c0       	mov    eax,0xc0034724
c0000025:	3d 24 47 03 c0       	cmp    eax,0xc0034724
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 47 03 c0       	push   0xc0034724
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 47 03 c0       	mov    eax,0xc0034724
c0000051:	2d 24 47 03 c0       	sub    eax,0xc0034724
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 47 03 c0       	push   0xc0034724
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 1c f3 02 c0       	mov    ebx,0xc002f31c
c0000097:	81 eb 18 f3 02 c0    	sub    ebx,0xc002f318
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 18 f3 02 c0       	mov    esi,0xc002f318
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 47 03 c0       	push   0xc0034724
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 24 47 03 c0       	push   0xc0034724
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 47 02 00       	call   c0024a88 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c 8d 01 00       	call   c0018fd1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 47 02 00       	call   c0024a88 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c6 4c 02 00       	call   c0024fb4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 69 51 02 00       	call   c0025460 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b3 fe 01 00       	jmp    c0020232 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 f3 02 c0 02 	test   BYTE PTR [edx-0x3ffd0ce0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ce0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 f3 02 c0 08 	test   BYTE PTR [edx-0x3ffd0ce0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 f3 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0ce0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ce0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 21 f4 02 c0       	push   0xc002f421
c0000c47:	e8 24 11 02 00       	call   c0021d70 <KeCPanic>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 32 f4 02 c0       	push   0xc002f432
c0000c5f:	e8 0c 11 02 00       	call   c0021d70 <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 27 10 02 00       	call   c0021cb0 <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 51 10 02 00       	call   c0021cf4 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 55 10 02 00       	call   c0021d10 <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 54 10 02 00       	call   c0021d2c <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 4c f4 02 c0       	push   0xc002f44c
c0000ceb:	e8 80 10 02 00       	call   c0021d70 <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 59 f4 02 c0       	push   0xc002f459
c0000d07:	e8 64 10 02 00       	call   c0021d70 <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 67 f4 02 c0       	push   0xc002f467
c0000d1f:	e8 4c 10 02 00       	call   c0021d70 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 75 f4 02 c0       	push   0xc002f475
c0000d37:	e8 34 10 02 00       	call   c0021d70 <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 89 f4 02 c0       	push   0xc002f489
c0000d53:	e8 18 10 02 00       	call   c0021d70 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 a0 f4 02 c0       	push   0xc002f4a0
c0000d6f:	e8 fc 0f 02 00       	call   c0021d70 <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 bd 0f 02 00       	call   c0021d4c <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000f10:	85 db                	test   ebx,ebx
c0000f12:	0f 84 e2 00 00 00    	je     c0000ffa <dlfree+0xf1>
c0000f18:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000f1b:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c1                	cmp    ecx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 c9 03             	or     ecx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 a9 00 00 00       	jmp    c0000ffa <dlfree+0xf1>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 c9 01             	or     ecx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f66:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000f69:	83 e1 fc             	and    ecx,0xfffffffc
c0000f6c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000f75:	29 da                	sub    edx,ebx
c0000f77:	01 d8                	add    eax,ebx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000f7f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f82:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000f91:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000f94:	80 e3 01             	and    bl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000f9f:	01 c8                	add    eax,ecx
c0000fa1:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fa4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 c8                	add    eax,ecx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 16                	jbe    c0000ffa <dlfree+0xf1>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 0d                	je     c0000ffa <dlfree+0xf1>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	5b                   	pop    ebx
c0000ffb:	5e                   	pop    esi
c0000ffc:	5f                   	pop    edi
c0000ffd:	c3                   	ret    

c0000ffe <sYSMALLOc>:
c0000ffe:	55                   	push   ebp
c0000fff:	57                   	push   edi
c0001000:	56                   	push   esi
c0001001:	53                   	push   ebx
c0001002:	89 d3                	mov    ebx,edx
c0001004:	83 ec 2c             	sub    esp,0x2c
c0001007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000100b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0001011:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0001014:	8d 42 ff             	lea    eax,[edx-0x1]
c0001017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000101b:	74 1f                	je     c000103c <sYSMALLOc+0x3e>
c000101d:	89 d8                	mov    eax,ebx
c000101f:	e8 fe fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001024:	83 ec 0c             	sub    esp,0xc
c0001027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000102b:	83 e8 07             	sub    eax,0x7
c000102e:	50                   	push   eax
c000102f:	e8 2d 02 00 00       	call   c0001261 <dlmalloc>
c0001034:	83 c4 10             	add    esp,0x10
c0001037:	e9 1d 02 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c000103c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c000103f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0001045:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0001048:	83 e0 fc             	and    eax,0xfffffffc
c000104b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000104f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001053:	83 c0 10             	add    eax,0x10
c0001056:	01 c1                	add    ecx,eax
c0001058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000105c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001063:	74 04                	je     c0001069 <sYSMALLOc+0x6b>
c0001065:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0001069:	f7 da                	neg    edx
c000106b:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c000106f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001073:	21 d1                	and    ecx,edx
c0001075:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0001079:	7f 07                	jg     c0001082 <sYSMALLOc+0x84>
c000107b:	31 c0                	xor    eax,eax
c000107d:	e9 d7 01 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c0001082:	83 ec 0c             	sub    esp,0xc
c0001085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0001089:	e8 fe 51 01 00       	call   c001628c <sbrk>
c000108e:	83 c4 10             	add    esp,0x10
c0001091:	89 c6                	mov    esi,eax
c0001093:	83 f8 ff             	cmp    eax,0xffffffff
c0001096:	74 e3                	je     c000107b <sYSMALLOc+0x7d>
c0001098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000109c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000109f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010a3:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c00010a9:	39 f1                	cmp    ecx,esi
c00010ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00010af:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c00010b5:	75 13                	jne    c00010ca <sYSMALLOc+0xcc>
c00010b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00010bf:	83 c8 01             	or     eax,0x1
c00010c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00010c5:	e9 37 01 00 00       	jmp    c0001201 <sYSMALLOc+0x203>
c00010ca:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010d0:	89 d5                	mov    ebp,edx
c00010d2:	83 e5 01             	and    ebp,0x1
c00010d5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010da:	0f 95 c0             	setne  al
c00010dd:	21 e8                	and    eax,ebp
c00010df:	39 f1                	cmp    ecx,esi
c00010e1:	76 12                	jbe    c00010f5 <sYSMALLOc+0xf7>
c00010e3:	85 c0                	test   eax,eax
c00010e5:	74 0e                	je     c00010f5 <sYSMALLOc+0xf7>
c00010e7:	83 e2 fe             	and    edx,0xfffffffe
c00010ea:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010f0:	e9 82 00 00 00       	jmp    c0001177 <sYSMALLOc+0x179>
c00010f5:	85 ed                	test   ebp,ebp
c00010f7:	74 7e                	je     c0001177 <sYSMALLOc+0x179>
c00010f9:	85 c0                	test   eax,eax
c00010fb:	74 0e                	je     c000110b <sYSMALLOc+0x10d>
c00010fd:	89 f0                	mov    eax,esi
c00010ff:	29 c8                	sub    eax,ecx
c0001101:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001105:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000110b:	89 f2                	mov    edx,esi
c000110d:	83 e2 07             	and    edx,0x7
c0001110:	74 0c                	je     c000111e <sYSMALLOc+0x120>
c0001112:	b8 08 00 00 00       	mov    eax,0x8
c0001117:	29 d0                	sub    eax,edx
c0001119:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000111c:	eb 04                	jmp    c0001122 <sYSMALLOc+0x124>
c000111e:	89 f5                	mov    ebp,esi
c0001120:	31 c0                	xor    eax,eax
c0001122:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000112a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000112e:	01 c1                	add    ecx,eax
c0001130:	83 ec 0c             	sub    esp,0xc
c0001133:	01 f1                	add    ecx,esi
c0001135:	01 ca                	add    edx,ecx
c0001137:	29 c8                	sub    eax,ecx
c0001139:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c000113d:	01 c2                	add    edx,eax
c000113f:	52                   	push   edx
c0001140:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001144:	e8 43 51 01 00       	call   c001628c <sbrk>
c0001149:	83 c4 10             	add    esp,0x10
c000114c:	83 f8 ff             	cmp    eax,0xffffffff
c000114f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001153:	75 0f                	jne    c0001164 <sYSMALLOc+0x166>
c0001155:	83 ec 0c             	sub    esp,0xc
c0001158:	6a 00                	push   0x0
c000115a:	e8 2d 51 01 00       	call   c001628c <sbrk>
c000115f:	83 c4 10             	add    esp,0x10
c0001162:	eb 30                	jmp    c0001194 <sYSMALLOc+0x196>
c0001164:	39 c6                	cmp    esi,eax
c0001166:	76 33                	jbe    c000119b <sYSMALLOc+0x19d>
c0001168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000116c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001173:	01 f0                	add    eax,esi
c0001175:	eb 1d                	jmp    c0001194 <sYSMALLOc+0x196>
c0001177:	83 ec 0c             	sub    esp,0xc
c000117a:	89 f5                	mov    ebp,esi
c000117c:	6a 00                	push   0x0
c000117e:	e8 09 51 01 00       	call   c001628c <sbrk>
c0001183:	89 c2                	mov    edx,eax
c0001185:	29 f2                	sub    edx,esi
c0001187:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000118b:	83 c4 10             	add    esp,0x10
c000118e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001194:	31 d2                	xor    edx,edx
c0001196:	83 f8 ff             	cmp    eax,0xffffffff
c0001199:	74 66                	je     c0001201 <sYSMALLOc+0x203>
c000119b:	29 e8                	sub    eax,ebp
c000119d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00011a0:	01 d0                	add    eax,edx
c00011a2:	83 c8 01             	or     eax,0x1
c00011a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00011a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00011ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011b3:	74 4c                	je     c0001201 <sYSMALLOc+0x203>
c00011b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011b9:	83 e8 0c             	sub    eax,0xc
c00011bc:	83 e0 f8             	and    eax,0xfffffff8
c00011bf:	89 c2                	mov    edx,eax
c00011c1:	83 ca 01             	or     edx,0x1
c00011c4:	83 f8 0f             	cmp    eax,0xf
c00011c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00011ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00011d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00011da:	76 25                	jbe    c0001201 <sYSMALLOc+0x203>
c00011dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011e2:	83 ec 0c             	sub    esp,0xc
c00011e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011ef:	83 c7 08             	add    edi,0x8
c00011f2:	57                   	push   edi
c00011f3:	e8 11 fd ff ff       	call   c0000f09 <dlfree>
c00011f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011fe:	83 c4 10             	add    esp,0x10
c0001201:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001207:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000120d:	73 06                	jae    c0001215 <sYSMALLOc+0x217>
c000120f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001215:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000121b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001221:	73 06                	jae    c0001229 <sYSMALLOc+0x22b>
c0001223:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001229:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000122c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000122f:	83 e2 fc             	and    edx,0xfffffffc
c0001232:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001236:	0f 82 3f fe ff ff    	jb     c000107b <sYSMALLOc+0x7d>
c000123c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001240:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001243:	29 fa                	sub    edx,edi
c0001245:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001248:	83 ca 01             	or     edx,0x1
c000124b:	89 fb                	mov    ebx,edi
c000124d:	83 c0 08             	add    eax,0x8
c0001250:	83 cb 01             	or     ebx,0x1
c0001253:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001256:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001259:	83 c4 2c             	add    esp,0x2c
c000125c:	5b                   	pop    ebx
c000125d:	5e                   	pop    esi
c000125e:	5f                   	pop    edi
c000125f:	5d                   	pop    ebp
c0001260:	c3                   	ret    

c0001261 <dlmalloc>:
c0001261:	55                   	push   ebp
c0001262:	57                   	push   edi
c0001263:	56                   	push   esi
c0001264:	53                   	push   ebx
c0001265:	83 ec 1c             	sub    esp,0x1c
c0001268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000126c:	83 f8 df             	cmp    eax,0xffffffdf
c000126f:	0f 87 70 03 00 00    	ja     c00015e5 <dlmalloc+0x384>
c0001275:	83 c0 0b             	add    eax,0xb
c0001278:	be 10 00 00 00       	mov    esi,0x10
c000127d:	83 f8 0f             	cmp    eax,0xf
c0001280:	76 05                	jbe    c0001287 <dlmalloc+0x26>
c0001282:	83 e0 f8             	and    eax,0xfffffff8
c0001285:	89 c6                	mov    esi,eax
c0001287:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000128d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001293:	75 17                	jne    c00012ac <dlmalloc+0x4b>
c0001295:	85 ff                	test   edi,edi
c0001297:	0f 85 05 03 00 00    	jne    c00015a2 <dlmalloc+0x341>
c000129d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012a2:	e8 7b fb ff ff       	call   c0000e22 <malloc_consolidate>
c00012a7:	e9 f6 02 00 00       	jmp    c00015a2 <dlmalloc+0x341>
c00012ac:	39 f7                	cmp    edi,esi
c00012ae:	72 1f                	jb     c00012cf <dlmalloc+0x6e>
c00012b0:	89 f2                	mov    edx,esi
c00012b2:	c1 ea 03             	shr    edx,0x3
c00012b5:	83 ea 02             	sub    edx,0x2
c00012b8:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00012bf:	85 c0                	test   eax,eax
c00012c1:	74 0c                	je     c00012cf <dlmalloc+0x6e>
c00012c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012c6:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c00012cd:	eb 30                	jmp    c00012ff <dlmalloc+0x9e>
c00012cf:	89 f0                	mov    eax,esi
c00012d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d7:	77 2e                	ja     c0001307 <dlmalloc+0xa6>
c00012d9:	c1 e8 03             	shr    eax,0x3
c00012dc:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c00012e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012ed:	39 c3                	cmp    ebx,eax
c00012ef:	74 2e                	je     c000131f <dlmalloc+0xbe>
c00012f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012ff:	83 c0 08             	add    eax,0x8
c0001302:	e9 e0 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001307:	e8 92 fa ff ff       	call   c0000d9e <largebin_index>
c000130c:	83 e7 02             	and    edi,0x2
c000130f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001313:	74 0a                	je     c000131f <dlmalloc+0xbe>
c0001315:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000131a:	e8 03 fb ff ff       	call   c0000e22 <malloc_consolidate>
c000131f:	8d 46 10             	lea    eax,[esi+0x10]
c0001322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001326:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000132c:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001332:	0f 84 13 01 00 00    	je     c000144b <dlmalloc+0x1ea>
c0001338:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000133b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000133e:	83 e7 fc             	and    edi,0xfffffffc
c0001341:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001347:	77 4c                	ja     c0001395 <dlmalloc+0x134>
c0001349:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c000134e:	75 45                	jne    c0001395 <dlmalloc+0x134>
c0001350:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001356:	75 3d                	jne    c0001395 <dlmalloc+0x134>
c0001358:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000135c:	73 37                	jae    c0001395 <dlmalloc+0x134>
c000135e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001361:	89 fa                	mov    edx,edi
c0001363:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001368:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000136d:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001372:	29 f2                	sub    edx,esi
c0001374:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000137b:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001382:	83 ce 01             	or     esi,0x1
c0001385:	89 d1                	mov    ecx,edx
c0001387:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000138a:	83 c9 01             	or     ecx,0x1
c000138d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001390:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001393:	eb 15                	jmp    c00013aa <dlmalloc+0x149>
c0001395:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000139a:	39 fe                	cmp    esi,edi
c000139c:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013a3:	75 0d                	jne    c00013b2 <dlmalloc+0x151>
c00013a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00013aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00013ad:	e9 35 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00013b2:	89 f8                	mov    eax,edi
c00013b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00013ba:	77 19                	ja     c00013d5 <dlmalloc+0x174>
c00013bc:	c1 e8 03             	shr    eax,0x3
c00013bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c2:	83 c2 0d             	add    edx,0xd
c00013c5:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c00013cc:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013d3:	eb 46                	jmp    c000141b <dlmalloc+0x1ba>
c00013d5:	e8 c4 f9 ff ff       	call   c0000d9e <largebin_index>
c00013da:	8d 14 00             	lea    edx,[eax+eax*1]
c00013dd:	83 c2 0d             	add    edx,0xd
c00013e0:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c00013e7:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013f5:	89 d5                	mov    ebp,edx
c00013f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013fb:	74 1e                	je     c000141b <dlmalloc+0x1ba>
c00013fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001400:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001403:	77 12                	ja     c0001417 <dlmalloc+0x1b6>
c0001405:	83 cf 01             	or     edi,0x1
c0001408:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000140b:	76 05                	jbe    c0001412 <dlmalloc+0x1b1>
c000140d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001410:	eb f6                	jmp    c0001408 <dlmalloc+0x1a7>
c0001412:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001415:	eb 04                	jmp    c000141b <dlmalloc+0x1ba>
c0001417:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000141b:	89 c7                	mov    edi,eax
c000141d:	88 c1                	mov    cl,al
c000141f:	c1 ff 05             	sar    edi,0x5
c0001422:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001426:	bf 01 00 00 00       	mov    edi,0x1
c000142b:	d3 e7                	shl    edi,cl
c000142d:	89 f8                	mov    eax,edi
c000142f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001433:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c000143a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000143d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001440:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001443:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001446:	e9 db fe ff ff       	jmp    c0001326 <dlmalloc+0xc5>
c000144b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001451:	76 78                	jbe    c00014cb <dlmalloc+0x26a>
c0001453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001457:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c000145e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001461:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001464:	39 ca                	cmp    edx,ecx
c0001466:	74 63                	je     c00014cb <dlmalloc+0x26a>
c0001468:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000146b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000146e:	83 e3 fc             	and    ebx,0xfffffffc
c0001471:	39 de                	cmp    esi,ebx
c0001473:	77 52                	ja     c00014c7 <dlmalloc+0x266>
c0001475:	89 df                	mov    edi,ebx
c0001477:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000147a:	29 f7                	sub    edi,esi
c000147c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000147f:	01 d3                	add    ebx,edx
c0001481:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001484:	83 ff 0f             	cmp    edi,0xf
c0001487:	8d 42 08             	lea    eax,[edx+0x8]
c000148a:	77 09                	ja     c0001495 <dlmalloc+0x234>
c000148c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001490:	e9 52 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001495:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001498:	83 ce 01             	or     esi,0x1
c000149b:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00014a1:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00014a7:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00014ae:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00014b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00014b8:	89 fa                	mov    edx,edi
c00014ba:	83 ca 01             	or     edx,0x1
c00014bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00014c2:	e9 20 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00014c7:	89 c2                	mov    edx,eax
c00014c9:	eb 99                	jmp    c0001464 <dlmalloc+0x203>
c00014cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014cf:	b8 01 00 00 00       	mov    eax,0x1
c00014d4:	41                   	inc    ecx
c00014d5:	89 cb                	mov    ebx,ecx
c00014d7:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c00014de:	c1 eb 05             	shr    ebx,0x5
c00014e1:	d3 e0                	shl    eax,cl
c00014e3:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00014ea:	39 f8                	cmp    eax,edi
c00014ec:	77 04                	ja     c00014f2 <dlmalloc+0x291>
c00014ee:	85 c0                	test   eax,eax
c00014f0:	75 26                	jne    c0001518 <dlmalloc+0x2b7>
c00014f2:	43                   	inc    ebx
c00014f3:	83 fb 02             	cmp    ebx,0x2
c00014f6:	0f 87 a6 00 00 00    	ja     c00015a2 <dlmalloc+0x341>
c00014fc:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001503:	85 ff                	test   edi,edi
c0001505:	74 eb                	je     c00014f2 <dlmalloc+0x291>
c0001507:	89 d8                	mov    eax,ebx
c0001509:	c1 e0 06             	shl    eax,0x6
c000150c:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001513:	b8 01 00 00 00       	mov    eax,0x1
c0001518:	85 f8                	test   eax,edi
c000151a:	75 07                	jne    c0001523 <dlmalloc+0x2c2>
c000151c:	83 c2 08             	add    edx,0x8
c000151f:	01 c0                	add    eax,eax
c0001521:	eb f5                	jmp    c0001518 <dlmalloc+0x2b7>
c0001523:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001526:	39 ca                	cmp    edx,ecx
c0001528:	75 14                	jne    c000153e <dlmalloc+0x2dd>
c000152a:	89 c1                	mov    ecx,eax
c000152c:	83 c2 08             	add    edx,0x8
c000152f:	f7 d1                	not    ecx
c0001531:	01 c0                	add    eax,eax
c0001533:	21 cf                	and    edi,ecx
c0001535:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c000153c:	eb ac                	jmp    c00014ea <dlmalloc+0x289>
c000153e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001541:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001544:	83 e0 fc             	and    eax,0xfffffffc
c0001547:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000154a:	89 c3                	mov    ebx,eax
c000154c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000154f:	29 f3                	sub    ebx,esi
c0001551:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001554:	83 fb 0f             	cmp    ebx,0xf
c0001557:	8d 41 08             	lea    eax,[ecx+0x8]
c000155a:	77 09                	ja     c0001565 <dlmalloc+0x304>
c000155c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001560:	e9 82 00 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001565:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001568:	81 fe ff 00 00 00    	cmp    esi,0xff
c000156e:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001574:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c000157a:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c0001581:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001588:	77 06                	ja     c0001590 <dlmalloc+0x32f>
c000158a:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c0001590:	83 ce 01             	or     esi,0x1
c0001593:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001596:	89 d9                	mov    ecx,ebx
c0001598:	83 c9 01             	or     ecx,0x1
c000159b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000159e:	89 1a                	mov    DWORD PTR [edx],ebx
c00015a0:	eb 45                	jmp    c00015e7 <dlmalloc+0x386>
c00015a2:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00015a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00015aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ad:	83 e2 fc             	and    edx,0xfffffffc
c00015b0:	39 d1                	cmp    ecx,edx
c00015b2:	77 1e                	ja     c00015d2 <dlmalloc+0x371>
c00015b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015b7:	89 f3                	mov    ebx,esi
c00015b9:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00015bf:	83 cb 01             	or     ebx,0x1
c00015c2:	29 f2                	sub    edx,esi
c00015c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c7:	83 ca 01             	or     edx,0x1
c00015ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015cd:	e9 2d fd ff ff       	jmp    c00012ff <dlmalloc+0x9e>
c00015d2:	83 c4 1c             	add    esp,0x1c
c00015d5:	89 f0                	mov    eax,esi
c00015d7:	5b                   	pop    ebx
c00015d8:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c00015dd:	5e                   	pop    esi
c00015de:	5f                   	pop    edi
c00015df:	5d                   	pop    ebp
c00015e0:	e9 19 fa ff ff       	jmp    c0000ffe <sYSMALLOc>
c00015e5:	31 c0                	xor    eax,eax
c00015e7:	83 c4 1c             	add    esp,0x1c
c00015ea:	5b                   	pop    ebx
c00015eb:	5e                   	pop    esi
c00015ec:	5f                   	pop    edi
c00015ed:	5d                   	pop    ebp
c00015ee:	c3                   	ret    

c00015ef <iALLOc>:
c00015ef:	55                   	push   ebp
c00015f0:	89 c5                	mov    ebp,eax
c00015f2:	57                   	push   edi
c00015f3:	56                   	push   esi
c00015f4:	53                   	push   ebx
c00015f5:	83 ec 2c             	sub    esp,0x2c
c00015f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001604:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000160b:	75 12                	jne    c000161f <iALLOc+0x30>
c000160d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001611:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001616:	e8 07 f8 ff ff       	call   c0000e22 <malloc_consolidate>
c000161b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000161f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001624:	74 12                	je     c0001638 <iALLOc+0x49>
c0001626:	85 ed                	test   ebp,ebp
c0001628:	0f 84 64 01 00 00    	je     c0001792 <iALLOc+0x1a3>
c000162e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001636:	eb 33                	jmp    c000166b <iALLOc+0x7c>
c0001638:	85 ed                	test   ebp,ebp
c000163a:	75 14                	jne    c0001650 <iALLOc+0x61>
c000163c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001644:	83 c4 2c             	add    esp,0x2c
c0001647:	5b                   	pop    ebx
c0001648:	5e                   	pop    esi
c0001649:	5f                   	pop    edi
c000164a:	5d                   	pop    ebp
c000164b:	e9 11 fc ff ff       	jmp    c0001261 <dlmalloc>
c0001650:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001657:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000165f:	83 f8 0f             	cmp    eax,0xf
c0001662:	76 07                	jbe    c000166b <iALLOc+0x7c>
c0001664:	83 e0 f8             	and    eax,0xfffffff8
c0001667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000166b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001670:	75 09                	jne    c000167b <iALLOc+0x8c>
c0001672:	89 d0                	mov    eax,edx
c0001674:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001677:	31 f6                	xor    esi,esi
c0001679:	eb 3b                	jmp    c00016b6 <iALLOc+0xc7>
c000167b:	8b 02                	mov    eax,DWORD PTR [edx]
c000167d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001685:	83 c0 0b             	add    eax,0xb
c0001688:	83 f8 0f             	cmp    eax,0xf
c000168b:	76 07                	jbe    c0001694 <iALLOc+0xa5>
c000168d:	83 e0 f8             	and    eax,0xfffffff8
c0001690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001694:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001698:	0f af f5             	imul   esi,ebp
c000169b:	eb 25                	jmp    c00016c2 <iALLOc+0xd3>
c000169d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000169f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00016a2:	bb 10 00 00 00       	mov    ebx,0x10
c00016a7:	83 f9 0f             	cmp    ecx,0xf
c00016aa:	76 05                	jbe    c00016b1 <iALLOc+0xc2>
c00016ac:	83 e1 f8             	and    ecx,0xfffffff8
c00016af:	89 cb                	mov    ebx,ecx
c00016b1:	01 de                	add    esi,ebx
c00016b3:	83 c0 04             	add    eax,0x4
c00016b6:	39 c7                	cmp    edi,eax
c00016b8:	75 e3                	jne    c000169d <iALLOc+0xae>
c00016ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016c6:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c00016d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016e1:	50                   	push   eax
c00016e2:	e8 7a fb ff ff       	call   c0001261 <dlmalloc>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c00016f0:	85 c0                	test   eax,eax
c00016f2:	0f 84 92 00 00 00    	je     c000178a <iALLOc+0x19b>
c00016f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00016fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001705:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000170a:	74 1e                	je     c000172a <iALLOc+0x13b>
c000170c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001710:	89 d9                	mov    ecx,ebx
c0001712:	52                   	push   edx
c0001713:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001717:	83 e9 04             	sub    ecx,0x4
c000171a:	51                   	push   ecx
c000171b:	6a 00                	push   0x0
c000171d:	50                   	push   eax
c000171e:	e8 cd ed ff ff       	call   c00004f0 <memset>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000172a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000172f:	75 14                	jne    c0001745 <iALLOc+0x156>
c0001731:	8d 04 37             	lea    eax,[edi+esi*1]
c0001734:	29 f3                	sub    ebx,esi
c0001736:	8d 48 08             	lea    ecx,[eax+0x8]
c0001739:	83 cb 01             	or     ebx,0x1
c000173c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001740:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001743:	89 f3                	mov    ebx,esi
c0001745:	31 c0                	xor    eax,eax
c0001747:	4d                   	dec    ebp
c0001748:	8d 4f 08             	lea    ecx,[edi+0x8]
c000174b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000174f:	39 c5                	cmp    ebp,eax
c0001751:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001754:	74 2c                	je     c0001782 <iALLOc+0x193>
c0001756:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000175a:	85 c9                	test   ecx,ecx
c000175c:	75 15                	jne    c0001773 <iALLOc+0x184>
c000175e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001761:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001764:	b9 10 00 00 00       	mov    ecx,0x10
c0001769:	83 fe 0f             	cmp    esi,0xf
c000176c:	76 05                	jbe    c0001773 <iALLOc+0x184>
c000176e:	83 e6 f8             	and    esi,0xfffffff8
c0001771:	89 f1                	mov    ecx,esi
c0001773:	89 ce                	mov    esi,ecx
c0001775:	29 cb                	sub    ebx,ecx
c0001777:	83 ce 01             	or     esi,0x1
c000177a:	40                   	inc    eax
c000177b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000177e:	01 cf                	add    edi,ecx
c0001780:	eb c6                	jmp    c0001748 <iALLOc+0x159>
c0001782:	83 cb 01             	or     ebx,0x1
c0001785:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001788:	eb 08                	jmp    c0001792 <iALLOc+0x1a3>
c000178a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001796:	83 c4 2c             	add    esp,0x2c
c0001799:	5b                   	pop    ebx
c000179a:	5e                   	pop    esi
c000179b:	5f                   	pop    edi
c000179c:	5d                   	pop    ebp
c000179d:	c3                   	ret    

c000179e <dlrealloc>:
c000179e:	55                   	push   ebp
c000179f:	57                   	push   edi
c00017a0:	56                   	push   esi
c00017a1:	53                   	push   ebx
c00017a2:	83 ec 1c             	sub    esp,0x1c
c00017a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00017a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00017ad:	85 db                	test   ebx,ebx
c00017af:	75 10                	jne    c00017c1 <dlrealloc+0x23>
c00017b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00017b5:	83 c4 1c             	add    esp,0x1c
c00017b8:	5b                   	pop    ebx
c00017b9:	5e                   	pop    esi
c00017ba:	5f                   	pop    edi
c00017bb:	5d                   	pop    ebp
c00017bc:	e9 a0 fa ff ff       	jmp    c0001261 <dlmalloc>
c00017c1:	83 f8 df             	cmp    eax,0xffffffdf
c00017c4:	76 07                	jbe    c00017cd <dlrealloc+0x2f>
c00017c6:	31 db                	xor    ebx,ebx
c00017c8:	e9 6a 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c00017cd:	83 c0 0b             	add    eax,0xb
c00017d0:	bd 10 00 00 00       	mov    ebp,0x10
c00017d5:	83 f8 0f             	cmp    eax,0xf
c00017d8:	76 05                	jbe    c00017df <dlrealloc+0x41>
c00017da:	83 e0 f8             	and    eax,0xfffffff8
c00017dd:	89 c5                	mov    ebp,eax
c00017df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00017e2:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017e5:	89 c6                	mov    esi,eax
c00017e7:	83 e6 fc             	and    esi,0xfffffffc
c00017ea:	a8 02                	test   al,0x2
c00017ec:	75 d8                	jne    c00017c6 <dlrealloc+0x28>
c00017ee:	39 f5                	cmp    ebp,esi
c00017f0:	0f 86 04 01 00 00    	jbe    c00018fa <dlrealloc+0x15c>
c00017f6:	8d 14 37             	lea    edx,[edi+esi*1]
c00017f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017fc:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001802:	75 33                	jne    c0001837 <dlrealloc+0x99>
c0001804:	83 e1 fc             	and    ecx,0xfffffffc
c0001807:	01 f1                	add    ecx,esi
c0001809:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000180d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001810:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001814:	77 49                	ja     c000185f <dlrealloc+0xc1>
c0001816:	01 ef                	add    edi,ebp
c0001818:	83 e0 01             	and    eax,0x1
c000181b:	09 e8                	or     eax,ebp
c000181d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001820:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000182a:	29 e8                	sub    eax,ebp
c000182c:	83 c8 01             	or     eax,0x1
c000182f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001832:	e9 00 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c0001837:	89 c8                	mov    eax,ecx
c0001839:	83 e0 fe             	and    eax,0xfffffffe
c000183c:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001841:	75 1c                	jne    c000185f <dlrealloc+0xc1>
c0001843:	83 e1 fc             	and    ecx,0xfffffffc
c0001846:	01 f1                	add    ecx,esi
c0001848:	39 cd                	cmp    ebp,ecx
c000184a:	77 13                	ja     c000185f <dlrealloc+0xc1>
c000184c:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000184f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001852:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001855:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001858:	89 ce                	mov    esi,ecx
c000185a:	e9 9b 00 00 00       	jmp    c00018fa <dlrealloc+0x15c>
c000185f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001863:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001866:	83 ec 0c             	sub    esp,0xc
c0001869:	50                   	push   eax
c000186a:	e8 f2 f9 ff ff       	call   c0001261 <dlmalloc>
c000186f:	83 c4 10             	add    esp,0x10
c0001872:	85 c0                	test   eax,eax
c0001874:	0f 84 4c ff ff ff    	je     c00017c6 <dlrealloc+0x28>
c000187a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000187d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001881:	39 ca                	cmp    edx,ecx
c0001883:	75 0a                	jne    c000188f <dlrealloc+0xf1>
c0001885:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001888:	83 e0 fc             	and    eax,0xfffffffc
c000188b:	01 c6                	add    esi,eax
c000188d:	eb 6b                	jmp    c00018fa <dlrealloc+0x15c>
c000188f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001892:	83 f9 27             	cmp    ecx,0x27
c0001895:	76 08                	jbe    c000189f <dlrealloc+0x101>
c0001897:	89 de                	mov    esi,ebx
c0001899:	89 c7                	mov    edi,eax
c000189b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000189d:	eb 43                	jmp    c00018e2 <dlrealloc+0x144>
c000189f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00018a1:	83 f9 13             	cmp    ecx,0x13
c00018a4:	89 10                	mov    DWORD PTR [eax],edx
c00018a6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00018a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00018ac:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00018af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00018b2:	76 2e                	jbe    c00018e2 <dlrealloc+0x144>
c00018b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018b7:	83 f9 1b             	cmp    ecx,0x1b
c00018ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018bd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018c3:	76 1d                	jbe    c00018e2 <dlrealloc+0x144>
c00018c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018c8:	83 f9 23             	cmp    ecx,0x23
c00018cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018d4:	76 0c                	jbe    c00018e2 <dlrealloc+0x144>
c00018d6:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018df:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018e6:	83 ec 0c             	sub    esp,0xc
c00018e9:	53                   	push   ebx
c00018ea:	e8 1a f6 ff ff       	call   c0000f09 <dlfree>
c00018ef:	83 c4 10             	add    esp,0x10
c00018f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018f6:	89 c3                	mov    ebx,eax
c00018f8:	eb 3d                	jmp    c0001937 <dlrealloc+0x199>
c00018fa:	89 f2                	mov    edx,esi
c00018fc:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018ff:	29 ea                	sub    edx,ebp
c0001901:	83 e1 01             	and    ecx,0x1
c0001904:	8d 04 37             	lea    eax,[edi+esi*1]
c0001907:	83 fa 0f             	cmp    edx,0xf
c000190a:	77 0b                	ja     c0001917 <dlrealloc+0x179>
c000190c:	09 ce                	or     esi,ecx
c000190e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001911:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001915:	eb 20                	jmp    c0001937 <dlrealloc+0x199>
c0001917:	01 ef                	add    edi,ebp
c0001919:	83 ec 0c             	sub    esp,0xc
c000191c:	09 cd                	or     ebp,ecx
c000191e:	83 ca 01             	or     edx,0x1
c0001921:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001924:	83 c7 08             	add    edi,0x8
c0001927:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c000192a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000192e:	57                   	push   edi
c000192f:	e8 d5 f5 ff ff       	call   c0000f09 <dlfree>
c0001934:	83 c4 10             	add    esp,0x10
c0001937:	83 c4 1c             	add    esp,0x1c
c000193a:	89 d8                	mov    eax,ebx
c000193c:	5b                   	pop    ebx
c000193d:	5e                   	pop    esi
c000193e:	5f                   	pop    edi
c000193f:	5d                   	pop    ebp
c0001940:	c3                   	ret    

c0001941 <dlmemalign>:
c0001941:	55                   	push   ebp
c0001942:	57                   	push   edi
c0001943:	56                   	push   esi
c0001944:	53                   	push   ebx
c0001945:	83 ec 0c             	sub    esp,0xc
c0001948:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000194c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001950:	83 fa 08             	cmp    edx,0x8
c0001953:	77 10                	ja     c0001965 <dlmemalign+0x24>
c0001955:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001959:	83 c4 0c             	add    esp,0xc
c000195c:	5b                   	pop    ebx
c000195d:	5e                   	pop    esi
c000195e:	5f                   	pop    edi
c000195f:	5d                   	pop    ebp
c0001960:	e9 fc f8 ff ff       	jmp    c0001261 <dlmalloc>
c0001965:	bf 10 00 00 00       	mov    edi,0x10
c000196a:	83 fa 0f             	cmp    edx,0xf
c000196d:	76 13                	jbe    c0001982 <dlmemalign+0x41>
c000196f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001972:	85 d1                	test   ecx,edx
c0001974:	75 04                	jne    c000197a <dlmemalign+0x39>
c0001976:	89 d7                	mov    edi,edx
c0001978:	eb 08                	jmp    c0001982 <dlmemalign+0x41>
c000197a:	39 d7                	cmp    edi,edx
c000197c:	73 04                	jae    c0001982 <dlmemalign+0x41>
c000197e:	01 ff                	add    edi,edi
c0001980:	eb f8                	jmp    c000197a <dlmemalign+0x39>
c0001982:	83 f8 df             	cmp    eax,0xffffffdf
c0001985:	76 07                	jbe    c000198e <dlmemalign+0x4d>
c0001987:	31 c0                	xor    eax,eax
c0001989:	e9 ce 00 00 00       	jmp    c0001a5c <dlmemalign+0x11b>
c000198e:	83 c0 0b             	add    eax,0xb
c0001991:	bd 10 00 00 00       	mov    ebp,0x10
c0001996:	83 f8 0f             	cmp    eax,0xf
c0001999:	76 05                	jbe    c00019a0 <dlmemalign+0x5f>
c000199b:	83 e0 f8             	and    eax,0xfffffff8
c000199e:	89 c5                	mov    ebp,eax
c00019a0:	83 ec 0c             	sub    esp,0xc
c00019a3:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019a7:	50                   	push   eax
c00019a8:	e8 b4 f8 ff ff       	call   c0001261 <dlmalloc>
c00019ad:	83 c4 10             	add    esp,0x10
c00019b0:	89 c1                	mov    ecx,eax
c00019b2:	85 c0                	test   eax,eax
c00019b4:	74 d1                	je     c0001987 <dlmemalign+0x46>
c00019b6:	31 d2                	xor    edx,edx
c00019b8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019bb:	f7 f7                	div    edi
c00019bd:	85 d2                	test   edx,edx
c00019bf:	74 62                	je     c0001a23 <dlmemalign+0xe2>
c00019c1:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019c5:	89 f8                	mov    eax,edi
c00019c7:	f7 d8                	neg    eax
c00019c9:	21 c3                	and    ebx,eax
c00019cb:	83 eb 08             	sub    ebx,0x8
c00019ce:	89 d8                	mov    eax,ebx
c00019d0:	29 f0                	sub    eax,esi
c00019d2:	83 f8 0f             	cmp    eax,0xf
c00019d5:	77 02                	ja     c00019d9 <dlmemalign+0x98>
c00019d7:	01 fb                	add    ebx,edi
c00019d9:	89 d8                	mov    eax,ebx
c00019db:	29 f0                	sub    eax,esi
c00019dd:	89 c6                	mov    esi,eax
c00019df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019e2:	89 c2                	mov    edx,eax
c00019e4:	83 e2 fc             	and    edx,0xfffffffc
c00019e7:	29 f2                	sub    edx,esi
c00019e9:	a8 02                	test   al,0x2
c00019eb:	74 10                	je     c00019fd <dlmemalign+0xbc>
c00019ed:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019f0:	83 ca 02             	or     edx,0x2
c00019f3:	8d 43 08             	lea    eax,[ebx+0x8]
c00019f6:	89 33                	mov    DWORD PTR [ebx],esi
c00019f8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019fb:	eb 5f                	jmp    c0001a5c <dlmemalign+0x11b>
c00019fd:	83 ec 0c             	sub    esp,0xc
c0001a00:	89 d0                	mov    eax,edx
c0001a02:	83 c8 01             	or     eax,0x1
c0001a05:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a08:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a0d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a10:	83 e0 01             	and    eax,0x1
c0001a13:	09 f0                	or     eax,esi
c0001a15:	89 de                	mov    esi,ebx
c0001a17:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a1a:	51                   	push   ecx
c0001a1b:	e8 e9 f4 ff ff       	call   c0000f09 <dlfree>
c0001a20:	83 c4 10             	add    esp,0x10
c0001a23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a26:	a8 02                	test   al,0x2
c0001a28:	75 2f                	jne    c0001a59 <dlmemalign+0x118>
c0001a2a:	83 e0 fc             	and    eax,0xfffffffc
c0001a2d:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a30:	39 c2                	cmp    edx,eax
c0001a32:	73 25                	jae    c0001a59 <dlmemalign+0x118>
c0001a34:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a37:	83 ec 0c             	sub    esp,0xc
c0001a3a:	29 e8                	sub    eax,ebp
c0001a3c:	83 c2 08             	add    edx,0x8
c0001a3f:	83 c8 01             	or     eax,0x1
c0001a42:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	83 e0 01             	and    eax,0x1
c0001a4b:	09 c5                	or     ebp,eax
c0001a4d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a50:	52                   	push   edx
c0001a51:	e8 b3 f4 ff ff       	call   c0000f09 <dlfree>
c0001a56:	83 c4 10             	add    esp,0x10
c0001a59:	8d 46 08             	lea    eax,[esi+0x8]
c0001a5c:	83 c4 0c             	add    esp,0xc
c0001a5f:	5b                   	pop    ebx
c0001a60:	5e                   	pop    esi
c0001a61:	5f                   	pop    edi
c0001a62:	5d                   	pop    ebp
c0001a63:	c3                   	ret    

c0001a64 <dlcalloc>:
c0001a64:	53                   	push   ebx
c0001a65:	83 ec 14             	sub    esp,0x14
c0001a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a6c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a71:	50                   	push   eax
c0001a72:	e8 ea f7 ff ff       	call   c0001261 <dlmalloc>
c0001a77:	83 c4 10             	add    esp,0x10
c0001a7a:	89 c3                	mov    ebx,eax
c0001a7c:	85 c0                	test   eax,eax
c0001a7e:	74 77                	je     c0001af7 <dlcalloc+0x93>
c0001a80:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001a83:	89 d0                	mov    eax,edx
c0001a85:	83 e0 fc             	and    eax,0xfffffffc
c0001a88:	80 e2 02             	and    dl,0x2
c0001a8b:	75 5a                	jne    c0001ae7 <dlcalloc+0x83>
c0001a8d:	83 e8 04             	sub    eax,0x4
c0001a90:	83 f8 27             	cmp    eax,0x27
c0001a93:	76 03                	jbe    c0001a98 <dlcalloc+0x34>
c0001a95:	51                   	push   ecx
c0001a96:	eb 53                	jmp    c0001aeb <dlcalloc+0x87>
c0001a98:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aac:	83 f8 13             	cmp    eax,0x13
c0001aaf:	76 46                	jbe    c0001af7 <dlcalloc+0x93>
c0001ab1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abf:	83 f8 1b             	cmp    eax,0x1b
c0001ac2:	76 33                	jbe    c0001af7 <dlcalloc+0x93>
c0001ac4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001acb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ad2:	83 f8 23             	cmp    eax,0x23
c0001ad5:	76 20                	jbe    c0001af7 <dlcalloc+0x93>
c0001ad7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ade:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae5:	eb 10                	jmp    c0001af7 <dlcalloc+0x93>
c0001ae7:	83 e8 08             	sub    eax,0x8
c0001aea:	52                   	push   edx
c0001aeb:	50                   	push   eax
c0001aec:	6a 00                	push   0x0
c0001aee:	53                   	push   ebx
c0001aef:	e8 fc e9 ff ff       	call   c00004f0 <memset>
c0001af4:	83 c4 10             	add    esp,0x10
c0001af7:	89 d8                	mov    eax,ebx
c0001af9:	83 c4 08             	add    esp,0x8
c0001afc:	5b                   	pop    ebx
c0001afd:	c3                   	ret    

c0001afe <dlcfree>:
c0001afe:	e9 06 f4 ff ff       	jmp    c0000f09 <dlfree>

c0001b03 <dlindependent_calloc>:
c0001b03:	83 ec 28             	sub    esp,0x28
c0001b06:	b9 03 00 00 00       	mov    ecx,0x3
c0001b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b1f:	e8 cb fa ff ff       	call   c00015ef <iALLOc>
c0001b24:	83 c4 2c             	add    esp,0x2c
c0001b27:	c3                   	ret    

c0001b28 <dlindependent_comalloc>:
c0001b28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b30:	31 c9                	xor    ecx,ecx
c0001b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b3a:	e9 b0 fa ff ff       	jmp    c00015ef <iALLOc>

c0001b3f <dlvalloc>:
c0001b3f:	83 ec 0c             	sub    esp,0xc
c0001b42:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b49:	75 0a                	jne    c0001b55 <dlvalloc+0x16>
c0001b4b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b50:	e8 cd f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b55:	50                   	push   eax
c0001b56:	50                   	push   eax
c0001b57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b5b:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001b61:	e8 db fd ff ff       	call   c0001941 <dlmemalign>
c0001b66:	83 c4 1c             	add    esp,0x1c
c0001b69:	c3                   	ret    

c0001b6a <dlpvalloc>:
c0001b6a:	83 ec 0c             	sub    esp,0xc
c0001b6d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b74:	75 0a                	jne    c0001b80 <dlpvalloc+0x16>
c0001b76:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b7b:	e8 a2 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b80:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001b85:	89 c1                	mov    ecx,eax
c0001b87:	52                   	push   edx
c0001b88:	f7 d9                	neg    ecx
c0001b8a:	52                   	push   edx
c0001b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b8f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b93:	21 ca                	and    edx,ecx
c0001b95:	52                   	push   edx
c0001b96:	50                   	push   eax
c0001b97:	e8 a5 fd ff ff       	call   c0001941 <dlmemalign>
c0001b9c:	83 c4 1c             	add    esp,0x1c
c0001b9f:	c3                   	ret    

c0001ba0 <dlmalloc_trim>:
c0001ba0:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001ba5:	e8 78 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001baa:	31 c0                	xor    eax,eax
c0001bac:	c3                   	ret    

c0001bad <dlmalloc_usable_size>:
c0001bad:	53                   	push   ebx
c0001bae:	31 c0                	xor    eax,eax
c0001bb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bb4:	85 c9                	test   ecx,ecx
c0001bb6:	74 24                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bb8:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bbb:	f6 c2 02             	test   dl,0x2
c0001bbe:	74 08                	je     c0001bc8 <dlmalloc_usable_size+0x1b>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bc6:	eb 14                	jmp    c0001bdc <dlmalloc_usable_size+0x2f>
c0001bc8:	89 d3                	mov    ebx,edx
c0001bca:	31 c0                	xor    eax,eax
c0001bcc:	83 e3 fe             	and    ebx,0xfffffffe
c0001bcf:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bd4:	74 06                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bd6:	83 e2 fc             	and    edx,0xfffffffc
c0001bd9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bdc:	5b                   	pop    ebx
c0001bdd:	c3                   	ret    

c0001bde <dlmallinfo>:
c0001bde:	55                   	push   ebp
c0001bdf:	57                   	push   edi
c0001be0:	56                   	push   esi
c0001be1:	53                   	push   ebx
c0001be2:	83 ec 08             	sub    esp,0x8
c0001be5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001be9:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001bf0:	75 0a                	jne    c0001bfc <dlmallinfo+0x1e>
c0001bf2:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bf7:	e8 26 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001bfc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001c01:	31 ed                	xor    ebp,ebp
c0001c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c06:	31 c9                	xor    ecx,ecx
c0001c08:	83 e0 fc             	and    eax,0xfffffffc
c0001c0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c0f:	31 c0                	xor    eax,eax
c0001c11:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001c18:	85 d2                	test   edx,edx
c0001c1a:	74 0e                	je     c0001c2a <dlmallinfo+0x4c>
c0001c1c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c1f:	45                   	inc    ebp
c0001c20:	83 e6 fc             	and    esi,0xfffffffc
c0001c23:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c26:	01 f1                	add    ecx,esi
c0001c28:	eb ee                	jmp    c0001c18 <dlmallinfo+0x3a>
c0001c2a:	40                   	inc    eax
c0001c2b:	83 f8 0a             	cmp    eax,0xa
c0001c2e:	75 e1                	jne    c0001c11 <dlmallinfo+0x33>
c0001c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c34:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c3b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c3e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001c43:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c46:	39 f0                	cmp    eax,esi
c0001c48:	74 10                	je     c0001c5a <dlmallinfo+0x7c>
c0001c4a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c4d:	ff 04 24             	inc    DWORD PTR [esp]
c0001c50:	83 e7 fc             	and    edi,0xfffffffc
c0001c53:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c56:	01 fa                	add    edx,edi
c0001c58:	eb ec                	jmp    c0001c46 <dlmallinfo+0x68>
c0001c5a:	83 c0 08             	add    eax,0x8
c0001c5d:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001c62:	75 df                	jne    c0001c43 <dlmallinfo+0x65>
c0001c64:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c67:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c6a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c6d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001c72:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c75:	89 03                	mov    DWORD PTR [ebx],eax
c0001c77:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c7a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001c80:	29 d0                	sub    eax,edx
c0001c82:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c85:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c88:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c92:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c98:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001c9e:	89 d8                	mov    eax,ebx
c0001ca0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001ca3:	83 c4 08             	add    esp,0x8
c0001ca6:	5b                   	pop    ebx
c0001ca7:	5e                   	pop    esi
c0001ca8:	5f                   	pop    edi
c0001ca9:	5d                   	pop    ebp
c0001caa:	c2 04 00             	ret    0x4

c0001cad <dlmalloc_stats>:
c0001cad:	83 ec 30             	sub    esp,0x30
c0001cb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001cb4:	50                   	push   eax
c0001cb5:	e8 24 ff ff ff       	call   c0001bde <dlmallinfo>
c0001cba:	83 c4 30             	add    esp,0x30
c0001cbd:	c3                   	ret    

c0001cbe <dlmallopt>:
c0001cbe:	56                   	push   esi
c0001cbf:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cc4:	53                   	push   ebx
c0001cc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ccd:	e8 50 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cd2:	8d 46 04             	lea    eax,[esi+0x4]
c0001cd5:	83 f8 05             	cmp    eax,0x5
c0001cd8:	77 67                	ja     c0001d41 <dlmallopt+0x83>
c0001cda:	ff 24 85 b4 f4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0b4c]
c0001ce1:	83 fb 50             	cmp    ebx,0x50
c0001ce4:	77 5b                	ja     c0001d41 <dlmallopt+0x83>
c0001ce6:	ba 08 00 00 00       	mov    edx,0x8
c0001ceb:	85 db                	test   ebx,ebx
c0001ced:	74 12                	je     c0001d01 <dlmallopt+0x43>
c0001cef:	83 c3 0b             	add    ebx,0xb
c0001cf2:	ba 10 00 00 00       	mov    edx,0x10
c0001cf7:	83 fb 0f             	cmp    ebx,0xf
c0001cfa:	76 05                	jbe    c0001d01 <dlmallopt+0x43>
c0001cfc:	89 da                	mov    edx,ebx
c0001cfe:	83 e2 f8             	and    edx,0xfffffff8
c0001d01:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001d06:	83 e0 03             	and    eax,0x3
c0001d09:	09 d0                	or     eax,edx
c0001d0b:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001d10:	eb 31                	jmp    c0001d43 <dlmallopt+0x85>
c0001d12:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001d18:	eb 06                	jmp    c0001d20 <dlmallopt+0x62>
c0001d1a:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001d20:	be 01 00 00 00       	mov    esi,0x1
c0001d25:	eb 1c                	jmp    c0001d43 <dlmallopt+0x85>
c0001d27:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001d2d:	eb f1                	jmp    c0001d20 <dlmallopt+0x62>
c0001d2f:	31 f6                	xor    esi,esi
c0001d31:	85 db                	test   ebx,ebx
c0001d33:	75 0e                	jne    c0001d43 <dlmallopt+0x85>
c0001d35:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001d3f:	eb df                	jmp    c0001d20 <dlmallopt+0x62>
c0001d41:	31 f6                	xor    esi,esi
c0001d43:	89 f0                	mov    eax,esi
c0001d45:	5b                   	pop    ebx
c0001d46:	5e                   	pop    esi
c0001d47:	c3                   	ret    

c0001d48 <isblank>:
c0001d48:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d4d:	74 09                	je     c0001d58 <isblank+0x10>
c0001d4f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d54:	75 0a                	jne    c0001d60 <isblank+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <iscntrl>:
c0001d68:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d6d:	7e 09                	jle    c0001d78 <iscntrl+0x10>
c0001d6f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d74:	75 0a                	jne    c0001d80 <iscntrl+0x18>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    
c0001d86:	66 90                	xchg   ax,ax

c0001d88 <isdigit>:
c0001d88:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d8d:	7e 0d                	jle    c0001d9c <isdigit+0x14>
c0001d8f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d94:	7f 06                	jg     c0001d9c <isdigit+0x14>
c0001d96:	b8 01 00 00 00       	mov    eax,0x1
c0001d9b:	c3                   	ret    
c0001d9c:	b8 00 00 00 00       	mov    eax,0x0
c0001da1:	c3                   	ret    
c0001da2:	66 90                	xchg   ax,ax

c0001da4 <islower>:
c0001da4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da9:	7e 0d                	jle    c0001db8 <islower+0x14>
c0001dab:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001db0:	7f 06                	jg     c0001db8 <islower+0x14>
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	c3                   	ret    
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax

c0001dc0 <isspace>:
c0001dc0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dc5:	7c 19                	jl     c0001de0 <isspace+0x20>
c0001dc7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dcc:	7e 0a                	jle    c0001dd8 <isspace+0x18>
c0001dce:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001dd3:	75 0b                	jne    c0001de0 <isspace+0x20>
c0001dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0001dd8:	b8 01 00 00 00       	mov    eax,0x1
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax
c0001de0:	b8 00 00 00 00       	mov    eax,0x0
c0001de5:	c3                   	ret    
c0001de6:	66 90                	xchg   ax,ax

c0001de8 <isupper>:
c0001de8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ded:	7e 0d                	jle    c0001dfc <isupper+0x14>
c0001def:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001df4:	7f 06                	jg     c0001dfc <isupper+0x14>
c0001df6:	b8 01 00 00 00       	mov    eax,0x1
c0001dfb:	c3                   	ret    
c0001dfc:	b8 00 00 00 00       	mov    eax,0x0
c0001e01:	c3                   	ret    
c0001e02:	66 90                	xchg   ax,ax

c0001e04 <isalpha>:
c0001e04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e08:	e8 db ff ff ff       	call   c0001de8 <isupper>
c0001e0d:	83 c4 04             	add    esp,0x4
c0001e10:	85 c0                	test   eax,eax
c0001e12:	75 10                	jne    c0001e24 <isalpha+0x20>
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 87 ff ff ff       	call   c0001da4 <islower>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	74 08                	je     c0001e2c <isalpha+0x28>
c0001e24:	b8 01 00 00 00       	mov    eax,0x1
c0001e29:	c3                   	ret    
c0001e2a:	66 90                	xchg   ax,ax
c0001e2c:	b8 00 00 00 00       	mov    eax,0x0
c0001e31:	c3                   	ret    
c0001e32:	66 90                	xchg   ax,ax

c0001e34 <isalnum>:
c0001e34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e38:	e8 c7 ff ff ff       	call   c0001e04 <isalpha>
c0001e3d:	83 c4 04             	add    esp,0x4
c0001e40:	85 c0                	test   eax,eax
c0001e42:	75 10                	jne    c0001e54 <isalnum+0x20>
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 3b ff ff ff       	call   c0001d88 <isdigit>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	74 08                	je     c0001e5c <isalnum+0x28>
c0001e54:	b8 01 00 00 00       	mov    eax,0x1
c0001e59:	c3                   	ret    
c0001e5a:	66 90                	xchg   ax,ax
c0001e5c:	b8 00 00 00 00       	mov    eax,0x0
c0001e61:	c3                   	ret    
c0001e62:	66 90                	xchg   ax,ax

c0001e64 <ispunct>:
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 c7 ff ff ff       	call   c0001e34 <isalnum>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 28                	jne    c0001e9c <ispunct+0x38>
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 43 ff ff ff       	call   c0001dc0 <isspace>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 18                	jne    c0001e9c <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 db fe ff ff       	call   c0001d68 <iscntrl>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 08                	jne    c0001e9c <ispunct+0x38>
c0001e94:	b8 01 00 00 00       	mov    eax,0x1
c0001e99:	c3                   	ret    
c0001e9a:	66 90                	xchg   ax,ax
c0001e9c:	b8 00 00 00 00       	mov    eax,0x0
c0001ea1:	c3                   	ret    
c0001ea2:	66 90                	xchg   ax,ax

c0001ea4 <isgraph>:
c0001ea4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ea8:	e8 87 ff ff ff       	call   c0001e34 <isalnum>
c0001ead:	83 c4 04             	add    esp,0x4
c0001eb0:	85 c0                	test   eax,eax
c0001eb2:	75 10                	jne    c0001ec4 <isgraph+0x20>
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 a7 ff ff ff       	call   c0001e64 <ispunct>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	74 08                	je     c0001ecc <isgraph+0x28>
c0001ec4:	b8 01 00 00 00       	mov    eax,0x1
c0001ec9:	c3                   	ret    
c0001eca:	66 90                	xchg   ax,ax
c0001ecc:	b8 00 00 00 00       	mov    eax,0x0
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax

c0001ed4 <isprint>:
c0001ed4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ed8:	e8 c7 ff ff ff       	call   c0001ea4 <isgraph>
c0001edd:	83 c4 04             	add    esp,0x4
c0001ee0:	85 c0                	test   eax,eax
c0001ee2:	75 08                	jne    c0001eec <isprint+0x18>
c0001ee4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee9:	75 09                	jne    c0001ef4 <isprint+0x20>
c0001eeb:	90                   	nop
c0001eec:	b8 01 00 00 00       	mov    eax,0x1
c0001ef1:	c3                   	ret    
c0001ef2:	66 90                	xchg   ax,ax
c0001ef4:	b8 00 00 00 00       	mov    eax,0x0
c0001ef9:	c3                   	ret    
c0001efa:	66 90                	xchg   ax,ax

c0001efc <isxdigit>:
c0001efc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f00:	e8 83 fe ff ff       	call   c0001d88 <isdigit>
c0001f05:	83 c4 04             	add    esp,0x4
c0001f08:	85 c0                	test   eax,eax
c0001f0a:	75 20                	jne    c0001f2c <isxdigit+0x30>
c0001f0c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f11:	7e 09                	jle    c0001f1c <isxdigit+0x20>
c0001f13:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f18:	7e 12                	jle    c0001f2c <isxdigit+0x30>
c0001f1a:	66 90                	xchg   ax,ax
c0001f1c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f21:	7e 11                	jle    c0001f34 <isxdigit+0x38>
c0001f23:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f28:	7f 0a                	jg     c0001f34 <isxdigit+0x38>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	b8 01 00 00 00       	mov    eax,0x1
c0001f31:	c3                   	ret    
c0001f32:	66 90                	xchg   ax,ax
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    

c0001f3a <disk_status>:
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	c3                   	ret    

c0001f3d <disk_initialize>:
c0001f3d:	31 c0                	xor    eax,eax
c0001f3f:	c3                   	ret    

c0001f40 <disk_read>:
c0001f40:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f45:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f51:	e9 26 6a 02 00       	jmp    c002897c <fatWrapperReadDisk>

c0001f56 <disk_write>:
c0001f56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f5b:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f67:	e9 50 6a 02 00       	jmp    c00289bc <fatWrapperWriteDisk>

c0001f6c <disk_ioctl>:
c0001f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 71 6a 02 00       	jmp    c00289fc <fatWrapperIoctl>

c0001f8b <ld_word>:
c0001f8b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f8f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f92:	c1 e2 08             	shl    edx,0x8
c0001f95:	09 d0                	or     eax,edx
c0001f97:	c3                   	ret    

c0001f98 <ld_dword>:
c0001f98:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001f9c:	89 d1                	mov    ecx,edx
c0001f9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fa2:	c1 e1 08             	shl    ecx,0x8
c0001fa5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fa8:	09 ca                	or     edx,ecx
c0001faa:	c1 e2 08             	shl    edx,0x8
c0001fad:	09 d0                	or     eax,edx
c0001faf:	c3                   	ret    

c0001fb0 <st_word>:
c0001fb0:	66 89 10             	mov    WORD PTR [eax],dx
c0001fb3:	c3                   	ret    

c0001fb4 <st_dword>:
c0001fb4:	89 10                	mov    DWORD PTR [eax],edx
c0001fb6:	c3                   	ret    

c0001fb7 <mem_cpy>:
c0001fb7:	85 c9                	test   ecx,ecx
c0001fb9:	74 10                	je     c0001fcb <mem_cpy+0x14>
c0001fbb:	57                   	push   edi
c0001fbc:	01 c1                	add    ecx,eax
c0001fbe:	56                   	push   esi
c0001fbf:	89 c7                	mov    edi,eax
c0001fc1:	89 d6                	mov    esi,edx
c0001fc3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001fc4:	39 f9                	cmp    ecx,edi
c0001fc6:	75 fb                	jne    c0001fc3 <mem_cpy+0xc>
c0001fc8:	5e                   	pop    esi
c0001fc9:	5f                   	pop    edi
c0001fca:	c3                   	ret    
c0001fcb:	c3                   	ret    

c0001fcc <mem_set>:
c0001fcc:	01 c1                	add    ecx,eax
c0001fce:	40                   	inc    eax
c0001fcf:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001fd2:	39 c8                	cmp    eax,ecx
c0001fd4:	75 f8                	jne    c0001fce <mem_set+0x2>
c0001fd6:	c3                   	ret    

c0001fd7 <mem_cmp>:
c0001fd7:	57                   	push   edi
c0001fd8:	56                   	push   esi
c0001fd9:	89 c6                	mov    esi,eax
c0001fdb:	53                   	push   ebx
c0001fdc:	46                   	inc    esi
c0001fdd:	42                   	inc    edx
c0001fde:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001fe2:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001fe6:	29 fb                	sub    ebx,edi
c0001fe8:	89 cf                	mov    edi,ecx
c0001fea:	29 f7                	sub    edi,esi
c0001fec:	01 c7                	add    edi,eax
c0001fee:	74 04                	je     c0001ff4 <mem_cmp+0x1d>
c0001ff0:	85 db                	test   ebx,ebx
c0001ff2:	74 e8                	je     c0001fdc <mem_cmp+0x5>
c0001ff4:	89 d8                	mov    eax,ebx
c0001ff6:	5b                   	pop    ebx
c0001ff7:	5e                   	pop    esi
c0001ff8:	5f                   	pop    edi
c0001ff9:	c3                   	ret    

c0001ffa <chk_chr>:
c0001ffa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ffd:	85 c9                	test   ecx,ecx
c0001fff:	74 07                	je     c0002008 <chk_chr+0xe>
c0002001:	39 d1                	cmp    ecx,edx
c0002003:	74 03                	je     c0002008 <chk_chr+0xe>
c0002005:	40                   	inc    eax
c0002006:	eb f2                	jmp    c0001ffa <chk_chr>
c0002008:	89 c8                	mov    eax,ecx
c000200a:	c3                   	ret    

c000200b <dbc_1st>:
c000200b:	31 c0                	xor    eax,eax
c000200d:	c3                   	ret    

c000200e <dbc_2nd>:
c000200e:	31 c0                	xor    eax,eax
c0002010:	c3                   	ret    

c0002011 <tchar2uni>:
c0002011:	57                   	push   edi
c0002012:	56                   	push   esi
c0002013:	53                   	push   ebx
c0002014:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002016:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0002018:	8d 73 01             	lea    esi,[ebx+0x1]
c000201b:	f6 c1 80             	test   cl,0x80
c000201e:	75 0a                	jne    c000202a <tchar2uni+0x19>
c0002020:	0f b6 d1             	movzx  edx,cl
c0002023:	89 f3                	mov    ebx,esi
c0002025:	e9 b2 00 00 00       	jmp    c00020dc <tchar2uni+0xcb>
c000202a:	89 ca                	mov    edx,ecx
c000202c:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002032:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0002038:	89 ca                	mov    edx,ecx
c000203a:	75 0a                	jne    c0002046 <tchar2uni+0x35>
c000203c:	83 e2 1f             	and    edx,0x1f
c000203f:	b9 01 00 00 00       	mov    ecx,0x1
c0002044:	eb 37                	jmp    c000207d <tchar2uni+0x6c>
c0002046:	81 e2 f0 00 00 00    	and    edx,0xf0
c000204c:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002052:	75 0c                	jne    c0002060 <tchar2uni+0x4f>
c0002054:	89 ca                	mov    edx,ecx
c0002056:	b9 02 00 00 00       	mov    ecx,0x2
c000205b:	83 e2 0f             	and    edx,0xf
c000205e:	eb 1d                	jmp    c000207d <tchar2uni+0x6c>
c0002060:	89 cf                	mov    edi,ecx
c0002062:	83 ca ff             	or     edx,0xffffffff
c0002065:	81 e7 f8 00 00 00    	and    edi,0xf8
c000206b:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002071:	75 70                	jne    c00020e3 <tchar2uni+0xd2>
c0002073:	89 ca                	mov    edx,ecx
c0002075:	b9 03 00 00 00       	mov    ecx,0x3
c000207a:	83 e2 07             	and    edx,0x7
c000207d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002081:	46                   	inc    esi
c0002082:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0002085:	89 cf                	mov    edi,ecx
c0002087:	81 e7 c0 00 00 00    	and    edi,0xc0
c000208d:	83 c7 80             	add    edi,0xffffff80
c0002090:	75 4e                	jne    c00020e0 <tchar2uni+0xcf>
c0002092:	c1 e2 06             	shl    edx,0x6
c0002095:	83 e1 3f             	and    ecx,0x3f
c0002098:	09 ca                	or     edx,ecx
c000209a:	39 de                	cmp    esi,ebx
c000209c:	75 e3                	jne    c0002081 <tchar2uni+0x70>
c000209e:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020a1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020a7:	77 37                	ja     c00020e0 <tchar2uni+0xcf>
c00020a9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020af:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020b5:	76 29                	jbe    c00020e0 <tchar2uni+0xcf>
c00020b7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020bd:	76 1d                	jbe    c00020dc <tchar2uni+0xcb>
c00020bf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020c5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c00020cb:	c1 e1 06             	shl    ecx,0x6
c00020ce:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c00020d4:	09 ca                	or     edx,ecx
c00020d6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00020dc:	89 18                	mov    DWORD PTR [eax],ebx
c00020de:	eb 03                	jmp    c00020e3 <tchar2uni+0xd2>
c00020e0:	83 ca ff             	or     edx,0xffffffff
c00020e3:	5b                   	pop    ebx
c00020e4:	89 d0                	mov    eax,edx
c00020e6:	5e                   	pop    esi
c00020e7:	5f                   	pop    edi
c00020e8:	c3                   	ret    

c00020e9 <put_utf>:
c00020e9:	53                   	push   ebx
c00020ea:	83 f8 7f             	cmp    eax,0x7f
c00020ed:	89 c3                	mov    ebx,eax
c00020ef:	b0 00                	mov    al,0x0
c00020f1:	77 11                	ja     c0002104 <put_utf+0x1b>
c00020f3:	85 c9                	test   ecx,ecx
c00020f5:	0f 84 e5 00 00 00    	je     c00021e0 <put_utf+0xf7>
c00020fb:	88 1a                	mov    BYTE PTR [edx],bl
c00020fd:	b0 01                	mov    al,0x1
c00020ff:	e9 dc 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c0002104:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000210a:	77 23                	ja     c000212f <put_utf+0x46>
c000210c:	83 f9 01             	cmp    ecx,0x1
c000210f:	0f 86 cb 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002115:	89 d8                	mov    eax,ebx
c0002117:	83 e3 3f             	and    ebx,0x3f
c000211a:	c1 e8 06             	shr    eax,0x6
c000211d:	83 cb 80             	or     ebx,0xffffff80
c0002120:	83 c8 c0             	or     eax,0xffffffc0
c0002123:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002126:	88 02                	mov    BYTE PTR [edx],al
c0002128:	b0 02                	mov    al,0x2
c000212a:	e9 b1 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c000212f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002135:	77 40                	ja     c0002177 <put_utf+0x8e>
c0002137:	83 f9 02             	cmp    ecx,0x2
c000213a:	0f 86 a0 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002140:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002146:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000214c:	0f 86 8e 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002152:	89 d8                	mov    eax,ebx
c0002154:	c1 e8 0c             	shr    eax,0xc
c0002157:	83 c8 e0             	or     eax,0xffffffe0
c000215a:	88 02                	mov    BYTE PTR [edx],al
c000215c:	89 d8                	mov    eax,ebx
c000215e:	83 e3 3f             	and    ebx,0x3f
c0002161:	c1 e8 06             	shr    eax,0x6
c0002164:	83 cb 80             	or     ebx,0xffffff80
c0002167:	83 e0 3f             	and    eax,0x3f
c000216a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c000216d:	83 c8 80             	or     eax,0xffffff80
c0002170:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002173:	b0 03                	mov    al,0x3
c0002175:	eb 69                	jmp    c00021e0 <put_utf+0xf7>
c0002177:	83 f9 03             	cmp    ecx,0x3
c000217a:	76 64                	jbe    c00021e0 <put_utf+0xf7>
c000217c:	89 d9                	mov    ecx,ebx
c000217e:	0f b7 c3             	movzx  eax,bx
c0002181:	66 31 c9             	xor    cx,cx
c0002184:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000218a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002190:	c1 e9 06             	shr    ecx,0x6
c0002193:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002199:	77 43                	ja     c00021de <put_utf+0xf5>
c000219b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021a1:	77 3b                	ja     c00021de <put_utf+0xf5>
c00021a3:	09 cb                	or     ebx,ecx
c00021a5:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021ab:	89 d8                	mov    eax,ebx
c00021ad:	c1 e8 12             	shr    eax,0x12
c00021b0:	83 c8 f0             	or     eax,0xfffffff0
c00021b3:	88 02                	mov    BYTE PTR [edx],al
c00021b5:	89 d8                	mov    eax,ebx
c00021b7:	c1 e8 0c             	shr    eax,0xc
c00021ba:	83 e0 3f             	and    eax,0x3f
c00021bd:	83 c8 80             	or     eax,0xffffff80
c00021c0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021c3:	89 d8                	mov    eax,ebx
c00021c5:	83 e3 3f             	and    ebx,0x3f
c00021c8:	c1 e8 06             	shr    eax,0x6
c00021cb:	83 cb 80             	or     ebx,0xffffff80
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c00021d4:	83 c8 80             	or     eax,0xffffff80
c00021d7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00021da:	b0 04                	mov    al,0x4
c00021dc:	eb 02                	jmp    c00021e0 <put_utf+0xf7>
c00021de:	31 c0                	xor    eax,eax
c00021e0:	5b                   	pop    ebx
c00021e1:	c3                   	ret    

c00021e2 <clst2sect>:
c00021e2:	8d 4a fe             	lea    ecx,[edx-0x2]
c00021e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00021e8:	83 ea 02             	sub    edx,0x2
c00021eb:	39 ca                	cmp    edx,ecx
c00021ed:	76 0d                	jbe    c00021fc <clst2sect+0x1a>
c00021ef:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00021f3:	0f af d1             	imul   edx,ecx
c00021f6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00021f9:	89 d0                	mov    eax,edx
c00021fb:	c3                   	ret    
c00021fc:	31 c0                	xor    eax,eax
c00021fe:	c3                   	ret    

c00021ff <pick_lfn>:
c00021ff:	55                   	push   ebp
c0002200:	57                   	push   edi
c0002201:	89 c7                	mov    edi,eax
c0002203:	56                   	push   esi
c0002204:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002207:	53                   	push   ebx
c0002208:	89 d3                	mov    ebx,edx
c000220a:	e8 7c fd ff ff       	call   c0001f8b <ld_word>
c000220f:	66 85 c0             	test   ax,ax
c0002212:	74 04                	je     c0002218 <pick_lfn+0x19>
c0002214:	31 c0                	xor    eax,eax
c0002216:	eb 62                	jmp    c000227a <pick_lfn+0x7b>
c0002218:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000221b:	bd 01 00 00 00       	mov    ebp,0x1
c0002220:	83 e1 bf             	and    ecx,0xffffffbf
c0002223:	31 f6                	xor    esi,esi
c0002225:	49                   	dec    ecx
c0002226:	6b c9 0d             	imul   ecx,ecx,0xd
c0002229:	0f b6 86 00 f6 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0a00]
c0002230:	01 d8                	add    eax,ebx
c0002232:	e8 54 fd ff ff       	call   c0001f8b <ld_word>
c0002237:	66 85 ed             	test   bp,bp
c000223a:	74 11                	je     c000224d <pick_lfn+0x4e>
c000223c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002242:	77 d0                	ja     c0002214 <pick_lfn+0x15>
c0002244:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002248:	89 c5                	mov    ebp,eax
c000224a:	41                   	inc    ecx
c000224b:	eb 0a                	jmp    c0002257 <pick_lfn+0x58>
c000224d:	0f b7 c0             	movzx  eax,ax
c0002250:	3d ff ff 00 00       	cmp    eax,0xffff
c0002255:	75 bd                	jne    c0002214 <pick_lfn+0x15>
c0002257:	46                   	inc    esi
c0002258:	83 fe 0d             	cmp    esi,0xd
c000225b:	75 cc                	jne    c0002229 <pick_lfn+0x2a>
c000225d:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002260:	74 13                	je     c0002275 <pick_lfn+0x76>
c0002262:	66 85 ed             	test   bp,bp
c0002265:	74 0e                	je     c0002275 <pick_lfn+0x76>
c0002267:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000226d:	77 a5                	ja     c0002214 <pick_lfn+0x15>
c000226f:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002275:	b8 01 00 00 00       	mov    eax,0x1
c000227a:	5b                   	pop    ebx
c000227b:	5e                   	pop    esi
c000227c:	5f                   	pop    edi
c000227d:	5d                   	pop    ebp
c000227e:	c3                   	ret    

c000227f <put_lfn>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	89 d7                	mov    edi,edx
c0002283:	56                   	push   esi
c0002284:	31 f6                	xor    esi,esi
c0002286:	53                   	push   ebx
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000228e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0002296:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000229c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000229f:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	e8 07 fd ff ff       	call   c0001fb0 <st_word>
c00022a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022b0:	0f b6 d9             	movzx  ebx,cl
c00022b3:	4b                   	dec    ebx
c00022b4:	6b db 0d             	imul   ebx,ebx,0xd
c00022b7:	0f b7 c6             	movzx  eax,si
c00022ba:	3d ff ff 00 00       	cmp    eax,0xffff
c00022bf:	74 09                	je     c00022ca <put_lfn+0x4b>
c00022c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022c5:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022c9:	43                   	inc    ebx
c00022ca:	0f b7 ee             	movzx  ebp,si
c00022cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00022d0:	89 ea                	mov    edx,ebp
c00022d2:	0f b6 80 00 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0a00]
c00022d9:	01 f8                	add    eax,edi
c00022db:	e8 d0 fc ff ff       	call   c0001fb0 <st_word>
c00022e0:	85 ed                	test   ebp,ebp
c00022e2:	75 05                	jne    c00022e9 <put_lfn+0x6a>
c00022e4:	be ff ff 00 00       	mov    esi,0xffff
c00022e9:	ff 04 24             	inc    DWORD PTR [esp]
c00022ec:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00022f0:	75 c5                	jne    c00022b7 <put_lfn+0x38>
c00022f2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00022f8:	74 0b                	je     c0002305 <put_lfn+0x86>
c00022fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fe:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002303:	75 07                	jne    c000230c <put_lfn+0x8d>
c0002305:	83 c9 40             	or     ecx,0x40
c0002308:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000230c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002310:	88 07                	mov    BYTE PTR [edi],al
c0002312:	83 c4 0c             	add    esp,0xc
c0002315:	5b                   	pop    ebx
c0002316:	5e                   	pop    esi
c0002317:	5f                   	pop    edi
c0002318:	5d                   	pop    ebp
c0002319:	c3                   	ret    

c000231a <gen_numname>:
c000231a:	57                   	push   edi
c000231b:	89 cf                	mov    edi,ecx
c000231d:	56                   	push   esi
c000231e:	b9 0b 00 00 00       	mov    ecx,0xb
c0002323:	53                   	push   ebx
c0002324:	89 c6                	mov    esi,eax
c0002326:	83 ec 10             	sub    esp,0x10
c0002329:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000232d:	e8 85 fc ff ff       	call   c0001fb7 <mem_cpy>
c0002332:	83 fb 05             	cmp    ebx,0x5
c0002335:	76 30                	jbe    c0002367 <gen_numname+0x4d>
c0002337:	66 8b 07             	mov    ax,WORD PTR [edi]
c000233a:	66 85 c0             	test   ax,ax
c000233d:	74 28                	je     c0002367 <gen_numname+0x4d>
c000233f:	83 c7 02             	add    edi,0x2
c0002342:	ba 10 00 00 00       	mov    edx,0x10
c0002347:	01 db                	add    ebx,ebx
c0002349:	89 c1                	mov    ecx,eax
c000234b:	c1 e0 10             	shl    eax,0x10
c000234e:	83 e1 01             	and    ecx,0x1
c0002351:	c1 e8 11             	shr    eax,0x11
c0002354:	01 cb                	add    ebx,ecx
c0002356:	0f ba e3 10          	bt     ebx,0x10
c000235a:	73 06                	jae    c0002362 <gen_numname+0x48>
c000235c:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002362:	4a                   	dec    edx
c0002363:	75 e2                	jne    c0002347 <gen_numname+0x2d>
c0002365:	eb d0                	jmp    c0002337 <gen_numname+0x1d>
c0002367:	b8 07 00 00 00       	mov    eax,0x7
c000236c:	89 d9                	mov    ecx,ebx
c000236e:	83 e1 0f             	and    ecx,0xf
c0002371:	8d 79 30             	lea    edi,[ecx+0x30]
c0002374:	89 fa                	mov    edx,edi
c0002376:	83 ff 39             	cmp    edi,0x39
c0002379:	76 03                	jbe    c000237e <gen_numname+0x64>
c000237b:	8d 51 37             	lea    edx,[ecx+0x37]
c000237e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002381:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002385:	89 da                	mov    edx,ebx
c0002387:	c1 ea 04             	shr    edx,0x4
c000238a:	83 fb 0f             	cmp    ebx,0xf
c000238d:	76 06                	jbe    c0002395 <gen_numname+0x7b>
c000238f:	89 c8                	mov    eax,ecx
c0002391:	89 d3                	mov    ebx,edx
c0002393:	eb d7                	jmp    c000236c <gen_numname+0x52>
c0002395:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000239a:	31 d2                	xor    edx,edx
c000239c:	8d 58 fe             	lea    ebx,[eax-0x2]
c000239f:	8d 04 16             	lea    eax,[esi+edx*1]
c00023a2:	39 ca                	cmp    edx,ecx
c00023a4:	73 19                	jae    c00023bf <gen_numname+0xa5>
c00023a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023a9:	83 f8 20             	cmp    eax,0x20
c00023ac:	74 11                	je     c00023bf <gen_numname+0xa5>
c00023ae:	e8 58 fc ff ff       	call   c000200b <dbc_1st>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	74 05                	je     c00023bc <gen_numname+0xa2>
c00023b7:	39 d3                	cmp    ebx,edx
c00023b9:	74 04                	je     c00023bf <gen_numname+0xa5>
c00023bb:	42                   	inc    edx
c00023bc:	42                   	inc    edx
c00023bd:	eb e0                	jmp    c000239f <gen_numname+0x85>
c00023bf:	b0 20                	mov    al,0x20
c00023c1:	83 f9 07             	cmp    ecx,0x7
c00023c4:	77 05                	ja     c00023cb <gen_numname+0xb1>
c00023c6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ca:	41                   	inc    ecx
c00023cb:	42                   	inc    edx
c00023cc:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00023d0:	83 fa 07             	cmp    edx,0x7
c00023d3:	76 ea                	jbe    c00023bf <gen_numname+0xa5>
c00023d5:	83 c4 10             	add    esp,0x10
c00023d8:	5b                   	pop    ebx
c00023d9:	5e                   	pop    esi
c00023da:	5f                   	pop    edi
c00023db:	c3                   	ret    

c00023dc <sum_sfn>:
c00023dc:	53                   	push   ebx
c00023dd:	31 c9                	xor    ecx,ecx
c00023df:	31 db                	xor    ebx,ebx
c00023e1:	0f b6 d1             	movzx  edx,cl
c00023e4:	c1 e1 07             	shl    ecx,0x7
c00023e7:	d1 ea                	shr    edx,1
c00023e9:	09 ca                	or     edx,ecx
c00023eb:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00023ee:	43                   	inc    ebx
c00023ef:	01 ca                	add    edx,ecx
c00023f1:	83 fb 0b             	cmp    ebx,0xb
c00023f4:	88 d1                	mov    cl,dl
c00023f6:	75 e9                	jne    c00023e1 <sum_sfn+0x5>
c00023f8:	88 d0                	mov    al,dl
c00023fa:	5b                   	pop    ebx
c00023fb:	c3                   	ret    

c00023fc <get_ldnumber>:
c00023fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00023fe:	85 d2                	test   edx,edx
c0002400:	74 14                	je     c0002416 <get_ldnumber+0x1a>
c0002402:	56                   	push   esi
c0002403:	53                   	push   ebx
c0002404:	89 d3                	mov    ebx,edx
c0002406:	43                   	inc    ebx
c0002407:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000240a:	80 f9 1f             	cmp    cl,0x1f
c000240d:	76 0d                	jbe    c000241c <get_ldnumber+0x20>
c000240f:	80 f9 3a             	cmp    cl,0x3a
c0002412:	75 f2                	jne    c0002406 <get_ldnumber+0xa>
c0002414:	eb 0a                	jmp    c0002420 <get_ldnumber+0x24>
c0002416:	83 c9 ff             	or     ecx,0xffffffff
c0002419:	89 c8                	mov    eax,ecx
c000241b:	c3                   	ret    
c000241c:	31 c9                	xor    ecx,ecx
c000241e:	eb 24                	jmp    c0002444 <get_ldnumber+0x48>
c0002420:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002423:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002426:	80 f9 09             	cmp    cl,0x9
c0002429:	77 16                	ja     c0002441 <get_ldnumber+0x45>
c000242b:	83 c2 02             	add    edx,0x2
c000242e:	83 c9 ff             	or     ecx,0xffffffff
c0002431:	39 d3                	cmp    ebx,edx
c0002433:	75 0f                	jne    c0002444 <get_ldnumber+0x48>
c0002435:	89 f2                	mov    edx,esi
c0002437:	89 18                	mov    DWORD PTR [eax],ebx
c0002439:	0f be ca             	movsx  ecx,dl
c000243c:	83 e9 30             	sub    ecx,0x30
c000243f:	eb 03                	jmp    c0002444 <get_ldnumber+0x48>
c0002441:	83 c9 ff             	or     ecx,0xffffffff
c0002444:	89 c8                	mov    eax,ecx
c0002446:	5b                   	pop    ebx
c0002447:	5e                   	pop    esi
c0002448:	c3                   	ret    

c0002449 <validate>:
c0002449:	56                   	push   esi
c000244a:	53                   	push   ebx
c000244b:	89 d6                	mov    esi,edx
c000244d:	51                   	push   ecx
c000244e:	85 c0                	test   eax,eax
c0002450:	75 09                	jne    c000245b <validate+0x12>
c0002452:	b8 09 00 00 00       	mov    eax,0x9
c0002457:	31 c9                	xor    ecx,ecx
c0002459:	eb 2e                	jmp    c0002489 <validate+0x40>
c000245b:	89 c3                	mov    ebx,eax
c000245d:	8b 00                	mov    eax,DWORD PTR [eax]
c000245f:	85 c0                	test   eax,eax
c0002461:	74 ef                	je     c0002452 <validate+0x9>
c0002463:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002466:	74 ea                	je     c0002452 <validate+0x9>
c0002468:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000246b:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c000246f:	75 e1                	jne    c0002452 <validate+0x9>
c0002471:	83 ec 0c             	sub    esp,0xc
c0002474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002478:	50                   	push   eax
c0002479:	e8 bc fa ff ff       	call   c0001f3a <disk_status>
c000247e:	83 c4 10             	add    esp,0x10
c0002481:	a8 01                	test   al,0x1
c0002483:	75 cd                	jne    c0002452 <validate+0x9>
c0002485:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002487:	31 c0                	xor    eax,eax
c0002489:	89 0e                	mov    DWORD PTR [esi],ecx
c000248b:	5a                   	pop    edx
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	c3                   	ret    

c000248f <sync_window>:
c000248f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002493:	74 58                	je     c00024ed <sync_window+0x5e>
c0002495:	56                   	push   esi
c0002496:	53                   	push   ebx
c0002497:	8d 70 34             	lea    esi,[eax+0x34]
c000249a:	51                   	push   ecx
c000249b:	89 c3                	mov    ebx,eax
c000249d:	6a 01                	push   0x1
c000249f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024a2:	56                   	push   esi
c00024a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024a7:	50                   	push   eax
c00024a8:	e8 a9 fa ff ff       	call   c0001f56 <disk_write>
c00024ad:	83 c4 10             	add    esp,0x10
c00024b0:	ba 01 00 00 00       	mov    edx,0x1
c00024b5:	85 c0                	test   eax,eax
c00024b7:	75 2e                	jne    c00024e7 <sync_window+0x58>
c00024b9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024bf:	89 c1                	mov    ecx,eax
c00024c1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024c5:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024c8:	39 d1                	cmp    ecx,edx
c00024ca:	73 19                	jae    c00024e5 <sync_window+0x56>
c00024cc:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00024d0:	75 13                	jne    c00024e5 <sync_window+0x56>
c00024d2:	6a 01                	push   0x1
c00024d4:	01 d0                	add    eax,edx
c00024d6:	50                   	push   eax
c00024d7:	56                   	push   esi
c00024d8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 74 fa ff ff       	call   c0001f56 <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	31 d2                	xor    edx,edx
c00024e7:	89 d0                	mov    eax,edx
c00024e9:	5a                   	pop    edx
c00024ea:	5b                   	pop    ebx
c00024eb:	5e                   	pop    esi
c00024ec:	c3                   	ret    
c00024ed:	31 d2                	xor    edx,edx
c00024ef:	89 d0                	mov    eax,edx
c00024f1:	c3                   	ret    

c00024f2 <move_window>:
c00024f2:	57                   	push   edi
c00024f3:	56                   	push   esi
c00024f4:	31 f6                	xor    esi,esi
c00024f6:	53                   	push   ebx
c00024f7:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00024fa:	74 32                	je     c000252e <move_window+0x3c>
c00024fc:	89 c3                	mov    ebx,eax
c00024fe:	89 d7                	mov    edi,edx
c0002500:	e8 8a ff ff ff       	call   c000248f <sync_window>
c0002505:	89 c6                	mov    esi,eax
c0002507:	85 c0                	test   eax,eax
c0002509:	75 23                	jne    c000252e <move_window+0x3c>
c000250b:	6a 01                	push   0x1
c000250d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002510:	57                   	push   edi
c0002511:	50                   	push   eax
c0002512:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002516:	50                   	push   eax
c0002517:	e8 24 fa ff ff       	call   c0001f40 <disk_read>
c000251c:	83 c4 10             	add    esp,0x10
c000251f:	85 c0                	test   eax,eax
c0002521:	74 08                	je     c000252b <move_window+0x39>
c0002523:	be 01 00 00 00       	mov    esi,0x1
c0002528:	83 cf ff             	or     edi,0xffffffff
c000252b:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000252e:	89 f0                	mov    eax,esi
c0002530:	5b                   	pop    ebx
c0002531:	5e                   	pop    esi
c0002532:	5f                   	pop    edi
c0002533:	c3                   	ret    

c0002534 <check_fs>:
c0002534:	53                   	push   ebx
c0002535:	89 c3                	mov    ebx,eax
c0002537:	83 ec 08             	sub    esp,0x8
c000253a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000253e:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002545:	e8 a8 ff ff ff       	call   c00024f2 <move_window>
c000254a:	ba 04 00 00 00       	mov    edx,0x4
c000254f:	85 c0                	test   eax,eax
c0002551:	75 68                	jne    c00025bb <check_fs+0x87>
c0002553:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002559:	e8 2d fa ff ff       	call   c0001f8b <ld_word>
c000255e:	ba 03 00 00 00       	mov    edx,0x3
c0002563:	66 3d 55 aa          	cmp    ax,0xaa55
c0002567:	75 52                	jne    c00025bb <check_fs+0x87>
c0002569:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000256c:	8d 50 18             	lea    edx,[eax+0x18]
c000256f:	80 fa 01             	cmp    dl,0x1
c0002572:	76 09                	jbe    c000257d <check_fs+0x49>
c0002574:	ba 02 00 00 00       	mov    edx,0x2
c0002579:	3c eb                	cmp    al,0xeb
c000257b:	75 3e                	jne    c00025bb <check_fs+0x87>
c000257d:	ba 20 33 03 c0       	mov    edx,0xc0033320
c0002582:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002585:	b9 03 00 00 00       	mov    ecx,0x3
c000258a:	e8 48 fa ff ff       	call   c0001fd7 <mem_cmp>
c000258f:	31 d2                	xor    edx,edx
c0002591:	85 c0                	test   eax,eax
c0002593:	74 26                	je     c00025bb <check_fs+0x87>
c0002595:	ba cc f4 02 c0       	mov    edx,0xc002f4cc
c000259a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025a0:	b9 05 00 00 00       	mov    ecx,0x5
c00025a5:	e8 2d fa ff ff       	call   c0001fd7 <mem_cmp>
c00025aa:	31 d2                	xor    edx,edx
c00025ac:	85 c0                	test   eax,eax
c00025ae:	74 0b                	je     c00025bb <check_fs+0x87>
c00025b0:	31 d2                	xor    edx,edx
c00025b2:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025b6:	0f 95 c2             	setne  dl
c00025b9:	01 d2                	add    edx,edx
c00025bb:	89 d0                	mov    eax,edx
c00025bd:	83 c4 08             	add    esp,0x8
c00025c0:	5b                   	pop    ebx
c00025c1:	c3                   	ret    

c00025c2 <find_volume>:
c00025c2:	55                   	push   ebp
c00025c3:	57                   	push   edi
c00025c4:	56                   	push   esi
c00025c5:	89 c6                	mov    esi,eax
c00025c7:	53                   	push   ebx
c00025c8:	89 d3                	mov    ebx,edx
c00025ca:	83 ec 2c             	sub    esp,0x2c
c00025cd:	31 d2                	xor    edx,edx
c00025cf:	e8 60 ff ff ff       	call   c0002534 <check_fs>
c00025d4:	83 f8 02             	cmp    eax,0x2
c00025d7:	74 06                	je     c00025df <find_volume+0x1d>
c00025d9:	77 62                	ja     c000263d <find_volume+0x7b>
c00025db:	85 db                	test   ebx,ebx
c00025dd:	74 5e                	je     c000263d <find_volume+0x7b>
c00025df:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00025e3:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00025e9:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c00025ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025f3:	89 cf                	mov    edi,ecx
c00025f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00025f9:	89 e8                	mov    eax,ebp
c00025fb:	83 c5 10             	add    ebp,0x10
c00025fe:	e8 95 f9 ff ff       	call   c0001f98 <ld_dword>
c0002603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002607:	89 01                	mov    DWORD PTR [ecx],eax
c0002609:	83 c1 04             	add    ecx,0x4
c000260c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002610:	75 e3                	jne    c00025f5 <find_volume+0x33>
c0002612:	31 ed                	xor    ebp,ebp
c0002614:	85 db                	test   ebx,ebx
c0002616:	74 03                	je     c000261b <find_volume+0x59>
c0002618:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000261b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000261e:	b8 03 00 00 00       	mov    eax,0x3
c0002623:	85 d2                	test   edx,edx
c0002625:	74 0c                	je     c0002633 <find_volume+0x71>
c0002627:	89 f0                	mov    eax,esi
c0002629:	e8 06 ff ff ff       	call   c0002534 <check_fs>
c000262e:	83 f8 01             	cmp    eax,0x1
c0002631:	76 0a                	jbe    c000263d <find_volume+0x7b>
c0002633:	85 db                	test   ebx,ebx
c0002635:	75 06                	jne    c000263d <find_volume+0x7b>
c0002637:	45                   	inc    ebp
c0002638:	83 fd 03             	cmp    ebp,0x3
c000263b:	76 de                	jbe    c000261b <find_volume+0x59>
c000263d:	83 c4 2c             	add    esp,0x2c
c0002640:	5b                   	pop    ebx
c0002641:	5e                   	pop    esi
c0002642:	5f                   	pop    edi
c0002643:	5d                   	pop    ebp
c0002644:	c3                   	ret    

c0002645 <mount_volume>:
c0002645:	55                   	push   ebp
c0002646:	89 d5                	mov    ebp,edx
c0002648:	57                   	push   edi
c0002649:	89 cf                	mov    edi,ecx
c000264b:	56                   	push   esi
c000264c:	53                   	push   ebx
c000264d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002652:	83 ec 1c             	sub    esp,0x1c
c0002655:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000265b:	e8 9c fd ff ff       	call   c00023fc <get_ldnumber>
c0002660:	85 c0                	test   eax,eax
c0002662:	0f 88 c4 02 00 00    	js     c000292c <mount_volume+0x2e7>
c0002668:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000266f:	89 c2                	mov    edx,eax
c0002671:	bb 0c 00 00 00       	mov    ebx,0xc
c0002676:	85 f6                	test   esi,esi
c0002678:	0f 84 ae 02 00 00    	je     c000292c <mount_volume+0x2e7>
c000267e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002681:	83 e7 fe             	and    edi,0xfffffffe
c0002684:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002687:	74 3a                	je     c00026c3 <mount_volume+0x7e>
c0002689:	89 04 24             	mov    DWORD PTR [esp],eax
c000268c:	83 ec 0c             	sub    esp,0xc
c000268f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002693:	50                   	push   eax
c0002694:	e8 a1 f8 ff ff       	call   c0001f3a <disk_status>
c0002699:	83 c4 10             	add    esp,0x10
c000269c:	a8 01                	test   al,0x1
c000269e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026a1:	75 20                	jne    c00026c3 <mount_volume+0x7e>
c00026a3:	31 db                	xor    ebx,ebx
c00026a5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026ab:	0f 84 7b 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b1:	a8 04                	test   al,0x4
c00026b3:	0f 84 73 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b9:	bb 0a 00 00 00       	mov    ebx,0xa
c00026be:	e9 69 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c00026c3:	83 ec 0c             	sub    esp,0xc
c00026c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026c9:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00026cc:	0f b6 c2             	movzx  eax,dl
c00026cf:	bb 03 00 00 00       	mov    ebx,0x3
c00026d4:	50                   	push   eax
c00026d5:	e8 63 f8 ff ff       	call   c0001f3d <disk_initialize>
c00026da:	83 c4 10             	add    esp,0x10
c00026dd:	a8 01                	test   al,0x1
c00026df:	0f 85 47 02 00 00    	jne    c000292c <mount_volume+0x2e7>
c00026e5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026eb:	74 04                	je     c00026f1 <mount_volume+0xac>
c00026ed:	a8 04                	test   al,0x4
c00026ef:	75 c8                	jne    c00026b9 <mount_volume+0x74>
c00026f1:	31 d2                	xor    edx,edx
c00026f3:	89 f0                	mov    eax,esi
c00026f5:	bb 01 00 00 00       	mov    ebx,0x1
c00026fa:	e8 c3 fe ff ff       	call   c00025c2 <find_volume>
c00026ff:	83 f8 04             	cmp    eax,0x4
c0002702:	0f 84 24 02 00 00    	je     c000292c <mount_volume+0x2e7>
c0002708:	83 f8 01             	cmp    eax,0x1
c000270b:	76 0a                	jbe    c0002717 <mount_volume+0xd2>
c000270d:	bb 0d 00 00 00       	mov    ebx,0xd
c0002712:	e9 15 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c0002717:	8d 46 3f             	lea    eax,[esi+0x3f]
c000271a:	e8 6c f8 ff ff       	call   c0001f8b <ld_word>
c000271f:	66 3d 00 02          	cmp    ax,0x200
c0002723:	75 e8                	jne    c000270d <mount_volume+0xc8>
c0002725:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002728:	e8 5e f8 ff ff       	call   c0001f8b <ld_word>
c000272d:	0f b7 c0             	movzx  eax,ax
c0002730:	89 04 24             	mov    DWORD PTR [esp],eax
c0002733:	85 c0                	test   eax,eax
c0002735:	75 0b                	jne    c0002742 <mount_volume+0xfd>
c0002737:	8d 46 58             	lea    eax,[esi+0x58]
c000273a:	e8 59 f8 ff ff       	call   c0001f98 <ld_dword>
c000273f:	89 04 24             	mov    DWORD PTR [esp],eax
c0002742:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002745:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002749:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000274c:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000274f:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002752:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002756:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0002759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000275d:	48                   	dec    eax
c000275e:	3c 01                	cmp    al,0x1
c0002760:	77 ab                	ja     c000270d <mount_volume+0xc8>
c0002762:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002766:	89 c3                	mov    ebx,eax
c0002768:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000276c:	66 85 c0             	test   ax,ax
c000276f:	74 9c                	je     c000270d <mount_volume+0xc8>
c0002771:	8d 40 ff             	lea    eax,[eax-0x1]
c0002774:	85 d8                	test   eax,ebx
c0002776:	75 95                	jne    c000270d <mount_volume+0xc8>
c0002778:	8d 46 45             	lea    eax,[esi+0x45]
c000277b:	e8 0b f8 ff ff       	call   c0001f8b <ld_word>
c0002780:	89 c7                	mov    edi,eax
c0002782:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002786:	a8 0f                	test   al,0xf
c0002788:	75 83                	jne    c000270d <mount_volume+0xc8>
c000278a:	8d 46 47             	lea    eax,[esi+0x47]
c000278d:	e8 f9 f7 ff ff       	call   c0001f8b <ld_word>
c0002792:	0f b7 e8             	movzx  ebp,ax
c0002795:	85 ed                	test   ebp,ebp
c0002797:	75 0a                	jne    c00027a3 <mount_volume+0x15e>
c0002799:	8d 46 54             	lea    eax,[esi+0x54]
c000279c:	e8 f7 f7 ff ff       	call   c0001f98 <ld_dword>
c00027a1:	89 c5                	mov    ebp,eax
c00027a3:	8d 46 42             	lea    eax,[esi+0x42]
c00027a6:	e8 e0 f7 ff ff       	call   c0001f8b <ld_word>
c00027ab:	0f b7 c8             	movzx  ecx,ax
c00027ae:	85 c9                	test   ecx,ecx
c00027b0:	0f 84 57 ff ff ff    	je     c000270d <mount_volume+0xc8>
c00027b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027bb:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027c3:	0f b7 c7             	movzx  eax,di
c00027c6:	c1 e8 04             	shr    eax,0x4
c00027c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00027cd:	01 c8                	add    eax,ecx
c00027cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d3:	39 c5                	cmp    ebp,eax
c00027d5:	0f 82 32 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027db:	29 c5                	sub    ebp,eax
c00027dd:	31 d2                	xor    edx,edx
c00027df:	89 e8                	mov    eax,ebp
c00027e1:	f7 f3                	div    ebx
c00027e3:	39 dd                	cmp    ebp,ebx
c00027e5:	0f 82 22 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027eb:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027f0:	0f 87 17 ff ff ff    	ja     c000270d <mount_volume+0xc8>
c00027f6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027fb:	0f 86 1c 01 00 00    	jbe    c000291d <mount_volume+0x2d8>
c0002801:	bb 03 00 00 00       	mov    ebx,0x3
c0002806:	8d 68 02             	lea    ebp,[eax+0x2]
c0002809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000280d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002811:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002815:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002818:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000281b:	01 c8                	add    eax,ecx
c000281d:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002820:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002823:	83 fb 03             	cmp    ebx,0x3
c0002826:	75 23                	jne    c000284b <mount_volume+0x206>
c0002828:	8d 46 5e             	lea    eax,[esi+0x5e]
c000282b:	e8 5b f7 ff ff       	call   c0001f8b <ld_word>
c0002830:	09 c7                	or     edi,eax
c0002832:	66 85 ff             	test   di,di
c0002835:	0f 85 d2 fe ff ff    	jne    c000270d <mount_volume+0xc8>
c000283b:	8d 46 60             	lea    eax,[esi+0x60]
c000283e:	c1 e5 02             	shl    ebp,0x2
c0002841:	e8 52 f7 ff ff       	call   c0001f98 <ld_dword>
c0002846:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002849:	eb 24                	jmp    c000286f <mount_volume+0x22a>
c000284b:	66 85 ff             	test   di,di
c000284e:	0f 84 b9 fe ff ff    	je     c000270d <mount_volume+0xc8>
c0002854:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002858:	83 fb 02             	cmp    ebx,0x2
c000285b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000285e:	75 04                	jne    c0002864 <mount_volume+0x21f>
c0002860:	01 ed                	add    ebp,ebp
c0002862:	eb 0b                	jmp    c000286f <mount_volume+0x22a>
c0002864:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002868:	83 e5 01             	and    ebp,0x1
c000286b:	d1 e8                	shr    eax,1
c000286d:	01 c5                	add    ebp,eax
c000286f:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002875:	c1 ed 09             	shr    ebp,0x9
c0002878:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c000287b:	0f 87 8c fe ff ff    	ja     c000270d <mount_volume+0xc8>
c0002881:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002888:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000288f:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002893:	83 fb 03             	cmp    ebx,0x3
c0002896:	75 6e                	jne    c0002906 <mount_volume+0x2c1>
c0002898:	8d 46 64             	lea    eax,[esi+0x64]
c000289b:	e8 eb f6 ff ff       	call   c0001f8b <ld_word>
c00028a0:	66 48                	dec    ax
c00028a2:	75 62                	jne    c0002906 <mount_volume+0x2c1>
c00028a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028a8:	89 f0                	mov    eax,esi
c00028aa:	42                   	inc    edx
c00028ab:	e8 42 fc ff ff       	call   c00024f2 <move_window>
c00028b0:	85 c0                	test   eax,eax
c00028b2:	75 52                	jne    c0002906 <mount_volume+0x2c1>
c00028b4:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028b8:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028be:	e8 c8 f6 ff ff       	call   c0001f8b <ld_word>
c00028c3:	66 3d 55 aa          	cmp    ax,0xaa55
c00028c7:	75 3d                	jne    c0002906 <mount_volume+0x2c1>
c00028c9:	8d 46 34             	lea    eax,[esi+0x34]
c00028cc:	e8 c7 f6 ff ff       	call   c0001f98 <ld_dword>
c00028d1:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028d6:	75 2e                	jne    c0002906 <mount_volume+0x2c1>
c00028d8:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00028de:	e8 b5 f6 ff ff       	call   c0001f98 <ld_dword>
c00028e3:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028e8:	75 1c                	jne    c0002906 <mount_volume+0x2c1>
c00028ea:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00028f0:	e8 a3 f6 ff ff       	call   c0001f98 <ld_dword>
c00028f5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00028f8:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00028fe:	e8 95 f6 ff ff       	call   c0001f98 <ld_dword>
c0002903:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002906:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000290c:	88 1e                	mov    BYTE PTR [esi],bl
c000290e:	40                   	inc    eax
c000290f:	31 db                	xor    ebx,ebx
c0002911:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002917:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000291b:	eb 0f                	jmp    c000292c <mount_volume+0x2e7>
c000291d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002922:	19 db                	sbb    ebx,ebx
c0002924:	83 c3 02             	add    ebx,0x2
c0002927:	e9 da fe ff ff       	jmp    c0002806 <mount_volume+0x1c1>
c000292c:	83 c4 1c             	add    esp,0x1c
c000292f:	89 d8                	mov    eax,ebx
c0002931:	5b                   	pop    ebx
c0002932:	5e                   	pop    esi
c0002933:	5f                   	pop    edi
c0002934:	5d                   	pop    ebp
c0002935:	c3                   	ret    

c0002936 <put_fat>:
c0002936:	55                   	push   ebp
c0002937:	bd 02 00 00 00       	mov    ebp,0x2
c000293c:	57                   	push   edi
c000293d:	56                   	push   esi
c000293e:	53                   	push   ebx
c000293f:	83 ec 1c             	sub    esp,0x1c
c0002942:	83 fa 01             	cmp    edx,0x1
c0002945:	0f 86 38 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c000294b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000294e:	0f 86 2f 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c0002954:	89 c6                	mov    esi,eax
c0002956:	89 cf                	mov    edi,ecx
c0002958:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000295b:	89 d3                	mov    ebx,edx
c000295d:	83 f8 02             	cmp    eax,0x2
c0002960:	0f 84 b1 00 00 00    	je     c0002a17 <put_fat+0xe1>
c0002966:	83 f8 03             	cmp    eax,0x3
c0002969:	0f 84 d5 00 00 00    	je     c0002a44 <put_fat+0x10e>
c000296f:	48                   	dec    eax
c0002970:	0f 85 0d 01 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002976:	89 d1                	mov    ecx,edx
c0002978:	89 f0                	mov    eax,esi
c000297a:	d1 e9                	shr    ecx,1
c000297c:	01 d1                	add    ecx,edx
c000297e:	89 ca                	mov    edx,ecx
c0002980:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002984:	c1 ea 09             	shr    edx,0x9
c0002987:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000298a:	e8 63 fb ff ff       	call   c00024f2 <move_window>
c000298f:	89 c5                	mov    ebp,eax
c0002991:	85 c0                	test   eax,eax
c0002993:	0f 85 ea 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000299d:	8d 46 34             	lea    eax,[esi+0x34]
c00029a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029a4:	8d 41 01             	lea    eax,[ecx+0x1]
c00029a7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029b1:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029b5:	89 f8                	mov    eax,edi
c00029b7:	83 e3 01             	and    ebx,0x1
c00029ba:	74 11                	je     c00029cd <put_fat+0x97>
c00029bc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029be:	89 f8                	mov    eax,edi
c00029c0:	83 e2 0f             	and    edx,0xf
c00029c3:	c1 e0 04             	shl    eax,0x4
c00029c6:	25 f0 0f 00 00       	and    eax,0xff0
c00029cb:	09 d0                	or     eax,edx
c00029cd:	88 01                	mov    BYTE PTR [ecx],al
c00029cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00029d7:	c1 ea 09             	shr    edx,0x9
c00029da:	89 f0                	mov    eax,esi
c00029dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029df:	e8 0e fb ff ff       	call   c00024f2 <move_window>
c00029e4:	89 c5                	mov    ebp,eax
c00029e6:	85 c0                	test   eax,eax
c00029e8:	0f 85 95 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c00029ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029f2:	25 ff 01 00 00       	and    eax,0x1ff
c00029f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fb:	85 db                	test   ebx,ebx
c00029fd:	74 07                	je     c0002a06 <put_fat+0xd0>
c00029ff:	c1 ef 04             	shr    edi,0x4
c0002a02:	89 f9                	mov    ecx,edi
c0002a04:	eb 0d                	jmp    c0002a13 <put_fat+0xdd>
c0002a06:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a08:	c1 ef 08             	shr    edi,0x8
c0002a0b:	83 e1 f0             	and    ecx,0xfffffff0
c0002a0e:	83 e7 0f             	and    edi,0xf
c0002a11:	09 f9                	or     ecx,edi
c0002a13:	88 08                	mov    BYTE PTR [eax],cl
c0002a15:	eb 27                	jmp    c0002a3e <put_fat+0x108>
c0002a17:	c1 ea 08             	shr    edx,0x8
c0002a1a:	89 f0                	mov    eax,esi
c0002a1c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a1f:	e8 ce fa ff ff       	call   c00024f2 <move_window>
c0002a24:	89 c5                	mov    ebp,eax
c0002a26:	85 c0                	test   eax,eax
c0002a28:	75 59                	jne    c0002a83 <put_fat+0x14d>
c0002a2a:	01 db                	add    ebx,ebx
c0002a2c:	0f b7 d7             	movzx  edx,di
c0002a2f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a35:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a39:	e8 72 f5 ff ff       	call   c0001fb0 <st_word>
c0002a3e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a42:	eb 3f                	jmp    c0002a83 <put_fat+0x14d>
c0002a44:	c1 ea 07             	shr    edx,0x7
c0002a47:	89 f0                	mov    eax,esi
c0002a49:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a4c:	e8 a1 fa ff ff       	call   c00024f2 <move_window>
c0002a51:	89 c5                	mov    ebp,eax
c0002a53:	85 c0                	test   eax,eax
c0002a55:	75 2c                	jne    c0002a83 <put_fat+0x14d>
c0002a57:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a5d:	c1 e3 02             	shl    ebx,0x2
c0002a60:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a66:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a6a:	89 d8                	mov    eax,ebx
c0002a6c:	e8 27 f5 ff ff       	call   c0001f98 <ld_dword>
c0002a71:	25 00 00 00 f0       	and    eax,0xf0000000
c0002a76:	09 f8                	or     eax,edi
c0002a78:	89 c2                	mov    edx,eax
c0002a7a:	89 d8                	mov    eax,ebx
c0002a7c:	e8 33 f5 ff ff       	call   c0001fb4 <st_dword>
c0002a81:	eb bb                	jmp    c0002a3e <put_fat+0x108>
c0002a83:	83 c4 1c             	add    esp,0x1c
c0002a86:	89 e8                	mov    eax,ebp
c0002a88:	5b                   	pop    ebx
c0002a89:	5e                   	pop    esi
c0002a8a:	5f                   	pop    edi
c0002a8b:	5d                   	pop    ebp
c0002a8c:	c3                   	ret    

c0002a8d <dir_clear>:
c0002a8d:	55                   	push   ebp
c0002a8e:	57                   	push   edi
c0002a8f:	56                   	push   esi
c0002a90:	89 c6                	mov    esi,eax
c0002a92:	53                   	push   ebx
c0002a93:	83 ec 1c             	sub    esp,0x1c
c0002a96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002a9a:	e8 f0 f9 ff ff       	call   c000248f <sync_window>
c0002a9f:	85 c0                	test   eax,eax
c0002aa1:	0f 85 c0 00 00 00    	jne    c0002b67 <dir_clear+0xda>
c0002aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aab:	89 f0                	mov    eax,esi
c0002aad:	e8 30 f7 ff ff       	call   c00021e2 <clst2sect>
c0002ab2:	31 d2                	xor    edx,edx
c0002ab4:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002ab7:	89 c5                	mov    ebp,eax
c0002ab9:	b9 00 02 00 00       	mov    ecx,0x200
c0002abe:	8d 46 34             	lea    eax,[esi+0x34]
c0002ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ac5:	e8 02 f5 ff ff       	call   c0001fcc <mem_set>
c0002aca:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002ace:	c1 e3 09             	shl    ebx,0x9
c0002ad1:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002ad7:	76 1b                	jbe    c0002af4 <dir_clear+0x67>
c0002ad9:	bb 00 80 00 00       	mov    ebx,0x8000
c0002ade:	eb 14                	jmp    c0002af4 <dir_clear+0x67>
c0002ae0:	83 ec 0c             	sub    esp,0xc
c0002ae3:	53                   	push   ebx
c0002ae4:	e8 eb 32 00 00       	call   c0005dd4 <ff_memalloc>
c0002ae9:	83 c4 10             	add    esp,0x10
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	85 c0                	test   eax,eax
c0002af0:	75 7c                	jne    c0002b6e <dir_clear+0xe1>
c0002af2:	d1 eb                	shr    ebx,1
c0002af4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002afa:	77 e4                	ja     c0002ae0 <dir_clear+0x53>
c0002afc:	31 db                	xor    ebx,ebx
c0002afe:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b02:	39 d8                	cmp    eax,ebx
c0002b04:	76 53                	jbe    c0002b59 <dir_clear+0xcc>
c0002b06:	6a 01                	push   0x1
c0002b08:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b0b:	50                   	push   eax
c0002b0c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b14:	50                   	push   eax
c0002b15:	e8 3c f4 ff ff       	call   c0001f56 <disk_write>
c0002b1a:	83 c4 10             	add    esp,0x10
c0002b1d:	85 c0                	test   eax,eax
c0002b1f:	75 38                	jne    c0002b59 <dir_clear+0xcc>
c0002b21:	43                   	inc    ebx
c0002b22:	eb da                	jmp    c0002afe <dir_clear+0x71>
c0002b24:	52                   	push   edx
c0002b25:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b2c:	50                   	push   eax
c0002b2d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b31:	57                   	push   edi
c0002b32:	50                   	push   eax
c0002b33:	e8 1e f4 ff ff       	call   c0001f56 <disk_write>
c0002b38:	83 c4 10             	add    esp,0x10
c0002b3b:	85 c0                	test   eax,eax
c0002b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b41:	75 0a                	jne    c0002b4d <dir_clear+0xc0>
c0002b43:	01 d3                	add    ebx,edx
c0002b45:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b49:	39 d8                	cmp    eax,ebx
c0002b4b:	77 d7                	ja     c0002b24 <dir_clear+0x97>
c0002b4d:	83 ec 0c             	sub    esp,0xc
c0002b50:	57                   	push   edi
c0002b51:	e8 96 32 00 00       	call   c0005dec <ff_memfree>
c0002b56:	83 c4 10             	add    esp,0x10
c0002b59:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b5d:	39 d8                	cmp    eax,ebx
c0002b5f:	0f 95 c0             	setne  al
c0002b62:	0f b6 c0             	movzx  eax,al
c0002b65:	eb 19                	jmp    c0002b80 <dir_clear+0xf3>
c0002b67:	b8 01 00 00 00       	mov    eax,0x1
c0002b6c:	eb 12                	jmp    c0002b80 <dir_clear+0xf3>
c0002b6e:	89 d9                	mov    ecx,ebx
c0002b70:	31 d2                	xor    edx,edx
c0002b72:	e8 55 f4 ff ff       	call   c0001fcc <mem_set>
c0002b77:	89 da                	mov    edx,ebx
c0002b79:	31 db                	xor    ebx,ebx
c0002b7b:	c1 ea 09             	shr    edx,0x9
c0002b7e:	eb c5                	jmp    c0002b45 <dir_clear+0xb8>
c0002b80:	83 c4 1c             	add    esp,0x1c
c0002b83:	5b                   	pop    ebx
c0002b84:	5e                   	pop    esi
c0002b85:	5f                   	pop    edi
c0002b86:	5d                   	pop    ebp
c0002b87:	c3                   	ret    

c0002b88 <create_name>:
c0002b88:	55                   	push   ebp
c0002b89:	57                   	push   edi
c0002b8a:	89 d7                	mov    edi,edx
c0002b8c:	56                   	push   esi
c0002b8d:	31 f6                	xor    esi,esi
c0002b8f:	53                   	push   ebx
c0002b90:	83 ec 3c             	sub    esp,0x3c
c0002b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b97:	8b 02                	mov    eax,DWORD PTR [edx]
c0002b99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0002ba3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002ba6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002baa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002bae:	e8 5e f4 ff ff       	call   c0002011 <tchar2uni>
c0002bb3:	89 c3                	mov    ebx,eax
c0002bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0002bb8:	75 0a                	jne    c0002bc4 <create_name+0x3c>
c0002bba:	b8 06 00 00 00       	mov    eax,0x6
c0002bbf:	e9 93 02 00 00       	jmp    c0002e57 <create_name+0x2cf>
c0002bc4:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bc9:	76 0c                	jbe    c0002bd7 <create_name+0x4f>
c0002bcb:	c1 e8 10             	shr    eax,0x10
c0002bce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bd2:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002bd6:	46                   	inc    esi
c0002bd7:	0f b7 d3             	movzx  edx,bx
c0002bda:	83 fa 1f             	cmp    edx,0x1f
c0002bdd:	76 4a                	jbe    c0002c29 <create_name+0xa1>
c0002bdf:	83 fa 5c             	cmp    edx,0x5c
c0002be2:	74 30                	je     c0002c14 <create_name+0x8c>
c0002be4:	83 fa 2f             	cmp    edx,0x2f
c0002be7:	74 2b                	je     c0002c14 <create_name+0x8c>
c0002be9:	83 fa 7f             	cmp    edx,0x7f
c0002bec:	77 0e                	ja     c0002bfc <create_name+0x74>
c0002bee:	b8 d2 f4 02 c0       	mov    eax,0xc002f4d2
c0002bf3:	e8 02 f4 ff ff       	call   c0001ffa <chk_chr>
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 be                	jne    c0002bba <create_name+0x32>
c0002bfc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c02:	77 b6                	ja     c0002bba <create_name+0x32>
c0002c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c08:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c0c:	46                   	inc    esi
c0002c0d:	eb 9b                	jmp    c0002baa <create_name+0x22>
c0002c0f:	40                   	inc    eax
c0002c10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c18:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c1b:	83 fa 2f             	cmp    edx,0x2f
c0002c1e:	74 ef                	je     c0002c0f <create_name+0x87>
c0002c20:	83 fa 5c             	cmp    edx,0x5c
c0002c23:	74 ea                	je     c0002c0f <create_name+0x87>
c0002c25:	31 db                	xor    ebx,ebx
c0002c27:	eb 02                	jmp    c0002c2b <create_name+0xa3>
c0002c29:	b3 04                	mov    bl,0x4
c0002c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c2f:	89 07                	mov    DWORD PTR [edi],eax
c0002c31:	85 f6                	test   esi,esi
c0002c33:	74 16                	je     c0002c4b <create_name+0xc3>
c0002c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c39:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c3e:	83 f8 20             	cmp    eax,0x20
c0002c41:	74 05                	je     c0002c48 <create_name+0xc0>
c0002c43:	83 f8 2e             	cmp    eax,0x2e
c0002c46:	75 03                	jne    c0002c4b <create_name+0xc3>
c0002c48:	4e                   	dec    esi
c0002c49:	eb e6                	jmp    c0002c31 <create_name+0xa9>
c0002c4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c4f:	31 ff                	xor    edi,edi
c0002c51:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c57:	85 f6                	test   esi,esi
c0002c59:	0f 84 5b ff ff ff    	je     c0002bba <create_name+0x32>
c0002c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c63:	8d 57 01             	lea    edx,[edi+0x1]
c0002c66:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c6a:	83 f8 20             	cmp    eax,0x20
c0002c6d:	75 04                	jne    c0002c73 <create_name+0xeb>
c0002c6f:	89 d7                	mov    edi,edx
c0002c71:	eb ec                	jmp    c0002c5f <create_name+0xd7>
c0002c73:	85 ff                	test   edi,edi
c0002c75:	75 05                	jne    c0002c7c <create_name+0xf4>
c0002c77:	83 f8 2e             	cmp    eax,0x2e
c0002c7a:	75 08                	jne    c0002c84 <create_name+0xfc>
c0002c7c:	83 cb 03             	or     ebx,0x3
c0002c7f:	eb 03                	jmp    c0002c84 <create_name+0xfc>
c0002c81:	4e                   	dec    esi
c0002c82:	74 0c                	je     c0002c90 <create_name+0x108>
c0002c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002c8e:	75 f1                	jne    c0002c81 <create_name+0xf9>
c0002c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c94:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c99:	83 c0 20             	add    eax,0x20
c0002c9c:	ba 20 00 00 00       	mov    edx,0x20
c0002ca1:	31 ed                	xor    ebp,ebp
c0002ca3:	e8 24 f3 ff ff       	call   c0001fcc <mem_set>
c0002ca8:	b9 08 00 00 00       	mov    ecx,0x8
c0002cad:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002cb2:	8d 47 01             	lea    eax,[edi+0x1]
c0002cb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cc1:	89 c7                	mov    edi,eax
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	0f 84 25 01 00 00    	je     c0002df0 <create_name+0x268>
c0002ccb:	83 f8 20             	cmp    eax,0x20
c0002cce:	74 0f                	je     c0002cdf <create_name+0x157>
c0002cd0:	83 f8 2e             	cmp    eax,0x2e
c0002cd3:	75 13                	jne    c0002ce8 <create_name+0x160>
c0002cd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cd9:	0f 84 6a 01 00 00    	je     c0002e49 <create_name+0x2c1>
c0002cdf:	83 cb 03             	or     ebx,0x3
c0002ce2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002ce6:	eb ca                	jmp    c0002cb2 <create_name+0x12a>
c0002ce8:	39 cd                	cmp    ebp,ecx
c0002cea:	73 0b                	jae    c0002cf7 <create_name+0x16f>
c0002cec:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cf0:	75 3f                	jne    c0002d31 <create_name+0x1a9>
c0002cf2:	e9 52 01 00 00       	jmp    c0002e49 <create_name+0x2c1>
c0002cf7:	83 f9 0b             	cmp    ecx,0xb
c0002cfa:	75 0d                	jne    c0002d09 <create_name+0x181>
c0002cfc:	83 cb 03             	or     ebx,0x3
c0002cff:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d04:	e9 e7 00 00 00       	jmp    c0002df0 <create_name+0x268>
c0002d09:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0d:	74 0d                	je     c0002d1c <create_name+0x194>
c0002d0f:	83 cb 03             	or     ebx,0x3
c0002d12:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d16:	0f 87 d4 00 00 00    	ja     c0002df0 <create_name+0x268>
c0002d1c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d21:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d25:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d2a:	bd 08 00 00 00       	mov    ebp,0x8
c0002d2f:	eb b1                	jmp    c0002ce2 <create_name+0x15a>
c0002d31:	83 f8 7f             	cmp    eax,0x7f
c0002d34:	76 66                	jbe    c0002d9c <create_name+0x214>
c0002d36:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3a:	89 d9                	mov    ecx,ebx
c0002d3c:	83 c9 02             	or     ecx,0x2
c0002d3f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d43:	52                   	push   edx
c0002d44:	52                   	push   edx
c0002d45:	68 b5 01 00 00       	push   0x1b5
c0002d4a:	50                   	push   eax
c0002d4b:	e8 b4 30 00 00       	call   c0005e04 <ff_uni2oem>
c0002d50:	83 c4 10             	add    esp,0x10
c0002d53:	89 c7                	mov    edi,eax
c0002d55:	a8 80                	test   al,0x80
c0002d57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d5b:	74 0c                	je     c0002d69 <create_name+0x1e1>
c0002d5d:	83 e7 7f             	and    edi,0x7f
c0002d60:	0f b6 bf 80 f5 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0a80]
c0002d67:	eb 2a                	jmp    c0002d93 <create_name+0x20b>
c0002d69:	0f b7 c0             	movzx  eax,ax
c0002d6c:	3d ff 00 00 00       	cmp    eax,0xff
c0002d71:	76 20                	jbe    c0002d93 <create_name+0x20b>
c0002d73:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002d76:	39 ea                	cmp    edx,ebp
c0002d78:	77 0a                	ja     c0002d84 <create_name+0x1fc>
c0002d7a:	83 cb 03             	or     ebx,0x3
c0002d7d:	89 cd                	mov    ebp,ecx
c0002d7f:	e9 5e ff ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002d84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002d88:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002d8c:	45                   	inc    ebp
c0002d8d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d91:	eb 4d                	jmp    c0002de0 <create_name+0x258>
c0002d93:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d97:	66 85 ff             	test   di,di
c0002d9a:	74 19                	je     c0002db5 <create_name+0x22d>
c0002d9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002da0:	0f b7 d7             	movzx  edx,di
c0002da3:	b8 db f4 02 c0       	mov    eax,0xc002f4db
c0002da8:	e8 4d f2 ff ff       	call   c0001ffa <chk_chr>
c0002dad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002db1:	85 c0                	test   eax,eax
c0002db3:	74 0a                	je     c0002dbf <create_name+0x237>
c0002db5:	83 cb 03             	or     ebx,0x3
c0002db8:	bf 5f 00 00 00       	mov    edi,0x5f
c0002dbd:	eb 21                	jmp    c0002de0 <create_name+0x258>
c0002dbf:	8d 47 bf             	lea    eax,[edi-0x41]
c0002dc2:	66 83 f8 19          	cmp    ax,0x19
c0002dc6:	77 07                	ja     c0002dcf <create_name+0x247>
c0002dc8:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002dcd:	eb 11                	jmp    c0002de0 <create_name+0x258>
c0002dcf:	8d 47 9f             	lea    eax,[edi-0x61]
c0002dd2:	66 83 f8 19          	cmp    ax,0x19
c0002dd6:	77 08                	ja     c0002de0 <create_name+0x258>
c0002dd8:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002ddd:	83 ef 20             	sub    edi,0x20
c0002de0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002de4:	89 f8                	mov    eax,edi
c0002de6:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002dea:	45                   	inc    ebp
c0002deb:	e9 f2 fe ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002df4:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002df8:	75 04                	jne    c0002dfe <create_name+0x276>
c0002dfa:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002dfe:	83 f9 08             	cmp    ecx,0x8
c0002e01:	75 05                	jne    c0002e08 <create_name+0x280>
c0002e03:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e0c:	83 e0 0c             	and    eax,0xc
c0002e0f:	83 f8 0c             	cmp    eax,0xc
c0002e12:	74 0c                	je     c0002e20 <create_name+0x298>
c0002e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e18:	83 e0 03             	and    eax,0x3
c0002e1b:	83 f8 03             	cmp    eax,0x3
c0002e1e:	75 05                	jne    c0002e25 <create_name+0x29d>
c0002e20:	83 cb 02             	or     ebx,0x2
c0002e23:	eb 19                	jmp    c0002e3e <create_name+0x2b6>
c0002e25:	f6 c3 02             	test   bl,0x2
c0002e28:	75 14                	jne    c0002e3e <create_name+0x2b6>
c0002e2a:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e2f:	74 03                	je     c0002e34 <create_name+0x2ac>
c0002e31:	83 cb 10             	or     ebx,0x10
c0002e34:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e39:	74 03                	je     c0002e3e <create_name+0x2b6>
c0002e3b:	83 cb 08             	or     ebx,0x8
c0002e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e42:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e45:	31 c0                	xor    eax,eax
c0002e47:	eb 0e                	jmp    c0002e57 <create_name+0x2cf>
c0002e49:	83 f9 0b             	cmp    ecx,0xb
c0002e4c:	0f 85 ca fe ff ff    	jne    c0002d1c <create_name+0x194>
c0002e52:	e9 a5 fe ff ff       	jmp    c0002cfc <create_name+0x174>
c0002e57:	83 c4 3c             	add    esp,0x3c
c0002e5a:	5b                   	pop    ebx
c0002e5b:	5e                   	pop    esi
c0002e5c:	5f                   	pop    edi
c0002e5d:	5d                   	pop    ebp
c0002e5e:	c3                   	ret    

c0002e5f <cmp_lfn>:
c0002e5f:	55                   	push   ebp
c0002e60:	57                   	push   edi
c0002e61:	89 d7                	mov    edi,edx
c0002e63:	56                   	push   esi
c0002e64:	53                   	push   ebx
c0002e65:	83 ec 1c             	sub    esp,0x1c
c0002e68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e6c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002e6f:	e8 17 f1 ff ff       	call   c0001f8b <ld_word>
c0002e74:	66 85 c0             	test   ax,ax
c0002e77:	74 07                	je     c0002e80 <cmp_lfn+0x21>
c0002e79:	31 c0                	xor    eax,eax
c0002e7b:	e9 a1 00 00 00       	jmp    c0002f21 <cmp_lfn+0xc2>
c0002e80:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002e82:	bd 01 00 00 00       	mov    ebp,0x1
c0002e87:	83 e3 3f             	and    ebx,0x3f
c0002e8a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002e92:	4b                   	dec    ebx
c0002e93:	6b db 0d             	imul   ebx,ebx,0xd
c0002e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9a:	0f b6 80 00 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0a00]
c0002ea1:	01 f8                	add    eax,edi
c0002ea3:	e8 e3 f0 ff ff       	call   c0001f8b <ld_word>
c0002ea8:	66 85 ed             	test   bp,bp
c0002eab:	89 c6                	mov    esi,eax
c0002ead:	74 3c                	je     c0002eeb <cmp_lfn+0x8c>
c0002eaf:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eb5:	77 c2                	ja     c0002e79 <cmp_lfn+0x1a>
c0002eb7:	83 ec 0c             	sub    esp,0xc
c0002eba:	0f b7 c0             	movzx  eax,ax
c0002ebd:	50                   	push   eax
c0002ebe:	e8 59 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002ec3:	89 c5                	mov    ebp,eax
c0002ec5:	8d 43 01             	lea    eax,[ebx+0x1]
c0002ec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002ed0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0002ed7:	e8 40 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002edc:	83 c4 10             	add    esp,0x10
c0002edf:	39 c5                	cmp    ebp,eax
c0002ee1:	75 96                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ee3:	89 f5                	mov    ebp,esi
c0002ee5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002ee9:	eb 0b                	jmp    c0002ef6 <cmp_lfn+0x97>
c0002eeb:	0f b7 c8             	movzx  ecx,ax
c0002eee:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002ef4:	75 83                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ef6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002efa:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002eff:	75 95                	jne    c0002e96 <cmp_lfn+0x37>
c0002f01:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f04:	74 16                	je     c0002f1c <cmp_lfn+0xbd>
c0002f06:	66 85 ed             	test   bp,bp
c0002f09:	74 11                	je     c0002f1c <cmp_lfn+0xbd>
c0002f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f0f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f14:	0f 94 c0             	sete   al
c0002f17:	0f b6 c0             	movzx  eax,al
c0002f1a:	eb 05                	jmp    c0002f21 <cmp_lfn+0xc2>
c0002f1c:	b8 01 00 00 00       	mov    eax,0x1
c0002f21:	83 c4 1c             	add    esp,0x1c
c0002f24:	5b                   	pop    ebx
c0002f25:	5e                   	pop    esi
c0002f26:	5f                   	pop    edi
c0002f27:	5d                   	pop    ebp
c0002f28:	c3                   	ret    

c0002f29 <sync_fs>:
c0002f29:	56                   	push   esi
c0002f2a:	53                   	push   ebx
c0002f2b:	53                   	push   ebx
c0002f2c:	89 c3                	mov    ebx,eax
c0002f2e:	e8 5c f5 ff ff       	call   c000248f <sync_window>
c0002f33:	85 c0                	test   eax,eax
c0002f35:	0f 85 9a 00 00 00    	jne    c0002fd5 <sync_fs+0xac>
c0002f3b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f3e:	75 7b                	jne    c0002fbb <sync_fs+0x92>
c0002f40:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f44:	75 75                	jne    c0002fbb <sync_fs+0x92>
c0002f46:	b9 00 02 00 00       	mov    ecx,0x200
c0002f4b:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f4e:	31 d2                	xor    edx,edx
c0002f50:	89 f0                	mov    eax,esi
c0002f52:	e8 75 f0 ff ff       	call   c0001fcc <mem_set>
c0002f57:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f62:	e8 49 f0 ff ff       	call   c0001fb0 <st_word>
c0002f67:	ba 52 52 61 41       	mov    edx,0x41615252
c0002f6c:	89 f0                	mov    eax,esi
c0002f6e:	e8 41 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f73:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002f79:	ba 72 72 41 61       	mov    edx,0x61417272
c0002f7e:	e8 31 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f86:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002f8c:	e8 23 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f91:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f94:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002f9a:	e8 15 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f9f:	6a 01                	push   0x1
c0002fa1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fa4:	40                   	inc    eax
c0002fa5:	50                   	push   eax
c0002fa6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fa9:	56                   	push   esi
c0002faa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fae:	50                   	push   eax
c0002faf:	e8 a2 ef ff ff       	call   c0001f56 <disk_write>
c0002fb4:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fb8:	83 c4 10             	add    esp,0x10
c0002fbb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fbf:	51                   	push   ecx
c0002fc0:	6a 00                	push   0x0
c0002fc2:	6a 00                	push   0x0
c0002fc4:	50                   	push   eax
c0002fc5:	e8 a2 ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fca:	83 c4 10             	add    esp,0x10
c0002fcd:	85 c0                	test   eax,eax
c0002fcf:	0f 95 c0             	setne  al
c0002fd2:	0f b6 c0             	movzx  eax,al
c0002fd5:	5a                   	pop    edx
c0002fd6:	5b                   	pop    ebx
c0002fd7:	5e                   	pop    esi
c0002fd8:	c3                   	ret    

c0002fd9 <create_partition>:
c0002fd9:	55                   	push   ebp
c0002fda:	0f b6 c0             	movzx  eax,al
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 40             	sub    esp,0x40
c0002fe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fe7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002feb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002fef:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ff3:	50                   	push   eax
c0002ff4:	6a 01                	push   0x1
c0002ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002ffa:	e8 6d ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 85 6a 01 00 00    	jne    c0003174 <create_partition+0x19b>
c000300a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000300e:	b9 05 00 00 00       	mov    ecx,0x5
c0003013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003017:	be 08 00 00 00       	mov    esi,0x8
c000301c:	89 f0                	mov    eax,esi
c000301e:	31 d2                	xor    edx,edx
c0003020:	0f b6 d8             	movzx  ebx,al
c0003023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003027:	f7 f3                	div    ebx
c0003029:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000302e:	76 0a                	jbe    c000303a <create_partition+0x61>
c0003030:	d1 e6                	shl    esi,1
c0003032:	49                   	dec    ecx
c0003033:	75 e7                	jne    c000301c <create_partition+0x43>
c0003035:	be ff ff ff ff       	mov    esi,0xffffffff
c000303a:	b9 00 02 00 00       	mov    ecx,0x200
c000303f:	31 d2                	xor    edx,edx
c0003041:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003045:	e8 82 ef ff ff       	call   c0001fcc <mem_set>
c000304a:	b9 64 00 00 00       	mov    ecx,0x64
c000304f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003053:	31 d2                	xor    edx,edx
c0003055:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000305d:	f7 f1                	div    ecx
c000305f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003068:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000306c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0003072:	89 f0                	mov    eax,esi
c0003074:	0f b6 c0             	movzx  eax,al
c0003077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000307b:	85 c9                	test   ecx,ecx
c000307d:	75 34                	jne    c00030b3 <create_partition+0xda>
c000307f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003083:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003088:	05 fe 01 00 00       	add    eax,0x1fe
c000308d:	e8 1e ef ff ff       	call   c0001fb0 <st_word>
c0003092:	6a 01                	push   0x1
c0003094:	6a 00                	push   0x0
c0003096:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000309a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000309e:	e8 b3 ee ff ff       	call   c0001f56 <disk_write>
c00030a3:	83 c4 10             	add    esp,0x10
c00030a6:	85 c0                	test   eax,eax
c00030a8:	0f 95 c0             	setne  al
c00030ab:	0f b6 c0             	movzx  eax,al
c00030ae:	e9 c6 00 00 00       	jmp    c0003179 <create_partition+0x1a0>
c00030b3:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030b7:	76 c6                	jbe    c000307f <create_partition+0xa6>
c00030b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030c1:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030c4:	83 fe 64             	cmp    esi,0x64
c00030c7:	77 0d                	ja     c00030d6 <create_partition+0xfd>
c00030c9:	74 07                	je     c00030d2 <create_partition+0xf9>
c00030cb:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c00030d0:	eb 04                	jmp    c00030d6 <create_partition+0xfd>
c00030d2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030d6:	31 c0                	xor    eax,eax
c00030d8:	89 f2                	mov    edx,esi
c00030da:	01 ca                	add    edx,ecx
c00030dc:	0f 92 c0             	setb   al
c00030df:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c00030e3:	77 04                	ja     c00030e9 <create_partition+0x110>
c00030e5:	85 c0                	test   eax,eax
c00030e7:	74 08                	je     c00030f1 <create_partition+0x118>
c00030e9:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030ed:	29 ce                	sub    esi,ecx
c00030ef:	eb 04                	jmp    c00030f5 <create_partition+0x11c>
c00030f1:	85 f6                	test   esi,esi
c00030f3:	74 8a                	je     c000307f <create_partition+0xa6>
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	89 d8                	mov    eax,ebx
c00030f9:	bf 3f 00 00 00       	mov    edi,0x3f
c00030fe:	e8 b1 ee ff ff       	call   c0001fb4 <st_dword>
c0003103:	8d 43 04             	lea    eax,[ebx+0x4]
c0003106:	89 f2                	mov    edx,esi
c0003108:	83 c3 10             	add    ebx,0x10
c000310b:	e8 a4 ee ff ff       	call   c0001fb4 <st_dword>
c0003110:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003114:	31 d2                	xor    edx,edx
c0003116:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003119:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000311d:	89 c8                	mov    eax,ecx
c000311f:	01 f1                	add    ecx,esi
c0003121:	f7 f7                	div    edi
c0003123:	89 d5                	mov    ebp,edx
c0003125:	31 d2                	xor    edx,edx
c0003127:	45                   	inc    ebp
c0003128:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000312c:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000312f:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003132:	89 c2                	mov    edx,eax
c0003134:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003137:	c1 ea 02             	shr    edx,0x2
c000313a:	83 e2 c0             	and    edx,0xffffffc0
c000313d:	09 ea                	or     edx,ebp
c000313f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003142:	31 d2                	xor    edx,edx
c0003144:	f7 f7                	div    edi
c0003146:	89 d6                	mov    esi,edx
c0003148:	31 d2                	xor    edx,edx
c000314a:	46                   	inc    esi
c000314b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000314f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003152:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003155:	89 c7                	mov    edi,eax
c0003157:	c1 ef 02             	shr    edi,0x2
c000315a:	83 e7 c0             	and    edi,0xffffffc0
c000315d:	09 fe                	or     esi,edi
c000315f:	89 f2                	mov    edx,esi
c0003161:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003164:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003169:	0f 85 0c ff ff ff    	jne    c000307b <create_partition+0xa2>
c000316f:	e9 0b ff ff ff       	jmp    c000307f <create_partition+0xa6>
c0003174:	b8 01 00 00 00       	mov    eax,0x1
c0003179:	83 c4 3c             	add    esp,0x3c
c000317c:	5b                   	pop    ebx
c000317d:	5e                   	pop    esi
c000317e:	5f                   	pop    edi
c000317f:	5d                   	pop    ebp
c0003180:	c3                   	ret    

c0003181 <get_fileinfo>:
c0003181:	55                   	push   ebp
c0003182:	57                   	push   edi
c0003183:	56                   	push   esi
c0003184:	53                   	push   ebx
c0003185:	83 ec 1c             	sub    esp,0x1c
c0003188:	8b 30                	mov    esi,DWORD PTR [eax]
c000318a:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000318e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003192:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003196:	0f 84 d3 01 00 00    	je     c000336f <get_fileinfo+0x1ee>
c000319c:	89 d3                	mov    ebx,edx
c000319e:	89 c6                	mov    esi,eax
c00031a0:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031a4:	74 72                	je     c0003218 <get_fileinfo+0x97>
c00031a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031ae:	31 ed                	xor    ebp,ebp
c00031b0:	31 ff                	xor    edi,edi
c00031b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031bd:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031c1:	89 c2                	mov    edx,eax
c00031c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031c7:	85 c0                	test   eax,eax
c00031c9:	74 41                	je     c000320c <get_fileinfo+0x8b>
c00031cb:	0f b7 c5             	movzx  eax,bp
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 0d                	jne    c00031df <get_fileinfo+0x5e>
c00031d2:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c00031d8:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00031dd:	76 22                	jbe    c0003201 <get_fileinfo+0x80>
c00031df:	c1 e0 10             	shl    eax,0x10
c00031e2:	b9 ff 00 00 00       	mov    ecx,0xff
c00031e7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00031eb:	29 f9                	sub    ecx,edi
c00031ed:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00031f1:	e8 f3 ee ff ff       	call   c00020e9 <put_utf>
c00031f6:	0f b6 c0             	movzx  eax,al
c00031f9:	85 c0                	test   eax,eax
c00031fb:	74 0d                	je     c000320a <get_fileinfo+0x89>
c00031fd:	01 c7                	add    edi,eax
c00031ff:	31 d2                	xor    edx,edx
c0003201:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003206:	89 d5                	mov    ebp,edx
c0003208:	eb a8                	jmp    c00031b2 <get_fileinfo+0x31>
c000320a:	31 ff                	xor    edi,edi
c000320c:	66 85 ed             	test   bp,bp
c000320f:	74 02                	je     c0003213 <get_fileinfo+0x92>
c0003211:	31 ff                	xor    edi,edi
c0003213:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003218:	31 ff                	xor    edi,edi
c000321a:	31 c9                	xor    ecx,ecx
c000321c:	83 f9 0a             	cmp    ecx,0xa
c000321f:	0f 87 ac 00 00 00    	ja     c00032d1 <get_fileinfo+0x150>
c0003225:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003228:	8d 69 01             	lea    ebp,[ecx+0x1]
c000322b:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000322f:	89 c2                	mov    edx,eax
c0003231:	83 f8 20             	cmp    eax,0x20
c0003234:	0f 84 90 00 00 00    	je     c00032ca <get_fileinfo+0x149>
c000323a:	83 f8 05             	cmp    eax,0x5
c000323d:	75 05                	jne    c0003244 <get_fileinfo+0xc3>
c000323f:	ba e5 00 00 00       	mov    edx,0xe5
c0003244:	83 ff 0b             	cmp    edi,0xb
c0003247:	77 0b                	ja     c0003254 <get_fileinfo+0xd3>
c0003249:	83 fd 09             	cmp    ebp,0x9
c000324c:	75 06                	jne    c0003254 <get_fileinfo+0xd3>
c000324e:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003253:	47                   	inc    edi
c0003254:	0f b7 c2             	movzx  eax,dx
c0003257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000325b:	e8 ab ed ff ff       	call   c000200b <dbc_1st>
c0003260:	85 c0                	test   eax,eax
c0003262:	74 2f                	je     c0003293 <get_fileinfo+0x112>
c0003264:	83 fd 08             	cmp    ebp,0x8
c0003267:	74 2a                	je     c0003293 <get_fileinfo+0x112>
c0003269:	83 fd 0b             	cmp    ebp,0xb
c000326c:	74 25                	je     c0003293 <get_fileinfo+0x112>
c000326e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003271:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003275:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003279:	e8 90 ed ff ff       	call   c000200e <dbc_2nd>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 11                	je     c0003293 <get_fileinfo+0x112>
c0003282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003286:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000328b:	c1 e0 08             	shl    eax,0x8
c000328e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003291:	09 c2                	or     edx,eax
c0003293:	0f b7 d2             	movzx  edx,dx
c0003296:	50                   	push   eax
c0003297:	50                   	push   eax
c0003298:	68 b5 01 00 00       	push   0x1b5
c000329d:	52                   	push   edx
c000329e:	e8 01 2c 00 00       	call   c0005ea4 <ff_oem2uni>
c00032a3:	83 c4 10             	add    esp,0x10
c00032a6:	0f b7 c0             	movzx  eax,ax
c00032a9:	85 c0                	test   eax,eax
c00032ab:	75 04                	jne    c00032b1 <get_fileinfo+0x130>
c00032ad:	31 ff                	xor    edi,edi
c00032af:	eb 20                	jmp    c00032d1 <get_fileinfo+0x150>
c00032b1:	b9 0c 00 00 00       	mov    ecx,0xc
c00032b6:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ba:	29 f9                	sub    ecx,edi
c00032bc:	e8 28 ee ff ff       	call   c00020e9 <put_utf>
c00032c1:	0f b6 c0             	movzx  eax,al
c00032c4:	85 c0                	test   eax,eax
c00032c6:	74 e5                	je     c00032ad <get_fileinfo+0x12c>
c00032c8:	01 c7                	add    edi,eax
c00032ca:	89 e9                	mov    ecx,ebp
c00032cc:	e9 4b ff ff ff       	jmp    c000321c <get_fileinfo+0x9b>
c00032d1:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00032d6:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00032da:	75 5f                	jne    c000333b <get_fileinfo+0x1ba>
c00032dc:	85 ff                	test   edi,edi
c00032de:	75 0b                	jne    c00032eb <get_fileinfo+0x16a>
c00032e0:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00032e4:	ba 01 00 00 00       	mov    edx,0x1
c00032e9:	eb 3e                	jmp    c0003329 <get_fileinfo+0x1a8>
c00032eb:	bf 08 00 00 00       	mov    edi,0x8
c00032f0:	31 d2                	xor    edx,edx
c00032f2:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00032f8:	84 c0                	test   al,al
c00032fa:	74 2d                	je     c0003329 <get_fileinfo+0x1a8>
c00032fc:	66 83 f8 2e          	cmp    ax,0x2e
c0003300:	74 1b                	je     c000331d <get_fileinfo+0x19c>
c0003302:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003305:	66 83 f9 19          	cmp    cx,0x19
c0003309:	77 17                	ja     c0003322 <get_fileinfo+0x1a1>
c000330b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000330e:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003311:	21 f9                	and    ecx,edi
c0003313:	80 e1 18             	and    cl,0x18
c0003316:	74 0a                	je     c0003322 <get_fileinfo+0x1a1>
c0003318:	83 c0 20             	add    eax,0x20
c000331b:	eb 05                	jmp    c0003322 <get_fileinfo+0x1a1>
c000331d:	bf 10 00 00 00       	mov    edi,0x10
c0003322:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003326:	42                   	inc    edx
c0003327:	eb c9                	jmp    c00032f2 <get_fileinfo+0x171>
c0003329:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000332e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003331:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003335:	75 04                	jne    c000333b <get_fileinfo+0x1ba>
c0003337:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000333b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000333e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003341:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003344:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003347:	83 c0 1c             	add    eax,0x1c
c000334a:	e8 49 ec ff ff       	call   c0001f98 <ld_dword>
c000334f:	89 03                	mov    DWORD PTR [ebx],eax
c0003351:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003354:	83 c0 16             	add    eax,0x16
c0003357:	e8 2f ec ff ff       	call   c0001f8b <ld_word>
c000335c:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003360:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003363:	83 c0 18             	add    eax,0x18
c0003366:	e8 20 ec ff ff       	call   c0001f8b <ld_word>
c000336b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000336f:	83 c4 1c             	add    esp,0x1c
c0003372:	5b                   	pop    ebx
c0003373:	5e                   	pop    esi
c0003374:	5f                   	pop    edi
c0003375:	5d                   	pop    ebp
c0003376:	c3                   	ret    

c0003377 <ld_clust.isra.0>:
c0003377:	56                   	push   esi
c0003378:	89 c6                	mov    esi,eax
c000337a:	53                   	push   ebx
c000337b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000337e:	89 d3                	mov    ebx,edx
c0003380:	e8 06 ec ff ff       	call   c0001f8b <ld_word>
c0003385:	0f b7 c8             	movzx  ecx,ax
c0003388:	89 f0                	mov    eax,esi
c000338a:	3c 03                	cmp    al,0x3
c000338c:	75 0d                	jne    c000339b <ld_clust.isra.0+0x24>
c000338e:	8d 43 14             	lea    eax,[ebx+0x14]
c0003391:	e8 f5 eb ff ff       	call   c0001f8b <ld_word>
c0003396:	c1 e0 10             	shl    eax,0x10
c0003399:	09 c1                	or     ecx,eax
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	c3                   	ret    

c00033a0 <st_clust.isra.1>:
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	89 d3                	mov    ebx,edx
c00033a6:	0f b7 d1             	movzx  edx,cx
c00033a9:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033ac:	e8 ff eb ff ff       	call   c0001fb0 <st_word>
c00033b1:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033b4:	75 0f                	jne    c00033c5 <st_clust.isra.1+0x25>
c00033b6:	c1 e9 10             	shr    ecx,0x10
c00033b9:	8d 43 14             	lea    eax,[ebx+0x14]
c00033bc:	89 ca                	mov    edx,ecx
c00033be:	5b                   	pop    ebx
c00033bf:	5e                   	pop    esi
c00033c0:	e9 eb eb ff ff       	jmp    c0001fb0 <st_word>
c00033c5:	5b                   	pop    ebx
c00033c6:	5e                   	pop    esi
c00033c7:	c3                   	ret    

c00033c8 <get_fat.isra.2>:
c00033c8:	b9 01 00 00 00       	mov    ecx,0x1
c00033cd:	83 fa 01             	cmp    edx,0x1
c00033d0:	0f 86 f3 00 00 00    	jbe    c00034c9 <get_fat.isra.2+0x101>
c00033d6:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00033d9:	0f 83 ea 00 00 00    	jae    c00034c9 <get_fat.isra.2+0x101>
c00033df:	55                   	push   ebp
c00033e0:	57                   	push   edi
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	56                   	push   esi
c00033e4:	89 d6                	mov    esi,edx
c00033e6:	53                   	push   ebx
c00033e7:	83 ec 0c             	sub    esp,0xc
c00033ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00033ed:	83 f8 02             	cmp    eax,0x2
c00033f0:	74 78                	je     c000346a <get_fat.isra.2+0xa2>
c00033f2:	83 f8 03             	cmp    eax,0x3
c00033f5:	0f 84 96 00 00 00    	je     c0003491 <get_fat.isra.2+0xc9>
c00033fb:	48                   	dec    eax
c00033fc:	0f 85 bd 00 00 00    	jne    c00034bf <get_fat.isra.2+0xf7>
c0003402:	89 d3                	mov    ebx,edx
c0003404:	89 f8                	mov    eax,edi
c0003406:	d1 eb                	shr    ebx,1
c0003408:	01 d3                	add    ebx,edx
c000340a:	89 da                	mov    edx,ebx
c000340c:	c1 ea 09             	shr    edx,0x9
c000340f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003412:	e8 db f0 ff ff       	call   c00024f2 <move_window>
c0003417:	85 c0                	test   eax,eax
c0003419:	74 08                	je     c0003423 <get_fat.isra.2+0x5b>
c000341b:	83 c9 ff             	or     ecx,0xffffffff
c000341e:	e9 9c 00 00 00       	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003423:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003426:	89 f8                	mov    eax,edi
c0003428:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000342e:	89 ea                	mov    edx,ebp
c0003430:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003434:	c1 ea 09             	shr    edx,0x9
c0003437:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000343a:	e8 b3 f0 ff ff       	call   c00024f2 <move_window>
c000343f:	85 c0                	test   eax,eax
c0003441:	75 d8                	jne    c000341b <get_fat.isra.2+0x53>
c0003443:	0f b6 c3             	movzx  eax,bl
c0003446:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000344c:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003451:	c1 e3 08             	shl    ebx,0x8
c0003454:	09 c3                	or     ebx,eax
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000345e:	83 e6 01             	and    esi,0x1
c0003461:	74 5c                	je     c00034bf <get_fat.isra.2+0xf7>
c0003463:	89 d9                	mov    ecx,ebx
c0003465:	c1 e9 04             	shr    ecx,0x4
c0003468:	eb 55                	jmp    c00034bf <get_fat.isra.2+0xf7>
c000346a:	c1 ea 08             	shr    edx,0x8
c000346d:	89 f8                	mov    eax,edi
c000346f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003472:	e8 7b f0 ff ff       	call   c00024f2 <move_window>
c0003477:	85 c0                	test   eax,eax
c0003479:	75 a0                	jne    c000341b <get_fat.isra.2+0x53>
c000347b:	01 f6                	add    esi,esi
c000347d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003483:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003487:	e8 ff ea ff ff       	call   c0001f8b <ld_word>
c000348c:	0f b7 c8             	movzx  ecx,ax
c000348f:	eb 2e                	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003491:	c1 ea 07             	shr    edx,0x7
c0003494:	89 f8                	mov    eax,edi
c0003496:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003499:	e8 54 f0 ff ff       	call   c00024f2 <move_window>
c000349e:	85 c0                	test   eax,eax
c00034a0:	0f 85 75 ff ff ff    	jne    c000341b <get_fat.isra.2+0x53>
c00034a6:	c1 e6 02             	shl    esi,0x2
c00034a9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034af:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034b3:	e8 e0 ea ff ff       	call   c0001f98 <ld_dword>
c00034b8:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034bd:	89 c1                	mov    ecx,eax
c00034bf:	83 c4 0c             	add    esp,0xc
c00034c2:	89 c8                	mov    eax,ecx
c00034c4:	5b                   	pop    ebx
c00034c5:	5e                   	pop    esi
c00034c6:	5f                   	pop    edi
c00034c7:	5d                   	pop    ebp
c00034c8:	c3                   	ret    
c00034c9:	89 c8                	mov    eax,ecx
c00034cb:	c3                   	ret    

c00034cc <dir_sdi>:
c00034cc:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00034d2:	0f 87 b6 00 00 00    	ja     c000358e <dir_sdi+0xc2>
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	89 d3                	mov    ebx,edx
c00034de:	83 ec 1c             	sub    esp,0x1c
c00034e1:	f6 c2 1f             	test   dl,0x1f
c00034e4:	74 0a                	je     c00034f0 <dir_sdi+0x24>
c00034e6:	b8 02 00 00 00       	mov    eax,0x2
c00034eb:	e9 96 00 00 00       	jmp    c0003586 <dir_sdi+0xba>
c00034f0:	89 c6                	mov    esi,eax
c00034f2:	8b 38                	mov    edi,DWORD PTR [eax]
c00034f4:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00034f7:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00034fa:	85 c9                	test   ecx,ecx
c00034fc:	75 23                	jne    c0003521 <dir_sdi+0x55>
c00034fe:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003501:	76 07                	jbe    c000350a <dir_sdi+0x3e>
c0003503:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003506:	85 c0                	test   eax,eax
c0003508:	75 15                	jne    c000351f <dir_sdi+0x53>
c000350a:	89 da                	mov    edx,ebx
c000350c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003510:	c1 ea 05             	shr    edx,0x5
c0003513:	39 c2                	cmp    edx,eax
c0003515:	73 cf                	jae    c00034e6 <dir_sdi+0x1a>
c0003517:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000351a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000351d:	eb 3d                	jmp    c000355c <dir_sdi+0x90>
c000351f:	89 c1                	mov    ecx,eax
c0003521:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003525:	c1 e5 09             	shl    ebp,0x9
c0003528:	89 ca                	mov    edx,ecx
c000352a:	39 eb                	cmp    ebx,ebp
c000352c:	72 1c                	jb     c000354a <dir_sdi+0x7e>
c000352e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003530:	e8 93 fe ff ff       	call   c00033c8 <get_fat.isra.2>
c0003535:	89 c1                	mov    ecx,eax
c0003537:	83 f8 ff             	cmp    eax,0xffffffff
c000353a:	74 45                	je     c0003581 <dir_sdi+0xb5>
c000353c:	83 f8 01             	cmp    eax,0x1
c000353f:	76 a5                	jbe    c00034e6 <dir_sdi+0x1a>
c0003541:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003544:	76 a0                	jbe    c00034e6 <dir_sdi+0x1a>
c0003546:	29 eb                	sub    ebx,ebp
c0003548:	eb de                	jmp    c0003528 <dir_sdi+0x5c>
c000354a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000354e:	89 f8                	mov    eax,edi
c0003550:	e8 8d ec ff ff       	call   c00021e2 <clst2sect>
c0003555:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003559:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000355c:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000355f:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003562:	85 d2                	test   edx,edx
c0003564:	74 80                	je     c00034e6 <dir_sdi+0x1a>
c0003566:	89 d8                	mov    eax,ebx
c0003568:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000356e:	c1 e8 09             	shr    eax,0x9
c0003571:	01 d0                	add    eax,edx
c0003573:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003576:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c000357a:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000357d:	31 c0                	xor    eax,eax
c000357f:	eb 05                	jmp    c0003586 <dir_sdi+0xba>
c0003581:	b8 01 00 00 00       	mov    eax,0x1
c0003586:	83 c4 1c             	add    esp,0x1c
c0003589:	5b                   	pop    ebx
c000358a:	5e                   	pop    esi
c000358b:	5f                   	pop    edi
c000358c:	5d                   	pop    ebp
c000358d:	c3                   	ret    
c000358e:	b8 02 00 00 00       	mov    eax,0x2
c0003593:	c3                   	ret    

c0003594 <create_chain>:
c0003594:	55                   	push   ebp
c0003595:	89 c5                	mov    ebp,eax
c0003597:	57                   	push   edi
c0003598:	89 d7                	mov    edi,edx
c000359a:	56                   	push   esi
c000359b:	53                   	push   ebx
c000359c:	83 ec 1c             	sub    esp,0x1c
c000359f:	85 d2                	test   edx,edx
c00035a1:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a3:	75 0e                	jne    c00035b3 <create_chain+0x1f>
c00035a5:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035a8:	85 c9                	test   ecx,ecx
c00035aa:	74 34                	je     c00035e0 <create_chain+0x4c>
c00035ac:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035af:	77 34                	ja     c00035e5 <create_chain+0x51>
c00035b1:	eb 2d                	jmp    c00035e0 <create_chain+0x4c>
c00035b3:	89 f0                	mov    eax,esi
c00035b5:	e8 0e fe ff ff       	call   c00033c8 <get_fat.isra.2>
c00035ba:	89 c3                	mov    ebx,eax
c00035bc:	83 f8 01             	cmp    eax,0x1
c00035bf:	77 0a                	ja     c00035cb <create_chain+0x37>
c00035c1:	bb 01 00 00 00       	mov    ebx,0x1
c00035c6:	e9 fe 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035cb:	83 f8 ff             	cmp    eax,0xffffffff
c00035ce:	0f 84 f2 00 00 00    	je     c00036c6 <create_chain+0x132>
c00035d4:	89 f9                	mov    ecx,edi
c00035d6:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c00035d9:	76 0a                	jbe    c00035e5 <create_chain+0x51>
c00035db:	e9 e9 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035e0:	b9 01 00 00 00       	mov    ecx,0x1
c00035e5:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c00035e9:	75 07                	jne    c00035f2 <create_chain+0x5e>
c00035eb:	31 db                	xor    ebx,ebx
c00035ed:	e9 d7 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035f2:	39 f9                	cmp    ecx,edi
c00035f4:	75 46                	jne    c000363c <create_chain+0xa8>
c00035f6:	8d 59 01             	lea    ebx,[ecx+0x1]
c00035f9:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00035fc:	77 05                	ja     c0003603 <create_chain+0x6f>
c00035fe:	bb 02 00 00 00       	mov    ebx,0x2
c0003603:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003607:	89 da                	mov    edx,ebx
c0003609:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000360c:	e8 b7 fd ff ff       	call   c00033c8 <get_fat.isra.2>
c0003611:	83 f8 01             	cmp    eax,0x1
c0003614:	74 ab                	je     c00035c1 <create_chain+0x2d>
c0003616:	83 f8 ff             	cmp    eax,0xffffffff
c0003619:	0f 84 a7 00 00 00    	je     c00036c6 <create_chain+0x132>
c000361f:	85 c0                	test   eax,eax
c0003621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003625:	74 11                	je     c0003638 <create_chain+0xa4>
c0003627:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000362a:	83 f8 01             	cmp    eax,0x1
c000362d:	76 0d                	jbe    c000363c <create_chain+0xa8>
c000362f:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003632:	73 08                	jae    c000363c <create_chain+0xa8>
c0003634:	89 c1                	mov    ecx,eax
c0003636:	eb 04                	jmp    c000363c <create_chain+0xa8>
c0003638:	85 db                	test   ebx,ebx
c000363a:	75 3d                	jne    c0003679 <create_chain+0xe5>
c000363c:	89 cb                	mov    ebx,ecx
c000363e:	43                   	inc    ebx
c000363f:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003642:	77 0a                	ja     c000364e <create_chain+0xba>
c0003644:	83 f9 01             	cmp    ecx,0x1
c0003647:	76 a2                	jbe    c00035eb <create_chain+0x57>
c0003649:	bb 02 00 00 00       	mov    ebx,0x2
c000364e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003652:	89 da                	mov    edx,ebx
c0003654:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003657:	e8 6c fd ff ff       	call   c00033c8 <get_fat.isra.2>
c000365c:	85 c0                	test   eax,eax
c000365e:	74 19                	je     c0003679 <create_chain+0xe5>
c0003660:	83 f8 01             	cmp    eax,0x1
c0003663:	0f 84 58 ff ff ff    	je     c00035c1 <create_chain+0x2d>
c0003669:	40                   	inc    eax
c000366a:	74 5a                	je     c00036c6 <create_chain+0x132>
c000366c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003670:	39 cb                	cmp    ebx,ecx
c0003672:	75 ca                	jne    c000363e <create_chain+0xaa>
c0003674:	e9 72 ff ff ff       	jmp    c00035eb <create_chain+0x57>
c0003679:	83 c9 ff             	or     ecx,0xffffffff
c000367c:	89 da                	mov    edx,ebx
c000367e:	89 f0                	mov    eax,esi
c0003680:	e8 b1 f2 ff ff       	call   c0002936 <put_fat>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 36                	jne    c00036bf <create_chain+0x12b>
c0003689:	85 ff                	test   edi,edi
c000368b:	75 16                	jne    c00036a3 <create_chain+0x10f>
c000368d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003690:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003693:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0003696:	8d 57 fe             	lea    edx,[edi-0x2]
c0003699:	39 d0                	cmp    eax,edx
c000369b:	77 17                	ja     c00036b4 <create_chain+0x120>
c000369d:	48                   	dec    eax
c000369e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036a1:	eb 11                	jmp    c00036b4 <create_chain+0x120>
c00036a3:	89 d9                	mov    ecx,ebx
c00036a5:	89 fa                	mov    edx,edi
c00036a7:	89 f0                	mov    eax,esi
c00036a9:	e8 88 f2 ff ff       	call   c0002936 <put_fat>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 db                	je     c000368d <create_chain+0xf9>
c00036b2:	eb 0b                	jmp    c00036bf <create_chain+0x12b>
c00036b4:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036b7:	83 c8 01             	or     eax,0x1
c00036ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036bd:	eb 0a                	jmp    c00036c9 <create_chain+0x135>
c00036bf:	48                   	dec    eax
c00036c0:	0f 85 fb fe ff ff    	jne    c00035c1 <create_chain+0x2d>
c00036c6:	83 cb ff             	or     ebx,0xffffffff
c00036c9:	83 c4 1c             	add    esp,0x1c
c00036cc:	89 d8                	mov    eax,ebx
c00036ce:	5b                   	pop    ebx
c00036cf:	5e                   	pop    esi
c00036d0:	5f                   	pop    edi
c00036d1:	5d                   	pop    ebp
c00036d2:	c3                   	ret    

c00036d3 <remove_chain>:
c00036d3:	55                   	push   ebp
c00036d4:	57                   	push   edi
c00036d5:	56                   	push   esi
c00036d6:	89 d6                	mov    esi,edx
c00036d8:	53                   	push   ebx
c00036d9:	83 ec 0c             	sub    esp,0xc
c00036dc:	83 fa 01             	cmp    edx,0x1
c00036df:	8b 18                	mov    ebx,DWORD PTR [eax]
c00036e1:	76 6a                	jbe    c000374d <remove_chain+0x7a>
c00036e3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00036e6:	76 65                	jbe    c000374d <remove_chain+0x7a>
c00036e8:	89 c5                	mov    ebp,eax
c00036ea:	89 ca                	mov    edx,ecx
c00036ec:	85 c9                	test   ecx,ecx
c00036ee:	74 0e                	je     c00036fe <remove_chain+0x2b>
c00036f0:	83 c9 ff             	or     ecx,0xffffffff
c00036f3:	89 d8                	mov    eax,ebx
c00036f5:	e8 3c f2 ff ff       	call   c0002936 <put_fat>
c00036fa:	85 c0                	test   eax,eax
c00036fc:	75 5b                	jne    c0003759 <remove_chain+0x86>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003703:	e8 c0 fc ff ff       	call   c00033c8 <get_fat.isra.2>
c0003708:	89 c7                	mov    edi,eax
c000370a:	85 c0                	test   eax,eax
c000370c:	75 04                	jne    c0003712 <remove_chain+0x3f>
c000370e:	31 c0                	xor    eax,eax
c0003710:	eb 47                	jmp    c0003759 <remove_chain+0x86>
c0003712:	83 f8 01             	cmp    eax,0x1
c0003715:	74 36                	je     c000374d <remove_chain+0x7a>
c0003717:	83 f8 ff             	cmp    eax,0xffffffff
c000371a:	74 38                	je     c0003754 <remove_chain+0x81>
c000371c:	31 c9                	xor    ecx,ecx
c000371e:	89 f2                	mov    edx,esi
c0003720:	89 d8                	mov    eax,ebx
c0003722:	e8 0f f2 ff ff       	call   c0002936 <put_fat>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 2e                	jne    c0003759 <remove_chain+0x86>
c000372b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000372e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003731:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003734:	39 c8                	cmp    eax,ecx
c0003736:	73 0d                	jae    c0003745 <remove_chain+0x72>
c0003738:	40                   	inc    eax
c0003739:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000373c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000373f:	83 c8 01             	or     eax,0x1
c0003742:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003745:	89 fe                	mov    esi,edi
c0003747:	39 fa                	cmp    edx,edi
c0003749:	77 b3                	ja     c00036fe <remove_chain+0x2b>
c000374b:	eb c1                	jmp    c000370e <remove_chain+0x3b>
c000374d:	b8 02 00 00 00       	mov    eax,0x2
c0003752:	eb 05                	jmp    c0003759 <remove_chain+0x86>
c0003754:	b8 01 00 00 00       	mov    eax,0x1
c0003759:	83 c4 0c             	add    esp,0xc
c000375c:	5b                   	pop    ebx
c000375d:	5e                   	pop    esi
c000375e:	5f                   	pop    edi
c000375f:	5d                   	pop    ebp
c0003760:	c3                   	ret    

c0003761 <dir_next>:
c0003761:	55                   	push   ebp
c0003762:	57                   	push   edi
c0003763:	56                   	push   esi
c0003764:	53                   	push   ebx
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000376b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376d:	83 c7 20             	add    edi,0x20
c0003770:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003776:	76 07                	jbe    c000377f <dir_next+0x1e>
c0003778:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000377f:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003782:	b9 04 00 00 00       	mov    ecx,0x4
c0003787:	85 f6                	test   esi,esi
c0003789:	0f 84 cd 00 00 00    	je     c000385c <dir_next+0xfb>
c000378f:	89 c3                	mov    ebx,eax
c0003791:	89 d1                	mov    ecx,edx
c0003793:	89 f8                	mov    eax,edi
c0003795:	25 ff 01 00 00       	and    eax,0x1ff
c000379a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000379e:	0f 85 a8 00 00 00    	jne    c000384c <dir_next+0xeb>
c00037a4:	46                   	inc    esi
c00037a5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037a8:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037ab:	85 d2                	test   edx,edx
c00037ad:	75 22                	jne    c00037d1 <dir_next+0x70>
c00037af:	89 fa                	mov    edx,edi
c00037b1:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b5:	c1 ea 05             	shr    edx,0x5
c00037b8:	39 c2                	cmp    edx,eax
c00037ba:	0f 82 8c 00 00 00    	jb     c000384c <dir_next+0xeb>
c00037c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037c7:	b9 04 00 00 00       	mov    ecx,0x4
c00037cc:	e9 8b 00 00 00       	jmp    c000385c <dir_next+0xfb>
c00037d1:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037d5:	89 fe                	mov    esi,edi
c00037d7:	48                   	dec    eax
c00037d8:	c1 ee 09             	shr    esi,0x9
c00037db:	85 f0                	test   eax,esi
c00037dd:	75 6d                	jne    c000384c <dir_next+0xeb>
c00037df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037e3:	89 e8                	mov    eax,ebp
c00037e5:	e8 de fb ff ff       	call   c00033c8 <get_fat.isra.2>
c00037ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037ee:	89 c6                	mov    esi,eax
c00037f0:	83 f8 01             	cmp    eax,0x1
c00037f3:	77 07                	ja     c00037fc <dir_next+0x9b>
c00037f5:	b9 02 00 00 00       	mov    ecx,0x2
c00037fa:	eb 60                	jmp    c000385c <dir_next+0xfb>
c00037fc:	83 f8 ff             	cmp    eax,0xffffffff
c00037ff:	75 07                	jne    c0003808 <dir_next+0xa7>
c0003801:	b9 01 00 00 00       	mov    ecx,0x1
c0003806:	eb 54                	jmp    c000385c <dir_next+0xfb>
c0003808:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000380b:	77 30                	ja     c000383d <dir_next+0xdc>
c000380d:	85 c9                	test   ecx,ecx
c000380f:	74 af                	je     c00037c0 <dir_next+0x5f>
c0003811:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 79 fd ff ff       	call   c0003594 <create_chain>
c000381b:	b9 07 00 00 00       	mov    ecx,0x7
c0003820:	89 c6                	mov    esi,eax
c0003822:	85 c0                	test   eax,eax
c0003824:	74 36                	je     c000385c <dir_next+0xfb>
c0003826:	83 f8 01             	cmp    eax,0x1
c0003829:	74 ca                	je     c00037f5 <dir_next+0x94>
c000382b:	83 f8 ff             	cmp    eax,0xffffffff
c000382e:	74 d1                	je     c0003801 <dir_next+0xa0>
c0003830:	89 c2                	mov    edx,eax
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 54 f2 ff ff       	call   c0002a8d <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c4                	jne    c0003801 <dir_next+0xa0>
c000383d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003840:	89 f2                	mov    edx,esi
c0003842:	89 e8                	mov    eax,ebp
c0003844:	e8 99 e9 ff ff       	call   c00021e2 <clst2sect>
c0003849:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000384c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003850:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003853:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003857:	31 c9                	xor    ecx,ecx
c0003859:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000385c:	83 c4 1c             	add    esp,0x1c
c000385f:	89 c8                	mov    eax,ecx
c0003861:	5b                   	pop    ebx
c0003862:	5e                   	pop    esi
c0003863:	5f                   	pop    edi
c0003864:	5d                   	pop    ebp
c0003865:	c3                   	ret    

c0003866 <dir_alloc>:
c0003866:	55                   	push   ebp
c0003867:	89 c5                	mov    ebp,eax
c0003869:	57                   	push   edi
c000386a:	89 d7                	mov    edi,edx
c000386c:	56                   	push   esi
c000386d:	31 d2                	xor    edx,edx
c000386f:	53                   	push   ebx
c0003870:	83 ec 0c             	sub    esp,0xc
c0003873:	8b 30                	mov    esi,DWORD PTR [eax]
c0003875:	e8 52 fc ff ff       	call   c00034cc <dir_sdi>
c000387a:	85 c0                	test   eax,eax
c000387c:	75 3b                	jne    c00038b9 <dir_alloc+0x53>
c000387e:	31 db                	xor    ebx,ebx
c0003880:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003883:	89 f0                	mov    eax,esi
c0003885:	e8 68 ec ff ff       	call   c00024f2 <move_window>
c000388a:	85 c0                	test   eax,eax
c000388c:	75 2b                	jne    c00038b9 <dir_alloc+0x53>
c000388e:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003891:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003894:	85 d2                	test   edx,edx
c0003896:	74 08                	je     c00038a0 <dir_alloc+0x3a>
c0003898:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000389e:	75 07                	jne    c00038a7 <dir_alloc+0x41>
c00038a0:	43                   	inc    ebx
c00038a1:	39 fb                	cmp    ebx,edi
c00038a3:	75 04                	jne    c00038a9 <dir_alloc+0x43>
c00038a5:	eb 1c                	jmp    c00038c3 <dir_alloc+0x5d>
c00038a7:	31 db                	xor    ebx,ebx
c00038a9:	ba 01 00 00 00       	mov    edx,0x1
c00038ae:	89 e8                	mov    eax,ebp
c00038b0:	e8 ac fe ff ff       	call   c0003761 <dir_next>
c00038b5:	85 c0                	test   eax,eax
c00038b7:	74 c7                	je     c0003880 <dir_alloc+0x1a>
c00038b9:	83 f8 04             	cmp    eax,0x4
c00038bc:	75 05                	jne    c00038c3 <dir_alloc+0x5d>
c00038be:	b8 07 00 00 00       	mov    eax,0x7
c00038c3:	83 c4 0c             	add    esp,0xc
c00038c6:	5b                   	pop    ebx
c00038c7:	5e                   	pop    esi
c00038c8:	5f                   	pop    edi
c00038c9:	5d                   	pop    ebp
c00038ca:	c3                   	ret    

c00038cb <dir_read>:
c00038cb:	55                   	push   ebp
c00038cc:	57                   	push   edi
c00038cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d2:	56                   	push   esi
c00038d3:	be 04 00 00 00       	mov    esi,0x4
c00038d8:	53                   	push   ebx
c00038d9:	89 c3                	mov    ebx,eax
c00038db:	83 ec 1c             	sub    esp,0x1c
c00038de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038e2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00038e4:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038ec:	85 d2                	test   edx,edx
c00038ee:	0f 84 e3 00 00 00    	je     c00039d7 <dir_read+0x10c>
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 f7 eb ff ff       	call   c00024f2 <move_window>
c00038fb:	89 c6                	mov    esi,eax
c00038fd:	85 c0                	test   eax,eax
c00038ff:	0f 85 dd 00 00 00    	jne    c00039e2 <dir_read+0x117>
c0003905:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003908:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000390b:	88 04 24             	mov    BYTE PTR [esp],al
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 84 c7 00 00 00    	je     c00039dd <dir_read+0x112>
c0003916:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003919:	83 e1 3f             	and    ecx,0x3f
c000391c:	83 f8 2e             	cmp    eax,0x2e
c000391f:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003922:	0f 84 95 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003928:	3d e5 00 00 00       	cmp    eax,0xe5
c000392d:	0f 84 8a 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003933:	0f b6 c9             	movzx  ecx,cl
c0003936:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000393a:	83 e1 df             	and    ecx,0xffffffdf
c000393d:	83 f9 08             	cmp    ecx,0x8
c0003940:	0f 94 c1             	sete   cl
c0003943:	0f b6 c9             	movzx  ecx,cl
c0003946:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000394a:	75 71                	jne    c00039bd <dir_read+0xf2>
c000394c:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003951:	75 4a                	jne    c000399d <dir_read+0xd2>
c0003953:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003957:	74 16                	je     c000396f <dir_read+0xa4>
c0003959:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000395c:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003963:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003967:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000396a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000396d:	eb 0e                	jmp    c000397d <dir_read+0xb2>
c000396f:	89 f9                	mov    ecx,edi
c0003971:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003976:	0f b6 c9             	movzx  ecx,cl
c0003979:	39 c1                	cmp    ecx,eax
c000397b:	75 45                	jne    c00039c2 <dir_read+0xf7>
c000397d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003981:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003986:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003989:	75 37                	jne    c00039c2 <dir_read+0xf7>
c000398b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000398e:	e8 6c e8 ff ff       	call   c00021ff <pick_lfn>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 2b                	je     c00039c2 <dir_read+0xf7>
c0003997:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000399a:	4f                   	dec    edi
c000399b:	eb 25                	jmp    c00039c2 <dir_read+0xf7>
c000399d:	89 f8                	mov    eax,edi
c000399f:	84 c0                	test   al,al
c00039a1:	75 11                	jne    c00039b4 <dir_read+0xe9>
c00039a3:	89 d0                	mov    eax,edx
c00039a5:	e8 32 ea ff ff       	call   c00023dc <sum_sfn>
c00039aa:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ae:	75 04                	jne    c00039b4 <dir_read+0xe9>
c00039b0:	31 f6                	xor    esi,esi
c00039b2:	eb 35                	jmp    c00039e9 <dir_read+0x11e>
c00039b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039bb:	eb 2c                	jmp    c00039e9 <dir_read+0x11e>
c00039bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c2:	31 d2                	xor    edx,edx
c00039c4:	89 d8                	mov    eax,ebx
c00039c6:	e8 96 fd ff ff       	call   c0003761 <dir_next>
c00039cb:	89 c6                	mov    esi,eax
c00039cd:	85 c0                	test   eax,eax
c00039cf:	0f 84 14 ff ff ff    	je     c00038e9 <dir_read+0x1e>
c00039d5:	eb 0b                	jmp    c00039e2 <dir_read+0x117>
c00039d7:	85 f6                	test   esi,esi
c00039d9:	74 d5                	je     c00039b0 <dir_read+0xe5>
c00039db:	eb 05                	jmp    c00039e2 <dir_read+0x117>
c00039dd:	be 04 00 00 00       	mov    esi,0x4
c00039e2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039e9:	83 c4 1c             	add    esp,0x1c
c00039ec:	89 f0                	mov    eax,esi
c00039ee:	5b                   	pop    ebx
c00039ef:	5e                   	pop    esi
c00039f0:	5f                   	pop    edi
c00039f1:	5d                   	pop    ebp
c00039f2:	c3                   	ret    

c00039f3 <dir_remove>:
c00039f3:	57                   	push   edi
c00039f4:	56                   	push   esi
c00039f5:	53                   	push   ebx
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00039fb:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fd:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a00:	83 fa ff             	cmp    edx,0xffffffff
c0003a03:	74 09                	je     c0003a0e <dir_remove+0x1b>
c0003a05:	e8 c2 fa ff ff       	call   c00034cc <dir_sdi>
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	75 34                	jne    c0003a42 <dir_remove+0x4f>
c0003a0e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a11:	89 f0                	mov    eax,esi
c0003a13:	e8 da ea ff ff       	call   c00024f2 <move_window>
c0003a18:	85 c0                	test   eax,eax
c0003a1a:	75 1c                	jne    c0003a38 <dir_remove+0x45>
c0003a1c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x4f>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 2d fd ff ff       	call   c0003761 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 d6                	je     c0003a0e <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x4f>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <dir_find>:
c0003a46:	55                   	push   ebp
c0003a47:	31 d2                	xor    edx,edx
c0003a49:	57                   	push   edi
c0003a4a:	56                   	push   esi
c0003a4b:	53                   	push   ebx
c0003a4c:	89 c3                	mov    ebx,eax
c0003a4e:	83 ec 1c             	sub    esp,0x1c
c0003a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a57:	89 d8                	mov    eax,ebx
c0003a59:	e8 6e fa ff ff       	call   c00034cc <dir_sdi>
c0003a5e:	89 c6                	mov    esi,eax
c0003a60:	85 c0                	test   eax,eax
c0003a62:	0f 85 1d 01 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a68:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a6f:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003a74:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a79:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a80:	e8 6d ea ff ff       	call   c00024f2 <move_window>
c0003a85:	89 c6                	mov    esi,eax
c0003a87:	85 c0                	test   eax,eax
c0003a89:	0f 85 f6 00 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a8f:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003a92:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003a96:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003a9a:	85 c9                	test   ecx,ecx
c0003a9c:	0f 84 de 00 00 00    	je     c0003b80 <dir_find+0x13a>
c0003aa2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003aa5:	89 d0                	mov    eax,edx
c0003aa7:	83 e0 3f             	and    eax,0x3f
c0003aaa:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ab0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ab3:	0f 84 a6 00 00 00    	je     c0003b5f <dir_find+0x119>
c0003ab9:	80 e2 08             	and    dl,0x8
c0003abc:	0f b6 c0             	movzx  eax,al
c0003abf:	74 0b                	je     c0003acc <dir_find+0x86>
c0003ac1:	83 f8 0f             	cmp    eax,0xf
c0003ac4:	0f 85 95 00 00 00    	jne    c0003b5f <dir_find+0x119>
c0003aca:	eb 05                	jmp    c0003ad1 <dir_find+0x8b>
c0003acc:	83 f8 0f             	cmp    eax,0xf
c0003acf:	75 62                	jne    c0003b33 <dir_find+0xed>
c0003ad1:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ad5:	0f 85 90 00 00 00    	jne    c0003b6b <dir_find+0x125>
c0003adb:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003ae0:	74 17                	je     c0003af9 <dir_find+0xb3>
c0003ae2:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ae5:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003aed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003af1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003af4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003af7:	eb 13                	jmp    c0003b0c <dir_find+0xc6>
c0003af9:	89 f8                	mov    eax,edi
c0003afb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b00:	0f b6 d0             	movzx  edx,al
c0003b03:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b08:	39 c2                	cmp    edx,eax
c0003b0a:	75 5f                	jne    c0003b6b <dir_find+0x125>
c0003b0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b10:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b15:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b18:	75 51                	jne    c0003b6b <dir_find+0x125>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	89 ea                	mov    edx,ebp
c0003b20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b23:	e8 37 f3 ff ff       	call   c0002e5f <cmp_lfn>
c0003b28:	85 c0                	test   eax,eax
c0003b2a:	74 3f                	je     c0003b6b <dir_find+0x125>
c0003b2c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b30:	4f                   	dec    edi
c0003b31:	eb 38                	jmp    c0003b6b <dir_find+0x125>
c0003b33:	89 f8                	mov    eax,edi
c0003b35:	84 c0                	test   al,al
c0003b37:	75 0d                	jne    c0003b46 <dir_find+0x100>
c0003b39:	89 e8                	mov    eax,ebp
c0003b3b:	e8 9c e8 ff ff       	call   c00023dc <sum_sfn>
c0003b40:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b44:	74 3f                	je     c0003b85 <dir_find+0x13f>
c0003b46:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b4a:	75 13                	jne    c0003b5f <dir_find+0x119>
c0003b4c:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b54:	89 e8                	mov    eax,ebp
c0003b56:	e8 7c e4 ff ff       	call   c0001fd7 <mem_cmp>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	74 26                	je     c0003b85 <dir_find+0x13f>
c0003b5f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b66:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b6b:	31 d2                	xor    edx,edx
c0003b6d:	89 d8                	mov    eax,ebx
c0003b6f:	e8 ed fb ff ff       	call   c0003761 <dir_next>
c0003b74:	89 c6                	mov    esi,eax
c0003b76:	85 c0                	test   eax,eax
c0003b78:	0f 84 fb fe ff ff    	je     c0003a79 <dir_find+0x33>
c0003b7e:	eb 05                	jmp    c0003b85 <dir_find+0x13f>
c0003b80:	be 04 00 00 00       	mov    esi,0x4
c0003b85:	83 c4 1c             	add    esp,0x1c
c0003b88:	89 f0                	mov    eax,esi
c0003b8a:	5b                   	pop    ebx
c0003b8b:	5e                   	pop    esi
c0003b8c:	5f                   	pop    edi
c0003b8d:	5d                   	pop    ebp
c0003b8e:	c3                   	ret    

c0003b8f <follow_path>:
c0003b8f:	56                   	push   esi
c0003b90:	53                   	push   ebx
c0003b91:	89 c3                	mov    ebx,eax
c0003b93:	83 ec 14             	sub    esp,0x14
c0003b96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003b9a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ba0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003ba3:	83 fa 5c             	cmp    edx,0x5c
c0003ba6:	75 07                	jne    c0003baf <follow_path+0x20>
c0003ba8:	40                   	inc    eax
c0003ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bad:	eb ed                	jmp    c0003b9c <follow_path+0xd>
c0003baf:	83 fa 2f             	cmp    edx,0x2f
c0003bb2:	74 f4                	je     c0003ba8 <follow_path+0x19>
c0003bb4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bbb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bbe:	77 3e                	ja     c0003bfe <follow_path+0x6f>
c0003bc0:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bc4:	31 d2                	xor    edx,edx
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 ff f8 ff ff       	call   c00034cc <dir_sdi>
c0003bcd:	eb 4f                	jmp    c0003c1e <follow_path+0x8f>
c0003bcf:	89 d8                	mov    eax,ebx
c0003bd1:	e8 70 fe ff ff       	call   c0003a46 <dir_find>
c0003bd6:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003bd9:	85 c0                	test   eax,eax
c0003bdb:	75 32                	jne    c0003c0f <follow_path+0x80>
c0003bdd:	80 e2 04             	and    dl,0x4
c0003be0:	75 3c                	jne    c0003c1e <follow_path+0x8f>
c0003be2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003be6:	74 31                	je     c0003c19 <follow_path+0x8a>
c0003be8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003beb:	25 ff 01 00 00       	and    eax,0x1ff
c0003bf0:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003bf4:	8a 06                	mov    al,BYTE PTR [esi]
c0003bf6:	e8 7c f7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003bfb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003bfe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c02:	89 d8                	mov    eax,ebx
c0003c04:	e8 7f ef ff ff       	call   c0002b88 <create_name>
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 c2                	je     c0003bcf <follow_path+0x40>
c0003c0d:	eb 0f                	jmp    c0003c1e <follow_path+0x8f>
c0003c0f:	83 f8 04             	cmp    eax,0x4
c0003c12:	75 0a                	jne    c0003c1e <follow_path+0x8f>
c0003c14:	80 e2 04             	and    dl,0x4
c0003c17:	75 05                	jne    c0003c1e <follow_path+0x8f>
c0003c19:	b8 05 00 00 00       	mov    eax,0x5
c0003c1e:	83 c4 14             	add    esp,0x14
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	c3                   	ret    

c0003c24 <dir_register>:
c0003c24:	55                   	push   ebp
c0003c25:	57                   	push   edi
c0003c26:	56                   	push   esi
c0003c27:	be 06 00 00 00       	mov    esi,0x6
c0003c2c:	53                   	push   ebx
c0003c2d:	83 ec 2c             	sub    esp,0x2c
c0003c30:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c33:	80 e2 a0             	and    dl,0xa0
c0003c36:	0f 85 66 01 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003c3c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c46:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c4d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c52:	74 06                	je     c0003c5a <dir_register+0x36>
c0003c54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c58:	eb ef                	jmp    c0003c49 <dir_register+0x25>
c0003c5a:	89 c3                	mov    ebx,eax
c0003c5c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c61:	8d 40 20             	lea    eax,[eax+0x20]
c0003c64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c68:	89 c2                	mov    edx,eax
c0003c6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003c6e:	e8 44 e3 ff ff       	call   c0001fb7 <mem_cpy>
c0003c73:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003c78:	74 48                	je     c0003cc2 <dir_register+0x9e>
c0003c7a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003c7e:	bd 01 00 00 00       	mov    ebp,0x1
c0003c83:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003c86:	55                   	push   ebp
c0003c87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c8f:	e8 86 e6 ff ff       	call   c000231a <gen_numname>
c0003c94:	58                   	pop    eax
c0003c95:	89 d8                	mov    eax,ebx
c0003c97:	e8 aa fd ff ff       	call   c0003a46 <dir_find>
c0003c9c:	89 c6                	mov    esi,eax
c0003c9e:	85 c0                	test   eax,eax
c0003ca0:	75 10                	jne    c0003cb2 <dir_register+0x8e>
c0003ca2:	45                   	inc    ebp
c0003ca3:	83 fd 64             	cmp    ebp,0x64
c0003ca6:	75 db                	jne    c0003c83 <dir_register+0x5f>
c0003ca8:	be 07 00 00 00       	mov    esi,0x7
c0003cad:	e9 f0 00 00 00       	jmp    c0003da2 <dir_register+0x17e>
c0003cb2:	83 f8 04             	cmp    eax,0x4
c0003cb5:	0f 85 e7 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cbb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cbf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cc2:	bd 01 00 00 00       	mov    ebp,0x1
c0003cc7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003ccc:	74 13                	je     c0003ce1 <dir_register+0xbd>
c0003cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cd2:	b9 0d 00 00 00       	mov    ecx,0xd
c0003cd7:	83 c0 0c             	add    eax,0xc
c0003cda:	31 d2                	xor    edx,edx
c0003cdc:	f7 f1                	div    ecx
c0003cde:	8d 68 01             	lea    ebp,[eax+0x1]
c0003ce1:	89 ea                	mov    edx,ebp
c0003ce3:	89 d8                	mov    eax,ebx
c0003ce5:	e8 7c fb ff ff       	call   c0003866 <dir_alloc>
c0003cea:	89 c6                	mov    esi,eax
c0003cec:	85 c0                	test   eax,eax
c0003cee:	0f 85 ae 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cf4:	4d                   	dec    ebp
c0003cf5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003cf9:	74 67                	je     c0003d62 <dir_register+0x13e>
c0003cfb:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003cfe:	89 e8                	mov    eax,ebp
c0003d00:	c1 e0 05             	shl    eax,0x5
c0003d03:	29 c2                	sub    edx,eax
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 c0 f7 ff ff       	call   c00034cc <dir_sdi>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 85 8c 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d1a:	e8 bd e6 ff ff       	call   c00023dc <sum_sfn>
c0003d1f:	0f b6 e8             	movzx  ebp,al
c0003d22:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d25:	89 f8                	mov    eax,edi
c0003d27:	e8 c6 e7 ff ff       	call   c00024f2 <move_window>
c0003d2c:	89 c6                	mov    esi,eax
c0003d2e:	85 c0                	test   eax,eax
c0003d30:	75 70                	jne    c0003da2 <dir_register+0x17e>
c0003d32:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d37:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d3a:	83 ec 0c             	sub    esp,0xc
c0003d3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d40:	55                   	push   ebp
c0003d41:	e8 39 e5 ff ff       	call   c000227f <put_lfn>
c0003d46:	31 d2                	xor    edx,edx
c0003d48:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d4c:	89 d8                	mov    eax,ebx
c0003d4e:	e8 0e fa ff ff       	call   c0003761 <dir_next>
c0003d53:	83 c4 10             	add    esp,0x10
c0003d56:	89 c6                	mov    esi,eax
c0003d58:	85 c0                	test   eax,eax
c0003d5a:	75 46                	jne    c0003da2 <dir_register+0x17e>
c0003d5c:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d60:	75 c0                	jne    c0003d22 <dir_register+0xfe>
c0003d62:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d65:	89 f8                	mov    eax,edi
c0003d67:	e8 86 e7 ff ff       	call   c00024f2 <move_window>
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	85 c0                	test   eax,eax
c0003d70:	75 30                	jne    c0003da2 <dir_register+0x17e>
c0003d72:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d75:	b9 20 00 00 00       	mov    ecx,0x20
c0003d7a:	31 d2                	xor    edx,edx
c0003d7c:	e8 4b e2 ff ff       	call   c0001fcc <mem_set>
c0003d81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d88:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d8d:	e8 25 e2 ff ff       	call   c0001fb7 <mem_cpy>
c0003d92:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003d95:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d98:	83 e0 18             	and    eax,0x18
c0003d9b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003d9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003da2:	83 c4 2c             	add    esp,0x2c
c0003da5:	89 f0                	mov    eax,esi
c0003da7:	5b                   	pop    ebx
c0003da8:	5e                   	pop    esi
c0003da9:	5f                   	pop    edi
c0003daa:	5d                   	pop    ebp
c0003dab:	c3                   	ret    

c0003dac <f_mount>:
c0003dac:	53                   	push   ebx
c0003dad:	83 ec 18             	sub    esp,0x18
c0003db0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003db4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003db8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003dc0:	e8 37 e6 ff ff       	call   c00023fc <get_ldnumber>
c0003dc5:	89 c2                	mov    edx,eax
c0003dc7:	b8 0b 00 00 00       	mov    eax,0xb
c0003dcc:	85 d2                	test   edx,edx
c0003dce:	78 39                	js     c0003e09 <f_mount+0x5d>
c0003dd0:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 03                	je     c0003dde <f_mount+0x32>
c0003ddb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003de2:	85 c0                	test   eax,eax
c0003de4:	74 03                	je     c0003de9 <f_mount+0x3d>
c0003de6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ded:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003df4:	31 c0                	xor    eax,eax
c0003df6:	84 db                	test   bl,bl
c0003df8:	74 0f                	je     c0003e09 <f_mount+0x5d>
c0003dfa:	31 c9                	xor    ecx,ecx
c0003dfc:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e04:	e8 3c e8 ff ff       	call   c0002645 <mount_volume>
c0003e09:	83 c4 18             	add    esp,0x18
c0003e0c:	5b                   	pop    ebx
c0003e0d:	c3                   	ret    

c0003e0e <f_open>:
c0003e0e:	55                   	push   ebp
c0003e0f:	b8 09 00 00 00       	mov    eax,0x9
c0003e14:	57                   	push   edi
c0003e15:	56                   	push   esi
c0003e16:	53                   	push   ebx
c0003e17:	83 ec 5c             	sub    esp,0x5c
c0003e1a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e1e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e22:	85 db                	test   ebx,ebx
c0003e24:	0f 84 9f 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e2a:	89 fd                	mov    ebp,edi
c0003e2c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e30:	83 e5 3f             	and    ebp,0x3f
c0003e33:	89 e8                	mov    eax,ebp
c0003e35:	89 ee                	mov    esi,ebp
c0003e37:	0f b6 c8             	movzx  ecx,al
c0003e3a:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e3e:	e8 02 e8 ff ff       	call   c0002645 <mount_volume>
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 78 02 00 00    	jne    c00040c3 <f_open+0x2b5>
c0003e4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e4f:	83 ec 0c             	sub    esp,0xc
c0003e52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e56:	68 00 02 00 00       	push   0x200
c0003e5b:	e8 74 1f 00 00       	call   c0005dd4 <ff_memalloc>
c0003e60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e64:	83 c4 10             	add    esp,0x10
c0003e67:	b8 11 00 00 00       	mov    eax,0x11
c0003e6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003e71:	0f 84 52 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e7f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003e83:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003e86:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e8a:	e8 00 fd ff ff       	call   c0003b8f <follow_path>
c0003e8f:	85 c0                	test   eax,eax
c0003e91:	75 0c                	jne    c0003e9f <f_open+0x91>
c0003e93:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003e98:	74 05                	je     c0003e9f <f_open+0x91>
c0003e9a:	b8 06 00 00 00       	mov    eax,0x6
c0003e9f:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ea5:	0f 84 d5 00 00 00    	je     c0003f80 <f_open+0x172>
c0003eab:	85 c0                	test   eax,eax
c0003ead:	74 21                	je     c0003ed0 <f_open+0xc2>
c0003eaf:	83 f8 04             	cmp    eax,0x4
c0003eb2:	0f 85 f0 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003eb8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebc:	e8 63 fd ff ff       	call   c0003c24 <dir_register>
c0003ec1:	85 c0                	test   eax,eax
c0003ec3:	0f 85 df 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ec9:	83 cd 08             	or     ebp,0x8
c0003ecc:	89 ee                	mov    esi,ebp
c0003ece:	eb 2c                	jmp    c0003efc <f_open+0xee>
c0003ed0:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ed4:	b8 07 00 00 00       	mov    eax,0x7
c0003ed9:	80 e2 11             	and    dl,0x11
c0003edc:	0f 85 c6 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ee2:	b8 08 00 00 00       	mov    eax,0x8
c0003ee7:	f7 c7 04 00 00 00    	test   edi,0x4
c0003eed:	0f 85 b5 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ef3:	83 e7 08             	and    edi,0x8
c0003ef6:	0f 84 b1 00 00 00    	je     c0003fad <f_open+0x19f>
c0003efc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f04:	89 ea                	mov    edx,ebp
c0003f06:	8a 00                	mov    al,BYTE PTR [eax]
c0003f08:	e8 6a f4 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003f0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f12:	89 c7                	mov    edi,eax
c0003f14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f17:	e8 98 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f20:	31 c9                	xor    ecx,ecx
c0003f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f2e:	e8 6d f4 ff ff       	call   c00033a0 <st_clust.isra.1>
c0003f33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f37:	31 d2                	xor    edx,edx
c0003f39:	83 c0 1c             	add    eax,0x1c
c0003f3c:	e8 73 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f45:	85 ff                	test   edi,edi
c0003f47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f4b:	74 60                	je     c0003fad <f_open+0x19f>
c0003f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f51:	31 c9                	xor    ecx,ecx
c0003f53:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f56:	89 fa                	mov    edx,edi
c0003f58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f5c:	e8 72 f7 ff ff       	call   c00036d3 <remove_chain>
c0003f61:	85 c0                	test   eax,eax
c0003f63:	0f 85 3f 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f69:	89 ea                	mov    edx,ebp
c0003f6b:	4f                   	dec    edi
c0003f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f70:	e8 7d e5 ff ff       	call   c00024f2 <move_window>
c0003f75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f79:	85 c0                	test   eax,eax
c0003f7b:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003f7e:	eb 27                	jmp    c0003fa7 <f_open+0x199>
c0003f80:	85 c0                	test   eax,eax
c0003f82:	0f 85 20 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f88:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f8c:	b8 04 00 00 00       	mov    eax,0x4
c0003f91:	f6 c2 10             	test   dl,0x10
c0003f94:	0f 85 0e 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f9a:	83 e7 02             	and    edi,0x2
c0003f9d:	74 0e                	je     c0003fad <f_open+0x19f>
c0003f9f:	b8 07 00 00 00       	mov    eax,0x7
c0003fa4:	80 e2 01             	and    dl,0x1
c0003fa7:	0f 85 fb 00 00 00    	jne    c00040a8 <f_open+0x29a>
c0003fad:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fb3:	74 03                	je     c0003fb8 <f_open+0x1aa>
c0003fb5:	83 ce 40             	or     esi,0x40
c0003fb8:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003fbc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003fc0:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003fc3:	89 fa                	mov    edx,edi
c0003fc5:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003fc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003fcb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003fce:	e8 a4 f3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003fd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003fd9:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003fdc:	e8 b7 df ff ff       	call   c0001f98 <ld_dword>
c0003fe1:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003fe3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003fe6:	31 d2                	xor    edx,edx
c0003fe8:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003fec:	b9 00 02 00 00       	mov    ecx,0x200
c0003ff1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003ff5:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003ff9:	89 f0                	mov    eax,esi
c0003ffb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004002:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004005:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000400c:	89 f8                	mov    eax,edi
c000400e:	e8 b9 df ff ff       	call   c0001fcc <mem_set>
c0004013:	83 e6 20             	and    esi,0x20
c0004016:	75 07                	jne    c000401f <f_open+0x211>
c0004018:	31 c0                	xor    eax,eax
c000401a:	e9 89 00 00 00       	jmp    c00040a8 <f_open+0x29a>
c000401f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004022:	85 ed                	test   ebp,ebp
c0004024:	74 f2                	je     c0004018 <f_open+0x20a>
c0004026:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0004029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000402d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004030:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004034:	c1 e6 09             	shl    esi,0x9
c0004037:	39 ee                	cmp    esi,ebp
c0004039:	73 1c                	jae    c0004057 <f_open+0x249>
c000403b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000403d:	29 f5                	sub    ebp,esi
c000403f:	e8 84 f3 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004044:	89 c2                	mov    edx,eax
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	76 10                	jbe    c000405b <f_open+0x24d>
c000404b:	83 f8 ff             	cmp    eax,0xffffffff
c000404e:	75 e7                	jne    c0004037 <f_open+0x229>
c0004050:	b8 01 00 00 00       	mov    eax,0x1
c0004055:	eb 09                	jmp    c0004060 <f_open+0x252>
c0004057:	31 c0                	xor    eax,eax
c0004059:	eb 05                	jmp    c0004060 <f_open+0x252>
c000405b:	b8 02 00 00 00       	mov    eax,0x2
c0004060:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004063:	85 c0                	test   eax,eax
c0004065:	75 41                	jne    c00040a8 <f_open+0x29a>
c0004067:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c000406d:	74 a9                	je     c0004018 <f_open+0x20a>
c000406f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004073:	89 f0                	mov    eax,esi
c0004075:	e8 68 e1 ff ff       	call   c00021e2 <clst2sect>
c000407a:	89 c2                	mov    edx,eax
c000407c:	b8 02 00 00 00       	mov    eax,0x2
c0004081:	85 d2                	test   edx,edx
c0004083:	74 23                	je     c00040a8 <f_open+0x29a>
c0004085:	c1 ed 09             	shr    ebp,0x9
c0004088:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c000408c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000408f:	6a 01                	push   0x1
c0004091:	50                   	push   eax
c0004092:	57                   	push   edi
c0004093:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0004097:	50                   	push   eax
c0004098:	e8 a3 de ff ff       	call   c0001f40 <disk_read>
c000409d:	83 c4 10             	add    esp,0x10
c00040a0:	85 c0                	test   eax,eax
c00040a2:	0f 95 c0             	setne  al
c00040a5:	0f b6 c0             	movzx  eax,al
c00040a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040ac:	83 ec 0c             	sub    esp,0xc
c00040af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040b3:	e8 34 1d 00 00       	call   c0005dec <ff_memfree>
c00040b8:	83 c4 10             	add    esp,0x10
c00040bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040bf:	85 c0                	test   eax,eax
c00040c1:	74 06                	je     c00040c9 <f_open+0x2bb>
c00040c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040c9:	83 c4 5c             	add    esp,0x5c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <f_read>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	53                   	push   ebx
c00040d5:	83 ec 2c             	sub    esp,0x2c
c00040d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040e6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040ee:	89 d8                	mov    eax,ebx
c00040f0:	e8 54 e3 ff ff       	call   c0002449 <validate>
c00040f5:	89 c5                	mov    ebp,eax
c00040f7:	85 c0                	test   eax,eax
c00040f9:	0f 85 c7 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c00040ff:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004103:	85 ed                	test   ebp,ebp
c0004105:	0f 85 bb 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c000410b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000410f:	0f 84 ac 01 00 00    	je     c00042c1 <f_read+0x1f0>
c0004115:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004118:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000411b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000411f:	39 f0                	cmp    eax,esi
c0004121:	0f 86 b0 00 00 00    	jbe    c00041d7 <f_read+0x106>
c0004127:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000412b:	e9 a7 00 00 00       	jmp    c00041d7 <f_read+0x106>
c0004130:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004133:	a9 ff 01 00 00       	test   eax,0x1ff
c0004138:	0f 85 56 01 00 00    	jne    c0004294 <f_read+0x1c3>
c000413e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004142:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0004146:	89 c2                	mov    edx,eax
c0004148:	4f                   	dec    edi
c0004149:	c1 ea 09             	shr    edx,0x9
c000414c:	21 d7                	and    edi,edx
c000414e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004152:	0f 84 8f 00 00 00    	je     c00041e7 <f_read+0x116>
c0004158:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000415c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415f:	89 c8                	mov    eax,ecx
c0004161:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004165:	e8 78 e0 ff ff       	call   c00021e2 <clst2sect>
c000416a:	85 c0                	test   eax,eax
c000416c:	0f 84 8d 00 00 00    	je     c00041ff <f_read+0x12e>
c0004172:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004176:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c000417e:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004181:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004185:	0f 86 bf 00 00 00    	jbe    c000424a <f_read+0x179>
c000418b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000418f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004193:	c1 ee 09             	shr    esi,0x9
c0004196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000419a:	01 f2                	add    edx,esi
c000419c:	39 c2                	cmp    edx,eax
c000419e:	76 06                	jbe    c00041a6 <f_read+0xd5>
c00041a0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041a4:	89 c6                	mov    esi,eax
c00041a6:	56                   	push   esi
c00041a7:	57                   	push   edi
c00041a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041b0:	50                   	push   eax
c00041b1:	e8 8a dd ff ff       	call   c0001f40 <disk_read>
c00041b6:	83 c4 10             	add    esp,0x10
c00041b9:	85 c0                	test   eax,eax
c00041bb:	75 55                	jne    c0004212 <f_read+0x141>
c00041bd:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041c1:	75 65                	jne    c0004228 <f_read+0x157>
c00041c3:	c1 e6 09             	shl    esi,0x9
c00041c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ca:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00041ce:	01 30                	add    DWORD PTR [eax],esi
c00041d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041d4:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00041d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00041dc:	0f 85 4e ff ff ff    	jne    c0004130 <f_read+0x5f>
c00041e2:	e9 df 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c00041e7:	85 c0                	test   eax,eax
c00041e9:	75 05                	jne    c00041f0 <f_read+0x11f>
c00041eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ee:	eb 0a                	jmp    c00041fa <f_read+0x129>
c00041f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041f5:	e8 ce f1 ff ff       	call   c00033c8 <get_fat.isra.2>
c00041fa:	83 f8 01             	cmp    eax,0x1
c00041fd:	77 0e                	ja     c000420d <f_read+0x13c>
c00041ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004203:	bd 02 00 00 00       	mov    ebp,0x2
c0004208:	e9 b9 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c000420d:	83 f8 ff             	cmp    eax,0xffffffff
c0004210:	75 0e                	jne    c0004220 <f_read+0x14f>
c0004212:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004216:	bd 01 00 00 00       	mov    ebp,0x1
c000421b:	e9 a6 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c0004220:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004223:	e9 30 ff ff ff       	jmp    c0004158 <f_read+0x87>
c0004228:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000422b:	29 f8                	sub    eax,edi
c000422d:	39 f0                	cmp    eax,esi
c000422f:	73 92                	jae    c00041c3 <f_read+0xf2>
c0004231:	c1 e0 09             	shl    eax,0x9
c0004234:	8d 53 28             	lea    edx,[ebx+0x28]
c0004237:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000423b:	b9 00 02 00 00       	mov    ecx,0x200
c0004240:	e8 72 dd ff ff       	call   c0001fb7 <mem_cpy>
c0004245:	e9 79 ff ff ff       	jmp    c00041c3 <f_read+0xf2>
c000424a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000424d:	39 f8                	cmp    eax,edi
c000424f:	74 40                	je     c0004291 <f_read+0x1c0>
c0004251:	8d 73 28             	lea    esi,[ebx+0x28]
c0004254:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004258:	74 1e                	je     c0004278 <f_read+0x1a7>
c000425a:	6a 01                	push   0x1
c000425c:	50                   	push   eax
c000425d:	56                   	push   esi
c000425e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004262:	50                   	push   eax
c0004263:	e8 ee dc ff ff       	call   c0001f56 <disk_write>
c0004268:	83 c4 10             	add    esp,0x10
c000426b:	85 c0                	test   eax,eax
c000426d:	75 a3                	jne    c0004212 <f_read+0x141>
c000426f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004272:	83 e0 7f             	and    eax,0x7f
c0004275:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004278:	6a 01                	push   0x1
c000427a:	57                   	push   edi
c000427b:	56                   	push   esi
c000427c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004280:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004284:	50                   	push   eax
c0004285:	e8 b6 dc ff ff       	call   c0001f40 <disk_read>
c000428a:	83 c4 10             	add    esp,0x10
c000428d:	85 c0                	test   eax,eax
c000428f:	75 81                	jne    c0004212 <f_read+0x141>
c0004291:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004294:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004297:	ba 00 02 00 00       	mov    edx,0x200
c000429c:	25 ff 01 00 00       	and    eax,0x1ff
c00042a1:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042a5:	29 c2                	sub    edx,eax
c00042a7:	39 d6                	cmp    esi,edx
c00042a9:	76 02                	jbe    c00042ad <f_read+0x1dc>
c00042ab:	89 d6                	mov    esi,edx
c00042ad:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042b1:	89 f1                	mov    ecx,esi
c00042b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042b7:	e8 fb dc ff ff       	call   c0001fb7 <mem_cpy>
c00042bc:	e9 05 ff ff ff       	jmp    c00041c6 <f_read+0xf5>
c00042c1:	bd 07 00 00 00       	mov    ebp,0x7
c00042c6:	83 c4 2c             	add    esp,0x2c
c00042c9:	89 e8                	mov    eax,ebp
c00042cb:	5b                   	pop    ebx
c00042cc:	5e                   	pop    esi
c00042cd:	5f                   	pop    edi
c00042ce:	5d                   	pop    ebp
c00042cf:	c3                   	ret    

c00042d0 <f_write>:
c00042d0:	55                   	push   ebp
c00042d1:	57                   	push   edi
c00042d2:	56                   	push   esi
c00042d3:	53                   	push   ebx
c00042d4:	83 ec 2c             	sub    esp,0x2c
c00042d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042e5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 59 e1 ff ff       	call   c0002449 <validate>
c00042f0:	89 c5                	mov    ebp,eax
c00042f2:	85 c0                	test   eax,eax
c00042f4:	0f 85 14 02 00 00    	jne    c000450e <f_write+0x23e>
c00042fa:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00042fe:	85 ed                	test   ebp,ebp
c0004300:	0f 85 08 02 00 00    	jne    c000450e <f_write+0x23e>
c0004306:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000430a:	0f 84 f9 01 00 00    	je     c0004509 <f_write+0x239>
c0004310:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004313:	89 c7                	mov    edi,eax
c0004315:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004319:	0f 83 ef 00 00 00    	jae    c000440e <f_write+0x13e>
c000431f:	f7 d0                	not    eax
c0004321:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004325:	e9 e4 00 00 00       	jmp    c000440e <f_write+0x13e>
c000432a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000432d:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004333:	0f 85 9a 01 00 00    	jne    c00044d3 <f_write+0x203>
c0004339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000433d:	89 d1                	mov    ecx,edx
c000433f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004343:	c1 e9 09             	shr    ecx,0x9
c0004346:	48                   	dec    eax
c0004347:	21 c8                	and    eax,ecx
c0004349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000434d:	0f 84 c8 00 00 00    	je     c000441b <f_write+0x14b>
c0004353:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004357:	0f 85 22 01 00 00    	jne    c000447f <f_write+0x1af>
c000435d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004361:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004364:	89 c8                	mov    eax,ecx
c0004366:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000436a:	e8 73 de ff ff       	call   c00021e2 <clst2sect>
c000436f:	85 c0                	test   eax,eax
c0004371:	0f 84 d2 00 00 00    	je     c0004449 <f_write+0x179>
c0004377:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000437b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000437f:	01 c7                	add    edi,eax
c0004381:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004389:	0f 86 1c 01 00 00    	jbe    c00044ab <f_write+0x1db>
c000438f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004393:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004397:	c1 ee 09             	shr    esi,0x9
c000439a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000439e:	01 f2                	add    edx,esi
c00043a0:	39 c2                	cmp    edx,eax
c00043a2:	76 06                	jbe    c00043aa <f_write+0xda>
c00043a4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043a8:	89 c6                	mov    esi,eax
c00043aa:	56                   	push   esi
c00043ab:	57                   	push   edi
c00043ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b4:	50                   	push   eax
c00043b5:	e8 9c db ff ff       	call   c0001f56 <disk_write>
c00043ba:	83 c4 10             	add    esp,0x10
c00043bd:	85 c0                	test   eax,eax
c00043bf:	0f 85 97 00 00 00    	jne    c000445c <f_write+0x18c>
c00043c5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043c8:	29 fa                	sub    edx,edi
c00043ca:	39 f2                	cmp    edx,esi
c00043cc:	73 1d                	jae    c00043eb <f_write+0x11b>
c00043ce:	8d 43 28             	lea    eax,[ebx+0x28]
c00043d1:	c1 e2 09             	shl    edx,0x9
c00043d4:	b9 00 02 00 00       	mov    ecx,0x200
c00043d9:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00043dd:	e8 d5 db ff ff       	call   c0001fb7 <mem_cpy>
c00043e2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e5:	83 e0 7f             	and    eax,0x7f
c00043e8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043eb:	c1 e6 09             	shl    esi,0x9
c00043ee:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00043f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00043f6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00043fa:	01 30                	add    DWORD PTR [eax],esi
c00043fc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00043ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004402:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004405:	39 f0                	cmp    eax,esi
c0004407:	73 02                	jae    c000440b <f_write+0x13b>
c0004409:	89 f0                	mov    eax,esi
c000440b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000440e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004413:	0f 85 11 ff ff ff    	jne    c000432a <f_write+0x5a>
c0004419:	eb 1b                	jmp    c0004436 <f_write+0x166>
c000441b:	85 d2                	test   edx,edx
c000441d:	75 09                	jne    c0004428 <f_write+0x158>
c000441f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004422:	85 c0                	test   eax,eax
c0004424:	75 1e                	jne    c0004444 <f_write+0x174>
c0004426:	eb 03                	jmp    c000442b <f_write+0x15b>
c0004428:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000442b:	89 d8                	mov    eax,ebx
c000442d:	e8 62 f1 ff ff       	call   c0003594 <create_chain>
c0004432:	85 c0                	test   eax,eax
c0004434:	75 0e                	jne    c0004444 <f_write+0x174>
c0004436:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004439:	83 c8 40             	or     eax,0x40
c000443c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000443f:	e9 ca 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004444:	83 f8 01             	cmp    eax,0x1
c0004447:	75 0e                	jne    c0004457 <f_write+0x187>
c0004449:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000444d:	bd 02 00 00 00       	mov    ebp,0x2
c0004452:	e9 b7 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004457:	83 f8 ff             	cmp    eax,0xffffffff
c000445a:	75 0e                	jne    c000446a <f_write+0x19a>
c000445c:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004460:	bd 01 00 00 00       	mov    ebp,0x1
c0004465:	e9 a4 00 00 00       	jmp    c000450e <f_write+0x23e>
c000446a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000446d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004471:	0f 85 dc fe ff ff    	jne    c0004353 <f_write+0x83>
c0004477:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000447a:	e9 d4 fe ff ff       	jmp    c0004353 <f_write+0x83>
c000447f:	6a 01                	push   0x1
c0004481:	8d 43 28             	lea    eax,[ebx+0x28]
c0004484:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004487:	50                   	push   eax
c0004488:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000448c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004490:	50                   	push   eax
c0004491:	e8 c0 da ff ff       	call   c0001f56 <disk_write>
c0004496:	83 c4 10             	add    esp,0x10
c0004499:	85 c0                	test   eax,eax
c000449b:	75 bf                	jne    c000445c <f_write+0x18c>
c000449d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044a0:	83 e0 7f             	and    eax,0x7f
c00044a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044a6:	e9 b2 fe ff ff       	jmp    c000435d <f_write+0x8d>
c00044ab:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044ae:	74 20                	je     c00044d0 <f_write+0x200>
c00044b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044b3:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044b6:	76 18                	jbe    c00044d0 <f_write+0x200>
c00044b8:	6a 01                	push   0x1
c00044ba:	8d 43 28             	lea    eax,[ebx+0x28]
c00044bd:	57                   	push   edi
c00044be:	50                   	push   eax
c00044bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044c3:	50                   	push   eax
c00044c4:	e8 77 da ff ff       	call   c0001f40 <disk_read>
c00044c9:	83 c4 10             	add    esp,0x10
c00044cc:	85 c0                	test   eax,eax
c00044ce:	75 8c                	jne    c000445c <f_write+0x18c>
c00044d0:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00044d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044d6:	ba 00 02 00 00       	mov    edx,0x200
c00044db:	25 ff 01 00 00       	and    eax,0x1ff
c00044e0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00044e4:	29 c2                	sub    edx,eax
c00044e6:	39 d6                	cmp    esi,edx
c00044e8:	76 02                	jbe    c00044ec <f_write+0x21c>
c00044ea:	89 d6                	mov    esi,edx
c00044ec:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00044f0:	89 f1                	mov    ecx,esi
c00044f2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00044f6:	e8 bc da ff ff       	call   c0001fb7 <mem_cpy>
c00044fb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044fe:	83 c8 80             	or     eax,0xffffff80
c0004501:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004504:	e9 e5 fe ff ff       	jmp    c00043ee <f_write+0x11e>
c0004509:	bd 07 00 00 00       	mov    ebp,0x7
c000450e:	83 c4 2c             	add    esp,0x2c
c0004511:	89 e8                	mov    eax,ebp
c0004513:	5b                   	pop    ebx
c0004514:	5e                   	pop    esi
c0004515:	5f                   	pop    edi
c0004516:	5d                   	pop    ebp
c0004517:	c3                   	ret    

c0004518 <f_sync>:
c0004518:	56                   	push   esi
c0004519:	53                   	push   ebx
c000451a:	83 ec 14             	sub    esp,0x14
c000451d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004521:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004525:	89 d8                	mov    eax,ebx
c0004527:	e8 1d df ff ff       	call   c0002449 <validate>
c000452c:	85 c0                	test   eax,eax
c000452e:	0f 85 a3 00 00 00    	jne    c00045d7 <f_sync+0xbf>
c0004534:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004537:	f6 c2 40             	test   dl,0x40
c000453a:	0f 84 97 00 00 00    	je     c00045d7 <f_sync+0xbf>
c0004540:	80 e2 80             	and    dl,0x80
c0004543:	74 2e                	je     c0004573 <f_sync+0x5b>
c0004545:	6a 01                	push   0x1
c0004547:	8d 43 28             	lea    eax,[ebx+0x28]
c000454a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000454d:	50                   	push   eax
c000454e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004552:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004556:	50                   	push   eax
c0004557:	e8 fa d9 ff ff       	call   c0001f56 <disk_write>
c000455c:	83 c4 10             	add    esp,0x10
c000455f:	89 c2                	mov    edx,eax
c0004561:	b8 01 00 00 00       	mov    eax,0x1
c0004566:	85 d2                	test   edx,edx
c0004568:	75 6d                	jne    c00045d7 <f_sync+0xbf>
c000456a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000456d:	83 e0 7f             	and    eax,0x7f
c0004570:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004573:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000457a:	e8 73 df ff ff       	call   c00024f2 <move_window>
c000457f:	85 c0                	test   eax,eax
c0004581:	75 54                	jne    c00045d7 <f_sync+0xbf>
c0004583:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004586:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004589:	89 f2                	mov    edx,esi
c000458b:	83 c8 20             	or     eax,0x20
c000458e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004591:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004596:	e8 05 ee ff ff       	call   c00033a0 <st_clust.isra.1>
c000459b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000459e:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045a1:	e8 0e da ff ff       	call   c0001fb4 <st_dword>
c00045a6:	8d 46 16             	lea    eax,[esi+0x16]
c00045a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00045ae:	e8 01 da ff ff       	call   c0001fb4 <st_dword>
c00045b3:	31 d2                	xor    edx,edx
c00045b5:	8d 46 12             	lea    eax,[esi+0x12]
c00045b8:	e8 f3 d9 ff ff       	call   c0001fb0 <st_word>
c00045bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c9:	e8 5b e9 ff ff       	call   c0002f29 <sync_fs>
c00045ce:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045d1:	83 e2 bf             	and    edx,0xffffffbf
c00045d4:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045d7:	83 c4 14             	add    esp,0x14
c00045da:	5b                   	pop    ebx
c00045db:	5e                   	pop    esi
c00045dc:	c3                   	ret    

c00045dd <f_close>:
c00045dd:	53                   	push   ebx
c00045de:	83 ec 24             	sub    esp,0x24
c00045e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00045e5:	53                   	push   ebx
c00045e6:	e8 2d ff ff ff       	call   c0004518 <f_sync>
c00045eb:	83 c4 10             	add    esp,0x10
c00045ee:	85 c0                	test   eax,eax
c00045f0:	75 15                	jne    c0004607 <f_close+0x2a>
c00045f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045f6:	89 d8                	mov    eax,ebx
c00045f8:	e8 4c de ff ff       	call   c0002449 <validate>
c00045fd:	85 c0                	test   eax,eax
c00045ff:	75 06                	jne    c0004607 <f_close+0x2a>
c0004601:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004607:	83 c4 18             	add    esp,0x18
c000460a:	5b                   	pop    ebx
c000460b:	c3                   	ret    

c000460c <f_lseek>:
c000460c:	55                   	push   ebp
c000460d:	57                   	push   edi
c000460e:	56                   	push   esi
c000460f:	53                   	push   ebx
c0004610:	83 ec 2c             	sub    esp,0x2c
c0004613:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004617:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000461b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000461f:	89 d8                	mov    eax,ebx
c0004621:	e8 23 de ff ff       	call   c0002449 <validate>
c0004626:	89 c5                	mov    ebp,eax
c0004628:	85 c0                	test   eax,eax
c000462a:	0f 85 83 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c0004630:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004634:	85 ed                	test   ebp,ebp
c0004636:	0f 85 77 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c000463c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000463f:	39 f0                	cmp    eax,esi
c0004641:	73 08                	jae    c000464b <f_lseek+0x3f>
c0004643:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004647:	75 02                	jne    c000464b <f_lseek+0x3f>
c0004649:	89 c6                	mov    esi,eax
c000464b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000464e:	85 f6                	test   esi,esi
c0004650:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004657:	75 07                	jne    c0004660 <f_lseek+0x54>
c0004659:	31 f6                	xor    esi,esi
c000465b:	e9 e2 00 00 00       	jmp    c0004742 <f_lseek+0x136>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004668:	c1 e7 09             	shl    edi,0x9
c000466b:	85 c9                	test   ecx,ecx
c000466d:	74 28                	je     c0004697 <f_lseek+0x8b>
c000466f:	49                   	dec    ecx
c0004670:	31 d2                	xor    edx,edx
c0004672:	8d 46 ff             	lea    eax,[esi-0x1]
c0004675:	f7 f7                	div    edi
c0004677:	31 d2                	xor    edx,edx
c0004679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000467d:	89 c8                	mov    eax,ecx
c000467f:	f7 f7                	div    edi
c0004681:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004685:	72 10                	jb     c0004697 <f_lseek+0x8b>
c0004687:	89 f8                	mov    eax,edi
c0004689:	f7 d8                	neg    eax
c000468b:	21 c1                	and    ecx,eax
c000468d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004690:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004693:	29 ce                	sub    esi,ecx
c0004695:	eb 3c                	jmp    c00046d3 <f_lseek+0xc7>
c0004697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000469a:	85 c0                	test   eax,eax
c000469c:	75 32                	jne    c00046d0 <f_lseek+0xc4>
c000469e:	31 d2                	xor    edx,edx
c00046a0:	89 d8                	mov    eax,ebx
c00046a2:	e8 ed ee ff ff       	call   c0003594 <create_chain>
c00046a7:	83 f8 01             	cmp    eax,0x1
c00046aa:	75 0e                	jne    c00046ba <f_lseek+0xae>
c00046ac:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046b0:	bd 02 00 00 00       	mov    ebp,0x2
c00046b5:	e9 f9 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046ba:	83 f8 ff             	cmp    eax,0xffffffff
c00046bd:	75 0e                	jne    c00046cd <f_lseek+0xc1>
c00046bf:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046c3:	bd 01 00 00 00       	mov    ebp,0x1
c00046c8:	e9 e6 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046d0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00046d3:	85 c0                	test   eax,eax
c00046d5:	74 82                	je     c0004659 <f_lseek+0x4d>
c00046d7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00046da:	39 fe                	cmp    esi,edi
c00046dc:	76 3d                	jbe    c000471b <f_lseek+0x10f>
c00046de:	01 fa                	add    edx,edi
c00046e0:	29 fe                	sub    esi,edi
c00046e2:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00046e5:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00046e9:	89 c2                	mov    edx,eax
c00046eb:	74 0d                	je     c00046fa <f_lseek+0xee>
c00046ed:	89 d8                	mov    eax,ebx
c00046ef:	e8 a0 ee ff ff       	call   c0003594 <create_chain>
c00046f4:	85 c0                	test   eax,eax
c00046f6:	75 09                	jne    c0004701 <f_lseek+0xf5>
c00046f8:	eb 1f                	jmp    c0004719 <f_lseek+0x10d>
c00046fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00046fc:	e8 c7 ec ff ff       	call   c00033c8 <get_fat.isra.2>
c0004701:	83 f8 ff             	cmp    eax,0xffffffff
c0004704:	74 b9                	je     c00046bf <f_lseek+0xb3>
c0004706:	83 f8 01             	cmp    eax,0x1
c0004709:	76 a1                	jbe    c00046ac <f_lseek+0xa0>
c000470b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000470f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004712:	76 98                	jbe    c00046ac <f_lseek+0xa0>
c0004714:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004717:	eb be                	jmp    c00046d7 <f_lseek+0xcb>
c0004719:	31 f6                	xor    esi,esi
c000471b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000471e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004724:	0f 84 2f ff ff ff    	je     c0004659 <f_lseek+0x4d>
c000472a:	89 c2                	mov    edx,eax
c000472c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004730:	e8 ad da ff ff       	call   c00021e2 <clst2sect>
c0004735:	85 c0                	test   eax,eax
c0004737:	0f 84 6f ff ff ff    	je     c00046ac <f_lseek+0xa0>
c000473d:	c1 ee 09             	shr    esi,0x9
c0004740:	01 c6                	add    esi,eax
c0004742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004745:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004748:	76 0c                	jbe    c0004756 <f_lseek+0x14a>
c000474a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000474d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004750:	83 ca 40             	or     edx,0x40
c0004753:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004756:	a9 ff 01 00 00       	test   eax,0x1ff
c000475b:	74 56                	je     c00047b3 <f_lseek+0x1a7>
c000475d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004760:	39 f0                	cmp    eax,esi
c0004762:	74 4f                	je     c00047b3 <f_lseek+0x1a7>
c0004764:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004767:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000476b:	74 26                	je     c0004793 <f_lseek+0x187>
c000476d:	6a 01                	push   0x1
c000476f:	50                   	push   eax
c0004770:	57                   	push   edi
c0004771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004775:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004779:	50                   	push   eax
c000477a:	e8 d7 d7 ff ff       	call   c0001f56 <disk_write>
c000477f:	83 c4 10             	add    esp,0x10
c0004782:	85 c0                	test   eax,eax
c0004784:	0f 85 35 ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c000478a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000478d:	83 e0 7f             	and    eax,0x7f
c0004790:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004793:	6a 01                	push   0x1
c0004795:	56                   	push   esi
c0004796:	57                   	push   edi
c0004797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000479b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000479f:	50                   	push   eax
c00047a0:	e8 9b d7 ff ff       	call   c0001f40 <disk_read>
c00047a5:	83 c4 10             	add    esp,0x10
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 0f ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c00047b0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047b3:	83 c4 2c             	add    esp,0x2c
c00047b6:	89 e8                	mov    eax,ebp
c00047b8:	5b                   	pop    ebx
c00047b9:	5e                   	pop    esi
c00047ba:	5f                   	pop    edi
c00047bb:	5d                   	pop    ebp
c00047bc:	c3                   	ret    

c00047bd <f_opendir>:
c00047bd:	56                   	push   esi
c00047be:	b8 09 00 00 00       	mov    eax,0x9
c00047c3:	53                   	push   ebx
c00047c4:	83 ec 24             	sub    esp,0x24
c00047c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047cb:	85 db                	test   ebx,ebx
c00047cd:	0f 84 af 00 00 00    	je     c0004882 <f_opendir+0xc5>
c00047d3:	31 c9                	xor    ecx,ecx
c00047d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00047dd:	e8 63 de ff ff       	call   c0002645 <mount_volume>
c00047e2:	85 c0                	test   eax,eax
c00047e4:	0f 85 92 00 00 00    	jne    c000487c <f_opendir+0xbf>
c00047ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047ee:	83 ec 0c             	sub    esp,0xc
c00047f1:	89 03                	mov    DWORD PTR [ebx],eax
c00047f3:	68 00 02 00 00       	push   0x200
c00047f8:	e8 d7 15 00 00       	call   c0005dd4 <ff_memalloc>
c00047fd:	83 c4 10             	add    esp,0x10
c0004800:	89 c6                	mov    esi,eax
c0004802:	b8 11 00 00 00       	mov    eax,0x11
c0004807:	85 f6                	test   esi,esi
c0004809:	74 77                	je     c0004882 <f_opendir+0xc5>
c000480b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000480f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004813:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004816:	89 d8                	mov    eax,ebx
c0004818:	e8 72 f3 ff ff       	call   c0003b8f <follow_path>
c000481d:	85 c0                	test   eax,eax
c000481f:	75 37                	jne    c0004858 <f_opendir+0x9b>
c0004821:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004825:	75 1c                	jne    c0004843 <f_opendir+0x86>
c0004827:	b8 05 00 00 00       	mov    eax,0x5
c000482c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004830:	74 26                	je     c0004858 <f_opendir+0x9b>
c0004832:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	8a 00                	mov    al,BYTE PTR [eax]
c000483b:	e8 37 eb ff ff       	call   c0003377 <ld_clust.isra.0>
c0004840:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004843:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004847:	31 d2                	xor    edx,edx
c0004849:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000484d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004851:	89 d8                	mov    eax,ebx
c0004853:	e8 74 ec ff ff       	call   c00034cc <dir_sdi>
c0004858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000485c:	83 ec 0c             	sub    esp,0xc
c000485f:	56                   	push   esi
c0004860:	e8 87 15 00 00       	call   c0005dec <ff_memfree>
c0004865:	83 c4 10             	add    esp,0x10
c0004868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000486c:	83 f8 04             	cmp    eax,0x4
c000486f:	74 06                	je     c0004877 <f_opendir+0xba>
c0004871:	85 c0                	test   eax,eax
c0004873:	74 0d                	je     c0004882 <f_opendir+0xc5>
c0004875:	eb 05                	jmp    c000487c <f_opendir+0xbf>
c0004877:	b8 05 00 00 00       	mov    eax,0x5
c000487c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004882:	83 c4 24             	add    esp,0x24
c0004885:	5b                   	pop    ebx
c0004886:	5e                   	pop    esi
c0004887:	c3                   	ret    

c0004888 <f_closedir>:
c0004888:	53                   	push   ebx
c0004889:	83 ec 18             	sub    esp,0x18
c000488c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004890:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004894:	89 d8                	mov    eax,ebx
c0004896:	e8 ae db ff ff       	call   c0002449 <validate>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 06                	jne    c00048a5 <f_closedir+0x1d>
c000489f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048a5:	83 c4 18             	add    esp,0x18
c00048a8:	5b                   	pop    ebx
c00048a9:	c3                   	ret    

c00048aa <f_readdir>:
c00048aa:	57                   	push   edi
c00048ab:	56                   	push   esi
c00048ac:	53                   	push   ebx
c00048ad:	83 ec 20             	sub    esp,0x20
c00048b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bc:	89 d8                	mov    eax,ebx
c00048be:	e8 86 db ff ff       	call   c0002449 <validate>
c00048c3:	85 c0                	test   eax,eax
c00048c5:	75 6e                	jne    c0004935 <f_readdir+0x8b>
c00048c7:	85 ff                	test   edi,edi
c00048c9:	75 0b                	jne    c00048d6 <f_readdir+0x2c>
c00048cb:	31 d2                	xor    edx,edx
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 f8 eb ff ff       	call   c00034cc <dir_sdi>
c00048d4:	eb 5f                	jmp    c0004935 <f_readdir+0x8b>
c00048d6:	83 ec 0c             	sub    esp,0xc
c00048d9:	68 00 02 00 00       	push   0x200
c00048de:	e8 f1 14 00 00       	call   c0005dd4 <ff_memalloc>
c00048e3:	83 c4 10             	add    esp,0x10
c00048e6:	89 c6                	mov    esi,eax
c00048e8:	b8 11 00 00 00       	mov    eax,0x11
c00048ed:	85 f6                	test   esi,esi
c00048ef:	74 44                	je     c0004935 <f_readdir+0x8b>
c00048f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	e8 ca ef ff ff       	call   c00038cb <dir_read>
c0004901:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004906:	75 19                	jne    c0004921 <f_readdir+0x77>
c0004908:	89 fa                	mov    edx,edi
c000490a:	89 d8                	mov    eax,ebx
c000490c:	e8 70 e8 ff ff       	call   c0003181 <get_fileinfo>
c0004911:	31 d2                	xor    edx,edx
c0004913:	89 d8                	mov    eax,ebx
c0004915:	e8 47 ee ff ff       	call   c0003761 <dir_next>
c000491a:	83 f8 04             	cmp    eax,0x4
c000491d:	75 02                	jne    c0004921 <f_readdir+0x77>
c000491f:	31 c0                	xor    eax,eax
c0004921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004925:	83 ec 0c             	sub    esp,0xc
c0004928:	56                   	push   esi
c0004929:	e8 be 14 00 00       	call   c0005dec <ff_memfree>
c000492e:	83 c4 10             	add    esp,0x10
c0004931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004935:	83 c4 20             	add    esp,0x20
c0004938:	5b                   	pop    ebx
c0004939:	5e                   	pop    esi
c000493a:	5f                   	pop    edi
c000493b:	c3                   	ret    

c000493c <f_stat>:
c000493c:	57                   	push   edi
c000493d:	31 c9                	xor    ecx,ecx
c000493f:	56                   	push   esi
c0004940:	53                   	push   ebx
c0004941:	83 ec 30             	sub    esp,0x30
c0004944:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004948:	89 e2                	mov    edx,esp
c000494a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000494e:	e8 f2 dc ff ff       	call   c0002645 <mount_volume>
c0004953:	89 c3                	mov    ebx,eax
c0004955:	85 c0                	test   eax,eax
c0004957:	75 59                	jne    c00049b2 <f_stat+0x76>
c0004959:	83 ec 0c             	sub    esp,0xc
c000495c:	bb 11 00 00 00       	mov    ebx,0x11
c0004961:	68 00 02 00 00       	push   0x200
c0004966:	e8 69 14 00 00       	call   c0005dd4 <ff_memalloc>
c000496b:	83 c4 10             	add    esp,0x10
c000496e:	89 c6                	mov    esi,eax
c0004970:	85 c0                	test   eax,eax
c0004972:	74 3e                	je     c00049b2 <f_stat+0x76>
c0004974:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004977:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000497b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000497e:	89 e0                	mov    eax,esp
c0004980:	e8 0a f2 ff ff       	call   c0003b8f <follow_path>
c0004985:	89 c3                	mov    ebx,eax
c0004987:	85 c0                	test   eax,eax
c0004989:	75 1b                	jne    c00049a6 <f_stat+0x6a>
c000498b:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004990:	75 0f                	jne    c00049a1 <f_stat+0x65>
c0004992:	85 ff                	test   edi,edi
c0004994:	74 10                	je     c00049a6 <f_stat+0x6a>
c0004996:	89 fa                	mov    edx,edi
c0004998:	89 e0                	mov    eax,esp
c000499a:	e8 e2 e7 ff ff       	call   c0003181 <get_fileinfo>
c000499f:	eb 05                	jmp    c00049a6 <f_stat+0x6a>
c00049a1:	bb 06 00 00 00       	mov    ebx,0x6
c00049a6:	83 ec 0c             	sub    esp,0xc
c00049a9:	56                   	push   esi
c00049aa:	e8 3d 14 00 00       	call   c0005dec <ff_memfree>
c00049af:	83 c4 10             	add    esp,0x10
c00049b2:	83 c4 30             	add    esp,0x30
c00049b5:	89 d8                	mov    eax,ebx
c00049b7:	5b                   	pop    ebx
c00049b8:	5e                   	pop    esi
c00049b9:	5f                   	pop    edi
c00049ba:	c3                   	ret    

c00049bb <f_getfree>:
c00049bb:	55                   	push   ebp
c00049bc:	31 c9                	xor    ecx,ecx
c00049be:	57                   	push   edi
c00049bf:	56                   	push   esi
c00049c0:	53                   	push   ebx
c00049c1:	83 ec 2c             	sub    esp,0x2c
c00049c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049c8:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049cc:	e8 74 dc ff ff       	call   c0002645 <mount_volume>
c00049d1:	89 c7                	mov    edi,eax
c00049d3:	85 c0                	test   eax,eax
c00049d5:	0f 85 df 00 00 00    	jne    c0004aba <f_getfree+0xff>
c00049db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00049df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00049e3:	89 30                	mov    DWORD PTR [eax],esi
c00049e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00049e8:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00049eb:	8d 55 fe             	lea    edx,[ebp-0x2]
c00049ee:	39 d0                	cmp    eax,edx
c00049f0:	77 0b                	ja     c00049fd <f_getfree+0x42>
c00049f2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00049f6:	89 01                	mov    DWORD PTR [ecx],eax
c00049f8:	e9 bd 00 00 00       	jmp    c0004aba <f_getfree+0xff>
c00049fd:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a00:	75 29                	jne    c0004a2b <f_getfree+0x70>
c0004a02:	bd 02 00 00 00       	mov    ebp,0x2
c0004a07:	31 db                	xor    ebx,ebx
c0004a09:	89 ea                	mov    edx,ebp
c0004a0b:	89 f0                	mov    eax,esi
c0004a0d:	e8 b6 e9 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004a12:	83 f8 ff             	cmp    eax,0xffffffff
c0004a15:	74 7d                	je     c0004a94 <f_getfree+0xd9>
c0004a17:	83 f8 01             	cmp    eax,0x1
c0004a1a:	74 7f                	je     c0004a9b <f_getfree+0xe0>
c0004a1c:	83 d3 00             	adc    ebx,0x0
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	45                   	inc    ebp
c0004a24:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a27:	77 e0                	ja     c0004a09 <f_getfree+0x4e>
c0004a29:	eb 79                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a2b:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a2e:	31 db                	xor    ebx,ebx
c0004a30:	31 f6                	xor    esi,esi
c0004a32:	85 f6                	test   esi,esi
c0004a34:	75 18                	jne    c0004a4e <f_getfree+0x93>
c0004a36:	8d 42 01             	lea    eax,[edx+0x1]
c0004a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a41:	e8 ac da ff ff       	call   c00024f2 <move_window>
c0004a46:	85 c0                	test   eax,eax
c0004a48:	75 58                	jne    c0004aa2 <f_getfree+0xe7>
c0004a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a56:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a5a:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a5d:	75 13                	jne    c0004a72 <f_getfree+0xb7>
c0004a5f:	e8 27 d5 ff ff       	call   c0001f8b <ld_word>
c0004a64:	0f b7 c0             	movzx  eax,ax
c0004a67:	83 f8 01             	cmp    eax,0x1
c0004a6a:	83 d3 00             	adc    ebx,0x0
c0004a6d:	83 c6 02             	add    esi,0x2
c0004a70:	eb 13                	jmp    c0004a85 <f_getfree+0xca>
c0004a72:	e8 21 d5 ff ff       	call   c0001f98 <ld_dword>
c0004a77:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004a7c:	83 f8 01             	cmp    eax,0x1
c0004a7f:	83 d3 00             	adc    ebx,0x0
c0004a82:	83 c6 04             	add    esi,0x4
c0004a85:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004a8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8f:	4d                   	dec    ebp
c0004a90:	75 a0                	jne    c0004a32 <f_getfree+0x77>
c0004a92:	eb 10                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a94:	bf 01 00 00 00       	mov    edi,0x1
c0004a99:	eb 09                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a9b:	bf 02 00 00 00       	mov    edi,0x2
c0004aa0:	eb 02                	jmp    c0004aa4 <f_getfree+0xe9>
c0004aa2:	89 c7                	mov    edi,eax
c0004aa4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004aa8:	89 18                	mov    DWORD PTR [eax],ebx
c0004aaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aae:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ab1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ab4:	83 ca 01             	or     edx,0x1
c0004ab7:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aba:	83 c4 2c             	add    esp,0x2c
c0004abd:	89 f8                	mov    eax,edi
c0004abf:	5b                   	pop    ebx
c0004ac0:	5e                   	pop    esi
c0004ac1:	5f                   	pop    edi
c0004ac2:	5d                   	pop    ebp
c0004ac3:	c3                   	ret    

c0004ac4 <f_truncate>:
c0004ac4:	56                   	push   esi
c0004ac5:	53                   	push   ebx
c0004ac6:	83 ec 14             	sub    esp,0x14
c0004ac9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004acd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ad1:	89 d8                	mov    eax,ebx
c0004ad3:	e8 71 d9 ff ff       	call   c0002449 <validate>
c0004ad8:	89 c6                	mov    esi,eax
c0004ada:	85 c0                	test   eax,eax
c0004adc:	0f 85 c4 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004ae2:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004ae6:	85 f6                	test   esi,esi
c0004ae8:	0f 85 b8 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004aee:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004af2:	0f 84 a9 00 00 00    	je     c0004ba1 <f_truncate+0xdd>
c0004af8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004afb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004afe:	0f 83 a2 00 00 00    	jae    c0004ba6 <f_truncate+0xe2>
c0004b04:	85 c0                	test   eax,eax
c0004b06:	75 15                	jne    c0004b1d <f_truncate+0x59>
c0004b08:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b0b:	31 c9                	xor    ecx,ecx
c0004b0d:	89 d8                	mov    eax,ebx
c0004b0f:	e8 bf eb ff ff       	call   c00036d3 <remove_chain>
c0004b14:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b1b:	eb 35                	jmp    c0004b52 <f_truncate+0x8e>
c0004b1d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b22:	e8 a1 e8 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004b27:	89 c2                	mov    edx,eax
c0004b29:	b8 01 00 00 00       	mov    eax,0x1
c0004b2e:	83 fa ff             	cmp    edx,0xffffffff
c0004b31:	74 1f                	je     c0004b52 <f_truncate+0x8e>
c0004b33:	b8 02 00 00 00       	mov    eax,0x2
c0004b38:	83 fa 01             	cmp    edx,0x1
c0004b3b:	74 15                	je     c0004b52 <f_truncate+0x8e>
c0004b3d:	31 c0                	xor    eax,eax
c0004b3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b43:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b46:	76 0a                	jbe    c0004b52 <f_truncate+0x8e>
c0004b48:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b4b:	89 d8                	mov    eax,ebx
c0004b4d:	e8 81 eb ff ff       	call   c00036d3 <remove_chain>
c0004b52:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b58:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b5b:	83 ca 40             	or     edx,0x40
c0004b5e:	85 c0                	test   eax,eax
c0004b60:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b63:	75 35                	jne    c0004b9a <f_truncate+0xd6>
c0004b65:	80 e2 80             	and    dl,0x80
c0004b68:	74 3c                	je     c0004ba6 <f_truncate+0xe2>
c0004b6a:	6a 01                	push   0x1
c0004b6c:	8d 43 28             	lea    eax,[ebx+0x28]
c0004b6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004b72:	50                   	push   eax
c0004b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004b77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004b7b:	50                   	push   eax
c0004b7c:	e8 d5 d3 ff ff       	call   c0001f56 <disk_write>
c0004b81:	83 c4 10             	add    esp,0x10
c0004b84:	85 c0                	test   eax,eax
c0004b86:	75 0d                	jne    c0004b95 <f_truncate+0xd1>
c0004b88:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004b8b:	31 f6                	xor    esi,esi
c0004b8d:	83 e0 7f             	and    eax,0x7f
c0004b90:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004b93:	eb 11                	jmp    c0004ba6 <f_truncate+0xe2>
c0004b95:	b8 01 00 00 00       	mov    eax,0x1
c0004b9a:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004b9d:	89 c6                	mov    esi,eax
c0004b9f:	eb 05                	jmp    c0004ba6 <f_truncate+0xe2>
c0004ba1:	be 07 00 00 00       	mov    esi,0x7
c0004ba6:	89 f0                	mov    eax,esi
c0004ba8:	83 c4 14             	add    esp,0x14
c0004bab:	5b                   	pop    ebx
c0004bac:	5e                   	pop    esi
c0004bad:	c3                   	ret    

c0004bae <f_unlink>:
c0004bae:	55                   	push   ebp
c0004baf:	b9 02 00 00 00       	mov    ecx,0x2
c0004bb4:	57                   	push   edi
c0004bb5:	56                   	push   esi
c0004bb6:	53                   	push   ebx
c0004bb7:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bbd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bc1:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bc8:	e8 78 da ff ff       	call   c0002645 <mount_volume>
c0004bcd:	85 c0                	test   eax,eax
c0004bcf:	0f 85 f0 00 00 00    	jne    c0004cc5 <f_unlink+0x117>
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	83 ec 0c             	sub    esp,0xc
c0004bdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004be0:	68 00 02 00 00       	push   0x200
c0004be5:	e8 ea 11 00 00       	call   c0005dd4 <ff_memalloc>
c0004bea:	83 c4 10             	add    esp,0x10
c0004bed:	89 c3                	mov    ebx,eax
c0004bef:	b8 11 00 00 00       	mov    eax,0x11
c0004bf4:	85 db                	test   ebx,ebx
c0004bf6:	0f 84 c9 00 00 00    	je     c0004cc5 <f_unlink+0x117>
c0004bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c00:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c07:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c0e:	e8 7c ef ff ff       	call   c0003b8f <follow_path>
c0004c13:	85 c0                	test   eax,eax
c0004c15:	0f 85 96 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c1b:	b8 06 00 00 00       	mov    eax,0x6
c0004c20:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c25:	0f 85 86 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c2b:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c30:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c36:	74 07                	je     c0004c3f <f_unlink+0x91>
c0004c38:	b8 07 00 00 00       	mov    eax,0x7
c0004c3d:	eb 72                	jmp    c0004cb1 <f_unlink+0x103>
c0004c3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c47:	8a 07                	mov    al,BYTE PTR [edi]
c0004c49:	e8 29 e7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004c4e:	83 e5 10             	and    ebp,0x10
c0004c51:	89 c6                	mov    esi,eax
c0004c53:	75 0f                	jne    c0004c64 <f_unlink+0xb6>
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 95 ed ff ff       	call   c00039f3 <dir_remove>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	74 2f                	je     c0004c91 <f_unlink+0xe3>
c0004c62:	eb 4d                	jmp    c0004cb1 <f_unlink+0x103>
c0004c64:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c68:	31 d2                	xor    edx,edx
c0004c6a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004c6e:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c72:	e8 55 e8 ff ff       	call   c00034cc <dir_sdi>
c0004c77:	85 c0                	test   eax,eax
c0004c79:	75 36                	jne    c0004cb1 <f_unlink+0x103>
c0004c7b:	31 d2                	xor    edx,edx
c0004c7d:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c81:	e8 45 ec ff ff       	call   c00038cb <dir_read>
c0004c86:	85 c0                	test   eax,eax
c0004c88:	74 ae                	je     c0004c38 <f_unlink+0x8a>
c0004c8a:	83 f8 04             	cmp    eax,0x4
c0004c8d:	75 22                	jne    c0004cb1 <f_unlink+0x103>
c0004c8f:	eb c4                	jmp    c0004c55 <f_unlink+0xa7>
c0004c91:	85 f6                	test   esi,esi
c0004c93:	75 0b                	jne    c0004ca0 <f_unlink+0xf2>
c0004c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c99:	e8 8b e2 ff ff       	call   c0002f29 <sync_fs>
c0004c9e:	eb 11                	jmp    c0004cb1 <f_unlink+0x103>
c0004ca0:	31 c9                	xor    ecx,ecx
c0004ca2:	89 f2                	mov    edx,esi
c0004ca4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ca8:	e8 26 ea ff ff       	call   c00036d3 <remove_chain>
c0004cad:	85 c0                	test   eax,eax
c0004caf:	74 e4                	je     c0004c95 <f_unlink+0xe7>
c0004cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cb5:	83 ec 0c             	sub    esp,0xc
c0004cb8:	53                   	push   ebx
c0004cb9:	e8 2e 11 00 00       	call   c0005dec <ff_memfree>
c0004cbe:	83 c4 10             	add    esp,0x10
c0004cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc5:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004ccb:	5b                   	pop    ebx
c0004ccc:	5e                   	pop    esi
c0004ccd:	5f                   	pop    edi
c0004cce:	5d                   	pop    ebp
c0004ccf:	c3                   	ret    

c0004cd0 <f_mkdir>:
c0004cd0:	57                   	push   edi
c0004cd1:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd6:	56                   	push   esi
c0004cd7:	53                   	push   ebx
c0004cd8:	83 ec 50             	sub    esp,0x50
c0004cdb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ce3:	e8 5d d9 ff ff       	call   c0002645 <mount_volume>
c0004ce8:	89 c3                	mov    ebx,eax
c0004cea:	85 c0                	test   eax,eax
c0004cec:	0f 85 70 01 00 00    	jne    c0004e62 <f_mkdir+0x192>
c0004cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf6:	bb 11 00 00 00       	mov    ebx,0x11
c0004cfb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cff:	83 ec 0c             	sub    esp,0xc
c0004d02:	68 00 02 00 00       	push   0x200
c0004d07:	e8 c8 10 00 00       	call   c0005dd4 <ff_memalloc>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	89 c7                	mov    edi,eax
c0004d11:	85 c0                	test   eax,eax
c0004d13:	0f 84 49 01 00 00    	je     c0004e62 <f_mkdir+0x192>
c0004d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d21:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d28:	e8 62 ee ff ff       	call   c0003b8f <follow_path>
c0004d2d:	89 c3                	mov    ebx,eax
c0004d2f:	85 c0                	test   eax,eax
c0004d31:	74 3e                	je     c0004d71 <f_mkdir+0xa1>
c0004d33:	83 f8 04             	cmp    eax,0x4
c0004d36:	75 3e                	jne    c0004d76 <f_mkdir+0xa6>
c0004d38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d3c:	31 d2                	xor    edx,edx
c0004d3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d46:	e8 49 e8 ff ff       	call   c0003594 <create_chain>
c0004d4b:	89 c6                	mov    esi,eax
c0004d4d:	85 c0                	test   eax,eax
c0004d4f:	74 0c                	je     c0004d5d <f_mkdir+0x8d>
c0004d51:	bb 02 00 00 00       	mov    ebx,0x2
c0004d56:	83 f8 01             	cmp    eax,0x1
c0004d59:	74 07                	je     c0004d62 <f_mkdir+0x92>
c0004d5b:	eb 2a                	jmp    c0004d87 <f_mkdir+0xb7>
c0004d5d:	bb 07 00 00 00       	mov    ebx,0x7
c0004d62:	31 c9                	xor    ecx,ecx
c0004d64:	89 f2                	mov    edx,esi
c0004d66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d6a:	e8 64 e9 ff ff       	call   c00036d3 <remove_chain>
c0004d6f:	eb 05                	jmp    c0004d76 <f_mkdir+0xa6>
c0004d71:	bb 08 00 00 00       	mov    ebx,0x8
c0004d76:	83 ec 0c             	sub    esp,0xc
c0004d79:	57                   	push   edi
c0004d7a:	e8 6d 10 00 00       	call   c0005dec <ff_memfree>
c0004d7f:	83 c4 10             	add    esp,0x10
c0004d82:	e9 db 00 00 00       	jmp    c0004e62 <f_mkdir+0x192>
c0004d87:	bb 01 00 00 00       	mov    ebx,0x1
c0004d8c:	83 f8 ff             	cmp    eax,0xffffffff
c0004d8f:	74 d1                	je     c0004d62 <f_mkdir+0x92>
c0004d91:	89 f2                	mov    edx,esi
c0004d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d97:	e8 f1 dc ff ff       	call   c0002a8d <dir_clear>
c0004d9c:	89 c3                	mov    ebx,eax
c0004d9e:	85 c0                	test   eax,eax
c0004da0:	75 c0                	jne    c0004d62 <f_mkdir+0x92>
c0004da2:	b9 0b 00 00 00       	mov    ecx,0xb
c0004da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dab:	ba 20 00 00 00       	mov    edx,0x20
c0004db0:	83 c0 34             	add    eax,0x34
c0004db3:	e8 14 d2 ff ff       	call   c0001fcc <mem_set>
c0004db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004dc1:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dc5:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dc9:	83 c0 4a             	add    eax,0x4a
c0004dcc:	e8 e3 d1 ff ff       	call   c0001fb4 <st_dword>
c0004dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dd5:	89 f1                	mov    ecx,esi
c0004dd7:	8d 50 34             	lea    edx,[eax+0x34]
c0004dda:	e8 c1 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de3:	b9 20 00 00 00       	mov    ecx,0x20
c0004de8:	8d 50 34             	lea    edx,[eax+0x34]
c0004deb:	83 c0 54             	add    eax,0x54
c0004dee:	e8 c4 d1 ff ff       	call   c0001fb7 <mem_cpy>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004dfb:	8d 50 54             	lea    edx,[eax+0x54]
c0004dfe:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e02:	e8 99 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e13:	e8 0c ee ff ff       	call   c0003c24 <dir_register>
c0004e18:	89 c3                	mov    ebx,eax
c0004e1a:	85 c0                	test   eax,eax
c0004e1c:	0f 85 40 ff ff ff    	jne    c0004d62 <f_mkdir+0x92>
c0004e22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e26:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e2b:	83 c0 16             	add    eax,0x16
c0004e2e:	e8 81 d1 ff ff       	call   c0001fb4 <st_dword>
c0004e33:	89 f1                	mov    ecx,esi
c0004e35:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3d:	e8 5e e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e46:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e56:	e8 ce e0 ff ff       	call   c0002f29 <sync_fs>
c0004e5b:	89 c3                	mov    ebx,eax
c0004e5d:	e9 14 ff ff ff       	jmp    c0004d76 <f_mkdir+0xa6>
c0004e62:	83 c4 50             	add    esp,0x50
c0004e65:	89 d8                	mov    eax,ebx
c0004e67:	5b                   	pop    ebx
c0004e68:	5e                   	pop    esi
c0004e69:	5f                   	pop    edi
c0004e6a:	c3                   	ret    

c0004e6b <f_rename>:
c0004e6b:	57                   	push   edi
c0004e6c:	56                   	push   esi
c0004e6d:	53                   	push   ebx
c0004e6e:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004e74:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004e7b:	e8 7c d5 ff ff       	call   c00023fc <get_ldnumber>
c0004e80:	b9 02 00 00 00       	mov    ecx,0x2
c0004e85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e89:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004e90:	e8 b0 d7 ff ff       	call   c0002645 <mount_volume>
c0004e95:	85 c0                	test   eax,eax
c0004e97:	0f 85 7c 01 00 00    	jne    c0005019 <f_rename+0x1ae>
c0004e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea1:	83 ec 0c             	sub    esp,0xc
c0004ea4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ea8:	68 00 02 00 00       	push   0x200
c0004ead:	e8 22 0f 00 00       	call   c0005dd4 <ff_memalloc>
c0004eb2:	83 c4 10             	add    esp,0x10
c0004eb5:	89 c6                	mov    esi,eax
c0004eb7:	b8 11 00 00 00       	mov    eax,0x11
c0004ebc:	85 f6                	test   esi,esi
c0004ebe:	0f 84 55 01 00 00    	je     c0005019 <f_rename+0x1ae>
c0004ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec8:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004ecf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ed2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ed6:	e8 b4 ec ff ff       	call   c0003b8f <follow_path>
c0004edb:	85 c0                	test   eax,eax
c0004edd:	0f 85 22 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ee3:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004ee7:	b8 06 00 00 00       	mov    eax,0x6
c0004eec:	80 e2 a0             	and    dl,0xa0
c0004eef:	0f 85 10 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ef5:	b9 20 00 00 00       	mov    ecx,0x20
c0004efa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004efe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f02:	e8 b0 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f07:	b9 30 00 00 00       	mov    ecx,0x30
c0004f0c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f10:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f14:	e8 9e d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f19:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f24:	e8 66 ec ff ff       	call   c0003b8f <follow_path>
c0004f29:	85 c0                	test   eax,eax
c0004f2b:	75 20                	jne    c0004f4d <f_rename+0xe2>
c0004f2d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f31:	b8 08 00 00 00       	mov    eax,0x8
c0004f36:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f3a:	0f 85 c5 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f40:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f44:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f4b:	eb 03                	jmp    c0004f50 <f_rename+0xe5>
c0004f4d:	83 f8 04             	cmp    eax,0x4
c0004f50:	0f 85 af 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f5a:	e8 c5 ec ff ff       	call   c0003c24 <dir_register>
c0004f5f:	85 c0                	test   eax,eax
c0004f61:	0f 85 9e 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f67:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004f6e:	b9 13 00 00 00       	mov    ecx,0x13
c0004f73:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004f76:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004f7a:	e8 38 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f7f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004f83:	a8 10                	test   al,0x10
c0004f85:	75 03                	jne    c0004f8a <f_rename+0x11f>
c0004f87:	83 c8 20             	or     eax,0x20
c0004f8a:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f91:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f95:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004f99:	74 54                	je     c0004fef <f_rename+0x184>
c0004f9b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004f9f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fa3:	74 4a                	je     c0004fef <f_rename+0x184>
c0004fa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fa9:	89 da                	mov    edx,ebx
c0004fab:	8a 07                	mov    al,BYTE PTR [edi]
c0004fad:	e8 c5 e3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004fb2:	89 c2                	mov    edx,eax
c0004fb4:	89 f8                	mov    eax,edi
c0004fb6:	e8 27 d2 ff ff       	call   c00021e2 <clst2sect>
c0004fbb:	89 c2                	mov    edx,eax
c0004fbd:	b8 02 00 00 00       	mov    eax,0x2
c0004fc2:	85 d2                	test   edx,edx
c0004fc4:	74 3f                	je     c0005005 <f_rename+0x19a>
c0004fc6:	89 f8                	mov    eax,edi
c0004fc8:	e8 25 d5 ff ff       	call   c00024f2 <move_window>
c0004fcd:	85 c0                	test   eax,eax
c0004fcf:	75 34                	jne    c0005005 <f_rename+0x19a>
c0004fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd5:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004fd9:	75 14                	jne    c0004fef <f_rename+0x184>
c0004fdb:	8d 50 54             	lea    edx,[eax+0x54]
c0004fde:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004fe2:	e8 b9 e3 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004feb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fef:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ff3:	e8 fb e9 ff ff       	call   c00039f3 <dir_remove>
c0004ff8:	85 c0                	test   eax,eax
c0004ffa:	75 09                	jne    c0005005 <f_rename+0x19a>
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	e8 24 df ff ff       	call   c0002f29 <sync_fs>
c0005005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005009:	83 ec 0c             	sub    esp,0xc
c000500c:	56                   	push   esi
c000500d:	e8 da 0d 00 00       	call   c0005dec <ff_memfree>
c0005012:	83 c4 10             	add    esp,0x10
c0005015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005019:	81 c4 a0 00 00 00    	add    esp,0xa0
c000501f:	5b                   	pop    ebx
c0005020:	5e                   	pop    esi
c0005021:	5f                   	pop    edi
c0005022:	c3                   	ret    

c0005023 <f_chmod>:
c0005023:	57                   	push   edi
c0005024:	b9 02 00 00 00       	mov    ecx,0x2
c0005029:	56                   	push   esi
c000502a:	53                   	push   ebx
c000502b:	83 ec 50             	sub    esp,0x50
c000502e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005032:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0005036:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000503a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000503e:	e8 02 d6 ff ff       	call   c0002645 <mount_volume>
c0005043:	85 c0                	test   eax,eax
c0005045:	0f 85 81 00 00 00    	jne    c00050cc <f_chmod+0xa9>
c000504b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000504f:	83 ec 0c             	sub    esp,0xc
c0005052:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005056:	68 00 02 00 00       	push   0x200
c000505b:	e8 74 0d 00 00       	call   c0005dd4 <ff_memalloc>
c0005060:	83 c4 10             	add    esp,0x10
c0005063:	89 c6                	mov    esi,eax
c0005065:	b8 11 00 00 00       	mov    eax,0x11
c000506a:	85 f6                	test   esi,esi
c000506c:	74 5e                	je     c00050cc <f_chmod+0xa9>
c000506e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005072:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005076:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005079:	8d 44 24 20          	lea    eax,[esp+0x20]
c000507d:	e8 0d eb ff ff       	call   c0003b8f <follow_path>
c0005082:	85 c0                	test   eax,eax
c0005084:	75 32                	jne    c00050b8 <f_chmod+0x95>
c0005086:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000508a:	b8 06 00 00 00       	mov    eax,0x6
c000508f:	80 e2 a0             	and    dl,0xa0
c0005092:	75 24                	jne    c00050b8 <f_chmod+0x95>
c0005094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005098:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000509b:	31 d7                	xor    edi,edx
c000509d:	21 fb                	and    ebx,edi
c000509f:	83 e3 27             	and    ebx,0x27
c00050a2:	31 d3                	xor    ebx,edx
c00050a4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050b3:	e8 71 de ff ff       	call   c0002f29 <sync_fs>
c00050b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050bc:	83 ec 0c             	sub    esp,0xc
c00050bf:	56                   	push   esi
c00050c0:	e8 27 0d 00 00       	call   c0005dec <ff_memfree>
c00050c5:	83 c4 10             	add    esp,0x10
c00050c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050cc:	83 c4 50             	add    esp,0x50
c00050cf:	5b                   	pop    ebx
c00050d0:	5e                   	pop    esi
c00050d1:	5f                   	pop    edi
c00050d2:	c3                   	ret    

c00050d3 <f_utime>:
c00050d3:	56                   	push   esi
c00050d4:	b9 02 00 00 00       	mov    ecx,0x2
c00050d9:	53                   	push   ebx
c00050da:	83 ec 54             	sub    esp,0x54
c00050dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00050e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050e5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050e9:	e8 57 d5 ff ff       	call   c0002645 <mount_volume>
c00050ee:	85 c0                	test   eax,eax
c00050f0:	0f 85 87 00 00 00    	jne    c000517d <f_utime+0xaa>
c00050f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fa:	83 ec 0c             	sub    esp,0xc
c00050fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005101:	68 00 02 00 00       	push   0x200
c0005106:	e8 c9 0c 00 00       	call   c0005dd4 <ff_memalloc>
c000510b:	83 c4 10             	add    esp,0x10
c000510e:	89 c3                	mov    ebx,eax
c0005110:	b8 11 00 00 00       	mov    eax,0x11
c0005115:	85 db                	test   ebx,ebx
c0005117:	74 64                	je     c000517d <f_utime+0xaa>
c0005119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000511d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005121:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005124:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005128:	e8 62 ea ff ff       	call   c0003b8f <follow_path>
c000512d:	85 c0                	test   eax,eax
c000512f:	75 38                	jne    c0005169 <f_utime+0x96>
c0005131:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005135:	b8 06 00 00 00       	mov    eax,0x6
c000513a:	80 e2 a0             	and    dl,0xa0
c000513d:	75 2a                	jne    c0005169 <f_utime+0x96>
c000513f:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005143:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005147:	c1 e2 10             	shl    edx,0x10
c000514a:	09 c2                	or     edx,eax
c000514c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005150:	83 c0 16             	add    eax,0x16
c0005153:	e8 5c ce ff ff       	call   c0001fb4 <st_dword>
c0005158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000515c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005164:	e8 c0 dd ff ff       	call   c0002f29 <sync_fs>
c0005169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000516d:	83 ec 0c             	sub    esp,0xc
c0005170:	53                   	push   ebx
c0005171:	e8 76 0c 00 00       	call   c0005dec <ff_memfree>
c0005176:	83 c4 10             	add    esp,0x10
c0005179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000517d:	83 c4 54             	add    esp,0x54
c0005180:	5b                   	pop    ebx
c0005181:	5e                   	pop    esi
c0005182:	c3                   	ret    

c0005183 <f_getlabel>:
c0005183:	55                   	push   ebp
c0005184:	31 c9                	xor    ecx,ecx
c0005186:	57                   	push   edi
c0005187:	56                   	push   esi
c0005188:	53                   	push   ebx
c0005189:	83 ec 5c             	sub    esp,0x5c
c000518c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005190:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005194:	e8 ac d4 ff ff       	call   c0002645 <mount_volume>
c0005199:	89 c6                	mov    esi,eax
c000519b:	85 c0                	test   eax,eax
c000519d:	0f 85 27 01 00 00    	jne    c00052ca <f_getlabel+0x147>
c00051a3:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051a8:	0f 84 d0 00 00 00    	je     c000527e <f_getlabel+0xfb>
c00051ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b2:	31 d2                	xor    edx,edx
c00051b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051c4:	e8 03 e3 ff ff       	call   c00034cc <dir_sdi>
c00051c9:	85 c0                	test   eax,eax
c00051cb:	0f 85 a1 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051d1:	ba 01 00 00 00       	mov    edx,0x1
c00051d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051da:	e8 ec e6 ff ff       	call   c00038cb <dir_read>
c00051df:	85 c0                	test   eax,eax
c00051e1:	0f 85 8b 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051e7:	31 db                	xor    ebx,ebx
c00051e9:	31 c9                	xor    ecx,ecx
c00051eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00051ef:	8d 79 01             	lea    edi,[ecx+0x1]
c00051f2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00051f7:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c00051fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005200:	e8 06 ce ff ff       	call   c000200b <dbc_1st>
c0005205:	85 c0                	test   eax,eax
c0005207:	74 16                	je     c000521f <f_getlabel+0x9c>
c0005209:	83 ff 0b             	cmp    edi,0xb
c000520c:	74 11                	je     c000521f <f_getlabel+0x9c>
c000520e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005217:	8d 79 02             	lea    edi,[ecx+0x2]
c000521a:	c1 e0 08             	shl    eax,0x8
c000521d:	09 c2                	or     edx,eax
c000521f:	0f b7 d2             	movzx  edx,dx
c0005222:	50                   	push   eax
c0005223:	50                   	push   eax
c0005224:	68 b5 01 00 00       	push   0x1b5
c0005229:	52                   	push   edx
c000522a:	e8 75 0c 00 00       	call   c0005ea4 <ff_oem2uni>
c000522f:	83 c4 10             	add    esp,0x10
c0005232:	0f b7 c0             	movzx  eax,ax
c0005235:	85 c0                	test   eax,eax
c0005237:	74 22                	je     c000525b <f_getlabel+0xd8>
c0005239:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000523d:	b9 04 00 00 00       	mov    ecx,0x4
c0005242:	01 da                	add    edx,ebx
c0005244:	e8 a0 ce ff ff       	call   c00020e9 <put_utf>
c0005249:	0f b6 c0             	movzx  eax,al
c000524c:	85 c0                	test   eax,eax
c000524e:	74 0b                	je     c000525b <f_getlabel+0xd8>
c0005250:	01 c3                	add    ebx,eax
c0005252:	83 ff 0b             	cmp    edi,0xb
c0005255:	74 06                	je     c000525d <f_getlabel+0xda>
c0005257:	89 f9                	mov    ecx,edi
c0005259:	eb 90                	jmp    c00051eb <f_getlabel+0x68>
c000525b:	31 db                	xor    ebx,ebx
c000525d:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005261:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005264:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005268:	74 14                	je     c000527e <f_getlabel+0xfb>
c000526a:	4b                   	dec    ebx
c000526b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c000526e:	74 f1                	je     c0005261 <f_getlabel+0xde>
c0005270:	eb 0c                	jmp    c000527e <f_getlabel+0xfb>
c0005272:	83 f8 04             	cmp    eax,0x4
c0005275:	75 51                	jne    c00052c8 <f_getlabel+0x145>
c0005277:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000527b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000527e:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005283:	74 45                	je     c00052ca <f_getlabel+0x147>
c0005285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005289:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000528c:	e8 61 d2 ff ff       	call   c00024f2 <move_window>
c0005291:	89 c6                	mov    esi,eax
c0005293:	85 c0                	test   eax,eax
c0005295:	75 33                	jne    c00052ca <f_getlabel+0x147>
c0005297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000529b:	b8 43 00 00 00       	mov    eax,0x43
c00052a0:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052a3:	83 f9 03             	cmp    ecx,0x3
c00052a6:	74 0f                	je     c00052b7 <f_getlabel+0x134>
c00052a8:	31 c0                	xor    eax,eax
c00052aa:	83 f9 04             	cmp    ecx,0x4
c00052ad:	0f 94 c0             	sete   al
c00052b0:	48                   	dec    eax
c00052b1:	83 e0 c3             	and    eax,0xffffffc3
c00052b4:	83 c0 64             	add    eax,0x64
c00052b7:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052bb:	e8 d8 cc ff ff       	call   c0001f98 <ld_dword>
c00052c0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052c4:	89 07                	mov    DWORD PTR [edi],eax
c00052c6:	eb 02                	jmp    c00052ca <f_getlabel+0x147>
c00052c8:	89 c6                	mov    esi,eax
c00052ca:	83 c4 5c             	add    esp,0x5c
c00052cd:	89 f0                	mov    eax,esi
c00052cf:	5b                   	pop    ebx
c00052d0:	5e                   	pop    esi
c00052d1:	5f                   	pop    edi
c00052d2:	5d                   	pop    ebp
c00052d3:	c3                   	ret    

c00052d4 <f_setlabel>:
c00052d4:	57                   	push   edi
c00052d5:	b9 02 00 00 00       	mov    ecx,0x2
c00052da:	56                   	push   esi
c00052db:	53                   	push   ebx
c00052dc:	83 ec 50             	sub    esp,0x50
c00052df:	8d 54 24 04          	lea    edx,[esp+0x4]
c00052e3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052e7:	e8 59 d3 ff ff       	call   c0002645 <mount_volume>
c00052ec:	89 c6                	mov    esi,eax
c00052ee:	85 c0                	test   eax,eax
c00052f0:	0f 85 65 01 00 00    	jne    c000545b <f_setlabel+0x187>
c00052f6:	b9 0b 00 00 00       	mov    ecx,0xb
c00052fb:	ba 20 00 00 00       	mov    edx,0x20
c0005300:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005304:	31 db                	xor    ebx,ebx
c0005306:	e8 c1 cc ff ff       	call   c0001fcc <mem_set>
c000530b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000530f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005312:	76 5d                	jbe    c0005371 <f_setlabel+0x9d>
c0005314:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005318:	e8 f4 cc ff ff       	call   c0002011 <tchar2uni>
c000531d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005322:	76 0a                	jbe    c000532e <f_setlabel+0x5a>
c0005324:	be 06 00 00 00       	mov    esi,0x6
c0005329:	e9 2d 01 00 00       	jmp    c000545b <f_setlabel+0x187>
c000532e:	83 ec 0c             	sub    esp,0xc
c0005331:	50                   	push   eax
c0005332:	e8 e5 0b 00 00       	call   c0005f1c <ff_wtoupper>
c0005337:	5a                   	pop    edx
c0005338:	59                   	pop    ecx
c0005339:	68 b5 01 00 00       	push   0x1b5
c000533e:	50                   	push   eax
c000533f:	e8 c0 0a 00 00       	call   c0005e04 <ff_uni2oem>
c0005344:	83 c4 10             	add    esp,0x10
c0005347:	0f b7 f0             	movzx  esi,ax
c000534a:	89 f7                	mov    edi,esi
c000534c:	85 f6                	test   esi,esi
c000534e:	74 d4                	je     c0005324 <f_setlabel+0x50>
c0005350:	89 f2                	mov    edx,esi
c0005352:	b8 50 f5 02 c0       	mov    eax,0xc002f550
c0005357:	e8 9e cc ff ff       	call   c0001ffa <chk_chr>
c000535c:	85 c0                	test   eax,eax
c000535e:	75 c4                	jne    c0005324 <f_setlabel+0x50>
c0005360:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005366:	0f 87 c9 00 00 00    	ja     c0005435 <f_setlabel+0x161>
c000536c:	e9 e0 00 00 00       	jmp    c0005451 <f_setlabel+0x17d>
c0005371:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005376:	74 ac                	je     c0005324 <f_setlabel+0x50>
c0005378:	85 db                	test   ebx,ebx
c000537a:	74 0e                	je     c000538a <f_setlabel+0xb6>
c000537c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000537f:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005384:	75 04                	jne    c000538a <f_setlabel+0xb6>
c0005386:	89 c3                	mov    ebx,eax
c0005388:	eb ee                	jmp    c0005378 <f_setlabel+0xa4>
c000538a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000538e:	31 d2                	xor    edx,edx
c0005390:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005394:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000539c:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053a0:	e8 27 e1 ff ff       	call   c00034cc <dir_sdi>
c00053a5:	89 c6                	mov    esi,eax
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 ac 00 00 00    	jne    c000545b <f_setlabel+0x187>
c00053af:	ba 01 00 00 00       	mov    edx,0x1
c00053b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053b8:	e8 0e e5 ff ff       	call   c00038cb <dir_read>
c00053bd:	85 c0                	test   eax,eax
c00053bf:	75 18                	jne    c00053d9 <f_setlabel+0x105>
c00053c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053c5:	85 db                	test   ebx,ebx
c00053c7:	74 0b                	je     c00053d4 <f_setlabel+0x100>
c00053c9:	b9 0b 00 00 00       	mov    ecx,0xb
c00053ce:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00053d2:	eb 47                	jmp    c000541b <f_setlabel+0x147>
c00053d4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00053d7:	eb 47                	jmp    c0005420 <f_setlabel+0x14c>
c00053d9:	83 f8 04             	cmp    eax,0x4
c00053dc:	75 53                	jne    c0005431 <f_setlabel+0x15d>
c00053de:	85 db                	test   ebx,ebx
c00053e0:	74 79                	je     c000545b <f_setlabel+0x187>
c00053e2:	ba 01 00 00 00       	mov    edx,0x1
c00053e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053eb:	e8 76 e4 ff ff       	call   c0003866 <dir_alloc>
c00053f0:	89 c6                	mov    esi,eax
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 65                	jne    c000545b <f_setlabel+0x187>
c00053f6:	b9 20 00 00 00       	mov    ecx,0x20
c00053fb:	31 d2                	xor    edx,edx
c00053fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005401:	e8 c6 cb ff ff       	call   c0001fcc <mem_set>
c0005406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000540a:	b9 0b 00 00 00       	mov    ecx,0xb
c000540f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005413:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	e8 97 cb ff ff       	call   c0001fb7 <mem_cpy>
c0005420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005424:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000542c:	e8 f8 da ff ff       	call   c0002f29 <sync_fs>
c0005431:	89 c6                	mov    esi,eax
c0005433:	eb 26                	jmp    c000545b <f_setlabel+0x187>
c0005435:	83 fb 09             	cmp    ebx,0x9
c0005438:	0f 87 e6 fe ff ff    	ja     c0005324 <f_setlabel+0x50>
c000543e:	89 f0                	mov    eax,esi
c0005440:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005444:	43                   	inc    ebx
c0005445:	89 f8                	mov    eax,edi
c0005447:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000544b:	43                   	inc    ebx
c000544c:	e9 ba fe ff ff       	jmp    c000530b <f_setlabel+0x37>
c0005451:	83 fb 0a             	cmp    ebx,0xa
c0005454:	76 ef                	jbe    c0005445 <f_setlabel+0x171>
c0005456:	e9 c9 fe ff ff       	jmp    c0005324 <f_setlabel+0x50>
c000545b:	83 c4 50             	add    esp,0x50
c000545e:	89 f0                	mov    eax,esi
c0005460:	5b                   	pop    ebx
c0005461:	5e                   	pop    esi
c0005462:	5f                   	pop    edi
c0005463:	c3                   	ret    

c0005464 <f_expand>:
c0005464:	55                   	push   ebp
c0005465:	57                   	push   edi
c0005466:	56                   	push   esi
c0005467:	53                   	push   ebx
c0005468:	83 ec 2c             	sub    esp,0x2c
c000546b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000546f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000547b:	89 d8                	mov    eax,ebx
c000547d:	e8 c7 cf ff ff       	call   c0002449 <validate>
c0005482:	89 c6                	mov    esi,eax
c0005484:	85 c0                	test   eax,eax
c0005486:	0f 85 3b 01 00 00    	jne    c00055c7 <f_expand+0x163>
c000548c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005490:	85 f6                	test   esi,esi
c0005492:	0f 85 2f 01 00 00    	jne    c00055c7 <f_expand+0x163>
c0005498:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000549d:	75 0a                	jne    c00054a9 <f_expand+0x45>
c000549f:	be 07 00 00 00       	mov    esi,0x7
c00054a4:	e9 1e 01 00 00       	jmp    c00055c7 <f_expand+0x163>
c00054a9:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054ad:	75 f0                	jne    c000549f <f_expand+0x3b>
c00054af:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054b3:	74 ea                	je     c000549f <f_expand+0x3b>
c00054b5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054b9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054bd:	c1 e1 09             	shl    ecx,0x9
c00054c0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054c3:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054c7:	0f 95 c0             	setne  al
c00054ca:	31 d2                	xor    edx,edx
c00054cc:	0f b6 c0             	movzx  eax,al
c00054cf:	89 c7                	mov    edi,eax
c00054d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054d5:	f7 f1                	div    ecx
c00054d7:	01 f8                	add    eax,edi
c00054d9:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00054dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00054e0:	83 ff 01             	cmp    edi,0x1
c00054e3:	76 05                	jbe    c00054ea <f_expand+0x86>
c00054e5:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00054e8:	77 05                	ja     c00054ef <f_expand+0x8b>
c00054ea:	bf 02 00 00 00       	mov    edi,0x2
c00054ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00054f2:	89 fd                	mov    ebp,edi
c00054f4:	31 c9                	xor    ecx,ecx
c00054f6:	89 ea                	mov    edx,ebp
c00054f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00054fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00054fe:	45                   	inc    ebp
c00054ff:	e8 c4 de ff ff       	call   c00033c8 <get_fat.isra.2>
c0005504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000550c:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000550f:	77 05                	ja     c0005516 <f_expand+0xb2>
c0005511:	bd 02 00 00 00       	mov    ebp,0x2
c0005516:	83 f8 01             	cmp    eax,0x1
c0005519:	74 20                	je     c000553b <f_expand+0xd7>
c000551b:	83 f8 ff             	cmp    eax,0xffffffff
c000551e:	74 25                	je     c0005545 <f_expand+0xe1>
c0005520:	85 c0                	test   eax,eax
c0005522:	75 09                	jne    c000552d <f_expand+0xc9>
c0005524:	41                   	inc    ecx
c0005525:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005529:	75 07                	jne    c0005532 <f_expand+0xce>
c000552b:	eb 1f                	jmp    c000554c <f_expand+0xe8>
c000552d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005530:	31 c9                	xor    ecx,ecx
c0005532:	39 fd                	cmp    ebp,edi
c0005534:	75 c0                	jne    c00054f6 <f_expand+0x92>
c0005536:	e9 64 ff ff ff       	jmp    c000549f <f_expand+0x3b>
c000553b:	be 02 00 00 00       	mov    esi,0x2
c0005540:	e9 82 00 00 00       	jmp    c00055c7 <f_expand+0x163>
c0005545:	be 01 00 00 00       	mov    esi,0x1
c000554a:	eb 7b                	jmp    c00055c7 <f_expand+0x163>
c000554c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005551:	74 2b                	je     c000557e <f_expand+0x11a>
c0005553:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005556:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000555a:	85 ed                	test   ebp,ebp
c000555c:	74 24                	je     c0005582 <f_expand+0x11e>
c000555e:	83 c9 ff             	or     ecx,0xffffffff
c0005561:	83 fd 01             	cmp    ebp,0x1
c0005564:	74 03                	je     c0005569 <f_expand+0x105>
c0005566:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005569:	89 fa                	mov    edx,edi
c000556b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000556f:	e8 c2 d3 ff ff       	call   c0002936 <put_fat>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 4d                	jne    c00055c5 <f_expand+0x161>
c0005578:	89 f8                	mov    eax,edi
c000557a:	4d                   	dec    ebp
c000557b:	47                   	inc    edi
c000557c:	eb dc                	jmp    c000555a <f_expand+0xf6>
c000557e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005581:	48                   	dec    eax
c0005582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005586:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000558b:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000558e:	74 37                	je     c00055c7 <f_expand+0x163>
c0005590:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005593:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005596:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000559a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000559d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055a0:	83 c8 40             	or     eax,0x40
c00055a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055a6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055a9:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055ac:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055af:	39 c8                	cmp    eax,ecx
c00055b1:	77 14                	ja     c00055c7 <f_expand+0x163>
c00055b3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055b7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055bd:	83 c8 01             	or     eax,0x1
c00055c0:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055c3:	eb 02                	jmp    c00055c7 <f_expand+0x163>
c00055c5:	89 c6                	mov    esi,eax
c00055c7:	83 c4 2c             	add    esp,0x2c
c00055ca:	89 f0                	mov    eax,esi
c00055cc:	5b                   	pop    ebx
c00055cd:	5e                   	pop    esi
c00055ce:	5f                   	pop    edi
c00055cf:	5d                   	pop    ebp
c00055d0:	c3                   	ret    

c00055d1 <f_mkfs>:
c00055d1:	55                   	push   ebp
c00055d2:	57                   	push   edi
c00055d3:	56                   	push   esi
c00055d4:	be 0b 00 00 00       	mov    esi,0xb
c00055d9:	53                   	push   ebx
c00055da:	83 ec 5c             	sub    esp,0x5c
c00055dd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00055e1:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00055e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00055e9:	e8 0e ce ff ff       	call   c00023fc <get_ldnumber>
c00055ee:	85 c0                	test   eax,eax
c00055f0:	0f 88 d1 07 00 00    	js     c0005dc7 <f_mkfs+0x7f6>
c00055f6:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00055fd:	85 d2                	test   edx,edx
c00055ff:	74 03                	je     c0005604 <f_mkfs+0x33>
c0005601:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005604:	85 db                	test   ebx,ebx
c0005606:	75 05                	jne    c000560d <f_mkfs+0x3c>
c0005608:	bb 40 f5 02 c0       	mov    ebx,0xc002f540
c000560d:	83 ec 0c             	sub    esp,0xc
c0005610:	0f b6 c0             	movzx  eax,al
c0005613:	be 03 00 00 00       	mov    esi,0x3
c0005618:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000561c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005620:	e8 18 c9 ff ff       	call   c0001f3d <disk_initialize>
c0005625:	83 c4 10             	add    esp,0x10
c0005628:	a8 01                	test   al,0x1
c000562a:	0f 85 97 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c0005630:	be 0a 00 00 00       	mov    esi,0xa
c0005635:	a8 04                	test   al,0x4
c0005637:	0f 85 8a 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c000563d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005640:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005644:	85 c0                	test   eax,eax
c0005646:	75 20                	jne    c0005668 <f_mkfs+0x97>
c0005648:	51                   	push   ecx
c0005649:	8d 44 24 44          	lea    eax,[esp+0x44]
c000564d:	50                   	push   eax
c000564e:	6a 03                	push   0x3
c0005650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005654:	e8 13 c9 ff ff       	call   c0001f6c <disk_ioctl>
c0005659:	83 c4 10             	add    esp,0x10
c000565c:	85 c0                	test   eax,eax
c000565e:	74 08                	je     c0005668 <f_mkfs+0x97>
c0005660:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005668:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000566c:	8d 42 ff             	lea    eax,[edx-0x1]
c000566f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005674:	77 04                	ja     c000567a <f_mkfs+0xa9>
c0005676:	85 c2                	test   edx,eax
c0005678:	74 08                	je     c0005682 <f_mkfs+0xb1>
c000567a:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005682:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005685:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005689:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000568d:	48                   	dec    eax
c000568e:	3c 01                	cmp    al,0x1
c0005690:	76 05                	jbe    c0005697 <f_mkfs+0xc6>
c0005692:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000569a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000569e:	48                   	dec    eax
c000569f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a4:	77 07                	ja     c00056ad <f_mkfs+0xdc>
c00056a6:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056ab:	74 08                	je     c00056b5 <f_mkfs+0xe4>
c00056ad:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056b5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056b8:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056be:	77 07                	ja     c00056c7 <f_mkfs+0xf6>
c00056c0:	8d 47 ff             	lea    eax,[edi-0x1]
c00056c3:	85 f8                	test   eax,edi
c00056c5:	74 02                	je     c00056c9 <f_mkfs+0xf8>
c00056c7:	31 ff                	xor    edi,edi
c00056c9:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c00056d1:	77 0a                	ja     c00056dd <f_mkfs+0x10c>
c00056d3:	be 11 00 00 00       	mov    esi,0x11
c00056d8:	e9 ea 06 00 00       	jmp    c0005dc7 <f_mkfs+0x7f6>
c00056dd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00056df:	85 ed                	test   ebp,ebp
c00056e1:	89 eb                	mov    ebx,ebp
c00056e3:	75 1e                	jne    c0005703 <f_mkfs+0x132>
c00056e5:	83 ec 0c             	sub    esp,0xc
c00056e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00056ef:	25 00 fe ff ff       	and    eax,0xfffffe00
c00056f4:	50                   	push   eax
c00056f5:	e8 da 06 00 00       	call   c0005dd4 <ff_memalloc>
c00056fa:	83 c4 10             	add    esp,0x10
c00056fd:	89 c3                	mov    ebx,eax
c00056ff:	85 c0                	test   eax,eax
c0005701:	74 d0                	je     c00056d3 <f_mkfs+0x102>
c0005703:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000570b:	52                   	push   edx
c000570c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005710:	50                   	push   eax
c0005711:	6a 01                	push   0x1
c0005713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005717:	e8 50 c8 ff ff       	call   c0001f6c <disk_ioctl>
c000571c:	83 c4 10             	add    esp,0x10
c000571f:	85 c0                	test   eax,eax
c0005721:	0f 85 49 06 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005727:	89 f0                	mov    eax,esi
c0005729:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005731:	83 e0 08             	and    eax,0x8
c0005734:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005738:	75 18                	jne    c0005752 <f_mkfs+0x181>
c000573a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000573e:	83 f8 3f             	cmp    eax,0x3f
c0005741:	76 0f                	jbe    c0005752 <f_mkfs+0x181>
c0005743:	83 e8 3f             	sub    eax,0x3f
c0005746:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000574e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005752:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000575a:	83 f8 7f             	cmp    eax,0x7f
c000575d:	0f 86 5b 02 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c0005763:	b9 80 00 00 00       	mov    ecx,0x80
c0005768:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000576e:	77 05                	ja     c0005775 <f_mkfs+0x1a4>
c0005770:	c1 ef 09             	shr    edi,0x9
c0005773:	89 f9                	mov    ecx,edi
c0005775:	89 f0                	mov    eax,esi
c0005777:	89 f7                	mov    edi,esi
c0005779:	83 e0 01             	and    eax,0x1
c000577c:	83 e7 02             	and    edi,0x2
c000577f:	0f b6 c0             	movzx  eax,al
c0005782:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005786:	74 0a                	je     c0005792 <f_mkfs+0x1c1>
c0005788:	85 c0                	test   eax,eax
c000578a:	0f 84 4f 01 00 00    	je     c00058df <f_mkfs+0x30e>
c0005790:	eb 37                	jmp    c00057c9 <f_mkfs+0x1f8>
c0005792:	be 13 00 00 00       	mov    esi,0x13
c0005797:	85 c0                	test   eax,eax
c0005799:	75 2e                	jne    c00057c9 <f_mkfs+0x1f8>
c000579b:	e9 e7 05 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00057a0:	83 f8 02             	cmp    eax,0x2
c00057a3:	0f 85 0d 02 00 00    	jne    c00059b6 <f_mkfs+0x3e5>
c00057a9:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057af:	0f 86 e4 01 00 00    	jbe    c0005999 <f_mkfs+0x3c8>
c00057b5:	85 c9                	test   ecx,ecx
c00057b7:	0f 85 dc 05 00 00    	jne    c0005d99 <f_mkfs+0x7c8>
c00057bd:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057c0:	83 f9 40             	cmp    ecx,0x40
c00057c3:	0f 87 e0 05 00 00    	ja     c0005da9 <f_mkfs+0x7d8>
c00057c9:	89 cf                	mov    edi,ecx
c00057cb:	85 c9                	test   ecx,ecx
c00057cd:	75 1c                	jne    c00057eb <f_mkfs+0x21a>
c00057cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00057d3:	b8 20 f5 02 c0       	mov    eax,0xc002f520
c00057d8:	c1 ee 0c             	shr    esi,0xc
c00057db:	bf 01 00 00 00       	mov    edi,0x1
c00057e0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00057e3:	85 d2                	test   edx,edx
c00057e5:	0f 85 63 01 00 00    	jne    c000594e <f_mkfs+0x37d>
c00057eb:	31 d2                	xor    edx,edx
c00057ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057f1:	f7 f7                	div    edi
c00057f3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f8:	0f 86 62 01 00 00    	jbe    c0005960 <f_mkfs+0x38f>
c00057fe:	83 c0 02             	add    eax,0x2
c0005801:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005806:	01 c0                	add    eax,eax
c0005808:	05 ff 01 00 00       	add    eax,0x1ff
c000580d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005815:	c1 e8 09             	shr    eax,0x9
c0005818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000581c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005820:	c1 e0 05             	shl    eax,0x5
c0005823:	c1 e8 09             	shr    eax,0x9
c0005826:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000582a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000582f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000583b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000583f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005843:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005848:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000584c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005850:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005854:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000585c:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005860:	f7 d8                	neg    eax
c0005862:	21 c6                	and    esi,eax
c0005864:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005869:	29 d6                	sub    esi,edx
c000586b:	83 f8 03             	cmp    eax,0x3
c000586e:	0f 85 ff 00 00 00    	jne    c0005973 <f_mkfs+0x3a2>
c0005874:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005878:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c000587c:	89 f8                	mov    eax,edi
c000587e:	c1 e0 04             	shl    eax,0x4
c0005881:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005885:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005889:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000588d:	0f 82 2b 01 00 00    	jb     c00059be <f_mkfs+0x3ed>
c0005893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000589b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000589f:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058a4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058a8:	29 d0                	sub    eax,edx
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	f7 f7                	div    edi
c00058ae:	89 c6                	mov    esi,eax
c00058b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058b5:	83 f8 03             	cmp    eax,0x3
c00058b8:	0f 85 e2 fe ff ff    	jne    c00057a0 <f_mkfs+0x1cf>
c00058be:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058c4:	0f 87 03 01 00 00    	ja     c00059cd <f_mkfs+0x3fc>
c00058ca:	85 c9                	test   ecx,ecx
c00058cc:	0f 85 ec 00 00 00    	jne    c00059be <f_mkfs+0x3ed>
c00058d2:	83 ff 01             	cmp    edi,0x1
c00058d5:	0f 86 e3 00 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c00058db:	d1 ef                	shr    edi,1
c00058dd:	89 f9                	mov    ecx,edi
c00058df:	89 ce                	mov    esi,ecx
c00058e1:	85 c9                	test   ecx,ecx
c00058e3:	75 25                	jne    c000590a <f_mkfs+0x339>
c00058e5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00058e9:	b8 30 f5 02 c0       	mov    eax,0xc002f530
c00058ee:	c1 ee 11             	shr    esi,0x11
c00058f1:	b9 01 00 00 00       	mov    ecx,0x1
c00058f6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00058f9:	85 d2                	test   edx,edx
c00058fb:	74 0b                	je     c0005908 <f_mkfs+0x337>
c00058fd:	83 c0 02             	add    eax,0x2
c0005900:	39 f2                	cmp    edx,esi
c0005902:	77 04                	ja     c0005908 <f_mkfs+0x337>
c0005904:	01 c9                	add    ecx,ecx
c0005906:	eb ee                	jmp    c00058f6 <f_mkfs+0x325>
c0005908:	31 f6                	xor    esi,esi
c000590a:	31 d2                	xor    edx,edx
c000590c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005910:	f7 f1                	div    ecx
c0005912:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005919:	2d f6 ff 00 00       	sub    eax,0xfff6
c000591e:	c1 ea 09             	shr    edx,0x9
c0005921:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005926:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000592a:	0f 87 8e 00 00 00    	ja     c00059be <f_mkfs+0x3ed>
c0005930:	89 cf                	mov    edi,ecx
c0005932:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000593a:	89 f1                	mov    ecx,esi
c000593c:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005944:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005949:	e9 dc fe ff ff       	jmp    c000582a <f_mkfs+0x259>
c000594e:	83 c0 02             	add    eax,0x2
c0005951:	39 f2                	cmp    edx,esi
c0005953:	0f 87 92 fe ff ff    	ja     c00057eb <f_mkfs+0x21a>
c0005959:	01 ff                	add    edi,edi
c000595b:	e9 80 fe ff ff       	jmp    c00057e0 <f_mkfs+0x20f>
c0005960:	8d 04 40             	lea    eax,[eax+eax*2]
c0005963:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005968:	40                   	inc    eax
c0005969:	d1 e8                	shr    eax,1
c000596b:	83 c0 03             	add    eax,0x3
c000596e:	e9 95 fe ff ff       	jmp    c0005808 <f_mkfs+0x237>
c0005973:	31 d2                	xor    edx,edx
c0005975:	89 f0                	mov    eax,esi
c0005977:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000597b:	85 d2                	test   edx,edx
c000597d:	74 09                	je     c0005988 <f_mkfs+0x3b7>
c000597f:	4e                   	dec    esi
c0005980:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005984:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005988:	89 f0                	mov    eax,esi
c000598a:	31 d2                	xor    edx,edx
c000598c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005990:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005994:	e9 e3 fe ff ff       	jmp    c000587c <f_mkfs+0x2ab>
c0005999:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000599f:	77 2c                	ja     c00059cd <f_mkfs+0x3fc>
c00059a1:	85 c9                	test   ecx,ecx
c00059a3:	75 19                	jne    c00059be <f_mkfs+0x3ed>
c00059a5:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059a8:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059ae:	0f 86 15 fe ff ff    	jbe    c00057c9 <f_mkfs+0x1f8>
c00059b4:	eb 08                	jmp    c00059be <f_mkfs+0x3ed>
c00059b6:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059bc:	76 0a                	jbe    c00059c8 <f_mkfs+0x3f7>
c00059be:	be 0e 00 00 00       	mov    esi,0xe
c00059c3:	e9 bf 03 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00059c8:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059cd:	31 d2                	xor    edx,edx
c00059cf:	b9 00 02 00 00       	mov    ecx,0x200
c00059d4:	89 d8                	mov    eax,ebx
c00059d6:	e8 f1 c5 ff ff       	call   c0001fcc <mem_set>
c00059db:	b9 0b 00 00 00       	mov    ecx,0xb
c00059e0:	ba e2 f4 02 c0       	mov    edx,0xc002f4e2
c00059e5:	89 d8                	mov    eax,ebx
c00059e7:	e8 cb c5 ff ff       	call   c0001fb7 <mem_cpy>
c00059ec:	8d 43 0b             	lea    eax,[ebx+0xb]
c00059ef:	ba 00 02 00 00       	mov    edx,0x200
c00059f4:	e8 b7 c5 ff ff       	call   c0001fb0 <st_word>
c00059f9:	89 f8                	mov    eax,edi
c00059fb:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a00:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a03:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a06:	e8 a5 c5 ff ff       	call   c0001fb0 <st_word>
c0005a0b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a0f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a12:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a17:	83 f8 03             	cmp    eax,0x3
c0005a1a:	75 08                	jne    c0005a24 <f_mkfs+0x453>
c0005a1c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a28:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a2b:	e8 80 c5 ff ff       	call   c0001fb0 <st_word>
c0005a30:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a34:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a3a:	77 0a                	ja     c0005a46 <f_mkfs+0x475>
c0005a3c:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a3f:	e8 6c c5 ff ff       	call   c0001fb0 <st_word>
c0005a44:	eb 08                	jmp    c0005a4e <f_mkfs+0x47d>
c0005a46:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a49:	e8 66 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a4e:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a51:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a56:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a5a:	e8 51 c5 ff ff       	call   c0001fb0 <st_word>
c0005a5f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a62:	ba ff 00 00 00       	mov    edx,0xff
c0005a67:	e8 44 c5 ff ff       	call   c0001fb0 <st_word>
c0005a6c:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005a6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a73:	e8 3c c5 ff ff       	call   c0001fb4 <st_dword>
c0005a78:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a7d:	83 f8 03             	cmp    eax,0x3
c0005a80:	75 57                	jne    c0005ad9 <f_mkfs+0x508>
c0005a82:	8d 43 43             	lea    eax,[ebx+0x43]
c0005a85:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a8a:	e8 25 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a8f:	8d 43 24             	lea    eax,[ebx+0x24]
c0005a92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a96:	e8 19 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a9b:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005a9e:	ba 02 00 00 00       	mov    edx,0x2
c0005aa3:	e8 0c c5 ff ff       	call   c0001fb4 <st_dword>
c0005aa8:	8d 43 30             	lea    eax,[ebx+0x30]
c0005aab:	ba 01 00 00 00       	mov    edx,0x1
c0005ab0:	e8 fb c4 ff ff       	call   c0001fb0 <st_word>
c0005ab5:	8d 43 32             	lea    eax,[ebx+0x32]
c0005ab8:	ba 06 00 00 00       	mov    edx,0x6
c0005abd:	e8 ee c4 ff ff       	call   c0001fb0 <st_word>
c0005ac2:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ac6:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aca:	8d 43 47             	lea    eax,[ebx+0x47]
c0005acd:	b9 13 00 00 00       	mov    ecx,0x13
c0005ad2:	ba ee f4 02 c0       	mov    edx,0xc002f4ee
c0005ad7:	eb 2f                	jmp    c0005b08 <f_mkfs+0x537>
c0005ad9:	8d 43 27             	lea    eax,[ebx+0x27]
c0005adc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ae1:	e8 ce c4 ff ff       	call   c0001fb4 <st_dword>
c0005ae6:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005aeb:	8d 43 16             	lea    eax,[ebx+0x16]
c0005aee:	e8 bd c4 ff ff       	call   c0001fb0 <st_word>
c0005af3:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005af7:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005afb:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005afe:	b9 13 00 00 00       	mov    ecx,0x13
c0005b03:	ba 02 f5 02 c0       	mov    edx,0xc002f502
c0005b08:	e8 aa c4 ff ff       	call   c0001fb7 <mem_cpy>
c0005b0d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b13:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b1c:	e8 8f c4 ff ff       	call   c0001fb0 <st_word>
c0005b21:	6a 01                	push   0x1
c0005b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b27:	53                   	push   ebx
c0005b28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b2c:	e8 25 c4 ff ff       	call   c0001f56 <disk_write>
c0005b31:	83 c4 10             	add    esp,0x10
c0005b34:	85 c0                	test   eax,eax
c0005b36:	0f 85 34 02 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005b3c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b41:	83 f8 03             	cmp    eax,0x3
c0005b44:	0f 85 98 00 00 00    	jne    c0005be2 <f_mkfs+0x611>
c0005b4a:	6a 01                	push   0x1
c0005b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b50:	83 c0 06             	add    eax,0x6
c0005b53:	50                   	push   eax
c0005b54:	53                   	push   ebx
c0005b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b59:	e8 f8 c3 ff ff       	call   c0001f56 <disk_write>
c0005b5e:	b9 00 02 00 00       	mov    ecx,0x200
c0005b63:	31 d2                	xor    edx,edx
c0005b65:	89 d8                	mov    eax,ebx
c0005b67:	e8 60 c4 ff ff       	call   c0001fcc <mem_set>
c0005b6c:	ba 52 52 61 41       	mov    edx,0x41615252
c0005b71:	89 d8                	mov    eax,ebx
c0005b73:	e8 3c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b78:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005b7e:	ba 72 72 41 61       	mov    edx,0x61417272
c0005b83:	e8 2c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b88:	8d 56 ff             	lea    edx,[esi-0x1]
c0005b8b:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005b91:	e8 1e c4 ff ff       	call   c0001fb4 <st_dword>
c0005b96:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005b9c:	ba 02 00 00 00       	mov    edx,0x2
c0005ba1:	e8 0e c4 ff ff       	call   c0001fb4 <st_dword>
c0005ba6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005bab:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005bb1:	e8 fa c3 ff ff       	call   c0001fb0 <st_word>
c0005bb6:	6a 01                	push   0x1
c0005bb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bbc:	83 c0 07             	add    eax,0x7
c0005bbf:	50                   	push   eax
c0005bc0:	53                   	push   ebx
c0005bc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bc5:	e8 8c c3 ff ff       	call   c0001f56 <disk_write>
c0005bca:	83 c4 20             	add    esp,0x20
c0005bcd:	6a 01                	push   0x1
c0005bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bd3:	40                   	inc    eax
c0005bd4:	50                   	push   eax
c0005bd5:	53                   	push   ebx
c0005bd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bda:	e8 77 c3 ff ff       	call   c0001f56 <disk_write>
c0005bdf:	83 c4 10             	add    esp,0x10
c0005be2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005be6:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005bea:	c1 e8 09             	shr    eax,0x9
c0005bed:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf7:	31 d2                	xor    edx,edx
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	e8 cc c3 ff ff       	call   c0001fcc <mem_set>
c0005c00:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c05:	31 c9                	xor    ecx,ecx
c0005c07:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c0f:	83 f8 01             	cmp    eax,0x1
c0005c12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c16:	0f 94 c1             	sete   cl
c0005c19:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c1d:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c21:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c29:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c31:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c36:	75 21                	jne    c0005c59 <f_mkfs+0x688>
c0005c38:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c3d:	89 d8                	mov    eax,ebx
c0005c3f:	e8 70 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c44:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c47:	83 ca ff             	or     edx,0xffffffff
c0005c4a:	e8 65 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c4f:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c52:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c57:	eb 06                	jmp    c0005c5f <f_mkfs+0x68e>
c0005c59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c5d:	89 d8                	mov    eax,ebx
c0005c5f:	e8 50 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005c6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005c70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c74:	39 ce                	cmp    esi,ecx
c0005c76:	76 02                	jbe    c0005c7a <f_mkfs+0x6a9>
c0005c78:	89 ce                	mov    esi,ecx
c0005c7a:	56                   	push   esi
c0005c7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c7f:	53                   	push   ebx
c0005c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c84:	e8 cd c2 ff ff       	call   c0001f56 <disk_write>
c0005c89:	83 c4 10             	add    esp,0x10
c0005c8c:	85 c0                	test   eax,eax
c0005c8e:	0f 85 dc 00 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005c94:	31 d2                	xor    edx,edx
c0005c96:	b9 00 02 00 00       	mov    ecx,0x200
c0005c9b:	89 d8                	mov    eax,ebx
c0005c9d:	e8 2a c3 ff ff       	call   c0001fcc <mem_set>
c0005ca2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ca6:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005caa:	75 c0                	jne    c0005c6c <f_mkfs+0x69b>
c0005cac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005cb0:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005cb8:	40                   	inc    eax
c0005cb9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cbd:	0f 87 6e ff ff ff    	ja     c0005c31 <f_mkfs+0x660>
c0005cc3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cc8:	83 f8 03             	cmp    eax,0x3
c0005ccb:	74 04                	je     c0005cd1 <f_mkfs+0x700>
c0005ccd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005cd1:	89 fe                	mov    esi,edi
c0005cd3:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005cd7:	76 04                	jbe    c0005cdd <f_mkfs+0x70c>
c0005cd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005cdd:	56                   	push   esi
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 6a c2 ff ff       	call   c0001f56 <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	75 7d                	jne    c0005d70 <f_mkfs+0x79f>
c0005cf3:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cf7:	29 f7                	sub    edi,esi
c0005cf9:	75 d6                	jne    c0005cd1 <f_mkfs+0x700>
c0005cfb:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d00:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d05:	83 f8 03             	cmp    eax,0x3
c0005d08:	74 1e                	je     c0005d28 <f_mkfs+0x757>
c0005d0a:	b9 06 00 00 00       	mov    ecx,0x6
c0005d0f:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d17:	77 0f                	ja     c0005d28 <f_mkfs+0x757>
c0005d19:	b9 04 00 00 00       	mov    ecx,0x4
c0005d1e:	83 f8 02             	cmp    eax,0x2
c0005d21:	74 05                	je     c0005d28 <f_mkfs+0x757>
c0005d23:	b9 01 00 00 00       	mov    ecx,0x1
c0005d28:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d2d:	75 2a                	jne    c0005d59 <f_mkfs+0x788>
c0005d2f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d33:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d3b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d3f:	83 ec 0c             	sub    esp,0xc
c0005d42:	53                   	push   ebx
c0005d43:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4b:	e8 89 d2 ff ff       	call   c0002fd9 <create_partition>
c0005d50:	83 c4 10             	add    esp,0x10
c0005d53:	89 c6                	mov    esi,eax
c0005d55:	85 c0                	test   eax,eax
c0005d57:	75 2e                	jne    c0005d87 <f_mkfs+0x7b6>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	50                   	push   eax
c0005d5c:	6a 00                	push   0x0
c0005d5e:	6a 00                	push   0x0
c0005d60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d64:	e8 03 c2 ff ff       	call   c0001f6c <disk_ioctl>
c0005d69:	83 c4 10             	add    esp,0x10
c0005d6c:	85 c0                	test   eax,eax
c0005d6e:	74 17                	je     c0005d87 <f_mkfs+0x7b6>
c0005d70:	85 ed                	test   ebp,ebp
c0005d72:	75 0c                	jne    c0005d80 <f_mkfs+0x7af>
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	e8 6f 00 00 00       	call   c0005dec <ff_memfree>
c0005d7d:	83 c4 10             	add    esp,0x10
c0005d80:	be 01 00 00 00       	mov    esi,0x1
c0005d85:	eb 40                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d87:	85 ed                	test   ebp,ebp
c0005d89:	75 3c                	jne    c0005dc7 <f_mkfs+0x7f6>
c0005d8b:	83 ec 0c             	sub    esp,0xc
c0005d8e:	53                   	push   ebx
c0005d8f:	e8 58 00 00 00       	call   c0005dec <ff_memfree>
c0005d94:	83 c4 10             	add    esp,0x10
c0005d97:	eb 2e                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d99:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d9e:	0f 85 3b fb ff ff    	jne    c00058df <f_mkfs+0x30e>
c0005da4:	e9 15 fc ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005da9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dae:	0f 85 31 fb ff ff    	jne    c00058e5 <f_mkfs+0x314>
c0005db4:	89 cf                	mov    edi,ecx
c0005db6:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005dbc:	0f 86 29 fa ff ff    	jbe    c00057eb <f_mkfs+0x21a>
c0005dc2:	e9 f7 fb ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005dc7:	83 c4 5c             	add    esp,0x5c
c0005dca:	89 f0                	mov    eax,esi
c0005dcc:	5b                   	pop    ebx
c0005dcd:	5e                   	pop    esi
c0005dce:	5f                   	pop    edi
c0005dcf:	5d                   	pop    ebp
c0005dd0:	c3                   	ret    
c0005dd1:	66 90                	xchg   ax,ax
c0005dd3:	90                   	nop

c0005dd4 <ff_memalloc>:
c0005dd4:	83 ec 0c             	sub    esp,0xc
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005dde:	e8 d7 05 01 00       	call   c00163ba <malloc>
c0005de3:	83 c4 10             	add    esp,0x10
c0005de6:	83 c4 0c             	add    esp,0xc
c0005de9:	c3                   	ret    
c0005dea:	66 90                	xchg   ax,ax

c0005dec <ff_memfree>:
c0005dec:	83 ec 0c             	sub    esp,0xc
c0005def:	83 ec 0c             	sub    esp,0xc
c0005df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005df6:	e8 cf 05 01 00       	call   c00163ca <free>
c0005dfb:	83 c4 10             	add    esp,0x10
c0005dfe:	90                   	nop
c0005dff:	83 c4 0c             	add    esp,0xc
c0005e02:	c3                   	ret    
c0005e03:	90                   	nop

c0005e04 <ff_uni2oem>:
c0005e04:	83 ec 14             	sub    esp,0x14
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e0f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e16:	c7 44 24 0c 20 f9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f920
c0005e1e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e23:	77 0b                	ja     c0005e30 <ff_uni2oem+0x2c>
c0005e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e2e:	eb 68                	jmp    c0005e98 <ff_uni2oem+0x94>
c0005e30:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e38:	77 5e                	ja     c0005e98 <ff_uni2oem+0x94>
c0005e3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e3e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e43:	75 53                	jne    c0005e98 <ff_uni2oem+0x94>
c0005e45:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4c:	eb 12                	jmp    c0005e60 <ff_uni2oem+0x5c>
c0005e4e:	66 90                	xchg   ax,ax
c0005e50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e55:	83 c0 01             	add    eax,0x1
c0005e58:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e60:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e65:	83 f8 7f             	cmp    eax,0x7f
c0005e68:	77 1e                	ja     c0005e88 <ff_uni2oem+0x84>
c0005e6a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e6f:	01 c0                	add    eax,eax
c0005e71:	89 c2                	mov    edx,eax
c0005e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e77:	01 d0                	add    eax,edx
c0005e79:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7c:	0f b7 c0             	movzx  eax,ax
c0005e7f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005e83:	75 cb                	jne    c0005e50 <ff_uni2oem+0x4c>
c0005e85:	8d 76 00             	lea    esi,[esi+0x0]
c0005e88:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e8d:	83 e8 80             	sub    eax,0xffffff80
c0005e90:	0f b6 c0             	movzx  eax,al
c0005e93:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e98:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e9d:	83 c4 14             	add    esp,0x14
c0005ea0:	c3                   	ret    
c0005ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ea4 <ff_oem2uni>:
c0005ea4:	83 ec 18             	sub    esp,0x18
c0005ea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005eaf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005eb4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eb8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ebf:	c7 44 24 10 20 f9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f920
c0005ec7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ecc:	83 f8 7f             	cmp    eax,0x7f
c0005ecf:	77 0b                	ja     c0005edc <ff_oem2uni+0x38>
c0005ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ed5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005eda:	eb 34                	jmp    c0005f10 <ff_oem2uni+0x6c>
c0005edc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005ee0:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ee5:	75 29                	jne    c0005f10 <ff_oem2uni+0x6c>
c0005ee7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005eec:	3d ff 00 00 00       	cmp    eax,0xff
c0005ef1:	77 1d                	ja     c0005f10 <ff_oem2uni+0x6c>
c0005ef3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005efd:	01 c0                	add    eax,eax
c0005eff:	89 c2                	mov    edx,eax
c0005f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f05:	01 d0                	add    eax,edx
c0005f07:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f0a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0f:	90                   	nop
c0005f10:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f15:	83 c4 18             	add    esp,0x18
c0005f18:	c3                   	ret    
c0005f19:	8d 76 00             	lea    esi,[esi+0x0]

c0005f1c <ff_wtoupper>:
c0005f1c:	83 ec 10             	sub    esp,0x10
c0005f1f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f27:	0f 87 ab 01 00 00    	ja     c00060d8 <ff_wtoupper+0x1bc>
c0005f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f31:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f36:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f3b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f40:	77 0a                	ja     c0005f4c <ff_wtoupper+0x30>
c0005f42:	b8 20 f7 02 c0       	mov    eax,0xc002f720
c0005f47:	eb 0b                	jmp    c0005f54 <ff_wtoupper+0x38>
c0005f49:	8d 76 00             	lea    esi,[esi+0x0]
c0005f4c:	b8 60 f6 02 c0       	mov    eax,0xc002f660
c0005f51:	8d 76 00             	lea    esi,[esi+0x0]
c0005f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f5c:	8d 50 02             	lea    edx,[eax+0x2]
c0005f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f63:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f66:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f6b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f70:	85 c0                	test   eax,eax
c0005f72:	0f 84 54 01 00 00    	je     c00060cc <ff_wtoupper+0x1b0>
c0005f78:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f7d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f82:	39 c2                	cmp    edx,eax
c0005f84:	0f 82 42 01 00 00    	jb     c00060cc <ff_wtoupper+0x1b0>
c0005f8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8e:	8d 50 02             	lea    edx,[eax+0x2]
c0005f91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f98:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f9d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fa2:	c1 e8 08             	shr    eax,0x8
c0005fa5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005faa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005faf:	0f b6 c0             	movzx  eax,al
c0005fb2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fb7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005fbc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005fc1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005fc6:	01 ca                	add    edx,ecx
c0005fc8:	39 d0                	cmp    eax,edx
c0005fca:	0f 8d d8 00 00 00    	jge    c00060a8 <ff_wtoupper+0x18c>
c0005fd0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005fd5:	83 f8 08             	cmp    eax,0x8
c0005fd8:	0f 87 ea 00 00 00    	ja     c00060c8 <ff_wtoupper+0x1ac>
c0005fde:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0005fe5:	ff e0                	jmp    eax
c0005fe7:	90                   	nop
c0005fe8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fed:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ff2:	29 c2                	sub    edx,eax
c0005ff4:	89 d0                	mov    eax,edx
c0005ff6:	01 c0                	add    eax,eax
c0005ff8:	89 c2                	mov    edx,eax
c0005ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ffe:	01 d0                	add    eax,edx
c0006000:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006003:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006008:	e9 97 00 00 00       	jmp    c00060a4 <ff_wtoupper+0x188>
c000600d:	8d 76 00             	lea    esi,[esi+0x0]
c0006010:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006019:	89 d1                	mov    ecx,edx
c000601b:	29 c1                	sub    ecx,eax
c000601d:	89 c8                	mov    eax,ecx
c000601f:	83 e0 01             	and    eax,0x1
c0006022:	89 c2                	mov    edx,eax
c0006024:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006029:	29 d0                	sub    eax,edx
c000602b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006030:	eb 72                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006032:	66 90                	xchg   ax,ax
c0006034:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006039:	83 e8 10             	sub    eax,0x10
c000603c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006041:	eb 61                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006043:	90                   	nop
c0006044:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006049:	83 e8 20             	sub    eax,0x20
c000604c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006051:	eb 51                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006053:	90                   	nop
c0006054:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006059:	83 e8 30             	sub    eax,0x30
c000605c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006061:	eb 41                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006063:	90                   	nop
c0006064:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006069:	83 e8 1a             	sub    eax,0x1a
c000606c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006071:	eb 31                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006073:	90                   	nop
c0006074:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006079:	83 c0 08             	add    eax,0x8
c000607c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006081:	eb 21                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006083:	90                   	nop
c0006084:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006089:	83 e8 50             	sub    eax,0x50
c000608c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006091:	eb 11                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006093:	90                   	nop
c0006094:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006099:	2d 60 1c 00 00       	sub    eax,0x1c60
c000609e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a3:	90                   	nop
c00060a4:	eb 22                	jmp    c00060c8 <ff_wtoupper+0x1ac>
c00060a6:	66 90                	xchg   ax,ax
c00060a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ad:	85 c0                	test   eax,eax
c00060af:	0f 85 a3 fe ff ff    	jne    c0005f58 <ff_wtoupper+0x3c>
c00060b5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ba:	01 c0                	add    eax,eax
c00060bc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060c0:	e9 93 fe ff ff       	jmp    c0005f58 <ff_wtoupper+0x3c>
c00060c5:	8d 76 00             	lea    esi,[esi+0x0]
c00060c8:	90                   	nop
c00060c9:	8d 76 00             	lea    esi,[esi+0x0]
c00060cc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060d5:	8d 76 00             	lea    esi,[esi+0x0]
c00060d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	c3                   	ret    

c00060e0 <utf2ucs>:
c00060e0:	57                   	push   edi
c00060e1:	31 c9                	xor    ecx,ecx
c00060e3:	56                   	push   esi
c00060e4:	89 d7                	mov    edi,edx
c00060e6:	53                   	push   ebx
c00060e7:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00060eb:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00060ef:	89 de                	mov    esi,ebx
c00060f1:	c1 fe 08             	sar    esi,0x8
c00060f4:	89 f2                	mov    edx,esi
c00060f6:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00060f9:	41                   	inc    ecx
c00060fa:	85 db                	test   ebx,ebx
c00060fc:	75 e9                	jne    c00060e7 <utf2ucs+0x7>
c00060fe:	5b                   	pop    ebx
c00060ff:	5e                   	pop    esi
c0006100:	5f                   	pop    edi
c0006101:	c3                   	ret    

c0006102 <ucs2utfn>:
c0006102:	83 e1 fe             	and    ecx,0xfffffffe
c0006105:	01 d1                	add    ecx,edx
c0006107:	39 d1                	cmp    ecx,edx
c0006109:	75 04                	jne    c000610f <ucs2utfn+0xd>
c000610b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000610e:	c3                   	ret    
c000610f:	57                   	push   edi
c0006110:	56                   	push   esi
c0006111:	53                   	push   ebx
c0006112:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006115:	83 c2 02             	add    edx,0x2
c0006118:	89 de                	mov    esi,ebx
c000611a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000611e:	c1 e6 08             	shl    esi,0x8
c0006121:	09 f3                	or     ebx,esi
c0006123:	83 fb 3b             	cmp    ebx,0x3b
c0006126:	74 50                	je     c0006178 <ucs2utfn+0x76>
c0006128:	83 fb 7f             	cmp    ebx,0x7f
c000612b:	7f 05                	jg     c0006132 <ucs2utfn+0x30>
c000612d:	88 18                	mov    BYTE PTR [eax],bl
c000612f:	40                   	inc    eax
c0006130:	eb 42                	jmp    c0006174 <ucs2utfn+0x72>
c0006132:	89 de                	mov    esi,ebx
c0006134:	89 df                	mov    edi,ebx
c0006136:	c1 fe 06             	sar    esi,0x6
c0006139:	83 e7 3f             	and    edi,0x3f
c000613c:	83 cf 80             	or     edi,0xffffff80
c000613f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006145:	7f 12                	jg     c0006159 <ucs2utfn+0x57>
c0006147:	83 ce c0             	or     esi,0xffffffc0
c000614a:	83 c0 02             	add    eax,0x2
c000614d:	89 f3                	mov    ebx,esi
c000614f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006152:	89 fb                	mov    ebx,edi
c0006154:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006157:	eb 1b                	jmp    c0006174 <ucs2utfn+0x72>
c0006159:	c1 fb 0c             	sar    ebx,0xc
c000615c:	83 e6 3f             	and    esi,0x3f
c000615f:	83 cb e0             	or     ebx,0xffffffe0
c0006162:	83 ce 80             	or     esi,0xffffff80
c0006165:	88 18                	mov    BYTE PTR [eax],bl
c0006167:	89 f3                	mov    ebx,esi
c0006169:	83 c0 03             	add    eax,0x3
c000616c:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000616f:	89 fb                	mov    ebx,edi
c0006171:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006174:	39 d1                	cmp    ecx,edx
c0006176:	75 9a                	jne    c0006112 <ucs2utfn+0x10>
c0006178:	5b                   	pop    ebx
c0006179:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000617c:	5e                   	pop    esi
c000617d:	5f                   	pop    edi
c000617e:	c3                   	ret    

c000617f <isjoliet>:
c000617f:	31 d2                	xor    edx,edx
c0006181:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006184:	75 26                	jne    c00061ac <isjoliet+0x2d>
c0006186:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c000618a:	75 20                	jne    c00061ac <isjoliet+0x2d>
c000618c:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006190:	ba 02 00 00 00       	mov    edx,0x2
c0006195:	83 f8 43             	cmp    eax,0x43
c0006198:	74 12                	je     c00061ac <isjoliet+0x2d>
c000619a:	ba 03 00 00 00       	mov    edx,0x3
c000619f:	83 f8 45             	cmp    eax,0x45
c00061a2:	74 08                	je     c00061ac <isjoliet+0x2d>
c00061a4:	31 d2                	xor    edx,edx
c00061a6:	83 f8 40             	cmp    eax,0x40
c00061a9:	0f 94 c2             	sete   dl
c00061ac:	89 d0                	mov    eax,edx
c00061ae:	c3                   	ret    

c00061af <htohl_32>:
c00061af:	8b 00                	mov    eax,DWORD PTR [eax]
c00061b1:	c3                   	ret    

c00061b2 <iso_733>:
c00061b2:	eb fb                	jmp    c00061af <htohl_32>

c00061b4 <bgrad_cache>:
c00061b4:	83 fa 0e             	cmp    edx,0xe
c00061b7:	77 16                	ja     c00061cf <bgrad_cache+0x1b>
c00061b9:	53                   	push   ebx
c00061ba:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061bd:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061c1:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061c4:	42                   	inc    edx
c00061c5:	83 fa 0f             	cmp    edx,0xf
c00061c8:	75 f3                	jne    c00061bd <bgrad_cache+0x9>
c00061ca:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00061cd:	5b                   	pop    ebx
c00061ce:	c3                   	ret    
c00061cf:	c3                   	ret    

c00061d0 <ucscompare>:
c00061d0:	55                   	push   ebp
c00061d1:	57                   	push   edi
c00061d2:	89 c7                	mov    edi,eax
c00061d4:	56                   	push   esi
c00061d5:	89 d6                	mov    esi,edx
c00061d7:	53                   	push   ebx
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 ec 1c             	sub    esp,0x1c
c00061dd:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c00061e1:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00061e6:	c1 e3 08             	shl    ebx,0x8
c00061e9:	09 c3                	or     ebx,eax
c00061eb:	39 ca                	cmp    edx,ecx
c00061ed:	7d 42                	jge    c0006231 <ucscompare+0x61>
c00061ef:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00061f3:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00061f8:	c1 e0 08             	shl    eax,0x8
c00061fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00061ff:	09 e8                	or     eax,ebp
c0006201:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006205:	83 f8 3b             	cmp    eax,0x3b
c0006208:	74 27                	je     c0006231 <ucscompare+0x61>
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	50                   	push   eax
c000620e:	e8 3d a7 ff ff       	call   c0000950 <tolower>
c0006213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006216:	89 c5                	mov    ebp,eax
c0006218:	e8 33 a7 ff ff       	call   c0000950 <tolower>
c000621d:	83 c4 10             	add    esp,0x10
c0006220:	39 c5                	cmp    ebp,eax
c0006222:	75 20                	jne    c0006244 <ucscompare+0x74>
c0006224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000622c:	83 c2 02             	add    edx,0x2
c000622f:	eb ac                	jmp    c00061dd <ucscompare+0xd>
c0006231:	85 db                	test   ebx,ebx
c0006233:	0f 95 c2             	setne  dl
c0006236:	31 c0                	xor    eax,eax
c0006238:	83 fb 2f             	cmp    ebx,0x2f
c000623b:	0f 95 c0             	setne  al
c000623e:	21 d0                	and    eax,edx
c0006240:	f7 d8                	neg    eax
c0006242:	eb 03                	jmp    c0006247 <ucscompare+0x77>
c0006244:	83 c8 ff             	or     eax,0xffffffff
c0006247:	83 c4 1c             	add    esp,0x1c
c000624a:	5b                   	pop    ebx
c000624b:	5e                   	pop    esi
c000624c:	5f                   	pop    edi
c000624d:	5d                   	pop    ebp
c000624e:	c3                   	ret    

c000624f <fncompare>:
c000624f:	55                   	push   ebp
c0006250:	57                   	push   edi
c0006251:	89 c7                	mov    edi,eax
c0006253:	56                   	push   esi
c0006254:	89 ce                	mov    esi,ecx
c0006256:	53                   	push   ebx
c0006257:	31 db                	xor    ebx,ebx
c0006259:	83 ec 1c             	sub    esp,0x1c
c000625c:	39 d3                	cmp    ebx,edx
c000625e:	7d 45                	jge    c00062a5 <fncompare+0x56>
c0006260:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006264:	83 f8 3b             	cmp    eax,0x3b
c0006267:	74 3c                	je     c00062a5 <fncompare+0x56>
c0006269:	83 f8 2e             	cmp    eax,0x2e
c000626c:	75 0e                	jne    c000627c <fncompare+0x2d>
c000626e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006271:	39 d9                	cmp    ecx,ebx
c0006273:	74 30                	je     c00062a5 <fncompare+0x56>
c0006275:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000627a:	74 29                	je     c00062a5 <fncompare+0x56>
c000627c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006280:	83 ec 0c             	sub    esp,0xc
c0006283:	50                   	push   eax
c0006284:	e8 c7 a6 ff ff       	call   c0000950 <tolower>
c0006289:	89 c5                	mov    ebp,eax
c000628b:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000628f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006292:	e8 b9 a6 ff ff       	call   c0000950 <tolower>
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	39 c5                	cmp    ebp,eax
c000629c:	75 1e                	jne    c00062bc <fncompare+0x6d>
c000629e:	43                   	inc    ebx
c000629f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062a3:	eb b7                	jmp    c000625c <fncompare+0xd>
c00062a5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062a9:	85 d2                	test   edx,edx
c00062ab:	0f 95 c1             	setne  cl
c00062ae:	31 c0                	xor    eax,eax
c00062b0:	83 fa 2f             	cmp    edx,0x2f
c00062b3:	0f 95 c0             	setne  al
c00062b6:	21 c8                	and    eax,ecx
c00062b8:	f7 d8                	neg    eax
c00062ba:	eb 03                	jmp    c00062bf <fncompare+0x70>
c00062bc:	83 c8 ff             	or     eax,0xffffffff
c00062bf:	83 c4 1c             	add    esp,0x1c
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <bclear_cache>:
c00062c7:	83 ec 18             	sub    esp,0x18
c00062ca:	68 20 fa 02 c0       	push   0xc002fa20
c00062cf:	e8 44 30 02 00       	call   c0029318 <iso_kprintf>
c00062d4:	83 c4 10             	add    esp,0x10
c00062d7:	31 c0                	xor    eax,eax
c00062d9:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c00062e0:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062e6:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00062ed:	40                   	inc    eax
c00062ee:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062f4:	83 f8 10             	cmp    eax,0x10
c00062f7:	75 e0                	jne    c00062d9 <bclear_cache+0x12>
c00062f9:	83 c4 0c             	add    esp,0xc
c00062fc:	c3                   	ret    

c00062fd <bclear>:
c00062fd:	eb c8                	jmp    c00062c7 <bclear_cache>

c00062ff <iso_break_all>:
c00062ff:	83 ec 18             	sub    esp,0x18
c0006302:	68 2e fa 02 c0       	push   0xc002fa2e
c0006307:	e8 0c 30 02 00       	call   c0029318 <iso_kprintf>
c000630c:	83 c4 10             	add    esp,0x10
c000630f:	31 c0                	xor    eax,eax
c0006311:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000631b:	05 94 00 00 00       	add    eax,0x94
c0006320:	3d 40 09 00 00       	cmp    eax,0x940
c0006325:	75 ea                	jne    c0006311 <iso_break_all+0x12>
c0006327:	83 c4 0c             	add    esp,0xc
c000632a:	c3                   	ret    

c000632b <isoReadDiscSector>:
c000632b:	83 ec 0c             	sub    esp,0xc
c000632e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006335:	50                   	push   eax
c0006336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006342:	e8 75 2f 02 00       	call   c00292bc <isoReadDiscSectorHelper>
c0006347:	83 c4 1c             	add    esp,0x1c
c000634a:	c3                   	ret    

c000634b <bread_cache>:
c000634b:	55                   	push   ebp
c000634c:	57                   	push   edi
c000634d:	89 d7                	mov    edi,edx
c000634f:	56                   	push   esi
c0006350:	ba 0f 00 00 00       	mov    edx,0xf
c0006355:	53                   	push   ebx
c0006356:	89 c6                	mov    esi,eax
c0006358:	83 ec 0c             	sub    esp,0xc
c000635b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000635e:	39 38                	cmp    DWORD PTR [eax],edi
c0006360:	74 3c                	je     c000639e <bread_cache+0x53>
c0006362:	4a                   	dec    edx
c0006363:	83 fa ff             	cmp    edx,0xffffffff
c0006366:	75 f3                	jne    c000635b <bread_cache+0x10>
c0006368:	31 db                	xor    ebx,ebx
c000636a:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000636d:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006370:	74 08                	je     c000637a <bread_cache+0x2f>
c0006372:	43                   	inc    ebx
c0006373:	83 fb 10             	cmp    ebx,0x10
c0006376:	75 f2                	jne    c000636a <bread_cache+0x1f>
c0006378:	31 db                	xor    ebx,ebx
c000637a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000637d:	50                   	push   eax
c000637e:	6a 01                	push   0x1
c0006380:	57                   	push   edi
c0006381:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006384:	83 c0 04             	add    eax,0x4
c0006387:	50                   	push   eax
c0006388:	e8 9e ff ff ff       	call   c000632b <isoReadDiscSector>
c000638d:	83 c4 10             	add    esp,0x10
c0006390:	83 c9 ff             	or     ecx,0xffffffff
c0006393:	85 c0                	test   eax,eax
c0006395:	78 13                	js     c00063aa <bread_cache+0x5f>
c0006397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000639a:	89 da                	mov    edx,ebx
c000639c:	89 38                	mov    DWORD PTR [eax],edi
c000639e:	89 f0                	mov    eax,esi
c00063a0:	e8 0f fe ff ff       	call   c00061b4 <bgrad_cache>
c00063a5:	b9 0f 00 00 00       	mov    ecx,0xf
c00063aa:	83 c4 0c             	add    esp,0xc
c00063ad:	89 c8                	mov    eax,ecx
c00063af:	5b                   	pop    ebx
c00063b0:	5e                   	pop    esi
c00063b1:	5f                   	pop    edi
c00063b2:	5d                   	pop    ebp
c00063b3:	c3                   	ret    

c00063b4 <biread>:
c00063b4:	89 c2                	mov    edx,eax
c00063b6:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00063bb:	eb 8e                	jmp    c000634b <bread_cache>

c00063bd <bdread>:
c00063bd:	89 c2                	mov    edx,eax
c00063bf:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00063c4:	eb 85                	jmp    c000634b <bread_cache>

c00063c6 <strnicmp>:
c00063c6:	55                   	push   ebp
c00063c7:	57                   	push   edi
c00063c8:	31 ff                	xor    edi,edi
c00063ca:	56                   	push   esi
c00063cb:	53                   	push   ebx
c00063cc:	83 ec 0c             	sub    esp,0xc
c00063cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00063d3:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c00063d7:	74 43                	je     c000641c <strnicmp+0x56>
c00063d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00063dd:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c00063e1:	85 c0                	test   eax,eax
c00063e3:	74 37                	je     c000641c <strnicmp+0x56>
c00063e5:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00063e9:	85 d2                	test   edx,edx
c00063eb:	74 2f                	je     c000641c <strnicmp+0x56>
c00063ed:	39 d0                	cmp    eax,edx
c00063ef:	8d 6f 01             	lea    ebp,[edi+0x1]
c00063f2:	75 04                	jne    c00063f8 <strnicmp+0x32>
c00063f4:	89 ef                	mov    edi,ebp
c00063f6:	eb db                	jmp    c00063d3 <strnicmp+0xd>
c00063f8:	83 ec 0c             	sub    esp,0xc
c00063fb:	50                   	push   eax
c00063fc:	e8 4f a5 ff ff       	call   c0000950 <tolower>
c0006401:	89 c3                	mov    ebx,eax
c0006403:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006407:	89 ef                	mov    edi,ebp
c0006409:	89 04 24             	mov    DWORD PTR [esp],eax
c000640c:	e8 3f a5 ff ff       	call   c0000950 <tolower>
c0006411:	83 c4 10             	add    esp,0x10
c0006414:	29 c3                	sub    ebx,eax
c0006416:	89 d8                	mov    eax,ebx
c0006418:	74 b9                	je     c00063d3 <strnicmp+0xd>
c000641a:	eb 02                	jmp    c000641e <strnicmp+0x58>
c000641c:	31 c0                	xor    eax,eax
c000641e:	83 c4 0c             	add    esp,0xc
c0006421:	5b                   	pop    ebx
c0006422:	5e                   	pop    esi
c0006423:	5f                   	pop    edi
c0006424:	5d                   	pop    ebp
c0006425:	c3                   	ret    

c0006426 <find_object>:
c0006426:	55                   	push   ebp
c0006427:	57                   	push   edi
c0006428:	89 c7                	mov    edi,eax
c000642a:	56                   	push   esi
c000642b:	53                   	push   ebx
c000642c:	89 d3                	mov    ebx,edx
c000642e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006434:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000643b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000643f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006443:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c000644a:	74 0b                	je     c0006457 <find_object+0x31>
c000644c:	89 fa                	mov    edx,edi
c000644e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006452:	e8 89 fc ff ff       	call   c00060e0 <utf2ucs>
c0006457:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000645a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000645e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006463:	7e 11                	jle    c0006476 <find_object+0x50>
c0006465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006469:	e8 46 ff ff ff       	call   c00063b4 <biread>
c000646e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006472:	85 c0                	test   eax,eax
c0006474:	79 07                	jns    c000647d <find_object+0x57>
c0006476:	31 db                	xor    ebx,ebx
c0006478:	e9 56 01 00 00       	jmp    c00065d3 <find_object+0x1ad>
c000647d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006489:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000648d:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006494:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006498:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000649b:	85 f6                	test   esi,esi
c000649d:	75 0e                	jne    c00064ad <find_object+0x87>
c000649f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064a3:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064ab:	eb b1                	jmp    c000645e <find_object+0x38>
c00064ad:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c00064b3:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064b7:	85 ed                	test   ebp,ebp
c00064b9:	89 c8                	mov    eax,ecx
c00064bb:	74 2b                	je     c00064e8 <find_object+0xc2>
c00064bd:	8d 43 21             	lea    eax,[ebx+0x21]
c00064c0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064c4:	e8 07 fd ff ff       	call   c00061d0 <ucscompare>
c00064c9:	85 c0                	test   eax,eax
c00064cb:	0f 84 bf 00 00 00    	je     c0006590 <find_object+0x16a>
c00064d1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00064d4:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00064d8:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00064e0:	0f 8e da 00 00 00    	jle    c00065c0 <find_object+0x19a>
c00064e6:	eb b7                	jmp    c000649f <find_object+0x79>
c00064e8:	29 ce                	sub    esi,ecx
c00064ea:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c00064ee:	a8 01                	test   al,0x1
c00064f0:	74 05                	je     c00064f7 <find_object+0xd1>
c00064f2:	83 ee 21             	sub    esi,0x21
c00064f5:	eb 5a                	jmp    c0006551 <find_object+0x12b>
c00064f7:	42                   	inc    edx
c00064f8:	83 ee 22             	sub    esi,0x22
c00064fb:	eb 54                	jmp    c0006551 <find_object+0x12b>
c00064fd:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006500:	48                   	dec    eax
c0006501:	3c 01                	cmp    al,0x1
c0006503:	77 51                	ja     c0006556 <find_object+0x130>
c0006505:	50                   	push   eax
c0006506:	6a 02                	push   0x2
c0006508:	68 3d fa 02 c0       	push   0xc002fa3d
c000650d:	52                   	push   edx
c000650e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006512:	e8 c9 a2 ff ff       	call   c00007e0 <strncmp>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	85 c0                	test   eax,eax
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	75 27                	jne    c0006549 <find_object+0x123>
c0006522:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006526:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006529:	50                   	push   eax
c000652a:	8d 42 05             	lea    eax,[edx+0x5]
c000652d:	55                   	push   ebp
c000652e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006532:	50                   	push   eax
c0006533:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006537:	50                   	push   eax
c0006538:	e8 43 a1 ff ff       	call   c0000680 <strncpy>
c000653d:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006542:	83 c4 10             	add    esp,0x10
c0006545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006549:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000654d:	29 c6                	sub    esi,eax
c000654f:	01 c2                	add    edx,eax
c0006551:	83 fe 03             	cmp    esi,0x3
c0006554:	7f a7                	jg     c00064fd <find_object+0xd7>
c0006556:	85 ed                	test   ebp,ebp
c0006558:	7e 40                	jle    c000659a <find_object+0x174>
c000655a:	51                   	push   ecx
c000655b:	51                   	push   ecx
c000655c:	6a 2f                	push   0x2f
c000655e:	57                   	push   edi
c000655f:	e8 3c a2 ff ff       	call   c00007a0 <strchr>
c0006564:	83 c4 10             	add    esp,0x10
c0006567:	85 c0                	test   eax,eax
c0006569:	74 04                	je     c000656f <find_object+0x149>
c000656b:	29 f8                	sub    eax,edi
c000656d:	eb 0c                	jmp    c000657b <find_object+0x155>
c000656f:	83 ec 0c             	sub    esp,0xc
c0006572:	57                   	push   edi
c0006573:	e8 f8 9f ff ff       	call   c0000570 <strlen>
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	52                   	push   edx
c000657c:	50                   	push   eax
c000657d:	57                   	push   edi
c000657e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006582:	50                   	push   eax
c0006583:	e8 3e fe ff ff       	call   c00063c6 <strnicmp>
c0006588:	83 c4 10             	add    esp,0x10
c000658b:	e9 39 ff ff ff       	jmp    c00064c9 <find_object+0xa3>
c0006590:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006594:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006598:	eb 1e                	jmp    c00065b8 <find_object+0x192>
c000659a:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000659e:	8d 43 21             	lea    eax,[ebx+0x21]
c00065a1:	89 f9                	mov    ecx,edi
c00065a3:	e8 a7 fc ff ff       	call   c000624f <fncompare>
c00065a8:	85 c0                	test   eax,eax
c00065aa:	0f 85 21 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065b0:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065b4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065b8:	0f 85 13 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065be:	eb 13                	jmp    c00065d3 <find_object+0x1ad>
c00065c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065c4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065c8:	0f 8f b7 fe ff ff    	jg     c0006485 <find_object+0x5f>
c00065ce:	e9 cc fe ff ff       	jmp    c000649f <find_object+0x79>
c00065d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00065d9:	89 d8                	mov    eax,ebx
c00065db:	5b                   	pop    ebx
c00065dc:	5e                   	pop    esi
c00065dd:	5f                   	pop    edi
c00065de:	5d                   	pop    ebp
c00065df:	c3                   	ret    

c00065e0 <find_object_path>:
c00065e0:	55                   	push   ebp
c00065e1:	57                   	push   edi
c00065e2:	89 d7                	mov    edi,edx
c00065e4:	56                   	push   esi
c00065e5:	89 c6                	mov    esi,eax
c00065e7:	53                   	push   ebx
c00065e8:	89 cb                	mov    ebx,ecx
c00065ea:	83 ec 0c             	sub    esp,0xc
c00065ed:	50                   	push   eax
c00065ee:	50                   	push   eax
c00065ef:	6a 2f                	push   0x2f
c00065f1:	56                   	push   esi
c00065f2:	e8 a9 a1 ff ff       	call   c00007a0 <strchr>
c00065f7:	83 c4 10             	add    esp,0x10
c00065fa:	89 c5                	mov    ebp,eax
c00065fc:	85 c0                	test   eax,eax
c00065fe:	74 3a                	je     c000663a <find_object_path+0x5a>
c0006600:	39 ee                	cmp    esi,ebp
c0006602:	74 31                	je     c0006635 <find_object_path+0x55>
c0006604:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006607:	e8 a6 fb ff ff       	call   c00061b2 <iso_733>
c000660c:	89 c2                	mov    edx,eax
c000660e:	8d 43 02             	lea    eax,[ebx+0x2]
c0006611:	e8 9c fb ff ff       	call   c00061b2 <iso_733>
c0006616:	83 ec 0c             	sub    esp,0xc
c0006619:	89 c1                	mov    ecx,eax
c000661b:	52                   	push   edx
c000661c:	89 f0                	mov    eax,esi
c000661e:	ba 01 00 00 00       	mov    edx,0x1
c0006623:	e8 fe fd ff ff       	call   c0006426 <find_object>
c0006628:	83 c4 10             	add    esp,0x10
c000662b:	89 c3                	mov    ebx,eax
c000662d:	85 c0                	test   eax,eax
c000662f:	75 04                	jne    c0006635 <find_object_path+0x55>
c0006631:	31 db                	xor    ebx,ebx
c0006633:	eb 36                	jmp    c000666b <find_object_path+0x8b>
c0006635:	8d 75 01             	lea    esi,[ebp+0x1]
c0006638:	eb b3                	jmp    c00065ed <find_object_path+0xd>
c000663a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000663d:	74 28                	je     c0006667 <find_object_path+0x87>
c000663f:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006642:	e8 6b fb ff ff       	call   c00061b2 <iso_733>
c0006647:	89 c2                	mov    edx,eax
c0006649:	8d 43 02             	lea    eax,[ebx+0x2]
c000664c:	e8 61 fb ff ff       	call   c00061b2 <iso_733>
c0006651:	83 ec 0c             	sub    esp,0xc
c0006654:	89 c1                	mov    ecx,eax
c0006656:	52                   	push   edx
c0006657:	89 f0                	mov    eax,esi
c0006659:	89 fa                	mov    edx,edi
c000665b:	e8 c6 fd ff ff       	call   c0006426 <find_object>
c0006660:	83 c4 10             	add    esp,0x10
c0006663:	89 c3                	mov    ebx,eax
c0006665:	eb 04                	jmp    c000666b <find_object_path+0x8b>
c0006667:	85 ff                	test   edi,edi
c0006669:	74 c6                	je     c0006631 <find_object_path+0x51>
c000666b:	83 c4 0c             	add    esp,0xc
c000666e:	89 d8                	mov    eax,ebx
c0006670:	5b                   	pop    ebx
c0006671:	5e                   	pop    esi
c0006672:	5f                   	pop    edi
c0006673:	5d                   	pop    ebp
c0006674:	c3                   	ret    

c0006675 <stricmp>:
c0006675:	57                   	push   edi
c0006676:	56                   	push   esi
c0006677:	31 f6                	xor    esi,esi
c0006679:	53                   	push   ebx
c000667a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667e:	83 ec 0c             	sub    esp,0xc
c0006681:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006689:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000668d:	50                   	push   eax
c000668e:	e8 9d a2 ff ff       	call   c0000930 <toupper>
c0006693:	89 04 24             	mov    DWORD PTR [esp],eax
c0006696:	e8 b5 a2 ff ff       	call   c0000950 <tolower>
c000669b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000669e:	89 c3                	mov    ebx,eax
c00066a0:	e8 8b a2 ff ff       	call   c0000930 <toupper>
c00066a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00066a8:	e8 a3 a2 ff ff       	call   c0000950 <tolower>
c00066ad:	83 c4 10             	add    esp,0x10
c00066b0:	39 c3                	cmp    ebx,eax
c00066b2:	75 05                	jne    c00066b9 <stricmp+0x44>
c00066b4:	46                   	inc    esi
c00066b5:	85 db                	test   ebx,ebx
c00066b7:	75 c1                	jne    c000667a <stricmp+0x5>
c00066b9:	29 c3                	sub    ebx,eax
c00066bb:	89 d8                	mov    eax,ebx
c00066bd:	5b                   	pop    ebx
c00066be:	5e                   	pop    esi
c00066bf:	5f                   	pop    edi
c00066c0:	c3                   	ret    

c00066c1 <iso_open>:
c00066c1:	57                   	push   edi
c00066c2:	31 c0                	xor    eax,eax
c00066c4:	56                   	push   esi
c00066c5:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00066ca:	53                   	push   ebx
c00066cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00066d0:	0f 95 c0             	setne  al
c00066d3:	89 c2                	mov    edx,eax
c00066d5:	89 c6                	mov    esi,eax
c00066d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00066db:	e8 00 ff ff ff       	call   c00065e0 <find_object_path>
c00066e0:	83 ca ff             	or     edx,0xffffffff
c00066e3:	85 c0                	test   eax,eax
c00066e5:	74 5e                	je     c0006745 <iso_open+0x84>
c00066e7:	89 c1                	mov    ecx,eax
c00066e9:	31 d2                	xor    edx,edx
c00066eb:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00066f1:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00066f8:	75 42                	jne    c000673c <iso_open+0x7b>
c00066fa:	8d 41 02             	lea    eax,[ecx+0x2]
c00066fd:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006707:	e8 a6 fa ff ff       	call   c00061b2 <iso_733>
c000670c:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006712:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006718:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006722:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006725:	e8 88 fa ff ff       	call   c00061b2 <iso_733>
c000672a:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006734:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000673a:	eb 09                	jmp    c0006745 <iso_open+0x84>
c000673c:	42                   	inc    edx
c000673d:	83 fa 10             	cmp    edx,0x10
c0006740:	75 a9                	jne    c00066eb <iso_open+0x2a>
c0006742:	83 ca ff             	or     edx,0xffffffff
c0006745:	5b                   	pop    ebx
c0006746:	89 d0                	mov    eax,edx
c0006748:	5e                   	pop    esi
c0006749:	5f                   	pop    edi
c000674a:	c3                   	ret    

c000674b <iso_close>:
c000674b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000674f:	83 f8 0f             	cmp    eax,0xf
c0006752:	7f 10                	jg     c0006764 <iso_close+0x19>
c0006754:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000675a:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006764:	e9 5e fb ff ff       	jmp    c00062c7 <bclear_cache>

c0006769 <iso_read>:
c0006769:	55                   	push   ebp
c000676a:	57                   	push   edi
c000676b:	56                   	push   esi
c000676c:	53                   	push   ebx
c000676d:	83 ec 1c             	sub    esp,0x1c
c0006770:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006774:	83 fd 0f             	cmp    ebp,0xf
c0006777:	7e 0a                	jle    c0006783 <iso_read+0x1a>
c0006779:	83 c8 ff             	or     eax,0xffffffff
c000677c:	89 c2                	mov    edx,eax
c000677e:	e9 f4 00 00 00       	jmp    c0006877 <iso_read+0x10e>
c0006783:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006789:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006790:	74 e7                	je     c0006779 <iso_read+0x10>
c0006792:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006798:	85 d2                	test   edx,edx
c000679a:	75 dd                	jne    c0006779 <iso_read+0x10>
c000679c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067a1:	0f 84 cd 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067a7:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067ad:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c00067b3:	29 c1                	sub    ecx,eax
c00067b5:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067b9:	76 04                	jbe    c00067bf <iso_read+0x56>
c00067bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067bf:	85 c9                	test   ecx,ecx
c00067c1:	0f 84 ad 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067c7:	89 c6                	mov    esi,eax
c00067c9:	bb 00 08 00 00       	mov    ebx,0x800
c00067ce:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067d4:	c1 e8 0b             	shr    eax,0xb
c00067d7:	29 f3                	sub    ebx,esi
c00067d9:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00067df:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00067e5:	7e 3f                	jle    c0006826 <iso_read+0xbd>
c00067e7:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00067ed:	75 37                	jne    c0006826 <iso_read+0xbd>
c00067ef:	be 20 00 00 00       	mov    esi,0x20
c00067f4:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00067fa:	7f 05                	jg     c0006801 <iso_read+0x98>
c00067fc:	89 ce                	mov    esi,ecx
c00067fe:	c1 fe 0b             	sar    esi,0xb
c0006801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006805:	89 f3                	mov    ebx,esi
c0006807:	c1 e3 0b             	shl    ebx,0xb
c000680a:	52                   	push   edx
c000680b:	56                   	push   esi
c000680c:	50                   	push   eax
c000680d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006811:	e8 15 fb ff ff       	call   c000632b <isoReadDiscSector>
c0006816:	83 c4 10             	add    esp,0x10
c0006819:	85 c0                	test   eax,eax
c000681b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000681f:	7f 3e                	jg     c000685f <iso_read+0xf6>
c0006821:	e9 53 ff ff ff       	jmp    c0006779 <iso_read+0x10>
c0006826:	39 cb                	cmp    ebx,ecx
c0006828:	7e 02                	jle    c000682c <iso_read+0xc3>
c000682a:	89 cb                	mov    ebx,ecx
c000682c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006830:	e8 88 fb ff ff       	call   c00063bd <bdread>
c0006835:	85 c0                	test   eax,eax
c0006837:	0f 88 3c ff ff ff    	js     c0006779 <iso_read+0x10>
c000683d:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006844:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006848:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000684e:	25 ff 07 00 00       	and    eax,0x7ff
c0006853:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006857:	89 d9                	mov    ecx,ebx
c0006859:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000685b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000685f:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006863:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006869:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000686d:	01 da                	add    edx,ebx
c000686f:	e9 28 ff ff ff       	jmp    c000679c <iso_read+0x33>
c0006874:	89 d0                	mov    eax,edx
c0006876:	99                   	cdq    
c0006877:	83 c4 1c             	add    esp,0x1c
c000687a:	5b                   	pop    ebx
c000687b:	5e                   	pop    esi
c000687c:	5f                   	pop    edi
c000687d:	5d                   	pop    ebp
c000687e:	c3                   	ret    

c000687f <iso_seek>:
c000687f:	55                   	push   ebp
c0006880:	83 c8 ff             	or     eax,0xffffffff
c0006883:	57                   	push   edi
c0006884:	89 c2                	mov    edx,eax
c0006886:	56                   	push   esi
c0006887:	53                   	push   ebx
c0006888:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000688c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006890:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006894:	83 fe 0f             	cmp    esi,0xf
c0006897:	7f 65                	jg     c00068fe <iso_seek+0x7f>
c0006899:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000689f:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00068a5:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00068ac:	74 50                	je     c00068fe <iso_seek+0x7f>
c00068ae:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068b5:	75 47                	jne    c00068fe <iso_seek+0x7f>
c00068b7:	83 fb 01             	cmp    ebx,0x1
c00068ba:	74 0e                	je     c00068ca <iso_seek+0x4b>
c00068bc:	83 fb 02             	cmp    ebx,0x2
c00068bf:	74 0e                	je     c00068cf <iso_seek+0x50>
c00068c1:	85 db                	test   ebx,ebx
c00068c3:	75 39                	jne    c00068fe <iso_seek+0x7f>
c00068c5:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068c8:	eb 0d                	jmp    c00068d7 <iso_seek+0x58>
c00068ca:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00068cd:	eb 08                	jmp    c00068d7 <iso_seek+0x58>
c00068cf:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00068d2:	01 f8                	add    eax,edi
c00068d4:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00068d7:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00068dd:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c00068e3:	05 20 6d 03 c0       	add    eax,0xc0036d20
c00068e8:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00068eb:	76 03                	jbe    c00068f0 <iso_seek+0x71>
c00068ed:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00068f0:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00068f6:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c00068fc:	31 d2                	xor    edx,edx
c00068fe:	5b                   	pop    ebx
c00068ff:	5e                   	pop    esi
c0006900:	5f                   	pop    edi
c0006901:	5d                   	pop    ebp
c0006902:	c3                   	ret    

c0006903 <iso_tell>:
c0006903:	83 c8 ff             	or     eax,0xffffffff
c0006906:	53                   	push   ebx
c0006907:	89 c2                	mov    edx,eax
c0006909:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000690d:	83 f9 0f             	cmp    ecx,0xf
c0006910:	7f 20                	jg     c0006932 <iso_tell+0x2f>
c0006912:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006918:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000691f:	74 11                	je     c0006932 <iso_tell+0x2f>
c0006921:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006928:	75 08                	jne    c0006932 <iso_tell+0x2f>
c000692a:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	c3                   	ret    

c0006934 <iso_total>:
c0006934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006938:	83 c8 ff             	or     eax,0xffffffff
c000693b:	83 fa 0f             	cmp    edx,0xf
c000693e:	7f 1e                	jg     c000695e <iso_total+0x2a>
c0006940:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006946:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000694d:	74 0f                	je     c000695e <iso_total+0x2a>
c000694f:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006956:	75 06                	jne    c000695e <iso_total+0x2a>
c0006958:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000695e:	c3                   	ret    

c000695f <fn_postprocess>:
c000695f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006963:	89 d0                	mov    eax,edx
c0006965:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006968:	83 f9 3b             	cmp    ecx,0x3b
c000696b:	74 07                	je     c0006974 <fn_postprocess+0x15>
c000696d:	85 c9                	test   ecx,ecx
c000696f:	74 03                	je     c0006974 <fn_postprocess+0x15>
c0006971:	40                   	inc    eax
c0006972:	eb f1                	jmp    c0006965 <fn_postprocess+0x6>
c0006974:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006977:	39 d0                	cmp    eax,edx
c0006979:	76 0a                	jbe    c0006985 <fn_postprocess+0x26>
c000697b:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000697f:	75 04                	jne    c0006985 <fn_postprocess+0x26>
c0006981:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006985:	c3                   	ret    

c0006986 <iso_readdir>:
c0006986:	55                   	push   ebp
c0006987:	57                   	push   edi
c0006988:	56                   	push   esi
c0006989:	53                   	push   ebx
c000698a:	83 ec 1c             	sub    esp,0x1c
c000698d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006991:	83 fb 0f             	cmp    ebx,0xf
c0006994:	7f 28                	jg     c00069be <iso_readdir+0x38>
c0006996:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699c:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00069a2:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00069a9:	74 13                	je     c00069be <iso_readdir+0x38>
c00069ab:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069af:	74 0d                	je     c00069be <iso_readdir+0x38>
c00069b1:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069b8:	0f 84 b1 00 00 00    	je     c0006a6f <iso_readdir+0xe9>
c00069be:	83 ec 0c             	sub    esp,0xc
c00069c1:	68 40 fa 02 c0       	push   0xc002fa40
c00069c6:	e8 4d 29 02 00       	call   c0029318 <iso_kprintf>
c00069cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069ce:	e8 61 29 02 00       	call   c0029334 <iso_kprintfd>
c00069d3:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069d9:	c7 04 24 45 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa45
c00069e0:	e8 33 29 02 00       	call   c0029318 <iso_kprintf>
c00069e5:	5d                   	pop    ebp
c00069e6:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c00069ec:	e8 43 29 02 00       	call   c0029334 <iso_kprintfd>
c00069f1:	c7 04 24 4b fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4b
c00069f8:	e8 1b 29 02 00       	call   c0029318 <iso_kprintf>
c00069fd:	58                   	pop    eax
c00069fe:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006a04:	e8 2b 29 02 00       	call   c0029334 <iso_kprintfd>
c0006a09:	c7 04 24 51 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa51
c0006a10:	e8 03 29 02 00       	call   c0029318 <iso_kprintf>
c0006a15:	58                   	pop    eax
c0006a16:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006a1c:	e8 13 29 02 00       	call   c0029334 <iso_kprintfd>
c0006a21:	83 c4 10             	add    esp,0x10
c0006a24:	eb 42                	jmp    c0006a68 <iso_readdir+0xe2>
c0006a26:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a29:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a30:	89 d1                	mov    ecx,edx
c0006a32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a38:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a3c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a3f:	75 35                	jne    c0006a76 <iso_readdir+0xf0>
c0006a41:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a47:	81 c2 00 08 00 00    	add    edx,0x800
c0006a4d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a50:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a53:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a56:	73 1e                	jae    c0006a76 <iso_readdir+0xf0>
c0006a58:	c1 ea 0b             	shr    edx,0xb
c0006a5b:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a5d:	01 d0                	add    eax,edx
c0006a5f:	e8 50 f9 ff ff       	call   c00063b4 <biread>
c0006a64:	85 c0                	test   eax,eax
c0006a66:	79 be                	jns    c0006a26 <iso_readdir+0xa0>
c0006a68:	31 c0                	xor    eax,eax
c0006a6a:	e9 66 01 00 00       	jmp    c0006bd5 <iso_readdir+0x24f>
c0006a6f:	31 f6                	xor    esi,esi
c0006a71:	83 c8 ff             	or     eax,0xffffffff
c0006a74:	eb da                	jmp    c0006a50 <iso_readdir+0xca>
c0006a76:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006a7c:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006a82:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006a88:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006a8b:	73 db                	jae    c0006a68 <iso_readdir+0xe2>
c0006a8d:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006a91:	75 34                	jne    c0006ac7 <iso_readdir+0x141>
c0006a93:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006a97:	75 2e                	jne    c0006ac7 <iso_readdir+0x141>
c0006a99:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006a9c:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006aa3:	01 f9                	add    ecx,edi
c0006aa5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006aa8:	89 c8                	mov    eax,ecx
c0006aaa:	25 ff 07 00 00       	and    eax,0x7ff
c0006aaf:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ab4:	01 c8                	add    eax,ecx
c0006ab6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006ab9:	25 ff 07 00 00       	and    eax,0x7ff
c0006abe:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006ac2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006ac5:	74 a1                	je     c0006a68 <iso_readdir+0xe2>
c0006ac7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006acd:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006ad1:	8d 56 21             	lea    edx,[esi+0x21]
c0006ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ad8:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006ade:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006ae5:	74 0c                	je     c0006af3 <iso_readdir+0x16d>
c0006ae7:	89 e8                	mov    eax,ebp
c0006ae9:	e8 14 f6 ff ff       	call   c0006102 <ucs2utfn>
c0006aee:	e9 a6 00 00 00       	jmp    c0006b99 <iso_readdir+0x213>
c0006af3:	57                   	push   edi
c0006af4:	51                   	push   ecx
c0006af5:	52                   	push   edx
c0006af6:	55                   	push   ebp
c0006af7:	e8 84 9b ff ff       	call   c0000680 <strncpy>
c0006afc:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b00:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b09:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006b11:	e8 49 fe ff ff       	call   c000695f <fn_postprocess>
c0006b16:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b1a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b1d:	83 c4 10             	add    esp,0x10
c0006b20:	29 d0                	sub    eax,edx
c0006b22:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b26:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b2a:	74 05                	je     c0006b31 <iso_readdir+0x1ab>
c0006b2c:	83 e8 21             	sub    eax,0x21
c0006b2f:	eb 04                	jmp    c0006b35 <iso_readdir+0x1af>
c0006b31:	47                   	inc    edi
c0006b32:	83 e8 22             	sub    eax,0x22
c0006b35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b39:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b48:	7e 4f                	jle    c0006b99 <iso_readdir+0x213>
c0006b4a:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b4d:	48                   	dec    eax
c0006b4e:	3c 01                	cmp    al,0x1
c0006b50:	77 47                	ja     c0006b99 <iso_readdir+0x213>
c0006b52:	52                   	push   edx
c0006b53:	6a 02                	push   0x2
c0006b55:	68 3d fa 02 c0       	push   0xc002fa3d
c0006b5a:	57                   	push   edi
c0006b5b:	e8 80 9c ff ff       	call   c00007e0 <strncmp>
c0006b60:	83 c4 10             	add    esp,0x10
c0006b63:	85 c0                	test   eax,eax
c0006b65:	75 26                	jne    c0006b8d <iso_readdir+0x207>
c0006b67:	50                   	push   eax
c0006b68:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b6c:	83 e8 05             	sub    eax,0x5
c0006b6f:	50                   	push   eax
c0006b70:	8d 47 05             	lea    eax,[edi+0x5]
c0006b73:	50                   	push   eax
c0006b74:	55                   	push   ebp
c0006b75:	e8 06 9b ff ff       	call   c0000680 <strncpy>
c0006b7a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006b7e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b82:	83 c4 10             	add    esp,0x10
c0006b85:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006b8d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b91:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006b95:	01 c7                	add    edi,eax
c0006b97:	eb aa                	jmp    c0006b43 <iso_readdir+0x1bd>
c0006b99:	83 c8 ff             	or     eax,0xffffffff
c0006b9c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006ba0:	89 c2                	mov    edx,eax
c0006ba2:	75 0a                	jne    c0006bae <iso_readdir+0x228>
c0006ba4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006ba7:	e8 06 f6 ff ff       	call   c00061b2 <iso_733>
c0006bac:	31 d2                	xor    edx,edx
c0006bae:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006bb4:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006bba:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006bc0:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006bc6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bc9:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006bd0:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006bd5:	83 c4 1c             	add    esp,0x1c
c0006bd8:	5b                   	pop    ebx
c0006bd9:	5e                   	pop    esi
c0006bda:	5f                   	pop    edi
c0006bdb:	5d                   	pop    ebp
c0006bdc:	c3                   	ret    

c0006bdd <iso_reset>:
c0006bdd:	83 ec 18             	sub    esp,0x18
c0006be0:	68 5a fa 02 c0       	push   0xc002fa5a
c0006be5:	e8 2e 27 02 00       	call   c0029318 <iso_kprintf>
c0006bea:	e8 10 f7 ff ff       	call   c00062ff <iso_break_all>
c0006bef:	e8 09 f7 ff ff       	call   c00062fd <bclear>
c0006bf4:	31 c0                	xor    eax,eax
c0006bf6:	83 c4 1c             	add    esp,0x1c
c0006bf9:	c3                   	ret    

c0006bfa <init_percd>:
c0006bfa:	57                   	push   edi
c0006bfb:	56                   	push   esi
c0006bfc:	53                   	push   ebx
c0006bfd:	bb 01 00 00 00       	mov    ebx,0x1
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006c0b:	e8 cd ff ff ff       	call   c0006bdd <iso_reset>
c0006c10:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006c1a:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c1f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c23:	e8 8c f7 ff ff       	call   c00063b4 <biread>
c0006c28:	89 c6                	mov    esi,eax
c0006c2a:	85 c0                	test   eax,eax
c0006c2c:	0f 88 ba 00 00 00    	js     c0006cec <init_percd+0xf2>
c0006c32:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006c39:	83 c0 04             	add    eax,0x4
c0006c3c:	52                   	push   edx
c0006c3d:	6a 06                	push   0x6
c0006c3f:	68 65 fa 02 c0       	push   0xc002fa65
c0006c44:	50                   	push   eax
c0006c45:	e8 36 97 ff ff       	call   c0000380 <memcmp>
c0006c4a:	83 c4 10             	add    esp,0x10
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	74 08                	je     c0006c59 <init_percd+0x5f>
c0006c51:	43                   	inc    ebx
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 c3                	jne    c0006c1a <init_percd+0x20>
c0006c57:	eb 1a                	jmp    c0006c73 <init_percd+0x79>
c0006c59:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c60:	83 c0 5c             	add    eax,0x5c
c0006c63:	e8 17 f5 ff ff       	call   c000617f <isjoliet>
c0006c68:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006c6d:	85 c0                	test   eax,eax
c0006c6f:	74 e0                	je     c0006c51 <init_percd+0x57>
c0006c71:	eb 3e                	jmp    c0006cb1 <init_percd+0xb7>
c0006c73:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7a:	75 35                	jne    c0006cb1 <init_percd+0xb7>
c0006c7c:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c81:	83 c0 10             	add    eax,0x10
c0006c84:	e8 2b f7 ff ff       	call   c00063b4 <biread>
c0006c89:	89 c6                	mov    esi,eax
c0006c8b:	85 c0                	test   eax,eax
c0006c8d:	78 5f                	js     c0006cee <init_percd+0xf4>
c0006c8f:	83 cb ff             	or     ebx,0xffffffff
c0006c92:	50                   	push   eax
c0006c93:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c9a:	6a 06                	push   0x6
c0006c9c:	83 c0 04             	add    eax,0x4
c0006c9f:	68 6c fa 02 c0       	push   0xc002fa6c
c0006ca4:	50                   	push   eax
c0006ca5:	e8 d6 96 ff ff       	call   c0000380 <memcmp>
c0006caa:	83 c4 10             	add    esp,0x10
c0006cad:	85 c0                	test   eax,eax
c0006caf:	75 3d                	jne    c0006cee <init_percd+0xf4>
c0006cb1:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006cb8:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006cbd:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cc3:	b9 22 00 00 00       	mov    ecx,0x22
c0006cc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cca:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006ccf:	31 db                	xor    ebx,ebx
c0006cd1:	e8 dc f4 ff ff       	call   c00061b2 <iso_733>
c0006cd6:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006cdb:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006ce0:	e8 cd f4 ff ff       	call   c00061b2 <iso_733>
c0006ce5:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006cea:	eb 02                	jmp    c0006cee <init_percd+0xf4>
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	89 d8                	mov    eax,ebx
c0006cf0:	5b                   	pop    ebx
c0006cf1:	5e                   	pop    esi
c0006cf2:	5f                   	pop    edi
c0006cf3:	c3                   	ret    

c0006cf4 <iso_ioctl>:
c0006cf4:	83 ec 18             	sub    esp,0x18
c0006cf7:	68 73 fa 02 c0       	push   0xc002fa73
c0006cfc:	e8 17 26 02 00       	call   c0029318 <iso_kprintf>
c0006d01:	e8 d7 fe ff ff       	call   c0006bdd <iso_reset>
c0006d06:	31 c0                	xor    eax,eax
c0006d08:	83 c4 1c             	add    esp,0x1c
c0006d0b:	c3                   	ret    

c0006d0c <fs_iso9660_init>:
c0006d0c:	53                   	push   ebx
c0006d0d:	31 db                	xor    ebx,ebx
c0006d0f:	83 ec 14             	sub    esp,0x14
c0006d12:	68 7e fa 02 c0       	push   0xc002fa7e
c0006d17:	e8 fc 25 02 00       	call   c0029318 <iso_kprintf>
c0006d1c:	83 c4 0c             	add    esp,0xc
c0006d1f:	68 40 09 00 00       	push   0x940
c0006d24:	6a 00                	push   0x0
c0006d26:	68 20 6d 03 c0       	push   0xc0036d20
c0006d2b:	e8 c0 97 ff ff       	call   c00004f0 <memset>
c0006d30:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d37:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006d41:	e8 74 f6 00 00       	call   c00163ba <malloc>
c0006d46:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d4d:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006d52:	e8 63 f6 00 00       	call   c00163ba <malloc>
c0006d57:	83 c4 10             	add    esp,0x10
c0006d5a:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006d5f:	83 ec 0c             	sub    esp,0xc
c0006d62:	68 04 08 00 00       	push   0x804
c0006d67:	e8 4e f6 00 00       	call   c00163ba <malloc>
c0006d6c:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006d73:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d79:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006d80:	e8 35 f6 00 00       	call   c00163ba <malloc>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006d8f:	43                   	inc    ebx
c0006d90:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d96:	83 fb 10             	cmp    ebx,0x10
c0006d99:	75 c4                	jne    c0006d5f <fs_iso9660_init+0x53>
c0006d9b:	31 c0                	xor    eax,eax
c0006d9d:	83 c4 08             	add    esp,0x8
c0006da0:	5b                   	pop    ebx
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_shutdown>:
c0006da2:	53                   	push   ebx
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	83 ec 08             	sub    esp,0x8
c0006da8:	83 ec 0c             	sub    esp,0xc
c0006dab:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006db2:	e8 13 f6 00 00       	call   c00163ca <free>
c0006db7:	58                   	pop    eax
c0006db8:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006dbf:	43                   	inc    ebx
c0006dc0:	e8 05 f6 00 00       	call   c00163ca <free>
c0006dc5:	83 c4 10             	add    esp,0x10
c0006dc8:	83 fb 10             	cmp    ebx,0x10
c0006dcb:	75 db                	jne    c0006da8 <fs_iso9660_shutdown+0x6>
c0006dcd:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006dd2:	85 c0                	test   eax,eax
c0006dd4:	74 0c                	je     c0006de2 <fs_iso9660_shutdown+0x40>
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	50                   	push   eax
c0006dda:	e8 eb f5 00 00       	call   c00163ca <free>
c0006ddf:	83 c4 10             	add    esp,0x10
c0006de2:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006de7:	85 c0                	test   eax,eax
c0006de9:	74 0c                	je     c0006df7 <fs_iso9660_shutdown+0x55>
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	50                   	push   eax
c0006def:	e8 d6 f5 00 00       	call   c00163ca <free>
c0006df4:	83 c4 10             	add    esp,0x10
c0006df7:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006e01:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006e0b:	31 c0                	xor    eax,eax
c0006e0d:	83 c4 08             	add    esp,0x8
c0006e10:	5b                   	pop    ebx
c0006e11:	c3                   	ret    
c0006e12:	66 90                	xchg   ax,ax

c0006e14 <lwip_init>:
c0006e14:	83 ec 0c             	sub    esp,0xc
c0006e17:	e8 48 2c 00 00       	call   c0009a64 <stats_init>
c0006e1c:	e8 7b 9f ff ff       	call   c0000d9c <sys_init>
c0006e21:	e8 ae 01 00 00       	call   c0006fd4 <mem_init>
c0006e26:	e8 05 0a 00 00       	call   c0007830 <memp_init>
c0006e2b:	e8 e8 0c 00 00       	call   c0007b18 <netif_init>
c0006e30:	e8 07 9e ff ff       	call   c0000c3c <lwip_socket_init>
c0006e35:	e8 76 9d 00 00       	call   c0010bb0 <sys_timeouts_init>
c0006e3a:	90                   	nop
c0006e3b:	83 c4 0c             	add    esp,0xc
c0006e3e:	c3                   	ret    
c0006e3f:	90                   	nop

c0006e40 <plug_holes>:
c0006e40:	83 ec 1c             	sub    esp,0x1c
c0006e43:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e4c:	73 16                	jae    c0006e64 <plug_holes+0x24>
c0006e4e:	83 ec 08             	sub    esp,0x8
c0006e51:	68 8f fa 02 c0       	push   0xc002fa8f
c0006e56:	68 a6 fa 02 c0       	push   0xc002faa6
c0006e5b:	e8 30 8d 01 00       	call   c001fb90 <CPrintf>
c0006e60:	83 c4 10             	add    esp,0x10
c0006e63:	90                   	nop
c0006e64:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e69:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e6d:	72 15                	jb     c0006e84 <plug_holes+0x44>
c0006e6f:	83 ec 08             	sub    esp,0x8
c0006e72:	68 b3 fa 02 c0       	push   0xc002fab3
c0006e77:	68 a6 fa 02 c0       	push   0xc002faa6
c0006e7c:	e8 0f 8d 01 00       	call   c001fb90 <CPrintf>
c0006e81:	83 c4 10             	add    esp,0x10
c0006e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e88:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e8b:	0f b6 c0             	movzx  eax,al
c0006e8e:	85 c0                	test   eax,eax
c0006e90:	74 16                	je     c0006ea8 <plug_holes+0x68>
c0006e92:	83 ec 08             	sub    esp,0x8
c0006e95:	68 cd fa 02 c0       	push   0xc002facd
c0006e9a:	68 a6 fa 02 c0       	push   0xc002faa6
c0006e9f:	e8 ec 8c 01 00       	call   c001fb90 <CPrintf>
c0006ea4:	83 c4 10             	add    esp,0x10
c0006ea7:	90                   	nop
c0006ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eac:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eaf:	0f b7 c0             	movzx  eax,ax
c0006eb2:	3d 40 06 00 00       	cmp    eax,0x640
c0006eb7:	76 17                	jbe    c0006ed0 <plug_holes+0x90>
c0006eb9:	83 ec 08             	sub    esp,0x8
c0006ebc:	68 60 fb 02 c0       	push   0xc002fb60
c0006ec1:	68 a6 fa 02 c0       	push   0xc002faa6
c0006ec6:	e8 c5 8c 01 00       	call   c001fb90 <CPrintf>
c0006ecb:	83 c4 10             	add    esp,0x10
c0006ece:	66 90                	xchg   ax,ax
c0006ed0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006edd:	0f b7 c0             	movzx  eax,ax
c0006ee0:	01 d0                	add    eax,edx
c0006ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eea:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006eee:	74 64                	je     c0006f54 <plug_holes+0x114>
c0006ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ef7:	0f b6 c0             	movzx  eax,al
c0006efa:	85 c0                	test   eax,eax
c0006efc:	75 56                	jne    c0006f54 <plug_holes+0x114>
c0006efe:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f03:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f07:	74 4b                	je     c0006f54 <plug_holes+0x114>
c0006f09:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f0e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f12:	75 0c                	jne    c0006f20 <plug_holes+0xe0>
c0006f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f18:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0006f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f24:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f2b:	66 89 02             	mov    WORD PTR [edx],ax
c0006f2e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f37:	29 c2                	sub    edx,eax
c0006f39:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f43:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f46:	0f b7 c0             	movzx  eax,ax
c0006f49:	01 c1                	add    ecx,eax
c0006f4b:	89 d0                	mov    eax,edx
c0006f4d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006f51:	8d 76 00             	lea    esi,[esi+0x0]
c0006f54:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f5e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006f62:	0f b7 c0             	movzx  eax,ax
c0006f65:	01 d0                	add    eax,edx
c0006f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f6f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006f73:	74 57                	je     c0006fcc <plug_holes+0x18c>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006f7c:	0f b6 c0             	movzx  eax,al
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	75 49                	jne    c0006fcc <plug_holes+0x18c>
c0006f83:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f8c:	75 0a                	jne    c0006f98 <plug_holes+0x158>
c0006f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f92:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f97:	90                   	nop
c0006f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f9c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fa3:	66 89 02             	mov    WORD PTR [edx],ax
c0006fa6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006faf:	29 c2                	sub    edx,eax
c0006fb1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fbb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006fbe:	0f b7 c0             	movzx  eax,ax
c0006fc1:	01 c1                	add    ecx,eax
c0006fc3:	89 d0                	mov    eax,edx
c0006fc5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0006fcc:	90                   	nop
c0006fcd:	83 c4 1c             	add    esp,0x1c
c0006fd0:	c3                   	ret    
c0006fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0006fd4 <mem_init>:
c0006fd4:	83 ec 1c             	sub    esp,0x1c
c0006fd7:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006fe1:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fee:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ff7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007001:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007005:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700a:	05 40 06 00 00       	add    eax,0x640
c000700f:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0007014:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007019:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000701d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007022:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0007027:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000702c:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0007032:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007037:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000703c:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0007045:	83 ec 08             	sub    esp,0x8
c0007048:	6a 01                	push   0x1
c000704a:	68 98 76 03 c0       	push   0xc0037698
c000704f:	e8 18 9c ff ff       	call   c0000c6c <sys_sem_new>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	0f be c0             	movsx  eax,al
c000705a:	85 c0                	test   eax,eax
c000705c:	74 16                	je     c0007074 <mem_init+0xa0>
c000705e:	83 ec 08             	sub    esp,0x8
c0007061:	68 e8 fa 02 c0       	push   0xc002fae8
c0007066:	68 a6 fa 02 c0       	push   0xc002faa6
c000706b:	e8 20 8b 01 00       	call   c001fb90 <CPrintf>
c0007070:	83 c4 10             	add    esp,0x10
c0007073:	90                   	nop
c0007074:	90                   	nop
c0007075:	83 c4 1c             	add    esp,0x1c
c0007078:	c3                   	ret    
c0007079:	8d 76 00             	lea    esi,[esi+0x0]

c000707c <mem_free>:
c000707c:	83 ec 1c             	sub    esp,0x1c
c000707f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007084:	0f 84 0e 01 00 00    	je     c0007198 <mem_free+0x11c>
c000708a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000708f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007093:	72 0b                	jb     c00070a0 <mem_free+0x24>
c0007095:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000709e:	72 18                	jb     c00070b8 <mem_free+0x3c>
c00070a0:	83 ec 08             	sub    esp,0x8
c00070a3:	68 03 fb 02 c0       	push   0xc002fb03
c00070a8:	68 a6 fa 02 c0       	push   0xc002faa6
c00070ad:	e8 de 8a 01 00       	call   c001fb90 <CPrintf>
c00070b2:	83 c4 10             	add    esp,0x10
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070bd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070c1:	72 0d                	jb     c00070d0 <mem_free+0x54>
c00070c3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070c8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070cc:	72 22                	jb     c00070f0 <mem_free+0x74>
c00070ce:	66 90                	xchg   ax,ax
c00070d0:	e8 ab 8a 01 00       	call   c001fb80 <CLockScheduler>
c00070d5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00070db:	83 c0 01             	add    eax,0x1
c00070de:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00070e4:	e8 7b 8a 01 00       	call   c001fb64 <CUnlockScheduler>
c00070e9:	e9 ae 00 00 00       	jmp    c000719c <mem_free+0x120>
c00070ee:	66 90                	xchg   ax,ax
c00070f0:	83 ec 08             	sub    esp,0x8
c00070f3:	6a 00                	push   0x0
c00070f5:	68 98 76 03 c0       	push   0xc0037698
c00070fa:	e8 c5 9b ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007106:	83 e8 06             	sub    eax,0x6
c0007109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000710d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 15                	jne    c0007130 <mem_free+0xb4>
c000711b:	83 ec 08             	sub    esp,0x8
c000711e:	68 1a fb 02 c0       	push   0xc002fb1a
c0007123:	68 a6 fa 02 c0       	push   0xc002faa6
c0007128:	e8 63 8a 01 00       	call   c001fb90 <CPrintf>
c000712d:	83 c4 10             	add    esp,0x10
c0007130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007134:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007138:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000713d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007141:	73 09                	jae    c000714c <mem_free+0xd0>
c0007143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007147:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000714c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007152:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000715c:	29 d1                	sub    ecx,edx
c000715e:	89 ca                	mov    edx,ecx
c0007160:	89 d1                	mov    ecx,edx
c0007162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007166:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007169:	29 d1                	sub    ecx,edx
c000716b:	89 ca                	mov    edx,ecx
c000716d:	01 d0                	add    eax,edx
c000716f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007175:	83 ec 0c             	sub    esp,0xc
c0007178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000717c:	e8 bf fc ff ff       	call   c0006e40 <plug_holes>
c0007181:	83 c4 10             	add    esp,0x10
c0007184:	83 ec 0c             	sub    esp,0xc
c0007187:	68 98 76 03 c0       	push   0xc0037698
c000718c:	e8 1b 9b ff ff       	call   c0000cac <sys_sem_signal>
c0007191:	83 c4 10             	add    esp,0x10
c0007194:	eb 06                	jmp    c000719c <mem_free+0x120>
c0007196:	66 90                	xchg   ax,ax
c0007198:	90                   	nop
c0007199:	8d 76 00             	lea    esi,[esi+0x0]
c000719c:	83 c4 1c             	add    esp,0x1c
c000719f:	c3                   	ret    

c00071a0 <mem_trim>:
c00071a0:	83 ec 2c             	sub    esp,0x2c
c00071a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00071a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00071ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071b1:	83 f8 0b             	cmp    eax,0xb
c00071b4:	77 0a                	ja     c00071c0 <mem_trim+0x20>
c00071b6:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00071bd:	8d 76 00             	lea    esi,[esi+0x0]
c00071c0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071c5:	3d 40 06 00 00       	cmp    eax,0x640
c00071ca:	76 0c                	jbe    c00071d8 <mem_trim+0x38>
c00071cc:	b8 00 00 00 00       	mov    eax,0x0
c00071d1:	e9 d6 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00071d6:	66 90                	xchg   ax,ax
c00071d8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071dd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071e1:	72 0d                	jb     c00071f0 <mem_trim+0x50>
c00071e3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071e8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071ec:	72 1a                	jb     c0007208 <mem_trim+0x68>
c00071ee:	66 90                	xchg   ax,ax
c00071f0:	83 ec 08             	sub    esp,0x8
c00071f3:	68 2e fb 02 c0       	push   0xc002fb2e
c00071f8:	68 a6 fa 02 c0       	push   0xc002faa6
c00071fd:	e8 8e 89 01 00       	call   c001fb90 <CPrintf>
c0007202:	83 c4 10             	add    esp,0x10
c0007205:	8d 76 00             	lea    esi,[esi+0x0]
c0007208:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000720d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007211:	72 0d                	jb     c0007220 <mem_trim+0x80>
c0007213:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007218:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000721c:	72 26                	jb     c0007244 <mem_trim+0xa4>
c000721e:	66 90                	xchg   ax,ax
c0007220:	e8 5b 89 01 00       	call   c001fb80 <CLockScheduler>
c0007225:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000722b:	83 c0 01             	add    eax,0x1
c000722e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007234:	e8 2b 89 01 00       	call   c001fb64 <CUnlockScheduler>
c0007239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000723d:	e9 6a 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c0007242:	66 90                	xchg   ax,ax
c0007244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007248:	83 e8 06             	sub    eax,0x6
c000724b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000724f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007254:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007258:	29 c2                	sub    edx,eax
c000725a:	89 d0                	mov    eax,edx
c000725c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007265:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007268:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000726d:	89 d1                	mov    ecx,edx
c000726f:	29 c1                	sub    ecx,eax
c0007271:	89 c8                	mov    eax,ecx
c0007273:	83 e8 06             	sub    eax,0x6
c0007276:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000727b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007280:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007285:	39 c2                	cmp    edx,eax
c0007287:	76 17                	jbe    c00072a0 <mem_trim+0x100>
c0007289:	83 ec 08             	sub    esp,0x8
c000728c:	68 8c fb 02 c0       	push   0xc002fb8c
c0007291:	68 a6 fa 02 c0       	push   0xc002faa6
c0007296:	e8 f5 88 01 00       	call   c001fb90 <CPrintf>
c000729b:	83 c4 10             	add    esp,0x10
c000729e:	66 90                	xchg   ax,ax
c00072a0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072a5:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072aa:	39 c2                	cmp    edx,eax
c00072ac:	76 0a                	jbe    c00072b8 <mem_trim+0x118>
c00072ae:	b8 00 00 00 00       	mov    eax,0x0
c00072b3:	e9 f4 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072b8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072bd:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072c2:	39 c2                	cmp    edx,eax
c00072c4:	75 0a                	jne    c00072d0 <mem_trim+0x130>
c00072c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00072ca:	e9 dd 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072cf:	90                   	nop
c00072d0:	83 ec 08             	sub    esp,0x8
c00072d3:	6a 00                	push   0x0
c00072d5:	68 98 76 03 c0       	push   0xc0037698
c00072da:	e8 e5 99 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00072df:	83 c4 10             	add    esp,0x10
c00072e2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00072ec:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072ef:	0f b7 c0             	movzx  eax,ax
c00072f2:	01 d0                	add    eax,edx
c00072f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072fc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ff:	0f b6 c0             	movzx  eax,al
c0007302:	85 c0                	test   eax,eax
c0007304:	0f 85 c6 00 00 00    	jne    c00073d0 <mem_trim+0x230>
c000730a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000730e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007311:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007316:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000731b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000731f:	01 d0                	add    eax,edx
c0007321:	83 c0 06             	add    eax,0x6
c0007324:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007329:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000732e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007332:	75 14                	jne    c0007348 <mem_trim+0x1a8>
c0007334:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000733a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000733f:	01 d0                	add    eax,edx
c0007341:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007346:	66 90                	xchg   ax,ax
c0007348:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000734e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007353:	01 d0                	add    eax,edx
c0007355:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007359:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000735d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007365:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000736a:	66 89 02             	mov    WORD PTR [edx],ax
c000736d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007371:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007376:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000737a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000737e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007382:	66 89 02             	mov    WORD PTR [edx],ax
c0007385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007389:	66 8b 00             	mov    ax,WORD PTR [eax]
c000738c:	0f b7 c0             	movzx  eax,ax
c000738f:	3d 40 06 00 00       	cmp    eax,0x640
c0007394:	74 1a                	je     c00073b0 <mem_trim+0x210>
c0007396:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000739c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073a3:	0f b7 c0             	movzx  eax,ax
c00073a6:	01 c2                	add    edx,eax
c00073a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073b0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073be:	29 d1                	sub    ecx,edx
c00073c0:	89 ca                	mov    edx,ecx
c00073c2:	01 d0                	add    eax,edx
c00073c4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073ca:	e9 c9 00 00 00       	jmp    c0007498 <mem_trim+0x2f8>
c00073cf:	90                   	nop
c00073d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073d5:	8d 50 12             	lea    edx,[eax+0x12]
c00073d8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00073dd:	39 c2                	cmp    edx,eax
c00073df:	0f 87 b3 00 00 00    	ja     c0007498 <mem_trim+0x2f8>
c00073e5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00073ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073ee:	01 d0                	add    eax,edx
c00073f0:	83 c0 06             	add    eax,0x6
c00073f3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00073f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007403:	01 d0                	add    eax,edx
c0007405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007409:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000740e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007412:	73 0c                	jae    c0007420 <mem_trim+0x280>
c0007414:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007418:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000741d:	8d 76 00             	lea    esi,[esi+0x0]
c0007420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007424:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000742c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000742f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007433:	66 89 02             	mov    WORD PTR [edx],ax
c0007436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000743a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000743f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	66 89 02             	mov    WORD PTR [edx],ax
c000744e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007452:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007455:	0f b7 c0             	movzx  eax,ax
c0007458:	3d 40 06 00 00       	cmp    eax,0x640
c000745d:	74 1d                	je     c000747c <mem_trim+0x2dc>
c000745f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007465:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007469:	66 8b 00             	mov    ax,WORD PTR [eax]
c000746c:	0f b7 c0             	movzx  eax,ax
c000746f:	01 c2                	add    edx,eax
c0007471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007475:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007479:	8d 76 00             	lea    esi,[esi+0x0]
c000747c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007486:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000748a:	29 d1                	sub    ecx,edx
c000748c:	89 ca                	mov    edx,ecx
c000748e:	01 d0                	add    eax,edx
c0007490:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007496:	66 90                	xchg   ax,ax
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	68 98 76 03 c0       	push   0xc0037698
c00074a0:	e8 07 98 ff ff       	call   c0000cac <sys_sem_signal>
c00074a5:	83 c4 10             	add    esp,0x10
c00074a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074ac:	83 c4 2c             	add    esp,0x2c
c00074af:	c3                   	ret    

c00074b0 <mem_malloc>:
c00074b0:	53                   	push   ebx
c00074b1:	83 ec 28             	sub    esp,0x28
c00074b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074b8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00074bd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074c2:	85 c0                	test   eax,eax
c00074c4:	75 0a                	jne    c00074d0 <mem_malloc+0x20>
c00074c6:	b8 00 00 00 00       	mov    eax,0x0
c00074cb:	e9 f4 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074d5:	83 f8 0b             	cmp    eax,0xb
c00074d8:	77 0a                	ja     c00074e4 <mem_malloc+0x34>
c00074da:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00074e1:	8d 76 00             	lea    esi,[esi+0x0]
c00074e4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074e9:	3d 40 06 00 00       	cmp    eax,0x640
c00074ee:	76 0c                	jbe    c00074fc <mem_malloc+0x4c>
c00074f0:	b8 00 00 00 00       	mov    eax,0x0
c00074f5:	e9 ca 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074fa:	66 90                	xchg   ax,ax
c00074fc:	83 ec 08             	sub    esp,0x8
c00074ff:	6a 00                	push   0x0
c0007501:	68 98 76 03 c0       	push   0xc0037698
c0007506:	e8 b9 97 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c000750b:	83 c4 10             	add    esp,0x10
c000750e:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007514:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007519:	29 c2                	sub    edx,eax
c000751b:	89 d0                	mov    eax,edx
c000751d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007522:	e9 5d 02 00 00       	jmp    c0007784 <mem_malloc+0x2d4>
c0007527:	90                   	nop
c0007528:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000752e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007533:	01 d0                	add    eax,edx
c0007535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000753d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007540:	0f b6 c0             	movzx  eax,al
c0007543:	85 c0                	test   eax,eax
c0007545:	0f 85 21 02 00 00    	jne    c000776c <mem_malloc+0x2bc>
c000754b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000754f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007552:	0f b7 d0             	movzx  edx,ax
c0007555:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000755a:	29 c2                	sub    edx,eax
c000755c:	89 d0                	mov    eax,edx
c000755e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007561:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007566:	39 c2                	cmp    edx,eax
c0007568:	0f 82 fe 01 00 00    	jb     c000776c <mem_malloc+0x2bc>
c000756e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007575:	0f b7 d0             	movzx  edx,ax
c0007578:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000757d:	29 c2                	sub    edx,eax
c000757f:	89 d0                	mov    eax,edx
c0007581:	8d 50 fa             	lea    edx,[eax-0x6]
c0007584:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007589:	83 c0 12             	add    eax,0x12
c000758c:	39 c2                	cmp    edx,eax
c000758e:	0f 82 c4 00 00 00    	jb     c0007658 <mem_malloc+0x1a8>
c0007594:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	01 d0                	add    eax,edx
c000759f:	83 c0 06             	add    eax,0x6
c00075a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00075a7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00075b2:	01 d0                	add    eax,edx
c00075b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075d2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075df:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00075e4:	66 89 02             	mov    WORD PTR [edx],ax
c00075e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075eb:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075f3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075f6:	0f b7 c0             	movzx  eax,ax
c00075f9:	3d 40 06 00 00       	cmp    eax,0x640
c00075fe:	74 1c                	je     c000761c <mem_malloc+0x16c>
c0007600:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000760d:	0f b7 c0             	movzx  eax,ax
c0007610:	01 c2                	add    edx,eax
c0007612:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007617:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000761b:	90                   	nop
c000761c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007626:	01 d0                	add    eax,edx
c0007628:	83 c0 06             	add    eax,0x6
c000762b:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007631:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007638:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000763e:	0f b7 d2             	movzx  edx,dx
c0007641:	0f b7 c0             	movzx  eax,ax
c0007644:	39 c2                	cmp    edx,eax
c0007646:	73 60                	jae    c00076a8 <mem_malloc+0x1f8>
c0007648:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000764e:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007654:	eb 52                	jmp    c00076a8 <mem_malloc+0x1f8>
c0007656:	66 90                	xchg   ax,ax
c0007658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007660:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007666:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000766a:	66 8b 12             	mov    dx,WORD PTR [edx]
c000766d:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007677:	29 cb                	sub    ebx,ecx
c0007679:	89 d9                	mov    ecx,ebx
c000767b:	29 ca                	sub    edx,ecx
c000767d:	01 d0                	add    eax,edx
c000767f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007685:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000768c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007692:	0f b7 d2             	movzx  edx,dx
c0007695:	0f b7 c0             	movzx  eax,ax
c0007698:	39 c2                	cmp    edx,eax
c000769a:	73 0c                	jae    c00076a8 <mem_malloc+0x1f8>
c000769c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076a2:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00076a8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076ad:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00076b1:	75 71                	jne    c0007724 <mem_malloc+0x274>
c00076b3:	eb 1b                	jmp    c00076d0 <mem_malloc+0x220>
c00076b5:	8d 76 00             	lea    esi,[esi+0x0]
c00076b8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076be:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076c3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076c6:	0f b7 c0             	movzx  eax,ax
c00076c9:	01 d0                	add    eax,edx
c00076cb:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00076d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	74 11                	je     c00076f0 <mem_malloc+0x240>
c00076df:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076e5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076ea:	39 c2                	cmp    edx,eax
c00076ec:	75 ca                	jne    c00076b8 <mem_malloc+0x208>
c00076ee:	66 90                	xchg   ax,ax
c00076f0:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076f6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076fb:	39 c2                	cmp    edx,eax
c00076fd:	74 25                	je     c0007724 <mem_malloc+0x274>
c00076ff:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007704:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007707:	0f b6 c0             	movzx  eax,al
c000770a:	85 c0                	test   eax,eax
c000770c:	74 16                	je     c0007724 <mem_malloc+0x274>
c000770e:	83 ec 08             	sub    esp,0x8
c0007711:	68 45 fb 02 c0       	push   0xc002fb45
c0007716:	68 a6 fa 02 c0       	push   0xc002faa6
c000771b:	e8 70 84 01 00       	call   c001fb90 <CPrintf>
c0007720:	83 c4 10             	add    esp,0x10
c0007723:	90                   	nop
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	68 98 76 03 c0       	push   0xc0037698
c000772c:	e8 7b 95 ff ff       	call   c0000cac <sys_sem_signal>
c0007731:	83 c4 10             	add    esp,0x10
c0007734:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000773d:	01 d0                	add    eax,edx
c000773f:	8d 50 06             	lea    edx,[eax+0x6]
c0007742:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007747:	39 c2                	cmp    edx,eax
c0007749:	76 15                	jbe    c0007760 <mem_malloc+0x2b0>
c000774b:	83 ec 08             	sub    esp,0x8
c000774e:	68 ac fb 02 c0       	push   0xc002fbac
c0007753:	68 a6 fa 02 c0       	push   0xc002faa6
c0007758:	e8 33 84 01 00       	call   c001fb90 <CPrintf>
c000775d:	83 c4 10             	add    esp,0x10
c0007760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007764:	83 c0 06             	add    eax,0x6
c0007767:	eb 5b                	jmp    c00077c4 <mem_malloc+0x314>
c0007769:	8d 76 00             	lea    esi,[esi+0x0]
c000776c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007772:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007777:	01 d0                	add    eax,edx
c0007779:	66 8b 00             	mov    ax,WORD PTR [eax]
c000777c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007781:	8d 76 00             	lea    esi,[esi+0x0]
c0007784:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007789:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000778e:	b9 40 06 00 00       	mov    ecx,0x640
c0007793:	29 d1                	sub    ecx,edx
c0007795:	89 ca                	mov    edx,ecx
c0007797:	39 d0                	cmp    eax,edx
c0007799:	0f 8c 89 fd ff ff    	jl     c0007528 <mem_malloc+0x78>
c000779f:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00077a5:	83 c0 01             	add    eax,0x1
c00077a8:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00077ae:	83 ec 0c             	sub    esp,0xc
c00077b1:	68 98 76 03 c0       	push   0xc0037698
c00077b6:	e8 f1 94 ff ff       	call   c0000cac <sys_sem_signal>
c00077bb:	83 c4 10             	add    esp,0x10
c00077be:	b8 00 00 00 00       	mov    eax,0x0
c00077c3:	90                   	nop
c00077c4:	83 c4 28             	add    esp,0x28
c00077c7:	5b                   	pop    ebx
c00077c8:	c3                   	ret    
c00077c9:	8d 76 00             	lea    esi,[esi+0x0]

c00077cc <mem_calloc>:
c00077cc:	83 ec 2c             	sub    esp,0x2c
c00077cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00077d7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00077dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00077e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e9:	0f af c2             	imul   eax,edx
c00077ec:	0f b7 c0             	movzx  eax,ax
c00077ef:	83 ec 0c             	sub    esp,0xc
c00077f2:	50                   	push   eax
c00077f3:	e8 b8 fc ff ff       	call   c00074b0 <mem_malloc>
c00077f8:	83 c4 10             	add    esp,0x10
c00077fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007804:	74 22                	je     c0007828 <mem_calloc+0x5c>
c0007806:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000780b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007810:	0f af c2             	imul   eax,edx
c0007813:	83 ec 04             	sub    esp,0x4
c0007816:	50                   	push   eax
c0007817:	6a 00                	push   0x0
c0007819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000781d:	e8 ce 8c ff ff       	call   c00004f0 <memset>
c0007822:	83 c4 10             	add    esp,0x10
c0007825:	8d 76 00             	lea    esi,[esi+0x0]
c0007828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000782c:	83 c4 2c             	add    esp,0x2c
c000782f:	c3                   	ret    

c0007830 <memp_init>:
c0007830:	83 ec 10             	sub    esp,0x10
c0007833:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000783a:	eb 78                	jmp    c00078b4 <memp_init+0x84>
c000783c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007841:	89 d0                	mov    eax,edx
c0007843:	c1 e0 02             	shl    eax,0x2
c0007846:	01 d0                	add    eax,edx
c0007848:	01 c0                	add    eax,eax
c000784a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000784f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007854:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007859:	89 d0                	mov    eax,edx
c000785b:	c1 e0 02             	shl    eax,0x2
c000785e:	01 d0                	add    eax,edx
c0007860:	01 c0                	add    eax,eax
c0007862:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007867:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000786c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007871:	89 d0                	mov    eax,edx
c0007873:	c1 e0 02             	shl    eax,0x2
c0007876:	01 d0                	add    eax,edx
c0007878:	01 c0                	add    eax,eax
c000787a:	05 d8 67 03 c0       	add    eax,0xc00367d8
c000787f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007884:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007889:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c000788e:	66 8b 94 00 fc fb 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0404]
c0007896:	89 c8                	mov    eax,ecx
c0007898:	c1 e0 02             	shl    eax,0x2
c000789b:	01 c8                	add    eax,ecx
c000789d:	01 c0                	add    eax,eax
c000789f:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00078a4:	66 89 10             	mov    WORD PTR [eax],dx
c00078a7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078ac:	83 c0 01             	add    eax,0x1
c00078af:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078b4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b9:	83 f8 0d             	cmp    eax,0xd
c00078bc:	0f 86 7a ff ff ff    	jbe    c000783c <memp_init+0xc>
c00078c2:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00078ca:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00078d1:	e9 8a 00 00 00       	jmp    c0007960 <memp_init+0x130>
c00078d6:	66 90                	xchg   ax,ax
c00078d8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078dd:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c00078e8:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00078ef:	eb 47                	jmp    c0007938 <memp_init+0x108>
c00078f1:	8d 76 00             	lea    esi,[esi+0x0]
c00078f4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078f9:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007904:	89 10                	mov    DWORD PTR [eax],edx
c0007906:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000790b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000790f:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007916:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000791b:	66 8b 84 00 18 fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd03e8]
c0007923:	0f b7 c0             	movzx  eax,ax
c0007926:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000792a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792e:	83 c0 01             	add    eax,0x1
c0007931:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007936:	66 90                	xchg   ax,ax
c0007938:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000793d:	66 8b 84 00 fc fb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0404]
c0007945:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000794a:	0f b7 c0             	movzx  eax,ax
c000794d:	39 c2                	cmp    edx,eax
c000794f:	72 a3                	jb     c00078f4 <memp_init+0xc4>
c0007951:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007956:	83 c0 01             	add    eax,0x1
c0007959:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000795e:	66 90                	xchg   ax,ax
c0007960:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007965:	83 f8 0d             	cmp    eax,0xd
c0007968:	0f 86 6a ff ff ff    	jbe    c00078d8 <memp_init+0xa8>
c000796e:	90                   	nop
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	c3                   	ret    
c0007973:	90                   	nop

c0007974 <memp_malloc>:
c0007974:	83 ec 1c             	sub    esp,0x1c
c0007977:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c000797c:	76 22                	jbe    c00079a0 <memp_malloc+0x2c>
c000797e:	83 ec 08             	sub    esp,0x8
c0007981:	68 dc fb 02 c0       	push   0xc002fbdc
c0007986:	68 a6 fa 02 c0       	push   0xc002faa6
c000798b:	e8 00 82 01 00       	call   c001fb90 <CPrintf>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	b8 00 00 00 00       	mov    eax,0x0
c0007998:	e9 ff 00 00 00       	jmp    c0007a9c <memp_malloc+0x128>
c000799d:	8d 76 00             	lea    esi,[esi+0x0]
c00079a0:	e8 db 81 01 00       	call   c001fb80 <CLockScheduler>
c00079a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079a9:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00079b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00079b9:	0f 84 a1 00 00 00    	je     c0007a60 <memp_malloc+0xec>
c00079bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00079c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079c9:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079d4:	89 d0                	mov    eax,edx
c00079d6:	c1 e0 02             	shl    eax,0x2
c00079d9:	01 d0                	add    eax,edx
c00079db:	01 c0                	add    eax,eax
c00079dd:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079e5:	83 c0 01             	add    eax,0x1
c00079e8:	89 c2                	mov    edx,eax
c00079ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ee:	89 c8                	mov    eax,ecx
c00079f0:	c1 e0 02             	shl    eax,0x2
c00079f3:	01 c8                	add    eax,ecx
c00079f5:	01 c0                	add    eax,eax
c00079f7:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079fc:	66 89 10             	mov    WORD PTR [eax],dx
c00079ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a03:	89 d0                	mov    eax,edx
c0007a05:	c1 e0 02             	shl    eax,0x2
c0007a08:	01 d0                	add    eax,edx
c0007a0a:	01 c0                	add    eax,eax
c0007a0c:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a11:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a18:	89 c8                	mov    eax,ecx
c0007a1a:	c1 e0 02             	shl    eax,0x2
c0007a1d:	01 c8                	add    eax,ecx
c0007a1f:	01 c0                	add    eax,eax
c0007a21:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a29:	0f b7 d2             	movzx  edx,dx
c0007a2c:	0f b7 c0             	movzx  eax,ax
c0007a2f:	39 c2                	cmp    edx,eax
c0007a31:	73 5d                	jae    c0007a90 <memp_malloc+0x11c>
c0007a33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a37:	89 d0                	mov    eax,edx
c0007a39:	c1 e0 02             	shl    eax,0x2
c0007a3c:	01 d0                	add    eax,edx
c0007a3e:	01 c0                	add    eax,eax
c0007a40:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a45:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a4c:	89 c8                	mov    eax,ecx
c0007a4e:	c1 e0 02             	shl    eax,0x2
c0007a51:	01 c8                	add    eax,ecx
c0007a53:	01 c0                	add    eax,eax
c0007a55:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a5a:	66 89 10             	mov    WORD PTR [eax],dx
c0007a5d:	eb 31                	jmp    c0007a90 <memp_malloc+0x11c>
c0007a5f:	90                   	nop
c0007a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a64:	89 d0                	mov    eax,edx
c0007a66:	c1 e0 02             	shl    eax,0x2
c0007a69:	01 d0                	add    eax,edx
c0007a6b:	01 c0                	add    eax,eax
c0007a6d:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a72:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a75:	83 c0 01             	add    eax,0x1
c0007a78:	89 c2                	mov    edx,eax
c0007a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a7e:	89 c8                	mov    eax,ecx
c0007a80:	c1 e0 02             	shl    eax,0x2
c0007a83:	01 c8                	add    eax,ecx
c0007a85:	01 c0                	add    eax,eax
c0007a87:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a8c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a8f:	90                   	nop
c0007a90:	e8 cf 80 01 00       	call   c001fb64 <CUnlockScheduler>
c0007a95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a99:	8d 76 00             	lea    esi,[esi+0x0]
c0007a9c:	83 c4 1c             	add    esp,0x1c
c0007a9f:	c3                   	ret    

c0007aa0 <memp_free>:
c0007aa0:	83 ec 1c             	sub    esp,0x1c
c0007aa3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007aa8:	74 66                	je     c0007b10 <memp_free+0x70>
c0007aaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ab2:	e8 c9 80 01 00       	call   c001fb80 <CLockScheduler>
c0007ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007abb:	89 d0                	mov    eax,edx
c0007abd:	c1 e0 02             	shl    eax,0x2
c0007ac0:	01 d0                	add    eax,edx
c0007ac2:	01 c0                	add    eax,eax
c0007ac4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ac9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007acc:	83 e8 01             	sub    eax,0x1
c0007acf:	89 c2                	mov    edx,eax
c0007ad1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ad5:	89 c8                	mov    eax,ecx
c0007ad7:	c1 e0 02             	shl    eax,0x2
c0007ada:	01 c8                	add    eax,ecx
c0007adc:	01 c0                	add    eax,eax
c0007ade:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ae3:	66 89 10             	mov    WORD PTR [eax],dx
c0007ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007aea:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007af5:	89 10                	mov    DWORD PTR [eax],edx
c0007af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aff:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b06:	e8 59 80 01 00       	call   c001fb64 <CUnlockScheduler>
c0007b0b:	eb 07                	jmp    c0007b14 <memp_free+0x74>
c0007b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b10:	90                   	nop
c0007b11:	8d 76 00             	lea    esi,[esi+0x0]
c0007b14:	83 c4 1c             	add    esp,0x1c
c0007b17:	c3                   	ret    

c0007b18 <netif_init>:
c0007b18:	90                   	nop
c0007b19:	c3                   	ret    
c0007b1a:	66 90                	xchg   ax,ax

c0007b1c <netif_find>:
c0007b1c:	83 ec 10             	sub    esp,0x10
c0007b1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007b24:	75 0a                	jne    c0007b30 <netif_find+0x14>
c0007b26:	b8 00 00 00 00       	mov    eax,0x0
c0007b2b:	e9 80 00 00 00       	jmp    c0007bb0 <netif_find+0x94>
c0007b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b34:	83 c0 02             	add    eax,0x2
c0007b37:	8a 00                	mov    al,BYTE PTR [eax]
c0007b39:	83 e8 30             	sub    eax,0x30
c0007b3c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007b40:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b49:	eb 59                	jmp    c0007ba4 <netif_find+0x88>
c0007b4b:	90                   	nop
c0007b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b50:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007b53:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007b58:	0f b6 c0             	movzx  eax,al
c0007b5b:	39 c2                	cmp    edx,eax
c0007b5d:	75 39                	jne    c0007b98 <netif_find+0x7c>
c0007b5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b63:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b69:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007b6c:	0f be d2             	movsx  edx,dl
c0007b6f:	0f be c0             	movsx  eax,al
c0007b72:	39 c2                	cmp    edx,eax
c0007b74:	75 22                	jne    c0007b98 <netif_find+0x7c>
c0007b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b7a:	83 c0 01             	add    eax,0x1
c0007b7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b83:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007b86:	0f be d2             	movsx  edx,dl
c0007b89:	0f be c0             	movsx  eax,al
c0007b8c:	39 c2                	cmp    edx,eax
c0007b8e:	75 08                	jne    c0007b98 <netif_find+0x7c>
c0007b90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b94:	eb 1a                	jmp    c0007bb0 <netif_find+0x94>
c0007b96:	66 90                	xchg   ax,ax
c0007b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ba2:	66 90                	xchg   ax,ax
c0007ba4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007ba9:	75 a1                	jne    c0007b4c <netif_find+0x30>
c0007bab:	b8 00 00 00 00       	mov    eax,0x0
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	c3                   	ret    

c0007bb4 <netif_set_ipaddr>:
c0007bb4:	83 ec 1c             	sub    esp,0x1c
c0007bb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007bc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bc4:	39 c2                	cmp    edx,eax
c0007bc6:	0f 84 bc 00 00 00    	je     c0007c88 <netif_set_ipaddr+0xd4>
c0007bcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bd5:	eb 45                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007bd7:	90                   	nop
c0007bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007be5:	39 c2                	cmp    edx,eax
c0007be7:	75 27                	jne    c0007c10 <netif_set_ipaddr+0x5c>
c0007be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007bf4:	83 ec 0c             	sub    esp,0xc
c0007bf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007bfb:	e8 7c 36 00 00       	call   c000b27c <tcp_abort>
c0007c00:	83 c4 10             	add    esp,0x10
c0007c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c0b:	eb 0f                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c1b:	90                   	nop
c0007c1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007c21:	75 b5                	jne    c0007bd8 <netif_set_ipaddr+0x24>
c0007c23:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c2c:	eb 52                	jmp    c0007c80 <netif_set_ipaddr+0xcc>
c0007c2e:	66 90                	xchg   ax,ax
c0007c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c34:	85 c0                	test   eax,eax
c0007c36:	74 3c                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c3e:	85 c0                	test   eax,eax
c0007c40:	74 32                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c46:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c4f:	39 c2                	cmp    edx,eax
c0007c51:	75 21                	jne    c0007c74 <netif_set_ipaddr+0xc0>
c0007c53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c58:	74 0a                	je     c0007c64 <netif_set_ipaddr+0xb0>
c0007c5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c60:	eb 0a                	jmp    c0007c6c <netif_set_ipaddr+0xb8>
c0007c62:	66 90                	xchg   ax,ax
c0007c64:	b8 00 00 00 00       	mov    eax,0x0
c0007c69:	8d 76 00             	lea    esi,[esi+0x0]
c0007c6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c70:	89 02                	mov    DWORD PTR [edx],eax
c0007c72:	66 90                	xchg   ax,ax
c0007c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c7f:	90                   	nop
c0007c80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c85:	75 a9                	jne    c0007c30 <netif_set_ipaddr+0x7c>
c0007c87:	90                   	nop
c0007c88:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c8d:	74 09                	je     c0007c98 <netif_set_ipaddr+0xe4>
c0007c8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c95:	eb 09                	jmp    c0007ca0 <netif_set_ipaddr+0xec>
c0007c97:	90                   	nop
c0007c98:	b8 00 00 00 00       	mov    eax,0x0
c0007c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ca4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007ca7:	90                   	nop
c0007ca8:	83 c4 1c             	add    esp,0x1c
c0007cab:	c3                   	ret    

c0007cac <netif_set_gw>:
c0007cac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cb1:	74 09                	je     c0007cbc <netif_set_gw+0x10>
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cb9:	eb 09                	jmp    c0007cc4 <netif_set_gw+0x18>
c0007cbb:	90                   	nop
c0007cbc:	b8 00 00 00 00       	mov    eax,0x0
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cc8:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007ccb:	90                   	nop
c0007ccc:	c3                   	ret    
c0007ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0007cd0 <netif_set_netmask>:
c0007cd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd5:	74 09                	je     c0007ce0 <netif_set_netmask+0x10>
c0007cd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cdd:	eb 09                	jmp    c0007ce8 <netif_set_netmask+0x18>
c0007cdf:	90                   	nop
c0007ce0:	b8 00 00 00 00       	mov    eax,0x0
c0007ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ce8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007cef:	90                   	nop
c0007cf0:	c3                   	ret    
c0007cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0007cf4 <netif_set_addr>:
c0007cf4:	83 ec 0c             	sub    esp,0xc
c0007cf7:	83 ec 08             	sub    esp,0x8
c0007cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 ad fe ff ff       	call   c0007bb4 <netif_set_ipaddr>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d15:	e8 b6 ff ff ff       	call   c0007cd0 <netif_set_netmask>
c0007d1a:	83 c4 10             	add    esp,0x10
c0007d1d:	83 ec 08             	sub    esp,0x8
c0007d20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d28:	e8 7f ff ff ff       	call   c0007cac <netif_set_gw>
c0007d2d:	83 c4 10             	add    esp,0x10
c0007d30:	90                   	nop
c0007d31:	83 c4 0c             	add    esp,0xc
c0007d34:	c3                   	ret    
c0007d35:	8d 76 00             	lea    esi,[esi+0x0]

c0007d38 <netif_add>:
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007d40:	75 16                	jne    c0007d58 <netif_add+0x20>
c0007d42:	83 ec 08             	sub    esp,0x8
c0007d45:	68 34 fc 02 c0       	push   0xc002fc34
c0007d4a:	68 a6 fa 02 c0       	push   0xc002faa6
c0007d4f:	e8 3c 7e 01 00       	call   c001fb90 <CPrintf>
c0007d54:	83 c4 10             	add    esp,0x10
c0007d57:	90                   	nop
c0007d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d72:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7d:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007d89:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007d8c:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007d91:	8d 50 01             	lea    edx,[eax+0x1]
c0007d94:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007d9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d9e:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007da9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 33 ff ff ff       	call   c0007cf4 <netif_set_addr>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 ec 0c             	sub    esp,0xc
c0007dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007dcf:	ff d0                	call   eax
c0007dd1:	83 c4 10             	add    esp,0x10
c0007dd4:	0f be c0             	movsx  eax,al
c0007dd7:	85 c0                	test   eax,eax
c0007dd9:	74 09                	je     c0007de4 <netif_add+0xac>
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	eb 1e                	jmp    c0007e00 <netif_add+0xc8>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dee:	89 10                	mov    DWORD PTR [eax],edx
c0007df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df4:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0007e00:	83 c4 0c             	add    esp,0xc
c0007e03:	c3                   	ret    

c0007e04 <netif_set_default>:
c0007e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e08:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007e0d:	90                   	nop
c0007e0e:	c3                   	ret    
c0007e0f:	90                   	nop

c0007e10 <netif_set_up>:
c0007e10:	83 ec 0c             	sub    esp,0xc
c0007e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e17:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e1a:	0f b6 c0             	movzx  eax,al
c0007e1d:	83 e0 01             	and    eax,0x1
c0007e20:	75 4a                	jne    c0007e6c <netif_set_up+0x5c>
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e29:	83 c8 01             	or     eax,0x1
c0007e2c:	88 c2                	mov    dl,al
c0007e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e32:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e39:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e3c:	0f b6 c0             	movzx  eax,al
c0007e3f:	83 e0 10             	and    eax,0x10
c0007e42:	74 28                	je     c0007e6c <netif_set_up+0x5c>
c0007e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e48:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e4b:	0f b6 c0             	movzx  eax,al
c0007e4e:	83 e0 20             	and    eax,0x20
c0007e51:	74 19                	je     c0007e6c <netif_set_up+0x5c>
c0007e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e57:	83 c0 04             	add    eax,0x4
c0007e5a:	83 ec 08             	sub    esp,0x8
c0007e5d:	50                   	push   eax
c0007e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e62:	e8 bd a5 00 00       	call   c0012424 <etharp_request>
c0007e67:	83 c4 10             	add    esp,0x10
c0007e6a:	66 90                	xchg   ax,ax
c0007e6c:	90                   	nop
c0007e6d:	83 c4 0c             	add    esp,0xc
c0007e70:	c3                   	ret    
c0007e71:	8d 76 00             	lea    esi,[esi+0x0]

c0007e74 <netif_set_down>:
c0007e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e78:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e7b:	0f b6 c0             	movzx  eax,al
c0007e7e:	83 e0 01             	and    eax,0x1
c0007e81:	74 15                	je     c0007e98 <netif_set_down+0x24>
c0007e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e87:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e8a:	83 e0 fe             	and    eax,0xfffffffe
c0007e8d:	88 c2                	mov    dl,al
c0007e8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e93:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e96:	66 90                	xchg   ax,ax
c0007e98:	90                   	nop
c0007e99:	c3                   	ret    
c0007e9a:	66 90                	xchg   ax,ax

c0007e9c <netif_remove>:
c0007e9c:	83 ec 10             	sub    esp,0x10
c0007e9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007ea4:	0f 84 92 00 00 00    	je     c0007f3c <netif_remove+0xa0>
c0007eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eae:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb1:	83 e0 01             	and    eax,0x1
c0007eb4:	0f b6 c0             	movzx  eax,al
c0007eb7:	85 c0                	test   eax,eax
c0007eb9:	74 0d                	je     c0007ec8 <netif_remove+0x2c>
c0007ebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ebf:	e8 b0 ff ff ff       	call   c0007e74 <netif_set_down>
c0007ec4:	83 c4 04             	add    esp,0x4
c0007ec7:	90                   	nop
c0007ec8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ecd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ed1:	75 0d                	jne    c0007ee0 <netif_remove+0x44>
c0007ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ed9:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007ede:	eb 44                	jmp    c0007f24 <netif_remove+0x88>
c0007ee0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ee9:	eb 29                	jmp    c0007f14 <netif_remove+0x78>
c0007eeb:	90                   	nop
c0007eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ef2:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ef6:	75 10                	jne    c0007f08 <netif_remove+0x6c>
c0007ef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007efc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f02:	89 10                	mov    DWORD PTR [eax],edx
c0007f04:	eb 16                	jmp    c0007f1c <netif_remove+0x80>
c0007f06:	66 90                	xchg   ax,ax
c0007f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f12:	66 90                	xchg   ax,ax
c0007f14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f19:	75 d1                	jne    c0007eec <netif_remove+0x50>
c0007f1b:	90                   	nop
c0007f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f21:	74 1d                	je     c0007f40 <netif_remove+0xa4>
c0007f23:	90                   	nop
c0007f24:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007f29:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f2d:	75 15                	jne    c0007f44 <netif_remove+0xa8>
c0007f2f:	6a 00                	push   0x0
c0007f31:	e8 ce fe ff ff       	call   c0007e04 <netif_set_default>
c0007f36:	83 c4 04             	add    esp,0x4
c0007f39:	eb 09                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3b:	90                   	nop
c0007f3c:	90                   	nop
c0007f3d:	eb 05                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3f:	90                   	nop
c0007f40:	90                   	nop
c0007f41:	8d 76 00             	lea    esi,[esi+0x0]
c0007f44:	83 c4 10             	add    esp,0x10
c0007f47:	c3                   	ret    

c0007f48 <netif_set_link_up>:
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f4f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f52:	0f b6 c0             	movzx  eax,al
c0007f55:	83 e0 10             	and    eax,0x10
c0007f58:	75 4a                	jne    c0007fa4 <netif_set_link_up+0x5c>
c0007f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f5e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f61:	83 c8 10             	or     eax,0x10
c0007f64:	88 c2                	mov    dl,al
c0007f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f71:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f74:	0f b6 c0             	movzx  eax,al
c0007f77:	83 e0 01             	and    eax,0x1
c0007f7a:	74 28                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f83:	0f b6 c0             	movzx  eax,al
c0007f86:	83 e0 20             	and    eax,0x20
c0007f89:	74 19                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8f:	83 c0 04             	add    eax,0x4
c0007f92:	83 ec 08             	sub    esp,0x8
c0007f95:	50                   	push   eax
c0007f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f9a:	e8 85 a4 00 00       	call   c0012424 <etharp_request>
c0007f9f:	83 c4 10             	add    esp,0x10
c0007fa2:	66 90                	xchg   ax,ax
c0007fa4:	90                   	nop
c0007fa5:	83 c4 0c             	add    esp,0xc
c0007fa8:	c3                   	ret    
c0007fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0007fac <netif_set_link_down>:
c0007fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fb0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb3:	0f b6 c0             	movzx  eax,al
c0007fb6:	83 e0 10             	and    eax,0x10
c0007fb9:	74 15                	je     c0007fd0 <netif_set_link_down+0x24>
c0007fbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc2:	83 e0 ef             	and    eax,0xffffffef
c0007fc5:	88 c2                	mov    dl,al
c0007fc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fcb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fce:	66 90                	xchg   ax,ax
c0007fd0:	90                   	nop
c0007fd1:	c3                   	ret    
c0007fd2:	66 90                	xchg   ax,ax

c0007fd4 <pbuf_free_ooseq>:
c0007fd4:	83 ec 1c             	sub    esp,0x1c
c0007fd7:	e8 a4 7b 01 00       	call   c001fb80 <CLockScheduler>
c0007fdc:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fe3:	e8 7c 7b 01 00       	call   c001fb64 <CUnlockScheduler>
c0007fe8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff1:	eb 41                	jmp    c0008034 <pbuf_free_ooseq+0x60>
c0007ff3:	90                   	nop
c0007ff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ff8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007ffe:	85 c0                	test   eax,eax
c0008000:	74 26                	je     c0008028 <pbuf_free_ooseq+0x54>
c0008002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008006:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000800c:	83 ec 0c             	sub    esp,0xc
c000800f:	50                   	push   eax
c0008010:	e8 03 20 00 00       	call   c000a018 <tcp_segs_free>
c0008015:	83 c4 10             	add    esp,0x10
c0008018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000801c:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0008026:	eb 14                	jmp    c000803c <pbuf_free_ooseq+0x68>
c0008028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000802c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000802f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008033:	90                   	nop
c0008034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008039:	75 b9                	jne    c0007ff4 <pbuf_free_ooseq+0x20>
c000803b:	90                   	nop
c000803c:	83 c4 1c             	add    esp,0x1c
c000803f:	c3                   	ret    

c0008040 <pbuf_pool_is_empty>:
c0008040:	83 ec 1c             	sub    esp,0x1c
c0008043:	e8 38 7b 01 00       	call   c001fb80 <CLockScheduler>
c0008048:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c000804d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008051:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0008058:	e8 07 7b 01 00       	call   c001fb64 <CUnlockScheduler>
c000805d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008062:	85 c0                	test   eax,eax
c0008064:	75 2e                	jne    c0008094 <pbuf_pool_is_empty+0x54>
c0008066:	83 ec 04             	sub    esp,0x4
c0008069:	6a 00                	push   0x0
c000806b:	6a 00                	push   0x0
c000806d:	68 d4 7f 00 c0       	push   0xc0007fd4
c0008072:	e8 dd 8b ff ff       	call   c0000c54 <tcpip_callback_with_block>
c0008077:	83 c4 10             	add    esp,0x10
c000807a:	0f be c0             	movsx  eax,al
c000807d:	85 c0                	test   eax,eax
c000807f:	74 13                	je     c0008094 <pbuf_pool_is_empty+0x54>
c0008081:	e8 fa 7a 01 00       	call   c001fb80 <CLockScheduler>
c0008086:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000808d:	e8 d2 7a 01 00       	call   c001fb64 <CUnlockScheduler>
c0008092:	66 90                	xchg   ax,ax
c0008094:	90                   	nop
c0008095:	83 c4 1c             	add    esp,0x1c
c0008098:	c3                   	ret    
c0008099:	8d 76 00             	lea    esi,[esi+0x0]

c000809c <pbuf_alloced_custom>:
c000809c:	83 ec 2c             	sub    esp,0x2c
c000809f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00080a3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00080a7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00080ac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00080b1:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00080b8:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c00080bd:	74 29                	je     c00080e8 <pbuf_alloced_custom+0x4c>
c00080bf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080c4:	74 12                	je     c00080d8 <pbuf_alloced_custom+0x3c>
c00080c6:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c00080cb:	74 2b                	je     c00080f8 <pbuf_alloced_custom+0x5c>
c00080cd:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c00080d2:	74 54                	je     c0008128 <pbuf_alloced_custom+0x8c>
c00080d4:	eb 32                	jmp    c0008108 <pbuf_alloced_custom+0x6c>
c00080d6:	66 90                	xchg   ax,ax
c00080d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080dd:	83 c0 14             	add    eax,0x14
c00080e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080e5:	8d 76 00             	lea    esi,[esi+0x0]
c00080e8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080ed:	83 c0 14             	add    eax,0x14
c00080f0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080fd:	83 c0 0e             	add    eax,0xe
c0008100:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008105:	eb 25                	jmp    c000812c <pbuf_alloced_custom+0x90>
c0008107:	90                   	nop
c0008108:	83 ec 08             	sub    esp,0x8
c000810b:	68 4c fc 02 c0       	push   0xc002fc4c
c0008110:	68 a6 fa 02 c0       	push   0xc002faa6
c0008115:	e8 76 7a 01 00       	call   c001fb90 <CPrintf>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	b8 00 00 00 00       	mov    eax,0x0
c0008122:	e9 95 00 00 00       	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008127:	90                   	nop
c0008128:	90                   	nop
c0008129:	8d 76 00             	lea    esi,[esi+0x0]
c000812c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008131:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008136:	01 c2                	add    edx,eax
c0008138:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000813d:	39 c2                	cmp    edx,eax
c000813f:	7d 07                	jge    c0008148 <pbuf_alloced_custom+0xac>
c0008141:	b8 00 00 00 00       	mov    eax,0x0
c0008146:	eb 74                	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000814c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008152:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008157:	74 17                	je     c0008170 <pbuf_alloced_custom+0xd4>
c0008159:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000815e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008162:	01 c2                	add    edx,eax
c0008164:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008168:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000816b:	eb 0f                	jmp    c000817c <pbuf_alloced_custom+0xe0>
c000816d:	8d 76 00             	lea    esi,[esi+0x0]
c0008170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008174:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000817b:	90                   	nop
c000817c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008180:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008184:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000818c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008190:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008194:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008197:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000819b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000819f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00081a3:	88 c2                	mov    dl,al
c00081a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081a9:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00081ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081b0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00081b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081ba:	66 90                	xchg   ax,ax
c00081bc:	83 c4 2c             	add    esp,0x2c
c00081bf:	c3                   	ret    

c00081c0 <pbuf_header>:
c00081c0:	83 ec 2c             	sub    esp,0x2c
c00081c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00081cc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081d1:	75 15                	jne    c00081e8 <pbuf_header+0x28>
c00081d3:	83 ec 08             	sub    esp,0x8
c00081d6:	68 d6 fe 02 c0       	push   0xc002fed6
c00081db:	68 a6 fa 02 c0       	push   0xc002faa6
c00081e0:	e8 ab 79 01 00       	call   c001fb90 <CPrintf>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00081ed:	85 c0                	test   eax,eax
c00081ef:	74 07                	je     c00081f8 <pbuf_header+0x38>
c00081f1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081f6:	75 08                	jne    c0008200 <pbuf_header+0x40>
c00081f8:	b0 00                	mov    al,0x0
c00081fa:	e9 59 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00081ff:	90                   	nop
c0008200:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008205:	85 c0                	test   eax,eax
c0008207:	79 3b                	jns    c0008244 <pbuf_header+0x84>
c0008209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000820d:	f7 d8                	neg    eax
c000820f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008218:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000821c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008221:	0f b7 c0             	movzx  eax,ax
c0008224:	39 c2                	cmp    edx,eax
c0008226:	76 28                	jbe    c0008250 <pbuf_header+0x90>
c0008228:	83 ec 08             	sub    esp,0x8
c000822b:	68 27 fe 02 c0       	push   0xc002fe27
c0008230:	68 a6 fa 02 c0       	push   0xc002faa6
c0008235:	e8 56 79 01 00       	call   c001fb90 <CPrintf>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	b0 01                	mov    al,0x1
c000823f:	e9 14 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c0008244:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008248:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000824d:	8d 76 00             	lea    esi,[esi+0x0]
c0008250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008254:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008257:	0f b6 c0             	movzx  eax,al
c000825a:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000825f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008263:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000826a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000826f:	85 c0                	test   eax,eax
c0008271:	74 0d                	je     c0008280 <pbuf_header+0xc0>
c0008273:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008278:	83 f8 03             	cmp    eax,0x3
c000827b:	75 3f                	jne    c00082bc <pbuf_header+0xfc>
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008287:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c000828c:	f7 da                	neg    edx
c000828e:	01 c2                	add    edx,eax
c0008290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008294:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000829b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000829e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082a2:	83 c2 10             	add    edx,0x10
c00082a5:	39 d0                	cmp    eax,edx
c00082a7:	73 7f                	jae    c0008328 <pbuf_header+0x168>
c00082a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082b4:	b0 01                	mov    al,0x1
c00082b6:	e9 9d 00 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00082bb:	90                   	nop
c00082bc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082c1:	83 f8 02             	cmp    eax,0x2
c00082c4:	74 0a                	je     c00082d0 <pbuf_header+0x110>
c00082c6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082cb:	83 f8 01             	cmp    eax,0x1
c00082ce:	75 3c                	jne    c000830c <pbuf_header+0x14c>
c00082d0:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00082d5:	85 c0                	test   eax,eax
c00082d7:	79 2f                	jns    c0008308 <pbuf_header+0x148>
c00082d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082dd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00082e1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e6:	0f b7 c0             	movzx  eax,ax
c00082e9:	39 c2                	cmp    edx,eax
c00082eb:	77 1b                	ja     c0008308 <pbuf_header+0x148>
c00082ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082f4:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00082f9:	f7 da                	neg    edx
c00082fb:	01 c2                	add    edx,eax
c00082fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008301:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008304:	eb 22                	jmp    c0008328 <pbuf_header+0x168>
c0008306:	66 90                	xchg   ax,ax
c0008308:	b0 01                	mov    al,0x1
c000830a:	eb 4c                	jmp    c0008358 <pbuf_header+0x198>
c000830c:	83 ec 08             	sub    esp,0x8
c000830f:	68 45 fe 02 c0       	push   0xc002fe45
c0008314:	68 a6 fa 02 c0       	push   0xc002faa6
c0008319:	e8 72 78 01 00       	call   c001fb90 <CPrintf>
c000831e:	83 c4 10             	add    esp,0x10
c0008321:	b0 01                	mov    al,0x1
c0008323:	eb 33                	jmp    c0008358 <pbuf_header+0x198>
c0008325:	8d 76 00             	lea    esi,[esi+0x0]
c0008328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000832c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008334:	01 d0                	add    eax,edx
c0008336:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000833a:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000833e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008342:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008349:	01 d0                	add    eax,edx
c000834b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000834f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008353:	b0 00                	mov    al,0x0
c0008355:	8d 76 00             	lea    esi,[esi+0x0]
c0008358:	83 c4 2c             	add    esp,0x2c
c000835b:	c3                   	ret    

c000835c <pbuf_free>:
c000835c:	83 ec 1c             	sub    esp,0x1c
c000835f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008364:	75 26                	jne    c000838c <pbuf_free+0x30>
c0008366:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000836b:	75 17                	jne    c0008384 <pbuf_free+0x28>
c000836d:	83 ec 08             	sub    esp,0x8
c0008370:	68 d6 fe 02 c0       	push   0xc002fed6
c0008375:	68 a6 fa 02 c0       	push   0xc002faa6
c000837a:	e8 11 78 01 00       	call   c001fb90 <CPrintf>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	66 90                	xchg   ax,ax
c0008384:	b0 00                	mov    al,0x0
c0008386:	e9 a5 01 00 00       	jmp    c0008530 <pbuf_free+0x1d4>
c000838b:	90                   	nop
c000838c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008390:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008393:	0f b6 c0             	movzx  eax,al
c0008396:	85 c0                	test   eax,eax
c0008398:	74 42                	je     c00083dc <pbuf_free+0x80>
c000839a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000839e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083a1:	0f b6 c0             	movzx  eax,al
c00083a4:	83 f8 01             	cmp    eax,0x1
c00083a7:	74 33                	je     c00083dc <pbuf_free+0x80>
c00083a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ad:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083b0:	0f b6 c0             	movzx  eax,al
c00083b3:	83 f8 02             	cmp    eax,0x2
c00083b6:	74 24                	je     c00083dc <pbuf_free+0x80>
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083bf:	0f b6 c0             	movzx  eax,al
c00083c2:	83 f8 03             	cmp    eax,0x3
c00083c5:	74 15                	je     c00083dc <pbuf_free+0x80>
c00083c7:	83 ec 08             	sub    esp,0x8
c00083ca:	68 53 fe 02 c0       	push   0xc002fe53
c00083cf:	68 a6 fa 02 c0       	push   0xc002faa6
c00083d4:	e8 b7 77 01 00       	call   c001fb90 <CPrintf>
c00083d9:	83 c4 10             	add    esp,0x10
c00083dc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00083e1:	e9 3a 01 00 00       	jmp    c0008520 <pbuf_free+0x1c4>
c00083e6:	66 90                	xchg   ax,ax
c00083e8:	e8 93 77 01 00       	call   c001fb80 <CLockScheduler>
c00083ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083f1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00083f5:	0f b7 c0             	movzx  eax,ax
c00083f8:	85 c0                	test   eax,eax
c00083fa:	75 18                	jne    c0008414 <pbuf_free+0xb8>
c00083fc:	83 ec 08             	sub    esp,0x8
c00083ff:	68 68 fe 02 c0       	push   0xc002fe68
c0008404:	68 a6 fa 02 c0       	push   0xc002faa6
c0008409:	e8 82 77 01 00       	call   c001fb90 <CPrintf>
c000840e:	83 c4 10             	add    esp,0x10
c0008411:	8d 76 00             	lea    esi,[esi+0x0]
c0008414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008418:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000841c:	83 e8 01             	sub    eax,0x1
c000841f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008423:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000842b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000842f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008434:	e8 2b 77 01 00       	call   c001fb64 <CUnlockScheduler>
c0008439:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000843e:	85 c0                	test   eax,eax
c0008440:	0f 85 d2 00 00 00    	jne    c0008518 <pbuf_free+0x1bc>
c0008446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844a:	8b 00                	mov    eax,DWORD PTR [eax]
c000844c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008454:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008457:	0f b6 c0             	movzx  eax,al
c000845a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000845f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008463:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008466:	0f b6 c0             	movzx  eax,al
c0008469:	83 e0 02             	and    eax,0x2
c000846c:	74 3a                	je     c00084a8 <pbuf_free+0x14c>
c000846e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008472:	89 04 24             	mov    DWORD PTR [esp],eax
c0008475:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000847b:	85 c0                	test   eax,eax
c000847d:	75 15                	jne    c0008494 <pbuf_free+0x138>
c000847f:	83 ec 08             	sub    esp,0x8
c0008482:	68 70 fc 02 c0       	push   0xc002fc70
c0008487:	68 a6 fa 02 c0       	push   0xc002faa6
c000848c:	e8 ff 76 01 00       	call   c001fb90 <CPrintf>
c0008491:	83 c4 10             	add    esp,0x10
c0008494:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008497:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000849a:	83 ec 0c             	sub    esp,0xc
c000849d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084a1:	ff d0                	call   eax
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	eb 58                	jmp    c0008500 <pbuf_free+0x1a4>
c00084a8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084ad:	83 f8 03             	cmp    eax,0x3
c00084b0:	75 16                	jne    c00084c8 <pbuf_free+0x16c>
c00084b2:	83 ec 08             	sub    esp,0x8
c00084b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b9:	6a 0d                	push   0xd
c00084bb:	e8 e0 f5 ff ff       	call   c0007aa0 <memp_free>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	eb 3b                	jmp    c0008500 <pbuf_free+0x1a4>
c00084c5:	8d 76 00             	lea    esi,[esi+0x0]
c00084c8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084cd:	83 f8 01             	cmp    eax,0x1
c00084d0:	74 0a                	je     c00084dc <pbuf_free+0x180>
c00084d2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d7:	83 f8 02             	cmp    eax,0x2
c00084da:	75 14                	jne    c00084f0 <pbuf_free+0x194>
c00084dc:	83 ec 08             	sub    esp,0x8
c00084df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084e3:	6a 0c                	push   0xc
c00084e5:	e8 b6 f5 ff ff       	call   c0007aa0 <memp_free>
c00084ea:	83 c4 10             	add    esp,0x10
c00084ed:	eb 11                	jmp    c0008500 <pbuf_free+0x1a4>
c00084ef:	90                   	nop
c00084f0:	83 ec 0c             	sub    esp,0xc
c00084f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084f7:	e8 80 eb ff ff       	call   c000707c <mem_free>
c00084fc:	83 c4 10             	add    esp,0x10
c00084ff:	90                   	nop
c0008500:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008504:	83 c0 01             	add    eax,0x1
c0008507:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000850b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000850f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008513:	eb 0b                	jmp    c0008520 <pbuf_free+0x1c4>
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008520:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008525:	0f 85 bd fe ff ff    	jne    c00083e8 <pbuf_free+0x8c>
c000852b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000852f:	90                   	nop
c0008530:	83 c4 1c             	add    esp,0x1c
c0008533:	c3                   	ret    

c0008534 <pbuf_alloc>:
c0008534:	83 ec 3c             	sub    esp,0x3c
c0008537:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000853b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008540:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008547:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c000854c:	74 2a                	je     c0008578 <pbuf_alloc+0x44>
c000854e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008553:	74 13                	je     c0008568 <pbuf_alloc+0x34>
c0008555:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000855a:	74 2c                	je     c0008588 <pbuf_alloc+0x54>
c000855c:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008561:	74 55                	je     c00085b8 <pbuf_alloc+0x84>
c0008563:	eb 33                	jmp    c0008598 <pbuf_alloc+0x64>
c0008565:	8d 76 00             	lea    esi,[esi+0x0]
c0008568:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000856d:	83 c0 14             	add    eax,0x14
c0008570:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008575:	8d 76 00             	lea    esi,[esi+0x0]
c0008578:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000857d:	83 c0 14             	add    eax,0x14
c0008580:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008585:	8d 76 00             	lea    esi,[esi+0x0]
c0008588:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000858d:	83 c0 0e             	add    eax,0xe
c0008590:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008595:	eb 25                	jmp    c00085bc <pbuf_alloc+0x88>
c0008597:	90                   	nop
c0008598:	83 ec 08             	sub    esp,0x8
c000859b:	68 7e fe 02 c0       	push   0xc002fe7e
c00085a0:	68 a6 fa 02 c0       	push   0xc002faa6
c00085a5:	e8 e6 75 01 00       	call   c001fb90 <CPrintf>
c00085aa:	83 c4 10             	add    esp,0x10
c00085ad:	b8 00 00 00 00       	mov    eax,0x0
c00085b2:	e9 71 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c00085b7:	90                   	nop
c00085b8:	90                   	nop
c00085b9:	8d 76 00             	lea    esi,[esi+0x0]
c00085bc:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00085c1:	77 11                	ja     c00085d4 <pbuf_alloc+0xa0>
c00085c3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00085c8:	0f 85 c6 02 00 00    	jne    c0008894 <pbuf_alloc+0x360>
c00085ce:	e9 41 02 00 00       	jmp    c0008814 <pbuf_alloc+0x2e0>
c00085d3:	90                   	nop
c00085d4:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c00085d9:	0f 85 15 03 00 00    	jne    c00088f4 <pbuf_alloc+0x3c0>
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	6a 0d                	push   0xd
c00085e4:	e8 8b f3 ff ff       	call   c0007974 <memp_malloc>
c00085e9:	83 c4 10             	add    esp,0x10
c00085ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00085f0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00085f5:	75 11                	jne    c0008608 <pbuf_alloc+0xd4>
c00085f7:	e8 44 fa ff ff       	call   c0008040 <pbuf_pool_is_empty>
c00085fc:	b8 00 00 00 00       	mov    eax,0x0
c0008601:	e9 22 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008606:	66 90                	xchg   ax,ax
c0008608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000860c:	88 c2                	mov    dl,al
c000860e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008612:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008615:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000861f:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008624:	8d 50 10             	lea    edx,[eax+0x10]
c0008627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000862b:	01 c2                	add    edx,eax
c000862d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008631:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008634:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008640:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008645:	ba 4e 02 00 00       	mov    edx,0x24e
c000864a:	29 c2                	sub    edx,eax
c000864c:	89 d0                	mov    eax,edx
c000864e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008653:	39 d0                	cmp    eax,edx
c0008655:	7e 05                	jle    c000865c <pbuf_alloc+0x128>
c0008657:	89 d0                	mov    eax,edx
c0008659:	8d 76 00             	lea    esi,[esi+0x0]
c000865c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008660:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008668:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000866b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000866f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008673:	0f b7 c0             	movzx  eax,ax
c0008676:	01 c2                	add    edx,eax
c0008678:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000867c:	05 5e 02 00 00       	add    eax,0x25e
c0008681:	39 c2                	cmp    edx,eax
c0008683:	76 17                	jbe    c000869c <pbuf_alloc+0x168>
c0008685:	83 ec 08             	sub    esp,0x8
c0008688:	68 94 fc 02 c0       	push   0xc002fc94
c000868d:	68 a6 fa 02 c0       	push   0xc002faa6
c0008692:	e8 f9 74 01 00       	call   c001fb90 <CPrintf>
c0008697:	83 c4 10             	add    esp,0x10
c000869a:	66 90                	xchg   ax,ax
c000869c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00086a1:	ba 4e 02 00 00       	mov    edx,0x24e
c00086a6:	29 c2                	sub    edx,eax
c00086a8:	89 d0                	mov    eax,edx
c00086aa:	85 c0                	test   eax,eax
c00086ac:	7f 16                	jg     c00086c4 <pbuf_alloc+0x190>
c00086ae:	83 ec 08             	sub    esp,0x8
c00086b1:	68 c8 fc 02 c0       	push   0xc002fcc8
c00086b6:	68 a6 fa 02 c0       	push   0xc002faa6
c00086bb:	e8 d0 74 01 00       	call   c001fb90 <CPrintf>
c00086c0:	83 c4 10             	add    esp,0x10
c00086c3:	90                   	nop
c00086c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086c8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00086d6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00086db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086df:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086e3:	0f b7 c0             	movzx  eax,ax
c00086e6:	29 c2                	sub    edx,eax
c00086e8:	89 d0                	mov    eax,edx
c00086ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ee:	e9 11 01 00 00       	jmp    c0008804 <pbuf_alloc+0x2d0>
c00086f3:	90                   	nop
c00086f4:	83 ec 0c             	sub    esp,0xc
c00086f7:	6a 0d                	push   0xd
c00086f9:	e8 76 f2 ff ff       	call   c0007974 <memp_malloc>
c00086fe:	83 c4 10             	add    esp,0x10
c0008701:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008705:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000870a:	75 20                	jne    c000872c <pbuf_alloc+0x1f8>
c000870c:	e8 2f f9 ff ff       	call   c0008040 <pbuf_pool_is_empty>
c0008711:	83 ec 0c             	sub    esp,0xc
c0008714:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008718:	e8 3f fc ff ff       	call   c000835c <pbuf_free>
c000871d:	83 c4 10             	add    esp,0x10
c0008720:	b8 00 00 00 00       	mov    eax,0x0
c0008725:	e9 fe 01 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c000872a:	66 90                	xchg   ax,ax
c000872c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008730:	88 c2                	mov    dl,al
c0008732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008736:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008739:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000873d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008745:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000874b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000874f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008753:	89 10                	mov    DWORD PTR [eax],edx
c0008755:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c000875d:	7e 15                	jle    c0008774 <pbuf_alloc+0x240>
c000875f:	83 ec 08             	sub    esp,0x8
c0008762:	68 99 fe 02 c0       	push   0xc002fe99
c0008767:	68 a6 fa 02 c0       	push   0xc002faa6
c000876c:	e8 1f 74 01 00       	call   c001fb90 <CPrintf>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000877c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008784:	0f b7 d0             	movzx  edx,ax
c0008787:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c000878d:	76 05                	jbe    c0008794 <pbuf_alloc+0x260>
c000878f:	b8 4e 02 00 00       	mov    eax,0x24e
c0008794:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008798:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000879c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a0:	8d 50 10             	lea    edx,[eax+0x10]
c00087a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00087b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087b9:	0f b7 c0             	movzx  eax,ax
c00087bc:	01 c2                	add    edx,eax
c00087be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c2:	05 5e 02 00 00       	add    eax,0x25e
c00087c7:	39 c2                	cmp    edx,eax
c00087c9:	76 15                	jbe    c00087e0 <pbuf_alloc+0x2ac>
c00087cb:	83 ec 08             	sub    esp,0x8
c00087ce:	68 94 fc 02 c0       	push   0xc002fc94
c00087d3:	68 a6 fa 02 c0       	push   0xc002faa6
c00087d8:	e8 b3 73 01 00       	call   c001fb90 <CPrintf>
c00087dd:	83 c4 10             	add    esp,0x10
c00087e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087e4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00087ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087ee:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087f2:	0f b7 c0             	movzx  eax,ax
c00087f5:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00087f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008801:	8d 76 00             	lea    esi,[esi+0x0]
c0008804:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008809:	0f 8f e5 fe ff ff    	jg     c00086f4 <pbuf_alloc+0x1c0>
c000880f:	e9 fc 00 00 00       	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008814:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881d:	01 d0                	add    eax,edx
c000881f:	83 c0 10             	add    eax,0x10
c0008822:	0f b7 c0             	movzx  eax,ax
c0008825:	83 ec 0c             	sub    esp,0xc
c0008828:	50                   	push   eax
c0008829:	e8 82 ec ff ff       	call   c00074b0 <mem_malloc>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008835:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000883a:	75 0c                	jne    c0008848 <pbuf_alloc+0x314>
c000883c:	b8 00 00 00 00       	mov    eax,0x0
c0008841:	e9 e2 00 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008846:	66 90                	xchg   ax,ax
c0008848:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000884d:	8d 50 10             	lea    edx,[eax+0x10]
c0008850:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008854:	01 c2                	add    edx,eax
c0008856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000885a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000885d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008865:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008869:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008870:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008874:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000887c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008882:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008886:	88 c2                	mov    dl,al
c0008888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888c:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000888f:	eb 7f                	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008891:	8d 76 00             	lea    esi,[esi+0x0]
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	6a 0c                	push   0xc
c0008899:	e8 d6 f0 ff ff       	call   c0007974 <memp_malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00088a5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00088aa:	75 08                	jne    c00088b4 <pbuf_alloc+0x380>
c00088ac:	b8 00 00 00 00       	mov    eax,0x0
c00088b1:	eb 75                	jmp    c0008928 <pbuf_alloc+0x3f4>
c00088b3:	90                   	nop
c00088b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088c7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00088cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088d6:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00088da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	eb 1d                	jmp    c0008910 <pbuf_alloc+0x3dc>
c00088f3:	90                   	nop
c00088f4:	83 ec 08             	sub    esp,0x8
c00088f7:	68 ad fe 02 c0       	push   0xc002fead
c00088fc:	68 a6 fa 02 c0       	push   0xc002faa6
c0008901:	e8 8a 72 01 00       	call   c001fb90 <CPrintf>
c0008906:	83 c4 10             	add    esp,0x10
c0008909:	b8 00 00 00 00       	mov    eax,0x0
c000890e:	eb 18                	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008914:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000891a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000891e:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008922:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008926:	66 90                	xchg   ax,ax
c0008928:	83 c4 3c             	add    esp,0x3c
c000892b:	c3                   	ret    

c000892c <pbuf_realloc>:
c000892c:	83 ec 2c             	sub    esp,0x2c
c000892f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008933:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008938:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000893d:	75 15                	jne    c0008954 <pbuf_realloc+0x28>
c000893f:	83 ec 08             	sub    esp,0x8
c0008942:	68 c8 fe 02 c0       	push   0xc002fec8
c0008947:	68 a6 fa 02 c0       	push   0xc002faa6
c000894c:	e8 3f 72 01 00       	call   c001fb90 <CPrintf>
c0008951:	83 c4 10             	add    esp,0x10
c0008954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008958:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000895b:	0f b6 c0             	movzx  eax,al
c000895e:	83 f8 03             	cmp    eax,0x3
c0008961:	74 41                	je     c00089a4 <pbuf_realloc+0x78>
c0008963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008967:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000896a:	0f b6 c0             	movzx  eax,al
c000896d:	83 f8 01             	cmp    eax,0x1
c0008970:	74 32                	je     c00089a4 <pbuf_realloc+0x78>
c0008972:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008976:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008979:	0f b6 c0             	movzx  eax,al
c000897c:	85 c0                	test   eax,eax
c000897e:	74 24                	je     c00089a4 <pbuf_realloc+0x78>
c0008980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008984:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008987:	0f b6 c0             	movzx  eax,al
c000898a:	83 f8 02             	cmp    eax,0x2
c000898d:	74 15                	je     c00089a4 <pbuf_realloc+0x78>
c000898f:	83 ec 08             	sub    esp,0x8
c0008992:	68 e0 fe 02 c0       	push   0xc002fee0
c0008997:	68 a6 fa 02 c0       	push   0xc002faa6
c000899c:	e8 ef 71 01 00       	call   c001fb90 <CPrintf>
c00089a1:	83 c4 10             	add    esp,0x10
c00089a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089ab:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089b0:	0f b7 c0             	movzx  eax,ax
c00089b3:	39 c2                	cmp    edx,eax
c00089b5:	0f 83 6d 01 00 00    	jae    c0008b28 <pbuf_realloc+0x1fc>
c00089bb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089c7:	0f b7 c0             	movzx  eax,ax
c00089ca:	29 c2                	sub    edx,eax
c00089cc:	89 d0                	mov    eax,edx
c00089ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00089db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e3:	eb 77                	jmp    c0008a5c <pbuf_realloc+0x130>
c00089e5:	8d 76 00             	lea    esi,[esi+0x0]
c00089e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089ec:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089f0:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00089f5:	89 d1                	mov    ecx,edx
c00089f7:	29 c1                	sub    ecx,eax
c00089f9:	89 c8                	mov    eax,ecx
c00089fb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a00:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008a08:	7e 16                	jle    c0008a20 <pbuf_realloc+0xf4>
c0008a0a:	83 ec 08             	sub    esp,0x8
c0008a0d:	68 fb fe 02 c0       	push   0xc002fefb
c0008a12:	68 a6 fa 02 c0       	push   0xc002faa6
c0008a17:	e8 74 71 01 00       	call   c001fb90 <CPrintf>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	90                   	nop
c0008a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008a2b:	01 d0                	add    eax,edx
c0008a2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a31:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a3f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a44:	75 16                	jne    c0008a5c <pbuf_realloc+0x130>
c0008a46:	83 ec 08             	sub    esp,0x8
c0008a49:	68 0c ff 02 c0       	push   0xc002ff0c
c0008a4e:	68 a6 fa 02 c0       	push   0xc002faa6
c0008a53:	e8 38 71 01 00       	call   c001fb90 <CPrintf>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	90                   	nop
c0008a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a60:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a64:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a69:	0f b7 c0             	movzx  eax,ax
c0008a6c:	39 c2                	cmp    edx,eax
c0008a6e:	0f 87 74 ff ff ff    	ja     c00089e8 <pbuf_realloc+0xbc>
c0008a74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a78:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008a7b:	0f b6 c0             	movzx  eax,al
c0008a7e:	85 c0                	test   eax,eax
c0008a80:	75 5e                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a86:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a8a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a8f:	0f b7 c0             	movzx  eax,ax
c0008a92:	39 c2                	cmp    edx,eax
c0008a94:	74 4a                	je     c0008ae0 <pbuf_realloc+0x1b4>
c0008a96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008a9d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008aa1:	89 c2                	mov    edx,eax
c0008aa3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008aa8:	01 d0                	add    eax,edx
c0008aaa:	0f b7 c0             	movzx  eax,ax
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ab5:	e8 e6 e6 ff ff       	call   c00071a0 <mem_trim>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008ac6:	75 18                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008ac8:	83 ec 08             	sub    esp,0x8
c0008acb:	68 24 ff 02 c0       	push   0xc002ff24
c0008ad0:	68 a6 fa 02 c0       	push   0xc002faa6
c0008ad5:	e8 b6 70 01 00       	call   c001fb90 <CPrintf>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	8d 76 00             	lea    esi,[esi+0x0]
c0008ae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ae4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008ae9:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008aed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008af1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008af5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008af9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b03:	85 c0                	test   eax,eax
c0008b05:	74 15                	je     c0008b1c <pbuf_realloc+0x1f0>
c0008b07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b0d:	83 ec 0c             	sub    esp,0xc
c0008b10:	50                   	push   eax
c0008b11:	e8 46 f8 ff ff       	call   c000835c <pbuf_free>
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	8d 76 00             	lea    esi,[esi+0x0]
c0008b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b26:	eb 04                	jmp    c0008b2c <pbuf_realloc+0x200>
c0008b28:	90                   	nop
c0008b29:	8d 76 00             	lea    esi,[esi+0x0]
c0008b2c:	83 c4 2c             	add    esp,0x2c
c0008b2f:	c3                   	ret    

c0008b30 <pbuf_clen>:
c0008b30:	83 ec 10             	sub    esp,0x10
c0008b33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b38:	eb 1a                	jmp    c0008b54 <pbuf_clen+0x24>
c0008b3a:	66 90                	xchg   ax,ax
c0008b3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b40:	83 c0 01             	add    eax,0x1
c0008b43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b51:	8d 76 00             	lea    esi,[esi+0x0]
c0008b54:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008b59:	75 e1                	jne    c0008b3c <pbuf_clen+0xc>
c0008b5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	c3                   	ret    
c0008b63:	90                   	nop

c0008b64 <pbuf_ref>:
c0008b64:	83 ec 0c             	sub    esp,0xc
c0008b67:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008b6c:	74 1e                	je     c0008b8c <pbuf_ref+0x28>
c0008b6e:	e8 0d 70 01 00       	call   c001fb80 <CLockScheduler>
c0008b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b77:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008b7b:	83 c0 01             	add    eax,0x1
c0008b7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b82:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008b86:	e8 d9 6f 01 00       	call   c001fb64 <CUnlockScheduler>
c0008b8b:	90                   	nop
c0008b8c:	90                   	nop
c0008b8d:	83 c4 0c             	add    esp,0xc
c0008b90:	c3                   	ret    
c0008b91:	8d 76 00             	lea    esi,[esi+0x0]

c0008b94 <pbuf_cat>:
c0008b94:	83 ec 1c             	sub    esp,0x1c
c0008b97:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008b9c:	74 0a                	je     c0008ba8 <pbuf_cat+0x14>
c0008b9e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ba3:	75 1f                	jne    c0008bc4 <pbuf_cat+0x30>
c0008ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba8:	83 ec 08             	sub    esp,0x8
c0008bab:	68 fc fc 02 c0       	push   0xc002fcfc
c0008bb0:	68 a6 fa 02 c0       	push   0xc002faa6
c0008bb5:	e8 d6 6f 01 00       	call   c001fb90 <CPrintf>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	e9 ae 00 00 00       	jmp    c0008c70 <pbuf_cat+0xdc>
c0008bc2:	66 90                	xchg   ax,ax
c0008bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bcc:	eb 26                	jmp    c0008bf4 <pbuf_cat+0x60>
c0008bce:	66 90                	xchg   ax,ax
c0008bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bd4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008bdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bde:	01 d0                	add    eax,edx
c0008be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008be4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bf2:	66 90                	xchg   ax,ax
c0008bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	75 d2                	jne    c0008bd0 <pbuf_cat+0x3c>
c0008bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c02:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c09:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c0d:	0f b7 d2             	movzx  edx,dx
c0008c10:	0f b7 c0             	movzx  eax,ax
c0008c13:	39 c2                	cmp    edx,eax
c0008c15:	74 15                	je     c0008c2c <pbuf_cat+0x98>
c0008c17:	83 ec 08             	sub    esp,0x8
c0008c1a:	68 34 fd 02 c0       	push   0xc002fd34
c0008c1f:	68 a6 fa 02 c0       	push   0xc002faa6
c0008c24:	e8 67 6f 01 00       	call   c001fb90 <CPrintf>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	85 c0                	test   eax,eax
c0008c34:	74 16                	je     c0008c4c <pbuf_cat+0xb8>
c0008c36:	83 ec 08             	sub    esp,0x8
c0008c39:	68 40 ff 02 c0       	push   0xc002ff40
c0008c3e:	68 a6 fa 02 c0       	push   0xc002faa6
c0008c43:	e8 48 6f 01 00       	call   c001fb90 <CPrintf>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	90                   	nop
c0008c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c5a:	01 d0                	add    eax,edx
c0008c5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008c60:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c6c:	89 10                	mov    DWORD PTR [eax],edx
c0008c6e:	66 90                	xchg   ax,ax
c0008c70:	83 c4 1c             	add    esp,0x1c
c0008c73:	c3                   	ret    

c0008c74 <pbuf_chain>:
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	83 ec 08             	sub    esp,0x8
c0008c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c82:	e8 0d ff ff ff       	call   c0008b94 <pbuf_cat>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	83 ec 0c             	sub    esp,0xc
c0008c8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c91:	e8 ce fe ff ff       	call   c0008b64 <pbuf_ref>
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	90                   	nop
c0008c9a:	83 c4 0c             	add    esp,0xc
c0008c9d:	c3                   	ret    
c0008c9e:	66 90                	xchg   ax,ax

c0008ca0 <pbuf_dechain>:
c0008ca0:	83 ec 1c             	sub    esp,0x1c
c0008ca3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008cb7:	0f 84 8b 00 00 00    	je     c0008d48 <pbuf_dechain+0xa8>
c0008cbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cc4:	0f b7 d0             	movzx  edx,ax
c0008cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cce:	0f b7 c8             	movzx  ecx,ax
c0008cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008cd9:	0f b7 c0             	movzx  eax,ax
c0008cdc:	29 c1                	sub    ecx,eax
c0008cde:	89 c8                	mov    eax,ecx
c0008ce0:	39 c2                	cmp    edx,eax
c0008ce2:	74 18                	je     c0008cfc <pbuf_dechain+0x5c>
c0008ce4:	83 ec 08             	sub    esp,0x8
c0008ce7:	68 64 fd 02 c0       	push   0xc002fd64
c0008cec:	68 a6 fa 02 c0       	push   0xc002faa6
c0008cf1:	e8 9a 6e 01 00       	call   c001fb90 <CPrintf>
c0008cf6:	83 c4 10             	add    esp,0x10
c0008cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d00:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d07:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d0b:	89 d1                	mov    ecx,edx
c0008d0d:	29 c1                	sub    ecx,eax
c0008d0f:	89 c8                	mov    eax,ecx
c0008d11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008d15:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d27:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008d2f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d33:	83 ec 0c             	sub    esp,0xc
c0008d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3a:	e8 1d f6 ff ff       	call   c000835c <pbuf_free>
c0008d3f:	83 c4 10             	add    esp,0x10
c0008d42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d46:	66 90                	xchg   ax,ax
c0008d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d4c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d53:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d57:	0f b7 d2             	movzx  edx,dx
c0008d5a:	0f b7 c0             	movzx  eax,ax
c0008d5d:	39 c2                	cmp    edx,eax
c0008d5f:	74 17                	je     c0008d78 <pbuf_dechain+0xd8>
c0008d61:	83 ec 08             	sub    esp,0x8
c0008d64:	68 50 ff 02 c0       	push   0xc002ff50
c0008d69:	68 a6 fa 02 c0       	push   0xc002faa6
c0008d6e:	e8 1d 6e 01 00       	call   c001fb90 <CPrintf>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	66 90                	xchg   ax,ax
c0008d78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008d7d:	85 c0                	test   eax,eax
c0008d7f:	75 07                	jne    c0008d88 <pbuf_dechain+0xe8>
c0008d81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d85:	eb 09                	jmp    c0008d90 <pbuf_dechain+0xf0>
c0008d87:	90                   	nop
c0008d88:	b8 00 00 00 00       	mov    eax,0x0
c0008d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d90:	83 c4 1c             	add    esp,0x1c
c0008d93:	c3                   	ret    

c0008d94 <pbuf_copy>:
c0008d94:	53                   	push   ebx
c0008d95:	83 ec 18             	sub    esp,0x18
c0008d98:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008d9f:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008da6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008dab:	74 1f                	je     c0008dcc <pbuf_copy+0x38>
c0008dad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008db2:	74 18                	je     c0008dcc <pbuf_copy+0x38>
c0008db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008db8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008dc2:	0f b7 d2             	movzx  edx,dx
c0008dc5:	0f b7 c0             	movzx  eax,ax
c0008dc8:	39 c2                	cmp    edx,eax
c0008dca:	73 1c                	jae    c0008de8 <pbuf_copy+0x54>
c0008dcc:	83 ec 08             	sub    esp,0x8
c0008dcf:	68 88 fd 02 c0       	push   0xc002fd88
c0008dd4:	68 a6 fa 02 c0       	push   0xc002faa6
c0008dd9:	e8 b2 6d 01 00       	call   c001fb90 <CPrintf>
c0008dde:	83 c4 10             	add    esp,0x10
c0008de1:	b0 f2                	mov    al,0xf2
c0008de3:	e9 0c 02 00 00       	jmp    c0008ff4 <pbuf_copy+0x260>
c0008de8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ded:	75 15                	jne    c0008e04 <pbuf_copy+0x70>
c0008def:	83 ec 08             	sub    esp,0x8
c0008df2:	68 65 ff 02 c0       	push   0xc002ff65
c0008df7:	68 a6 fa 02 c0       	push   0xc002faa6
c0008dfc:	e8 8f 6d 01 00       	call   c001fb90 <CPrintf>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e08:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e0c:	0f b7 d0             	movzx  edx,ax
c0008e0f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008e14:	89 d1                	mov    ecx,edx
c0008e16:	29 c1                	sub    ecx,eax
c0008e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e20:	0f b7 d0             	movzx  edx,ax
c0008e23:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008e28:	29 c2                	sub    edx,eax
c0008e2a:	89 d0                	mov    eax,edx
c0008e2c:	39 c1                	cmp    ecx,eax
c0008e2e:	7c 1c                	jl     c0008e4c <pbuf_copy+0xb8>
c0008e30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e34:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e3c:	89 d3                	mov    ebx,edx
c0008e3e:	29 c3                	sub    ebx,eax
c0008e40:	89 d8                	mov    eax,ebx
c0008e42:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e47:	eb 1b                	jmp    c0008e64 <pbuf_copy+0xd0>
c0008e49:	8d 76 00             	lea    esi,[esi+0x0]
c0008e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e50:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e54:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008e59:	89 d3                	mov    ebx,edx
c0008e5b:	29 c3                	sub    ebx,eax
c0008e5d:	89 d8                	mov    eax,ebx
c0008e5f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e64:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008e69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e6d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008e70:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e75:	01 d1                	add    ecx,edx
c0008e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e7b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008e7e:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e83:	01 da                	add    edx,ebx
c0008e85:	83 ec 04             	sub    esp,0x4
c0008e88:	50                   	push   eax
c0008e89:	51                   	push   ecx
c0008e8a:	52                   	push   edx
c0008e8b:	e8 ea 74 ff ff       	call   c000037a <memcpy>
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008e98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e9d:	01 d0                	add    eax,edx
c0008e9f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008ea4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ea8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ead:	01 d0                	add    eax,edx
c0008eaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ebc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ec1:	0f b7 c0             	movzx  eax,ax
c0008ec4:	39 c2                	cmp    edx,eax
c0008ec6:	76 18                	jbe    c0008ee0 <pbuf_copy+0x14c>
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 72 ff 02 c0       	push   0xc002ff72
c0008ed0:	68 a6 fa 02 c0       	push   0xc002faa6
c0008ed5:	e8 b6 6c 01 00       	call   c001fb90 <CPrintf>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ee8:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008eed:	0f b7 c0             	movzx  eax,ax
c0008ef0:	39 c2                	cmp    edx,eax
c0008ef2:	75 14                	jne    c0008f08 <pbuf_copy+0x174>
c0008ef4:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f05:	8d 76 00             	lea    esi,[esi+0x0]
c0008f08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f0c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f10:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f15:	0f b7 c0             	movzx  eax,ax
c0008f18:	39 c2                	cmp    edx,eax
c0008f1a:	76 18                	jbe    c0008f34 <pbuf_copy+0x1a0>
c0008f1c:	83 ec 08             	sub    esp,0x8
c0008f1f:	68 89 ff 02 c0       	push   0xc002ff89
c0008f24:	68 a6 fa 02 c0       	push   0xc002faa6
c0008f29:	e8 62 6c 01 00       	call   c001fb90 <CPrintf>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	8d 76 00             	lea    esi,[esi+0x0]
c0008f34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f38:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f3c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f41:	0f b7 c0             	movzx  eax,ax
c0008f44:	39 c2                	cmp    edx,eax
c0008f46:	72 14                	jb     c0008f5c <pbuf_copy+0x1c8>
c0008f48:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008f59:	8d 76 00             	lea    esi,[esi+0x0]
c0008f5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f61:	74 3d                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f67:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f72:	0f b7 d2             	movzx  edx,dx
c0008f75:	0f b7 c0             	movzx  eax,ax
c0008f78:	39 c2                	cmp    edx,eax
c0008f7a:	75 24                	jne    c0008fa0 <pbuf_copy+0x20c>
c0008f7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f82:	85 c0                	test   eax,eax
c0008f84:	74 1a                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f86:	83 ec 08             	sub    esp,0x8
c0008f89:	68 b8 fd 02 c0       	push   0xc002fdb8
c0008f8e:	68 a6 fa 02 c0       	push   0xc002faa6
c0008f93:	e8 f8 6b 01 00       	call   c001fb90 <CPrintf>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	b0 fa                	mov    al,0xfa
c0008f9d:	eb 55                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008f9f:	90                   	nop
c0008fa0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fa5:	74 3d                	je     c0008fe4 <pbuf_copy+0x250>
c0008fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fab:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008fb6:	0f b7 d2             	movzx  edx,dx
c0008fb9:	0f b7 c0             	movzx  eax,ax
c0008fbc:	39 c2                	cmp    edx,eax
c0008fbe:	75 24                	jne    c0008fe4 <pbuf_copy+0x250>
c0008fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fc6:	85 c0                	test   eax,eax
c0008fc8:	74 1a                	je     c0008fe4 <pbuf_copy+0x250>
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	68 b8 fd 02 c0       	push   0xc002fdb8
c0008fd2:	68 a6 fa 02 c0       	push   0xc002faa6
c0008fd7:	e8 b4 6b 01 00       	call   c001fb90 <CPrintf>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	b0 fa                	mov    al,0xfa
c0008fe1:	eb 11                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008fe3:	90                   	nop
c0008fe4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008fe9:	0f 85 f9 fd ff ff    	jne    c0008de8 <pbuf_copy+0x54>
c0008fef:	b0 00                	mov    al,0x0
c0008ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ff4:	83 c4 18             	add    esp,0x18
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0008ffc <pbuf_copy_partial>:
c0008ffc:	53                   	push   ebx
c0008ffd:	83 ec 28             	sub    esp,0x28
c0009000:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009004:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009008:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000900d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009012:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009019:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000901e:	75 20                	jne    c0009040 <pbuf_copy_partial+0x44>
c0009020:	83 ec 08             	sub    esp,0x8
c0009023:	68 e4 fd 02 c0       	push   0xc002fde4
c0009028:	68 a6 fa 02 c0       	push   0xc002faa6
c000902d:	e8 5e 6b 01 00       	call   c001fb90 <CPrintf>
c0009032:	83 c4 10             	add    esp,0x10
c0009035:	b8 00 00 00 00       	mov    eax,0x0
c000903a:	e9 59 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000903f:	90                   	nop
c0009040:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009045:	75 21                	jne    c0009068 <pbuf_copy_partial+0x6c>
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	68 04 fe 02 c0       	push   0xc002fe04
c000904f:	68 a6 fa 02 c0       	push   0xc002faa6
c0009054:	e8 37 6b 01 00       	call   c001fb90 <CPrintf>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	b8 00 00 00 00       	mov    eax,0x0
c0009061:	e9 32 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c0009066:	66 90                	xchg   ax,ax
c0009068:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c000906f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009074:	74 0a                	je     c0009080 <pbuf_copy_partial+0x84>
c0009076:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000907b:	75 0f                	jne    c000908c <pbuf_copy_partial+0x90>
c000907d:	8d 76 00             	lea    esi,[esi+0x0]
c0009080:	b8 00 00 00 00       	mov    eax,0x0
c0009085:	e9 0e 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000908a:	66 90                	xchg   ax,ax
c000908c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009090:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009094:	e9 e3 00 00 00       	jmp    c000917c <pbuf_copy_partial+0x180>
c0009099:	8d 76 00             	lea    esi,[esi+0x0]
c000909c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00090a1:	85 c0                	test   eax,eax
c00090a3:	74 33                	je     c00090d8 <pbuf_copy_partial+0xdc>
c00090a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00090b2:	0f b7 c0             	movzx  eax,ax
c00090b5:	39 c2                	cmp    edx,eax
c00090b7:	72 1f                	jb     c00090d8 <pbuf_copy_partial+0xdc>
c00090b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090bd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090c5:	89 d3                	mov    ebx,edx
c00090c7:	29 c3                	sub    ebx,eax
c00090c9:	89 d8                	mov    eax,ebx
c00090cb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00090d0:	e9 9b 00 00 00       	jmp    c0009170 <pbuf_copy_partial+0x174>
c00090d5:	8d 76 00             	lea    esi,[esi+0x0]
c00090d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090dc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00090e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00090e4:	89 d1                	mov    ecx,edx
c00090e6:	29 c1                	sub    ecx,eax
c00090e8:	89 c8                	mov    eax,ecx
c00090ea:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090ef:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00090f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090f9:	39 c2                	cmp    edx,eax
c00090fb:	76 0b                	jbe    c0009108 <pbuf_copy_partial+0x10c>
c00090fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009101:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009106:	66 90                	xchg   ax,ax
c0009108:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000910d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009111:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009114:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009119:	01 d1                	add    ecx,edx
c000911b:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009120:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009124:	01 da                	add    edx,ebx
c0009126:	83 ec 04             	sub    esp,0x4
c0009129:	50                   	push   eax
c000912a:	51                   	push   ecx
c000912b:	52                   	push   edx
c000912c:	e8 49 72 ff ff       	call   c000037a <memcpy>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000913d:	01 d0                	add    eax,edx
c000913f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009144:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000914d:	01 d0                	add    eax,edx
c000914f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009158:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000915c:	89 d3                	mov    ebx,edx
c000915e:	29 c3                	sub    ebx,eax
c0009160:	89 d8                	mov    eax,ebx
c0009162:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009167:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000916e:	66 90                	xchg   ax,ax
c0009170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009174:	8b 00                	mov    eax,DWORD PTR [eax]
c0009176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000917a:	66 90                	xchg   ax,ax
c000917c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009181:	85 c0                	test   eax,eax
c0009183:	74 0b                	je     c0009190 <pbuf_copy_partial+0x194>
c0009185:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000918a:	0f 85 0c ff ff ff    	jne    c000909c <pbuf_copy_partial+0xa0>
c0009190:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009195:	8d 76 00             	lea    esi,[esi+0x0]
c0009198:	83 c4 28             	add    esp,0x28
c000919b:	5b                   	pop    ebx
c000919c:	c3                   	ret    
c000919d:	8d 76 00             	lea    esi,[esi+0x0]

c00091a0 <pbuf_take>:
c00091a0:	83 ec 2c             	sub    esp,0x2c
c00091a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00091a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00091ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091b0:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091b5:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091bc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091c1:	75 1d                	jne    c00091e0 <pbuf_take+0x40>
c00091c3:	83 ec 08             	sub    esp,0x8
c00091c6:	68 a4 ff 02 c0       	push   0xc002ffa4
c00091cb:	68 a6 fa 02 c0       	push   0xc002faa6
c00091d0:	e8 bb 69 01 00       	call   c001fb90 <CPrintf>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	b0 00                	mov    al,0x0
c00091da:	e9 3d 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c00091df:	90                   	nop
c00091e0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091e5:	75 1d                	jne    c0009204 <pbuf_take+0x64>
c00091e7:	83 ec 08             	sub    esp,0x8
c00091ea:	68 bb ff 02 c0       	push   0xc002ffbb
c00091ef:	68 a6 fa 02 c0       	push   0xc002faa6
c00091f4:	e8 97 69 01 00       	call   c001fb90 <CPrintf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	b0 00                	mov    al,0x0
c00091fe:	e9 19 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c0009203:	90                   	nop
c0009204:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009209:	74 1d                	je     c0009228 <pbuf_take+0x88>
c000920b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009210:	74 16                	je     c0009228 <pbuf_take+0x88>
c0009212:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009216:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009219:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000921e:	0f b7 c0             	movzx  eax,ax
c0009221:	39 c2                	cmp    edx,eax
c0009223:	76 0b                	jbe    c0009230 <pbuf_take+0x90>
c0009225:	8d 76 00             	lea    esi,[esi+0x0]
c0009228:	b0 f2                	mov    al,0xf2
c000922a:	e9 ed 00 00 00       	jmp    c000931c <pbuf_take+0x17c>
c000922f:	90                   	nop
c0009230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009238:	e9 9f 00 00 00       	jmp    c00092dc <pbuf_take+0x13c>
c000923d:	8d 76 00             	lea    esi,[esi+0x0]
c0009240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009245:	75 15                	jne    c000925c <pbuf_take+0xbc>
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 d6 ff 02 c0       	push   0xc002ffd6
c000924f:	68 a6 fa 02 c0       	push   0xc002faa6
c0009254:	e8 37 69 01 00       	call   c001fb90 <CPrintf>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009260:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009269:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000926d:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009272:	0f b7 c0             	movzx  eax,ax
c0009275:	39 c2                	cmp    edx,eax
c0009277:	76 0f                	jbe    c0009288 <pbuf_take+0xe8>
c0009279:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000927d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009281:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009286:	66 90                	xchg   ax,ax
c0009288:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000928d:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009296:	01 c1                	add    ecx,eax
c0009298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000929c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000929f:	83 ec 04             	sub    esp,0x4
c00092a2:	52                   	push   edx
c00092a3:	51                   	push   ecx
c00092a4:	50                   	push   eax
c00092a5:	e8 d0 70 ff ff       	call   c000037a <memcpy>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092b1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092b6:	89 d1                	mov    ecx,edx
c00092b8:	29 c1                	sub    ecx,eax
c00092ba:	89 c8                	mov    eax,ecx
c00092bc:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092c1:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092cb:	01 d0                	add    eax,edx
c00092cd:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00092d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092dc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092e1:	85 c0                	test   eax,eax
c00092e3:	0f 85 57 ff ff ff    	jne    c0009240 <pbuf_take+0xa0>
c00092e9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092ee:	85 c0                	test   eax,eax
c00092f0:	75 0e                	jne    c0009300 <pbuf_take+0x160>
c00092f2:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00092f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092fc:	39 c2                	cmp    edx,eax
c00092fe:	74 18                	je     c0009318 <pbuf_take+0x178>
c0009300:	83 ec 08             	sub    esp,0x8
c0009303:	68 ee ff 02 c0       	push   0xc002ffee
c0009308:	68 a6 fa 02 c0       	push   0xc002faa6
c000930d:	e8 7e 68 01 00       	call   c001fb90 <CPrintf>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	8d 76 00             	lea    esi,[esi+0x0]
c0009318:	b0 00                	mov    al,0x0
c000931a:	66 90                	xchg   ax,ax
c000931c:	83 c4 2c             	add    esp,0x2c
c000931f:	c3                   	ret    

c0009320 <pbuf_coalesce>:
c0009320:	83 ec 1c             	sub    esp,0x1c
c0009323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009327:	8b 00                	mov    eax,DWORD PTR [eax]
c0009329:	85 c0                	test   eax,eax
c000932b:	75 07                	jne    c0009334 <pbuf_coalesce+0x14>
c000932d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009331:	eb 7d                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009333:	90                   	nop
c0009334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000933b:	0f b7 c0             	movzx  eax,ax
c000933e:	83 ec 04             	sub    esp,0x4
c0009341:	6a 00                	push   0x0
c0009343:	50                   	push   eax
c0009344:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009348:	e8 e7 f1 ff ff       	call   c0008534 <pbuf_alloc>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009359:	75 09                	jne    c0009364 <pbuf_coalesce+0x44>
c000935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000935f:	eb 4f                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009361:	8d 76 00             	lea    esi,[esi+0x0]
c0009364:	83 ec 08             	sub    esp,0x8
c0009367:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000936b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000936f:	e8 20 fa ff ff       	call   c0008d94 <pbuf_copy>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000937b:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009380:	85 c0                	test   eax,eax
c0009382:	74 18                	je     c000939c <pbuf_coalesce+0x7c>
c0009384:	83 ec 08             	sub    esp,0x8
c0009387:	68 04 00 03 c0       	push   0xc0030004
c000938c:	68 a6 fa 02 c0       	push   0xc002faa6
c0009391:	e8 fa 67 01 00       	call   c001fb90 <CPrintf>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	8d 76 00             	lea    esi,[esi+0x0]
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093a3:	e8 b4 ef ff ff       	call   c000835c <pbuf_free>
c00093a8:	83 c4 10             	add    esp,0x10
c00093ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093af:	90                   	nop
c00093b0:	83 c4 1c             	add    esp,0x1c
c00093b3:	c3                   	ret    

c00093b4 <pbuf_get_at>:
c00093b4:	83 ec 14             	sub    esp,0x14
c00093b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093bb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00093c2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093cf:	eb 27                	jmp    c00093f8 <pbuf_get_at+0x44>
c00093d1:	8d 76 00             	lea    esi,[esi+0x0]
c00093d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093dc:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00093e1:	89 d1                	mov    ecx,edx
c00093e3:	29 c1                	sub    ecx,eax
c00093e5:	89 c8                	mov    eax,ecx
c00093e7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00093f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093f6:	66 90                	xchg   ax,ax
c00093f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00093fd:	74 15                	je     c0009414 <pbuf_get_at+0x60>
c00093ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009403:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009407:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000940c:	0f b7 c0             	movzx  eax,ax
c000940f:	39 c2                	cmp    edx,eax
c0009411:	73 c1                	jae    c00093d4 <pbuf_get_at+0x20>
c0009413:	90                   	nop
c0009414:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009419:	74 29                	je     c0009444 <pbuf_get_at+0x90>
c000941b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009423:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009428:	0f b7 c0             	movzx  eax,ax
c000942b:	39 c2                	cmp    edx,eax
c000942d:	73 15                	jae    c0009444 <pbuf_get_at+0x90>
c000942f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009433:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009436:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000943b:	01 d0                	add    eax,edx
c000943d:	8a 00                	mov    al,BYTE PTR [eax]
c000943f:	eb 07                	jmp    c0009448 <pbuf_get_at+0x94>
c0009441:	8d 76 00             	lea    esi,[esi+0x0]
c0009444:	b0 00                	mov    al,0x0
c0009446:	66 90                	xchg   ax,ax
c0009448:	83 c4 14             	add    esp,0x14
c000944b:	c3                   	ret    

c000944c <pbuf_memcmp>:
c000944c:	83 ec 18             	sub    esp,0x18
c000944f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009457:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000945c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009464:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009471:	eb 25                	jmp    c0009498 <pbuf_memcmp+0x4c>
c0009473:	90                   	nop
c0009474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009478:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000947c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009481:	89 d1                	mov    ecx,edx
c0009483:	29 c1                	sub    ecx,eax
c0009485:	89 c8                	mov    eax,ecx
c0009487:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009490:	8b 00                	mov    eax,DWORD PTR [eax]
c0009492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009496:	66 90                	xchg   ax,ax
c0009498:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000949d:	74 15                	je     c00094b4 <pbuf_memcmp+0x68>
c000949f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094a7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094ac:	0f b7 c0             	movzx  eax,ax
c00094af:	39 c2                	cmp    edx,eax
c00094b1:	73 c1                	jae    c0009474 <pbuf_memcmp+0x28>
c00094b3:	90                   	nop
c00094b4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094b9:	0f 84 8d 00 00 00    	je     c000954c <pbuf_memcmp+0x100>
c00094bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094c7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094cc:	0f b7 c0             	movzx  eax,ax
c00094cf:	39 c2                	cmp    edx,eax
c00094d1:	73 79                	jae    c000954c <pbuf_memcmp+0x100>
c00094d3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00094da:	eb 5c                	jmp    c0009538 <pbuf_memcmp+0xec>
c00094dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094e1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094e6:	01 d0                	add    eax,edx
c00094e8:	0f b7 c0             	movzx  eax,ax
c00094eb:	50                   	push   eax
c00094ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f0:	e8 bf fe ff ff       	call   c00093b4 <pbuf_get_at>
c00094f5:	83 c4 08             	add    esp,0x8
c00094f8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00094fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009501:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009505:	01 d0                	add    eax,edx
c0009507:	8a 00                	mov    al,BYTE PTR [eax]
c0009509:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000950d:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009512:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009517:	39 c2                	cmp    edx,eax
c0009519:	74 0d                	je     c0009528 <pbuf_memcmp+0xdc>
c000951b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009520:	83 c0 01             	add    eax,0x1
c0009523:	eb 2f                	jmp    c0009554 <pbuf_memcmp+0x108>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000952d:	83 c0 01             	add    eax,0x1
c0009530:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009535:	8d 76 00             	lea    esi,[esi+0x0]
c0009538:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000953d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009541:	39 c2                	cmp    edx,eax
c0009543:	72 97                	jb     c00094dc <pbuf_memcmp+0x90>
c0009545:	b8 00 00 00 00       	mov    eax,0x0
c000954a:	eb 08                	jmp    c0009554 <pbuf_memcmp+0x108>
c000954c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009551:	8d 76 00             	lea    esi,[esi+0x0]
c0009554:	83 c4 18             	add    esp,0x18
c0009557:	c3                   	ret    

c0009558 <pbuf_memfind>:
c0009558:	83 ec 18             	sub    esp,0x18
c000955b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000955f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009563:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009568:	66 89 04 24          	mov    WORD PTR [esp],ax
c000956c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009570:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009577:	89 d1                	mov    ecx,edx
c0009579:	29 c1                	sub    ecx,eax
c000957b:	89 c8                	mov    eax,ecx
c000957d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009586:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009589:	0f b7 c0             	movzx  eax,ax
c000958c:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009591:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009595:	01 ca                	add    edx,ecx
c0009597:	39 d0                	cmp    eax,edx
c0009599:	7c 65                	jl     c0009600 <pbuf_memfind+0xa8>
c000959b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000959e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095a3:	eb 4b                	jmp    c00095f0 <pbuf_memfind+0x98>
c00095a5:	8d 76 00             	lea    esi,[esi+0x0]
c00095a8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00095ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00095b2:	52                   	push   edx
c00095b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b7:	50                   	push   eax
c00095b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00095bc:	e8 8b fe ff ff       	call   c000944c <pbuf_memcmp>
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095c9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ce:	85 c0                	test   eax,eax
c00095d0:	75 0a                	jne    c00095dc <pbuf_memfind+0x84>
c00095d2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00095d7:	eb 2f                	jmp    c0009608 <pbuf_memfind+0xb0>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00095e1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00095e6:	01 d0                	add    eax,edx
c00095e8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095ed:	8d 76 00             	lea    esi,[esi+0x0]
c00095f0:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00095f5:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00095fa:	39 c2                	cmp    edx,eax
c00095fc:	76 aa                	jbe    c00095a8 <pbuf_memfind+0x50>
c00095fe:	66 90                	xchg   ax,ax
c0009600:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	83 c4 18             	add    esp,0x18
c000960b:	c3                   	ret    

c000960c <pbuf_strstr>:
c000960c:	83 ec 1c             	sub    esp,0x1c
c000960f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009614:	74 1e                	je     c0009634 <pbuf_strstr+0x28>
c0009616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000961a:	8a 00                	mov    al,BYTE PTR [eax]
c000961c:	0f be c0             	movsx  eax,al
c000961f:	85 c0                	test   eax,eax
c0009621:	74 11                	je     c0009634 <pbuf_strstr+0x28>
c0009623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000962a:	0f b7 c0             	movzx  eax,ax
c000962d:	3d ff ff 00 00       	cmp    eax,0xffff
c0009632:	75 08                	jne    c000963c <pbuf_strstr+0x30>
c0009634:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009639:	eb 41                	jmp    c000967c <pbuf_strstr+0x70>
c000963b:	90                   	nop
c000963c:	83 ec 0c             	sub    esp,0xc
c000963f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009643:	e8 28 6f ff ff       	call   c0000570 <strlen>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000964f:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c0009657:	76 07                	jbe    c0009660 <pbuf_strstr+0x54>
c0009659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000965e:	eb 1c                	jmp    c000967c <pbuf_strstr+0x70>
c0009660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	6a 00                	push   0x0
c0009669:	50                   	push   eax
c000966a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000966e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009672:	e8 e1 fe ff ff       	call   c0009558 <pbuf_memfind>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	66 90                	xchg   ax,ax
c000967c:	83 c4 1c             	add    esp,0x1c
c000967f:	c3                   	ret    

c0009680 <raw_input>:
c0009680:	83 ec 2c             	sub    esp,0x2c
c0009683:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000968c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000968f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009697:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000969a:	0f b6 c0             	movzx  eax,al
c000969d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00096aa:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00096af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096b3:	e9 b8 00 00 00       	jmp    c0009770 <raw_input+0xf0>
c00096b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096bc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00096bf:	0f b6 d0             	movzx  edx,al
c00096c2:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00096c7:	39 c2                	cmp    edx,eax
c00096c9:	0f 85 8d 00 00 00    	jne    c000975c <raw_input+0xdc>
c00096cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d3:	85 c0                	test   eax,eax
c00096d5:	74 19                	je     c00096f0 <raw_input+0x70>
c00096d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096db:	8b 00                	mov    eax,DWORD PTR [eax]
c00096dd:	85 c0                	test   eax,eax
c00096df:	74 0f                	je     c00096f0 <raw_input+0x70>
c00096e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00096e7:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00096ec:	39 c2                	cmp    edx,eax
c00096ee:	75 6c                	jne    c000975c <raw_input+0xdc>
c00096f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00096f7:	85 c0                	test   eax,eax
c00096f9:	74 61                	je     c000975c <raw_input+0xdc>
c00096fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009706:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009709:	68 90 68 03 c0       	push   0xc0036890
c000970e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009716:	52                   	push   edx
c0009717:	ff d0                	call   eax
c0009719:	83 c4 10             	add    esp,0x10
c000971c:	0f b6 c0             	movzx  eax,al
c000971f:	85 c0                	test   eax,eax
c0009721:	74 39                	je     c000975c <raw_input+0xdc>
c0009723:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000972b:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009735:	74 25                	je     c000975c <raw_input+0xdc>
c0009737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000973b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000973e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009742:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009745:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000974b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009756:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000975b:	90                   	nop
c000975c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009760:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000976b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000976f:	90                   	nop
c0009770:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009775:	85 c0                	test   eax,eax
c0009777:	75 0b                	jne    c0009784 <raw_input+0x104>
c0009779:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000977e:	0f 85 34 ff ff ff    	jne    c00096b8 <raw_input+0x38>
c0009784:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009788:	83 c4 2c             	add    esp,0x2c
c000978b:	c3                   	ret    

c000978c <raw_bind>:
c000978c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009791:	74 09                	je     c000979c <raw_bind+0x10>
c0009793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009797:	8b 00                	mov    eax,DWORD PTR [eax]
c0009799:	eb 09                	jmp    c00097a4 <raw_bind+0x18>
c000979b:	90                   	nop
c000979c:	b8 00 00 00 00       	mov    eax,0x0
c00097a1:	8d 76 00             	lea    esi,[esi+0x0]
c00097a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a8:	89 02                	mov    DWORD PTR [edx],eax
c00097aa:	b0 00                	mov    al,0x0
c00097ac:	c3                   	ret    
c00097ad:	8d 76 00             	lea    esi,[esi+0x0]

c00097b0 <raw_connect>:
c00097b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097b5:	74 09                	je     c00097c0 <raw_connect+0x10>
c00097b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00097bd:	eb 09                	jmp    c00097c8 <raw_connect+0x18>
c00097bf:	90                   	nop
c00097c0:	b8 00 00 00 00       	mov    eax,0x0
c00097c5:	8d 76 00             	lea    esi,[esi+0x0]
c00097c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097cc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00097cf:	b0 00                	mov    al,0x0
c00097d1:	c3                   	ret    
c00097d2:	66 90                	xchg   ax,ax

c00097d4 <raw_recv>:
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097dc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00097df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00097ea:	90                   	nop
c00097eb:	c3                   	ret    

c00097ec <raw_sendto>:
c00097ec:	83 ec 1c             	sub    esp,0x1c
c00097ef:	83 ec 08             	sub    esp,0x8
c00097f2:	6a 14                	push   0x14
c00097f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097f8:	e8 c3 e9 ff ff       	call   c00081c0 <pbuf_header>
c00097fd:	83 c4 10             	add    esp,0x10
c0009800:	0f b6 c0             	movzx  eax,al
c0009803:	85 c0                	test   eax,eax
c0009805:	74 49                	je     c0009850 <raw_sendto+0x64>
c0009807:	83 ec 04             	sub    esp,0x4
c000980a:	6a 00                	push   0x0
c000980c:	6a 00                	push   0x0
c000980e:	6a 01                	push   0x1
c0009810:	e8 1f ed ff ff       	call   c0008534 <pbuf_alloc>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000981c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009821:	75 09                	jne    c000982c <raw_sendto+0x40>
c0009823:	b0 ff                	mov    al,0xff
c0009825:	e9 2a 01 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000982a:	66 90                	xchg   ax,ax
c000982c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009833:	0f b7 c0             	movzx  eax,ax
c0009836:	85 c0                	test   eax,eax
c0009838:	74 52                	je     c000988c <raw_sendto+0xa0>
c000983a:	83 ec 08             	sub    esp,0x8
c000983d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009845:	e8 2a f4 ff ff       	call   c0008c74 <pbuf_chain>
c000984a:	83 c4 10             	add    esp,0x10
c000984d:	eb 3d                	jmp    c000988c <raw_sendto+0xa0>
c000984f:	90                   	nop
c0009850:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009858:	83 ec 08             	sub    esp,0x8
c000985b:	6a ec                	push   0xffffffec
c000985d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009861:	e8 5a e9 ff ff       	call   c00081c0 <pbuf_header>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	0f b6 c0             	movzx  eax,al
c000986c:	85 c0                	test   eax,eax
c000986e:	74 1c                	je     c000988c <raw_sendto+0xa0>
c0009870:	83 ec 08             	sub    esp,0x8
c0009873:	68 18 00 03 c0       	push   0xc0030018
c0009878:	68 a6 fa 02 c0       	push   0xc002faa6
c000987d:	e8 0e 63 01 00       	call   c001fb90 <CPrintf>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	b0 ff                	mov    al,0xff
c0009887:	e9 c8 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000988c:	83 ec 0c             	sub    esp,0xc
c000988f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009893:	e8 6c 9d 00 00       	call   c0013604 <ip_route>
c0009898:	83 c4 10             	add    esp,0x10
c000989b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000989f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00098a4:	75 22                	jne    c00098c8 <raw_sendto+0xdc>
c00098a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098aa:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098ae:	74 10                	je     c00098c0 <raw_sendto+0xd4>
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	e8 a0 ea ff ff       	call   c000835c <pbuf_free>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	90                   	nop
c00098c0:	b0 fc                	mov    al,0xfc
c00098c2:	e9 8d 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c00098c7:	90                   	nop
c00098c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cc:	85 c0                	test   eax,eax
c00098ce:	74 0c                	je     c00098dc <raw_sendto+0xf0>
c00098d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098d6:	85 c0                	test   eax,eax
c00098d8:	75 12                	jne    c00098ec <raw_sendto+0x100>
c00098da:	66 90                	xchg   ax,ax
c00098dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098e0:	83 c0 04             	add    eax,0x4
c00098e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098e7:	eb 0b                	jmp    c00098f4 <raw_sendto+0x108>
c00098e9:	8d 76 00             	lea    esi,[esi+0x0]
c00098ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00098fb:	0f b6 c8             	movzx  ecx,al
c00098fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009902:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009905:	0f b6 d0             	movzx  edx,al
c0009908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000990c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000990f:	0f b6 c0             	movzx  eax,al
c0009912:	83 ec 04             	sub    esp,0x4
c0009915:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009919:	51                   	push   ecx
c000991a:	52                   	push   edx
c000991b:	50                   	push   eax
c000991c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009920:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009924:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009928:	e8 af a1 00 00       	call   c0013adc <ip_output_if>
c000992d:	83 c4 20             	add    esp,0x20
c0009930:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009938:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c000993c:	74 12                	je     c0009950 <raw_sendto+0x164>
c000993e:	83 ec 0c             	sub    esp,0xc
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	e8 12 ea ff ff       	call   c000835c <pbuf_free>
c000994a:	83 c4 10             	add    esp,0x10
c000994d:	8d 76 00             	lea    esi,[esi+0x0]
c0009950:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009954:	83 c4 1c             	add    esp,0x1c
c0009957:	c3                   	ret    

c0009958 <raw_send>:
c0009958:	83 ec 0c             	sub    esp,0xc
c000995b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995f:	83 c0 04             	add    eax,0x4
c0009962:	83 ec 04             	sub    esp,0x4
c0009965:	50                   	push   eax
c0009966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996e:	e8 79 fe ff ff       	call   c00097ec <raw_sendto>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	83 c4 0c             	add    esp,0xc
c0009979:	c3                   	ret    
c000997a:	66 90                	xchg   ax,ax

c000997c <raw_remove>:
c000997c:	83 ec 1c             	sub    esp,0x1c
c000997f:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009984:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009988:	75 12                	jne    c000999c <raw_remove+0x20>
c000998a:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000998f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009992:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009997:	eb 4b                	jmp    c00099e4 <raw_remove+0x68>
c0009999:	8d 76 00             	lea    esi,[esi+0x0]
c000999c:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099a5:	eb 35                	jmp    c00099dc <raw_remove+0x60>
c00099a7:	90                   	nop
c00099a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099af:	85 c0                	test   eax,eax
c00099b1:	74 1d                	je     c00099d0 <raw_remove+0x54>
c00099b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099ba:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099be:	75 10                	jne    c00099d0 <raw_remove+0x54>
c00099c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00099c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00099ce:	66 90                	xchg   ax,ax
c00099d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099db:	90                   	nop
c00099dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00099e1:	75 c5                	jne    c00099a8 <raw_remove+0x2c>
c00099e3:	90                   	nop
c00099e4:	83 ec 08             	sub    esp,0x8
c00099e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099eb:	6a 00                	push   0x0
c00099ed:	e8 ae e0 ff ff       	call   c0007aa0 <memp_free>
c00099f2:	83 c4 10             	add    esp,0x10
c00099f5:	90                   	nop
c00099f6:	83 c4 1c             	add    esp,0x1c
c00099f9:	c3                   	ret    
c00099fa:	66 90                	xchg   ax,ax

c00099fc <raw_new>:
c00099fc:	83 ec 2c             	sub    esp,0x2c
c00099ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	6a 00                	push   0x0
c0009a0c:	e8 63 df ff ff       	call   c0007974 <memp_malloc>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a1d:	74 3d                	je     c0009a5c <raw_new+0x60>
c0009a1f:	83 ec 04             	sub    esp,0x4
c0009a22:	6a 1c                	push   0x1c
c0009a24:	6a 00                	push   0x0
c0009a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a2a:	e8 c1 6a ff ff       	call   c00004f0 <memset>
c0009a2f:	83 c4 10             	add    esp,0x10
c0009a32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009a3a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a41:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009a45:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009a4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a56:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009a5b:	90                   	nop
c0009a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a60:	83 c4 2c             	add    esp,0x2c
c0009a63:	c3                   	ret    

c0009a64 <stats_init>:
c0009a64:	90                   	nop
c0009a65:	c3                   	ret    
c0009a66:	66 90                	xchg   ax,ax

c0009a68 <sys_msleep>:
c0009a68:	83 ec 1c             	sub    esp,0x1c
c0009a6b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009a70:	74 46                	je     c0009ab8 <sys_msleep+0x50>
c0009a72:	83 ec 08             	sub    esp,0x8
c0009a75:	6a 00                	push   0x0
c0009a77:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a7b:	50                   	push   eax
c0009a7c:	e8 eb 71 ff ff       	call   c0000c6c <sys_sem_new>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a88:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009a8d:	85 c0                	test   eax,eax
c0009a8f:	75 27                	jne    c0009ab8 <sys_msleep+0x50>
c0009a91:	83 ec 08             	sub    esp,0x8
c0009a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a9c:	50                   	push   eax
c0009a9d:	e8 22 72 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009aa2:	83 c4 10             	add    esp,0x10
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009aac:	50                   	push   eax
c0009aad:	e8 e2 71 ff ff       	call   c0000c94 <sys_sem_free>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab8:	90                   	nop
c0009ab9:	83 c4 1c             	add    esp,0x1c
c0009abc:	c3                   	ret    
c0009abd:	66 90                	xchg   ax,ax
c0009abf:	90                   	nop

c0009ac0 <tcp_accept_null>:
c0009ac0:	83 ec 04             	sub    esp,0x4
c0009ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ac7:	88 04 24             	mov    BYTE PTR [esp],al
c0009aca:	b0 f6                	mov    al,0xf6
c0009acc:	83 c4 04             	add    esp,0x4
c0009acf:	c3                   	ret    

c0009ad0 <tcp_listen_with_backlog>:
c0009ad0:	83 ec 2c             	sub    esp,0x2c
c0009ad3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ad7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009adf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 22                	je     c0009b08 <tcp_listen_with_backlog+0x38>
c0009ae6:	83 ec 08             	sub    esp,0x8
c0009ae9:	68 40 00 03 c0       	push   0xc0030040
c0009aee:	68 a6 fa 02 c0       	push   0xc002faa6
c0009af3:	e8 98 60 01 00       	call   c001fb90 <CPrintf>
c0009af8:	83 c4 10             	add    esp,0x10
c0009afb:	b8 00 00 00 00       	mov    eax,0x0
c0009b00:	e9 77 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b05:	8d 76 00             	lea    esi,[esi+0x0]
c0009b08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b0f:	83 f8 01             	cmp    eax,0x1
c0009b12:	75 0c                	jne    c0009b20 <tcp_listen_with_backlog+0x50>
c0009b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b18:	e9 5f 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b20:	83 ec 0c             	sub    esp,0xc
c0009b23:	6a 03                	push   0x3
c0009b25:	e8 4a de ff ff       	call   c0007974 <memp_malloc>
c0009b2a:	83 c4 10             	add    esp,0x10
c0009b2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b31:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009b36:	75 0c                	jne    c0009b44 <tcp_listen_with_backlog+0x74>
c0009b38:	b8 00 00 00 00       	mov    eax,0x0
c0009b3d:	e9 3a 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b42:	66 90                	xchg   ax,ax
c0009b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b5d:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009b61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b65:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b70:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b77:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009b7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b7e:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b85:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b8c:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009b8f:	83 c8 02             	or     eax,0x2
c0009b92:	88 c2                	mov    dl,al
c0009b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b98:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9f:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ba6:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bad:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb4:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009bb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc1:	89 10                	mov    DWORD PTR [eax],edx
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009bca:	0f b7 c0             	movzx  eax,ax
c0009bcd:	85 c0                	test   eax,eax
c0009bcf:	74 6f                	je     c0009c40 <tcp_listen_with_backlog+0x170>
c0009bd1:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bd6:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009bda:	75 10                	jne    c0009bec <tcp_listen_with_backlog+0x11c>
c0009bdc:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009be1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be4:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009be9:	eb 49                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009beb:	90                   	nop
c0009bec:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bf1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009bf6:	eb 30                	jmp    c0009c28 <tcp_listen_with_backlog+0x158>
c0009bf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c00:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c04:	75 12                	jne    c0009c18 <tcp_listen_with_backlog+0x148>
c0009c06:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009c0f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009c12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c15:	eb 1d                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009c17:	90                   	nop
c0009c18:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c20:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c25:	8d 76 00             	lea    esi,[esi+0x0]
c0009c28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c2d:	85 c0                	test   eax,eax
c0009c2f:	75 c7                	jne    c0009bf8 <tcp_listen_with_backlog+0x128>
c0009c31:	8d 76 00             	lea    esi,[esi+0x0]
c0009c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c38:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009c3f:	90                   	nop
c0009c40:	83 ec 08             	sub    esp,0x8
c0009c43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009c47:	6a 02                	push   0x2
c0009c49:	e8 52 de ff ff       	call   c0007aa0 <memp_free>
c0009c4e:	83 c4 10             	add    esp,0x10
c0009c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c55:	c7 40 1c c0 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009ac0
c0009c5c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009c62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c6d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009c72:	e8 a5 6e 00 00       	call   c0010b1c <tcp_timer_needed>
c0009c77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c7b:	90                   	nop
c0009c7c:	83 c4 2c             	add    esp,0x2c
c0009c7f:	c3                   	ret    

c0009c80 <tcp_update_rcv_ann_wnd>:
c0009c80:	83 ec 1c             	sub    esp,0x1c
c0009c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c87:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c8e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c91:	0f b7 c0             	movzx  eax,ax
c0009c94:	01 d0                	add    eax,edx
c0009c96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c9e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ca8:	0f b7 c8             	movzx  ecx,ax
c0009cab:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009cb1:	76 05                	jbe    c0009cb8 <tcp_update_rcv_ann_wnd+0x38>
c0009cb3:	b8 30 04 00 00       	mov    eax,0x430
c0009cb8:	0f b7 c0             	movzx  eax,ax
c0009cbb:	01 c2                	add    edx,eax
c0009cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc1:	29 d0                	sub    eax,edx
c0009cc3:	78 23                	js     c0009ce8 <tcp_update_rcv_ann_wnd+0x68>
c0009cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cc9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ccc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009cd0:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cdf:	29 c2                	sub    edx,eax
c0009ce1:	89 d0                	mov    eax,edx
c0009ce3:	eb 73                	jmp    c0009d58 <tcp_update_rcv_ann_wnd+0xd8>
c0009ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cf3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cf6:	29 c2                	sub    edx,eax
c0009cf8:	89 d0                	mov    eax,edx
c0009cfa:	85 c0                	test   eax,eax
c0009cfc:	7e 0e                	jle    c0009d0c <tcp_update_rcv_ann_wnd+0x8c>
c0009cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d02:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009d08:	eb 46                	jmp    c0009d50 <tcp_update_rcv_ann_wnd+0xd0>
c0009d0a:	66 90                	xchg   ax,ax
c0009d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d10:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d17:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009d1a:	29 c2                	sub    edx,eax
c0009d1c:	89 d0                	mov    eax,edx
c0009d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d22:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009d2a:	76 18                	jbe    c0009d44 <tcp_update_rcv_ann_wnd+0xc4>
c0009d2c:	83 ec 08             	sub    esp,0x8
c0009d2f:	68 74 02 03 c0       	push   0xc0030274
c0009d34:	68 a6 fa 02 c0       	push   0xc002faa6
c0009d39:	e8 52 5e 01 00       	call   c001fb90 <CPrintf>
c0009d3e:	83 c4 10             	add    esp,0x10
c0009d41:	8d 76 00             	lea    esi,[esi+0x0]
c0009d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009d4c:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009d50:	b8 00 00 00 00       	mov    eax,0x0
c0009d55:	8d 76 00             	lea    esi,[esi+0x0]
c0009d58:	83 c4 1c             	add    esp,0x1c
c0009d5b:	c3                   	ret    

c0009d5c <tcp_recved>:
c0009d5c:	83 ec 2c             	sub    esp,0x2c
c0009d5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009d68:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009d7c:	29 c1                	sub    ecx,eax
c0009d7e:	89 c8                	mov    eax,ecx
c0009d80:	39 c2                	cmp    edx,eax
c0009d82:	7e 18                	jle    c0009d9c <tcp_recved+0x40>
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	68 64 00 03 c0       	push   0xc0030064
c0009d8c:	68 a6 fa 02 c0       	push   0xc002faa6
c0009d91:	e8 fa 5d 01 00       	call   c001fb90 <CPrintf>
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	8d 76 00             	lea    esi,[esi+0x0]
c0009d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009da0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009da7:	01 d0                	add    eax,edx
c0009da9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dad:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009db8:	0f b7 c0             	movzx  eax,ax
c0009dbb:	3d 60 08 00 00       	cmp    eax,0x860
c0009dc0:	76 0a                	jbe    c0009dcc <tcp_recved+0x70>
c0009dc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dc6:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd3:	e8 a8 fe ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c0009dd8:	83 c4 10             	add    esp,0x10
c0009ddb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ddf:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009de7:	7e 23                	jle    c0009e0c <tcp_recved+0xb0>
c0009de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ded:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009df0:	83 c8 02             	or     eax,0x2
c0009df3:	88 c2                	mov    dl,al
c0009df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009dfc:	83 ec 0c             	sub    esp,0xc
c0009dff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e03:	e8 84 60 00 00       	call   c000fe8c <tcp_output>
c0009e08:	83 c4 10             	add    esp,0x10
c0009e0b:	90                   	nop
c0009e0c:	90                   	nop
c0009e0d:	83 c4 2c             	add    esp,0x2c
c0009e10:	c3                   	ret    
c0009e11:	8d 76 00             	lea    esi,[esi+0x0]

c0009e14 <tcp_new_port>:
c0009e14:	83 ec 10             	sub    esp,0x10
c0009e17:	90                   	nop
c0009e18:	66 a1 60 3b 03 c0    	mov    ax,ds:0xc0033b60
c0009e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0009e21:	66 89 15 60 3b 03 c0 	mov    WORD PTR ds:0xc0033b60,dx
c0009e28:	0f b7 c0             	movzx  eax,ax
c0009e2b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009e30:	75 0a                	jne    c0009e3c <tcp_new_port+0x28>
c0009e32:	66 c7 05 60 3b 03 c0 00 c0 	mov    WORD PTR ds:0xc0033b60,0xc000
c0009e3b:	90                   	nop
c0009e3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009e44:	eb 4a                	jmp    c0009e90 <tcp_new_port+0x7c>
c0009e46:	66 90                	xchg   ax,ax
c0009e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4c:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c0009e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e59:	eb 29                	jmp    c0009e84 <tcp_new_port+0x70>
c0009e5b:	90                   	nop
c0009e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009e63:	66 a1 60 3b 03 c0    	mov    ax,ds:0xc0033b60
c0009e69:	0f b7 d2             	movzx  edx,dx
c0009e6c:	0f b7 c0             	movzx  eax,ax
c0009e6f:	39 c2                	cmp    edx,eax
c0009e71:	75 05                	jne    c0009e78 <tcp_new_port+0x64>
c0009e73:	eb a3                	jmp    c0009e18 <tcp_new_port+0x4>
c0009e75:	8d 76 00             	lea    esi,[esi+0x0]
c0009e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e83:	90                   	nop
c0009e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009e89:	75 d1                	jne    c0009e5c <tcp_new_port+0x48>
c0009e8b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009e90:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009e95:	7e b1                	jle    c0009e48 <tcp_new_port+0x34>
c0009e97:	66 a1 60 3b 03 c0    	mov    ax,ds:0xc0033b60
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	c3                   	ret    
c0009ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0009ea4 <tcp_bind>:
c0009ea4:	83 ec 2c             	sub    esp,0x2c
c0009ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009eb0:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ebf:	85 c0                	test   eax,eax
c0009ec1:	74 1d                	je     c0009ee0 <tcp_bind+0x3c>
c0009ec3:	83 ec 08             	sub    esp,0x8
c0009ec6:	68 88 00 03 c0       	push   0xc0030088
c0009ecb:	68 a6 fa 02 c0       	push   0xc002faa6
c0009ed0:	e8 bb 5c 01 00       	call   c001fb90 <CPrintf>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	b0 fa                	mov    al,0xfa
c0009eda:	e9 f1 00 00 00       	jmp    c0009fd0 <tcp_bind+0x12c>
c0009edf:	90                   	nop
c0009ee0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009ee5:	85 c0                	test   eax,eax
c0009ee7:	75 0b                	jne    c0009ef4 <tcp_bind+0x50>
c0009ee9:	e8 26 ff ff ff       	call   c0009e14 <tcp_new_port>
c0009eee:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ef3:	90                   	nop
c0009ef4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009efc:	eb 7a                	jmp    c0009f78 <tcp_bind+0xd4>
c0009efe:	66 90                	xchg   ax,ax
c0009f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f04:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c0009f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f11:	eb 59                	jmp    c0009f6c <tcp_bind+0xc8>
c0009f13:	90                   	nop
c0009f14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009f1b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f20:	0f b7 c0             	movzx  eax,ax
c0009f23:	39 c2                	cmp    edx,eax
c0009f25:	75 39                	jne    c0009f60 <tcp_bind+0xbc>
c0009f27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f2b:	85 c0                	test   eax,eax
c0009f2d:	74 2d                	je     c0009f5c <tcp_bind+0xb8>
c0009f2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f35:	85 c0                	test   eax,eax
c0009f37:	74 23                	je     c0009f5c <tcp_bind+0xb8>
c0009f39:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f3e:	74 1c                	je     c0009f5c <tcp_bind+0xb8>
c0009f40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f46:	85 c0                	test   eax,eax
c0009f48:	74 12                	je     c0009f5c <tcp_bind+0xb8>
c0009f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f56:	39 c2                	cmp    edx,eax
c0009f58:	75 06                	jne    c0009f60 <tcp_bind+0xbc>
c0009f5a:	66 90                	xchg   ax,ax
c0009f5c:	b0 f8                	mov    al,0xf8
c0009f5e:	eb 70                	jmp    c0009fd0 <tcp_bind+0x12c>
c0009f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6b:	90                   	nop
c0009f6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009f71:	75 a1                	jne    c0009f14 <tcp_bind+0x70>
c0009f73:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f7c:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009f80:	0f 8c 7a ff ff ff    	jl     c0009f00 <tcp_bind+0x5c>
c0009f86:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f8b:	74 17                	je     c0009fa4 <tcp_bind+0x100>
c0009f8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f93:	85 c0                	test   eax,eax
c0009f95:	74 0d                	je     c0009fa4 <tcp_bind+0x100>
c0009f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f9f:	8b 12                	mov    edx,DWORD PTR [edx]
c0009fa1:	89 10                	mov    DWORD PTR [eax],edx
c0009fa3:	90                   	nop
c0009fa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009fa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fac:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009fb0:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc1:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009fc6:	e8 51 6b 00 00       	call   c0010b1c <tcp_timer_needed>
c0009fcb:	b0 00                	mov    al,0x0
c0009fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0009fd0:	83 c4 2c             	add    esp,0x2c
c0009fd3:	c3                   	ret    

c0009fd4 <tcp_seg_free>:
c0009fd4:	83 ec 0c             	sub    esp,0xc
c0009fd7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009fdc:	74 32                	je     c000a010 <tcp_seg_free+0x3c>
c0009fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009fe5:	85 c0                	test   eax,eax
c0009fe7:	74 13                	je     c0009ffc <tcp_seg_free+0x28>
c0009fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff0:	83 ec 0c             	sub    esp,0xc
c0009ff3:	50                   	push   eax
c0009ff4:	e8 63 e3 ff ff       	call   c000835c <pbuf_free>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	83 ec 08             	sub    esp,0x8
c0009fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a003:	6a 04                	push   0x4
c000a005:	e8 96 da ff ff       	call   c0007aa0 <memp_free>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	90                   	nop
c000a011:	83 c4 0c             	add    esp,0xc
c000a014:	c3                   	ret    
c000a015:	8d 76 00             	lea    esi,[esi+0x0]

c000a018 <tcp_segs_free>:
c000a018:	83 ec 1c             	sub    esp,0x1c
c000a01b:	eb 27                	jmp    c000a044 <tcp_segs_free+0x2c>
c000a01d:	8d 76 00             	lea    esi,[esi+0x0]
c000a020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a024:	8b 00                	mov    eax,DWORD PTR [eax]
c000a026:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02a:	83 ec 0c             	sub    esp,0xc
c000a02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a031:	e8 9e ff ff ff       	call   c0009fd4 <tcp_seg_free>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a049:	75 d5                	jne    c000a020 <tcp_segs_free+0x8>
c000a04b:	90                   	nop
c000a04c:	83 c4 1c             	add    esp,0x1c
c000a04f:	c3                   	ret    

c000a050 <tcp_setprio>:
c000a050:	83 ec 04             	sub    esp,0x4
c000a053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a057:	88 04 24             	mov    BYTE PTR [esp],al
c000a05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a05e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a061:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a064:	90                   	nop
c000a065:	83 c4 04             	add    esp,0x4
c000a068:	c3                   	ret    
c000a069:	8d 76 00             	lea    esi,[esi+0x0]

c000a06c <tcp_seg_copy>:
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	83 ec 0c             	sub    esp,0xc
c000a072:	6a 04                	push   0x4
c000a074:	e8 fb d8 ff ff       	call   c0007974 <memp_malloc>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a080:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a085:	75 09                	jne    c000a090 <tcp_seg_copy+0x24>
c000a087:	b8 00 00 00 00       	mov    eax,0x0
c000a08c:	eb 2e                	jmp    c000a0bc <tcp_seg_copy+0x50>
c000a08e:	66 90                	xchg   ax,ax
c000a090:	83 ec 04             	sub    esp,0x4
c000a093:	6a 10                	push   0x10
c000a095:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a09d:	e8 d8 62 ff ff       	call   c000037a <memcpy>
c000a0a2:	83 c4 10             	add    esp,0x10
c000a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	50                   	push   eax
c000a0b0:	e8 af ea ff ff       	call   c0008b64 <pbuf_ref>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0bc:	83 c4 1c             	add    esp,0x1c
c000a0bf:	c3                   	ret    

c000a0c0 <tcp_arg>:
c000a0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a0cb:	90                   	nop
c000a0cc:	c3                   	ret    
c000a0cd:	8d 76 00             	lea    esi,[esi+0x0]

c000a0d0 <tcp_recv>:
c000a0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0d8:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a0de:	90                   	nop
c000a0df:	c3                   	ret    

c000a0e0 <tcp_sent>:
c000a0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0e8:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a0ee:	90                   	nop
c000a0ef:	c3                   	ret    

c000a0f0 <tcp_err>:
c000a0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0f8:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a0fe:	90                   	nop
c000a0ff:	c3                   	ret    

c000a100 <tcp_accept>:
c000a100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a108:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a10b:	90                   	nop
c000a10c:	c3                   	ret    
c000a10d:	8d 76 00             	lea    esi,[esi+0x0]

c000a110 <tcp_poll>:
c000a110:	83 ec 04             	sub    esp,0x4
c000a113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a117:	88 04 24             	mov    BYTE PTR [esp],al
c000a11a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a11e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a122:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a12c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a12f:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a132:	90                   	nop
c000a133:	83 c4 04             	add    esp,0x4
c000a136:	c3                   	ret    
c000a137:	90                   	nop

c000a138 <tcp_pcb_purge>:
c000a138:	83 ec 0c             	sub    esp,0xc
c000a13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a13f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a142:	85 c0                	test   eax,eax
c000a144:	0f 84 ca 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a151:	83 f8 0a             	cmp    eax,0xa
c000a154:	0f 84 ba 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a15e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a161:	83 f8 01             	cmp    eax,0x1
c000a164:	0f 84 aa 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a16e:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a174:	85 c0                	test   eax,eax
c000a176:	74 24                	je     c000a19c <tcp_pcb_purge+0x64>
c000a178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a182:	83 ec 0c             	sub    esp,0xc
c000a185:	50                   	push   eax
c000a186:	e8 d1 e1 ff ff       	call   c000835c <pbuf_free>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a192:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a1a6:	83 ec 0c             	sub    esp,0xc
c000a1a9:	50                   	push   eax
c000a1aa:	e8 69 fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1af:	83 c4 10             	add    esp,0x10
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a1d1:	83 ec 0c             	sub    esp,0xc
c000a1d4:	50                   	push   eax
c000a1d5:	e8 3e fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1da:	83 c4 10             	add    esp,0x10
c000a1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a1e4:	83 ec 0c             	sub    esp,0xc
c000a1e7:	50                   	push   eax
c000a1e8:	e8 2b fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f4:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ff:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a206:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20d:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a213:	90                   	nop
c000a214:	90                   	nop
c000a215:	83 c4 0c             	add    esp,0xc
c000a218:	c3                   	ret    
c000a219:	8d 76 00             	lea    esi,[esi+0x0]

c000a21c <tcp_slowtmr>:
c000a21c:	57                   	push   edi
c000a21d:	56                   	push   esi
c000a21e:	53                   	push   ebx
c000a21f:	83 ec 20             	sub    esp,0x20
c000a222:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a227:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a22c:	83 c0 01             	add    eax,0x1
c000a22f:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a23c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a241:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a245:	e9 16 06 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a24a:	66 90                	xchg   ax,ax
c000a24c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a250:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a253:	85 c0                	test   eax,eax
c000a255:	75 15                	jne    c000a26c <tcp_slowtmr+0x50>
c000a257:	83 ec 08             	sub    esp,0x8
c000a25a:	68 b0 00 03 c0       	push   0xc00300b0
c000a25f:	68 a6 fa 02 c0       	push   0xc002faa6
c000a264:	e8 27 59 01 00       	call   c001fb90 <CPrintf>
c000a269:	83 c4 10             	add    esp,0x10
c000a26c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a273:	83 f8 01             	cmp    eax,0x1
c000a276:	75 18                	jne    c000a290 <tcp_slowtmr+0x74>
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	68 dc 00 03 c0       	push   0xc00300dc
c000a280:	68 a6 fa 02 c0       	push   0xc002faa6
c000a285:	e8 06 59 01 00       	call   c001fb90 <CPrintf>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	8d 76 00             	lea    esi,[esi+0x0]
c000a290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a294:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a297:	83 f8 0a             	cmp    eax,0xa
c000a29a:	75 18                	jne    c000a2b4 <tcp_slowtmr+0x98>
c000a29c:	83 ec 08             	sub    esp,0x8
c000a29f:	68 08 01 03 c0       	push   0xc0030108
c000a2a4:	68 a6 fa 02 c0       	push   0xc002faa6
c000a2a9:	e8 e2 58 01 00       	call   c001fb90 <CPrintf>
c000a2ae:	83 c4 10             	add    esp,0x10
c000a2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a2b4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2b9:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2c5:	83 f8 02             	cmp    eax,0x2
c000a2c8:	75 22                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ce:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2d1:	0f b6 c0             	movzx  eax,al
c000a2d4:	83 f8 06             	cmp    eax,0x6
c000a2d7:	75 13                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2d9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2dd:	83 c0 01             	add    eax,0x1
c000a2e0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a2e4:	e9 df 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a2ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f0:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2f3:	0f b6 c0             	movzx  eax,al
c000a2f6:	83 f8 0c             	cmp    eax,0xc
c000a2f9:	75 11                	jne    c000a30c <tcp_slowtmr+0xf0>
c000a2fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2ff:	83 c0 01             	add    eax,0x1
c000a302:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a306:	e9 bd 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a30b:	90                   	nop
c000a30c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a310:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a316:	0f b6 c0             	movzx  eax,al
c000a319:	85 c0                	test   eax,eax
c000a31b:	0f 84 8f 00 00 00    	je     c000a3b0 <tcp_slowtmr+0x194>
c000a321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a325:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a32b:	8d 50 01             	lea    edx,[eax+0x1]
c000a32e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a332:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a33c:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a346:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a34c:	0f b6 c0             	movzx  eax,al
c000a34f:	83 e8 01             	sub    eax,0x1
c000a352:	8a 80 90 03 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfc70]
c000a358:	0f b6 c0             	movzx  eax,al
c000a35b:	39 c2                	cmp    edx,eax
c000a35d:	0f 82 65 01 00 00    	jb     c000a4c8 <tcp_slowtmr+0x2ac>
c000a363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a367:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a375:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a37b:	0f b6 c0             	movzx  eax,al
c000a37e:	83 f8 06             	cmp    eax,0x6
c000a381:	77 19                	ja     c000a39c <tcp_slowtmr+0x180>
c000a383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a387:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a38d:	83 c0 01             	add    eax,0x1
c000a390:	88 c2                	mov    dl,al
c000a392:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a396:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a39c:	83 ec 0c             	sub    esp,0xc
c000a39f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3a3:	e8 e8 63 00 00       	call   c0010790 <tcp_zero_window_probe>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	e9 18 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a3b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b4:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3b8:	98                   	cwde   
c000a3b9:	85 c0                	test   eax,eax
c000a3bb:	78 13                	js     c000a3d0 <tcp_slowtmr+0x1b4>
c000a3bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c1:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3c5:	83 c0 01             	add    eax,0x1
c000a3c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3cc:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3d7:	85 c0                	test   eax,eax
c000a3d9:	0f 84 e9 00 00 00    	je     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a3e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3eb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a3ee:	0f bf d2             	movsx  edx,dx
c000a3f1:	98                   	cwde   
c000a3f2:	39 c2                	cmp    edx,eax
c000a3f4:	0f 8c ce 00 00 00    	jl     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a401:	83 f8 02             	cmp    eax,0x2
c000a404:	74 3a                	je     c000a440 <tcp_slowtmr+0x224>
c000a406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a40d:	98                   	cwde   
c000a40e:	c1 f8 03             	sar    eax,0x3
c000a411:	0f bf d0             	movsx  edx,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a41c:	98                   	cwde   
c000a41d:	01 c2                	add    edx,eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	8a 80 98 03 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfc68]
c000a42f:	0f b6 c0             	movzx  eax,al
c000a432:	88 c1                	mov    cl,al
c000a434:	d3 e2                	shl    edx,cl
c000a436:	89 d0                	mov    eax,edx
c000a438:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a43c:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a444:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44e:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a455:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a459:	0f b7 d8             	movzx  ebx,ax
c000a45c:	0f b7 ca             	movzx  ecx,dx
c000a45f:	39 cb                	cmp    ebx,ecx
c000a461:	76 05                	jbe    c000a468 <tcp_slowtmr+0x24c>
c000a463:	89 d0                	mov    eax,edx
c000a465:	8d 76 00             	lea    esi,[esi+0x0]
c000a468:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a46d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a472:	d1 e8                	shr    eax,1
c000a474:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a478:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a47c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a480:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a483:	0f b7 d0             	movzx  edx,ax
c000a486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a48d:	0f b7 c0             	movzx  eax,ax
c000a490:	01 c0                	add    eax,eax
c000a492:	39 c2                	cmp    edx,eax
c000a494:	7d 12                	jge    c000a4a8 <tcp_slowtmr+0x28c>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a49d:	d1 e0                	shl    eax,1
c000a49f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4a3:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a4a7:	90                   	nop
c000a4a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4b3:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a4b7:	83 ec 0c             	sub    esp,0xc
c000a4ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a4be:	e8 c9 5f 00 00       	call   c001048c <tcp_rexmit_rto>
c000a4c3:	83 c4 10             	add    esp,0x10
c000a4c6:	66 90                	xchg   ax,ax
c000a4c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4cf:	83 f8 06             	cmp    eax,0x6
c000a4d2:	75 24                	jne    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4d4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4e1:	29 c2                	sub    edx,eax
c000a4e3:	89 d0                	mov    eax,edx
c000a4e5:	83 f8 28             	cmp    eax,0x28
c000a4e8:	76 0e                	jbe    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4ea:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4ee:	83 c0 01             	add    eax,0x1
c000a4f1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fc:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a4ff:	0f b6 c0             	movzx  eax,al
c000a502:	83 e0 08             	and    eax,0x8
c000a505:	0f 84 e1 00 00 00    	je     c000a5ec <tcp_slowtmr+0x3d0>
c000a50b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a512:	83 f8 04             	cmp    eax,0x4
c000a515:	74 11                	je     c000a528 <tcp_slowtmr+0x30c>
c000a517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a51e:	83 f8 07             	cmp    eax,0x7
c000a521:	0f 85 c5 00 00 00    	jne    c000a5ec <tcp_slowtmr+0x3d0>
c000a527:	90                   	nop
c000a528:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a52e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a532:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a535:	89 d1                	mov    ecx,edx
c000a537:	29 c1                	sub    ecx,eax
c000a539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a53d:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a543:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a548:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a54d:	f7 e2                	mul    edx
c000a54f:	89 d0                	mov    eax,edx
c000a551:	c1 e8 05             	shr    eax,0x5
c000a554:	39 c1                	cmp    ecx,eax
c000a556:	76 18                	jbe    c000a570 <tcp_slowtmr+0x354>
c000a558:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a55c:	83 c0 01             	add    eax,0x1
c000a55f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a563:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a567:	83 c0 01             	add    eax,0x1
c000a56a:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a56e:	eb 7c                	jmp    c000a5ec <tcp_slowtmr+0x3d0>
c000a570:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a57d:	89 d3                	mov    ebx,edx
c000a57f:	29 c3                	sub    ebx,eax
c000a581:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a585:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a58b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a595:	0f b6 d0             	movzx  edx,al
c000a598:	89 d0                	mov    eax,edx
c000a59a:	c1 e0 03             	shl    eax,0x3
c000a59d:	01 d0                	add    eax,edx
c000a59f:	c1 e0 03             	shl    eax,0x3
c000a5a2:	01 d0                	add    eax,edx
c000a5a4:	c1 e0 02             	shl    eax,0x2
c000a5a7:	01 d0                	add    eax,edx
c000a5a9:	c1 e0 05             	shl    eax,0x5
c000a5ac:	29 d0                	sub    eax,edx
c000a5ae:	c1 e0 03             	shl    eax,0x3
c000a5b1:	01 c8                	add    eax,ecx
c000a5b3:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a5b8:	f7 e2                	mul    edx
c000a5ba:	89 d0                	mov    eax,edx
c000a5bc:	c1 e8 05             	shr    eax,0x5
c000a5bf:	39 c3                	cmp    ebx,eax
c000a5c1:	76 29                	jbe    c000a5ec <tcp_slowtmr+0x3d0>
c000a5c3:	83 ec 0c             	sub    esp,0xc
c000a5c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a5ca:	e8 f9 60 00 00       	call   c00106c8 <tcp_keepalive>
c000a5cf:	83 c4 10             	add    esp,0x10
c000a5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d6:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a5dc:	83 c0 01             	add    eax,0x1
c000a5df:	88 c2                	mov    dl,al
c000a5e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e5:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a5eb:	90                   	nop
c000a5ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a5f6:	85 c0                	test   eax,eax
c000a5f8:	74 4e                	je     c000a648 <tcp_slowtmr+0x42c>
c000a5fa:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a604:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a607:	89 d1                	mov    ecx,edx
c000a609:	29 c1                	sub    ecx,eax
c000a60b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a612:	0f bf d0             	movsx  edx,ax
c000a615:	89 d0                	mov    eax,edx
c000a617:	01 c0                	add    eax,eax
c000a619:	01 d0                	add    eax,edx
c000a61b:	01 c0                	add    eax,eax
c000a61d:	39 c1                	cmp    ecx,eax
c000a61f:	72 27                	jb     c000a648 <tcp_slowtmr+0x42c>
c000a621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a625:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a62b:	83 ec 0c             	sub    esp,0xc
c000a62e:	50                   	push   eax
c000a62f:	e8 e4 f9 ff ff       	call   c000a018 <tcp_segs_free>
c000a634:	83 c4 10             	add    esp,0x10
c000a637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63b:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a645:	8d 76 00             	lea    esi,[esi+0x0]
c000a648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a64f:	83 f8 03             	cmp    eax,0x3
c000a652:	75 24                	jne    c000a678 <tcp_slowtmr+0x45c>
c000a654:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a65a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a661:	29 c2                	sub    edx,eax
c000a663:	89 d0                	mov    eax,edx
c000a665:	83 f8 28             	cmp    eax,0x28
c000a668:	76 0e                	jbe    c000a678 <tcp_slowtmr+0x45c>
c000a66a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a66e:	83 c0 01             	add    eax,0x1
c000a671:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a675:	8d 76 00             	lea    esi,[esi+0x0]
c000a678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a67f:	83 f8 09             	cmp    eax,0x9
c000a682:	75 24                	jne    c000a6a8 <tcp_slowtmr+0x48c>
c000a684:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a691:	29 c2                	sub    edx,eax
c000a693:	89 d0                	mov    eax,edx
c000a695:	3d f0 00 00 00       	cmp    eax,0xf0
c000a69a:	76 0c                	jbe    c000a6a8 <tcp_slowtmr+0x48c>
c000a69c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6a0:	83 c0 01             	add    eax,0x1
c000a6a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6a7:	90                   	nop
c000a6a8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a6ad:	85 c0                	test   eax,eax
c000a6af:	0f 84 13 01 00 00    	je     c000a7c8 <tcp_slowtmr+0x5ac>
c000a6b5:	83 ec 0c             	sub    esp,0xc
c000a6b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6bc:	e8 77 fa ff ff       	call   c000a138 <tcp_pcb_purge>
c000a6c1:	83 c4 10             	add    esp,0x10
c000a6c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a6c9:	74 31                	je     c000a6fc <tcp_slowtmr+0x4e0>
c000a6cb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a6d0:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a6d4:	75 16                	jne    c000a6ec <tcp_slowtmr+0x4d0>
c000a6d6:	83 ec 08             	sub    esp,0x8
c000a6d9:	68 38 01 03 c0       	push   0xc0030138
c000a6de:	68 a6 fa 02 c0       	push   0xc002faa6
c000a6e3:	e8 a8 54 01 00       	call   c001fb90 <CPrintf>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	90                   	nop
c000a6ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a6fa:	eb 2c                	jmp    c000a728 <tcp_slowtmr+0x50c>
c000a6fc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a701:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a705:	74 15                	je     c000a71c <tcp_slowtmr+0x500>
c000a707:	83 ec 08             	sub    esp,0x8
c000a70a:	68 64 01 03 c0       	push   0xc0030164
c000a70f:	68 a6 fa 02 c0       	push   0xc002faa6
c000a714:	e8 77 54 01 00       	call   c001fb90 <CPrintf>
c000a719:	83 c4 10             	add    esp,0x10
c000a71c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a723:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a72c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a732:	85 c0                	test   eax,eax
c000a734:	74 1e                	je     c000a754 <tcp_slowtmr+0x538>
c000a736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a73a:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a744:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a747:	83 ec 08             	sub    esp,0x8
c000a74a:	6a f6                	push   0xfffffff6
c000a74c:	52                   	push   edx
c000a74d:	ff d0                	call   eax
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	66 90                	xchg   ax,ax
c000a754:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a759:	85 c0                	test   eax,eax
c000a75b:	74 3f                	je     c000a79c <tcp_slowtmr+0x580>
c000a75d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a761:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a765:	0f b7 f0             	movzx  esi,ax
c000a768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a76f:	0f b7 d8             	movzx  ebx,ax
c000a772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a776:	8d 78 04             	lea    edi,[eax+0x4]
c000a779:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a781:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a78b:	83 ec 08             	sub    esp,0x8
c000a78e:	56                   	push   esi
c000a78f:	53                   	push   ebx
c000a790:	57                   	push   edi
c000a791:	51                   	push   ecx
c000a792:	52                   	push   edx
c000a793:	50                   	push   eax
c000a794:	e8 7f 5b 00 00       	call   c0010318 <tcp_rst>
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7af:	83 ec 08             	sub    esp,0x8
c000a7b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b6:	6a 02                	push   0x2
c000a7b8:	e8 e3 d2 ff ff       	call   c0007aa0 <memp_free>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	e9 9b 00 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a7c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7df:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a7e2:	83 c0 01             	add    eax,0x1
c000a7e5:	88 c2                	mov    dl,al
c000a7e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7eb:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a7ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f2:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a7f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f9:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a7fc:	0f b6 d2             	movzx  edx,dl
c000a7ff:	0f b6 c0             	movzx  eax,al
c000a802:	39 c2                	cmp    edx,eax
c000a804:	72 5a                	jb     c000a860 <tcp_slowtmr+0x644>
c000a806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a80a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a80e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a812:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a818:	85 c0                	test   eax,eax
c000a81a:	74 24                	je     c000a840 <tcp_slowtmr+0x624>
c000a81c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a820:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a82a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a82d:	83 ec 08             	sub    esp,0x8
c000a830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a834:	52                   	push   edx
c000a835:	ff d0                	call   eax
c000a837:	83 c4 10             	add    esp,0x10
c000a83a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a83e:	eb 08                	jmp    c000a848 <tcp_slowtmr+0x62c>
c000a840:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a845:	8d 76 00             	lea    esi,[esi+0x0]
c000a848:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a84d:	85 c0                	test   eax,eax
c000a84f:	75 0f                	jne    c000a860 <tcp_slowtmr+0x644>
c000a851:	83 ec 0c             	sub    esp,0xc
c000a854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a858:	e8 2f 56 00 00       	call   c000fe8c <tcp_output>
c000a85d:	83 c4 10             	add    esp,0x10
c000a860:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a865:	0f 85 e1 f9 ff ff    	jne    c000a24c <tcp_slowtmr+0x30>
c000a86b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a873:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a878:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a87c:	e9 0b 01 00 00       	jmp    c000a98c <tcp_slowtmr+0x770>
c000a881:	8d 76 00             	lea    esi,[esi+0x0]
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a88b:	83 f8 0a             	cmp    eax,0xa
c000a88e:	74 18                	je     c000a8a8 <tcp_slowtmr+0x68c>
c000a890:	83 ec 08             	sub    esp,0x8
c000a893:	68 90 01 03 c0       	push   0xc0030190
c000a898:	68 a6 fa 02 c0       	push   0xc002faa6
c000a89d:	e8 ee 52 01 00       	call   c001fb90 <CPrintf>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a8ad:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a8b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a8ba:	29 c2                	sub    edx,eax
c000a8bc:	89 d0                	mov    eax,edx
c000a8be:	3d f0 00 00 00       	cmp    eax,0xf0
c000a8c3:	76 0b                	jbe    c000a8d0 <tcp_slowtmr+0x6b4>
c000a8c5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a8c9:	83 c0 01             	add    eax,0x1
c000a8cc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a8d0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a8d5:	85 c0                	test   eax,eax
c000a8d7:	0f 84 9b 00 00 00    	je     c000a978 <tcp_slowtmr+0x75c>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a8e4:	e8 4f f8 ff ff       	call   c000a138 <tcp_pcb_purge>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a8f1:	74 31                	je     c000a924 <tcp_slowtmr+0x708>
c000a8f3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8f8:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8fc:	75 16                	jne    c000a914 <tcp_slowtmr+0x6f8>
c000a8fe:	83 ec 08             	sub    esp,0x8
c000a901:	68 c0 01 03 c0       	push   0xc00301c0
c000a906:	68 a6 fa 02 c0       	push   0xc002faa6
c000a90b:	e8 80 52 01 00       	call   c001fb90 <CPrintf>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	90                   	nop
c000a914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a918:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a922:	eb 2c                	jmp    c000a950 <tcp_slowtmr+0x734>
c000a924:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a929:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a92d:	74 15                	je     c000a944 <tcp_slowtmr+0x728>
c000a92f:	83 ec 08             	sub    esp,0x8
c000a932:	68 e8 01 03 c0       	push   0xc00301e8
c000a937:	68 a6 fa 02 c0       	push   0xc002faa6
c000a93c:	e8 4f 52 01 00       	call   c001fb90 <CPrintf>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a94b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a95c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a95f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a963:	83 ec 08             	sub    esp,0x8
c000a966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a96a:	6a 02                	push   0x2
c000a96c:	e8 2f d1 ff ff       	call   c0007aa0 <memp_free>
c000a971:	83 c4 10             	add    esp,0x10
c000a974:	eb 16                	jmp    c000a98c <tcp_slowtmr+0x770>
c000a976:	66 90                	xchg   ax,ax
c000a978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a97c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a98b:	90                   	nop
c000a98c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a991:	0f 85 ed fe ff ff    	jne    c000a884 <tcp_slowtmr+0x668>
c000a997:	90                   	nop
c000a998:	83 c4 20             	add    esp,0x20
c000a99b:	5b                   	pop    ebx
c000a99c:	5e                   	pop    esi
c000a99d:	5f                   	pop    edi
c000a99e:	c3                   	ret    
c000a99f:	90                   	nop

c000a9a0 <tcp_pcb_remove>:
c000a9a0:	83 ec 0c             	sub    esp,0xc
c000a9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9ad:	75 11                	jne    c000a9c0 <tcp_pcb_remove+0x20>
c000a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9b5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9bc:	89 10                	mov    DWORD PTR [eax],edx
c000a9be:	eb 4c                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c6:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9cb:	eb 33                	jmp    c000aa00 <tcp_pcb_remove+0x60>
c000a9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9d0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9d8:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9dc:	75 12                	jne    c000a9f0 <tcp_pcb_remove+0x50>
c000a9de:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a9ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9ed:	eb 1d                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9ef:	90                   	nop
c000a9f0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9f8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000aa00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa05:	85 c0                	test   eax,eax
c000aa07:	75 c7                	jne    c000a9d0 <tcp_pcb_remove+0x30>
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aa17:	83 ec 0c             	sub    esp,0xc
c000aa1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa1e:	e8 15 f7 ff ff       	call   c000a138 <tcp_pcb_purge>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa2d:	83 f8 0a             	cmp    eax,0xa
c000aa30:	74 3e                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa39:	83 f8 01             	cmp    eax,0x1
c000aa3c:	74 32                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa45:	0f b6 c0             	movzx  eax,al
c000aa48:	83 e0 01             	and    eax,0x1
c000aa4b:	74 23                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa54:	83 c8 02             	or     eax,0x2
c000aa57:	88 c2                	mov    dl,al
c000aa59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aa60:	83 ec 0c             	sub    esp,0xc
c000aa63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa67:	e8 20 54 00 00       	call   c000fe8c <tcp_output>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	90                   	nop
c000aa70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa77:	83 f8 01             	cmp    eax,0x1
c000aa7a:	74 64                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aa7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa80:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aa83:	85 c0                	test   eax,eax
c000aa85:	74 15                	je     c000aa9c <tcp_pcb_remove+0xfc>
c000aa87:	83 ec 08             	sub    esp,0x8
c000aa8a:	68 8e 02 03 c0       	push   0xc003028e
c000aa8f:	68 a6 fa 02 c0       	push   0xc002faa6
c000aa94:	e8 f7 50 01 00       	call   c001fb90 <CPrintf>
c000aa99:	83 c4 10             	add    esp,0x10
c000aa9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aaa3:	85 c0                	test   eax,eax
c000aaa5:	74 15                	je     c000aabc <tcp_pcb_remove+0x11c>
c000aaa7:	83 ec 08             	sub    esp,0x8
c000aaaa:	68 a6 02 03 c0       	push   0xc00302a6
c000aaaf:	68 a6 fa 02 c0       	push   0xc002faa6
c000aab4:	e8 d7 50 01 00       	call   c001fb90 <CPrintf>
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aac0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aac6:	85 c0                	test   eax,eax
c000aac8:	74 16                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aaca:	83 ec 08             	sub    esp,0x8
c000aacd:	68 bf 02 03 c0       	push   0xc00302bf
c000aad2:	68 a6 fa 02 c0       	push   0xc002faa6
c000aad7:	e8 b4 50 01 00       	call   c001fb90 <CPrintf>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	90                   	nop
c000aae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aae4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaeb:	90                   	nop
c000aaec:	83 c4 0c             	add    esp,0xc
c000aaef:	c3                   	ret    

c000aaf0 <tcp_close_shutdown>:
c000aaf0:	57                   	push   edi
c000aaf1:	56                   	push   esi
c000aaf2:	53                   	push   ebx
c000aaf3:	83 ec 20             	sub    esp,0x20
c000aaf6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aafa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aafe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ab03:	85 c0                	test   eax,eax
c000ab05:	0f 84 41 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab12:	83 f8 01             	cmp    eax,0x1
c000ab15:	0f 84 31 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab1f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ab25:	85 c0                	test   eax,eax
c000ab27:	75 17                	jne    c000ab40 <tcp_close_shutdown+0x50>
c000ab29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab2d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ab30:	0f b7 c0             	movzx  eax,ax
c000ab33:	3d 60 08 00 00       	cmp    eax,0x860
c000ab38:	0f 84 0e 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab3e:	66 90                	xchg   ax,ax
c000ab40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ab47:	0f b6 c0             	movzx  eax,al
c000ab4a:	83 e0 10             	and    eax,0x10
c000ab4d:	75 15                	jne    c000ab64 <tcp_close_shutdown+0x74>
c000ab4f:	83 ec 08             	sub    esp,0x8
c000ab52:	68 d6 02 03 c0       	push   0xc00302d6
c000ab57:	68 a6 fa 02 c0       	push   0xc002faa6
c000ab5c:	e8 2f 50 01 00       	call   c001fb90 <CPrintf>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab68:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ab6c:	0f b7 f0             	movzx  esi,ax
c000ab6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ab76:	0f b7 d8             	movzx  ebx,ax
c000ab79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7d:	8d 78 04             	lea    edi,[eax+0x4]
c000ab80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ab84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab88:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab8f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	56                   	push   esi
c000ab96:	53                   	push   ebx
c000ab97:	57                   	push   edi
c000ab98:	51                   	push   ecx
c000ab99:	52                   	push   edx
c000ab9a:	50                   	push   eax
c000ab9b:	e8 78 57 00 00       	call   c0010318 <tcp_rst>
c000aba0:	83 c4 20             	add    esp,0x20
c000aba3:	83 ec 0c             	sub    esp,0xc
c000aba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abaa:	e8 89 f5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abb7:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abbb:	75 0f                	jne    c000abcc <tcp_close_shutdown+0xdc>
c000abbd:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abc5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000abca:	eb 48                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abd1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abd6:	eb 30                	jmp    c000ac08 <tcp_close_shutdown+0x118>
c000abd8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abe0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abe4:	75 12                	jne    c000abf8 <tcp_close_shutdown+0x108>
c000abe6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abef:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abf2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abf5:	eb 1d                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abf7:	90                   	nop
c000abf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac00:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac05:	8d 76 00             	lea    esi,[esi+0x0]
c000ac08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac0d:	85 c0                	test   eax,eax
c000ac0f:	75 c7                	jne    c000abd8 <tcp_close_shutdown+0xe8>
c000ac11:	8d 76 00             	lea    esi,[esi+0x0]
c000ac14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac18:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac23:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ac2a:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ac30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac34:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac3b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ac40:	e8 d7 5e 00 00       	call   c0010b1c <tcp_timer_needed>
c000ac45:	b0 00                	mov    al,0x0
c000ac47:	e9 f4 01 00 00       	jmp    c000ae40 <tcp_close_shutdown+0x350>
c000ac4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac53:	83 f8 07             	cmp    eax,0x7
c000ac56:	0f 87 a4 01 00 00    	ja     c000ae00 <tcp_close_shutdown+0x310>
c000ac5c:	8b 04 85 60 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfca0]
c000ac63:	ff e0                	jmp    eax
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ac74:	0f b7 c0             	movzx  eax,ax
c000ac77:	85 c0                	test   eax,eax
c000ac79:	74 71                	je     c000acec <tcp_close_shutdown+0x1fc>
c000ac7b:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac80:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac84:	75 12                	jne    c000ac98 <tcp_close_shutdown+0x1a8>
c000ac86:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac8e:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ac93:	eb 4b                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000ac95:	8d 76 00             	lea    esi,[esi+0x0]
c000ac98:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac9d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aca2:	eb 30                	jmp    c000acd4 <tcp_close_shutdown+0x1e4>
c000aca4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aca9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acac:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000acb0:	75 12                	jne    c000acc4 <tcp_close_shutdown+0x1d4>
c000acb2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000acbb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000acbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000acc1:	eb 1d                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000acc3:	90                   	nop
c000acc4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000accc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000acd1:	8d 76 00             	lea    esi,[esi+0x0]
c000acd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acd9:	85 c0                	test   eax,eax
c000acdb:	75 c7                	jne    c000aca4 <tcp_close_shutdown+0x1b4>
c000acdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ace0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aceb:	90                   	nop
c000acec:	83 ec 08             	sub    esp,0x8
c000acef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acf3:	6a 02                	push   0x2
c000acf5:	e8 a6 cd ff ff       	call   c0007aa0 <memp_free>
c000acfa:	83 c4 10             	add    esp,0x10
c000acfd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad05:	e9 12 01 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad0a:	66 90                	xchg   ax,ax
c000ad0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad11:	83 ec 08             	sub    esp,0x8
c000ad14:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad18:	68 78 68 03 c0       	push   0xc0036878
c000ad1d:	e8 7e fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad22:	83 c4 10             	add    esp,0x10
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad2c:	6a 03                	push   0x3
c000ad2e:	e8 6d cd ff ff       	call   c0007aa0 <memp_free>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3e:	e9 d9 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad43:	90                   	nop
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad50:	68 70 68 03 c0       	push   0xc0036870
c000ad55:	e8 46 fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	83 ec 08             	sub    esp,0x8
c000ad60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad64:	6a 02                	push   0x2
c000ad66:	e8 35 cd ff ff       	call   c0007aa0 <memp_free>
c000ad6b:	83 c4 10             	add    esp,0x10
c000ad6e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad76:	e9 a1 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad7b:	90                   	nop
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad83:	e8 54 4d 00 00       	call   c000fadc <tcp_send_fin>
c000ad88:	83 c4 10             	add    esp,0x10
c000ad8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad8f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad94:	85 c0                	test   eax,eax
c000ad96:	75 78                	jne    c000ae10 <tcp_close_shutdown+0x320>
c000ad98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad9c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ada3:	eb 6b                	jmp    c000ae10 <tcp_close_shutdown+0x320>
c000ada5:	8d 76 00             	lea    esi,[esi+0x0]
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adaf:	e8 28 4d 00 00       	call   c000fadc <tcp_send_fin>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adc0:	85 c0                	test   eax,eax
c000adc2:	75 50                	jne    c000ae14 <tcp_close_shutdown+0x324>
c000adc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adc8:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000adcf:	eb 43                	jmp    c000ae14 <tcp_close_shutdown+0x324>
c000add1:	8d 76 00             	lea    esi,[esi+0x0]
c000add4:	83 ec 0c             	sub    esp,0xc
c000add7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000addb:	e8 fc 4c 00 00       	call   c000fadc <tcp_send_fin>
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ade7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adec:	85 c0                	test   eax,eax
c000adee:	75 28                	jne    c000ae18 <tcp_close_shutdown+0x328>
c000adf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf4:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000adfb:	eb 1b                	jmp    c000ae18 <tcp_close_shutdown+0x328>
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae0d:	eb 0d                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae0f:	90                   	nop
c000ae10:	90                   	nop
c000ae11:	eb 09                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae13:	90                   	nop
c000ae14:	90                   	nop
c000ae15:	eb 05                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae17:	90                   	nop
c000ae18:	90                   	nop
c000ae19:	8d 76 00             	lea    esi,[esi+0x0]
c000ae1c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ae21:	74 19                	je     c000ae3c <tcp_close_shutdown+0x34c>
c000ae23:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae28:	85 c0                	test   eax,eax
c000ae2a:	75 10                	jne    c000ae3c <tcp_close_shutdown+0x34c>
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae33:	e8 54 50 00 00       	call   c000fe8c <tcp_output>
c000ae38:	83 c4 10             	add    esp,0x10
c000ae3b:	90                   	nop
c000ae3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ae40:	83 c4 20             	add    esp,0x20
c000ae43:	5b                   	pop    ebx
c000ae44:	5e                   	pop    esi
c000ae45:	5f                   	pop    edi
c000ae46:	c3                   	ret    
c000ae47:	90                   	nop

c000ae48 <tcp_close>:
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae52:	83 f8 01             	cmp    eax,0x1
c000ae55:	74 15                	je     c000ae6c <tcp_close+0x24>
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ae5e:	83 c8 10             	or     eax,0x10
c000ae61:	88 c2                	mov    dl,al
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ae6a:	66 90                	xchg   ax,ax
c000ae6c:	83 ec 08             	sub    esp,0x8
c000ae6f:	6a 01                	push   0x1
c000ae71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae75:	e8 76 fc ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	83 c4 0c             	add    esp,0xc
c000ae80:	c3                   	ret    
c000ae81:	8d 76 00             	lea    esi,[esi+0x0]

c000ae84 <tcp_recv_null>:
c000ae84:	83 ec 1c             	sub    esp,0x1c
c000ae87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ae8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ae8f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ae94:	74 2e                	je     c000aec4 <tcp_recv_null+0x40>
c000ae96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ae9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ae9d:	0f b7 c0             	movzx  eax,ax
c000aea0:	83 ec 08             	sub    esp,0x8
c000aea3:	50                   	push   eax
c000aea4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aea8:	e8 af ee ff ff       	call   c0009d5c <tcp_recved>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	83 ec 0c             	sub    esp,0xc
c000aeb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aeb7:	e8 a0 d4 ff ff       	call   c000835c <pbuf_free>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	eb 1f                	jmp    c000aee0 <tcp_recv_null+0x5c>
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000aec9:	85 c0                	test   eax,eax
c000aecb:	75 13                	jne    c000aee0 <tcp_recv_null+0x5c>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aed4:	e8 6f ff ff ff       	call   c000ae48 <tcp_close>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	eb 06                	jmp    c000aee4 <tcp_recv_null+0x60>
c000aede:	66 90                	xchg   ax,ax
c000aee0:	b0 00                	mov    al,0x0
c000aee2:	66 90                	xchg   ax,ax
c000aee4:	83 c4 1c             	add    esp,0x1c
c000aee7:	c3                   	ret    

c000aee8 <tcp_fasttmr>:
c000aee8:	83 ec 1c             	sub    esp,0x1c
c000aeeb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aef4:	e9 03 01 00 00       	jmp    c000affc <tcp_fasttmr+0x114>
c000aef9:	8d 76 00             	lea    esi,[esi+0x0]
c000aefc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000af03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af0b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af11:	85 c0                	test   eax,eax
c000af13:	0f 84 8f 00 00 00    	je     c000afa8 <tcp_fasttmr+0xc0>
c000af19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af1d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af23:	85 c0                	test   eax,eax
c000af25:	74 31                	je     c000af58 <tcp_fasttmr+0x70>
c000af27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af2b:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af35:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000af3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af3f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000af42:	6a 00                	push   0x0
c000af44:	51                   	push   ecx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	52                   	push   edx
c000af4a:	ff d0                	call   eax
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af53:	eb 23                	jmp    c000af78 <tcp_fasttmr+0x90>
c000af55:	8d 76 00             	lea    esi,[esi+0x0]
c000af58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af5c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af62:	6a 00                	push   0x0
c000af64:	50                   	push   eax
c000af65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af69:	6a 00                	push   0x0
c000af6b:	e8 14 ff ff ff       	call   c000ae84 <tcp_recv_null>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af77:	90                   	nop
c000af78:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af7d:	85 c0                	test   eax,eax
c000af7f:	75 13                	jne    c000af94 <tcp_fasttmr+0xac>
c000af81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af85:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af8f:	eb 17                	jmp    c000afa8 <tcp_fasttmr+0xc0>
c000af91:	8d 76 00             	lea    esi,[esi+0x0]
c000af94:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af99:	83 f8 f6             	cmp    eax,0xfffffff6
c000af9c:	75 0a                	jne    c000afa8 <tcp_fasttmr+0xc0>
c000af9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000afa6:	66 90                	xchg   ax,ax
c000afa8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000afad:	74 45                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afb3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afb6:	0f b6 c0             	movzx  eax,al
c000afb9:	83 e0 01             	and    eax,0x1
c000afbc:	74 36                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afc2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afc5:	83 c8 02             	or     eax,0x2
c000afc8:	88 c2                	mov    dl,al
c000afca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afce:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afd1:	83 ec 0c             	sub    esp,0xc
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	e8 af 4e 00 00       	call   c000fe8c <tcp_output>
c000afdd:	83 c4 10             	add    esp,0x10
c000afe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afe4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afe7:	83 e0 fc             	and    eax,0xfffffffc
c000afea:	88 c2                	mov    dl,al
c000afec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aff0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aff3:	90                   	nop
c000aff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000affc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b001:	0f 85 f5 fe ff ff    	jne    c000aefc <tcp_fasttmr+0x14>
c000b007:	90                   	nop
c000b008:	83 c4 1c             	add    esp,0x1c
c000b00b:	c3                   	ret    

c000b00c <tcp_tmr>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	e8 d4 fe ff ff       	call   c000aee8 <tcp_fasttmr>
c000b014:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b019:	83 c0 01             	add    eax,0x1
c000b01c:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b021:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b026:	0f b6 c0             	movzx  eax,al
c000b029:	83 e0 01             	and    eax,0x1
c000b02c:	74 06                	je     c000b034 <tcp_tmr+0x28>
c000b02e:	e8 e9 f1 ff ff       	call   c000a21c <tcp_slowtmr>
c000b033:	90                   	nop
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	8d 76 00             	lea    esi,[esi+0x0]

c000b03c <tcp_shutdown>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b046:	83 f8 01             	cmp    eax,0x1
c000b049:	75 09                	jne    c000b054 <tcp_shutdown+0x18>
c000b04b:	b0 f3                	mov    al,0xf3
c000b04d:	e9 92 00 00 00       	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b052:	66 90                	xchg   ax,ax
c000b054:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b059:	74 49                	je     c000b0a4 <tcp_shutdown+0x68>
c000b05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b065:	85 c0                	test   eax,eax
c000b067:	74 27                	je     c000b090 <tcp_shutdown+0x54>
c000b069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	50                   	push   eax
c000b077:	e8 e0 d2 ff ff       	call   c000835c <pbuf_free>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b083:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b08d:	8d 76 00             	lea    esi,[esi+0x0]
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b097:	83 c8 10             	or     eax,0x10
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b0a3:	90                   	nop
c000b0a4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0a9:	74 2d                	je     c000b0d8 <tcp_shutdown+0x9c>
c000b0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0b2:	83 f8 03             	cmp    eax,0x3
c000b0b5:	72 25                	jb     c000b0dc <tcp_shutdown+0xa0>
c000b0b7:	83 f8 04             	cmp    eax,0x4
c000b0ba:	76 08                	jbe    c000b0c4 <tcp_shutdown+0x88>
c000b0bc:	83 f8 07             	cmp    eax,0x7
c000b0bf:	75 1b                	jne    c000b0dc <tcp_shutdown+0xa0>
c000b0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c4:	83 ec 08             	sub    esp,0x8
c000b0c7:	6a 00                	push   0x0
c000b0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0cd:	e8 1e fa ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000b0d2:	83 c4 10             	add    esp,0x10
c000b0d5:	eb 0d                	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b0d7:	90                   	nop
c000b0d8:	90                   	nop
c000b0d9:	eb 05                	jmp    c000b0e0 <tcp_shutdown+0xa4>
c000b0db:	90                   	nop
c000b0dc:	90                   	nop
c000b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0e0:	b0 00                	mov    al,0x0
c000b0e2:	66 90                	xchg   ax,ax
c000b0e4:	83 c4 0c             	add    esp,0xc
c000b0e7:	c3                   	ret    

c000b0e8 <tcp_abandon>:
c000b0e8:	83 ec 2c             	sub    esp,0x2c
c000b0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0f2:	83 f8 01             	cmp    eax,0x1
c000b0f5:	75 15                	jne    c000b10c <tcp_abandon+0x24>
c000b0f7:	83 ec 08             	sub    esp,0x8
c000b0fa:	68 10 02 03 c0       	push   0xc0030210
c000b0ff:	68 a6 fa 02 c0       	push   0xc002faa6
c000b104:	e8 87 4a 01 00       	call   c001fb90 <CPrintf>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b110:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b113:	83 f8 0a             	cmp    eax,0xa
c000b116:	75 2c                	jne    c000b144 <tcp_abandon+0x5c>
c000b118:	83 ec 08             	sub    esp,0x8
c000b11b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b11f:	68 84 68 03 c0       	push   0xc0036884
c000b124:	e8 77 f8 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	83 ec 08             	sub    esp,0x8
c000b12f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b133:	6a 02                	push   0x2
c000b135:	e8 66 c9 ff ff       	call   c0007aa0 <memp_free>
c000b13a:	83 c4 10             	add    esp,0x10
c000b13d:	e9 32 01 00 00       	jmp    c000b274 <tcp_abandon+0x18c>
c000b142:	66 90                	xchg   ax,ax
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b14b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b153:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b15e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b160:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b16f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b173:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b176:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b17b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b17f:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b183:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b19a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b19d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1a1:	83 ec 08             	sub    esp,0x8
c000b1a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1a8:	68 70 68 03 c0       	push   0xc0036870
c000b1ad:	e8 ee f7 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1b9:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	74 14                	je     c000b1d4 <tcp_abandon+0xec>
c000b1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1c4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1c7:	83 ec 0c             	sub    esp,0xc
c000b1ca:	50                   	push   eax
c000b1cb:	e8 48 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	90                   	nop
c000b1d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1db:	85 c0                	test   eax,eax
c000b1dd:	74 15                	je     c000b1f4 <tcp_abandon+0x10c>
c000b1df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1e3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	50                   	push   eax
c000b1ea:	e8 29 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1ef:	83 c4 10             	add    esp,0x10
c000b1f2:	66 90                	xchg   ax,ax
c000b1f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b1fe:	85 c0                	test   eax,eax
c000b200:	74 16                	je     c000b218 <tcp_abandon+0x130>
c000b202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b206:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 03 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	83 ec 08             	sub    esp,0x8
c000b21b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b21f:	6a 02                	push   0x2
c000b221:	e8 7a c8 ff ff       	call   c0007aa0 <memp_free>
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b22e:	74 14                	je     c000b244 <tcp_abandon+0x15c>
c000b230:	83 ec 08             	sub    esp,0x8
c000b233:	6a f6                	push   0xfffffff6
c000b235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	ff d0                	call   eax
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	66 90                	xchg   ax,ax
c000b244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b249:	74 29                	je     c000b274 <tcp_abandon+0x18c>
c000b24b:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b250:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b255:	83 ec 08             	sub    esp,0x8
c000b258:	52                   	push   edx
c000b259:	50                   	push   eax
c000b25a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b25e:	50                   	push   eax
c000b25f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b263:	50                   	push   eax
c000b264:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b268:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b26c:	e8 a7 50 00 00       	call   c0010318 <tcp_rst>
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	90                   	nop
c000b275:	83 c4 2c             	add    esp,0x2c
c000b278:	c3                   	ret    
c000b279:	8d 76 00             	lea    esi,[esi+0x0]

c000b27c <tcp_abort>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	83 ec 08             	sub    esp,0x8
c000b282:	6a 01                	push   0x1
c000b284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b288:	e8 5b fe ff ff       	call   c000b0e8 <tcp_abandon>
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	90                   	nop
c000b291:	83 c4 0c             	add    esp,0xc
c000b294:	c3                   	ret    
c000b295:	8d 76 00             	lea    esi,[esi+0x0]

c000b298 <tcp_kill_prio>:
c000b298:	83 ec 2c             	sub    esp,0x2c
c000b29b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b29f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b2a3:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b2a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2b8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b2bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2c1:	eb 75                	jmp    c000b338 <tcp_kill_prio+0xa0>
c000b2c3:	90                   	nop
c000b2c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2cb:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b2d0:	0f b6 c0             	movzx  eax,al
c000b2d3:	39 c2                	cmp    edx,eax
c000b2d5:	72 55                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2db:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2de:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b2e3:	0f b6 c0             	movzx  eax,al
c000b2e6:	39 c2                	cmp    edx,eax
c000b2e8:	72 42                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2ea:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2f4:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2f7:	29 c2                	sub    edx,eax
c000b2f9:	89 d0                	mov    eax,edx
c000b2fb:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b2ff:	77 2b                	ja     c000b32c <tcp_kill_prio+0x94>
c000b301:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b30b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b30e:	29 c2                	sub    edx,eax
c000b310:	89 d0                	mov    eax,edx
c000b312:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b322:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b325:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b329:	8d 76 00             	lea    esi,[esi+0x0]
c000b32c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b330:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b333:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b337:	90                   	nop
c000b338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b33d:	75 85                	jne    c000b2c4 <tcp_kill_prio+0x2c>
c000b33f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b344:	74 12                	je     c000b358 <tcp_kill_prio+0xc0>
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b34d:	e8 2a ff ff ff       	call   c000b27c <tcp_abort>
c000b352:	83 c4 10             	add    esp,0x10
c000b355:	8d 76 00             	lea    esi,[esi+0x0]
c000b358:	90                   	nop
c000b359:	83 c4 2c             	add    esp,0x2c
c000b35c:	c3                   	ret    
c000b35d:	8d 76 00             	lea    esi,[esi+0x0]

c000b360 <tcp_kill_timewait>:
c000b360:	83 ec 1c             	sub    esp,0x1c
c000b363:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b36b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b373:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b37c:	eb 42                	jmp    c000b3c0 <tcp_kill_timewait+0x60>
c000b37e:	66 90                	xchg   ax,ax
c000b380:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b38a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b38d:	29 c2                	sub    edx,eax
c000b38f:	89 d0                	mov    eax,edx
c000b391:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b395:	77 1d                	ja     c000b3b4 <tcp_kill_timewait+0x54>
c000b397:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3a4:	29 c2                	sub    edx,eax
c000b3a6:	89 d0                	mov    eax,edx
c000b3a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3bf:	90                   	nop
c000b3c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b3c5:	75 b9                	jne    c000b380 <tcp_kill_timewait+0x20>
c000b3c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b3cc:	74 12                	je     c000b3e0 <tcp_kill_timewait+0x80>
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 a2 fe ff ff       	call   c000b27c <tcp_abort>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3e0:	90                   	nop
c000b3e1:	83 c4 1c             	add    esp,0x1c
c000b3e4:	c3                   	ret    
c000b3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000b3e8 <tcp_next_iss>:
c000b3e8:	8b 15 5c 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b5c
c000b3ee:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b3f3:	01 d0                	add    eax,edx
c000b3f5:	a3 5c 3b 03 c0       	mov    ds:0xc0033b5c,eax
c000b3fa:	a1 5c 3b 03 c0       	mov    eax,ds:0xc0033b5c
c000b3ff:	c3                   	ret    

c000b400 <tcp_alloc>:
c000b400:	83 ec 2c             	sub    esp,0x2c
c000b403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b407:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	6a 02                	push   0x2
c000b410:	e8 5f c5 ff ff       	call   c0007974 <memp_malloc>
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b41c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b421:	75 6d                	jne    c000b490 <tcp_alloc+0x90>
c000b423:	e8 38 ff ff ff       	call   c000b360 <tcp_kill_timewait>
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	6a 02                	push   0x2
c000b42d:	e8 42 c5 ff ff       	call   c0007974 <memp_malloc>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b439:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b43e:	75 38                	jne    c000b478 <tcp_alloc+0x78>
c000b440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	50                   	push   eax
c000b449:	e8 4a fe ff ff       	call   c000b298 <tcp_kill_prio>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	83 ec 0c             	sub    esp,0xc
c000b454:	6a 02                	push   0x2
c000b456:	e8 19 c5 ff ff       	call   c0007974 <memp_malloc>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b467:	74 0f                	je     c000b478 <tcp_alloc+0x78>
c000b469:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b46f:	83 e8 01             	sub    eax,0x1
c000b472:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b478:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b47d:	74 11                	je     c000b490 <tcp_alloc+0x90>
c000b47f:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b485:	83 e8 01             	sub    eax,0x1
c000b488:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b48e:	66 90                	xchg   ax,ax
c000b490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b495:	0f 84 09 01 00 00    	je     c000b5a4 <tcp_alloc+0x1a4>
c000b49b:	83 ec 04             	sub    esp,0x4
c000b49e:	68 a8 00 00 00       	push   0xa8
c000b4a3:	6a 00                	push   0x0
c000b4a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b4a9:	e8 42 50 ff ff       	call   c00004f0 <memset>
c000b4ae:	83 c4 10             	add    esp,0x10
c000b4b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b4b9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b4bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c0:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ca:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d4:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b4e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e8:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b4ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f0:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f8:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50c:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b520:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52a:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b530:	e8 b3 fe ff ff       	call   c000b3e8 <tcp_next_iss>
c000b535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b541:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b548:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b54c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b557:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b55a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b55e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b562:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b565:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b56b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b56f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b576:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b57e:	c7 80 8c 00 00 00 84 ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ae84
c000b588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58c:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a8:	83 c4 2c             	add    esp,0x2c
c000b5ab:	c3                   	ret    

c000b5ac <tcp_new>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	6a 40                	push   0x40
c000b5b4:	e8 47 fe ff ff       	call   c000b400 <tcp_alloc>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	83 c4 0c             	add    esp,0xc
c000b5bf:	c3                   	ret    

c000b5c0 <tcp_eff_send_mss>:
c000b5c0:	53                   	push   ebx
c000b5c1:	83 ec 28             	sub    esp,0x28
c000b5c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b5d4:	e8 2b 80 00 00       	call   c0013604 <ip_route>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	74 3d                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5ee:	0f b7 c0             	movzx  eax,ax
c000b5f1:	85 c0                	test   eax,eax
c000b5f3:	74 2f                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5fc:	83 e8 28             	sub    eax,0x28
c000b5ff:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b608:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b60d:	0f b7 d8             	movzx  ebx,ax
c000b610:	0f b7 ca             	movzx  ecx,dx
c000b613:	39 cb                	cmp    ebx,ecx
c000b615:	76 05                	jbe    c000b61c <tcp_eff_send_mss+0x5c>
c000b617:	89 d0                	mov    eax,edx
c000b619:	8d 76 00             	lea    esi,[esi+0x0]
c000b61c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b621:	8d 76 00             	lea    esi,[esi+0x0]
c000b624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b628:	83 c4 28             	add    esp,0x28
c000b62b:	5b                   	pop    ebx
c000b62c:	c3                   	ret    
c000b62d:	8d 76 00             	lea    esi,[esi+0x0]

c000b630 <tcp_connect>:
c000b630:	83 ec 2c             	sub    esp,0x2c
c000b633:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b637:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b63c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b640:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b643:	85 c0                	test   eax,eax
c000b645:	74 1d                	je     c000b664 <tcp_connect+0x34>
c000b647:	83 ec 08             	sub    esp,0x8
c000b64a:	68 44 02 03 c0       	push   0xc0030244
c000b64f:	68 a6 fa 02 c0       	push   0xc002faa6
c000b654:	e8 37 45 01 00       	call   c001fb90 <CPrintf>
c000b659:	83 c4 10             	add    esp,0x10
c000b65c:	b0 f7                	mov    al,0xf7
c000b65e:	e9 39 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b663:	90                   	nop
c000b664:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b669:	74 25                	je     c000b690 <tcp_connect+0x60>
c000b66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b66f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b673:	8b 12                	mov    edx,DWORD PTR [edx]
c000b675:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b678:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b67c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b680:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b688:	85 c0                	test   eax,eax
c000b68a:	74 18                	je     c000b6a4 <tcp_connect+0x74>
c000b68c:	eb 0a                	jmp    c000b698 <tcp_connect+0x68>
c000b68e:	66 90                	xchg   ax,ax
c000b690:	b0 fa                	mov    al,0xfa
c000b692:	e9 05 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b697:	90                   	nop
c000b698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b69e:	85 c0                	test   eax,eax
c000b6a0:	75 3a                	jne    c000b6dc <tcp_connect+0xac>
c000b6a2:	66 90                	xchg   ax,ax
c000b6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a8:	83 c0 04             	add    eax,0x4
c000b6ab:	83 ec 0c             	sub    esp,0xc
c000b6ae:	50                   	push   eax
c000b6af:	e8 50 7f 00 00       	call   c0013604 <ip_route>
c000b6b4:	83 c4 10             	add    esp,0x10
c000b6b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6bb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b6c0:	75 0a                	jne    c000b6cc <tcp_connect+0x9c>
c000b6c2:	b0 fc                	mov    al,0xfc
c000b6c4:	e9 d3 01 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d7:	89 10                	mov    DWORD PTR [eax],edx
c000b6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b6e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6ef:	0f b7 c0             	movzx  eax,ax
c000b6f2:	85 c0                	test   eax,eax
c000b6f4:	75 0e                	jne    c000b704 <tcp_connect+0xd4>
c000b6f6:	e8 19 e7 ff ff       	call   c0009e14 <tcp_new_port>
c000b6fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6ff:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b703:	90                   	nop
c000b704:	e8 df fc ff ff       	call   c000b3e8 <tcp_next_iss>
c000b709:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b70d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b711:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b720:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b727:	8d 50 ff             	lea    edx,[eax-0x1]
c000b72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b72e:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b735:	8d 50 ff             	lea    edx,[eax-0x1]
c000b738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73c:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b73f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b743:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b74d:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b757:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b765:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b76b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76f:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b779:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b77c:	0f b7 c0             	movzx  eax,ax
c000b77f:	83 ec 08             	sub    esp,0x8
c000b782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b786:	50                   	push   eax
c000b787:	e8 34 fe ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000b78c:	83 c4 10             	add    esp,0x10
c000b78f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b793:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79b:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b7a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7a8:	89 c2                	mov    edx,eax
c000b7aa:	c1 e2 02             	shl    edx,0x2
c000b7ad:	01 d0                	add    eax,edx
c000b7af:	d1 e0                	shl    eax,1
c000b7b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7b5:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b7c1:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b7c7:	83 ec 08             	sub    esp,0x8
c000b7ca:	6a 02                	push   0x2
c000b7cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7d0:	e8 1b 40 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b7dc:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b7e1:	85 c0                	test   eax,eax
c000b7e3:	0f 85 af 00 00 00    	jne    c000b898 <tcp_connect+0x268>
c000b7e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ed:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b7f4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b7f9:	85 c0                	test   eax,eax
c000b7fb:	74 6f                	je     c000b86c <tcp_connect+0x23c>
c000b7fd:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b802:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b806:	75 10                	jne    c000b818 <tcp_connect+0x1e8>
c000b808:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b80d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b810:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b815:	eb 49                	jmp    c000b860 <tcp_connect+0x230>
c000b817:	90                   	nop
c000b818:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b81d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b822:	eb 30                	jmp    c000b854 <tcp_connect+0x224>
c000b824:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b829:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b82c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b830:	75 12                	jne    c000b844 <tcp_connect+0x214>
c000b832:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b837:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b83b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b83e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b841:	eb 1d                	jmp    c000b860 <tcp_connect+0x230>
c000b843:	90                   	nop
c000b844:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b849:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b84c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b851:	8d 76 00             	lea    esi,[esi+0x0]
c000b854:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b859:	85 c0                	test   eax,eax
c000b85b:	75 c7                	jne    c000b824 <tcp_connect+0x1f4>
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b864:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b86b:	90                   	nop
c000b86c:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b876:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b87d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b882:	e8 95 52 00 00       	call   c0010b1c <tcp_timer_needed>
c000b887:	83 ec 0c             	sub    esp,0xc
c000b88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b88e:	e8 f9 45 00 00       	call   c000fe8c <tcp_output>
c000b893:	83 c4 10             	add    esp,0x10
c000b896:	66 90                	xchg   ax,ax
c000b898:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b89c:	83 c4 2c             	add    esp,0x2c
c000b89f:	c3                   	ret    

c000b8a0 <tcp_debug_state_str>:
c000b8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a4:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c000b8ab:	c3                   	ret    

c000b8ac <tcp_timewait_input>:
c000b8ac:	53                   	push   ebx
c000b8ad:	83 ec 08             	sub    esp,0x8
c000b8b0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8b5:	0f b6 c0             	movzx  eax,al
c000b8b8:	83 e0 04             	and    eax,0x4
c000b8bb:	74 07                	je     c000b8c4 <tcp_timewait_input+0x18>
c000b8bd:	b0 00                	mov    al,0x0
c000b8bf:	e9 e8 00 00 00       	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b8c4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8c9:	0f b6 c0             	movzx  eax,al
c000b8cc:	83 e0 02             	and    eax,0x2
c000b8cf:	0f 84 83 00 00 00    	je     c000b958 <tcp_timewait_input+0xac>
c000b8d5:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8df:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b8e2:	29 c2                	sub    edx,eax
c000b8e4:	89 d0                	mov    eax,edx
c000b8e6:	0f 88 88 00 00 00    	js     c000b974 <tcp_timewait_input+0xc8>
c000b8ec:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b900:	0f b7 c0             	movzx  eax,ax
c000b903:	01 c8                	add    eax,ecx
c000b905:	29 c2                	sub    edx,eax
c000b907:	89 d0                	mov    eax,edx
c000b909:	85 c0                	test   eax,eax
c000b90b:	7f 67                	jg     c000b974 <tcp_timewait_input+0xc8>
c000b90d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b912:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b915:	0f b7 c8             	movzx  ecx,ax
c000b918:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b91d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b921:	0f b7 d0             	movzx  edx,ax
c000b924:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b92a:	0f b7 d8             	movzx  ebx,ax
c000b92d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b932:	01 c3                	add    ebx,eax
c000b934:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b939:	83 ec 08             	sub    esp,0x8
c000b93c:	51                   	push   ecx
c000b93d:	52                   	push   edx
c000b93e:	68 90 68 03 c0       	push   0xc0036890
c000b943:	68 98 68 03 c0       	push   0xc0036898
c000b948:	53                   	push   ebx
c000b949:	50                   	push   eax
c000b94a:	e8 c9 49 00 00       	call   c0010318 <tcp_rst>
c000b94f:	83 c4 20             	add    esp,0x20
c000b952:	b0 00                	mov    al,0x0
c000b954:	eb 56                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b956:	66 90                	xchg   ax,ax
c000b958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b95d:	0f b6 c0             	movzx  eax,al
c000b960:	83 e0 01             	and    eax,0x1
c000b963:	74 0f                	je     c000b974 <tcp_timewait_input+0xc8>
c000b965:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b972:	66 90                	xchg   ax,ax
c000b974:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b97a:	0f b7 c0             	movzx  eax,ax
c000b97d:	85 c0                	test   eax,eax
c000b97f:	74 27                	je     c000b9a8 <tcp_timewait_input+0xfc>
c000b981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b985:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b988:	83 c8 02             	or     eax,0x2
c000b98b:	88 c2                	mov    dl,al
c000b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b991:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99b:	e8 ec 44 00 00       	call   c000fe8c <tcp_output>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	eb 07                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a8:	b0 00                	mov    al,0x0
c000b9aa:	66 90                	xchg   ax,ax
c000b9ac:	83 c4 08             	add    esp,0x8
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    
c000b9b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b9b4 <tcp_oos_insert_segment>:
c000b9b4:	53                   	push   ebx
c000b9b5:	83 ec 18             	sub    esp,0x18
c000b9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b9c3:	0f b7 c0             	movzx  eax,ax
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 19 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	0f b7 c0             	movzx  eax,ax
c000b9d5:	83 e0 01             	and    eax,0x1
c000b9d8:	0f 84 8e 00 00 00    	je     c000ba6c <tcp_oos_insert_segment+0xb8>
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9e5:	e8 2e e6 ff ff       	call   c000a018 <tcp_segs_free>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b9f5:	e9 16 01 00 00       	jmp    c000bb10 <tcp_oos_insert_segment+0x15c>
c000b9fa:	66 90                	xchg   ax,ax
c000b9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba03:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba07:	0f b7 c0             	movzx  eax,ax
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 d5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	0f b7 c0             	movzx  eax,ax
c000ba19:	83 e0 01             	and    eax,0x1
c000ba1c:	74 2a                	je     c000ba48 <tcp_oos_insert_segment+0x94>
c000ba1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba25:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ba29:	83 ec 0c             	sub    esp,0xc
c000ba2c:	6a 01                	push   0x1
c000ba2e:	e8 b5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	89 c1                	mov    ecx,eax
c000ba38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ba3f:	89 d8                	mov    eax,ebx
c000ba41:	09 c8                	or     eax,ecx
c000ba43:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ba47:	90                   	nop
c000ba48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba56:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba5a:	83 ec 0c             	sub    esp,0xc
c000ba5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba61:	e8 6e e5 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ba66:	83 c4 10             	add    esp,0x10
c000ba69:	8d 76 00             	lea    esi,[esi+0x0]
c000ba6c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ba71:	74 35                	je     c000baa8 <tcp_oos_insert_segment+0xf4>
c000ba73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba7a:	0f b7 d0             	movzx  edx,ax
c000ba7d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ba85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ba8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba96:	0f b7 c0             	movzx  eax,ax
c000ba99:	01 d0                	add    eax,edx
c000ba9b:	29 c1                	sub    ecx,eax
c000ba9d:	89 c8                	mov    eax,ecx
c000ba9f:	0f 89 57 ff ff ff    	jns    c000b9fc <tcp_oos_insert_segment+0x48>
c000baa5:	8d 76 00             	lea    esi,[esi+0x0]
c000baa8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000baad:	74 61                	je     c000bb10 <tcp_oos_insert_segment+0x15c>
c000baaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bab6:	0f b7 d0             	movzx  edx,ax
c000bab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000babe:	01 c2                	add    edx,eax
c000bac0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000baca:	29 c2                	sub    edx,eax
c000bacc:	89 d0                	mov    eax,edx
c000bace:	85 c0                	test   eax,eax
c000bad0:	7e 3e                	jle    c000bb10 <tcp_oos_insert_segment+0x15c>
c000bad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bad6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bad9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000badc:	89 c2                	mov    edx,eax
c000bade:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bae3:	89 d3                	mov    ebx,edx
c000bae5:	29 c3                	sub    ebx,eax
c000bae7:	89 d8                	mov    eax,ebx
c000bae9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baed:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf8:	0f b7 d0             	movzx  edx,ax
c000bafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb02:	83 ec 08             	sub    esp,0x8
c000bb05:	52                   	push   edx
c000bb06:	50                   	push   eax
c000bb07:	e8 20 ce ff ff       	call   c000892c <pbuf_realloc>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	90                   	nop
c000bb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb18:	89 10                	mov    DWORD PTR [eax],edx
c000bb1a:	90                   	nop
c000bb1b:	83 c4 18             	add    esp,0x18
c000bb1e:	5b                   	pop    ebx
c000bb1f:	c3                   	ret    

c000bb20 <tcp_receive>:
c000bb20:	57                   	push   edi
c000bb21:	56                   	push   esi
c000bb22:	53                   	push   ebx
c000bb23:	83 ec 30             	sub    esp,0x30
c000bb26:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb2e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb33:	0f b6 c0             	movzx  eax,al
c000bb36:	83 e0 10             	and    eax,0x10
c000bb39:	0f 84 e5 07 00 00    	je     c000c324 <tcp_receive+0x804>
c000bb3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb43:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb46:	0f b7 d0             	movzx  edx,ax
c000bb49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb4d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bb50:	01 d0                	add    eax,edx
c000bb52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb5d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb62:	29 c2                	sub    edx,eax
c000bb64:	89 d0                	mov    eax,edx
c000bb66:	78 50                	js     c000bbb8 <tcp_receive+0x98>
c000bb68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb6c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb6f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb74:	39 c2                	cmp    edx,eax
c000bb76:	75 14                	jne    c000bb8c <tcp_receive+0x6c>
c000bb78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb7c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb7f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb84:	29 c2                	sub    edx,eax
c000bb86:	89 d0                	mov    eax,edx
c000bb88:	78 2e                	js     c000bbb8 <tcp_receive+0x98>
c000bb8a:	66 90                	xchg   ax,ax
c000bb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb90:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb93:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb98:	39 c2                	cmp    edx,eax
c000bb9a:	75 74                	jne    c000bc10 <tcp_receive+0xf0>
c000bb9c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bba1:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bba5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbac:	0f b7 d2             	movzx  edx,dx
c000bbaf:	0f b7 c0             	movzx  eax,ax
c000bbb2:	39 c2                	cmp    edx,eax
c000bbb4:	76 5a                	jbe    c000bc10 <tcp_receive+0xf0>
c000bbb6:	66 90                	xchg   ax,ax
c000bbb8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bbbd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bbc1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bbc5:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bbc9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bbcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bbd6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bbdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bbe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbea:	0f b7 c0             	movzx  eax,ax
c000bbed:	85 c0                	test   eax,eax
c000bbef:	74 1f                	je     c000bc10 <tcp_receive+0xf0>
c000bbf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bbfb:	0f b6 c0             	movzx  eax,al
c000bbfe:	85 c0                	test   eax,eax
c000bc00:	74 0e                	je     c000bc10 <tcp_receive+0xf0>
c000bc02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc06:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc10:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc1d:	29 c2                	sub    edx,eax
c000bc1f:	89 d0                	mov    eax,edx
c000bc21:	85 c0                	test   eax,eax
c000bc23:	0f 8f ff 00 00 00    	jg     c000bd28 <tcp_receive+0x208>
c000bc29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2d:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bc33:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bc39:	0f b7 c0             	movzx  eax,ax
c000bc3c:	85 c0                	test   eax,eax
c000bc3e:	0f 85 cc 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc48:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc52:	0f b7 c0             	movzx  eax,ax
c000bc55:	01 d0                	add    eax,edx
c000bc57:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bc5b:	0f 85 af 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc65:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bc69:	98                   	cwde   
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 88 9e 00 00 00    	js     c000bd10 <tcp_receive+0x1f0>
c000bc72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc76:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bc79:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bc7e:	39 c2                	cmp    edx,eax
c000bc80:	0f 85 8a 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc86:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc92:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc95:	83 c0 01             	add    eax,0x1
c000bc98:	88 c2                	mov    dl,al
c000bc9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc9e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca5:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bca8:	0f b6 c0             	movzx  eax,al
c000bcab:	83 f8 03             	cmp    eax,0x3
c000bcae:	76 40                	jbe    c000bcf0 <tcp_receive+0x1d0>
c000bcb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcbf:	01 d0                	add    eax,edx
c000bcc1:	89 c2                	mov    edx,eax
c000bcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bccb:	0f b7 d2             	movzx  edx,dx
c000bcce:	0f b7 c0             	movzx  eax,ax
c000bcd1:	39 c2                	cmp    edx,eax
c000bcd3:	76 3b                	jbe    c000bd10 <tcp_receive+0x1f0>
c000bcd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bce4:	01 d0                	add    eax,edx
c000bce6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcea:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bcee:	eb 20                	jmp    c000bd10 <tcp_receive+0x1f0>
c000bcf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf4:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcf7:	0f b6 c0             	movzx  eax,al
c000bcfa:	83 f8 03             	cmp    eax,0x3
c000bcfd:	75 11                	jne    c000bd10 <tcp_receive+0x1f0>
c000bcff:	83 ec 0c             	sub    esp,0xc
c000bd02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd06:	e8 d9 48 00 00       	call   c00105e4 <tcp_rexmit_fast>
c000bd0b:	83 c4 10             	add    esp,0x10
c000bd0e:	66 90                	xchg   ax,ax
c000bd10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bd15:	0f 85 99 04 00 00    	jne    c000c1b4 <tcp_receive+0x694>
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd23:	e9 8c 04 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000bd28:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd32:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd35:	29 c2                	sub    edx,eax
c000bd37:	89 d0                	mov    eax,edx
c000bd39:	83 e8 01             	sub    eax,0x1
c000bd3c:	0f 88 4a 03 00 00    	js     c000c08c <tcp_receive+0x56c>
c000bd42:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bd4f:	29 c2                	sub    edx,eax
c000bd51:	89 d0                	mov    eax,edx
c000bd53:	85 c0                	test   eax,eax
c000bd55:	0f 8f 31 03 00 00    	jg     c000c08c <tcp_receive+0x56c>
c000bd5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd62:	0f b6 c0             	movzx  eax,al
c000bd65:	83 e0 04             	and    eax,0x4
c000bd68:	74 22                	je     c000bd8c <tcp_receive+0x26c>
c000bd6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd71:	83 e0 fb             	and    eax,0xfffffffb
c000bd74:	88 c2                	mov    dl,al
c000bd76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bd7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd81:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd84:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bd8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd90:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bd94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd98:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bd9b:	98                   	cwde   
c000bd9c:	c1 f8 03             	sar    eax,0x3
c000bd9f:	89 c2                	mov    edx,eax
c000bda1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda5:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bda9:	01 d0                	add    eax,edx
c000bdab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdaf:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bdb3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bdb8:	89 c2                	mov    edx,eax
c000bdba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbe:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdc1:	89 d7                	mov    edi,edx
c000bdc3:	29 c7                	sub    edi,eax
c000bdc5:	89 f8                	mov    eax,edi
c000bdc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdcb:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bdcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd3:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bddb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bdde:	01 d0                	add    eax,edx
c000bde0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bde4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bde8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdec:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bdf0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfa:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bdfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000be04:	83 f8 03             	cmp    eax,0x3
c000be07:	0f 86 db 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be11:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000be1c:	0f b7 d2             	movzx  edx,dx
c000be1f:	0f b7 c0             	movzx  eax,ax
c000be22:	39 c2                	cmp    edx,eax
c000be24:	73 4a                	jae    c000be70 <tcp_receive+0x350>
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be35:	01 d0                	add    eax,edx
c000be37:	89 c2                	mov    edx,eax
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be41:	0f b7 d2             	movzx  edx,dx
c000be44:	0f b7 c0             	movzx  eax,ax
c000be47:	39 c2                	cmp    edx,eax
c000be49:	0f 86 99 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be53:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be5e:	01 d0                	add    eax,edx
c000be60:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be64:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be68:	e9 7b 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000be6d:	8d 76 00             	lea    esi,[esi+0x0]
c000be70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be74:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000be78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7f:	0f b7 d0             	movzx  edx,ax
c000be82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be89:	0f b7 c0             	movzx  eax,ax
c000be8c:	0f af d0             	imul   edx,eax
c000be8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be93:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be97:	0f b7 d8             	movzx  ebx,ax
c000be9a:	89 d0                	mov    eax,edx
c000be9c:	89 c2                	mov    edx,eax
c000be9e:	c1 fa 1f             	sar    edx,0x1f
c000bea1:	f7 fb                	idiv   ebx
c000bea3:	01 c8                	add    eax,ecx
c000bea5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000beaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beae:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000beb2:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000beb7:	0f b7 c0             	movzx  eax,ax
c000beba:	39 c2                	cmp    edx,eax
c000bebc:	0f 86 26 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000bec2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bec6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000becb:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000becf:	e9 14 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000bed4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bedb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bee6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bee8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beec:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000befa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	50                   	push   eax
c000bf01:	e8 2a cc ff ff       	call   c0008b30 <pbuf_clen>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	0f b6 c0             	movzx  eax,al
c000bf0c:	0f b7 d3             	movzx  edx,bx
c000bf0f:	0f b7 c0             	movzx  eax,ax
c000bf12:	39 c2                	cmp    edx,eax
c000bf14:	73 16                	jae    c000bf2c <tcp_receive+0x40c>
c000bf16:	83 ec 08             	sub    esp,0x8
c000bf19:	68 ec 03 03 c0       	push   0xc00303ec
c000bf1e:	68 a6 fa 02 c0       	push   0xc002faa6
c000bf23:	e8 68 3c 01 00       	call   c001fb90 <CPrintf>
c000bf28:	83 c4 10             	add    esp,0x10
c000bf2b:	90                   	nop
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf33:	0f b7 c0             	movzx  eax,ax
c000bf36:	85 c0                	test   eax,eax
c000bf38:	74 36                	je     c000bf70 <tcp_receive+0x450>
c000bf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf41:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf45:	0f b7 c0             	movzx  eax,ax
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 97 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	0f b7 c0             	movzx  eax,ax
c000bf57:	83 e0 01             	and    eax,0x1
c000bf5a:	74 14                	je     c000bf70 <tcp_receive+0x450>
c000bf5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf60:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf63:	83 e8 01             	sub    eax,0x1
c000bf66:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf6a:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf77:	83 ec 0c             	sub    esp,0xc
c000bf7a:	50                   	push   eax
c000bf7b:	e8 b0 cb ff ff       	call   c0008b30 <pbuf_clen>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	88 c1                	mov    cl,al
c000bf85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bf8c:	0f b6 c1             	movzx  eax,cl
c000bf8f:	89 d7                	mov    edi,edx
c000bf91:	29 c7                	sub    edi,eax
c000bf93:	89 f8                	mov    eax,edi
c000bf95:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf99:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bfa4:	e8 2b e0 ff ff       	call   c0009fd4 <tcp_seg_free>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bfb3:	0f b7 c0             	movzx  eax,ax
c000bfb6:	85 c0                	test   eax,eax
c000bfb8:	74 2e                	je     c000bfe8 <tcp_receive+0x4c8>
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfc1:	85 c0                	test   eax,eax
c000bfc3:	75 23                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfcc:	85 c0                	test   eax,eax
c000bfce:	75 18                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfd0:	83 ec 08             	sub    esp,0x8
c000bfd3:	68 14 04 03 c0       	push   0xc0030414
c000bfd8:	68 a6 fa 02 c0       	push   0xc002faa6
c000bfdd:	e8 ae 3b 01 00       	call   c001fb90 <CPrintf>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfef:	85 c0                	test   eax,eax
c000bff1:	74 69                	je     c000c05c <tcp_receive+0x53c>
c000bff3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bffa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bffd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c000:	83 ec 0c             	sub    esp,0xc
c000c003:	50                   	push   eax
c000c004:	e8 03 4c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c009:	83 c4 10             	add    esp,0x10
c000c00c:	89 c3                	mov    ebx,eax
c000c00e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c012:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c015:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c018:	0f b7 f0             	movzx  esi,ax
c000c01b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c022:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c025:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c029:	0f b7 c0             	movzx  eax,ax
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	50                   	push   eax
c000c030:	e8 b3 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c035:	83 c4 10             	add    esp,0x10
c000c038:	0f b7 c0             	movzx  eax,ax
c000c03b:	83 e0 03             	and    eax,0x3
c000c03e:	0f 95 c0             	setne  al
c000c041:	0f b6 c0             	movzx  eax,al
c000c044:	01 f0                	add    eax,esi
c000c046:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c049:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c04e:	29 c2                	sub    edx,eax
c000c050:	89 d0                	mov    eax,edx
c000c052:	85 c0                	test   eax,eax
c000c054:	0f 8e 7a fe ff ff    	jle    c000bed4 <tcp_receive+0x3b4>
c000c05a:	66 90                	xchg   ax,ax
c000c05c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c060:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c063:	85 c0                	test   eax,eax
c000c065:	75 0d                	jne    c000c074 <tcp_receive+0x554>
c000c067:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c06b:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c071:	eb 0d                	jmp    c000c080 <tcp_receive+0x560>
c000c073:	90                   	nop
c000c074:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c078:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c07e:	66 90                	xchg   ax,ax
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c088:	eb 0e                	jmp    c000c098 <tcp_receive+0x578>
c000c08a:	66 90                	xchg   ax,ax
c000c08c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c090:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c096:	66 90                	xchg   ax,ax
c000c098:	e9 17 01 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000c09d:	8d 76 00             	lea    esi,[esi+0x0]
c000c0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0af:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b8:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0c9:	83 ec 0c             	sub    esp,0xc
c000c0cc:	50                   	push   eax
c000c0cd:	e8 5e ca ff ff       	call   c0008b30 <pbuf_clen>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	0f b6 c0             	movzx  eax,al
c000c0d8:	0f b7 d3             	movzx  edx,bx
c000c0db:	0f b7 c0             	movzx  eax,ax
c000c0de:	39 c2                	cmp    edx,eax
c000c0e0:	73 16                	jae    c000c0f8 <tcp_receive+0x5d8>
c000c0e2:	83 ec 08             	sub    esp,0x8
c000c0e5:	68 ec 03 03 c0       	push   0xc00303ec
c000c0ea:	68 a6 fa 02 c0       	push   0xc002faa6
c000c0ef:	e8 9c 3a 01 00       	call   c001fb90 <CPrintf>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	90                   	nop
c000c0f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0fc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0ff:	0f b7 c0             	movzx  eax,ax
c000c102:	85 c0                	test   eax,eax
c000c104:	74 36                	je     c000c13c <tcp_receive+0x61c>
c000c106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c10d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c111:	0f b7 c0             	movzx  eax,ax
c000c114:	83 ec 0c             	sub    esp,0xc
c000c117:	50                   	push   eax
c000c118:	e8 cb 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	0f b7 c0             	movzx  eax,ax
c000c123:	83 e0 01             	and    eax,0x1
c000c126:	74 14                	je     c000c13c <tcp_receive+0x61c>
c000c128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c12c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c12f:	83 e8 01             	sub    eax,0x1
c000c132:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c136:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c13a:	66 90                	xchg   ax,ax
c000c13c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	50                   	push   eax
c000c147:	e8 e4 c9 ff ff       	call   c0008b30 <pbuf_clen>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	88 c1                	mov    cl,al
c000c151:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c155:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c158:	0f b6 c1             	movzx  eax,cl
c000c15b:	89 d6                	mov    esi,edx
c000c15d:	29 c6                	sub    esi,eax
c000c15f:	89 f0                	mov    eax,esi
c000c161:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c165:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c170:	e8 5f de ff ff       	call   c0009fd4 <tcp_seg_free>
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c17f:	0f b7 c0             	movzx  eax,ax
c000c182:	85 c0                	test   eax,eax
c000c184:	74 2e                	je     c000c1b4 <tcp_receive+0x694>
c000c186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c18d:	85 c0                	test   eax,eax
c000c18f:	75 23                	jne    c000c1b4 <tcp_receive+0x694>
c000c191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c195:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c198:	85 c0                	test   eax,eax
c000c19a:	75 18                	jne    c000c1b4 <tcp_receive+0x694>
c000c19c:	83 ec 08             	sub    esp,0x8
c000c19f:	68 14 04 03 c0       	push   0xc0030414
c000c1a4:	68 a6 fa 02 c0       	push   0xc002faa6
c000c1a9:	e8 e2 39 01 00       	call   c001fb90 <CPrintf>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1bb:	85 c0                	test   eax,eax
c000c1bd:	74 7d                	je     c000c23c <tcp_receive+0x71c>
c000c1bf:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c1c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	50                   	push   eax
c000c1d6:	e8 31 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	89 c6                	mov    esi,eax
c000c1e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1ea:	0f b7 f8             	movzx  edi,ax
c000c1ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1fb:	0f b7 c0             	movzx  eax,ax
c000c1fe:	83 ec 0c             	sub    esp,0xc
c000c201:	50                   	push   eax
c000c202:	e8 e1 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	0f b7 c0             	movzx  eax,ax
c000c20d:	83 e0 03             	and    eax,0x3
c000c210:	0f 95 c0             	setne  al
c000c213:	0f b6 c0             	movzx  eax,al
c000c216:	01 f8                	add    eax,edi
c000c218:	01 f0                	add    eax,esi
c000c21a:	29 c3                	sub    ebx,eax
c000c21c:	89 d8                	mov    eax,ebx
c000c21e:	78 1c                	js     c000c23c <tcp_receive+0x71c>
c000c220:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22a:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c22d:	29 c2                	sub    edx,eax
c000c22f:	89 d0                	mov    eax,edx
c000c231:	85 c0                	test   eax,eax
c000c233:	0f 8e 67 fe ff ff    	jle    c000c0a0 <tcp_receive+0x580>
c000c239:	8d 76 00             	lea    esi,[esi+0x0]
c000c23c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c240:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c243:	85 c0                	test   eax,eax
c000c245:	0f 84 d9 00 00 00    	je     c000c324 <tcp_receive+0x804>
c000c24b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c24f:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c252:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c257:	29 c2                	sub    edx,eax
c000c259:	89 d0                	mov    eax,edx
c000c25b:	0f 89 c3 00 00 00    	jns    c000c324 <tcp_receive+0x804>
c000c261:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c266:	89 c2                	mov    edx,eax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c26f:	89 d7                	mov    edi,edx
c000c271:	29 c7                	sub    edi,eax
c000c273:	89 f8                	mov    eax,edi
c000c275:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c27a:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c27f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c283:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c286:	98                   	cwde   
c000c287:	c1 f8 03             	sar    eax,0x3
c000c28a:	89 d6                	mov    esi,edx
c000c28c:	29 c6                	sub    esi,eax
c000c28e:	89 f0                	mov    eax,esi
c000c290:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c295:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c299:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c29c:	89 c2                	mov    edx,eax
c000c29e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2a3:	01 d0                	add    eax,edx
c000c2a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a9:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c2ad:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c2b2:	85 c0                	test   eax,eax
c000c2b4:	79 0e                	jns    c000c2c4 <tcp_receive+0x7a4>
c000c2b6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2bb:	f7 d8                	neg    eax
c000c2bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2c2:	66 90                	xchg   ax,ax
c000c2c4:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c2c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2cd:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2d1:	98                   	cwde   
c000c2d2:	c1 f8 02             	sar    eax,0x2
c000c2d5:	89 d7                	mov    edi,edx
c000c2d7:	29 c7                	sub    edi,eax
c000c2d9:	89 f8                	mov    eax,edi
c000c2db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2e4:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2e8:	89 c2                	mov    edx,eax
c000c2ea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2ef:	01 d0                	add    eax,edx
c000c2f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2f5:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c2f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2fd:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c300:	98                   	cwde   
c000c301:	c1 f8 03             	sar    eax,0x3
c000c304:	89 c2                	mov    edx,eax
c000c306:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c30a:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c30e:	01 d0                	add    eax,edx
c000c310:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c314:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c318:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c31c:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c323:	90                   	nop
c000c324:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c32a:	0f b7 c0             	movzx  eax,ax
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 84 2f 0e 00 00    	je     c000d164 <tcp_receive+0x1644>
c000c335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c339:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c33c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c341:	29 c2                	sub    edx,eax
c000c343:	89 d0                	mov    eax,edx
c000c345:	83 e8 01             	sub    eax,0x1
c000c348:	0f 88 c6 01 00 00    	js     c000c514 <tcp_receive+0x9f4>
c000c34e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c352:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c355:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c35b:	0f b7 c8             	movzx  ecx,ax
c000c35e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c363:	01 c8                	add    eax,ecx
c000c365:	29 c2                	sub    edx,eax
c000c367:	89 d0                	mov    eax,edx
c000c369:	83 c0 01             	add    eax,0x1
c000c36c:	85 c0                	test   eax,eax
c000c36e:	0f 8f a0 01 00 00    	jg     c000c514 <tcp_receive+0x9f4>
c000c374:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c378:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c37b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c380:	29 c2                	sub    edx,eax
c000c382:	89 d0                	mov    eax,edx
c000c384:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c388:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c38d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c391:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c396:	85 c0                	test   eax,eax
c000c398:	75 16                	jne    c000c3b0 <tcp_receive+0x890>
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 11 06 03 c0       	push   0xc0030611
c000c3a2:	68 a6 fa 02 c0       	push   0xc002faa6
c000c3a7:	e8 e4 37 01 00       	call   c001fb90 <CPrintf>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c3b8:	7e 16                	jle    c000c3d0 <tcp_receive+0x8b0>
c000c3ba:	83 ec 08             	sub    esp,0x8
c000c3bd:	68 21 06 03 c0       	push   0xc0030621
c000c3c2:	68 a6 fa 02 c0       	push   0xc002faa6
c000c3c7:	e8 c4 37 01 00       	call   c001fb90 <CPrintf>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	90                   	nop
c000c3d0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3d5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3d9:	0f b7 c0             	movzx  eax,ax
c000c3dc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3e0:	0f 8e b6 00 00 00    	jle    c000c49c <tcp_receive+0x97c>
c000c3e6:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3ee:	0f b7 c0             	movzx  eax,ax
c000c3f1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3f5:	7e 15                	jle    c000c40c <tcp_receive+0x8ec>
c000c3f7:	83 ec 08             	sub    esp,0x8
c000c3fa:	68 30 06 03 c0       	push   0xc0030630
c000c3ff:	68 a6 fa 02 c0       	push   0xc002faa6
c000c404:	e8 87 37 01 00       	call   c001fb90 <CPrintf>
c000c409:	83 c4 10             	add    esp,0x10
c000c40c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c411:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c414:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c418:	29 d0                	sub    eax,edx
c000c41a:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c41f:	eb 33                	jmp    c000c454 <tcp_receive+0x934>
c000c421:	8d 76 00             	lea    esi,[esi+0x0]
c000c424:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c428:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c42c:	0f b7 c0             	movzx  eax,ax
c000c42f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c433:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c443:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c449:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c44d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c44f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c453:	90                   	nop
c000c454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c458:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c45c:	0f b7 c0             	movzx  eax,ax
c000c45f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c463:	7f bf                	jg     c000c424 <tcp_receive+0x904>
c000c465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c469:	f7 d8                	neg    eax
c000c46b:	98                   	cwde   
c000c46c:	83 ec 08             	sub    esp,0x8
c000c46f:	50                   	push   eax
c000c470:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c474:	e8 47 bd ff ff       	call   c00081c0 <pbuf_header>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	0f b6 c0             	movzx  eax,al
c000c47f:	85 c0                	test   eax,eax
c000c481:	74 51                	je     c000c4d4 <tcp_receive+0x9b4>
c000c483:	83 ec 08             	sub    esp,0x8
c000c486:	68 40 06 03 c0       	push   0xc0030640
c000c48b:	68 a6 fa 02 c0       	push   0xc002faa6
c000c490:	e8 fb 36 01 00       	call   c001fb90 <CPrintf>
c000c495:	83 c4 10             	add    esp,0x10
c000c498:	eb 3a                	jmp    c000c4d4 <tcp_receive+0x9b4>
c000c49a:	66 90                	xchg   ax,ax
c000c49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4a0:	f7 d8                	neg    eax
c000c4a2:	0f bf d0             	movsx  edx,ax
c000c4a5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c4aa:	83 ec 08             	sub    esp,0x8
c000c4ad:	52                   	push   edx
c000c4ae:	50                   	push   eax
c000c4af:	e8 0c bd ff ff       	call   c00081c0 <pbuf_header>
c000c4b4:	83 c4 10             	add    esp,0x10
c000c4b7:	0f b6 c0             	movzx  eax,al
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	74 16                	je     c000c4d4 <tcp_receive+0x9b4>
c000c4be:	83 ec 08             	sub    esp,0x8
c000c4c1:	68 40 06 03 c0       	push   0xc0030640
c000c4c6:	68 a6 fa 02 c0       	push   0xc002faa6
c000c4cb:	e8 c0 36 01 00       	call   c001fb90 <CPrintf>
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	90                   	nop
c000c4d4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c4d9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4df:	89 d1                	mov    ecx,edx
c000c4e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4e5:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c4e8:	89 ce                	mov    esi,ecx
c000c4ea:	29 d6                	sub    esi,edx
c000c4ec:	89 f2                	mov    edx,esi
c000c4ee:	01 d0                	add    eax,edx
c000c4f0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c4f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4fd:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c502:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c507:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c50d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c510:	eb 2a                	jmp    c000c53c <tcp_receive+0xa1c>
c000c512:	66 90                	xchg   ax,ax
c000c514:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c51a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c51e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	79 15                	jns    c000c53c <tcp_receive+0xa1c>
c000c527:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c52b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c52e:	83 c8 02             	or     eax,0x2
c000c531:	88 c2                	mov    dl,al
c000c533:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c537:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c53a:	66 90                	xchg   ax,ax
c000c53c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c542:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c546:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c549:	29 c2                	sub    edx,eax
c000c54b:	89 d0                	mov    eax,edx
c000c54d:	0f 88 fd 0b 00 00    	js     c000d150 <tcp_receive+0x1630>
c000c553:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c559:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c55d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c560:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c564:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c567:	0f b7 c0             	movzx  eax,ax
c000c56a:	01 c8                	add    eax,ecx
c000c56c:	29 c2                	sub    edx,eax
c000c56e:	89 d0                	mov    eax,edx
c000c570:	83 c0 01             	add    eax,0x1
c000c573:	85 c0                	test   eax,eax
c000c575:	0f 8f d5 0b 00 00    	jg     c000d150 <tcp_receive+0x1630>
c000c57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c57f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c582:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c587:	39 c2                	cmp    edx,eax
c000c589:	0f 85 1d 07 00 00    	jne    c000ccac <tcp_receive+0x118c>
c000c58f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c595:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c59a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59e:	0f b7 c0             	movzx  eax,ax
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	50                   	push   eax
c000c5a5:	e8 3e 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	0f b7 c0             	movzx  eax,ax
c000c5b0:	83 e0 03             	and    eax,0x3
c000c5b3:	0f 95 c0             	setne  al
c000c5b6:	0f b6 c0             	movzx  eax,al
c000c5b9:	01 d8                	add    eax,ebx
c000c5bb:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c5c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5c5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c5c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c5ce:	0f b7 d2             	movzx  edx,dx
c000c5d1:	0f b7 c0             	movzx  eax,ax
c000c5d4:	39 c2                	cmp    edx,eax
c000c5d6:	0f 83 2c 01 00 00    	jae    c000c708 <tcp_receive+0xbe8>
c000c5dc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5e5:	0f b7 c0             	movzx  eax,ax
c000c5e8:	83 ec 0c             	sub    esp,0xc
c000c5eb:	50                   	push   eax
c000c5ec:	e8 f7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	83 e0 01             	and    eax,0x1
c000c5fa:	74 44                	je     c000c640 <tcp_receive+0xb20>
c000c5fc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c601:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c605:	80 e4 c0             	and    ah,0xc0
c000c608:	89 c3                	mov    ebx,eax
c000c60a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c60f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c613:	0f b7 c0             	movzx  eax,ax
c000c616:	83 ec 0c             	sub    esp,0xc
c000c619:	50                   	push   eax
c000c61a:	e8 c9 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	0f b7 c0             	movzx  eax,ax
c000c625:	83 e0 3e             	and    eax,0x3e
c000c628:	83 ec 0c             	sub    esp,0xc
c000c62b:	50                   	push   eax
c000c62c:	e8 b7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	09 d8                	or     eax,ebx
c000c636:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c63c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c640:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c644:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c647:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c64d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c652:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c656:	0f b7 c0             	movzx  eax,ax
c000c659:	83 ec 0c             	sub    esp,0xc
c000c65c:	50                   	push   eax
c000c65d:	e8 86 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	0f b7 c0             	movzx  eax,ax
c000c668:	83 e0 02             	and    eax,0x2
c000c66b:	74 0f                	je     c000c67c <tcp_receive+0xb5c>
c000c66d:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c672:	83 e8 01             	sub    eax,0x1
c000c675:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c67b:	90                   	nop
c000c67c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c681:	0f b7 d0             	movzx  edx,ax
c000c684:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	52                   	push   edx
c000c68d:	50                   	push   eax
c000c68e:	e8 99 c2 ff ff       	call   c000892c <pbuf_realloc>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c69c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6a5:	0f b7 c0             	movzx  eax,ax
c000c6a8:	83 ec 0c             	sub    esp,0xc
c000c6ab:	50                   	push   eax
c000c6ac:	e8 37 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6b1:	83 c4 10             	add    esp,0x10
c000c6b4:	0f b7 c0             	movzx  eax,ax
c000c6b7:	83 e0 03             	and    eax,0x3
c000c6ba:	0f 95 c0             	setne  al
c000c6bd:	0f b6 c0             	movzx  eax,al
c000c6c0:	01 d8                	add    eax,ebx
c000c6c2:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c6c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c6ce:	0f b7 d0             	movzx  edx,ax
c000c6d1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c6d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c6d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c6e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6e4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6e7:	0f b7 c0             	movzx  eax,ax
c000c6ea:	01 d0                	add    eax,edx
c000c6ec:	39 c1                	cmp    ecx,eax
c000c6ee:	74 18                	je     c000c708 <tcp_receive+0xbe8>
c000c6f0:	83 ec 08             	sub    esp,0x8
c000c6f3:	68 34 04 03 c0       	push   0xc0030434
c000c6f8:	68 a6 fa 02 c0       	push   0xc002faa6
c000c6fd:	e8 8e 34 01 00       	call   c001fb90 <CPrintf>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	8d 76 00             	lea    esi,[esi+0x0]
c000c708:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c712:	85 c0                	test   eax,eax
c000c714:	0f 84 7e 02 00 00    	je     c000c998 <tcp_receive+0xe78>
c000c71a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c71f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c723:	0f b7 c0             	movzx  eax,ax
c000c726:	83 ec 0c             	sub    esp,0xc
c000c729:	50                   	push   eax
c000c72a:	e8 b9 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	0f b7 c0             	movzx  eax,ax
c000c735:	83 e0 01             	and    eax,0x1
c000c738:	74 4a                	je     c000c784 <tcp_receive+0xc64>
c000c73a:	eb 34                	jmp    c000c770 <tcp_receive+0xc50>
c000c73c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c740:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c74e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c754:	8b 10                	mov    edx,DWORD PTR [eax]
c000c756:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75a:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c760:	83 ec 0c             	sub    esp,0xc
c000c763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c767:	e8 68 d8 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c76c:	83 c4 10             	add    esp,0x10
c000c76f:	90                   	nop
c000c770:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c774:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c77a:	85 c0                	test   eax,eax
c000c77c:	75 be                	jne    c000c73c <tcp_receive+0xc1c>
c000c77e:	e9 15 02 00 00       	jmp    c000c998 <tcp_receive+0xe78>
c000c783:	90                   	nop
c000c784:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c78e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c792:	e9 bd 00 00 00       	jmp    c000c854 <tcp_receive+0xd34>
c000c797:	90                   	nop
c000c798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c79f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7a3:	0f b7 c0             	movzx  eax,ax
c000c7a6:	83 ec 0c             	sub    esp,0xc
c000c7a9:	50                   	push   eax
c000c7aa:	e8 39 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7af:	83 c4 10             	add    esp,0x10
c000c7b2:	0f b7 c0             	movzx  eax,ax
c000c7b5:	83 e0 01             	and    eax,0x1
c000c7b8:	74 76                	je     c000c830 <tcp_receive+0xd10>
c000c7ba:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c3:	0f b7 c0             	movzx  eax,ax
c000c7c6:	83 ec 0c             	sub    esp,0xc
c000c7c9:	50                   	push   eax
c000c7ca:	e8 19 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	0f b7 c0             	movzx  eax,ax
c000c7d5:	83 e0 02             	and    eax,0x2
c000c7d8:	75 56                	jne    c000c830 <tcp_receive+0xd10>
c000c7da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7df:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c7e3:	83 ec 0c             	sub    esp,0xc
c000c7e6:	6a 01                	push   0x1
c000c7e8:	e8 fb 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7ed:	83 c4 10             	add    esp,0x10
c000c7f0:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7f6:	09 d8                	or     eax,ebx
c000c7f8:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7fc:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c802:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c807:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c80b:	0f b7 c0             	movzx  eax,ax
c000c80e:	83 ec 0c             	sub    esp,0xc
c000c811:	50                   	push   eax
c000c812:	e8 d1 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	0f b7 c0             	movzx  eax,ax
c000c81d:	83 e0 03             	and    eax,0x3
c000c820:	0f 95 c0             	setne  al
c000c823:	0f b6 c0             	movzx  eax,al
c000c826:	01 d8                	add    eax,ebx
c000c828:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c82e:	66 90                	xchg   ax,ax
c000c830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c83c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c83e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c842:	83 ec 0c             	sub    esp,0xc
c000c845:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c849:	e8 86 d7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	8d 76 00             	lea    esi,[esi+0x0]
c000c854:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c859:	74 31                	je     c000c88c <tcp_receive+0xd6c>
c000c85b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c861:	0f b7 d0             	movzx  edx,ax
c000c864:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c869:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c86c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c870:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c873:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c876:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c87a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c87d:	0f b7 c0             	movzx  eax,ax
c000c880:	01 d0                	add    eax,edx
c000c882:	29 c1                	sub    ecx,eax
c000c884:	89 c8                	mov    eax,ecx
c000c886:	0f 89 0c ff ff ff    	jns    c000c798 <tcp_receive+0xc78>
c000c88c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c891:	0f 84 f1 00 00 00    	je     c000c988 <tcp_receive+0xe68>
c000c897:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c89d:	0f b7 d0             	movzx  edx,ax
c000c8a0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8a5:	01 c2                	add    edx,eax
c000c8a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8b1:	29 c2                	sub    edx,eax
c000c8b3:	89 d0                	mov    eax,edx
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	0f 8e cb 00 00 00    	jle    c000c988 <tcp_receive+0xe68>
c000c8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8c7:	89 c2                	mov    edx,eax
c000c8c9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ce:	89 d7                	mov    edi,edx
c000c8d0:	29 c7                	sub    edi,eax
c000c8d2:	89 f8                	mov    eax,edi
c000c8d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c8da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8e3:	0f b7 c0             	movzx  eax,ax
c000c8e6:	83 ec 0c             	sub    esp,0xc
c000c8e9:	50                   	push   eax
c000c8ea:	e8 f9 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	0f b7 c0             	movzx  eax,ax
c000c8f5:	83 e0 02             	and    eax,0x2
c000c8f8:	74 0e                	je     c000c908 <tcp_receive+0xde8>
c000c8fa:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8ff:	83 e8 01             	sub    eax,0x1
c000c902:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c908:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c90d:	0f b7 d0             	movzx  edx,ax
c000c910:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c915:	83 ec 08             	sub    esp,0x8
c000c918:	52                   	push   edx
c000c919:	50                   	push   eax
c000c91a:	e8 0d c0 ff ff       	call   c000892c <pbuf_realloc>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c928:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c92d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c931:	0f b7 c0             	movzx  eax,ax
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	50                   	push   eax
c000c938:	e8 ab 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	0f b7 c0             	movzx  eax,ax
c000c943:	83 e0 03             	and    eax,0x3
c000c946:	0f 95 c0             	setne  al
c000c949:	0f b6 c0             	movzx  eax,al
c000c94c:	01 d8                	add    eax,ebx
c000c94e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c954:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c95a:	0f b7 d0             	movzx  edx,ax
c000c95d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c962:	01 c2                	add    edx,eax
c000c964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c968:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c96b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c96e:	39 c2                	cmp    edx,eax
c000c970:	74 16                	je     c000c988 <tcp_receive+0xe68>
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	68 6c 04 03 c0       	push   0xc003046c
c000c97a:	68 a6 fa 02 c0       	push   0xc002faa6
c000c97f:	e8 0c 32 01 00       	call   c001fb90 <CPrintf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	90                   	nop
c000c988:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c98c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c990:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c996:	66 90                	xchg   ax,ax
c000c998:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c99e:	0f b7 d0             	movzx  edx,ax
c000c9a1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9a6:	01 c2                	add    edx,eax
c000c9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9b6:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9bc:	0f b7 d2             	movzx  edx,dx
c000c9bf:	0f b7 c0             	movzx  eax,ax
c000c9c2:	39 c2                	cmp    edx,eax
c000c9c4:	73 16                	jae    c000c9dc <tcp_receive+0xebc>
c000c9c6:	83 ec 08             	sub    esp,0x8
c000c9c9:	68 a8 04 03 c0       	push   0xc00304a8
c000c9ce:	68 a6 fa 02 c0       	push   0xc002faa6
c000c9d3:	e8 b8 31 01 00       	call   c001fb90 <CPrintf>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	90                   	nop
c000c9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9e3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9e9:	89 d6                	mov    esi,edx
c000c9eb:	29 c6                	sub    esi,eax
c000c9ed:	89 f0                	mov    eax,esi
c000c9ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c9f3:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c9f7:	83 ec 0c             	sub    esp,0xc
c000c9fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9fe:	e8 7d d2 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	85 c0                	test   eax,eax
c000ca13:	74 17                	je     c000ca2c <tcp_receive+0xf0c>
c000ca15:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca1a:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000ca1f:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ca29:	8d 76 00             	lea    esi,[esi+0x0]
c000ca2c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca35:	0f b7 c0             	movzx  eax,ax
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 a7 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	0f b7 c0             	movzx  eax,ax
c000ca47:	83 e0 01             	and    eax,0x1
c000ca4a:	0f 84 d8 01 00 00    	je     c000cc28 <tcp_receive+0x1108>
c000ca50:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ca55:	83 c8 20             	or     eax,0x20
c000ca58:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000ca5d:	e9 c6 01 00 00       	jmp    c000cc28 <tcp_receive+0x1108>
c000ca62:	66 90                	xchg   ax,ax
c000ca64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca68:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca76:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca82:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000ca87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca8e:	0f b7 d8             	movzx  ebx,ax
c000ca91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 ec 0c             	sub    esp,0xc
c000caa2:	50                   	push   eax
c000caa3:	e8 40 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caa8:	83 c4 10             	add    esp,0x10
c000caab:	0f b7 c0             	movzx  eax,ax
c000caae:	83 e0 03             	and    eax,0x3
c000cab1:	0f 95 c0             	setne  al
c000cab4:	0f b6 c0             	movzx  eax,al
c000cab7:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cabe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cac1:	01 c2                	add    edx,eax
c000cac3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000caca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cace:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cad1:	0f b7 d8             	movzx  ebx,ax
c000cad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cadb:	0f b7 f0             	movzx  esi,ax
c000cade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cae5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	50                   	push   eax
c000caf0:	e8 f3 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	0f b7 c0             	movzx  eax,ax
c000cafb:	83 e0 03             	and    eax,0x3
c000cafe:	0f 95 c0             	setne  al
c000cb01:	0f b6 c0             	movzx  eax,al
c000cb04:	01 f0                	add    eax,esi
c000cb06:	39 c3                	cmp    ebx,eax
c000cb08:	7d 16                	jge    c000cb20 <tcp_receive+0x1000>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 c8 04 03 c0       	push   0xc00304c8
c000cb12:	68 a6 fa 02 c0       	push   0xc002faa6
c000cb17:	e8 74 30 01 00       	call   c001fb90 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb27:	0f b7 d8             	movzx  ebx,ax
c000cb2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	83 ec 0c             	sub    esp,0xc
c000cb3b:	50                   	push   eax
c000cb3c:	e8 a7 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	0f b7 c0             	movzx  eax,ax
c000cb47:	83 e0 03             	and    eax,0x3
c000cb4a:	0f 95 c0             	setne  al
c000cb4d:	0f b6 c0             	movzx  eax,al
c000cb50:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cb53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cb5a:	29 d0                	sub    eax,edx
c000cb5c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb60:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb6b:	e8 10 d1 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb7d:	0f b7 c0             	movzx  eax,ax
c000cb80:	85 c0                	test   eax,eax
c000cb82:	74 3c                	je     c000cbc0 <tcp_receive+0x10a0>
c000cb84:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb89:	85 c0                	test   eax,eax
c000cb8b:	74 1b                	je     c000cba8 <tcp_receive+0x1088>
c000cb8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb94:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb99:	83 ec 08             	sub    esp,0x8
c000cb9c:	52                   	push   edx
c000cb9d:	50                   	push   eax
c000cb9e:	e8 f1 bf ff ff       	call   c0008b94 <pbuf_cat>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	eb 0c                	jmp    c000cbb4 <tcp_receive+0x1094>
c000cba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbaf:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cbc7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcb:	0f b7 c0             	movzx  eax,ax
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	50                   	push   eax
c000cbd2:	e8 11 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	0f b7 c0             	movzx  eax,ax
c000cbdd:	83 e0 01             	and    eax,0x1
c000cbe0:	74 26                	je     c000cc08 <tcp_receive+0x10e8>
c000cbe2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbe7:	83 c8 20             	or     eax,0x20
c000cbea:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cbf6:	83 f8 04             	cmp    eax,0x4
c000cbf9:	75 0d                	jne    c000cc08 <tcp_receive+0x10e8>
c000cbfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbff:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cc06:	66 90                	xchg   ax,ax
c000cc08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc12:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc18:	83 ec 0c             	sub    esp,0xc
c000cc1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1f:	e8 b0 d3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000cc24:	83 c4 10             	add    esp,0x10
c000cc27:	90                   	nop
c000cc28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc2c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc32:	85 c0                	test   eax,eax
c000cc34:	74 22                	je     c000cc58 <tcp_receive+0x1138>
c000cc36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc3a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc4d:	39 c2                	cmp    edx,eax
c000cc4f:	0f 84 0f fe ff ff    	je     c000ca64 <tcp_receive+0xf44>
c000cc55:	8d 76 00             	lea    esi,[esi+0x0]
c000cc58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc5f:	0f b6 c0             	movzx  eax,al
c000cc62:	83 e0 01             	and    eax,0x1
c000cc65:	74 2d                	je     c000cc94 <tcp_receive+0x1174>
c000cc67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc6e:	83 e0 fe             	and    eax,0xfffffffe
c000cc71:	88 c2                	mov    dl,al
c000cc73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc7e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc81:	83 c8 02             	or     eax,0x2
c000cc84:	88 c2                	mov    dl,al
c000cc86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc8a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc8d:	e9 22 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc98:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc9b:	83 c8 01             	or     eax,0x1
c000cc9e:	88 c2                	mov    dl,al
c000cca0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cca7:	e9 08 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccac:	83 ec 0c             	sub    esp,0xc
c000ccaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ccb3:	e8 c4 2e 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccbf:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccc5:	85 c0                	test   eax,eax
c000ccc7:	75 23                	jne    c000ccec <tcp_receive+0x11cc>
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccd1:	e8 96 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000ccd6:	83 c4 10             	add    esp,0x10
c000ccd9:	89 c2                	mov    edx,eax
c000ccdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccdf:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cce5:	e9 ca 04 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccea:	66 90                	xchg   ax,ax
c000ccec:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ccf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccf8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd02:	e9 21 04 00 00       	jmp    c000d128 <tcp_receive+0x1608>
c000cd07:	90                   	nop
c000cd08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd12:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd17:	39 c2                	cmp    edx,eax
c000cd19:	75 75                	jne    c000cd90 <tcp_receive+0x1270>
c000cd1b:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cd21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd28:	0f b7 d2             	movzx  edx,dx
c000cd2b:	0f b7 c0             	movzx  eax,ax
c000cd2e:	39 c2                	cmp    edx,eax
c000cd30:	0f 86 02 04 00 00    	jbe    c000d138 <tcp_receive+0x1618>
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd3e:	e8 29 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd4f:	0f 84 e7 03 00 00    	je     c000d13c <tcp_receive+0x161c>
c000cd55:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd5a:	74 0c                	je     c000cd68 <tcp_receive+0x1248>
c000cd5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd64:	89 10                	mov    DWORD PTR [eax],edx
c000cd66:	eb 10                	jmp    c000cd78 <tcp_receive+0x1258>
c000cd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd76:	66 90                	xchg   ax,ax
c000cd78:	83 ec 08             	sub    esp,0x8
c000cd7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd83:	e8 2c ec ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	e9 ac 03 00 00       	jmp    c000d13c <tcp_receive+0x161c>
c000cd90:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd95:	75 61                	jne    c000cdf8 <tcp_receive+0x12d8>
c000cd97:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cda1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cda4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cda7:	29 c2                	sub    edx,eax
c000cda9:	89 d0                	mov    eax,edx
c000cdab:	0f 89 27 01 00 00    	jns    c000ced8 <tcp_receive+0x13b8>
c000cdb1:	83 ec 0c             	sub    esp,0xc
c000cdb4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cdb9:	e8 ae d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000cdbe:	83 c4 10             	add    esp,0x10
c000cdc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdc5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdca:	0f 84 70 03 00 00    	je     c000d140 <tcp_receive+0x1620>
c000cdd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd8:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdde:	83 ec 08             	sub    esp,0x8
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cde9:	e8 c6 eb ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	e9 4a 03 00 00       	jmp    c000d140 <tcp_receive+0x1620>
c000cdf6:	66 90                	xchg   ax,ax
c000cdf8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce08:	29 c2                	sub    edx,eax
c000ce0a:	89 d0                	mov    eax,edx
c000ce0c:	83 e8 01             	sub    eax,0x1
c000ce0f:	0f 88 c3 00 00 00    	js     c000ced8 <tcp_receive+0x13b8>
c000ce15:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce25:	29 c2                	sub    edx,eax
c000ce27:	89 d0                	mov    eax,edx
c000ce29:	83 c0 01             	add    eax,0x1
c000ce2c:	85 c0                	test   eax,eax
c000ce2e:	0f 8f a4 00 00 00    	jg     c000ced8 <tcp_receive+0x13b8>
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce3c:	e8 2b d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ce4d:	0f 84 f1 02 00 00    	je     c000d144 <tcp_receive+0x1624>
c000ce53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce64:	0f b7 c0             	movzx  eax,ax
c000ce67:	01 c2                	add    edx,eax
c000ce69:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce6e:	29 c2                	sub    edx,eax
c000ce70:	89 d0                	mov    eax,edx
c000ce72:	85 c0                	test   eax,eax
c000ce74:	7e 3e                	jle    c000ceb4 <tcp_receive+0x1394>
c000ce76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce7b:	89 c2                	mov    edx,eax
c000ce7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce87:	89 d7                	mov    edi,edx
c000ce89:	29 c7                	sub    edi,eax
c000ce8b:	89 f8                	mov    eax,edi
c000ce8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ce91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ce95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce9c:	0f b7 d0             	movzx  edx,ax
c000ce9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cea3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cea6:	83 ec 08             	sub    esp,0x8
c000cea9:	52                   	push   edx
c000ceaa:	50                   	push   eax
c000ceab:	e8 7c ba ff ff       	call   c000892c <pbuf_realloc>
c000ceb0:	83 c4 10             	add    esp,0x10
c000ceb3:	90                   	nop
c000ceb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cebc:	89 10                	mov    DWORD PTR [eax],edx
c000cebe:	83 ec 08             	sub    esp,0x8
c000cec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cec9:	e8 e6 ea ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	e9 6e 02 00 00       	jmp    c000d144 <tcp_receive+0x1624>
c000ced6:	66 90                	xchg   ax,ax
c000ced8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cedc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cede:	85 c0                	test   eax,eax
c000cee0:	0f 85 2e 02 00 00    	jne    c000d114 <tcp_receive+0x15f4>
c000cee6:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ceec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cef6:	29 c2                	sub    edx,eax
c000cef8:	89 d0                	mov    eax,edx
c000cefa:	85 c0                	test   eax,eax
c000cefc:	0f 8e 12 02 00 00    	jle    c000d114 <tcp_receive+0x15f4>
c000cf02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf09:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf0d:	0f b7 c0             	movzx  eax,ax
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	50                   	push   eax
c000cf14:	e8 cf 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf19:	83 c4 10             	add    esp,0x10
c000cf1c:	0f b7 c0             	movzx  eax,ax
c000cf1f:	83 e0 01             	and    eax,0x1
c000cf22:	0f 85 20 02 00 00    	jne    c000d148 <tcp_receive+0x1628>
c000cf28:	83 ec 0c             	sub    esp,0xc
c000cf2b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf30:	e8 37 d1 ff ff       	call   c000a06c <tcp_seg_copy>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	89 c2                	mov    edx,eax
c000cf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3e:	89 10                	mov    DWORD PTR [eax],edx
c000cf40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf44:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf46:	85 c0                	test   eax,eax
c000cf48:	0f 84 fe 01 00 00    	je     c000d14c <tcp_receive+0x162c>
c000cf4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf55:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cf58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf5f:	0f b7 c0             	movzx  eax,ax
c000cf62:	01 c2                	add    edx,eax
c000cf64:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf69:	29 c2                	sub    edx,eax
c000cf6b:	89 d0                	mov    eax,edx
c000cf6d:	85 c0                	test   eax,eax
c000cf6f:	7e 3f                	jle    c000cfb0 <tcp_receive+0x1490>
c000cf71:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf76:	89 c2                	mov    edx,eax
c000cf78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf82:	89 d6                	mov    esi,edx
c000cf84:	29 c6                	sub    esi,eax
c000cf86:	89 f0                	mov    eax,esi
c000cf88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf8c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cf90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf97:	0f b7 d0             	movzx  edx,ax
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	e8 81 b9 ff ff       	call   c000892c <pbuf_realloc>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	66 90                	xchg   ax,ax
c000cfb0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cfb6:	0f b7 d0             	movzx  edx,ax
c000cfb9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfbe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfc5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cfc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfcc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfcf:	0f b7 c0             	movzx  eax,ax
c000cfd2:	01 d0                	add    eax,edx
c000cfd4:	39 c1                	cmp    ecx,eax
c000cfd6:	0f 86 70 01 00 00    	jbe    c000d14c <tcp_receive+0x162c>
c000cfdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfe0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfe5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfe9:	0f b7 c0             	movzx  eax,ax
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	50                   	push   eax
c000cff0:	e8 f3 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	0f b7 c0             	movzx  eax,ax
c000cffb:	83 e0 01             	and    eax,0x1
c000cffe:	74 50                	je     c000d050 <tcp_receive+0x1530>
c000d000:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d004:	8b 00                	mov    eax,DWORD PTR [eax]
c000d006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d009:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d00d:	80 e4 c0             	and    ah,0xc0
c000d010:	89 c3                	mov    ebx,eax
c000d012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d016:	8b 00                	mov    eax,DWORD PTR [eax]
c000d018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d01f:	0f b7 c0             	movzx  eax,ax
c000d022:	83 ec 0c             	sub    esp,0xc
c000d025:	50                   	push   eax
c000d026:	e8 bd 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	0f b7 c0             	movzx  eax,ax
c000d031:	83 e0 3e             	and    eax,0x3e
c000d034:	83 ec 0c             	sub    esp,0xc
c000d037:	50                   	push   eax
c000d038:	e8 ab 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	09 d8                	or     eax,ebx
c000d042:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d046:	8b 12                	mov    edx,DWORD PTR [edx]
c000d048:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d04b:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d04f:	90                   	nop
c000d050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d054:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d057:	89 c2                	mov    edx,eax
c000d059:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d05d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d060:	01 d0                	add    eax,edx
c000d062:	89 c3                	mov    ebx,eax
c000d064:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d069:	89 c1                	mov    ecx,eax
c000d06b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d06f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d071:	89 d8                	mov    eax,ebx
c000d073:	29 c8                	sub    eax,ecx
c000d075:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d07d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d07f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d082:	0f b7 d0             	movzx  edx,ax
c000d085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d089:	8b 00                	mov    eax,DWORD PTR [eax]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	83 ec 08             	sub    esp,0x8
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 94 b8 ff ff       	call   c000892c <pbuf_realloc>
c000d098:	83 c4 10             	add    esp,0x10
c000d09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a1:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d0a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0b1:	0f b7 c0             	movzx  eax,ax
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	50                   	push   eax
c000d0b8:	e8 2b 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0bd:	83 c4 10             	add    esp,0x10
c000d0c0:	0f b7 c0             	movzx  eax,ax
c000d0c3:	83 e0 03             	and    eax,0x3
c000d0c6:	0f 95 c0             	setne  al
c000d0c9:	0f b6 c0             	movzx  eax,al
c000d0cc:	01 d8                	add    eax,ebx
c000d0ce:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d0d4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d0da:	0f b7 d0             	movzx  edx,ax
c000d0dd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d0e2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d0ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0f3:	0f b7 c0             	movzx  eax,ax
c000d0f6:	01 d0                	add    eax,edx
c000d0f8:	39 c1                	cmp    ecx,eax
c000d0fa:	74 50                	je     c000d14c <tcp_receive+0x162c>
c000d0fc:	83 ec 08             	sub    esp,0x8
c000d0ff:	68 34 04 03 c0       	push   0xc0030434
c000d104:	68 a6 fa 02 c0       	push   0xc002faa6
c000d109:	e8 82 2a 01 00       	call   c001fb90 <CPrintf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	eb 39                	jmp    c000d14c <tcp_receive+0x162c>
c000d113:	90                   	nop
c000d114:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d11c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d120:	8b 00                	mov    eax,DWORD PTR [eax]
c000d122:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d126:	66 90                	xchg   ax,ax
c000d128:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d12d:	0f 85 d5 fb ff ff    	jne    c000cd08 <tcp_receive+0x11e8>
c000d133:	eb 7f                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d135:	8d 76 00             	lea    esi,[esi+0x0]
c000d138:	90                   	nop
c000d139:	eb 79                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13b:	90                   	nop
c000d13c:	90                   	nop
c000d13d:	eb 75                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13f:	90                   	nop
c000d140:	90                   	nop
c000d141:	eb 71                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d143:	90                   	nop
c000d144:	90                   	nop
c000d145:	eb 6d                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d147:	90                   	nop
c000d148:	90                   	nop
c000d149:	eb 69                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14b:	90                   	nop
c000d14c:	90                   	nop
c000d14d:	eb 65                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14f:	90                   	nop
c000d150:	83 ec 0c             	sub    esp,0xc
c000d153:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d157:	e8 20 2a 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	eb 53                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d161:	8d 76 00             	lea    esi,[esi+0x0]
c000d164:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d16a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d16e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d171:	29 c2                	sub    edx,eax
c000d173:	89 d0                	mov    eax,edx
c000d175:	78 25                	js     c000d19c <tcp_receive+0x167c>
c000d177:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d17d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d181:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d188:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d18b:	0f b7 c0             	movzx  eax,ax
c000d18e:	01 c8                	add    eax,ecx
c000d190:	29 c2                	sub    edx,eax
c000d192:	89 d0                	mov    eax,edx
c000d194:	83 c0 01             	add    eax,0x1
c000d197:	85 c0                	test   eax,eax
c000d199:	7e 19                	jle    c000d1b4 <tcp_receive+0x1694>
c000d19b:	90                   	nop
c000d19c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d1a3:	83 c8 02             	or     eax,0x2
c000d1a6:	88 c2                	mov    dl,al
c000d1a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d1af:	eb 03                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1b4:	90                   	nop
c000d1b5:	83 c4 30             	add    esp,0x30
c000d1b8:	5b                   	pop    ebx
c000d1b9:	5e                   	pop    esi
c000d1ba:	5f                   	pop    edi
c000d1bb:	c3                   	ret    

c000d1bc <tcp_parseopt>:
c000d1bc:	83 ec 1c             	sub    esp,0x1c
c000d1bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1c4:	83 c0 14             	add    eax,0x14
c000d1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1cb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1d0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d4:	0f b7 c0             	movzx  eax,ax
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	50                   	push   eax
c000d1db:	e8 08 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	0f b7 c0             	movzx  eax,ax
c000d1e6:	c1 e8 0c             	shr    eax,0xc
c000d1e9:	0f b7 c0             	movzx  eax,ax
c000d1ec:	83 f8 05             	cmp    eax,0x5
c000d1ef:	0f 86 6f 01 00 00    	jbe    c000d364 <tcp_parseopt+0x1a8>
c000d1f5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1fa:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1fe:	0f b7 c0             	movzx  eax,ax
c000d201:	83 ec 0c             	sub    esp,0xc
c000d204:	50                   	push   eax
c000d205:	e8 de 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d20a:	83 c4 10             	add    esp,0x10
c000d20d:	0f b7 c0             	movzx  eax,ax
c000d210:	c1 e8 0c             	shr    eax,0xc
c000d213:	83 e8 05             	sub    eax,0x5
c000d216:	c1 e0 02             	shl    eax,0x2
c000d219:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d21e:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d225:	e9 1e 01 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d22a:	66 90                	xchg   ax,ax
c000d22c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d235:	01 d0                	add    eax,edx
c000d237:	8a 00                	mov    al,BYTE PTR [eax]
c000d239:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d23d:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d242:	83 f8 01             	cmp    eax,0x1
c000d245:	74 15                	je     c000d25c <tcp_parseopt+0xa0>
c000d247:	83 f8 02             	cmp    eax,0x2
c000d24a:	74 24                	je     c000d270 <tcp_parseopt+0xb4>
c000d24c:	85 c0                	test   eax,eax
c000d24e:	0f 85 bc 00 00 00    	jne    c000d310 <tcp_parseopt+0x154>
c000d254:	e9 0b 01 00 00       	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d261:	83 c0 01             	add    eax,0x1
c000d264:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d269:	e9 da 00 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d26e:	66 90                	xchg   ax,ax
c000d270:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d275:	8d 50 01             	lea    edx,[eax+0x1]
c000d278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d27c:	01 d0                	add    eax,edx
c000d27e:	8a 00                	mov    al,BYTE PTR [eax]
c000d280:	0f b6 c0             	movzx  eax,al
c000d283:	83 f8 04             	cmp    eax,0x4
c000d286:	0f 85 d0 00 00 00    	jne    c000d35c <tcp_parseopt+0x1a0>
c000d28c:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d291:	8d 50 03             	lea    edx,[eax+0x3]
c000d294:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d299:	39 c2                	cmp    edx,eax
c000d29b:	0f 8d bb 00 00 00    	jge    c000d35c <tcp_parseopt+0x1a0>
c000d2a1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2a6:	8d 50 02             	lea    edx,[eax+0x2]
c000d2a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ad:	01 d0                	add    eax,edx
c000d2af:	8a 00                	mov    al,BYTE PTR [eax]
c000d2b1:	0f b6 c0             	movzx  eax,al
c000d2b4:	c1 e0 08             	shl    eax,0x8
c000d2b7:	89 c2                	mov    edx,eax
c000d2b9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2be:	8d 48 03             	lea    ecx,[eax+0x3]
c000d2c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2c5:	01 c8                	add    eax,ecx
c000d2c7:	8a 00                	mov    al,BYTE PTR [eax]
c000d2c9:	0f b6 c0             	movzx  eax,al
c000d2cc:	09 d0                	or     eax,edx
c000d2ce:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d2d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2d8:	3d 18 02 00 00       	cmp    eax,0x218
c000d2dd:	77 11                	ja     c000d2f0 <tcp_parseopt+0x134>
c000d2df:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2e4:	85 c0                	test   eax,eax
c000d2e6:	74 08                	je     c000d2f0 <tcp_parseopt+0x134>
c000d2e8:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d2ed:	eb 09                	jmp    c000d2f8 <tcp_parseopt+0x13c>
c000d2ef:	90                   	nop
c000d2f0:	b8 18 02 00 00       	mov    eax,0x218
c000d2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d2fc:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d300:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d305:	83 c0 04             	add    eax,0x4
c000d308:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d30d:	eb 39                	jmp    c000d348 <tcp_parseopt+0x18c>
c000d30f:	90                   	nop
c000d310:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d315:	8d 50 01             	lea    edx,[eax+0x1]
c000d318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d31c:	01 d0                	add    eax,edx
c000d31e:	8a 00                	mov    al,BYTE PTR [eax]
c000d320:	0f b6 c0             	movzx  eax,al
c000d323:	85 c0                	test   eax,eax
c000d325:	74 39                	je     c000d360 <tcp_parseopt+0x1a4>
c000d327:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d32c:	8d 50 01             	lea    edx,[eax+0x1]
c000d32f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d333:	01 d0                	add    eax,edx
c000d335:	8a 00                	mov    al,BYTE PTR [eax]
c000d337:	0f b6 c0             	movzx  eax,al
c000d33a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d33f:	01 d0                	add    eax,edx
c000d341:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d346:	66 90                	xchg   ax,ax
c000d348:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d34d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d352:	39 c2                	cmp    edx,eax
c000d354:	0f 82 d2 fe ff ff    	jb     c000d22c <tcp_parseopt+0x70>
c000d35a:	eb 08                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35c:	90                   	nop
c000d35d:	eb 05                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35f:	90                   	nop
c000d360:	90                   	nop
c000d361:	8d 76 00             	lea    esi,[esi+0x0]
c000d364:	83 c4 1c             	add    esp,0x1c
c000d367:	c3                   	ret    

c000d368 <tcp_listen_input>:
c000d368:	53                   	push   ebx
c000d369:	83 ec 18             	sub    esp,0x18
c000d36c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d371:	0f b6 c0             	movzx  eax,al
c000d374:	83 e0 10             	and    eax,0x10
c000d377:	74 4f                	je     c000d3c8 <tcp_listen_input+0x60>
c000d379:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d37e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d381:	0f b7 c8             	movzx  ecx,ax
c000d384:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d389:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d38d:	0f b7 d0             	movzx  edx,ax
c000d390:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d396:	0f b7 d8             	movzx  ebx,ax
c000d399:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d39e:	01 c3                	add    ebx,eax
c000d3a0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d3a5:	83 c0 01             	add    eax,0x1
c000d3a8:	83 ec 08             	sub    esp,0x8
c000d3ab:	51                   	push   ecx
c000d3ac:	52                   	push   edx
c000d3ad:	68 90 68 03 c0       	push   0xc0036890
c000d3b2:	68 98 68 03 c0       	push   0xc0036898
c000d3b7:	53                   	push   ebx
c000d3b8:	50                   	push   eax
c000d3b9:	e8 5a 2f 00 00       	call   c0010318 <tcp_rst>
c000d3be:	83 c4 20             	add    esp,0x20
c000d3c1:	e9 a2 01 00 00       	jmp    c000d568 <tcp_listen_input+0x200>
c000d3c6:	66 90                	xchg   ax,ax
c000d3c8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d3cd:	0f b6 c0             	movzx  eax,al
c000d3d0:	83 e0 02             	and    eax,0x2
c000d3d3:	0f 84 8f 01 00 00    	je     c000d568 <tcp_listen_input+0x200>
c000d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d3e0:	0f b6 c0             	movzx  eax,al
c000d3e3:	83 ec 0c             	sub    esp,0xc
c000d3e6:	50                   	push   eax
c000d3e7:	e8 14 e0 ff ff       	call   c000b400 <tcp_alloc>
c000d3ec:	83 c4 10             	add    esp,0x10
c000d3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d3f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d3f8:	75 16                	jne    c000d410 <tcp_listen_input+0xa8>
c000d3fa:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d400:	83 c0 01             	add    eax,0x1
c000d403:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d409:	b0 ff                	mov    al,0xff
c000d40b:	e9 5c 01 00 00       	jmp    c000d56c <tcp_listen_input+0x204>
c000d410:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41a:	89 10                	mov    DWORD PTR [eax],edx
c000d41c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d420:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d427:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d42b:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d435:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d438:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d43d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d444:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d44c:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d453:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d458:	8d 50 01             	lea    edx,[eax+0x1]
c000d45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d45f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d466:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d46d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d470:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d475:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d479:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d47d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d485:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d48c:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d490:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d495:	8d 50 ff             	lea    edx,[eax-0x1]
c000d498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d49c:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d4a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d4ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d4b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bf:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d4c2:	83 e0 8c             	and    eax,0xffffff8c
c000d4c5:	88 c2                	mov    dl,al
c000d4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cb:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d4ce:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4df:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d4e4:	e8 33 36 00 00       	call   c0010b1c <tcp_timer_needed>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4f0:	e8 c7 fc ff ff       	call   c000d1bc <tcp_parseopt>
c000d4f5:	83 c4 10             	add    esp,0x10
c000d4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4fc:	8d 50 04             	lea    edx,[eax+0x4]
c000d4ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d506:	0f b7 c0             	movzx  eax,ax
c000d509:	83 ec 08             	sub    esp,0x8
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	e8 ad e0 ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d513:	83 c4 10             	add    esp,0x10
c000d516:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d51a:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d51e:	83 ec 08             	sub    esp,0x8
c000d521:	6a 12                	push   0x12
c000d523:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d527:	e8 c4 22 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000d52c:	83 c4 10             	add    esp,0x10
c000d52f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d533:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d538:	85 c0                	test   eax,eax
c000d53a:	74 18                	je     c000d554 <tcp_listen_input+0x1ec>
c000d53c:	83 ec 08             	sub    esp,0x8
c000d53f:	6a 00                	push   0x0
c000d541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d545:	e8 9e db ff ff       	call   c000b0e8 <tcp_abandon>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d551:	eb 19                	jmp    c000d56c <tcp_listen_input+0x204>
c000d553:	90                   	nop
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d55b:	e8 2c 29 00 00       	call   c000fe8c <tcp_output>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	eb 07                	jmp    c000d56c <tcp_listen_input+0x204>
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	b0 00                	mov    al,0x0
c000d56a:	66 90                	xchg   ax,ax
c000d56c:	83 c4 18             	add    esp,0x18
c000d56f:	5b                   	pop    ebx
c000d570:	c3                   	ret    
c000d571:	8d 76 00             	lea    esi,[esi+0x0]

c000d574 <tcp_process>:
c000d574:	53                   	push   ebx
c000d575:	83 ec 18             	sub    esp,0x18
c000d578:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d57d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d582:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d587:	0f b6 c0             	movzx  eax,al
c000d58a:	83 e0 04             	and    eax,0x4
c000d58d:	0f 84 bd 00 00 00    	je     c000d650 <tcp_process+0xdc>
c000d593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d59a:	83 f8 02             	cmp    eax,0x2
c000d59d:	75 19                	jne    c000d5b8 <tcp_process+0x44>
c000d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a3:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d5a6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d5ab:	39 c2                	cmp    edx,eax
c000d5ad:	75 45                	jne    c000d5f4 <tcp_process+0x80>
c000d5af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5b4:	eb 3e                	jmp    c000d5f4 <tcp_process+0x80>
c000d5b6:	66 90                	xchg   ax,ax
c000d5b8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5c5:	29 c2                	sub    edx,eax
c000d5c7:	89 d0                	mov    eax,edx
c000d5c9:	78 29                	js     c000d5f4 <tcp_process+0x80>
c000d5cb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d5df:	0f b7 c0             	movzx  eax,ax
c000d5e2:	01 c8                	add    eax,ecx
c000d5e4:	29 c2                	sub    edx,eax
c000d5e6:	89 d0                	mov    eax,edx
c000d5e8:	85 c0                	test   eax,eax
c000d5ea:	7f 08                	jg     c000d5f4 <tcp_process+0x80>
c000d5ec:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d5f9:	85 c0                	test   eax,eax
c000d5fb:	74 4b                	je     c000d648 <tcp_process+0xd4>
c000d5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d604:	85 c0                	test   eax,eax
c000d606:	75 18                	jne    c000d620 <tcp_process+0xac>
c000d608:	83 ec 08             	sub    esp,0x8
c000d60b:	68 f0 04 03 c0       	push   0xc00304f0
c000d610:	68 a6 fa 02 c0       	push   0xc002faa6
c000d615:	e8 76 25 01 00       	call   c001fb90 <CPrintf>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	8d 76 00             	lea    esi,[esi+0x0]
c000d620:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d625:	83 c8 08             	or     eax,0x8
c000d628:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d631:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d634:	83 e0 fe             	and    eax,0xfffffffe
c000d637:	88 c2                	mov    dl,al
c000d639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d640:	b0 f5                	mov    al,0xf5
c000d642:	e9 bd 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d647:	90                   	nop
c000d648:	b0 00                	mov    al,0x0
c000d64a:	e9 b5 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d64f:	90                   	nop
c000d650:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d655:	0f b6 c0             	movzx  eax,al
c000d658:	83 e0 02             	and    eax,0x2
c000d65b:	74 33                	je     c000d690 <tcp_process+0x11c>
c000d65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d661:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d664:	83 f8 02             	cmp    eax,0x2
c000d667:	74 27                	je     c000d690 <tcp_process+0x11c>
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d670:	83 f8 03             	cmp    eax,0x3
c000d673:	74 1b                	je     c000d690 <tcp_process+0x11c>
c000d675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d679:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d67c:	83 c8 02             	or     eax,0x2
c000d67f:	88 c2                	mov    dl,al
c000d681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d685:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d688:	b0 00                	mov    al,0x0
c000d68a:	e9 75 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d68f:	90                   	nop
c000d690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d694:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d697:	0f b6 c0             	movzx  eax,al
c000d69a:	83 e0 10             	and    eax,0x10
c000d69d:	75 0d                	jne    c000d6ac <tcp_process+0x138>
c000d69f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b0:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d6b7:	83 ec 0c             	sub    esp,0xc
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 f9 fa ff ff       	call   c000d1bc <tcp_parseopt>
c000d6c3:	83 c4 10             	add    esp,0x10
c000d6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6cd:	83 f8 09             	cmp    eax,0x9
c000d6d0:	0f 87 0a 08 00 00    	ja     c000dee0 <tcp_process+0x96c>
c000d6d6:	8b 04 85 98 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf968]
c000d6dd:	ff e0                	jmp    eax
c000d6df:	90                   	nop
c000d6e0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6e5:	0f b6 c0             	movzx  eax,al
c000d6e8:	83 e0 10             	and    eax,0x10
c000d6eb:	0f 84 ff 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d6f1:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6f6:	0f b6 c0             	movzx  eax,al
c000d6f9:	83 e0 02             	and    eax,0x2
c000d6fc:	0f 84 ee 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d706:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d709:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70f:	83 ec 0c             	sub    esp,0xc
c000d712:	50                   	push   eax
c000d713:	e8 f4 34 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	8d 50 01             	lea    edx,[eax+0x1]
c000d71e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d723:	39 c2                	cmp    edx,eax
c000d725:	0f 85 c5 01 00 00    	jne    c000d8f0 <tcp_process+0x37c>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d733:	83 c0 01             	add    eax,0x1
c000d736:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d73a:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d73e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d743:	8d 50 01             	lea    edx,[eax+0x1]
c000d746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d751:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d758:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d75b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d765:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d768:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d76d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d771:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d775:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d779:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d77e:	8d 50 ff             	lea    edx,[eax-0x1]
c000d781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d785:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d797:	8d 50 04             	lea    edx,[eax+0x4]
c000d79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7a1:	0f b7 c0             	movzx  eax,ax
c000d7a4:	83 ec 08             	sub    esp,0x8
c000d7a7:	52                   	push   edx
c000d7a8:	50                   	push   eax
c000d7a9:	e8 12 de ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d7ae:	83 c4 10             	add    esp,0x10
c000d7b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7b5:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7c0:	89 c2                	mov    edx,eax
c000d7c2:	c1 e2 02             	shl    edx,0x2
c000d7c5:	01 d0                	add    eax,edx
c000d7c7:	d1 e0                	shl    eax,1
c000d7c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7cd:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d7d9:	0f b7 c0             	movzx  eax,ax
c000d7dc:	83 f8 01             	cmp    eax,0x1
c000d7df:	75 0b                	jne    c000d7ec <tcp_process+0x278>
c000d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7e8:	d1 e0                	shl    eax,1
c000d7ea:	eb 08                	jmp    c000d7f4 <tcp_process+0x280>
c000d7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7f3:	90                   	nop
c000d7f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7f8:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d800:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d803:	0f b7 c0             	movzx  eax,ax
c000d806:	85 c0                	test   eax,eax
c000d808:	75 16                	jne    c000d820 <tcp_process+0x2ac>
c000d80a:	83 ec 08             	sub    esp,0x8
c000d80d:	68 53 06 03 c0       	push   0xc0030653
c000d812:	68 a6 fa 02 c0       	push   0xc002faa6
c000d817:	e8 74 23 01 00       	call   c001fb90 <CPrintf>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	90                   	nop
c000d820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d824:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d827:	83 e8 01             	sub    eax,0x1
c000d82a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d82e:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d836:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d83d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d841:	8b 10                	mov    edx,DWORD PTR [eax]
c000d843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d847:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d851:	85 c0                	test   eax,eax
c000d853:	75 0f                	jne    c000d864 <tcp_process+0x2f0>
c000d855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d859:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d85f:	eb 17                	jmp    c000d878 <tcp_process+0x304>
c000d861:	8d 76 00             	lea    esi,[esi+0x0]
c000d864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d868:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d872:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d876:	66 90                	xchg   ax,ax
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d87f:	e8 50 c7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88b:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d891:	85 c0                	test   eax,eax
c000d893:	74 27                	je     c000d8bc <tcp_process+0x348>
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d89f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8a3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d8a6:	83 ec 04             	sub    esp,0x4
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8af:	52                   	push   edx
c000d8b0:	ff d0                	call   eax
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d8b9:	eb 09                	jmp    c000d8c4 <tcp_process+0x350>
c000d8bb:	90                   	nop
c000d8bc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d8c9:	83 f8 f6             	cmp    eax,0xfffffff6
c000d8cc:	75 0a                	jne    c000d8d8 <tcp_process+0x364>
c000d8ce:	b0 f6                	mov    al,0xf6
c000d8d0:	e9 2f 06 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8dc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d8df:	83 c8 02             	or     eax,0x2
c000d8e2:	88 c2                	mov    dl,al
c000d8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d8eb:	e9 f4 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d8f0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8f5:	0f b6 c0             	movzx  eax,al
c000d8f8:	83 e0 10             	and    eax,0x10
c000d8fb:	0f 84 e3 05 00 00    	je     c000dee4 <tcp_process+0x970>
c000d901:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d906:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d909:	0f b7 c8             	movzx  ecx,ax
c000d90c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d911:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d915:	0f b7 d0             	movzx  edx,ax
c000d918:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d91e:	0f b7 d8             	movzx  ebx,ax
c000d921:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d926:	01 c3                	add    ebx,eax
c000d928:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d92d:	83 ec 08             	sub    esp,0x8
c000d930:	51                   	push   ecx
c000d931:	52                   	push   edx
c000d932:	68 90 68 03 c0       	push   0xc0036890
c000d937:	68 98 68 03 c0       	push   0xc0036898
c000d93c:	53                   	push   ebx
c000d93d:	50                   	push   eax
c000d93e:	e8 d5 29 00 00       	call   c0010318 <tcp_rst>
c000d943:	83 c4 20             	add    esp,0x20
c000d946:	e9 99 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d94b:	90                   	nop
c000d94c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d951:	0f b6 c0             	movzx  eax,al
c000d954:	83 e0 10             	and    eax,0x10
c000d957:	0f 84 a7 01 00 00    	je     c000db04 <tcp_process+0x590>
c000d95d:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d967:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d96a:	29 c2                	sub    edx,eax
c000d96c:	89 d0                	mov    eax,edx
c000d96e:	83 e8 01             	sub    eax,0x1
c000d971:	0f 88 41 01 00 00    	js     c000dab8 <tcp_process+0x544>
c000d977:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d981:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d984:	29 c2                	sub    edx,eax
c000d986:	89 d0                	mov    eax,edx
c000d988:	85 c0                	test   eax,eax
c000d98a:	0f 8f 28 01 00 00    	jg     c000dab8 <tcp_process+0x544>
c000d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d994:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9a2:	85 c0                	test   eax,eax
c000d9a4:	75 16                	jne    c000d9bc <tcp_process+0x448>
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	68 69 06 03 c0       	push   0xc0030669
c000d9ae:	68 a6 fa 02 c0       	push   0xc002faa6
c000d9b3:	e8 d8 21 01 00       	call   c001fb90 <CPrintf>
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	90                   	nop
c000d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9c3:	85 c0                	test   eax,eax
c000d9c5:	74 25                	je     c000d9ec <tcp_process+0x478>
c000d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9d2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d9d5:	83 ec 04             	sub    esp,0x4
c000d9d8:	6a 00                	push   0x0
c000d9da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9de:	52                   	push   edx
c000d9df:	ff d0                	call   eax
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d9e8:	eb 0a                	jmp    c000d9f4 <tcp_process+0x480>
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9f4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9f9:	85 c0                	test   eax,eax
c000d9fb:	74 23                	je     c000da20 <tcp_process+0x4ac>
c000d9fd:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da02:	83 f8 f6             	cmp    eax,0xfffffff6
c000da05:	74 11                	je     c000da18 <tcp_process+0x4a4>
c000da07:	83 ec 0c             	sub    esp,0xc
c000da0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da0e:	e8 69 d8 ff ff       	call   c000b27c <tcp_abort>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	66 90                	xchg   ax,ax
c000da18:	b0 f6                	mov    al,0xf6
c000da1a:	e9 e5 04 00 00       	jmp    c000df04 <tcp_process+0x990>
c000da1f:	90                   	nop
c000da20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da24:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000da28:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da34:	e8 e7 e0 ff ff       	call   c000bb20 <tcp_receive>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da43:	0f b7 c0             	movzx  eax,ax
c000da46:	85 c0                	test   eax,eax
c000da48:	74 12                	je     c000da5c <tcp_process+0x4e8>
c000da4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da51:	83 e8 01             	sub    eax,0x1
c000da54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da58:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000da5c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000da61:	83 f8 01             	cmp    eax,0x1
c000da64:	75 0e                	jne    c000da74 <tcp_process+0x500>
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da6d:	d1 e0                	shl    eax,1
c000da6f:	eb 0b                	jmp    c000da7c <tcp_process+0x508>
c000da71:	8d 76 00             	lea    esi,[esi+0x0]
c000da74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da7b:	90                   	nop
c000da7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da80:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da84:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da89:	0f b6 c0             	movzx  eax,al
c000da8c:	83 e0 20             	and    eax,0x20
c000da8f:	0f 84 ab 00 00 00    	je     c000db40 <tcp_process+0x5cc>
c000da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da99:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da9c:	83 c8 02             	or     eax,0x2
c000da9f:	88 c2                	mov    dl,al
c000daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daac:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dab3:	e9 88 00 00 00       	jmp    c000db40 <tcp_process+0x5cc>
c000dab8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dabd:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dac0:	0f b7 c8             	movzx  ecx,ax
c000dac3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dac8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dacc:	0f b7 d0             	movzx  edx,ax
c000dacf:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dad5:	0f b7 d8             	movzx  ebx,ax
c000dad8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dadd:	01 c3                	add    ebx,eax
c000dadf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dae4:	83 ec 08             	sub    esp,0x8
c000dae7:	51                   	push   ecx
c000dae8:	52                   	push   edx
c000dae9:	68 90 68 03 c0       	push   0xc0036890
c000daee:	68 98 68 03 c0       	push   0xc0036898
c000daf3:	53                   	push   ebx
c000daf4:	50                   	push   eax
c000daf5:	e8 1e 28 00 00       	call   c0010318 <tcp_rst>
c000dafa:	83 c4 20             	add    esp,0x20
c000dafd:	e9 e6 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db02:	66 90                	xchg   ax,ax
c000db04:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db09:	0f b6 c0             	movzx  eax,al
c000db0c:	83 e0 02             	and    eax,0x2
c000db0f:	0f 84 d3 03 00 00    	je     c000dee8 <tcp_process+0x974>
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db1c:	8d 50 ff             	lea    edx,[eax-0x1]
c000db1f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db24:	39 c2                	cmp    edx,eax
c000db26:	0f 85 bc 03 00 00    	jne    c000dee8 <tcp_process+0x974>
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db33:	e8 e4 29 00 00       	call   c001051c <tcp_rexmit>
c000db38:	83 c4 10             	add    esp,0x10
c000db3b:	e9 a8 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db40:	90                   	nop
c000db41:	e9 a2 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db46:	66 90                	xchg   ax,ax
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db4f:	e8 cc df ff ff       	call   c000bb20 <tcp_receive>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db5c:	0f b6 c0             	movzx  eax,al
c000db5f:	83 e0 20             	and    eax,0x20
c000db62:	0f 84 84 03 00 00    	je     c000deec <tcp_process+0x978>
c000db68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db6f:	83 c8 02             	or     eax,0x2
c000db72:	88 c2                	mov    dl,al
c000db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db78:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7f:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db86:	e9 61 03 00 00       	jmp    c000deec <tcp_process+0x978>
c000db8b:	90                   	nop
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db93:	e8 88 df ff ff       	call   c000bb20 <tcp_receive>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dba0:	0f b6 c0             	movzx  eax,al
c000dba3:	83 e0 20             	and    eax,0x20
c000dba6:	0f 84 08 01 00 00    	je     c000dcb4 <tcp_process+0x740>
c000dbac:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dbb1:	0f b6 c0             	movzx  eax,al
c000dbb4:	83 e0 10             	and    eax,0x10
c000dbb7:	0f 84 d3 00 00 00    	je     c000dc90 <tcp_process+0x71c>
c000dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dbc4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dbc9:	39 c2                	cmp    edx,eax
c000dbcb:	0f 85 bf 00 00 00    	jne    c000dc90 <tcp_process+0x71c>
c000dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbd8:	83 c8 02             	or     eax,0x2
c000dbdb:	88 c2                	mov    dl,al
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbeb:	e8 48 c5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbf8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbfc:	75 12                	jne    c000dc10 <tcp_process+0x69c>
c000dbfe:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc06:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc0b:	eb 4b                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc15:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc1a:	eb 30                	jmp    c000dc4c <tcp_process+0x6d8>
c000dc1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc24:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc28:	75 12                	jne    c000dc3c <tcp_process+0x6c8>
c000dc2a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc33:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dc36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc39:	eb 1d                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc3b:	90                   	nop
c000dc3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc44:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc49:	8d 76 00             	lea    esi,[esi+0x0]
c000dc4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc51:	85 c0                	test   eax,eax
c000dc53:	75 c7                	jne    c000dc1c <tcp_process+0x6a8>
c000dc55:	8d 76 00             	lea    esi,[esi+0x0]
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc6e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dc74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc78:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dc84:	e8 93 2e 00 00       	call   c0010b1c <tcp_timer_needed>
c000dc89:	e9 62 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dc8e:	66 90                	xchg   ax,ax
c000dc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc94:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc97:	83 c8 02             	or     eax,0x2
c000dc9a:	88 c2                	mov    dl,al
c000dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca7:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dcae:	e9 3d 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dcb3:	90                   	nop
c000dcb4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dcb9:	0f b6 c0             	movzx  eax,al
c000dcbc:	83 e0 10             	and    eax,0x10
c000dcbf:	0f 84 2b 02 00 00    	je     c000def0 <tcp_process+0x97c>
c000dcc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dccc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcd1:	39 c2                	cmp    edx,eax
c000dcd3:	0f 85 17 02 00 00    	jne    c000def0 <tcp_process+0x97c>
c000dcd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcdd:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dce4:	e9 07 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dce9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcf3:	e8 28 de ff ff       	call   c000bb20 <tcp_receive>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd00:	0f b6 c0             	movzx  eax,al
c000dd03:	83 e0 20             	and    eax,0x20
c000dd06:	0f 84 e8 01 00 00    	je     c000def4 <tcp_process+0x980>
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd13:	83 c8 02             	or     eax,0x2
c000dd16:	88 c2                	mov    dl,al
c000dd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd26:	e8 0d c4 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd33:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd37:	75 0f                	jne    c000dd48 <tcp_process+0x7d4>
c000dd39:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd41:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd46:	eb 48                	jmp    c000dd90 <tcp_process+0x81c>
c000dd48:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd4d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd52:	eb 30                	jmp    c000dd84 <tcp_process+0x810>
c000dd54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd5c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd60:	75 12                	jne    c000dd74 <tcp_process+0x800>
c000dd62:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd6b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd71:	eb 1d                	jmp    c000dd90 <tcp_process+0x81c>
c000dd73:	90                   	nop
c000dd74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd7c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd81:	8d 76 00             	lea    esi,[esi+0x0]
c000dd84:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd89:	85 c0                	test   eax,eax
c000dd8b:	75 c7                	jne    c000dd54 <tcp_process+0x7e0>
c000dd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd94:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd9f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dda6:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ddac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb7:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ddbc:	e8 5b 2d 00 00       	call   c0010b1c <tcp_timer_needed>
c000ddc1:	e9 2e 01 00 00       	jmp    c000def4 <tcp_process+0x980>
c000ddc6:	66 90                	xchg   ax,ax
c000ddc8:	83 ec 0c             	sub    esp,0xc
c000ddcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcf:	e8 4c dd ff ff       	call   c000bb20 <tcp_receive>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dddc:	0f b6 c0             	movzx  eax,al
c000dddf:	83 e0 10             	and    eax,0x10
c000dde2:	0f 84 10 01 00 00    	je     c000def8 <tcp_process+0x984>
c000dde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddec:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddef:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddf4:	39 c2                	cmp    edx,eax
c000ddf6:	0f 85 fc 00 00 00    	jne    c000def8 <tcp_process+0x984>
c000ddfc:	83 ec 0c             	sub    esp,0xc
c000ddff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de03:	e8 30 c3 ff ff       	call   c000a138 <tcp_pcb_purge>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de10:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de14:	75 12                	jne    c000de28 <tcp_process+0x8b4>
c000de16:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de1e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de23:	eb 4b                	jmp    c000de70 <tcp_process+0x8fc>
c000de25:	8d 76 00             	lea    esi,[esi+0x0]
c000de28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de2d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de32:	eb 30                	jmp    c000de64 <tcp_process+0x8f0>
c000de34:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de3c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de40:	75 12                	jne    c000de54 <tcp_process+0x8e0>
c000de42:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de4b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de4e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de51:	eb 1d                	jmp    c000de70 <tcp_process+0x8fc>
c000de53:	90                   	nop
c000de54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de5c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de61:	8d 76 00             	lea    esi,[esi+0x0]
c000de64:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de69:	85 c0                	test   eax,eax
c000de6b:	75 c7                	jne    c000de34 <tcp_process+0x8c0>
c000de6d:	8d 76 00             	lea    esi,[esi+0x0]
c000de70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de74:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de86:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de90:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de97:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de9c:	e8 7b 2c 00 00       	call   c0010b1c <tcp_timer_needed>
c000dea1:	eb 55                	jmp    c000def8 <tcp_process+0x984>
c000dea3:	90                   	nop
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000deab:	e8 70 dc ff ff       	call   c000bb20 <tcp_receive>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000deb8:	0f b6 c0             	movzx  eax,al
c000debb:	83 e0 10             	and    eax,0x10
c000debe:	74 3c                	je     c000defc <tcp_process+0x988>
c000dec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dec7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000decc:	39 c2                	cmp    edx,eax
c000dece:	75 2c                	jne    c000defc <tcp_process+0x988>
c000ded0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ded5:	83 c8 10             	or     eax,0x10
c000ded8:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000dedd:	eb 1d                	jmp    c000defc <tcp_process+0x988>
c000dedf:	90                   	nop
c000dee0:	90                   	nop
c000dee1:	eb 1d                	jmp    c000df00 <tcp_process+0x98c>
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	eb 19                	jmp    c000df00 <tcp_process+0x98c>
c000dee7:	90                   	nop
c000dee8:	90                   	nop
c000dee9:	eb 15                	jmp    c000df00 <tcp_process+0x98c>
c000deeb:	90                   	nop
c000deec:	90                   	nop
c000deed:	eb 11                	jmp    c000df00 <tcp_process+0x98c>
c000deef:	90                   	nop
c000def0:	90                   	nop
c000def1:	eb 0d                	jmp    c000df00 <tcp_process+0x98c>
c000def3:	90                   	nop
c000def4:	90                   	nop
c000def5:	eb 09                	jmp    c000df00 <tcp_process+0x98c>
c000def7:	90                   	nop
c000def8:	90                   	nop
c000def9:	eb 05                	jmp    c000df00 <tcp_process+0x98c>
c000defb:	90                   	nop
c000defc:	90                   	nop
c000defd:	8d 76 00             	lea    esi,[esi+0x0]
c000df00:	b0 00                	mov    al,0x0
c000df02:	66 90                	xchg   ax,ax
c000df04:	83 c4 18             	add    esp,0x18
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	8d 76 00             	lea    esi,[esi+0x0]

c000df0c <tcp_input>:
c000df0c:	53                   	push   ebx
c000df0d:	83 ec 18             	sub    esp,0x18
c000df10:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000df16:	83 c0 01             	add    eax,0x1
c000df19:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000df1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df26:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000df2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2f:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000df32:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df37:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df3a:	0f b7 c0             	movzx  eax,ax
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	50                   	push   eax
c000df41:	e8 a2 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	0f b7 c0             	movzx  eax,ax
c000df4c:	c1 e8 08             	shr    eax,0x8
c000df4f:	0f b7 c0             	movzx  eax,ax
c000df52:	83 e0 0f             	and    eax,0xf
c000df55:	c1 e0 02             	shl    eax,0x2
c000df58:	01 d8                	add    eax,ebx
c000df5a:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000df5f:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df64:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df67:	0f b7 c0             	movzx  eax,ax
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	50                   	push   eax
c000df6e:	e8 75 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	0f b7 c0             	movzx  eax,ax
c000df79:	c1 e8 08             	shr    eax,0x8
c000df7c:	83 e0 0f             	and    eax,0xf
c000df7f:	c1 e0 02             	shl    eax,0x2
c000df82:	f7 d8                	neg    eax
c000df84:	98                   	cwde   
c000df85:	83 ec 08             	sub    esp,0x8
c000df88:	50                   	push   eax
c000df89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df8d:	e8 2e a2 ff ff       	call   c00081c0 <pbuf_header>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	0f b6 c0             	movzx  eax,al
c000df98:	85 c0                	test   eax,eax
c000df9a:	75 10                	jne    c000dfac <tcp_input+0xa0>
c000df9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dfa3:	0f b7 c0             	movzx  eax,ax
c000dfa6:	83 f8 13             	cmp    eax,0x13
c000dfa9:	77 35                	ja     c000dfe0 <tcp_input+0xd4>
c000dfab:	90                   	nop
c000dfac:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000dfb2:	83 c0 01             	add    eax,0x1
c000dfb5:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000dfbb:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfc1:	83 c0 01             	add    eax,0x1
c000dfc4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfca:	83 ec 0c             	sub    esp,0xc
c000dfcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd1:	e8 86 a3 ff ff       	call   c000835c <pbuf_free>
c000dfd6:	83 c4 10             	add    esp,0x10
c000dfd9:	e9 fa 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000dfde:	66 90                	xchg   ax,ax
c000dfe0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfe5:	83 ec 08             	sub    esp,0x8
c000dfe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfec:	50                   	push   eax
c000dfed:	e8 5e 5e 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c000dff2:	83 c4 10             	add    esp,0x10
c000dff5:	0f b6 c0             	movzx  eax,al
c000dff8:	85 c0                	test   eax,eax
c000dffa:	75 14                	jne    c000e010 <tcp_input+0x104>
c000dffc:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e001:	25 f0 00 00 00       	and    eax,0xf0
c000e006:	3d e0 00 00 00       	cmp    eax,0xe0
c000e00b:	75 37                	jne    c000e044 <tcp_input+0x138>
c000e00d:	8d 76 00             	lea    esi,[esi+0x0]
c000e010:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e016:	83 c0 01             	add    eax,0x1
c000e019:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e01f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e025:	83 c0 01             	add    eax,0x1
c000e028:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e035:	e8 22 a3 ff ff       	call   c000835c <pbuf_free>
c000e03a:	83 c4 10             	add    esp,0x10
c000e03d:	e9 96 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e042:	66 90                	xchg   ax,ax
c000e044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e04b:	0f b7 c0             	movzx  eax,ax
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	50                   	push   eax
c000e052:	6a 06                	push   0x6
c000e054:	68 98 68 03 c0       	push   0xc0036898
c000e059:	68 90 68 03 c0       	push   0xc0036890
c000e05e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e062:	e8 11 51 00 00       	call   c0013178 <inet_chksum_pseudo>
c000e067:	83 c4 20             	add    esp,0x20
c000e06a:	0f b7 c0             	movzx  eax,ax
c000e06d:	85 c0                	test   eax,eax
c000e06f:	74 33                	je     c000e0a4 <tcp_input+0x198>
c000e071:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e077:	83 c0 01             	add    eax,0x1
c000e07a:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e080:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e086:	83 c0 01             	add    eax,0x1
c000e089:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 c1 a2 ff ff       	call   c000835c <pbuf_free>
c000e09b:	83 c4 10             	add    esp,0x10
c000e09e:	e9 35 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e0a3:	90                   	nop
c000e0a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0a9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e0ad:	0f b7 c0             	movzx  eax,ax
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	50                   	push   eax
c000e0b4:	e8 2f 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	0f b7 c0             	movzx  eax,ax
c000e0bf:	c1 e8 0c             	shr    eax,0xc
c000e0c2:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e0c6:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e0cb:	ba 00 00 00 00       	mov    edx,0x0
c000e0d0:	89 d1                	mov    ecx,edx
c000e0d2:	29 c1                	sub    ecx,eax
c000e0d4:	89 c8                	mov    eax,ecx
c000e0d6:	c1 e0 02             	shl    eax,0x2
c000e0d9:	98                   	cwde   
c000e0da:	83 ec 08             	sub    esp,0x8
c000e0dd:	50                   	push   eax
c000e0de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e2:	e8 d9 a0 ff ff       	call   c00081c0 <pbuf_header>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	0f b6 c0             	movzx  eax,al
c000e0ed:	85 c0                	test   eax,eax
c000e0ef:	74 33                	je     c000e124 <tcp_input+0x218>
c000e0f1:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e0f7:	83 c0 01             	add    eax,0x1
c000e0fa:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e100:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e106:	83 c0 01             	add    eax,0x1
c000e109:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e116:	e8 41 a2 ff ff       	call   c000835c <pbuf_free>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	e9 b5 08 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e123:	90                   	nop
c000e124:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e129:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e12c:	0f b7 c0             	movzx  eax,ax
c000e12f:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e135:	83 ec 0c             	sub    esp,0xc
c000e138:	50                   	push   eax
c000e139:	e8 aa 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e13e:	83 c4 10             	add    esp,0x10
c000e141:	66 89 03             	mov    WORD PTR [ebx],ax
c000e144:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e149:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e14d:	0f b7 c0             	movzx  eax,ax
c000e150:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	50                   	push   eax
c000e15a:	e8 89 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e166:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e16e:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	50                   	push   eax
c000e178:	e8 8f 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e183:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e186:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e18b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e190:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e193:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 6a 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e1a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e1ab:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e1b0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1b5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e1b9:	0f b7 c0             	movzx  eax,ax
c000e1bc:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1c2:	83 ec 0c             	sub    esp,0xc
c000e1c5:	50                   	push   eax
c000e1c6:	e8 1d 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e1d2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1d7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e1db:	0f b7 c0             	movzx  eax,ax
c000e1de:	83 ec 0c             	sub    esp,0xc
c000e1e1:	50                   	push   eax
c000e1e2:	e8 01 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1e7:	83 c4 10             	add    esp,0x10
c000e1ea:	83 e0 3f             	and    eax,0x3f
c000e1ed:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e1f9:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e1fe:	0f b6 c0             	movzx  eax,al
c000e201:	83 e0 03             	and    eax,0x3
c000e204:	0f 95 c0             	setne  al
c000e207:	0f b6 c0             	movzx  eax,al
c000e20a:	01 d0                	add    eax,edx
c000e20c:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e212:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e21a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e21f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e223:	e9 50 01 00 00       	jmp    c000e378 <tcp_input+0x46c>
c000e228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e22f:	85 c0                	test   eax,eax
c000e231:	75 15                	jne    c000e248 <tcp_input+0x33c>
c000e233:	83 ec 08             	sub    esp,0x8
c000e236:	68 10 05 03 c0       	push   0xc0030510
c000e23b:	68 a6 fa 02 c0       	push   0xc002faa6
c000e240:	e8 4b 19 01 00       	call   c001fb90 <CPrintf>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e24c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e24f:	83 f8 0a             	cmp    eax,0xa
c000e252:	75 18                	jne    c000e26c <tcp_input+0x360>
c000e254:	83 ec 08             	sub    esp,0x8
c000e257:	68 38 05 03 c0       	push   0xc0030538
c000e25c:	68 a6 fa 02 c0       	push   0xc002faa6
c000e261:	e8 2a 19 01 00       	call   c001fb90 <CPrintf>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	8d 76 00             	lea    esi,[esi+0x0]
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e273:	83 f8 01             	cmp    eax,0x1
c000e276:	75 18                	jne    c000e290 <tcp_input+0x384>
c000e278:	83 ec 08             	sub    esp,0x8
c000e27b:	68 64 05 03 c0       	push   0xc0030564
c000e280:	68 a6 fa 02 c0       	push   0xc002faa6
c000e285:	e8 06 19 01 00       	call   c001fb90 <CPrintf>
c000e28a:	83 c4 10             	add    esp,0x10
c000e28d:	8d 76 00             	lea    esi,[esi+0x0]
c000e290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e294:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e298:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e29d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2a0:	0f b7 d2             	movzx  edx,dx
c000e2a3:	0f b7 c0             	movzx  eax,ax
c000e2a6:	39 c2                	cmp    edx,eax
c000e2a8:	0f 85 b6 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e2b5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2ba:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2be:	0f b7 d2             	movzx  edx,dx
c000e2c1:	0f b7 c0             	movzx  eax,ax
c000e2c4:	39 c2                	cmp    edx,eax
c000e2c6:	0f 85 98 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e2d3:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e2d8:	39 c2                	cmp    edx,eax
c000e2da:	0f 85 84 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2e6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e2eb:	39 c2                	cmp    edx,eax
c000e2ed:	75 75                	jne    c000e364 <tcp_input+0x458>
c000e2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2f6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2fa:	75 18                	jne    c000e314 <tcp_input+0x408>
c000e2fc:	83 ec 08             	sub    esp,0x8
c000e2ff:	68 8c 05 03 c0       	push   0xc003058c
c000e304:	68 a6 fa 02 c0       	push   0xc002faa6
c000e309:	e8 82 18 01 00       	call   c001fb90 <CPrintf>
c000e30e:	83 c4 10             	add    esp,0x10
c000e311:	8d 76 00             	lea    esi,[esi+0x0]
c000e314:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e319:	74 25                	je     c000e340 <tcp_input+0x434>
c000e31b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e326:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e329:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e333:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e33a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e33f:	90                   	nop
c000e340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e347:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e34b:	75 3b                	jne    c000e388 <tcp_input+0x47c>
c000e34d:	83 ec 08             	sub    esp,0x8
c000e350:	68 b8 05 03 c0       	push   0xc00305b8
c000e355:	68 a6 fa 02 c0       	push   0xc002faa6
c000e35a:	e8 31 18 01 00       	call   c001fb90 <CPrintf>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	eb 24                	jmp    c000e388 <tcp_input+0x47c>
c000e364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e368:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e377:	90                   	nop
c000e378:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e37d:	0f 85 a5 fe ff ff    	jne    c000e228 <tcp_input+0x31c>
c000e383:	eb 07                	jmp    c000e38c <tcp_input+0x480>
c000e385:	8d 76 00             	lea    esi,[esi+0x0]
c000e388:	90                   	nop
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e391:	0f 85 89 01 00 00    	jne    c000e520 <tcp_input+0x614>
c000e397:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e39c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3a0:	e9 ab 00 00 00       	jmp    c000e450 <tcp_input+0x544>
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3af:	83 f8 0a             	cmp    eax,0xa
c000e3b2:	74 18                	je     c000e3cc <tcp_input+0x4c0>
c000e3b4:	83 ec 08             	sub    esp,0x8
c000e3b7:	68 e4 05 03 c0       	push   0xc00305e4
c000e3bc:	68 a6 fa 02 c0       	push   0xc002faa6
c000e3c1:	e8 ca 17 01 00       	call   c001fb90 <CPrintf>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d0:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e3d4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e3dc:	0f b7 d2             	movzx  edx,dx
c000e3df:	0f b7 c0             	movzx  eax,ax
c000e3e2:	39 c2                	cmp    edx,eax
c000e3e4:	75 5e                	jne    c000e444 <tcp_input+0x538>
c000e3e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3ed:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3f2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3f6:	0f b7 d2             	movzx  edx,dx
c000e3f9:	0f b7 c0             	movzx  eax,ax
c000e3fc:	39 c2                	cmp    edx,eax
c000e3fe:	75 44                	jne    c000e444 <tcp_input+0x538>
c000e400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e407:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e40c:	39 c2                	cmp    edx,eax
c000e40e:	75 34                	jne    c000e444 <tcp_input+0x538>
c000e410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e414:	8b 10                	mov    edx,DWORD PTR [eax]
c000e416:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e41b:	39 c2                	cmp    edx,eax
c000e41d:	75 25                	jne    c000e444 <tcp_input+0x538>
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e426:	e8 81 d4 ff ff       	call   c000b8ac <tcp_timewait_input>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	83 ec 0c             	sub    esp,0xc
c000e431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e435:	e8 22 9f ff ff       	call   c000835c <pbuf_free>
c000e43a:	83 c4 10             	add    esp,0x10
c000e43d:	e9 96 05 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e442:	66 90                	xchg   ax,ax
c000e444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e448:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e44b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e44f:	90                   	nop
c000e450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e455:	0f 85 4d ff ff ff    	jne    c000e3a8 <tcp_input+0x49c>
c000e45b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e463:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e46c:	eb 52                	jmp    c000e4c0 <tcp_input+0x5b4>
c000e46e:	66 90                	xchg   ax,ax
c000e470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e474:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e477:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e47c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e480:	0f b7 d2             	movzx  edx,dx
c000e483:	0f b7 c0             	movzx  eax,ax
c000e486:	39 c2                	cmp    edx,eax
c000e488:	75 22                	jne    c000e4ac <tcp_input+0x5a0>
c000e48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e490:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e495:	39 c2                	cmp    edx,eax
c000e497:	74 2f                	je     c000e4c8 <tcp_input+0x5bc>
c000e499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49d:	85 c0                	test   eax,eax
c000e49f:	74 27                	je     c000e4c8 <tcp_input+0x5bc>
c000e4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4a7:	85 c0                	test   eax,eax
c000e4a9:	74 1d                	je     c000e4c8 <tcp_input+0x5bc>
c000e4ab:	90                   	nop
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4bf:	90                   	nop
c000e4c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4c5:	75 a9                	jne    c000e470 <tcp_input+0x564>
c000e4c7:	90                   	nop
c000e4c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4cd:	74 51                	je     c000e520 <tcp_input+0x614>
c000e4cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4d4:	74 26                	je     c000e4fc <tcp_input+0x5f0>
c000e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4e4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4f5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e4fa:	66 90                	xchg   ax,ax
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e503:	e8 60 ee ff ff       	call   c000d368 <tcp_listen_input>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e512:	e8 45 9e ff ff       	call   c000835c <pbuf_free>
c000e517:	83 c4 10             	add    esp,0x10
c000e51a:	e9 b9 04 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e51f:	90                   	nop
c000e520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e525:	0f 84 19 04 00 00    	je     c000e944 <tcp_input+0xa38>
c000e52b:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e539:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e53c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e546:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e54b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e550:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e555:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e55f:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e570:	85 c0                	test   eax,eax
c000e572:	0f 84 b4 00 00 00    	je     c000e62c <tcp_input+0x720>
c000e578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e582:	85 c0                	test   eax,eax
c000e584:	74 2e                	je     c000e5b4 <tcp_input+0x6a8>
c000e586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e58a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e590:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e594:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e59e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5a1:	6a 00                	push   0x0
c000e5a3:	51                   	push   ecx
c000e5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5a8:	52                   	push   edx
c000e5a9:	ff d0                	call   eax
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5b2:	eb 20                	jmp    c000e5d4 <tcp_input+0x6c8>
c000e5b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e5be:	6a 00                	push   0x0
c000e5c0:	50                   	push   eax
c000e5c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5c5:	6a 00                	push   0x0
c000e5c7:	e8 b8 c8 ff ff       	call   c000ae84 <tcp_recv_null>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5d3:	90                   	nop
c000e5d4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5d9:	85 c0                	test   eax,eax
c000e5db:	75 13                	jne    c000e5f0 <tcp_input+0x6e4>
c000e5dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e1:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e5eb:	eb 3f                	jmp    c000e62c <tcp_input+0x720>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5f5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5f8:	74 0e                	je     c000e608 <tcp_input+0x6fc>
c000e5fa:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e600:	0f b7 c0             	movzx  eax,ax
c000e603:	85 c0                	test   eax,eax
c000e605:	74 25                	je     c000e62c <tcp_input+0x720>
c000e607:	90                   	nop
c000e608:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e60e:	83 c0 01             	add    eax,0x1
c000e611:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e61e:	e8 39 9d ff ff       	call   c000835c <pbuf_free>
c000e623:	83 c4 10             	add    esp,0x10
c000e626:	e9 ad 03 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e62b:	90                   	nop
c000e62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e630:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e635:	83 ec 0c             	sub    esp,0xc
c000e638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e63c:	e8 33 ef ff ff       	call   c000d574 <tcp_process>
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e648:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e64d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e650:	0f 84 9a 02 00 00    	je     c000e8f0 <tcp_input+0x9e4>
c000e656:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e65b:	0f b6 c0             	movzx  eax,al
c000e65e:	83 e0 08             	and    eax,0x8
c000e661:	74 59                	je     c000e6bc <tcp_input+0x7b0>
c000e663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e667:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e66d:	85 c0                	test   eax,eax
c000e66f:	74 1f                	je     c000e690 <tcp_input+0x784>
c000e671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e675:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e67b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e67f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e682:	83 ec 08             	sub    esp,0x8
c000e685:	6a f5                	push   0xfffffff5
c000e687:	52                   	push   edx
c000e688:	ff d0                	call   eax
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	8d 76 00             	lea    esi,[esi+0x0]
c000e690:	83 ec 08             	sub    esp,0x8
c000e693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e697:	68 70 68 03 c0       	push   0xc0036870
c000e69c:	e8 ff c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	83 ec 08             	sub    esp,0x8
c000e6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6ab:	6a 02                	push   0x2
c000e6ad:	e8 ee 93 ff ff       	call   c0007aa0 <memp_free>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	e9 46 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6ba:	66 90                	xchg   ax,ax
c000e6bc:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e6c1:	0f b6 c0             	movzx  eax,al
c000e6c4:	83 e0 10             	and    eax,0x10
c000e6c7:	74 2b                	je     c000e6f4 <tcp_input+0x7e8>
c000e6c9:	83 ec 08             	sub    esp,0x8
c000e6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6d0:	68 70 68 03 c0       	push   0xc0036870
c000e6d5:	e8 c6 c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6da:	83 c4 10             	add    esp,0x10
c000e6dd:	83 ec 08             	sub    esp,0x8
c000e6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6e4:	6a 02                	push   0x2
c000e6e6:	e8 b5 93 ff ff       	call   c0007aa0 <memp_free>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	e9 0d 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6f3:	90                   	nop
c000e6f4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6fd:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e700:	0f b7 c0             	movzx  eax,ax
c000e703:	85 c0                	test   eax,eax
c000e705:	74 55                	je     c000e75c <tcp_input+0x850>
c000e707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e70b:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e711:	85 c0                	test   eax,eax
c000e713:	74 2f                	je     c000e744 <tcp_input+0x838>
c000e715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e719:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e71f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e723:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e726:	0f b7 c8             	movzx  ecx,ax
c000e729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e730:	83 ec 04             	sub    esp,0x4
c000e733:	51                   	push   ecx
c000e734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e738:	50                   	push   eax
c000e739:	ff d2                	call   edx
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e742:	eb 08                	jmp    c000e74c <tcp_input+0x840>
c000e744:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e749:	8d 76 00             	lea    esi,[esi+0x0]
c000e74c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e751:	83 f8 f6             	cmp    eax,0xfffffff6
c000e754:	0f 84 9a 01 00 00    	je     c000e8f4 <tcp_input+0x9e8>
c000e75a:	66 90                	xchg   ax,ax
c000e75c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e761:	85 c0                	test   eax,eax
c000e763:	0f 84 f3 00 00 00    	je     c000e85c <tcp_input+0x950>
c000e769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e76d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e773:	85 c0                	test   eax,eax
c000e775:	74 15                	je     c000e78c <tcp_input+0x880>
c000e777:	83 ec 08             	sub    esp,0x8
c000e77a:	68 7d 06 03 c0       	push   0xc003067d
c000e77f:	68 a6 fa 02 c0       	push   0xc002faa6
c000e784:	e8 07 14 01 00       	call   c001fb90 <CPrintf>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e790:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e793:	0f b6 c0             	movzx  eax,al
c000e796:	83 e0 10             	and    eax,0x10
c000e799:	74 25                	je     c000e7c0 <tcp_input+0x8b4>
c000e79b:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	50                   	push   eax
c000e7a4:	e8 b3 9b ff ff       	call   c000835c <pbuf_free>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7b3:	e8 c4 ca ff ff       	call   c000b27c <tcp_abort>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	e9 40 01 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e7c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e7c5:	0f b6 c0             	movzx  eax,al
c000e7c8:	83 e0 08             	and    eax,0x8
c000e7cb:	74 13                	je     c000e7e0 <tcp_input+0x8d4>
c000e7cd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7d2:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e7d5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7da:	83 ca 01             	or     edx,0x1
c000e7dd:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e4:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7ea:	85 c0                	test   eax,eax
c000e7ec:	74 2a                	je     c000e818 <tcp_input+0x90c>
c000e7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f2:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7f8:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e802:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e805:	6a 00                	push   0x0
c000e807:	51                   	push   ecx
c000e808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e80c:	52                   	push   edx
c000e80d:	ff d0                	call   eax
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e816:	eb 1c                	jmp    c000e834 <tcp_input+0x928>
c000e818:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e81d:	6a 00                	push   0x0
c000e81f:	50                   	push   eax
c000e820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e824:	6a 00                	push   0x0
c000e826:	e8 59 c6 ff ff       	call   c000ae84 <tcp_recv_null>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e832:	66 90                	xchg   ax,ax
c000e834:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e839:	83 f8 f6             	cmp    eax,0xfffffff6
c000e83c:	0f 84 b6 00 00 00    	je     c000e8f8 <tcp_input+0x9ec>
c000e842:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e847:	85 c0                	test   eax,eax
c000e849:	74 11                	je     c000e85c <tcp_input+0x950>
c000e84b:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e855:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e85b:	90                   	nop
c000e85c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e861:	0f b6 c0             	movzx  eax,al
c000e864:	83 e0 20             	and    eax,0x20
c000e867:	74 6b                	je     c000e8d4 <tcp_input+0x9c8>
c000e869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e870:	0f b7 c0             	movzx  eax,ax
c000e873:	3d 60 08 00 00       	cmp    eax,0x860
c000e878:	74 12                	je     c000e88c <tcp_input+0x980>
c000e87a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e881:	83 c0 01             	add    eax,0x1
c000e884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e888:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e88c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e890:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e896:	85 c0                	test   eax,eax
c000e898:	74 26                	je     c000e8c0 <tcp_input+0x9b4>
c000e89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e89e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a8:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e8ab:	6a 00                	push   0x0
c000e8ad:	6a 00                	push   0x0
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	52                   	push   edx
c000e8b4:	ff d0                	call   eax
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8bd:	eb 09                	jmp    c000e8c8 <tcp_input+0x9bc>
c000e8bf:	90                   	nop
c000e8c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8cd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8d0:	74 2a                	je     c000e8fc <tcp_input+0x9f0>
c000e8d2:	66 90                	xchg   ax,ax
c000e8d4:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8e5:	e8 a2 15 00 00       	call   c000fe8c <tcp_output>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	eb 11                	jmp    c000e900 <tcp_input+0x9f4>
c000e8ef:	90                   	nop
c000e8f0:	90                   	nop
c000e8f1:	eb 0d                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f3:	90                   	nop
c000e8f4:	90                   	nop
c000e8f5:	eb 09                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f7:	90                   	nop
c000e8f8:	90                   	nop
c000e8f9:	eb 05                	jmp    c000e900 <tcp_input+0x9f4>
c000e8fb:	90                   	nop
c000e8fc:	90                   	nop
c000e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e900:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e90a:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e914:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e919:	85 c0                	test   eax,eax
c000e91b:	0f 84 b7 00 00 00    	je     c000e9d8 <tcp_input+0xacc>
c000e921:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e926:	83 ec 0c             	sub    esp,0xc
c000e929:	50                   	push   eax
c000e92a:	e8 2d 9a ff ff       	call   c000835c <pbuf_free>
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e93c:	e9 97 00 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e941:	8d 76 00             	lea    esi,[esi+0x0]
c000e944:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e949:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e94d:	0f b7 c0             	movzx  eax,ax
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 8f 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	0f b7 c0             	movzx  eax,ax
c000e95f:	83 e0 04             	and    eax,0x4
c000e962:	75 64                	jne    c000e9c8 <tcp_input+0xabc>
c000e964:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e96a:	83 c0 01             	add    eax,0x1
c000e96d:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e973:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e979:	83 c0 01             	add    eax,0x1
c000e97c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e982:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e987:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e98a:	0f b7 c8             	movzx  ecx,ax
c000e98d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e992:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e996:	0f b7 d0             	movzx  edx,ax
c000e999:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e99f:	0f b7 d8             	movzx  ebx,ax
c000e9a2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e9a7:	01 c3                	add    ebx,eax
c000e9a9:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e9ae:	83 ec 08             	sub    esp,0x8
c000e9b1:	51                   	push   ecx
c000e9b2:	52                   	push   edx
c000e9b3:	68 90 68 03 c0       	push   0xc0036890
c000e9b8:	68 98 68 03 c0       	push   0xc0036898
c000e9bd:	53                   	push   ebx
c000e9be:	50                   	push   eax
c000e9bf:	e8 54 19 00 00       	call   c0010318 <tcp_rst>
c000e9c4:	83 c4 20             	add    esp,0x20
c000e9c7:	90                   	nop
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e9cf:	e8 88 99 ff ff       	call   c000835c <pbuf_free>
c000e9d4:	83 c4 10             	add    esp,0x10
c000e9d7:	90                   	nop
c000e9d8:	83 c4 18             	add    esp,0x18
c000e9db:	5b                   	pop    ebx
c000e9dc:	c3                   	ret    
c000e9dd:	66 90                	xchg   ax,ax
c000e9df:	90                   	nop

c000e9e0 <tcp_output_alloc_header>:
c000e9e0:	83 ec 2c             	sub    esp,0x2c
c000e9e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9eb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e9f0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fd:	01 d0                	add    eax,edx
c000e9ff:	83 c0 14             	add    eax,0x14
c000ea02:	0f b7 c0             	movzx  eax,ax
c000ea05:	83 ec 04             	sub    esp,0x4
c000ea08:	6a 00                	push   0x0
c000ea0a:	50                   	push   eax
c000ea0b:	6a 01                	push   0x1
c000ea0d:	e8 22 9b ff ff       	call   c0008534 <pbuf_alloc>
c000ea12:	83 c4 10             	add    esp,0x10
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ea1e:	0f 84 10 01 00 00    	je     c000eb34 <tcp_output_alloc_header+0x154>
c000ea24:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea29:	8d 50 13             	lea    edx,[eax+0x13]
c000ea2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea30:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ea34:	0f b7 c0             	movzx  eax,ax
c000ea37:	39 c2                	cmp    edx,eax
c000ea39:	7c 15                	jl     c000ea50 <tcp_output_alloc_header+0x70>
c000ea3b:	83 ec 08             	sub    esp,0x8
c000ea3e:	68 c0 06 03 c0       	push   0xc00306c0
c000ea43:	68 a6 fa 02 c0       	push   0xc002faa6
c000ea48:	e8 43 11 01 00       	call   c001fb90 <CPrintf>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea62:	0f b7 c0             	movzx  eax,ax
c000ea65:	83 ec 0c             	sub    esp,0xc
c000ea68:	50                   	push   eax
c000ea69:	e8 7a 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea6e:	83 c4 10             	add    esp,0x10
c000ea71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea75:	66 89 02             	mov    WORD PTR [edx],ax
c000ea78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ea80:	0f b7 c0             	movzx  eax,ax
c000ea83:	83 ec 0c             	sub    esp,0xc
c000ea86:	50                   	push   eax
c000ea87:	e8 5c 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea93:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ea97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea9b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eaa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	50                   	push   eax
c000eaad:	e8 5a 21 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	89 c2                	mov    edx,eax
c000eab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eabb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eabe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eac3:	c1 e8 02             	shr    eax,0x2
c000eac6:	83 c0 05             	add    eax,0x5
c000eac9:	c1 e0 0c             	shl    eax,0xc
c000eacc:	83 c8 10             	or     eax,0x10
c000eacf:	0f b7 c0             	movzx  eax,ax
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	50                   	push   eax
c000ead6:	e8 0d 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eae2:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000eae6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaea:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eaee:	0f b7 c0             	movzx  eax,ax
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	50                   	push   eax
c000eaf5:	e8 ee 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb01:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000eb05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb09:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eb0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb13:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eb19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb1d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eb20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb24:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eb28:	0f b7 c0             	movzx  eax,ax
c000eb2b:	01 c2                	add    edx,eax
c000eb2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb31:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eb34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb38:	83 c4 2c             	add    esp,0x2c
c000eb3b:	c3                   	ret    

c000eb3c <tcp_create_segment>:
c000eb3c:	53                   	push   ebx
c000eb3d:	83 ec 28             	sub    esp,0x28
c000eb40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000eb4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eb50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb55:	c1 e0 02             	shl    eax,0x2
c000eb58:	83 e0 04             	and    eax,0x4
c000eb5b:	88 c2                	mov    dl,al
c000eb5d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb62:	83 e0 02             	and    eax,0x2
c000eb65:	74 05                	je     c000eb6c <tcp_create_segment+0x30>
c000eb67:	b0 0c                	mov    al,0xc
c000eb69:	eb 05                	jmp    c000eb70 <tcp_create_segment+0x34>
c000eb6b:	90                   	nop
c000eb6c:	b0 00                	mov    al,0x0
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	01 d0                	add    eax,edx
c000eb72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	6a 04                	push   0x4
c000eb7b:	e8 f4 8d ff ff       	call   c0007974 <memp_malloc>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb8c:	75 1a                	jne    c000eba8 <tcp_create_segment+0x6c>
c000eb8e:	83 ec 0c             	sub    esp,0xc
c000eb91:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb95:	e8 c2 97 ff ff       	call   c000835c <pbuf_free>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	b8 00 00 00 00       	mov    eax,0x0
c000eba2:	e9 31 01 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000eba7:	90                   	nop
c000eba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebac:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ebb0:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ebb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ebbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ebc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebcc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ebcf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebd4:	89 d1                	mov    ecx,edx
c000ebd6:	29 c1                	sub    ecx,eax
c000ebd8:	89 c8                	mov    eax,ecx
c000ebda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebde:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ebe2:	83 ec 08             	sub    esp,0x8
c000ebe5:	6a 14                	push   0x14
c000ebe7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ebeb:	e8 d0 95 ff ff       	call   c00081c0 <pbuf_header>
c000ebf0:	83 c4 10             	add    esp,0x10
c000ebf3:	0f b6 c0             	movzx  eax,al
c000ebf6:	85 c0                	test   eax,eax
c000ebf8:	74 2a                	je     c000ec24 <tcp_create_segment+0xe8>
c000ebfa:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ec00:	83 c0 01             	add    eax,0x1
c000ec03:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ec09:	83 ec 0c             	sub    esp,0xc
c000ec0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec10:	e8 bf b3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	b8 00 00 00 00       	mov    eax,0x0
c000ec1d:	e9 b6 00 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000ec22:	66 90                	xchg   ax,ax
c000ec24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec3c:	0f b7 c0             	movzx  eax,ax
c000ec3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec43:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	50                   	push   eax
c000ec4a:	e8 99 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	66 89 03             	mov    WORD PTR [ebx],ax
c000ec55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec59:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec5d:	0f b7 c0             	movzx  eax,ax
c000ec60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec64:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec67:	83 ec 0c             	sub    esp,0xc
c000ec6a:	50                   	push   eax
c000ec6b:	e8 78 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ec77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec7b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec7e:	83 ec 0c             	sub    esp,0xc
c000ec81:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec85:	e8 82 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec95:	c1 e8 02             	shr    eax,0x2
c000ec98:	0f b6 c0             	movzx  eax,al
c000ec9b:	83 c0 05             	add    eax,0x5
c000ec9e:	c1 e0 0c             	shl    eax,0xc
c000eca1:	89 c2                	mov    edx,eax
c000eca3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eca8:	09 d0                	or     eax,edx
c000ecaa:	0f b7 c0             	movzx  eax,ax
c000ecad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecb1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	50                   	push   eax
c000ecb8:	e8 2b 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ecc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eccb:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd8:	83 c4 28             	add    esp,0x28
c000ecdb:	5b                   	pop    ebx
c000ecdc:	c3                   	ret    
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]

c000ece0 <tcp_pbuf_prealloc>:
c000ece0:	53                   	push   ebx
c000ece1:	83 ec 28             	sub    esp,0x28
c000ece4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ece8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecec:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ecf0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ecf4:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ecf9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecfe:	88 d8                	mov    al,bl
c000ed00:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed04:	88 c8                	mov    al,cl
c000ed06:	88 04 24             	mov    BYTE PTR [esp],al
c000ed09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed12:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ed17:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed1c:	39 c2                	cmp    edx,eax
c000ed1e:	73 64                	jae    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ed25:	83 e0 02             	and    eax,0x2
c000ed28:	75 2e                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed2e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed31:	0f b6 c0             	movzx  eax,al
c000ed34:	83 e0 40             	and    eax,0x40
c000ed37:	75 4b                	jne    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed39:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed3d:	85 c0                	test   eax,eax
c000ed3f:	74 17                	je     c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed45:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ed48:	85 c0                	test   eax,eax
c000ed4a:	75 0c                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed50:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ed53:	85 c0                	test   eax,eax
c000ed55:	74 2d                	je     c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed57:	90                   	nop
c000ed58:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed5d:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ed63:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed68:	39 c2                	cmp    edx,eax
c000ed6a:	7d 0c                	jge    c000ed78 <tcp_pbuf_prealloc+0x98>
c000ed6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed70:	05 18 02 00 00       	add    eax,0x218
c000ed75:	eb 05                	jmp    c000ed7c <tcp_pbuf_prealloc+0x9c>
c000ed77:	90                   	nop
c000ed78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed7c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed89:	83 ec 04             	sub    esp,0x4
c000ed8c:	6a 00                	push   0x0
c000ed8e:	50                   	push   eax
c000ed8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed93:	e8 9c 97 ff ff       	call   c0008534 <pbuf_alloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 0a                	jne    c000edb0 <tcp_pbuf_prealloc+0xd0>
c000eda6:	b8 00 00 00 00       	mov    eax,0x0
c000edab:	eb 5b                	jmp    c000ee08 <tcp_pbuf_prealloc+0x128>
c000edad:	8d 76 00             	lea    esi,[esi+0x0]
c000edb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb6:	85 c0                	test   eax,eax
c000edb8:	74 16                	je     c000edd0 <tcp_pbuf_prealloc+0xf0>
c000edba:	83 ec 08             	sub    esp,0x8
c000edbd:	68 44 09 03 c0       	push   0xc0030944
c000edc2:	68 a6 fa 02 c0       	push   0xc002faa6
c000edc7:	e8 c4 0d 01 00       	call   c001fb90 <CPrintf>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	90                   	nop
c000edd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000edd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eddc:	89 d1                	mov    ecx,edx
c000edde:	29 c1                	sub    ecx,eax
c000ede0:	89 c8                	mov    eax,ecx
c000ede2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ede6:	66 89 02             	mov    WORD PTR [edx],ax
c000ede9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edf1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000edf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee00:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ee04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee08:	83 c4 28             	add    esp,0x28
c000ee0b:	5b                   	pop    ebx
c000ee0c:	c3                   	ret    
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]

c000ee10 <tcp_write_checks>:
c000ee10:	83 ec 1c             	sub    esp,0x1c
c000ee13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ee17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee23:	83 f8 04             	cmp    eax,0x4
c000ee26:	74 2c                	je     c000ee54 <tcp_write_checks+0x44>
c000ee28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee2f:	83 f8 07             	cmp    eax,0x7
c000ee32:	74 20                	je     c000ee54 <tcp_write_checks+0x44>
c000ee34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee3b:	83 f8 02             	cmp    eax,0x2
c000ee3e:	74 14                	je     c000ee54 <tcp_write_checks+0x44>
c000ee40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee47:	83 f8 03             	cmp    eax,0x3
c000ee4a:	74 08                	je     c000ee54 <tcp_write_checks+0x44>
c000ee4c:	b0 f3                	mov    al,0xf3
c000ee4e:	e9 f9 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee53:	90                   	nop
c000ee54:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ee59:	85 c0                	test   eax,eax
c000ee5b:	75 07                	jne    c000ee64 <tcp_write_checks+0x54>
c000ee5d:	b0 00                	mov    al,0x0
c000ee5f:	e9 e8 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee68:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ee6c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ee71:	0f b7 c0             	movzx  eax,ax
c000ee74:	39 c2                	cmp    edx,eax
c000ee76:	76 1c                	jbe    c000ee94 <tcp_write_checks+0x84>
c000ee78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee7f:	83 c8 80             	or     eax,0xffffff80
c000ee82:	88 c2                	mov    dl,al
c000ee84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee88:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee8b:	b0 ff                	mov    al,0xff
c000ee8d:	e9 ba 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee92:	66 90                	xchg   ax,ax
c000ee94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee98:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee9b:	0f b7 c0             	movzx  eax,ax
c000ee9e:	83 f8 01             	cmp    eax,0x1
c000eea1:	77 11                	ja     c000eeb4 <tcp_write_checks+0xa4>
c000eea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eeaa:	0f b7 c0             	movzx  eax,ax
c000eead:	3d fc ff 00 00       	cmp    eax,0xfffc
c000eeb2:	76 28                	jbe    c000eedc <tcp_write_checks+0xcc>
c000eeb4:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000eeba:	83 c0 01             	add    eax,0x1
c000eebd:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000eec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eeca:	83 c8 80             	or     eax,0xffffff80
c000eecd:	88 c2                	mov    dl,al
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000eed6:	b0 ff                	mov    al,0xff
c000eed8:	eb 72                	jmp    c000ef4c <tcp_write_checks+0x13c>
c000eeda:	66 90                	xchg   ax,ax
c000eedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eee3:	0f b7 c0             	movzx  eax,ax
c000eee6:	85 c0                	test   eax,eax
c000eee8:	74 2e                	je     c000ef18 <tcp_write_checks+0x108>
c000eeea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eef1:	85 c0                	test   eax,eax
c000eef3:	75 53                	jne    c000ef48 <tcp_write_checks+0x138>
c000eef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eefc:	85 c0                	test   eax,eax
c000eefe:	75 48                	jne    c000ef48 <tcp_write_checks+0x138>
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	68 f0 06 03 c0       	push   0xc00306f0
c000ef08:	68 a6 fa 02 c0       	push   0xc002faa6
c000ef0d:	e8 7e 0c 01 00       	call   c001fb90 <CPrintf>
c000ef12:	83 c4 10             	add    esp,0x10
c000ef15:	eb 31                	jmp    c000ef48 <tcp_write_checks+0x138>
c000ef17:	90                   	nop
c000ef18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef1f:	85 c0                	test   eax,eax
c000ef21:	75 0d                	jne    c000ef30 <tcp_write_checks+0x120>
c000ef23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef27:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef2a:	85 c0                	test   eax,eax
c000ef2c:	74 1a                	je     c000ef48 <tcp_write_checks+0x138>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	68 2c 07 03 c0       	push   0xc003072c
c000ef38:	68 a6 fa 02 c0       	push   0xc002faa6
c000ef3d:	e8 4e 0c 01 00       	call   c001fb90 <CPrintf>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	b0 00                	mov    al,0x0
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	83 c4 1c             	add    esp,0x1c
c000ef4f:	c3                   	ret    

c000ef50 <tcp_write>:
c000ef50:	56                   	push   esi
c000ef51:	53                   	push   ebx
c000ef52:	83 ec 54             	sub    esp,0x54
c000ef55:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ef59:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ef5d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ef62:	88 d0                	mov    al,dl
c000ef64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ef68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef78:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef80:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef88:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef90:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef97:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef9c:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000efa1:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000efa8:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000efaf:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000efb4:	75 1e                	jne    c000efd4 <tcp_write+0x84>
c000efb6:	83 ec 08             	sub    esp,0x8
c000efb9:	68 60 07 03 c0       	push   0xc0030760
c000efbe:	68 a6 fa 02 c0       	push   0xc002faa6
c000efc3:	e8 c8 0b 01 00       	call   c001fb90 <CPrintf>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	b0 f2                	mov    al,0xf2
c000efcd:	e9 16 08 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000efd9:	83 ec 08             	sub    esp,0x8
c000efdc:	50                   	push   eax
c000efdd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000efe1:	e8 2a fe ff ff       	call   c000ee10 <tcp_write_checks>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000efed:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000eff2:	85 c0                	test   eax,eax
c000eff4:	74 0a                	je     c000f000 <tcp_write+0xb0>
c000eff6:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000effa:	e9 e9 07 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efff:	90                   	nop
c000f000:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f004:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f007:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f00c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f010:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f013:	85 c0                	test   eax,eax
c000f015:	0f 84 79 02 00 00    	je     c000f294 <tcp_write+0x344>
c000f01b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f01f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f022:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f026:	eb 0c                	jmp    c000f034 <tcp_write+0xe4>
c000f028:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f032:	66 90                	xchg   ax,ax
c000f034:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f038:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03a:	85 c0                	test   eax,eax
c000f03c:	75 ea                	jne    c000f028 <tcp_write+0xd8>
c000f03e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f042:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f045:	0f b6 c0             	movzx  eax,al
c000f048:	c1 e0 02             	shl    eax,0x2
c000f04b:	83 e0 04             	and    eax,0x4
c000f04e:	89 c2                	mov    edx,eax
c000f050:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f054:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f057:	0f b6 c0             	movzx  eax,al
c000f05a:	83 e0 02             	and    eax,0x2
c000f05d:	74 09                	je     c000f068 <tcp_write+0x118>
c000f05f:	b8 0c 00 00 00       	mov    eax,0xc
c000f064:	eb 0a                	jmp    c000f070 <tcp_write+0x120>
c000f066:	66 90                	xchg   ax,ax
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	01 d0                	add    eax,edx
c000f072:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f077:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f07b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f07e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f082:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f085:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f08a:	01 ca                	add    edx,ecx
c000f08c:	29 d0                	sub    eax,edx
c000f08e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f093:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f097:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f09b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0a0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f0a5:	0f b7 c0             	movzx  eax,ax
c000f0a8:	85 c0                	test   eax,eax
c000f0aa:	0f 84 84 00 00 00    	je     c000f134 <tcp_write+0x1e4>
c000f0b0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f0b5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f0ba:	39 c2                	cmp    edx,eax
c000f0bc:	76 16                	jbe    c000f0d4 <tcp_write+0x184>
c000f0be:	83 ec 08             	sub    esp,0x8
c000f0c1:	68 94 07 03 c0       	push   0xc0030794
c000f0c6:	68 a6 fa 02 c0       	push   0xc002faa6
c000f0cb:	e8 c0 0a 01 00       	call   c001fb90 <CPrintf>
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	90                   	nop
c000f0d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0e5:	0f b7 d8             	movzx  ebx,ax
c000f0e8:	0f b7 ca             	movzx  ecx,dx
c000f0eb:	39 cb                	cmp    ebx,ecx
c000f0ed:	76 05                	jbe    c000f0f4 <tcp_write+0x1a4>
c000f0ef:	89 d0                	mov    eax,edx
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f4:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f0f9:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f0fe:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f103:	01 d0                	add    eax,edx
c000f105:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f10a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f10f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f114:	89 d6                	mov    esi,edx
c000f116:	29 c6                	sub    esi,eax
c000f118:	89 f0                	mov    eax,esi
c000f11a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f11f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f123:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f128:	89 d6                	mov    esi,edx
c000f12a:	29 c6                	sub    esi,eax
c000f12c:	89 f0                	mov    eax,esi
c000f12e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f133:	90                   	nop
c000f134:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f139:	0f b7 c0             	movzx  eax,ax
c000f13c:	85 c0                	test   eax,eax
c000f13e:	74 24                	je     c000f164 <tcp_write+0x214>
c000f140:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f145:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f14a:	39 c2                	cmp    edx,eax
c000f14c:	74 16                	je     c000f164 <tcp_write+0x214>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 58 09 03 c0       	push   0xc0030958
c000f156:	68 a6 fa 02 c0       	push   0xc002faa6
c000f15b:	e8 30 0a 01 00       	call   c001fb90 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	90                   	nop
c000f164:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f169:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f16e:	39 c2                	cmp    edx,eax
c000f170:	0f 83 ce 03 00 00    	jae    c000f544 <tcp_write+0x5f4>
c000f176:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f17b:	85 c0                	test   eax,eax
c000f17d:	0f 84 c1 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f183:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f187:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f18a:	0f b7 c0             	movzx  eax,ax
c000f18d:	85 c0                	test   eax,eax
c000f18f:	0f 84 af 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f195:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f19a:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f19f:	29 c2                	sub    edx,eax
c000f1a1:	89 d0                	mov    eax,edx
c000f1a3:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1a8:	39 d0                	cmp    eax,edx
c000f1aa:	7e 04                	jle    c000f1b0 <tcp_write+0x260>
c000f1ac:	89 d0                	mov    eax,edx
c000f1ae:	66 90                	xchg   ax,ax
c000f1b0:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f1b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f1c2:	83 e0 01             	and    eax,0x1
c000f1c5:	74 61                	je     c000f228 <tcp_write+0x2d8>
c000f1c7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f1cc:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1d1:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1d6:	83 ec 04             	sub    esp,0x4
c000f1d9:	6a 01                	push   0x1
c000f1db:	51                   	push   ecx
c000f1dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1e0:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f1e4:	51                   	push   ecx
c000f1e5:	52                   	push   edx
c000f1e6:	50                   	push   eax
c000f1e7:	6a 03                	push   0x3
c000f1e9:	e8 f2 fa ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f1ee:	83 c4 20             	add    esp,0x20
c000f1f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1f5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1fa:	0f 84 44 05 00 00    	je     c000f744 <tcp_write+0x7f4>
c000f200:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f205:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f20a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f20e:	01 c1                	add    ecx,eax
c000f210:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f217:	83 ec 04             	sub    esp,0x4
c000f21a:	52                   	push   edx
c000f21b:	51                   	push   ecx
c000f21c:	50                   	push   eax
c000f21d:	e8 58 11 ff ff       	call   c000037a <memcpy>
c000f222:	83 c4 10             	add    esp,0x10
c000f225:	eb 39                	jmp    c000f260 <tcp_write+0x310>
c000f227:	90                   	nop
c000f228:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f22d:	83 ec 04             	sub    esp,0x4
c000f230:	6a 01                	push   0x1
c000f232:	50                   	push   eax
c000f233:	6a 03                	push   0x3
c000f235:	e8 fa 92 ff ff       	call   c0008534 <pbuf_alloc>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f241:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f246:	0f 84 fc 04 00 00    	je     c000f748 <tcp_write+0x7f8>
c000f24c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f251:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f255:	01 c2                	add    edx,eax
c000f257:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f25b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f25e:	66 90                	xchg   ax,ax
c000f260:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f265:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f269:	01 d0                	add    eax,edx
c000f26b:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f277:	e8 b4 98 ff ff       	call   c0008b30 <pbuf_clen>
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	0f b6 c0             	movzx  eax,al
c000f282:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f286:	01 d0                	add    eax,edx
c000f288:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f28d:	e9 b2 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f292:	66 90                	xchg   ax,ax
c000f294:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f298:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f29c:	0f b7 c0             	movzx  eax,ax
c000f29f:	85 c0                	test   eax,eax
c000f2a1:	0f 84 9d 02 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f2a7:	83 ec 08             	sub    esp,0x8
c000f2aa:	68 b4 07 03 c0       	push   0xc00307b4
c000f2af:	68 a6 fa 02 c0       	push   0xc002faa6
c000f2b4:	e8 d7 08 01 00       	call   c001fb90 <CPrintf>
c000f2b9:	83 c4 10             	add    esp,0x10
c000f2bc:	e9 83 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2c8:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f2cd:	89 d6                	mov    esi,edx
c000f2cf:	29 c6                	sub    esi,eax
c000f2d1:	89 f0                	mov    eax,esi
c000f2d3:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f2d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2dc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f2df:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2e4:	89 d3                	mov    ebx,edx
c000f2e6:	29 c3                	sub    ebx,eax
c000f2e8:	89 d8                	mov    eax,ebx
c000f2ea:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f2ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f2f3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f2f8:	0f b7 d8             	movzx  ebx,ax
c000f2fb:	0f b7 ca             	movzx  ecx,dx
c000f2fe:	39 cb                	cmp    ebx,ecx
c000f300:	76 02                	jbe    c000f304 <tcp_write+0x3b4>
c000f302:	89 d0                	mov    eax,edx
c000f304:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f309:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f30e:	83 e0 01             	and    eax,0x1
c000f311:	0f 84 b1 00 00 00    	je     c000f3c8 <tcp_write+0x478>
c000f317:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f31c:	0f 94 c0             	sete   al
c000f31f:	0f b6 f0             	movzx  esi,al
c000f322:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f327:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f32e:	0f b7 c8             	movzx  ecx,ax
c000f331:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f336:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f33b:	01 d0                	add    eax,edx
c000f33d:	0f b7 c0             	movzx  eax,ax
c000f340:	83 ec 04             	sub    esp,0x4
c000f343:	56                   	push   esi
c000f344:	53                   	push   ebx
c000f345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f349:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f34d:	52                   	push   edx
c000f34e:	51                   	push   ecx
c000f34f:	50                   	push   eax
c000f350:	6a 00                	push   0x0
c000f352:	e8 89 f9 ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f357:	83 c4 20             	add    esp,0x20
c000f35a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f35e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f363:	0f 84 e3 03 00 00    	je     c000f74c <tcp_write+0x7fc>
c000f369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f36d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f371:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f376:	0f b7 c0             	movzx  eax,ax
c000f379:	39 c2                	cmp    edx,eax
c000f37b:	76 17                	jbe    c000f394 <tcp_write+0x444>
c000f37d:	83 ec 08             	sub    esp,0x8
c000f380:	68 e4 07 03 c0       	push   0xc00307e4
c000f385:	68 a6 fa 02 c0       	push   0xc002faa6
c000f38a:	e8 01 08 01 00       	call   c001fb90 <CPrintf>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	66 90                	xchg   ax,ax
c000f394:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f399:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f39e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f3a2:	01 d1                	add    ecx,edx
c000f3a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f3a8:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f3ab:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f3b0:	01 da                	add    edx,ebx
c000f3b2:	83 ec 04             	sub    esp,0x4
c000f3b5:	50                   	push   eax
c000f3b6:	51                   	push   ecx
c000f3b7:	52                   	push   edx
c000f3b8:	e8 bd 0f ff ff       	call   c000037a <memcpy>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	e9 a7 00 00 00       	jmp    c000f46c <tcp_write+0x51c>
c000f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f3cd:	0f b7 c0             	movzx  eax,ax
c000f3d0:	85 c0                	test   eax,eax
c000f3d2:	74 18                	je     c000f3ec <tcp_write+0x49c>
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	68 76 09 03 c0       	push   0xc0030976
c000f3dc:	68 a6 fa 02 c0       	push   0xc002faa6
c000f3e1:	e8 aa 07 01 00       	call   c001fb90 <CPrintf>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	50                   	push   eax
c000f3f7:	6a 00                	push   0x0
c000f3f9:	e8 36 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f405:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f40a:	0f 84 40 03 00 00    	je     c000f750 <tcp_write+0x800>
c000f410:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f415:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f419:	01 c2                	add    edx,eax
c000f41b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f41f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f422:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f427:	83 ec 04             	sub    esp,0x4
c000f42a:	6a 00                	push   0x0
c000f42c:	50                   	push   eax
c000f42d:	6a 00                	push   0x0
c000f42f:	e8 00 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f43b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f440:	75 16                	jne    c000f458 <tcp_write+0x508>
c000f442:	83 ec 0c             	sub    esp,0xc
c000f445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f449:	e8 0e 8f ff ff       	call   c000835c <pbuf_free>
c000f44e:	83 c4 10             	add    esp,0x10
c000f451:	e9 02 03 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f456:	66 90                	xchg   ax,ax
c000f458:	83 ec 08             	sub    esp,0x8
c000f45b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f463:	e8 2c 97 ff ff       	call   c0008b94 <pbuf_cat>
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	90                   	nop
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f473:	e8 b8 96 ff ff       	call   c0008b30 <pbuf_clen>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	0f b6 c0             	movzx  eax,al
c000f47e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f482:	01 d0                	add    eax,edx
c000f484:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f489:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f48e:	83 f8 02             	cmp    eax,0x2
c000f491:	77 0d                	ja     c000f4a0 <tcp_write+0x550>
c000f493:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f498:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f49d:	76 15                	jbe    c000f4b4 <tcp_write+0x564>
c000f49f:	90                   	nop
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f4a7:	e8 b0 8e ff ff       	call   c000835c <pbuf_free>
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	e9 a4 02 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f4b4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f4b9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f4bd:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f4c0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4c5:	01 ca                	add    edx,ecx
c000f4c7:	83 ec 0c             	sub    esp,0xc
c000f4ca:	50                   	push   eax
c000f4cb:	52                   	push   edx
c000f4cc:	6a 00                	push   0x0
c000f4ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f4d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f4d6:	e8 61 f6 ff ff       	call   c000eb3c <tcp_create_segment>
c000f4db:	83 c4 20             	add    esp,0x20
c000f4de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f4e2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f4e7:	0f 84 67 02 00 00    	je     c000f754 <tcp_write+0x804>
c000f4ed:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4f2:	75 0c                	jne    c000f500 <tcp_write+0x5b0>
c000f4f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4f8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4fc:	eb 2a                	jmp    c000f528 <tcp_write+0x5d8>
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f505:	75 15                	jne    c000f51c <tcp_write+0x5cc>
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	68 84 09 03 c0       	push   0xc0030984
c000f50f:	68 a6 fa 02 c0       	push   0xc002faa6
c000f514:	e8 77 06 01 00       	call   c001fb90 <CPrintf>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f520:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f524:	89 10                	mov    DWORD PTR [eax],edx
c000f526:	66 90                	xchg   ax,ax
c000f528:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f52c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f530:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f535:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f53a:	01 d0                	add    eax,edx
c000f53c:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f549:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f54e:	39 c2                	cmp    edx,eax
c000f550:	0f 82 6e fd ff ff    	jb     c000f2c4 <tcp_write+0x374>
c000f556:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f55b:	85 c0                	test   eax,eax
c000f55d:	0f 84 9d 00 00 00    	je     c000f600 <tcp_write+0x6b0>
c000f563:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f56a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f56e:	eb 70                	jmp    c000f5e0 <tcp_write+0x690>
c000f570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f577:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f57c:	01 d0                	add    eax,edx
c000f57e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f582:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	85 c0                	test   eax,eax
c000f58e:	75 44                	jne    c000f5d4 <tcp_write+0x684>
c000f590:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f599:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5a4:	0f b7 c0             	movzx  eax,ax
c000f5a7:	01 c8                	add    eax,ecx
c000f5a9:	83 ec 04             	sub    esp,0x4
c000f5ac:	52                   	push   edx
c000f5ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f5b1:	50                   	push   eax
c000f5b2:	e8 c3 0d ff ff       	call   c000037a <memcpy>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5c2:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5c7:	01 d0                	add    eax,edx
c000f5c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f5cd:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5de:	66 90                	xchg   ax,ax
c000f5e0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f5e5:	75 89                	jne    c000f570 <tcp_write+0x620>
c000f5e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5ee:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5f3:	01 d0                	add    eax,edx
c000f5f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f5f9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f600:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f605:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f609:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f60d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f612:	74 4c                	je     c000f660 <tcp_write+0x710>
c000f614:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f619:	75 15                	jne    c000f630 <tcp_write+0x6e0>
c000f61b:	83 ec 08             	sub    esp,0x8
c000f61e:	68 24 08 03 c0       	push   0xc0030824
c000f623:	68 a6 fa 02 c0       	push   0xc002faa6
c000f628:	e8 63 05 01 00       	call   c001fb90 <CPrintf>
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f63e:	50                   	push   eax
c000f63f:	e8 50 95 ff ff       	call   c0008b94 <pbuf_cat>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f64b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f64e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f652:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f655:	01 d0                	add    eax,edx
c000f657:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f65b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f65f:	90                   	nop
c000f660:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f665:	75 0d                	jne    c000f674 <tcp_write+0x724>
c000f667:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f66b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f66f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f672:	eb 0c                	jmp    c000f680 <tcp_write+0x730>
c000f674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f678:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f67c:	89 10                	mov    DWORD PTR [eax],edx
c000f67e:	66 90                	xchg   ax,ax
c000f680:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f684:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f687:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f68c:	01 c2                	add    edx,eax
c000f68e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f692:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f699:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6a1:	89 d6                	mov    esi,edx
c000f6a3:	29 c6                	sub    esi,eax
c000f6a5:	89 f0                	mov    eax,esi
c000f6a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6ab:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f6af:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6b7:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f6bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6bf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6c2:	0f b7 c0             	movzx  eax,ax
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	74 2b                	je     c000f6f4 <tcp_write+0x7a4>
c000f6c9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6cd:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6d0:	85 c0                	test   eax,eax
c000f6d2:	75 20                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6db:	85 c0                	test   eax,eax
c000f6dd:	75 15                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6df:	83 ec 08             	sub    esp,0x8
c000f6e2:	68 95 09 03 c0       	push   0xc0030995
c000f6e7:	68 a6 fa 02 c0       	push   0xc002faa6
c000f6ec:	e8 9f 04 01 00       	call   c001fb90 <CPrintf>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f6f9:	74 41                	je     c000f73c <tcp_write+0x7ec>
c000f6fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f702:	85 c0                	test   eax,eax
c000f704:	74 36                	je     c000f73c <tcp_write+0x7ec>
c000f706:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f70b:	83 e0 02             	and    eax,0x2
c000f70e:	75 2c                	jne    c000f73c <tcp_write+0x7ec>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f717:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f71b:	83 ec 0c             	sub    esp,0xc
c000f71e:	6a 08                	push   0x8
c000f720:	e8 c3 14 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f725:	83 c4 10             	add    esp,0x10
c000f728:	89 c1                	mov    ecx,eax
c000f72a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f72e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f731:	89 d8                	mov    eax,ebx
c000f733:	09 c8                	or     eax,ecx
c000f735:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f739:	8d 76 00             	lea    esi,[esi+0x0]
c000f73c:	b0 00                	mov    al,0x0
c000f73e:	e9 a5 00 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000f743:	90                   	nop
c000f744:	90                   	nop
c000f745:	eb 11                	jmp    c000f758 <tcp_write+0x808>
c000f747:	90                   	nop
c000f748:	90                   	nop
c000f749:	eb 0d                	jmp    c000f758 <tcp_write+0x808>
c000f74b:	90                   	nop
c000f74c:	90                   	nop
c000f74d:	eb 09                	jmp    c000f758 <tcp_write+0x808>
c000f74f:	90                   	nop
c000f750:	90                   	nop
c000f751:	eb 05                	jmp    c000f758 <tcp_write+0x808>
c000f753:	90                   	nop
c000f754:	90                   	nop
c000f755:	8d 76 00             	lea    esi,[esi+0x0]
c000f758:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f75c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f75f:	83 c8 80             	or     eax,0xffffff80
c000f762:	88 c2                	mov    dl,al
c000f764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f768:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f76b:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f771:	83 c0 01             	add    eax,0x1
c000f774:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f77a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f77f:	74 0f                	je     c000f790 <tcp_write+0x840>
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f788:	e8 cf 8b ff ff       	call   c000835c <pbuf_free>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f795:	74 11                	je     c000f7a8 <tcp_write+0x858>
c000f797:	83 ec 0c             	sub    esp,0xc
c000f79a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f79e:	e8 75 a8 ff ff       	call   c000a018 <tcp_segs_free>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	66 90                	xchg   ax,ax
c000f7a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ac:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f7af:	0f b7 c0             	movzx  eax,ax
c000f7b2:	85 c0                	test   eax,eax
c000f7b4:	74 2e                	je     c000f7e4 <tcp_write+0x894>
c000f7b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ba:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f7bd:	85 c0                	test   eax,eax
c000f7bf:	75 23                	jne    c000f7e4 <tcp_write+0x894>
c000f7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7c5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f7c8:	85 c0                	test   eax,eax
c000f7ca:	75 18                	jne    c000f7e4 <tcp_write+0x894>
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 95 09 03 c0       	push   0xc0030995
c000f7d4:	68 a6 fa 02 c0       	push   0xc002faa6
c000f7d9:	e8 b2 03 01 00       	call   c001fb90 <CPrintf>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7e4:	b0 ff                	mov    al,0xff
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	83 c4 54             	add    esp,0x54
c000f7eb:	5b                   	pop    ebx
c000f7ec:	5e                   	pop    esi
c000f7ed:	c3                   	ret    
c000f7ee:	66 90                	xchg   ax,ax

c000f7f0 <tcp_enqueue_flags>:
c000f7f0:	83 ec 3c             	sub    esp,0x3c
c000f7f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f7fb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f800:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f805:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f80a:	83 e0 03             	and    eax,0x3
c000f80d:	75 15                	jne    c000f824 <tcp_enqueue_flags+0x34>
c000f80f:	83 ec 08             	sub    esp,0x8
c000f812:	68 5c 08 03 c0       	push   0xc003085c
c000f817:	68 a6 fa 02 c0       	push   0xc002faa6
c000f81c:	e8 6f 03 01 00       	call   c001fb90 <CPrintf>
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f828:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f82b:	0f b7 c0             	movzx  eax,ax
c000f82e:	83 f8 01             	cmp    eax,0x1
c000f831:	77 11                	ja     c000f844 <tcp_enqueue_flags+0x54>
c000f833:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f837:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f83a:	0f b7 c0             	movzx  eax,ax
c000f83d:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f842:	76 2c                	jbe    c000f870 <tcp_enqueue_flags+0x80>
c000f844:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f84a:	83 c0 01             	add    eax,0x1
c000f84d:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f853:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f857:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f85a:	83 c8 80             	or     eax,0xffffff80
c000f85d:	88 c2                	mov    dl,al
c000f85f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f863:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f866:	b0 ff                	mov    al,0xff
c000f868:	e9 6b 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f875:	83 e0 02             	and    eax,0x2
c000f878:	74 06                	je     c000f880 <tcp_enqueue_flags+0x90>
c000f87a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f87f:	90                   	nop
c000f880:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f885:	c1 e0 02             	shl    eax,0x2
c000f888:	83 e0 04             	and    eax,0x4
c000f88b:	88 c2                	mov    dl,al
c000f88d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f892:	83 e0 02             	and    eax,0x2
c000f895:	74 05                	je     c000f89c <tcp_enqueue_flags+0xac>
c000f897:	b0 0c                	mov    al,0xc
c000f899:	eb 05                	jmp    c000f8a0 <tcp_enqueue_flags+0xb0>
c000f89b:	90                   	nop
c000f89c:	b0 00                	mov    al,0x0
c000f89e:	66 90                	xchg   ax,ax
c000f8a0:	01 d0                	add    eax,edx
c000f8a2:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f8a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8aa:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f8ae:	0f b7 c0             	movzx  eax,ax
c000f8b1:	85 c0                	test   eax,eax
c000f8b3:	75 17                	jne    c000f8cc <tcp_enqueue_flags+0xdc>
c000f8b5:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8bb:	83 c0 01             	add    eax,0x1
c000f8be:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8c4:	b0 ff                	mov    al,0xff
c000f8c6:	e9 0d 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f8cb:	90                   	nop
c000f8cc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8d1:	83 ec 04             	sub    esp,0x4
c000f8d4:	6a 00                	push   0x0
c000f8d6:	50                   	push   eax
c000f8d7:	6a 00                	push   0x0
c000f8d9:	e8 56 8c ff ff       	call   c0008534 <pbuf_alloc>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f8e5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f8ea:	75 2c                	jne    c000f918 <tcp_enqueue_flags+0x128>
c000f8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8f0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f3:	83 c8 80             	or     eax,0xffffff80
c000f8f6:	88 c2                	mov    dl,al
c000f8f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8fc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8ff:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f905:	83 c0 01             	add    eax,0x1
c000f908:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f90e:	b0 ff                	mov    al,0xff
c000f910:	e9 c3 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f915:	8d 76 00             	lea    esi,[esi+0x0]
c000f918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f91c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f920:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f925:	0f b7 d2             	movzx  edx,dx
c000f928:	0f b7 c0             	movzx  eax,ax
c000f92b:	39 c2                	cmp    edx,eax
c000f92d:	73 15                	jae    c000f944 <tcp_enqueue_flags+0x154>
c000f92f:	83 ec 08             	sub    esp,0x8
c000f932:	68 b4 08 03 c0       	push   0xc00308b4
c000f937:	68 a6 fa 02 c0       	push   0xc002faa6
c000f93c:	e8 4f 02 01 00       	call   c001fb90 <CPrintf>
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f949:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f94d:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f950:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	51                   	push   ecx
c000f959:	52                   	push   edx
c000f95a:	50                   	push   eax
c000f95b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f95f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f963:	e8 d4 f1 ff ff       	call   c000eb3c <tcp_create_segment>
c000f968:	83 c4 20             	add    esp,0x20
c000f96b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f96f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f974:	75 2a                	jne    c000f9a0 <tcp_enqueue_flags+0x1b0>
c000f976:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f97a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f97d:	83 c8 80             	or     eax,0xffffff80
c000f980:	88 c2                	mov    dl,al
c000f982:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f986:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f989:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f98f:	83 c0 01             	add    eax,0x1
c000f992:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f998:	b0 ff                	mov    al,0xff
c000f99a:	e9 39 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f99f:	90                   	nop
c000f9a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f9a7:	0f b7 c0             	movzx  eax,ax
c000f9aa:	85 c0                	test   eax,eax
c000f9ac:	74 16                	je     c000f9c4 <tcp_enqueue_flags+0x1d4>
c000f9ae:	83 ec 08             	sub    esp,0x8
c000f9b1:	68 f0 08 03 c0       	push   0xc00308f0
c000f9b6:	68 a6 fa 02 c0       	push   0xc002faa6
c000f9bb:	e8 d0 01 01 00       	call   c001fb90 <CPrintf>
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	90                   	nop
c000f9c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	75 0d                	jne    c000f9dc <tcp_enqueue_flags+0x1ec>
c000f9cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9d7:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f9da:	eb 30                	jmp    c000fa0c <tcp_enqueue_flags+0x21c>
c000f9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9e7:	eb 0f                	jmp    c000f9f8 <tcp_enqueue_flags+0x208>
c000f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9f6:	66 90                	xchg   ax,ax
c000f9f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fe:	85 c0                	test   eax,eax
c000fa00:	75 ea                	jne    c000f9ec <tcp_enqueue_flags+0x1fc>
c000fa02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa0a:	89 10                	mov    DWORD PTR [eax],edx
c000fa0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa10:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fa16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa1b:	83 e0 02             	and    eax,0x2
c000fa1e:	75 0c                	jne    c000fa2c <tcp_enqueue_flags+0x23c>
c000fa20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa25:	83 e0 01             	and    eax,0x1
c000fa28:	74 26                	je     c000fa50 <tcp_enqueue_flags+0x260>
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa30:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fa33:	8d 50 01             	lea    edx,[eax+0x1]
c000fa36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa3a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fa3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa41:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa45:	83 e8 01             	sub    eax,0x1
c000fa48:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa4c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fa50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa55:	83 e0 01             	and    eax,0x1
c000fa58:	74 16                	je     c000fa70 <tcp_enqueue_flags+0x280>
c000fa5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa61:	83 c8 20             	or     eax,0x20
c000fa64:	88 c2                	mov    dl,al
c000fa66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa6a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa77:	83 ec 0c             	sub    esp,0xc
c000fa7a:	50                   	push   eax
c000fa7b:	e8 b0 90 ff ff       	call   c0008b30 <pbuf_clen>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	88 c1                	mov    cl,al
c000fa85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa8c:	0f b6 c1             	movzx  eax,cl
c000fa8f:	01 d0                	add    eax,edx
c000fa91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa95:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fa99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa9d:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000faa0:	0f b7 c0             	movzx  eax,ax
c000faa3:	85 c0                	test   eax,eax
c000faa5:	74 2d                	je     c000fad4 <tcp_enqueue_flags+0x2e4>
c000faa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faab:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000faae:	85 c0                	test   eax,eax
c000fab0:	75 22                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fab6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fab9:	85 c0                	test   eax,eax
c000fabb:	75 17                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fabd:	83 ec 08             	sub    esp,0x8
c000fac0:	68 1c 09 03 c0       	push   0xc003091c
c000fac5:	68 a6 fa 02 c0       	push   0xc002faa6
c000faca:	e8 c1 00 01 00       	call   c001fb90 <CPrintf>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	66 90                	xchg   ax,ax
c000fad4:	b0 00                	mov    al,0x0
c000fad6:	66 90                	xchg   ax,ax
c000fad8:	83 c4 3c             	add    esp,0x3c
c000fadb:	c3                   	ret    

c000fadc <tcp_send_fin>:
c000fadc:	53                   	push   ebx
c000fadd:	83 ec 18             	sub    esp,0x18
c000fae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fae7:	85 c0                	test   eax,eax
c000fae9:	74 75                	je     c000fb60 <tcp_send_fin+0x84>
c000faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faef:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000faf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faf6:	eb 0c                	jmp    c000fb04 <tcp_send_fin+0x28>
c000faf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fafc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fafe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb02:	66 90                	xchg   ax,ax
c000fb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0a:	85 c0                	test   eax,eax
c000fb0c:	75 ea                	jne    c000faf8 <tcp_send_fin+0x1c>
c000fb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fb19:	0f b7 c0             	movzx  eax,ax
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	50                   	push   eax
c000fb20:	e8 c3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	0f b7 c0             	movzx  eax,ax
c000fb2b:	83 e0 07             	and    eax,0x7
c000fb2e:	75 30                	jne    c000fb60 <tcp_send_fin+0x84>
c000fb30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb37:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fb3b:	83 ec 0c             	sub    esp,0xc
c000fb3e:	6a 01                	push   0x1
c000fb40:	e8 a3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	89 c1                	mov    ecx,eax
c000fb4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb51:	89 d8                	mov    eax,ebx
c000fb53:	09 c8                	or     eax,ecx
c000fb55:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fb59:	b0 00                	mov    al,0x0
c000fb5b:	eb 17                	jmp    c000fb74 <tcp_send_fin+0x98>
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb60:	83 ec 08             	sub    esp,0x8
c000fb63:	6a 01                	push   0x1
c000fb65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb69:	e8 82 fc ff ff       	call   c000f7f0 <tcp_enqueue_flags>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	8d 76 00             	lea    esi,[esi+0x0]
c000fb74:	83 c4 18             	add    esp,0x18
c000fb77:	5b                   	pop    ebx
c000fb78:	c3                   	ret    
c000fb79:	8d 76 00             	lea    esi,[esi+0x0]

c000fb7c <tcp_send_empty_ack>:
c000fb7c:	53                   	push   ebx
c000fb7d:	83 ec 18             	sub    esp,0x18
c000fb80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb89:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	50                   	push   eax
c000fb90:	e8 77 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	89 c2                	mov    edx,eax
c000fb9a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb9f:	52                   	push   edx
c000fba0:	6a 00                	push   0x0
c000fba2:	50                   	push   eax
c000fba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fba7:	e8 34 ee ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fbb3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fbb8:	75 0a                	jne    c000fbc4 <tcp_send_empty_ack+0x48>
c000fbba:	b0 fe                	mov    al,0xfe
c000fbbc:	e9 97 00 00 00       	jmp    c000fc58 <tcp_send_empty_ack+0xdc>
c000fbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbd6:	83 e0 fc             	and    eax,0xfffffffc
c000fbd9:	88 c2                	mov    dl,al
c000fbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbe9:	0f b7 d0             	movzx  edx,ax
c000fbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf0:	8d 48 04             	lea    ecx,[eax+0x4]
c000fbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf7:	83 ec 0c             	sub    esp,0xc
c000fbfa:	52                   	push   edx
c000fbfb:	6a 06                	push   0x6
c000fbfd:	51                   	push   ecx
c000fbfe:	50                   	push   eax
c000fbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc03:	e8 70 35 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fc08:	83 c4 20             	add    esp,0x20
c000fc0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fc0f:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc17:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fc1a:	0f b6 c8             	movzx  ecx,al
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc24:	0f b6 d0             	movzx  edx,al
c000fc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc2b:	8d 58 04             	lea    ebx,[eax+0x4]
c000fc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc32:	83 ec 08             	sub    esp,0x8
c000fc35:	6a 06                	push   0x6
c000fc37:	51                   	push   ecx
c000fc38:	52                   	push   edx
c000fc39:	53                   	push   ebx
c000fc3a:	50                   	push   eax
c000fc3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc3f:	e8 68 41 00 00       	call   c0013dac <ip_output>
c000fc44:	83 c4 20             	add    esp,0x20
c000fc47:	83 ec 0c             	sub    esp,0xc
c000fc4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc4e:	e8 09 87 ff ff       	call   c000835c <pbuf_free>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	b0 00                	mov    al,0x0
c000fc58:	83 c4 18             	add    esp,0x18
c000fc5b:	5b                   	pop    ebx
c000fc5c:	c3                   	ret    
c000fc5d:	8d 76 00             	lea    esi,[esi+0x0]

c000fc60 <tcp_output_segment>:
c000fc60:	56                   	push   esi
c000fc61:	53                   	push   ebx
c000fc62:	83 ec 14             	sub    esp,0x14
c000fc65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc69:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc70:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	50                   	push   eax
c000fc77:	e8 90 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc86:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc8a:	0f b7 c0             	movzx  eax,ax
c000fc8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc91:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	50                   	push   eax
c000fc98:	e8 4b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fca4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fcab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcaf:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fcb3:	0f b7 c0             	movzx  eax,ax
c000fcb6:	01 c2                	add    edx,eax
c000fcb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcc6:	83 c0 14             	add    eax,0x14
c000fcc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd1:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcd4:	0f b6 c0             	movzx  eax,al
c000fcd7:	83 e0 01             	and    eax,0x1
c000fcda:	74 10                	je     c000fcec <tcp_output_segment+0x8c>
c000fcdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce0:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fce6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fceb:	90                   	nop
c000fcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf0:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fcf4:	98                   	cwde   
c000fcf5:	83 f8 ff             	cmp    eax,0xffffffff
c000fcf8:	75 0a                	jne    c000fd04 <tcp_output_segment+0xa4>
c000fcfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcfe:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fd04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd08:	85 c0                	test   eax,eax
c000fd0a:	74 0c                	je     c000fd18 <tcp_output_segment+0xb8>
c000fd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	85 c0                	test   eax,eax
c000fd14:	75 32                	jne    c000fd48 <tcp_output_segment+0xe8>
c000fd16:	66 90                	xchg   ax,ax
c000fd18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd1c:	83 c0 04             	add    eax,0x4
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	50                   	push   eax
c000fd23:	e8 dc 38 00 00       	call   c0013604 <ip_route>
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd34:	0f 84 46 01 00 00    	je     c000fe80 <tcp_output_segment+0x220>
c000fd3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fd41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd45:	89 10                	mov    DWORD PTR [eax],edx
c000fd47:	90                   	nop
c000fd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd4f:	85 c0                	test   eax,eax
c000fd51:	75 2d                	jne    c000fd80 <tcp_output_segment+0x120>
c000fd53:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fd59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd5d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fd60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd6a:	83 ec 0c             	sub    esp,0xc
c000fd6d:	50                   	push   eax
c000fd6e:	e8 99 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	89 c2                	mov    edx,eax
c000fd78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd7c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd7f:	90                   	nop
c000fd80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd91:	29 c2                	sub    edx,eax
c000fd93:	89 d0                	mov    eax,edx
c000fd95:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fda1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdb1:	89 d6                	mov    esi,edx
c000fdb3:	29 c6                	sub    esi,eax
c000fdb5:	89 f0                	mov    eax,esi
c000fdb7:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fdbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdc2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fdc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdcc:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdd1:	89 d6                	mov    esi,edx
c000fdd3:	29 c6                	sub    esi,eax
c000fdd5:	89 f0                	mov    eax,esi
c000fdd7:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fddf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fde6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fde9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fdf3:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fdf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe03:	0f b7 c8             	movzx  ecx,ax
c000fe06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe0a:	8d 70 04             	lea    esi,[eax+0x4]
c000fe0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe1c:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	51                   	push   ecx
c000fe23:	6a 06                	push   0x6
c000fe25:	56                   	push   esi
c000fe26:	52                   	push   edx
c000fe27:	50                   	push   eax
c000fe28:	e8 4b 33 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fe2d:	83 c4 20             	add    esp,0x20
c000fe30:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fe34:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fe3a:	83 c0 01             	add    eax,0x1
c000fe3d:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe4a:	0f b6 d8             	movzx  ebx,al
c000fe4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe51:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe54:	0f b6 c8             	movzx  ecx,al
c000fe57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe5b:	8d 70 04             	lea    esi,[eax+0x4]
c000fe5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	6a 06                	push   0x6
c000fe6e:	53                   	push   ebx
c000fe6f:	51                   	push   ecx
c000fe70:	56                   	push   esi
c000fe71:	52                   	push   edx
c000fe72:	50                   	push   eax
c000fe73:	e8 34 3f 00 00       	call   c0013dac <ip_output>
c000fe78:	83 c4 20             	add    esp,0x20
c000fe7b:	eb 07                	jmp    c000fe84 <tcp_output_segment+0x224>
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe80:	90                   	nop
c000fe81:	8d 76 00             	lea    esi,[esi+0x0]
c000fe84:	83 c4 14             	add    esp,0x14
c000fe87:	5b                   	pop    ebx
c000fe88:	5e                   	pop    esi
c000fe89:	c3                   	ret    
c000fe8a:	66 90                	xchg   ax,ax

c000fe8c <tcp_output>:
c000fe8c:	56                   	push   esi
c000fe8d:	53                   	push   ebx
c000fe8e:	83 ec 24             	sub    esp,0x24
c000fe91:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe96:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe9a:	75 08                	jne    c000fea4 <tcp_output+0x18>
c000fe9c:	b0 00                	mov    al,0x0
c000fe9e:	e9 6d 04 00 00       	jmp    c0010310 <tcp_output+0x484>
c000fea3:	90                   	nop
c000fea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fea8:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000feac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000feb0:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000feb3:	0f b7 d8             	movzx  ebx,ax
c000feb6:	0f b7 ca             	movzx  ecx,dx
c000feb9:	39 cb                	cmp    ebx,ecx
c000febb:	76 03                	jbe    c000fec0 <tcp_output+0x34>
c000febd:	89 d0                	mov    eax,edx
c000febf:	90                   	nop
c000fec0:	0f b7 c0             	movzx  eax,ax
c000fec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fecb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fed6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fed9:	0f b6 c0             	movzx  eax,al
c000fedc:	83 e0 02             	and    eax,0x2
c000fedf:	74 4f                	je     c000ff30 <tcp_output+0xa4>
c000fee1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fee6:	74 34                	je     c000ff1c <tcp_output+0x90>
c000fee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	50                   	push   eax
c000fef6:	e8 11 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	89 c2                	mov    edx,eax
c000ff00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff04:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000ff07:	29 c2                	sub    edx,eax
c000ff09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff10:	0f b7 c0             	movzx  eax,ax
c000ff13:	01 d0                	add    eax,edx
c000ff15:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ff19:	73 15                	jae    c000ff30 <tcp_output+0xa4>
c000ff1b:	90                   	nop
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ff23:	e8 54 fc ff ff       	call   c000fb7c <tcp_send_empty_ack>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	e9 e0 03 00 00       	jmp    c0010310 <tcp_output+0x484>
c000ff30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff34:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ff40:	0f 84 ea 02 00 00    	je     c0010230 <tcp_output+0x3a4>
c000ff46:	eb 0c                	jmp    c000ff54 <tcp_output+0xc8>
c000ff48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff52:	66 90                	xchg   ax,ax
c000ff54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 ea                	jne    c000ff48 <tcp_output+0xbc>
c000ff5e:	e9 cd 02 00 00       	jmp    c0010230 <tcp_output+0x3a4>
c000ff63:	90                   	nop
c000ff64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff6b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff6f:	0f b7 c0             	movzx  eax,ax
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	50                   	push   eax
c000ff76:	e8 6d 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff7b:	83 c4 10             	add    esp,0x10
c000ff7e:	0f b7 c0             	movzx  eax,ax
c000ff81:	83 e0 04             	and    eax,0x4
c000ff84:	74 16                	je     c000ff9c <tcp_output+0x110>
c000ff86:	83 ec 08             	sub    esp,0x8
c000ff89:	68 b3 09 03 c0       	push   0xc00309b3
c000ff8e:	68 a6 fa 02 c0       	push   0xc002faa6
c000ff93:	e8 f8 fb 00 00       	call   c001fb90 <CPrintf>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	90                   	nop
c000ff9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ffa3:	85 c0                	test   eax,eax
c000ffa5:	74 45                	je     c000ffec <tcp_output+0x160>
c000ffa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffae:	0f b6 c0             	movzx  eax,al
c000ffb1:	83 e0 44             	and    eax,0x44
c000ffb4:	75 36                	jne    c000ffec <tcp_output+0x160>
c000ffb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffba:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffbd:	85 c0                	test   eax,eax
c000ffbf:	74 33                	je     c000fff4 <tcp_output+0x168>
c000ffc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffca:	85 c0                	test   eax,eax
c000ffcc:	75 1e                	jne    c000ffec <tcp_output+0x160>
c000ffce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd2:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffd5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ffd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffdf:	0f b7 d2             	movzx  edx,dx
c000ffe2:	0f b7 c0             	movzx  eax,ax
c000ffe5:	39 c2                	cmp    edx,eax
c000ffe7:	72 0b                	jb     c000fff4 <tcp_output+0x168>
c000ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffec:	b8 01 00 00 00       	mov    eax,0x1
c000fff1:	eb 09                	jmp    c000fffc <tcp_output+0x170>
c000fff3:	90                   	nop
c000fff4:	b8 00 00 00 00       	mov    eax,0x0
c000fff9:	8d 76 00             	lea    esi,[esi+0x0]
c000fffc:	85 c0                	test   eax,eax
c000fffe:	75 18                	jne    c0010018 <tcp_output+0x18c>
c0010000:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010004:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010007:	0f b6 c0             	movzx  eax,al
c001000a:	25 a0 00 00 00       	and    eax,0xa0
c001000f:	0f 84 5b 02 00 00    	je     c0010270 <tcp_output+0x3e4>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001c:	8b 10                	mov    edx,DWORD PTR [eax]
c001001e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010022:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010029:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001002c:	83 f8 02             	cmp    eax,0x2
c001002f:	74 3f                	je     c0010070 <tcp_output+0x1e4>
c0010031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010035:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010038:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	6a 10                	push   0x10
c0010041:	e8 a2 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	89 c1                	mov    ecx,eax
c001004b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001004f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010052:	89 d8                	mov    eax,ebx
c0010054:	09 c8                	or     eax,ecx
c0010056:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001005a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001005e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010061:	83 e0 fc             	and    eax,0xfffffffc
c0010064:	88 c2                	mov    dl,al
c0010066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001006d:	8d 76 00             	lea    esi,[esi+0x0]
c0010070:	83 ec 08             	sub    esp,0x8
c0010073:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010077:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007b:	e8 e0 fb ff ff       	call   c000fc60 <tcp_output_segment>
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010087:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001008a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	50                   	push   eax
c0010091:	e8 76 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010096:	83 c4 10             	add    esp,0x10
c0010099:	89 c3                	mov    ebx,eax
c001009b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001009f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a2:	0f b7 f0             	movzx  esi,ax
c00100a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100ac:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00100b0:	0f b7 c0             	movzx  eax,ax
c00100b3:	83 ec 0c             	sub    esp,0xc
c00100b6:	50                   	push   eax
c00100b7:	e8 2c 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	0f b7 c0             	movzx  eax,ax
c00100c2:	83 e0 03             	and    eax,0x3
c00100c5:	0f 95 c0             	setne  al
c00100c8:	0f b6 c0             	movzx  eax,al
c00100cb:	01 f0                	add    eax,esi
c00100cd:	01 d8                	add    eax,ebx
c00100cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00100da:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00100de:	79 0c                	jns    c00100ec <tcp_output+0x260>
c00100e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c00100eb:	90                   	nop
c00100ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100f3:	0f b7 d8             	movzx  ebx,ax
c00100f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100fd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010101:	0f b7 c0             	movzx  eax,ax
c0010104:	83 ec 0c             	sub    esp,0xc
c0010107:	50                   	push   eax
c0010108:	e8 db 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	0f b7 c0             	movzx  eax,ax
c0010113:	83 e0 03             	and    eax,0x3
c0010116:	0f 95 c0             	setne  al
c0010119:	0f b6 c0             	movzx  eax,al
c001011c:	01 d8                	add    eax,ebx
c001011e:	85 c0                	test   eax,eax
c0010120:	0f 8e ee 00 00 00    	jle    c0010214 <tcp_output+0x388>
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010134:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010137:	85 c0                	test   eax,eax
c0010139:	75 19                	jne    c0010154 <tcp_output+0x2c8>
c001013b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001013f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010143:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014e:	e9 d1 00 00 00       	jmp    c0010224 <tcp_output+0x398>
c0010153:	90                   	nop
c0010154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001015b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	50                   	push   eax
c0010162:	e8 a5 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	89 c3                	mov    ebx,eax
c001016c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010170:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010173:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	50                   	push   eax
c001017a:	e8 8d 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	29 c3                	sub    ebx,eax
c0010184:	89 d8                	mov    eax,ebx
c0010186:	79 74                	jns    c00101fc <tcp_output+0x370>
c0010188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001018c:	83 c0 7c             	add    eax,0x7c
c001018f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010193:	eb 0f                	jmp    c00101a4 <tcp_output+0x318>
c0010195:	8d 76 00             	lea    esi,[esi+0x0]
c0010198:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019c:	8b 00                	mov    eax,DWORD PTR [eax]
c001019e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a2:	66 90                	xchg   ax,ax
c00101a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101aa:	85 c0                	test   eax,eax
c00101ac:	74 36                	je     c00101e4 <tcp_output+0x358>
c00101ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00101b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	50                   	push   eax
c00101be:	e8 49 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	89 c3                	mov    ebx,eax
c00101c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	50                   	push   eax
c00101d6:	e8 31 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	29 c3                	sub    ebx,eax
c00101e0:	89 d8                	mov    eax,ebx
c00101e2:	78 b4                	js     c0010198 <tcp_output+0x30c>
c00101e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ee:	89 10                	mov    DWORD PTR [eax],edx
c00101f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101f8:	89 10                	mov    DWORD PTR [eax],edx
c00101fa:	eb 28                	jmp    c0010224 <tcp_output+0x398>
c00101fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010200:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010204:	89 10                	mov    DWORD PTR [eax],edx
c0010206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001020a:	8b 00                	mov    eax,DWORD PTR [eax]
c001020c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010210:	eb 12                	jmp    c0010224 <tcp_output+0x398>
c0010212:	66 90                	xchg   ax,ax
c0010214:	83 ec 0c             	sub    esp,0xc
c0010217:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001021b:	e8 b4 9d ff ff       	call   c0009fd4 <tcp_seg_free>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	90                   	nop
c0010224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010228:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001022b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001022f:	90                   	nop
c0010230:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010235:	74 3d                	je     c0010274 <tcp_output+0x3e8>
c0010237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001023e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010241:	83 ec 0c             	sub    esp,0xc
c0010244:	50                   	push   eax
c0010245:	e8 c2 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	89 c2                	mov    edx,eax
c001024f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010253:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010256:	29 c2                	sub    edx,eax
c0010258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001025f:	0f b7 c0             	movzx  eax,ax
c0010262:	01 d0                	add    eax,edx
c0010264:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010268:	0f 83 f6 fc ff ff    	jae    c000ff64 <tcp_output+0xd8>
c001026e:	eb 04                	jmp    c0010274 <tcp_output+0x3e8>
c0010270:	90                   	nop
c0010271:	8d 76 00             	lea    esi,[esi+0x0]
c0010274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010278:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001027b:	85 c0                	test   eax,eax
c001027d:	75 0d                	jne    c001028c <tcp_output+0x400>
c001027f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010283:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010289:	8d 76 00             	lea    esi,[esi+0x0]
c001028c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010291:	74 65                	je     c00102f8 <tcp_output+0x46c>
c0010293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010297:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c001029d:	0f b6 c0             	movzx  eax,al
c00102a0:	85 c0                	test   eax,eax
c00102a2:	75 54                	jne    c00102f8 <tcp_output+0x46c>
c00102a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	50                   	push   eax
c00102b2:	e8 55 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	89 c2                	mov    edx,eax
c00102bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c0:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102c3:	29 c2                	sub    edx,eax
c00102c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102cc:	0f b7 c0             	movzx  eax,ax
c00102cf:	01 c2                	add    edx,eax
c00102d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	39 c2                	cmp    edx,eax
c00102dd:	76 19                	jbe    c00102f8 <tcp_output+0x46c>
c00102df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102e3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00102ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f1:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00102f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00102ff:	83 e0 7f             	and    eax,0x7f
c0010302:	88 c2                	mov    dl,al
c0010304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010308:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001030b:	b0 00                	mov    al,0x0
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	83 c4 24             	add    esp,0x24
c0010313:	5b                   	pop    ebx
c0010314:	5e                   	pop    esi
c0010315:	c3                   	ret    
c0010316:	66 90                	xchg   ax,ax

c0010318 <tcp_rst>:
c0010318:	83 ec 2c             	sub    esp,0x2c
c001031b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001031f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010323:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010328:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001032d:	83 ec 04             	sub    esp,0x4
c0010330:	6a 00                	push   0x0
c0010332:	6a 14                	push   0x14
c0010334:	6a 01                	push   0x1
c0010336:	e8 f9 81 ff ff       	call   c0008534 <pbuf_alloc>
c001033b:	83 c4 10             	add    esp,0x10
c001033e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010342:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010347:	0f 84 37 01 00 00    	je     c0010484 <tcp_rst+0x16c>
c001034d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010351:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0010355:	0f b7 c0             	movzx  eax,ax
c0010358:	83 f8 13             	cmp    eax,0x13
c001035b:	77 17                	ja     c0010374 <tcp_rst+0x5c>
c001035d:	83 ec 08             	sub    esp,0x8
c0010360:	68 c0 06 03 c0       	push   0xc00306c0
c0010365:	68 a6 fa 02 c0       	push   0xc002faa6
c001036a:	e8 21 f8 00 00       	call   c001fb90 <CPrintf>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	66 90                	xchg   ax,ax
c0010374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001037b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001037f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010384:	83 ec 0c             	sub    esp,0xc
c0010387:	50                   	push   eax
c0010388:	e8 5b 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010394:	66 89 02             	mov    WORD PTR [edx],ax
c0010397:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	50                   	push   eax
c00103a0:	e8 43 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103b7:	e8 50 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	89 c2                	mov    edx,eax
c00103c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00103cf:	e8 38 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	89 c2                	mov    edx,eax
c00103d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	68 14 50 00 00       	push   0x5014
c00103e8:	e8 fb 07 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103f4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00103f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103fc:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010406:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001040c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010410:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001041a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001041d:	0f b7 c0             	movzx  eax,ax
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	50                   	push   eax
c0010424:	6a 06                	push   0x6
c0010426:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010432:	e8 41 2d 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010437:	83 c4 20             	add    esp,0x20
c001043a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001043e:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010442:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010448:	83 c0 01             	add    eax,0x1
c001044b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010451:	83 ec 08             	sub    esp,0x8
c0010454:	6a 06                	push   0x6
c0010456:	6a 00                	push   0x0
c0010458:	68 ff 00 00 00       	push   0xff
c001045d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010461:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010465:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010469:	e8 3e 39 00 00       	call   c0013dac <ip_output>
c001046e:	83 c4 20             	add    esp,0x20
c0010471:	83 ec 0c             	sub    esp,0xc
c0010474:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010478:	e8 df 7e ff ff       	call   c000835c <pbuf_free>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	eb 06                	jmp    c0010488 <tcp_rst+0x170>
c0010482:	66 90                	xchg   ax,ax
c0010484:	90                   	nop
c0010485:	8d 76 00             	lea    esi,[esi+0x0]
c0010488:	83 c4 2c             	add    esp,0x2c
c001048b:	c3                   	ret    

c001048c <tcp_rexmit_rto>:
c001048c:	83 ec 1c             	sub    esp,0x1c
c001048f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010493:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010496:	85 c0                	test   eax,eax
c0010498:	74 7a                	je     c0010514 <tcp_rexmit_rto+0x88>
c001049a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001049e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104a5:	eb 0d                	jmp    c00104b4 <tcp_rexmit_rto+0x28>
c00104a7:	90                   	nop
c00104a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104b2:	66 90                	xchg   ax,ax
c00104b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ba:	85 c0                	test   eax,eax
c00104bc:	75 ea                	jne    c00104a8 <tcp_rexmit_rto+0x1c>
c00104be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00104c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c9:	89 10                	mov    DWORD PTR [eax],edx
c00104cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cf:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00104d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104d6:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00104d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104dd:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00104e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e8:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104eb:	83 c0 01             	add    eax,0x1
c00104ee:	88 c2                	mov    dl,al
c00104f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104f4:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104fb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010502:	83 ec 0c             	sub    esp,0xc
c0010505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010509:	e8 7e f9 ff ff       	call   c000fe8c <tcp_output>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	eb 05                	jmp    c0010518 <tcp_rexmit_rto+0x8c>
c0010513:	90                   	nop
c0010514:	90                   	nop
c0010515:	8d 76 00             	lea    esi,[esi+0x0]
c0010518:	83 c4 1c             	add    esp,0x1c
c001051b:	c3                   	ret    

c001051c <tcp_rexmit>:
c001051c:	53                   	push   ebx
c001051d:	83 ec 18             	sub    esp,0x18
c0010520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010524:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010527:	85 c0                	test   eax,eax
c0010529:	0f 84 a9 00 00 00    	je     c00105d8 <tcp_rexmit+0xbc>
c001052f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010533:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010536:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001053a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001053e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010544:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001054b:	83 c0 78             	add    eax,0x78
c001054e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010552:	eb 0c                	jmp    c0010560 <tcp_rexmit+0x44>
c0010554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010558:	8b 00                	mov    eax,DWORD PTR [eax]
c001055a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001055e:	66 90                	xchg   ax,ax
c0010560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010564:	8b 00                	mov    eax,DWORD PTR [eax]
c0010566:	85 c0                	test   eax,eax
c0010568:	74 36                	je     c00105a0 <tcp_rexmit+0x84>
c001056a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010570:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 8d 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 c3                	mov    ebx,eax
c0010584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010588:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001058b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001058e:	83 ec 0c             	sub    esp,0xc
c0010591:	50                   	push   eax
c0010592:	e8 75 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	29 c3                	sub    ebx,eax
c001059c:	89 d8                	mov    eax,ebx
c001059e:	78 b4                	js     c0010554 <tcp_rexmit+0x38>
c00105a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105aa:	89 10                	mov    DWORD PTR [eax],edx
c00105ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105b4:	89 10                	mov    DWORD PTR [eax],edx
c00105b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ba:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00105bd:	83 c0 01             	add    eax,0x1
c00105c0:	88 c2                	mov    dl,al
c00105c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00105c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105cd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105d4:	eb 06                	jmp    c00105dc <tcp_rexmit+0xc0>
c00105d6:	66 90                	xchg   ax,ax
c00105d8:	90                   	nop
c00105d9:	8d 76 00             	lea    esi,[esi+0x0]
c00105dc:	83 c4 18             	add    esp,0x18
c00105df:	5b                   	pop    ebx
c00105e0:	c3                   	ret    
c00105e1:	8d 76 00             	lea    esi,[esi+0x0]

c00105e4 <tcp_rexmit_fast>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105eb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105ee:	85 c0                	test   eax,eax
c00105f0:	0f 84 ca 00 00 00    	je     c00106c0 <tcp_rexmit_fast+0xdc>
c00105f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105fd:	0f b6 c0             	movzx  eax,al
c0010600:	83 e0 04             	and    eax,0x4
c0010603:	0f 85 b7 00 00 00    	jne    c00106c0 <tcp_rexmit_fast+0xdc>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010610:	e8 07 ff ff ff       	call   c001051c <tcp_rexmit>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010627:	0f b7 d2             	movzx  edx,dx
c001062a:	0f b7 c0             	movzx  eax,ax
c001062d:	39 c2                	cmp    edx,eax
c001062f:	76 17                	jbe    c0010648 <tcp_rexmit_fast+0x64>
c0010631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010635:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010638:	0f b7 c0             	movzx  eax,ax
c001063b:	d1 e8                	shr    eax,1
c001063d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010641:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010645:	eb 19                	jmp    c0010660 <tcp_rexmit_fast+0x7c>
c0010647:	90                   	nop
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010650:	0f b7 c0             	movzx  eax,ax
c0010653:	d1 e8                	shr    eax,1
c0010655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010659:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001065d:	8d 76 00             	lea    esi,[esi+0x0]
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c0010667:	0f b7 d0             	movzx  edx,ax
c001066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010671:	0f b7 c0             	movzx  eax,ax
c0010674:	01 c0                	add    eax,eax
c0010676:	39 c2                	cmp    edx,eax
c0010678:	7d 12                	jge    c001068c <tcp_rexmit_fast+0xa8>
c001067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010681:	d1 e0                	shl    eax,1
c0010683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010687:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001068b:	90                   	nop
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c0010693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010697:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001069a:	89 c1                	mov    ecx,eax
c001069c:	d1 e1                	shl    ecx,1
c001069e:	01 c8                	add    eax,ecx
c00106a0:	01 d0                	add    eax,edx
c00106a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106a6:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106b1:	83 c8 04             	or     eax,0x4
c00106b4:	88 c2                	mov    dl,al
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00106bd:	8d 76 00             	lea    esi,[esi+0x0]
c00106c0:	90                   	nop
c00106c1:	83 c4 0c             	add    esp,0xc
c00106c4:	c3                   	ret    
c00106c5:	8d 76 00             	lea    esi,[esi+0x0]

c00106c8 <tcp_keepalive>:
c00106c8:	83 ec 1c             	sub    esp,0x1c
c00106cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00106d2:	83 e8 01             	sub    eax,0x1
c00106d5:	83 ec 0c             	sub    esp,0xc
c00106d8:	50                   	push   eax
c00106d9:	e8 2e 05 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	50                   	push   eax
c00106e2:	6a 00                	push   0x0
c00106e4:	6a 00                	push   0x0
c00106e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106ea:	e8 f1 e2 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00106fb:	0f 84 87 00 00 00    	je     c0010788 <tcp_keepalive+0xc0>
c0010701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001070c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010713:	0f b7 d0             	movzx  edx,ax
c0010716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001071a:	8d 48 04             	lea    ecx,[eax+0x4]
c001071d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	52                   	push   edx
c0010725:	6a 06                	push   0x6
c0010727:	51                   	push   ecx
c0010728:	50                   	push   eax
c0010729:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001072d:	e8 46 2a 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010732:	83 c4 20             	add    esp,0x20
c0010735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010739:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001073d:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010743:	83 c0 01             	add    eax,0x1
c0010746:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001074c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010750:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010753:	0f b6 d0             	movzx  edx,al
c0010756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075a:	8d 48 04             	lea    ecx,[eax+0x4]
c001075d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010761:	83 ec 08             	sub    esp,0x8
c0010764:	6a 06                	push   0x6
c0010766:	6a 00                	push   0x0
c0010768:	52                   	push   edx
c0010769:	51                   	push   ecx
c001076a:	50                   	push   eax
c001076b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001076f:	e8 38 36 00 00       	call   c0013dac <ip_output>
c0010774:	83 c4 20             	add    esp,0x20
c0010777:	83 ec 0c             	sub    esp,0xc
c001077a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001077e:	e8 d9 7b ff ff       	call   c000835c <pbuf_free>
c0010783:	83 c4 10             	add    esp,0x10
c0010786:	eb 04                	jmp    c001078c <tcp_keepalive+0xc4>
c0010788:	90                   	nop
c0010789:	8d 76 00             	lea    esi,[esi+0x0]
c001078c:	83 c4 1c             	add    esp,0x1c
c001078f:	c3                   	ret    

c0010790 <tcp_zero_window_probe>:
c0010790:	53                   	push   ebx
c0010791:	83 ec 28             	sub    esp,0x28
c0010794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010798:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001079b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001079f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107a4:	75 0e                	jne    c00107b4 <tcp_zero_window_probe+0x24>
c00107a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107aa:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00107ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00107b1:	8d 76 00             	lea    esi,[esi+0x0]
c00107b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107b9:	0f 84 95 01 00 00    	je     c0010954 <tcp_zero_window_probe+0x1c4>
c00107bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107c6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107ca:	0f b7 c0             	movzx  eax,ax
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	50                   	push   eax
c00107d1:	e8 12 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107d6:	83 c4 10             	add    esp,0x10
c00107d9:	0f b7 c0             	movzx  eax,ax
c00107dc:	83 e0 01             	and    eax,0x1
c00107df:	74 17                	je     c00107f8 <tcp_zero_window_probe+0x68>
c00107e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	85 c0                	test   eax,eax
c00107ed:	75 09                	jne    c00107f8 <tcp_zero_window_probe+0x68>
c00107ef:	b8 01 00 00 00       	mov    eax,0x1
c00107f4:	eb 0a                	jmp    c0010800 <tcp_zero_window_probe+0x70>
c00107f6:	66 90                	xchg   ax,ax
c00107f8:	b8 00 00 00 00       	mov    eax,0x0
c00107fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010800:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010804:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010809:	85 c0                	test   eax,eax
c001080b:	0f 94 c0             	sete   al
c001080e:	0f b6 c0             	movzx  eax,al
c0010811:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001081a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001081d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010820:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010825:	52                   	push   edx
c0010826:	50                   	push   eax
c0010827:	6a 00                	push   0x0
c0010829:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001082d:	e8 ae e1 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010839:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001083e:	0f 84 14 01 00 00    	je     c0010958 <tcp_zero_window_probe+0x1c8>
c0010844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001084b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001084f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010854:	85 c0                	test   eax,eax
c0010856:	74 28                	je     c0010880 <tcp_zero_window_probe+0xf0>
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010860:	80 e4 c0             	and    ah,0xc0
c0010863:	89 c3                	mov    ebx,eax
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	6a 11                	push   0x11
c001086a:	e8 79 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	09 d8                	or     eax,ebx
c0010874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010878:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001087c:	eb 5a                	jmp    c00108d8 <tcp_zero_window_probe+0x148>
c001087e:	66 90                	xchg   ax,ax
c0010880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010895:	83 c0 14             	add    eax,0x14
c0010898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001089c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00108a4:	0f b7 c0             	movzx  eax,ax
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	50                   	push   eax
c00108ab:	e8 38 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00108b0:	83 c4 10             	add    esp,0x10
c00108b3:	0f b7 c0             	movzx  eax,ax
c00108b6:	c1 e8 0c             	shr    eax,0xc
c00108b9:	c1 e0 02             	shl    eax,0x2
c00108bc:	0f b7 d0             	movzx  edx,ax
c00108bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108c6:	52                   	push   edx
c00108c7:	6a 01                	push   0x1
c00108c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00108cd:	50                   	push   eax
c00108ce:	e8 29 87 ff ff       	call   c0008ffc <pbuf_copy_partial>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	66 90                	xchg   ax,ax
c00108d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108df:	0f b7 d0             	movzx  edx,ax
c00108e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e6:	8d 48 04             	lea    ecx,[eax+0x4]
c00108e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	52                   	push   edx
c00108f1:	6a 06                	push   0x6
c00108f3:	51                   	push   ecx
c00108f4:	50                   	push   eax
c00108f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108f9:	e8 7a 28 00 00       	call   c0013178 <inet_chksum_pseudo>
c00108fe:	83 c4 20             	add    esp,0x20
c0010901:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010905:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010909:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001090f:	83 c0 01             	add    eax,0x1
c0010912:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001091f:	0f b6 d0             	movzx  edx,al
c0010922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010926:	8d 48 04             	lea    ecx,[eax+0x4]
c0010929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001092d:	83 ec 08             	sub    esp,0x8
c0010930:	6a 06                	push   0x6
c0010932:	6a 00                	push   0x0
c0010934:	52                   	push   edx
c0010935:	51                   	push   ecx
c0010936:	50                   	push   eax
c0010937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001093b:	e8 6c 34 00 00       	call   c0013dac <ip_output>
c0010940:	83 c4 20             	add    esp,0x20
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001094a:	e8 0d 7a ff ff       	call   c000835c <pbuf_free>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	eb 08                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010954:	90                   	nop
c0010955:	eb 05                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010957:	90                   	nop
c0010958:	90                   	nop
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	83 c4 28             	add    esp,0x28
c001095f:	5b                   	pop    ebx
c0010960:	c3                   	ret    
c0010961:	66 90                	xchg   ax,ax
c0010963:	90                   	nop

c0010964 <sys_timeout>:
c0010964:	83 ec 1c             	sub    esp,0x1c
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	6a 0b                	push   0xb
c001096c:	e8 03 70 ff ff       	call   c0007974 <memp_malloc>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010978:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001097d:	75 25                	jne    c00109a4 <sys_timeout+0x40>
c001097f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010984:	0f 85 3e 01 00 00    	jne    c0010ac8 <sys_timeout+0x164>
c001098a:	83 ec 08             	sub    esp,0x8
c001098d:	68 cc 09 03 c0       	push   0xc00309cc
c0010992:	68 a6 fa 02 c0       	push   0xc002faa6
c0010997:	e8 f4 f1 00 00       	call   c001fb90 <CPrintf>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	e9 24 01 00 00       	jmp    c0010ac8 <sys_timeout+0x164>
c00109a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00109ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00109cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109cf:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109d4:	85 c0                	test   eax,eax
c00109d6:	75 10                	jne    c00109e8 <sys_timeout+0x84>
c00109d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109dc:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109e1:	e9 e6 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c00109e6:	66 90                	xchg   ax,ax
c00109e8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109f0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109f4:	73 2e                	jae    c0010a24 <sys_timeout+0xc0>
c00109f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109fe:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a03:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010a07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a0a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a14:	89 10                	mov    DWORD PTR [eax],edx
c0010a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a1a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a1f:	e9 a8 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c0010a24:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a2d:	e9 86 00 00 00       	jmp    c0010ab8 <sys_timeout+0x154>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a42:	29 c2                	sub    edx,eax
c0010a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a51:	85 c0                	test   eax,eax
c0010a53:	74 17                	je     c0010a6c <sys_timeout+0x108>
c0010a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a65:	39 c2                	cmp    edx,eax
c0010a67:	76 43                	jbe    c0010aac <sys_timeout+0x148>
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a72:	85 c0                	test   eax,eax
c0010a74:	74 1e                	je     c0010a94 <sys_timeout+0x130>
c0010a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a7c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a8c:	29 d1                	sub    ecx,edx
c0010a8e:	89 ca                	mov    edx,ecx
c0010a90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a93:	90                   	nop
c0010a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a9e:	89 10                	mov    DWORD PTR [eax],edx
c0010aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa8:	89 10                	mov    DWORD PTR [eax],edx
c0010aaa:	eb 20                	jmp    c0010acc <sys_timeout+0x168>
c0010aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010abd:	0f 85 71 ff ff ff    	jne    c0010a34 <sys_timeout+0xd0>
c0010ac3:	eb 07                	jmp    c0010acc <sys_timeout+0x168>
c0010ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac8:	90                   	nop
c0010ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	c3                   	ret    

c0010ad0 <tcpip_tcp_timer>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 34 a5 ff ff       	call   c000b00c <tcp_tmr>
c0010ad8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010add:	85 c0                	test   eax,eax
c0010adf:	75 0b                	jne    c0010aec <tcpip_tcp_timer+0x1c>
c0010ae1:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 1e                	je     c0010b08 <tcpip_tcp_timer+0x38>
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	83 ec 04             	sub    esp,0x4
c0010aef:	6a 00                	push   0x0
c0010af1:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010af6:	68 fa 00 00 00       	push   0xfa
c0010afb:	e8 64 fe ff ff       	call   c0010964 <sys_timeout>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	eb 0f                	jmp    c0010b14 <tcpip_tcp_timer+0x44>
c0010b05:	8d 76 00             	lea    esi,[esi+0x0]
c0010b08:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	8d 76 00             	lea    esi,[esi+0x0]

c0010b1c <tcp_timer_needed>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010b24:	85 c0                	test   eax,eax
c0010b26:	75 38                	jne    c0010b60 <tcp_timer_needed+0x44>
c0010b28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	75 0b                	jne    c0010b3c <tcp_timer_needed+0x20>
c0010b31:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b36:	85 c0                	test   eax,eax
c0010b38:	74 26                	je     c0010b60 <tcp_timer_needed+0x44>
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010b46:	83 ec 04             	sub    esp,0x4
c0010b49:	6a 00                	push   0x0
c0010b4b:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010b50:	68 fa 00 00 00       	push   0xfa
c0010b55:	e8 0a fe ff ff       	call   c0010964 <sys_timeout>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	8d 76 00             	lea    esi,[esi+0x0]

c0010b68 <ip_reass_timer>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	e8 f0 3a 00 00       	call   c0014660 <ip_reass_tmr>
c0010b70:	83 ec 04             	sub    esp,0x4
c0010b73:	6a 00                	push   0x0
c0010b75:	68 68 0b 01 c0       	push   0xc0010b68
c0010b7a:	68 e8 03 00 00       	push   0x3e8
c0010b7f:	e8 e0 fd ff ff       	call   c0010964 <sys_timeout>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	90                   	nop
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <arp_timer>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 60 0d 00 00       	call   c00118f4 <etharp_tmr>
c0010b94:	83 ec 04             	sub    esp,0x4
c0010b97:	6a 00                	push   0x0
c0010b99:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010b9e:	68 88 13 00 00       	push   0x1388
c0010ba3:	e8 bc fd ff ff       	call   c0010964 <sys_timeout>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	90                   	nop
c0010bac:	83 c4 0c             	add    esp,0xc
c0010baf:	c3                   	ret    

c0010bb0 <sys_timeouts_init>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	83 ec 04             	sub    esp,0x4
c0010bb6:	6a 00                	push   0x0
c0010bb8:	68 68 0b 01 c0       	push   0xc0010b68
c0010bbd:	68 e8 03 00 00       	push   0x3e8
c0010bc2:	e8 9d fd ff ff       	call   c0010964 <sys_timeout>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	83 ec 04             	sub    esp,0x4
c0010bcd:	6a 00                	push   0x0
c0010bcf:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010bd4:	68 88 13 00 00       	push   0x1388
c0010bd9:	e8 86 fd ff ff       	call   c0010964 <sys_timeout>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	90                   	nop
c0010be2:	83 c4 0c             	add    esp,0xc
c0010be5:	c3                   	ret    
c0010be6:	66 90                	xchg   ax,ax

c0010be8 <sys_untimeout>:
c0010be8:	83 ec 1c             	sub    esp,0x1c
c0010beb:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 84 b4 00 00 00    	je     c0010cac <sys_untimeout+0xc4>
c0010bf8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c09:	e9 8e 00 00 00       	jmp    c0010c9c <sys_untimeout+0xb4>
c0010c0e:	66 90                	xchg   ax,ax
c0010c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c17:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c1b:	75 6b                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c24:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010c28:	75 5e                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c2a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c2f:	75 0f                	jne    c0010c40 <sys_untimeout+0x58>
c0010c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c37:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c3c:	eb 0e                	jmp    c0010c4c <sys_untimeout+0x64>
c0010c3e:	66 90                	xchg   ax,ax
c0010c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c44:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c4a:	89 10                	mov    DWORD PTR [eax],edx
c0010c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c52:	85 c0                	test   eax,eax
c0010c54:	74 1e                	je     c0010c74 <sys_untimeout+0x8c>
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c5c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c6c:	01 ca                	add    edx,ecx
c0010c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c7b:	6a 0b                	push   0xb
c0010c7d:	e8 1e 6e ff ff       	call   c0007aa0 <memp_free>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	eb 29                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010c87:	90                   	nop
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ca1:	0f 85 69 ff ff ff    	jne    c0010c10 <sys_untimeout+0x28>
c0010ca7:	90                   	nop
c0010ca8:	eb 06                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb0:	83 c4 1c             	add    esp,0x1c
c0010cb3:	c3                   	ret    

c0010cb4 <sys_timeouts_mbox_fetch>:
c0010cb4:	83 ec 1c             	sub    esp,0x1c
c0010cb7:	90                   	nop
c0010cb8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cbd:	85 c0                	test   eax,eax
c0010cbf:	75 1f                	jne    c0010ce0 <sys_timeouts_mbox_fetch+0x2c>
c0010cc1:	83 ec 04             	sub    esp,0x4
c0010cc4:	6a 00                	push   0x0
c0010cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cce:	e8 59 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cda:	e9 cd 00 00 00       	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010cdf:	90                   	nop
c0010ce0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce8:	85 c0                	test   eax,eax
c0010cea:	74 24                	je     c0010d10 <sys_timeouts_mbox_fetch+0x5c>
c0010cec:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf4:	83 ec 04             	sub    esp,0x4
c0010cf7:	50                   	push   eax
c0010cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d00:	e8 27 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d0c:	eb 0a                	jmp    c0010d18 <sys_timeouts_mbox_fetch+0x64>
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010d18:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010d1d:	75 5d                	jne    c0010d7c <sys_timeouts_mbox_fetch+0xc8>
c0010d1f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d2e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d4f:	6a 0b                	push   0xb
c0010d51:	e8 4a 6d ff ff       	call   c0007aa0 <memp_free>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d5e:	0f 84 54 ff ff ff    	je     c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d6f:	ff d0                	call   eax
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	e9 3f ff ff ff       	jmp    c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d79:	8d 76 00             	lea    esi,[esi+0x0]
c0010d7c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d84:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d88:	73 16                	jae    c0010da0 <sys_timeouts_mbox_fetch+0xec>
c0010d8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d8f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d92:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d97:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d9e:	eb 0c                	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	90                   	nop
c0010dad:	83 c4 1c             	add    esp,0x1c
c0010db0:	c3                   	ret    
c0010db1:	66 90                	xchg   ax,ax
c0010db3:	90                   	nop

c0010db4 <udp_input>:
c0010db4:	53                   	push   ebx
c0010db5:	83 ec 28             	sub    esp,0x28
c0010db8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010dbe:	83 c0 01             	add    eax,0x1
c0010dc1:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dd9:	0f b7 d8             	movzx  ebx,ax
c0010ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010de3:	0f b7 c0             	movzx  eax,ax
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	50                   	push   eax
c0010dea:	e8 f9 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	0f b7 c0             	movzx  eax,ax
c0010df5:	c1 e8 08             	shr    eax,0x8
c0010df8:	0f b7 c0             	movzx  eax,ax
c0010dfb:	83 e0 0f             	and    eax,0xf
c0010dfe:	83 c0 02             	add    eax,0x2
c0010e01:	c1 e0 02             	shl    eax,0x2
c0010e04:	39 c3                	cmp    ebx,eax
c0010e06:	7c 3c                	jl     c0010e44 <udp_input+0x90>
c0010e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e0f:	0f b7 c0             	movzx  eax,ax
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	50                   	push   eax
c0010e16:	e8 cd fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	0f b7 c0             	movzx  eax,ax
c0010e21:	c1 e8 08             	shr    eax,0x8
c0010e24:	83 e0 0f             	and    eax,0xf
c0010e27:	c1 e0 02             	shl    eax,0x2
c0010e2a:	f7 d8                	neg    eax
c0010e2c:	98                   	cwde   
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	50                   	push   eax
c0010e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e35:	e8 86 73 ff ff       	call   c00081c0 <pbuf_header>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 34                	je     c0010e78 <udp_input+0xc4>
c0010e44:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010e4a:	83 c0 01             	add    eax,0x1
c0010e4d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010e53:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e59:	83 c0 01             	add    eax,0x1
c0010e5c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e69:	e8 ee 74 ff ff       	call   c000835c <pbuf_free>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	e9 aa 03 00 00       	jmp    c0011220 <udp_input+0x46c>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e83:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e8f:	50                   	push   eax
c0010e90:	e8 bb 2f 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ea3:	0f b7 c0             	movzx  eax,ax
c0010ea6:	83 ec 0c             	sub    esp,0xc
c0010ea9:	50                   	push   eax
c0010eaa:	e8 39 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ebb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010ebf:	0f b7 c0             	movzx  eax,ax
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	50                   	push   eax
c0010ec6:	e8 1d fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010edb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ee0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ee8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010eed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ef1:	e9 0a 01 00 00       	jmp    c0011000 <udp_input+0x24c>
c0010ef6:	66 90                	xchg   ax,ax
c0010ef8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f01:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010f05:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010f0a:	0f b7 c0             	movzx  eax,ax
c0010f0d:	39 c2                	cmp    edx,eax
c0010f0f:	75 57                	jne    c0010f68 <udp_input+0x1b4>
c0010f11:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f16:	85 c0                	test   eax,eax
c0010f18:	75 12                	jne    c0010f2c <udp_input+0x178>
c0010f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1e:	85 c0                	test   eax,eax
c0010f20:	74 22                	je     c0010f44 <udp_input+0x190>
c0010f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 18                	je     c0010f44 <udp_input+0x190>
c0010f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f32:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f37:	39 c2                	cmp    edx,eax
c0010f39:	74 09                	je     c0010f44 <udp_input+0x190>
c0010f3b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 24                	je     c0010f68 <udp_input+0x1b4>
c0010f44:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010f49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f4e:	75 18                	jne    c0010f68 <udp_input+0x1b4>
c0010f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f54:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f57:	0f b6 c0             	movzx  eax,al
c0010f5a:	83 e0 04             	and    eax,0x4
c0010f5d:	75 09                	jne    c0010f68 <udp_input+0x1b4>
c0010f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f67:	90                   	nop
c0010f68:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f6d:	85 c0                	test   eax,eax
c0010f6f:	74 7b                	je     c0010fec <udp_input+0x238>
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f78:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f7d:	0f b7 c0             	movzx  eax,ax
c0010f80:	39 c2                	cmp    edx,eax
c0010f82:	75 68                	jne    c0010fec <udp_input+0x238>
c0010f84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f88:	83 c0 04             	add    eax,0x4
c0010f8b:	74 1b                	je     c0010fa8 <udp_input+0x1f4>
c0010f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 10                	je     c0010fa8 <udp_input+0x1f4>
c0010f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f9f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010fa4:	39 c2                	cmp    edx,eax
c0010fa6:	75 44                	jne    c0010fec <udp_input+0x238>
c0010fa8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010fad:	74 29                	je     c0010fd8 <udp_input+0x224>
c0010faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fbd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fce:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010fd3:	eb 37                	jmp    c001100c <udp_input+0x258>
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010fde:	83 c0 01             	add    eax,0x1
c0010fe1:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010fe7:	eb 23                	jmp    c001100c <udp_input+0x258>
c0010fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fff:	90                   	nop
c0011000:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011005:	0f 85 ed fe ff ff    	jne    c0010ef8 <udp_input+0x144>
c001100b:	90                   	nop
c001100c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011011:	75 09                	jne    c001101c <udp_input+0x268>
c0011013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001101b:	90                   	nop
c001101c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011021:	75 15                	jne    c0011038 <udp_input+0x284>
c0011023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011027:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001102a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001102f:	39 c2                	cmp    edx,eax
c0011031:	0f 85 d9 01 00 00    	jne    c0011210 <udp_input+0x45c>
c0011037:	90                   	nop
c0011038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001103c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011040:	0f b7 c0             	movzx  eax,ax
c0011043:	85 c0                	test   eax,eax
c0011045:	74 61                	je     c00110a8 <udp_input+0x2f4>
c0011047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001104b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001104e:	0f b7 c0             	movzx  eax,ax
c0011051:	83 ec 0c             	sub    esp,0xc
c0011054:	50                   	push   eax
c0011055:	6a 11                	push   0x11
c0011057:	68 98 68 03 c0       	push   0xc0036898
c001105c:	68 90 68 03 c0       	push   0xc0036890
c0011061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011065:	e8 0e 21 00 00       	call   c0013178 <inet_chksum_pseudo>
c001106a:	83 c4 20             	add    esp,0x20
c001106d:	0f b7 c0             	movzx  eax,ax
c0011070:	85 c0                	test   eax,eax
c0011072:	74 34                	je     c00110a8 <udp_input+0x2f4>
c0011074:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001107a:	83 c0 01             	add    eax,0x1
c001107d:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011083:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011089:	83 c0 01             	add    eax,0x1
c001108c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011099:	e8 be 72 ff ff       	call   c000835c <pbuf_free>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	e9 7a 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	6a f8                	push   0xfffffff8
c00110ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110b1:	e8 0a 71 ff ff       	call   c00081c0 <pbuf_header>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	0f b6 c0             	movzx  eax,al
c00110bc:	85 c0                	test   eax,eax
c00110be:	74 38                	je     c00110f8 <udp_input+0x344>
c00110c0:	83 ec 08             	sub    esp,0x8
c00110c3:	68 09 0a 03 c0       	push   0xc0030a09
c00110c8:	68 a6 fa 02 c0       	push   0xc002faa6
c00110cd:	e8 be ea 00 00       	call   c001fb90 <CPrintf>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110db:	83 c0 01             	add    eax,0x1
c00110de:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110eb:	e8 6c 72 ff ff       	call   c000835c <pbuf_free>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	e9 28 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110fd:	74 51                	je     c0011150 <udp_input+0x39c>
c00110ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011103:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011106:	85 c0                	test   eax,eax
c0011108:	74 32                	je     c001113c <udp_input+0x388>
c001110a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011111:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011116:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001111a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	51                   	push   ecx
c0011121:	68 90 68 03 c0       	push   0xc0036890
c0011126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001112a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001112e:	52                   	push   edx
c001112f:	ff d0                	call   eax
c0011131:	83 c4 20             	add    esp,0x20
c0011134:	e9 e7 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011139:	8d 76 00             	lea    esi,[esi+0x0]
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011143:	e8 14 72 ff ff       	call   c000835c <pbuf_free>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	e9 d0 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011150:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011155:	85 c0                	test   eax,eax
c0011157:	0f 85 83 00 00 00    	jne    c00111e0 <udp_input+0x42c>
c001115d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011162:	25 f0 00 00 00       	and    eax,0xf0
c0011167:	3d e0 00 00 00       	cmp    eax,0xe0
c001116c:	74 72                	je     c00111e0 <udp_input+0x42c>
c001116e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011172:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011175:	0f b7 c0             	movzx  eax,ax
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	50                   	push   eax
c001117c:	e8 67 fa fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	0f b7 c0             	movzx  eax,ax
c0011187:	c1 e8 08             	shr    eax,0x8
c001118a:	0f b7 c0             	movzx  eax,ax
c001118d:	83 e0 0f             	and    eax,0xf
c0011190:	83 c0 02             	add    eax,0x2
c0011193:	c1 e0 02             	shl    eax,0x2
c0011196:	98                   	cwde   
c0011197:	83 ec 08             	sub    esp,0x8
c001119a:	50                   	push   eax
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 1c 70 ff ff       	call   c00081c0 <pbuf_header>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ae:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00111b2:	74 18                	je     c00111cc <udp_input+0x418>
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	68 1d 0a 03 c0       	push   0xc0030a1d
c00111bc:	68 a6 fa 02 c0       	push   0xc002faa6
c00111c1:	e8 ca e9 00 00       	call   c001fb90 <CPrintf>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	8d 76 00             	lea    esi,[esi+0x0]
c00111cc:	83 ec 08             	sub    esp,0x8
c00111cf:	6a 03                	push   0x3
c00111d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d5:	e8 5e 1e 00 00       	call   c0013038 <icmp_dest_unreach>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	8d 76 00             	lea    esi,[esi+0x0]
c00111e0:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00111e6:	83 c0 01             	add    eax,0x1
c00111e9:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00111ef:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111f5:	83 c0 01             	add    eax,0x1
c00111f8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111fe:	83 ec 0c             	sub    esp,0xc
c0011201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011205:	e8 52 71 ff ff       	call   c000835c <pbuf_free>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	eb 11                	jmp    c0011220 <udp_input+0x46c>
c001120f:	90                   	nop
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011217:	e8 40 71 ff ff       	call   c000835c <pbuf_free>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	90                   	nop
c0011220:	90                   	nop
c0011221:	83 c4 28             	add    esp,0x28
c0011224:	5b                   	pop    ebx
c0011225:	c3                   	ret    
c0011226:	66 90                	xchg   ax,ax

c0011228 <udp_bind>:
c0011228:	83 ec 2c             	sub    esp,0x2c
c001122b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001122f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011234:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011239:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001123e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011242:	e9 8d 00 00 00       	jmp    c00112d4 <udp_bind+0xac>
c0011247:	90                   	nop
c0011248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001124c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011250:	75 26                	jne    c0011278 <udp_bind+0x50>
c0011252:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011257:	85 c0                	test   eax,eax
c0011259:	74 15                	je     c0011270 <udp_bind+0x48>
c001125b:	83 ec 08             	sub    esp,0x8
c001125e:	68 31 0a 03 c0       	push   0xc0030a31
c0011263:	68 a6 fa 02 c0       	push   0xc002faa6
c0011268:	e8 23 e9 00 00       	call   c001fb90 <CPrintf>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011275:	eb 51                	jmp    c00112c8 <udp_bind+0xa0>
c0011277:	90                   	nop
c0011278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001127c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011280:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011285:	0f b7 c0             	movzx  eax,ax
c0011288:	39 c2                	cmp    edx,eax
c001128a:	75 3c                	jne    c00112c8 <udp_bind+0xa0>
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	85 c0                	test   eax,eax
c0011292:	74 2c                	je     c00112c0 <udp_bind+0x98>
c0011294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011298:	8b 00                	mov    eax,DWORD PTR [eax]
c001129a:	85 c0                	test   eax,eax
c001129c:	74 22                	je     c00112c0 <udp_bind+0x98>
c001129e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112a3:	74 1b                	je     c00112c0 <udp_bind+0x98>
c00112a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ab:	85 c0                	test   eax,eax
c00112ad:	74 11                	je     c00112c0 <udp_bind+0x98>
c00112af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112bb:	39 c2                	cmp    edx,eax
c00112bd:	75 09                	jne    c00112c8 <udp_bind+0xa0>
c00112bf:	90                   	nop
c00112c0:	b0 f8                	mov    al,0xf8
c00112c2:	e9 dd 00 00 00       	jmp    c00113a4 <udp_bind+0x17c>
c00112c7:	90                   	nop
c00112c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112d3:	90                   	nop
c00112d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112d9:	0f 85 69 ff ff ff    	jne    c0011248 <udp_bind+0x20>
c00112df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112e4:	74 0a                	je     c00112f0 <udp_bind+0xc8>
c00112e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ec:	eb 0a                	jmp    c00112f8 <udp_bind+0xd0>
c00112ee:	66 90                	xchg   ax,ax
c00112f0:	b8 00 00 00 00       	mov    eax,0x0
c00112f5:	8d 76 00             	lea    esi,[esi+0x0]
c00112f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112fc:	89 02                	mov    DWORD PTR [edx],eax
c00112fe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011303:	85 c0                	test   eax,eax
c0011305:	75 6d                	jne    c0011374 <udp_bind+0x14c>
c0011307:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001130e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011313:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011317:	eb 3b                	jmp    c0011354 <udp_bind+0x12c>
c0011319:	8d 76 00             	lea    esi,[esi+0x0]
c001131c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011320:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011324:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011329:	0f b7 c0             	movzx  eax,ax
c001132c:	39 c2                	cmp    edx,eax
c001132e:	75 18                	jne    c0011348 <udp_bind+0x120>
c0011330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011334:	83 c0 01             	add    eax,0x1
c0011337:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001133c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011345:	eb 0d                	jmp    c0011354 <udp_bind+0x12c>
c0011347:	90                   	nop
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001134f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011353:	90                   	nop
c0011354:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011359:	74 0d                	je     c0011368 <udp_bind+0x140>
c001135b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011360:	3d ff ff 00 00       	cmp    eax,0xffff
c0011365:	75 b5                	jne    c001131c <udp_bind+0xf4>
c0011367:	90                   	nop
c0011368:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001136d:	74 05                	je     c0011374 <udp_bind+0x14c>
c001136f:	b0 f8                	mov    al,0xf8
c0011371:	eb 31                	jmp    c00113a4 <udp_bind+0x17c>
c0011373:	90                   	nop
c0011374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001137c:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011380:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011385:	85 c0                	test   eax,eax
c0011387:	75 17                	jne    c00113a0 <udp_bind+0x178>
c0011389:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001138f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011393:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001139a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001139f:	90                   	nop
c00113a0:	b0 00                	mov    al,0x0
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	83 c4 2c             	add    esp,0x2c
c00113a7:	c3                   	ret    

c00113a8 <udp_sendto_if>:
c00113a8:	83 ec 2c             	sub    esp,0x2c
c00113ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113bc:	0f b7 c0             	movzx  eax,ax
c00113bf:	85 c0                	test   eax,eax
c00113c1:	75 39                	jne    c00113fc <udp_sendto_if+0x54>
c00113c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113c7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113cb:	0f b7 d0             	movzx  edx,ax
c00113ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113d2:	83 ec 04             	sub    esp,0x4
c00113d5:	52                   	push   edx
c00113d6:	50                   	push   eax
c00113d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113db:	e8 48 fe ff ff       	call   c0011228 <udp_bind>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00113e7:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 0c                	je     c00113fc <udp_sendto_if+0x54>
c00113f0:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113f4:	e9 2b 02 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c00113f9:	8d 76 00             	lea    esi,[esi+0x0]
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	6a 08                	push   0x8
c0011401:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011405:	e8 b6 6d ff ff       	call   c00081c0 <pbuf_header>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 48                	je     c001145c <udp_sendto_if+0xb4>
c0011414:	83 ec 04             	sub    esp,0x4
c0011417:	6a 00                	push   0x0
c0011419:	6a 08                	push   0x8
c001141b:	6a 01                	push   0x1
c001141d:	e8 12 71 ff ff       	call   c0008534 <pbuf_alloc>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011429:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001142e:	75 08                	jne    c0011438 <udp_sendto_if+0x90>
c0011430:	b0 ff                	mov    al,0xff
c0011432:	e9 ed 01 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011437:	90                   	nop
c0011438:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001143c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001143f:	0f b7 c0             	movzx  eax,ax
c0011442:	85 c0                	test   eax,eax
c0011444:	74 1e                	je     c0011464 <udp_sendto_if+0xbc>
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001144d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011451:	e8 1e 78 ff ff       	call   c0008c74 <pbuf_chain>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	eb 09                	jmp    c0011464 <udp_sendto_if+0xbc>
c001145b:	90                   	nop
c001145c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011468:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001146c:	0f b7 c0             	movzx  eax,ax
c001146f:	83 f8 07             	cmp    eax,0x7
c0011472:	77 18                	ja     c001148c <udp_sendto_if+0xe4>
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	68 40 0a 03 c0       	push   0xc0030a40
c001147c:	68 a6 fa 02 c0       	push   0xc002faa6
c0011481:	e8 0a e7 00 00       	call   c001fb90 <CPrintf>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001149b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001149f:	0f b7 c0             	movzx  eax,ax
c00114a2:	83 ec 0c             	sub    esp,0xc
c00114a5:	50                   	push   eax
c00114a6:	e8 3d f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114b2:	66 89 02             	mov    WORD PTR [edx],ax
c00114b5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	50                   	push   eax
c00114be:	e8 25 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114c3:	83 c4 10             	add    esp,0x10
c00114c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114ca:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00114ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d2:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00114d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 0c                	je     c00114ec <udp_sendto_if+0x144>
c00114e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e6:	85 c0                	test   eax,eax
c00114e8:	75 12                	jne    c00114fc <udp_sendto_if+0x154>
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114f0:	83 c0 04             	add    eax,0x4
c00114f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f7:	eb 47                	jmp    c0011540 <udp_sendto_if+0x198>
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011500:	8b 10                	mov    edx,DWORD PTR [eax]
c0011502:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	39 c2                	cmp    edx,eax
c001150b:	74 2b                	je     c0011538 <udp_sendto_if+0x190>
c001150d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011511:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011515:	74 19                	je     c0011530 <udp_sendto_if+0x188>
c0011517:	83 ec 0c             	sub    esp,0xc
c001151a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001151e:	e8 39 6e ff ff       	call   c000835c <pbuf_free>
c0011523:	83 c4 10             	add    esp,0x10
c0011526:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001152e:	66 90                	xchg   ax,ax
c0011530:	b0 fa                	mov    al,0xfa
c0011532:	e9 ed 00 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011537:	90                   	nop
c0011538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001153c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011547:	0f b7 c0             	movzx  eax,ax
c001154a:	83 ec 0c             	sub    esp,0xc
c001154d:	50                   	push   eax
c001154e:	e8 95 f6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011553:	83 c4 10             	add    esp,0x10
c0011556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001155a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001155e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011562:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011565:	0f b6 c0             	movzx  eax,al
c0011568:	83 e0 01             	and    eax,0x1
c001156b:	75 4b                	jne    c00115b8 <udp_sendto_if+0x210>
c001156d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011574:	0f b7 c0             	movzx  eax,ax
c0011577:	83 ec 0c             	sub    esp,0xc
c001157a:	50                   	push   eax
c001157b:	6a 11                	push   0x11
c001157d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011585:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011589:	e8 ea 1b 00 00       	call   c0013178 <inet_chksum_pseudo>
c001158e:	83 c4 20             	add    esp,0x20
c0011591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011596:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c001159b:	85 c0                	test   eax,eax
c001159d:	75 09                	jne    c00115a8 <udp_sendto_if+0x200>
c001159f:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00115a6:	66 90                	xchg   ax,ax
c00115a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115ac:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00115b1:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00115b5:	8d 76 00             	lea    esi,[esi+0x0]
c00115b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115bc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00115bf:	0f b6 d0             	movzx  edx,al
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00115c9:	0f b6 c0             	movzx  eax,al
c00115cc:	83 ec 04             	sub    esp,0x4
c00115cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115d3:	6a 11                	push   0x11
c00115d5:	52                   	push   edx
c00115d6:	50                   	push   eax
c00115d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115e3:	e8 f4 24 00 00       	call   c0013adc <ip_output_if>
c00115e8:	83 c4 20             	add    esp,0x20
c00115eb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00115ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115f3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115f7:	74 17                	je     c0011610 <udp_sendto_if+0x268>
c00115f9:	83 ec 0c             	sub    esp,0xc
c00115fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011600:	e8 57 6d ff ff       	call   c000835c <pbuf_free>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011610:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c0011616:	83 c0 01             	add    eax,0x1
c0011619:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c001161f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011623:	90                   	nop
c0011624:	83 c4 2c             	add    esp,0x2c
c0011627:	c3                   	ret    

c0011628 <udp_sendto>:
c0011628:	83 ec 2c             	sub    esp,0x2c
c001162b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001162f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011634:	83 ec 0c             	sub    esp,0xc
c0011637:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001163b:	e8 c4 1f 00 00       	call   c0013604 <ip_route>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011647:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001164c:	75 16                	jne    c0011664 <udp_sendto+0x3c>
c001164e:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011654:	83 c0 01             	add    eax,0x1
c0011657:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c001165d:	b0 fc                	mov    al,0xfc
c001165f:	eb 27                	jmp    c0011688 <udp_sendto+0x60>
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011669:	83 ec 0c             	sub    esp,0xc
c001166c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011670:	50                   	push   eax
c0011671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011675:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011679:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001167d:	e8 26 fd ff ff       	call   c00113a8 <udp_sendto_if>
c0011682:	83 c4 20             	add    esp,0x20
c0011685:	8d 76 00             	lea    esi,[esi+0x0]
c0011688:	83 c4 2c             	add    esp,0x2c
c001168b:	c3                   	ret    

c001168c <udp_send>:
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011693:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011696:	0f b7 c0             	movzx  eax,ax
c0011699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001169d:	83 c2 04             	add    edx,0x4
c00116a0:	50                   	push   eax
c00116a1:	52                   	push   edx
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116aa:	e8 79 ff ff ff       	call   c0011628 <udp_sendto>
c00116af:	83 c4 10             	add    esp,0x10
c00116b2:	83 c4 0c             	add    esp,0xc
c00116b5:	c3                   	ret    
c00116b6:	66 90                	xchg   ax,ax

c00116b8 <udp_connect>:
c00116b8:	83 ec 2c             	sub    esp,0x2c
c00116bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116cc:	0f b7 c0             	movzx  eax,ax
c00116cf:	85 c0                	test   eax,eax
c00116d1:	75 39                	jne    c001170c <udp_connect+0x54>
c00116d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116db:	0f b7 d0             	movzx  edx,ax
c00116de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e2:	83 ec 04             	sub    esp,0x4
c00116e5:	52                   	push   edx
c00116e6:	50                   	push   eax
c00116e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00116eb:	e8 38 fb ff ff       	call   c0011228 <udp_bind>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116f7:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00116fc:	85 c0                	test   eax,eax
c00116fe:	74 0c                	je     c001170c <udp_connect+0x54>
c0011700:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011704:	e9 8b 00 00 00       	jmp    c0011794 <udp_connect+0xdc>
c0011709:	8d 76 00             	lea    esi,[esi+0x0]
c001170c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011711:	74 09                	je     c001171c <udp_connect+0x64>
c0011713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011717:	8b 00                	mov    eax,DWORD PTR [eax]
c0011719:	eb 09                	jmp    c0011724 <udp_connect+0x6c>
c001171b:	90                   	nop
c001171c:	b8 00 00 00 00       	mov    eax,0x0
c0011721:	8d 76 00             	lea    esi,[esi+0x0]
c0011724:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011728:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011733:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0011737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001173b:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001173e:	83 c8 04             	or     eax,0x4
c0011741:	88 c2                	mov    dl,al
c0011743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011747:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001174a:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001174f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011753:	eb 1f                	jmp    c0011774 <udp_connect+0xbc>
c0011755:	8d 76 00             	lea    esi,[esi+0x0]
c0011758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011760:	75 06                	jne    c0011768 <udp_connect+0xb0>
c0011762:	b0 00                	mov    al,0x0
c0011764:	eb 2e                	jmp    c0011794 <udp_connect+0xdc>
c0011766:	66 90                	xchg   ax,ax
c0011768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001176c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001176f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011773:	90                   	nop
c0011774:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011779:	75 dd                	jne    c0011758 <udp_connect+0xa0>
c001177b:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011785:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178c:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011791:	b0 00                	mov    al,0x0
c0011793:	90                   	nop
c0011794:	83 c4 2c             	add    esp,0x2c
c0011797:	c3                   	ret    

c0011798 <udp_disconnect>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a7:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00117ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b1:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117b4:	83 e0 fb             	and    eax,0xfffffffb
c00117b7:	88 c2                	mov    dl,al
c00117b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117bd:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00117c0:	90                   	nop
c00117c1:	c3                   	ret    
c00117c2:	66 90                	xchg   ax,ax

c00117c4 <udp_recv>:
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117d7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00117da:	90                   	nop
c00117db:	c3                   	ret    

c00117dc <udp_remove>:
c00117dc:	83 ec 1c             	sub    esp,0x1c
c00117df:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117e4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117e8:	75 12                	jne    c00117fc <udp_remove+0x20>
c00117ea:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f2:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117f7:	eb 4b                	jmp    c0011844 <udp_remove+0x68>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011805:	eb 35                	jmp    c001183c <udp_remove+0x60>
c0011807:	90                   	nop
c0011808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001180c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180f:	85 c0                	test   eax,eax
c0011811:	74 1d                	je     c0011830 <udp_remove+0x54>
c0011813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011817:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001181a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001181e:	75 10                	jne    c0011830 <udp_remove+0x54>
c0011820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011824:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001182b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001182e:	66 90                	xchg   ax,ax
c0011830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011834:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001183b:	90                   	nop
c001183c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011841:	75 c5                	jne    c0011808 <udp_remove+0x2c>
c0011843:	90                   	nop
c0011844:	83 ec 08             	sub    esp,0x8
c0011847:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001184b:	6a 01                	push   0x1
c001184d:	e8 4e 62 ff ff       	call   c0007aa0 <memp_free>
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	90                   	nop
c0011856:	83 c4 1c             	add    esp,0x1c
c0011859:	c3                   	ret    
c001185a:	66 90                	xchg   ax,ax

c001185c <udp_new>:
c001185c:	83 ec 1c             	sub    esp,0x1c
c001185f:	83 ec 0c             	sub    esp,0xc
c0011862:	6a 01                	push   0x1
c0011864:	e8 0b 61 ff ff       	call   c0007974 <memp_malloc>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011875:	74 1d                	je     c0011894 <udp_new+0x38>
c0011877:	83 ec 04             	sub    esp,0x4
c001187a:	6a 20                	push   0x20
c001187c:	6a 00                	push   0x0
c001187e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011882:	e8 69 ec fe ff       	call   c00004f0 <memset>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001188e:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011892:	66 90                	xchg   ax,ax
c0011894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011898:	83 c4 1c             	add    esp,0x1c
c001189b:	c3                   	ret    

c001189c <free_entry>:
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a3:	c1 e0 04             	shl    eax,0x4
c00118a6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ad:	85 c0                	test   eax,eax
c00118af:	74 2f                	je     c00118e0 <free_entry+0x44>
c00118b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b5:	c1 e0 04             	shl    eax,0x4
c00118b8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 94 6a ff ff       	call   c000835c <pbuf_free>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cf:	c1 e0 04             	shl    eax,0x4
c00118d2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118dd:	8d 76 00             	lea    esi,[esi+0x0]
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	c1 e0 04             	shl    eax,0x4
c00118e7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00118ef:	90                   	nop
c00118f0:	83 c4 0c             	add    esp,0xc
c00118f3:	c3                   	ret    

c00118f4 <etharp_tmr>:
c00118f4:	83 ec 1c             	sub    esp,0x1c
c00118f7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118fc:	e9 a7 00 00 00       	jmp    c00119a8 <etharp_tmr+0xb4>
c0011901:	8d 76 00             	lea    esi,[esi+0x0]
c0011904:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011909:	c1 e0 04             	shl    eax,0x4
c001190c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011911:	8a 00                	mov    al,BYTE PTR [eax]
c0011913:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011917:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001191c:	85 c0                	test   eax,eax
c001191e:	74 7c                	je     c001199c <etharp_tmr+0xa8>
c0011920:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011925:	89 c2                	mov    edx,eax
c0011927:	c1 e2 04             	shl    edx,0x4
c001192a:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011930:	8a 12                	mov    dl,BYTE PTR [edx]
c0011932:	83 c2 01             	add    edx,0x1
c0011935:	c1 e0 04             	shl    eax,0x4
c0011938:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001193d:	88 10                	mov    BYTE PTR [eax],dl
c001193f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011944:	c1 e0 04             	shl    eax,0x4
c0011947:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001194c:	8a 00                	mov    al,BYTE PTR [eax]
c001194e:	0f b6 c0             	movzx  eax,al
c0011951:	3d ef 00 00 00       	cmp    eax,0xef
c0011956:	77 30                	ja     c0011988 <etharp_tmr+0x94>
c0011958:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001195d:	c1 e0 04             	shl    eax,0x4
c0011960:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011965:	8a 00                	mov    al,BYTE PTR [eax]
c0011967:	0f b6 c0             	movzx  eax,al
c001196a:	83 f8 01             	cmp    eax,0x1
c001196d:	75 2d                	jne    c001199c <etharp_tmr+0xa8>
c001196f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011974:	c1 e0 04             	shl    eax,0x4
c0011977:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001197c:	8a 00                	mov    al,BYTE PTR [eax]
c001197e:	0f b6 c0             	movzx  eax,al
c0011981:	83 f8 01             	cmp    eax,0x1
c0011984:	76 16                	jbe    c001199c <etharp_tmr+0xa8>
c0011986:	66 90                	xchg   ax,ax
c0011988:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	50                   	push   eax
c0011991:	e8 06 ff ff ff       	call   c001189c <free_entry>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119a0:	83 c0 01             	add    eax,0x1
c00119a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119a7:	90                   	nop
c00119a8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119ad:	83 f8 09             	cmp    eax,0x9
c00119b0:	0f 86 4e ff ff ff    	jbe    c0011904 <etharp_tmr+0x10>
c00119b6:	90                   	nop
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	c3                   	ret    
c00119bb:	90                   	nop

c00119bc <find_entry>:
c00119bc:	83 ec 2c             	sub    esp,0x2c
c00119bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00119c7:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00119cc:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00119d1:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00119d6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119db:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00119e0:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00119e5:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00119ea:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00119ef:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119f4:	e9 7f 01 00 00       	jmp    c0011b78 <find_entry+0x1bc>
c00119f9:	8d 76 00             	lea    esi,[esi+0x0]
c00119fc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a01:	c1 e0 04             	shl    eax,0x4
c0011a04:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a09:	8a 00                	mov    al,BYTE PTR [eax]
c0011a0b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011a0f:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a14:	83 f8 0a             	cmp    eax,0xa
c0011a17:	75 17                	jne    c0011a30 <find_entry+0x74>
c0011a19:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a1e:	85 c0                	test   eax,eax
c0011a20:	75 0e                	jne    c0011a30 <find_entry+0x74>
c0011a22:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a26:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011a2a:	e9 3d 01 00 00       	jmp    c0011b6c <find_entry+0x1b0>
c0011a2f:	90                   	nop
c0011a30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a35:	85 c0                	test   eax,eax
c0011a37:	0f 84 2f 01 00 00    	je     c0011b6c <find_entry+0x1b0>
c0011a3d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a42:	83 f8 01             	cmp    eax,0x1
c0011a45:	74 21                	je     c0011a68 <find_entry+0xac>
c0011a47:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a4c:	83 f8 02             	cmp    eax,0x2
c0011a4f:	74 17                	je     c0011a68 <find_entry+0xac>
c0011a51:	83 ec 08             	sub    esp,0x8
c0011a54:	68 70 0a 03 c0       	push   0xc0030a70
c0011a59:	68 a6 fa 02 c0       	push   0xc002faa6
c0011a5e:	e8 2d e1 00 00       	call   c001fb90 <CPrintf>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	66 90                	xchg   ax,ax
c0011a68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a6d:	74 25                	je     c0011a94 <find_entry+0xd8>
c0011a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a75:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a7a:	c1 e0 04             	shl    eax,0x4
c0011a7d:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a84:	39 c2                	cmp    edx,eax
c0011a86:	75 0c                	jne    c0011a94 <find_entry+0xd8>
c0011a88:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a8c:	e9 53 02 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011a91:	8d 76 00             	lea    esi,[esi+0x0]
c0011a94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a99:	83 f8 01             	cmp    eax,0x1
c0011a9c:	0f 85 8a 00 00 00    	jne    c0011b2c <find_entry+0x170>
c0011aa2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa7:	c1 e0 04             	shl    eax,0x4
c0011aaa:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab1:	85 c0                	test   eax,eax
c0011ab3:	74 3f                	je     c0011af4 <find_entry+0x138>
c0011ab5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aba:	c1 e0 04             	shl    eax,0x4
c0011abd:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ac2:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011ac9:	0f b6 c0             	movzx  eax,al
c0011acc:	39 c2                	cmp    edx,eax
c0011ace:	0f 87 98 00 00 00    	ja     c0011b6c <find_entry+0x1b0>
c0011ad4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ad8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011adc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ae1:	c1 e0 04             	shl    eax,0x4
c0011ae4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aeb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011aef:	eb 7b                	jmp    c0011b6c <find_entry+0x1b0>
c0011af1:	8d 76 00             	lea    esi,[esi+0x0]
c0011af4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b01:	8a 00                	mov    al,BYTE PTR [eax]
c0011b03:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011b08:	0f b6 c0             	movzx  eax,al
c0011b0b:	39 c2                	cmp    edx,eax
c0011b0d:	77 5d                	ja     c0011b6c <find_entry+0x1b0>
c0011b0f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b13:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011b17:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b1c:	c1 e0 04             	shl    eax,0x4
c0011b1f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b24:	8a 00                	mov    al,BYTE PTR [eax]
c0011b26:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011b2a:	eb 40                	jmp    c0011b6c <find_entry+0x1b0>
c0011b2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b31:	83 f8 02             	cmp    eax,0x2
c0011b34:	75 36                	jne    c0011b6c <find_entry+0x1b0>
c0011b36:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b3b:	c1 e0 04             	shl    eax,0x4
c0011b3e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b43:	8a 00                	mov    al,BYTE PTR [eax]
c0011b45:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011b4a:	0f b6 c0             	movzx  eax,al
c0011b4d:	39 c2                	cmp    edx,eax
c0011b4f:	77 1b                	ja     c0011b6c <find_entry+0x1b0>
c0011b51:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b55:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5e:	c1 e0 04             	shl    eax,0x4
c0011b61:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b66:	8a 00                	mov    al,BYTE PTR [eax]
c0011b68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b70:	83 c0 01             	add    eax,0x1
c0011b73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b77:	90                   	nop
c0011b78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b7d:	83 f8 09             	cmp    eax,0x9
c0011b80:	0f 86 76 fe ff ff    	jbe    c00119fc <find_entry+0x40>
c0011b86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b8b:	83 e0 02             	and    eax,0x2
c0011b8e:	75 14                	jne    c0011ba4 <find_entry+0x1e8>
c0011b90:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b95:	83 f8 0a             	cmp    eax,0xa
c0011b98:	75 12                	jne    c0011bac <find_entry+0x1f0>
c0011b9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b9f:	83 e0 01             	and    eax,0x1
c0011ba2:	75 08                	jne    c0011bac <find_entry+0x1f0>
c0011ba4:	b0 ff                	mov    al,0xff
c0011ba6:	e9 39 01 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011bab:	90                   	nop
c0011bac:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bb1:	83 f8 09             	cmp    eax,0x9
c0011bb4:	7f 0e                	jg     c0011bc4 <find_entry+0x208>
c0011bb6:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011bba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bbe:	e9 a1 00 00 00       	jmp    c0011c64 <find_entry+0x2a8>
c0011bc3:	90                   	nop
c0011bc4:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011bc9:	83 f8 09             	cmp    eax,0x9
c0011bcc:	7f 32                	jg     c0011c00 <find_entry+0x244>
c0011bce:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011bd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bd6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bdb:	c1 e0 04             	shl    eax,0x4
c0011bde:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be5:	85 c0                	test   eax,eax
c0011be7:	74 47                	je     c0011c30 <find_entry+0x274>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 e9 0b 03 c0       	push   0xc0030be9
c0011bf1:	68 a6 fa 02 c0       	push   0xc002faa6
c0011bf6:	e8 95 df 00 00       	call   c001fb90 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	eb 30                	jmp    c0011c30 <find_entry+0x274>
c0011c00:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011c05:	83 f8 09             	cmp    eax,0x9
c0011c08:	7f 0a                	jg     c0011c14 <find_entry+0x258>
c0011c0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c0e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c12:	eb 1c                	jmp    c0011c30 <find_entry+0x274>
c0011c14:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011c19:	83 f8 09             	cmp    eax,0x9
c0011c1c:	7f 0a                	jg     c0011c28 <find_entry+0x26c>
c0011c1e:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011c22:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c26:	eb 08                	jmp    c0011c30 <find_entry+0x274>
c0011c28:	b0 ff                	mov    al,0xff
c0011c2a:	e9 b5 00 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011c2f:	90                   	nop
c0011c30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c35:	83 f8 09             	cmp    eax,0x9
c0011c38:	76 16                	jbe    c0011c50 <find_entry+0x294>
c0011c3a:	83 ec 08             	sub    esp,0x8
c0011c3d:	68 00 0c 03 c0       	push   0xc0030c00
c0011c42:	68 a6 fa 02 c0       	push   0xc002faa6
c0011c47:	e8 44 df 00 00       	call   c001fb90 <CPrintf>
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	90                   	nop
c0011c50:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	50                   	push   eax
c0011c59:	e8 3e fc ff ff       	call   c001189c <free_entry>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	8d 76 00             	lea    esi,[esi+0x0]
c0011c64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c69:	83 f8 09             	cmp    eax,0x9
c0011c6c:	76 16                	jbe    c0011c84 <find_entry+0x2c8>
c0011c6e:	83 ec 08             	sub    esp,0x8
c0011c71:	68 00 0c 03 c0       	push   0xc0030c00
c0011c76:	68 a6 fa 02 c0       	push   0xc002faa6
c0011c7b:	e8 10 df 00 00       	call   c001fb90 <CPrintf>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	90                   	nop
c0011c84:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c89:	c1 e0 04             	shl    eax,0x4
c0011c8c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c91:	8a 00                	mov    al,BYTE PTR [eax]
c0011c93:	0f b6 c0             	movzx  eax,al
c0011c96:	85 c0                	test   eax,eax
c0011c98:	74 16                	je     c0011cb0 <find_entry+0x2f4>
c0011c9a:	83 ec 08             	sub    esp,0x8
c0011c9d:	68 b0 0a 03 c0       	push   0xc0030ab0
c0011ca2:	68 a6 fa 02 c0       	push   0xc002faa6
c0011ca7:	e8 e4 de 00 00       	call   c001fb90 <CPrintf>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	90                   	nop
c0011cb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb5:	74 19                	je     c0011cd0 <find_entry+0x314>
c0011cb7:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc2:	c1 e2 04             	shl    edx,0x4
c0011cc5:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011ccb:	89 02                	mov    DWORD PTR [edx],eax
c0011ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd5:	c1 e0 04             	shl    eax,0x4
c0011cd8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011ce0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ce4:	83 c4 2c             	add    esp,0x2c
c0011ce7:	c3                   	ret    

c0011ce8 <etharp_send_ip>:
c0011ce8:	83 ec 1c             	sub    esp,0x1c
c0011ceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cfa:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cfd:	0f b6 c0             	movzx  eax,al
c0011d00:	83 f8 06             	cmp    eax,0x6
c0011d03:	74 17                	je     c0011d1c <etharp_send_ip+0x34>
c0011d05:	83 ec 08             	sub    esp,0x8
c0011d08:	68 dc 0a 03 c0       	push   0xc0030adc
c0011d0d:	68 a6 fa 02 c0       	push   0xc002faa6
c0011d12:	e8 79 de 00 00       	call   c001fb90 <CPrintf>
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	66 90                	xchg   ax,ax
c0011d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d20:	83 ec 04             	sub    esp,0x4
c0011d23:	6a 06                	push   0x6
c0011d25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d29:	50                   	push   eax
c0011d2a:	e8 4b e6 fe ff       	call   c000037a <memcpy>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d36:	83 c0 06             	add    eax,0x6
c0011d39:	83 ec 04             	sub    esp,0x4
c0011d3c:	6a 06                	push   0x6
c0011d3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d42:	50                   	push   eax
c0011d43:	e8 32 e6 fe ff       	call   c000037a <memcpy>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d4f:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d59:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d67:	ff d0                	call   eax
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	83 c4 1c             	add    esp,0x1c
c0011d6f:	c3                   	ret    

c0011d70 <update_arp_entry>:
c0011d70:	83 ec 2c             	sub    esp,0x2c
c0011d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d7f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d82:	0f b6 c0             	movzx  eax,al
c0011d85:	83 f8 06             	cmp    eax,0x6
c0011d88:	74 16                	je     c0011da0 <update_arp_entry+0x30>
c0011d8a:	83 ec 08             	sub    esp,0x8
c0011d8d:	68 20 0b 03 c0       	push   0xc0030b20
c0011d92:	68 a6 fa 02 c0       	push   0xc002faa6
c0011d97:	e8 f4 dd 00 00       	call   c001fb90 <CPrintf>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	90                   	nop
c0011da0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011da5:	74 39                	je     c0011de0 <update_arp_entry+0x70>
c0011da7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	85 c0                	test   eax,eax
c0011daf:	74 2f                	je     c0011de0 <update_arp_entry+0x70>
c0011db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dbe:	50                   	push   eax
c0011dbf:	e8 8c 20 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	0f b6 c0             	movzx  eax,al
c0011dca:	85 c0                	test   eax,eax
c0011dcc:	75 12                	jne    c0011de0 <update_arp_entry+0x70>
c0011dce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd4:	25 f0 00 00 00       	and    eax,0xf0
c0011dd9:	3d e0 00 00 00       	cmp    eax,0xe0
c0011dde:	75 08                	jne    c0011de8 <update_arp_entry+0x78>
c0011de0:	b0 f2                	mov    al,0xf2
c0011de2:	e9 d9 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	50                   	push   eax
c0011df1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011df5:	e8 c2 fb ff ff       	call   c00119bc <find_entry>
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011e01:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e06:	85 c0                	test   eax,eax
c0011e08:	79 0a                	jns    c0011e14 <update_arp_entry+0xa4>
c0011e0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e0e:	e9 ad 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011e13:	90                   	nop
c0011e14:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e19:	c1 e0 04             	shl    eax,0x4
c0011e1c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e21:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011e24:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e29:	c1 e0 04             	shl    eax,0x4
c0011e2c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e31:	83 c0 08             	add    eax,0x8
c0011e34:	83 ec 04             	sub    esp,0x4
c0011e37:	6a 06                	push   0x6
c0011e39:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e3d:	50                   	push   eax
c0011e3e:	e8 37 e5 fe ff       	call   c000037a <memcpy>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e4b:	c1 e0 04             	shl    eax,0x4
c0011e4e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e56:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e5b:	c1 e0 04             	shl    eax,0x4
c0011e5e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	74 53                	je     c0011ebc <update_arp_entry+0x14c>
c0011e69:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e6e:	c1 e0 04             	shl    eax,0x4
c0011e71:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e7c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e81:	c1 e0 04             	shl    eax,0x4
c0011e84:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e93:	83 c0 23             	add    eax,0x23
c0011e96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e9a:	50                   	push   eax
c0011e9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ea3:	e8 40 fe ff ff       	call   c0011ce8 <etharp_send_ip>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	83 ec 0c             	sub    esp,0xc
c0011eae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011eb2:	e8 a5 64 ff ff       	call   c000835c <pbuf_free>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	66 90                	xchg   ax,ax
c0011ebc:	b0 00                	mov    al,0x0
c0011ebe:	66 90                	xchg   ax,ax
c0011ec0:	83 c4 2c             	add    esp,0x2c
c0011ec3:	c3                   	ret    

c0011ec4 <etharp_find_addr>:
c0011ec4:	83 ec 1c             	sub    esp,0x1c
c0011ec7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ecc:	74 0a                	je     c0011ed8 <etharp_find_addr+0x14>
c0011ece:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011ed3:	75 1b                	jne    c0011ef0 <etharp_find_addr+0x2c>
c0011ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	68 48 0b 03 c0       	push   0xc0030b48
c0011ee0:	68 a6 fa 02 c0       	push   0xc002faa6
c0011ee5:	e8 a6 dc 00 00       	call   c001fb90 <CPrintf>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8d 76 00             	lea    esi,[esi+0x0]
c0011ef0:	83 ec 08             	sub    esp,0x8
c0011ef3:	6a 02                	push   0x2
c0011ef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ef9:	e8 be fa ff ff       	call   c00119bc <find_entry>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f05:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f0a:	85 c0                	test   eax,eax
c0011f0c:	78 4a                	js     c0011f58 <etharp_find_addr+0x94>
c0011f0e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f13:	c1 e0 04             	shl    eax,0x4
c0011f16:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011f1b:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1d:	0f b6 c0             	movzx  eax,al
c0011f20:	83 f8 02             	cmp    eax,0x2
c0011f23:	75 33                	jne    c0011f58 <etharp_find_addr+0x94>
c0011f25:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f2a:	c1 e0 04             	shl    eax,0x4
c0011f2d:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f32:	8d 50 08             	lea    edx,[eax+0x8]
c0011f35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f39:	89 10                	mov    DWORD PTR [eax],edx
c0011f3b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f40:	c1 e0 04             	shl    eax,0x4
c0011f43:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f48:	8d 50 04             	lea    edx,[eax+0x4]
c0011f4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4f:	89 10                	mov    DWORD PTR [eax],edx
c0011f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f55:	eb 05                	jmp    c0011f5c <etharp_find_addr+0x98>
c0011f57:	90                   	nop
c0011f58:	b0 ff                	mov    al,0xff
c0011f5a:	66 90                	xchg   ax,ax
c0011f5c:	83 c4 1c             	add    esp,0x1c
c0011f5f:	c3                   	ret    

c0011f60 <etharp_arp_input>:
c0011f60:	83 ec 2c             	sub    esp,0x2c
c0011f63:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f68:	75 1a                	jne    c0011f84 <etharp_arp_input+0x24>
c0011f6a:	83 ec 08             	sub    esp,0x8
c0011f6d:	68 13 0c 03 c0       	push   0xc0030c13
c0011f72:	68 a6 fa 02 c0       	push   0xc002faa6
c0011f77:	e8 14 dc 00 00       	call   c001fb90 <CPrintf>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	e9 d0 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011f84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f88:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f8c:	0f b7 c0             	movzx  eax,ax
c0011f8f:	83 f8 29             	cmp    eax,0x29
c0011f92:	77 34                	ja     c0011fc8 <etharp_arp_input+0x68>
c0011f94:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f9a:	83 c0 01             	add    eax,0x1
c0011f9d:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011fa3:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fa9:	83 c0 01             	add    eax,0x1
c0011fac:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011fb9:	e8 9e 63 ff ff       	call   c000835c <pbuf_free>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	e9 8e 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011fc6:	66 90                	xchg   ax,ax
c0011fc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd7:	83 c0 0e             	add    eax,0xe
c0011fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fe2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011fe5:	0f b7 c0             	movzx  eax,ax
c0011fe8:	3d 00 01 00 00       	cmp    eax,0x100
c0011fed:	75 31                	jne    c0012020 <etharp_arp_input+0xc0>
c0011fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011ff6:	0f b6 c0             	movzx  eax,al
c0011ff9:	83 f8 06             	cmp    eax,0x6
c0011ffc:	75 22                	jne    c0012020 <etharp_arp_input+0xc0>
c0011ffe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012002:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012005:	0f b6 c0             	movzx  eax,al
c0012008:	83 f8 04             	cmp    eax,0x4
c001200b:	75 13                	jne    c0012020 <etharp_arp_input+0xc0>
c001200d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012011:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012015:	0f b7 c0             	movzx  eax,ax
c0012018:	83 f8 08             	cmp    eax,0x8
c001201b:	74 37                	je     c0012054 <etharp_arp_input+0xf4>
c001201d:	8d 76 00             	lea    esi,[esi+0x0]
c0012020:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012026:	83 c0 01             	add    eax,0x1
c0012029:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001202f:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012035:	83 c0 01             	add    eax,0x1
c0012038:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012045:	e8 12 63 ff ff       	call   c000835c <pbuf_free>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	e9 02 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0012052:	66 90                	xchg   ax,ax
c0012054:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001205a:	83 c0 01             	add    eax,0x1
c001205d:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0012063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012067:	83 c0 0e             	add    eax,0xe
c001206a:	83 ec 04             	sub    esp,0x4
c001206d:	6a 04                	push   0x4
c001206f:	50                   	push   eax
c0012070:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012074:	50                   	push   eax
c0012075:	e8 00 e3 fe ff       	call   c000037a <memcpy>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012081:	83 c0 18             	add    eax,0x18
c0012084:	83 ec 04             	sub    esp,0x4
c0012087:	6a 04                	push   0x4
c0012089:	50                   	push   eax
c001208a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001208e:	50                   	push   eax
c001208f:	e8 e6 e2 fe ff       	call   c000037a <memcpy>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209b:	83 c0 04             	add    eax,0x4
c001209e:	74 0c                	je     c00120ac <etharp_arp_input+0x14c>
c00120a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120a7:	85 c0                	test   eax,eax
c00120a9:	75 09                	jne    c00120b4 <etharp_arp_input+0x154>
c00120ab:	90                   	nop
c00120ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120b1:	eb 15                	jmp    c00120c8 <etharp_arp_input+0x168>
c00120b3:	90                   	nop
c00120b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120bf:	39 c2                	cmp    edx,eax
c00120c1:	0f 94 c0             	sete   al
c00120c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120c8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120cd:	85 c0                	test   eax,eax
c00120cf:	74 07                	je     c00120d8 <etharp_arp_input+0x178>
c00120d1:	b8 01 00 00 00       	mov    eax,0x1
c00120d6:	eb 08                	jmp    c00120e0 <etharp_arp_input+0x180>
c00120d8:	b8 02 00 00 00       	mov    eax,0x2
c00120dd:	8d 76 00             	lea    esi,[esi+0x0]
c00120e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e4:	83 c2 08             	add    edx,0x8
c00120e7:	50                   	push   eax
c00120e8:	52                   	push   edx
c00120e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120ed:	50                   	push   eax
c00120ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120f2:	e8 79 fc ff ff       	call   c0011d70 <update_arp_entry>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120fe:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012102:	0f b7 c0             	movzx  eax,ax
c0012105:	3d 00 01 00 00       	cmp    eax,0x100
c001210a:	74 10                	je     c001211c <etharp_arp_input+0x1bc>
c001210c:	3d 00 02 00 00       	cmp    eax,0x200
c0012111:	0f 84 29 01 00 00    	je     c0012240 <etharp_arp_input+0x2e0>
c0012117:	e9 10 01 00 00       	jmp    c001222c <etharp_arp_input+0x2cc>
c001211c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012121:	85 c0                	test   eax,eax
c0012123:	0f 84 f7 00 00 00    	je     c0012220 <etharp_arp_input+0x2c0>
c0012129:	83 ec 0c             	sub    esp,0xc
c001212c:	6a 02                	push   0x2
c001212e:	e8 b5 ea fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001213a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001213e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012142:	8d 50 0e             	lea    edx,[eax+0xe]
c0012145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012149:	83 c0 18             	add    eax,0x18
c001214c:	83 ec 04             	sub    esp,0x4
c001214f:	6a 04                	push   0x4
c0012151:	52                   	push   edx
c0012152:	50                   	push   eax
c0012153:	e8 22 e2 fe ff       	call   c000037a <memcpy>
c0012158:	83 c4 10             	add    esp,0x10
c001215b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215f:	8d 50 04             	lea    edx,[eax+0x4]
c0012162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012166:	83 c0 0e             	add    eax,0xe
c0012169:	83 ec 04             	sub    esp,0x4
c001216c:	6a 04                	push   0x4
c001216e:	52                   	push   edx
c001216f:	50                   	push   eax
c0012170:	e8 05 e2 fe ff       	call   c000037a <memcpy>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217c:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c001217f:	0f b6 c0             	movzx  eax,al
c0012182:	83 f8 06             	cmp    eax,0x6
c0012185:	74 15                	je     c001219c <etharp_arp_input+0x23c>
c0012187:	83 ec 08             	sub    esp,0x8
c001218a:	68 dc 0a 03 c0       	push   0xc0030adc
c001218f:	68 a6 fa 02 c0       	push   0xc002faa6
c0012194:	e8 f7 d9 00 00       	call   c001fb90 <CPrintf>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a0:	8d 50 08             	lea    edx,[eax+0x8]
c00121a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a7:	83 c0 12             	add    eax,0x12
c00121aa:	83 ec 04             	sub    esp,0x4
c00121ad:	6a 06                	push   0x6
c00121af:	52                   	push   edx
c00121b0:	50                   	push   eax
c00121b1:	e8 c4 e1 fe ff       	call   c000037a <memcpy>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121bd:	8d 50 08             	lea    edx,[eax+0x8]
c00121c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c4:	83 ec 04             	sub    esp,0x4
c00121c7:	6a 06                	push   0x6
c00121c9:	52                   	push   edx
c00121ca:	50                   	push   eax
c00121cb:	e8 aa e1 fe ff       	call   c000037a <memcpy>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d7:	83 c0 08             	add    eax,0x8
c00121da:	83 ec 04             	sub    esp,0x4
c00121dd:	6a 06                	push   0x6
c00121df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121e3:	50                   	push   eax
c00121e4:	e8 91 e1 fe ff       	call   c000037a <memcpy>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f0:	83 c0 06             	add    eax,0x6
c00121f3:	83 ec 04             	sub    esp,0x4
c00121f6:	6a 06                	push   0x6
c00121f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fc:	50                   	push   eax
c00121fd:	e8 78 e1 fe ff       	call   c000037a <memcpy>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012209:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012217:	ff d0                	call   eax
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	eb 26                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001221e:	66 90                	xchg   ax,ax
c0012220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012224:	83 c0 04             	add    eax,0x4
c0012227:	eb 1b                	jmp    c0012244 <etharp_arp_input+0x2e4>
c0012229:	8d 76 00             	lea    esi,[esi+0x0]
c001222c:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c0012232:	83 c0 01             	add    eax,0x1
c0012235:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c001223b:	eb 07                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001223d:	8d 76 00             	lea    esi,[esi+0x0]
c0012240:	90                   	nop
c0012241:	8d 76 00             	lea    esi,[esi+0x0]
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001224b:	e8 0c 61 ff ff       	call   c000835c <pbuf_free>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	90                   	nop
c0012254:	83 c4 2c             	add    esp,0x2c
c0012257:	c3                   	ret    

c0012258 <etharp_raw>:
c0012258:	83 ec 2c             	sub    esp,0x2c
c001225b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001225f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012264:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012269:	83 ec 04             	sub    esp,0x4
c001226c:	6a 00                	push   0x0
c001226e:	6a 2a                	push   0x2a
c0012270:	6a 03                	push   0x3
c0012272:	e8 bd 62 ff ff       	call   c0008534 <pbuf_alloc>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012283:	75 17                	jne    c001229c <etharp_raw+0x44>
c0012285:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001228b:	83 c0 01             	add    eax,0x1
c001228e:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012294:	b0 ff                	mov    al,0xff
c0012296:	e9 85 01 00 00       	jmp    c0012420 <etharp_raw+0x1c8>
c001229b:	90                   	nop
c001229c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00122a4:	0f b7 c0             	movzx  eax,ax
c00122a7:	83 f8 29             	cmp    eax,0x29
c00122aa:	77 18                	ja     c00122c4 <etharp_raw+0x6c>
c00122ac:	83 ec 08             	sub    esp,0x8
c00122af:	68 6c 0b 03 c0       	push   0xc0030b6c
c00122b4:	68 a6 fa 02 c0       	push   0xc002faa6
c00122b9:	e8 d2 d8 00 00       	call   c001fb90 <CPrintf>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8d 76 00             	lea    esi,[esi+0x0]
c00122c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d3:	83 c0 0e             	add    eax,0xe
c00122d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122da:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00122df:	83 ec 0c             	sub    esp,0xc
c00122e2:	50                   	push   eax
c00122e3:	e8 00 e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122ef:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00122fa:	0f b6 c0             	movzx  eax,al
c00122fd:	83 f8 06             	cmp    eax,0x6
c0012300:	74 16                	je     c0012318 <etharp_raw+0xc0>
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	68 dc 0a 03 c0       	push   0xc0030adc
c001230a:	68 a6 fa 02 c0       	push   0xc002faa6
c001230f:	e8 7c d8 00 00       	call   c001fb90 <CPrintf>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	90                   	nop
c0012318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231c:	83 c0 08             	add    eax,0x8
c001231f:	83 ec 04             	sub    esp,0x4
c0012322:	6a 06                	push   0x6
c0012324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012328:	50                   	push   eax
c0012329:	e8 4c e0 fe ff       	call   c000037a <memcpy>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012335:	83 c0 12             	add    eax,0x12
c0012338:	83 ec 04             	sub    esp,0x4
c001233b:	6a 06                	push   0x6
c001233d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012341:	50                   	push   eax
c0012342:	e8 33 e0 fe ff       	call   c000037a <memcpy>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001234e:	83 ec 04             	sub    esp,0x4
c0012351:	6a 06                	push   0x6
c0012353:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012357:	50                   	push   eax
c0012358:	e8 1d e0 fe ff       	call   c000037a <memcpy>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012364:	83 c0 06             	add    eax,0x6
c0012367:	83 ec 04             	sub    esp,0x4
c001236a:	6a 06                	push   0x6
c001236c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012370:	50                   	push   eax
c0012371:	e8 04 e0 fe ff       	call   c000037a <memcpy>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237d:	83 c0 0e             	add    eax,0xe
c0012380:	83 ec 04             	sub    esp,0x4
c0012383:	6a 04                	push   0x4
c0012385:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012389:	50                   	push   eax
c001238a:	e8 eb df fe ff       	call   c000037a <memcpy>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012396:	83 c0 18             	add    eax,0x18
c0012399:	83 ec 04             	sub    esp,0x4
c001239c:	6a 04                	push   0x4
c001239e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00123a2:	50                   	push   eax
c00123a3:	e8 d2 df fe ff       	call   c000037a <memcpy>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123af:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00123b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00123be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c2:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00123c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ca:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00123ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123d2:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00123d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123ea:	ff d0                	call   eax
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123f3:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00123f9:	83 c0 01             	add    eax,0x1
c00123fc:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012409:	e8 4e 5f ff ff       	call   c000835c <pbuf_free>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012419:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001241d:	8d 76 00             	lea    esi,[esi+0x0]
c0012420:	83 c4 2c             	add    esp,0x2c
c0012423:	c3                   	ret    

c0012424 <etharp_request>:
c0012424:	83 ec 0c             	sub    esp,0xc
c0012427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242b:	8d 48 04             	lea    ecx,[eax+0x4]
c001242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012432:	8d 50 23             	lea    edx,[eax+0x23]
c0012435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012439:	83 c0 23             	add    eax,0x23
c001243c:	6a 01                	push   0x1
c001243e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012442:	68 3c 0c 03 c0       	push   0xc0030c3c
c0012447:	51                   	push   ecx
c0012448:	52                   	push   edx
c0012449:	68 44 0c 03 c0       	push   0xc0030c44
c001244e:	50                   	push   eax
c001244f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012453:	e8 00 fe ff ff       	call   c0012258 <etharp_raw>
c0012458:	83 c4 20             	add    esp,0x20
c001245b:	83 c4 0c             	add    esp,0xc
c001245e:	c3                   	ret    
c001245f:	90                   	nop

c0012460 <etharp_query>:
c0012460:	83 ec 2c             	sub    esp,0x2c
c0012463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012467:	83 c0 23             	add    eax,0x23
c001246a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001246e:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012477:	8b 00                	mov    eax,DWORD PTR [eax]
c0012479:	83 ec 08             	sub    esp,0x8
c001247c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012480:	50                   	push   eax
c0012481:	e8 ca 19 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	0f b6 c0             	movzx  eax,al
c001248c:	85 c0                	test   eax,eax
c001248e:	75 24                	jne    c00124b4 <etharp_query+0x54>
c0012490:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012494:	8b 00                	mov    eax,DWORD PTR [eax]
c0012496:	25 f0 00 00 00       	and    eax,0xf0
c001249b:	3d e0 00 00 00       	cmp    eax,0xe0
c00124a0:	74 12                	je     c00124b4 <etharp_query+0x54>
c00124a2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00124a7:	74 0b                	je     c00124b4 <etharp_query+0x54>
c00124a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00124af:	85 c0                	test   eax,eax
c00124b1:	75 09                	jne    c00124bc <etharp_query+0x5c>
c00124b3:	90                   	nop
c00124b4:	b0 f2                	mov    al,0xf2
c00124b6:	e9 dd 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124bb:	90                   	nop
c00124bc:	83 ec 08             	sub    esp,0x8
c00124bf:	6a 01                	push   0x1
c00124c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124c5:	e8 f2 f4 ff ff       	call   c00119bc <find_entry>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124d1:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124d6:	85 c0                	test   eax,eax
c00124d8:	79 22                	jns    c00124fc <etharp_query+0x9c>
c00124da:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124df:	74 0f                	je     c00124f0 <etharp_query+0x90>
c00124e1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124e7:	83 c0 01             	add    eax,0x1
c00124ea:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124f4:	e9 9f 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124f9:	8d 76 00             	lea    esi,[esi+0x0]
c00124fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012501:	c1 e0 04             	shl    eax,0x4
c0012504:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012509:	8a 00                	mov    al,BYTE PTR [eax]
c001250b:	0f b6 c0             	movzx  eax,al
c001250e:	85 c0                	test   eax,eax
c0012510:	75 12                	jne    c0012524 <etharp_query+0xc4>
c0012512:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012517:	c1 e0 04             	shl    eax,0x4
c001251a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001251f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012522:	66 90                	xchg   ax,ax
c0012524:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012529:	c1 e0 04             	shl    eax,0x4
c001252c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012531:	8a 00                	mov    al,BYTE PTR [eax]
c0012533:	0f b6 c0             	movzx  eax,al
c0012536:	83 f8 01             	cmp    eax,0x1
c0012539:	74 2d                	je     c0012568 <etharp_query+0x108>
c001253b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012540:	c1 e0 04             	shl    eax,0x4
c0012543:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012548:	8a 00                	mov    al,BYTE PTR [eax]
c001254a:	0f b6 c0             	movzx  eax,al
c001254d:	83 f8 02             	cmp    eax,0x2
c0012550:	74 16                	je     c0012568 <etharp_query+0x108>
c0012552:	83 ec 08             	sub    esp,0x8
c0012555:	68 a0 0b 03 c0       	push   0xc0030ba0
c001255a:	68 a6 fa 02 c0       	push   0xc002faa6
c001255f:	e8 2c d6 00 00       	call   c001fb90 <CPrintf>
c0012564:	83 c4 10             	add    esp,0x10
c0012567:	90                   	nop
c0012568:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001256d:	c1 e0 04             	shl    eax,0x4
c0012570:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012575:	8a 00                	mov    al,BYTE PTR [eax]
c0012577:	0f b6 c0             	movzx  eax,al
c001257a:	83 f8 01             	cmp    eax,0x1
c001257d:	74 09                	je     c0012588 <etharp_query+0x128>
c001257f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012584:	75 2a                	jne    c00125b0 <etharp_query+0x150>
c0012586:	66 90                	xchg   ax,ax
c0012588:	83 ec 08             	sub    esp,0x8
c001258b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001258f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012593:	e8 8c fe ff ff       	call   c0012424 <etharp_request>
c0012598:	83 c4 10             	add    esp,0x10
c001259b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001259f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125a4:	75 0a                	jne    c00125b0 <etharp_query+0x150>
c00125a6:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125aa:	e9 e9 01 00 00       	jmp    c0012798 <etharp_query+0x338>
c00125af:	90                   	nop
c00125b0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125b5:	75 15                	jne    c00125cc <etharp_query+0x16c>
c00125b7:	83 ec 08             	sub    esp,0x8
c00125ba:	68 1a ff 02 c0       	push   0xc002ff1a
c00125bf:	68 a6 fa 02 c0       	push   0xc002faa6
c00125c4:	e8 c7 d5 00 00       	call   c001fb90 <CPrintf>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d1:	c1 e0 04             	shl    eax,0x4
c00125d4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125d9:	8a 00                	mov    al,BYTE PTR [eax]
c00125db:	0f b6 c0             	movzx  eax,al
c00125de:	83 f8 02             	cmp    eax,0x2
c00125e1:	75 39                	jne    c001261c <etharp_query+0x1bc>
c00125e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125e7:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125ec:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125f1:	c1 e0 04             	shl    eax,0x4
c00125f4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00125f9:	83 c0 08             	add    eax,0x8
c00125fc:	50                   	push   eax
c00125fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012601:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012609:	e8 da f6 ff ff       	call   c0011ce8 <etharp_send_ip>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012615:	e9 7a 01 00 00       	jmp    c0012794 <etharp_query+0x334>
c001261a:	66 90                	xchg   ax,ax
c001261c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012621:	c1 e0 04             	shl    eax,0x4
c0012624:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012629:	8a 00                	mov    al,BYTE PTR [eax]
c001262b:	0f b6 c0             	movzx  eax,al
c001262e:	83 f8 01             	cmp    eax,0x1
c0012631:	0f 85 5d 01 00 00    	jne    c0012794 <etharp_query+0x334>
c0012637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001263f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012647:	eb 63                	jmp    c00126ac <etharp_query+0x24c>
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012650:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001265b:	0f b7 d2             	movzx  edx,dx
c001265e:	0f b7 c0             	movzx  eax,ax
c0012661:	39 c2                	cmp    edx,eax
c0012663:	75 1f                	jne    c0012684 <etharp_query+0x224>
c0012665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	85 c0                	test   eax,eax
c001266d:	74 15                	je     c0012684 <etharp_query+0x224>
c001266f:	83 ec 08             	sub    esp,0x8
c0012672:	68 21 0c 03 c0       	push   0xc0030c21
c0012677:	68 a6 fa 02 c0       	push   0xc002faa6
c001267c:	e8 0f d5 00 00       	call   c001fb90 <CPrintf>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012688:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001268b:	0f b6 c0             	movzx  eax,al
c001268e:	83 f8 01             	cmp    eax,0x1
c0012691:	74 0d                	je     c00126a0 <etharp_query+0x240>
c0012693:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001269b:	eb 17                	jmp    c00126b4 <etharp_query+0x254>
c001269d:	8d 76 00             	lea    esi,[esi+0x0]
c00126a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126aa:	66 90                	xchg   ax,ax
c00126ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126b1:	75 99                	jne    c001264c <etharp_query+0x1ec>
c00126b3:	90                   	nop
c00126b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126b9:	74 59                	je     c0012714 <etharp_query+0x2b4>
c00126bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00126c2:	0f b7 c0             	movzx  eax,ax
c00126c5:	83 ec 04             	sub    esp,0x4
c00126c8:	6a 00                	push   0x0
c00126ca:	50                   	push   eax
c00126cb:	6a 03                	push   0x3
c00126cd:	e8 62 5e ff ff       	call   c0008534 <pbuf_alloc>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126de:	74 4c                	je     c001272c <etharp_query+0x2cc>
c00126e0:	83 ec 08             	sub    esp,0x8
c00126e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126eb:	e8 a4 66 ff ff       	call   c0008d94 <pbuf_copy>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	0f be c0             	movsx  eax,al
c00126f6:	85 c0                	test   eax,eax
c00126f8:	74 32                	je     c001272c <etharp_query+0x2cc>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012701:	e8 56 5c ff ff       	call   c000835c <pbuf_free>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012711:	eb 19                	jmp    c001272c <etharp_query+0x2cc>
c0012713:	90                   	nop
c0012714:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012723:	e8 3c 64 ff ff       	call   c0008b64 <pbuf_ref>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	90                   	nop
c001272c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012731:	74 4d                	je     c0012780 <etharp_query+0x320>
c0012733:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012738:	c1 e0 04             	shl    eax,0x4
c001273b:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012740:	8b 00                	mov    eax,DWORD PTR [eax]
c0012742:	85 c0                	test   eax,eax
c0012744:	74 1e                	je     c0012764 <etharp_query+0x304>
c0012746:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274b:	c1 e0 04             	shl    eax,0x4
c001274e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012753:	8b 00                	mov    eax,DWORD PTR [eax]
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	50                   	push   eax
c0012759:	e8 fe 5b ff ff       	call   c000835c <pbuf_free>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	8d 76 00             	lea    esi,[esi+0x0]
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012776:	89 02                	mov    DWORD PTR [edx],eax
c0012778:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001277d:	eb 15                	jmp    c0012794 <etharp_query+0x334>
c001277f:	90                   	nop
c0012780:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012786:	83 c0 01             	add    eax,0x1
c0012789:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001278f:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012794:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012798:	83 c4 2c             	add    esp,0x2c
c001279b:	c3                   	ret    

c001279c <etharp_output>:
c001279c:	83 ec 1c             	sub    esp,0x1c
c001279f:	83 ec 08             	sub    esp,0x8
c00127a2:	6a 0e                	push   0xe
c00127a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127a8:	e8 13 5a ff ff       	call   c00081c0 <pbuf_header>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	0f b6 c0             	movzx  eax,al
c00127b3:	85 c0                	test   eax,eax
c00127b5:	74 19                	je     c00127d0 <etharp_output+0x34>
c00127b7:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00127bd:	83 c0 01             	add    eax,0x1
c00127c0:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00127c6:	b0 fe                	mov    al,0xfe
c00127c8:	e9 8b 01 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00127cd:	8d 76 00             	lea    esi,[esi+0x0]
c00127d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00127de:	83 ec 08             	sub    esp,0x8
c00127e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127e5:	50                   	push   eax
c00127e6:	e8 65 16 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	0f b6 c0             	movzx  eax,al
c00127f1:	85 c0                	test   eax,eax
c00127f3:	74 0f                	je     c0012804 <etharp_output+0x68>
c00127f5:	c7 44 24 0c 44 0c 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030c44
c00127fd:	e9 3a 01 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012802:	66 90                	xchg   ax,ax
c0012804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012808:	8b 00                	mov    eax,DWORD PTR [eax]
c001280a:	25 f0 00 00 00       	and    eax,0xf0
c001280f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012814:	75 42                	jne    c0012858 <etharp_output+0xbc>
c0012816:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001281b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012820:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012829:	83 c0 01             	add    eax,0x1
c001282c:	8a 00                	mov    al,BYTE PTR [eax]
c001282e:	83 e0 7f             	and    eax,0x7f
c0012831:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012839:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c001283c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012844:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012847:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001284b:	8d 44 24 06          	lea    eax,[esp+0x6]
c001284f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012853:	e9 e4 00 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001285c:	8b 10                	mov    edx,DWORD PTR [eax]
c001285e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012865:	31 c2                	xor    edx,eax
c0012867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001286e:	21 d0                	and    eax,edx
c0012870:	74 3a                	je     c00128ac <etharp_output+0x110>
c0012872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012876:	8b 00                	mov    eax,DWORD PTR [eax]
c0012878:	0f b7 c0             	movzx  eax,ax
c001287b:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012880:	74 2a                	je     c00128ac <etharp_output+0x110>
c0012882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012886:	83 c0 0c             	add    eax,0xc
c0012889:	74 19                	je     c00128a4 <etharp_output+0x108>
c001288b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001288f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012892:	85 c0                	test   eax,eax
c0012894:	74 0e                	je     c00128a4 <etharp_output+0x108>
c0012896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289a:	83 c0 0c             	add    eax,0xc
c001289d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00128a1:	eb 09                	jmp    c00128ac <etharp_output+0x110>
c00128a3:	90                   	nop
c00128a4:	b0 fc                	mov    al,0xfc
c00128a6:	e9 ad 00 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00128ab:	90                   	nop
c00128ac:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128b1:	0f b6 c0             	movzx  eax,al
c00128b4:	c1 e0 04             	shl    eax,0x4
c00128b7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00128bc:	8a 00                	mov    al,BYTE PTR [eax]
c00128be:	0f b6 c0             	movzx  eax,al
c00128c1:	83 f8 02             	cmp    eax,0x2
c00128c4:	75 5a                	jne    c0012920 <etharp_output+0x184>
c00128c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00128cc:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128d1:	0f b6 c0             	movzx  eax,al
c00128d4:	c1 e0 04             	shl    eax,0x4
c00128d7:	05 04 a9 03 c0       	add    eax,0xc003a904
c00128dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00128de:	39 c2                	cmp    edx,eax
c00128e0:	75 3e                	jne    c0012920 <etharp_output+0x184>
c00128e2:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128e8:	83 c0 01             	add    eax,0x1
c00128eb:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128f1:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128f6:	0f b6 c0             	movzx  eax,al
c00128f9:	c1 e0 04             	shl    eax,0x4
c00128fc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012901:	8d 50 08             	lea    edx,[eax+0x8]
c0012904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012908:	83 c0 23             	add    eax,0x23
c001290b:	52                   	push   edx
c001290c:	50                   	push   eax
c001290d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012915:	e8 ce f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	eb 39                	jmp    c0012958 <etharp_output+0x1bc>
c001291f:	90                   	nop
c0012920:	83 ec 04             	sub    esp,0x4
c0012923:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012927:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001292b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001292f:	e8 2c fb ff ff       	call   c0012460 <etharp_query>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	eb 1f                	jmp    c0012958 <etharp_output+0x1bc>
c0012939:	8d 76 00             	lea    esi,[esi+0x0]
c001293c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012940:	83 c0 23             	add    eax,0x23
c0012943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012947:	50                   	push   eax
c0012948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001294c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012950:	e8 93 f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <ethernet_input>:
c001295c:	83 ec 1c             	sub    esp,0x1c
c001295f:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001296a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001296e:	0f b7 c0             	movzx  eax,ax
c0012971:	83 f8 0e             	cmp    eax,0xe
c0012974:	77 26                	ja     c001299c <ethernet_input+0x40>
c0012976:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001297c:	83 c0 01             	add    eax,0x1
c001297f:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012985:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c001298b:	83 c0 01             	add    eax,0x1
c001298e:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012994:	e9 ef 00 00 00       	jmp    c0012a88 <ethernet_input+0x12c>
c0012999:	8d 76 00             	lea    esi,[esi+0x0]
c001299c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129ab:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00129af:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00129b4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00129b9:	83 f8 08             	cmp    eax,0x8
c00129bc:	74 0e                	je     c00129cc <ethernet_input+0x70>
c00129be:	3d 08 06 00 00       	cmp    eax,0x608
c00129c3:	74 6b                	je     c0012a30 <ethernet_input+0xd4>
c00129c5:	e9 92 00 00 00       	jmp    c0012a5c <ethernet_input+0x100>
c00129ca:	66 90                	xchg   ax,ax
c00129cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129d0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129d3:	0f b6 c0             	movzx  eax,al
c00129d6:	83 e0 20             	and    eax,0x20
c00129d9:	0f 84 a1 00 00 00    	je     c0012a80 <ethernet_input+0x124>
c00129df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00129e4:	f7 d8                	neg    eax
c00129e6:	98                   	cwde   
c00129e7:	83 ec 08             	sub    esp,0x8
c00129ea:	50                   	push   eax
c00129eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129ef:	e8 cc 57 ff ff       	call   c00081c0 <pbuf_header>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	0f b6 c0             	movzx  eax,al
c00129fa:	85 c0                	test   eax,eax
c00129fc:	74 1a                	je     c0012a18 <ethernet_input+0xbc>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	68 c8 0b 03 c0       	push   0xc0030bc8
c0012a06:	68 a6 fa 02 c0       	push   0xc002faa6
c0012a0b:	e8 80 d1 00 00       	call   c001fb90 <CPrintf>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	eb 73                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a15:	8d 76 00             	lea    esi,[esi+0x0]
c0012a18:	83 ec 08             	sub    esp,0x8
c0012a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a23:	e8 70 0c 00 00       	call   c0013698 <ip_input>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	eb 4f                	jmp    c0012a7c <ethernet_input+0x120>
c0012a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a34:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a37:	0f b6 c0             	movzx  eax,al
c0012a3a:	83 e0 20             	and    eax,0x20
c0012a3d:	74 45                	je     c0012a84 <ethernet_input+0x128>
c0012a3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a43:	83 c0 23             	add    eax,0x23
c0012a46:	83 ec 04             	sub    esp,0x4
c0012a49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a52:	e8 09 f5 ff ff       	call   c0011f60 <etharp_arp_input>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	eb 20                	jmp    c0012a7c <ethernet_input+0x120>
c0012a5c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a62:	83 c0 01             	add    eax,0x1
c0012a65:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a6b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a71:	83 c0 01             	add    eax,0x1
c0012a74:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a7a:	eb 0c                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a7c:	b0 00                	mov    al,0x0
c0012a7e:	eb 1c                	jmp    c0012a9c <ethernet_input+0x140>
c0012a80:	90                   	nop
c0012a81:	eb 05                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a83:	90                   	nop
c0012a84:	90                   	nop
c0012a85:	8d 76 00             	lea    esi,[esi+0x0]
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a8f:	e8 c8 58 ff ff       	call   c000835c <pbuf_free>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	b0 00                	mov    al,0x0
c0012a99:	8d 76 00             	lea    esi,[esi+0x0]
c0012a9c:	83 c4 1c             	add    esp,0x1c
c0012a9f:	c3                   	ret    

c0012aa0 <icmp_input>:
c0012aa0:	83 ec 2c             	sub    esp,0x2c
c0012aa3:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012aa9:	83 c0 01             	add    eax,0x1
c0012aac:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012ab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ac1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	50                   	push   eax
c0012acb:	e8 18 e1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	0f b7 c0             	movzx  eax,ax
c0012ad6:	c1 e8 08             	shr    eax,0x8
c0012ad9:	83 e0 0f             	and    eax,0xf
c0012adc:	c1 e0 02             	shl    eax,0x2
c0012adf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ae4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ae9:	f7 d8                	neg    eax
c0012aeb:	98                   	cwde   
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	50                   	push   eax
c0012af0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012af4:	e8 c7 56 ff ff       	call   c00081c0 <pbuf_header>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	0f b6 c0             	movzx  eax,al
c0012aff:	85 c0                	test   eax,eax
c0012b01:	0f 85 a9 03 00 00    	jne    c0012eb0 <icmp_input+0x410>
c0012b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b0e:	0f b7 c0             	movzx  eax,ax
c0012b11:	83 f8 03             	cmp    eax,0x3
c0012b14:	0f 86 96 03 00 00    	jbe    c0012eb0 <icmp_input+0x410>
c0012b1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b21:	8a 00                	mov    al,BYTE PTR [eax]
c0012b23:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b27:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012b2c:	85 c0                	test   eax,eax
c0012b2e:	0f 84 64 03 00 00    	je     c0012e98 <icmp_input+0x3f8>
c0012b34:	83 f8 08             	cmp    eax,0x8
c0012b37:	0f 85 3b 03 00 00    	jne    c0012e78 <icmp_input+0x3d8>
c0012b3d:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012b45:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b4a:	25 f0 00 00 00       	and    eax,0xf0
c0012b4f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b54:	75 0a                	jne    c0012b60 <icmp_input+0xc0>
c0012b56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b5e:	66 90                	xchg   ax,ax
c0012b60:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b6c:	50                   	push   eax
c0012b6d:	e8 de 12 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	0f b6 c0             	movzx  eax,al
c0012b78:	85 c0                	test   eax,eax
c0012b7a:	74 08                	je     c0012b84 <icmp_input+0xe4>
c0012b7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b89:	75 25                	jne    c0012bb0 <icmp_input+0x110>
c0012b8b:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b91:	83 c0 01             	add    eax,0x1
c0012b94:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ba1:	e8 b6 57 ff ff       	call   c000835c <pbuf_free>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	e9 4e 03 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	90                   	nop
c0012bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bb8:	0f b7 c0             	movzx  eax,ax
c0012bbb:	83 f8 07             	cmp    eax,0x7
c0012bbe:	0f 86 f0 02 00 00    	jbe    c0012eb4 <icmp_input+0x414>
c0012bc4:	83 ec 0c             	sub    esp,0xc
c0012bc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bcb:	e8 50 09 00 00       	call   c0013520 <inet_chksum_pbuf>
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	0f b7 c0             	movzx  eax,ax
c0012bd6:	85 c0                	test   eax,eax
c0012bd8:	74 26                	je     c0012c00 <icmp_input+0x160>
c0012bda:	83 ec 0c             	sub    esp,0xc
c0012bdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be1:	e8 76 57 ff ff       	call   c000835c <pbuf_free>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012bef:	83 c0 01             	add    eax,0x1
c0012bf2:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012bf8:	e9 ff 02 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	83 ec 08             	sub    esp,0x8
c0012c03:	6a 22                	push   0x22
c0012c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c09:	e8 b2 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	0f b6 c0             	movzx  eax,al
c0012c14:	85 c0                	test   eax,eax
c0012c16:	0f 84 24 01 00 00    	je     c0012d40 <icmp_input+0x2a0>
c0012c1c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012c21:	83 ec 08             	sub    esp,0x8
c0012c24:	50                   	push   eax
c0012c25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c29:	e8 92 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	0f b6 c0             	movzx  eax,al
c0012c34:	85 c0                	test   eax,eax
c0012c36:	74 1c                	je     c0012c54 <icmp_input+0x1b4>
c0012c38:	83 ec 08             	sub    esp,0x8
c0012c3b:	68 4c 0c 03 c0       	push   0xc0030c4c
c0012c40:	68 a6 fa 02 c0       	push   0xc002faa6
c0012c45:	e8 46 cf 00 00       	call   c001fb90 <CPrintf>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	e9 8a 02 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012c52:	66 90                	xchg   ax,ax
c0012c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c5b:	0f b7 c0             	movzx  eax,ax
c0012c5e:	83 ec 04             	sub    esp,0x4
c0012c61:	6a 00                	push   0x0
c0012c63:	50                   	push   eax
c0012c64:	6a 02                	push   0x2
c0012c66:	e8 c9 58 ff ff       	call   c0008534 <pbuf_alloc>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c72:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c77:	0f 84 5b 02 00 00    	je     c0012ed8 <icmp_input+0x438>
c0012c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c81:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c85:	0f b7 c0             	movzx  eax,ax
c0012c88:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c8d:	83 c2 08             	add    edx,0x8
c0012c90:	39 d0                	cmp    eax,edx
c0012c92:	73 18                	jae    c0012cac <icmp_input+0x20c>
c0012c94:	83 ec 08             	sub    esp,0x8
c0012c97:	68 80 0c 03 c0       	push   0xc0030c80
c0012c9c:	68 a6 fa 02 c0       	push   0xc002faa6
c0012ca1:	e8 ea ce 00 00       	call   c001fb90 <CPrintf>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb7:	e8 d8 60 ff ff       	call   c0008d94 <pbuf_copy>
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	0f be c0             	movsx  eax,al
c0012cc2:	85 c0                	test   eax,eax
c0012cc4:	74 1a                	je     c0012ce0 <icmp_input+0x240>
c0012cc6:	83 ec 08             	sub    esp,0x8
c0012cc9:	68 b8 0c 03 c0       	push   0xc0030cb8
c0012cce:	68 a6 fa 02 c0       	push   0xc002faa6
c0012cd3:	e8 b8 ce 00 00       	call   c001fb90 <CPrintf>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	e9 fc 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ceb:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cf0:	f7 d8                	neg    eax
c0012cf2:	98                   	cwde   
c0012cf3:	83 ec 08             	sub    esp,0x8
c0012cf6:	50                   	push   eax
c0012cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfb:	e8 c0 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	0f b6 c0             	movzx  eax,al
c0012d06:	85 c0                	test   eax,eax
c0012d08:	74 1a                	je     c0012d24 <icmp_input+0x284>
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	68 e0 0c 03 c0       	push   0xc0030ce0
c0012d12:	68 a6 fa 02 c0       	push   0xc002faa6
c0012d17:	e8 74 ce 00 00       	call   c001fb90 <CPrintf>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	e9 b8 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d2b:	e8 2c 56 ff ff       	call   c000835c <pbuf_free>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d3b:	eb 37                	jmp    c0012d74 <icmp_input+0x2d4>
c0012d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d40:	83 ec 08             	sub    esp,0x8
c0012d43:	6a de                	push   0xffffffde
c0012d45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d49:	e8 72 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	0f b6 c0             	movzx  eax,al
c0012d54:	85 c0                	test   eax,eax
c0012d56:	74 1c                	je     c0012d74 <icmp_input+0x2d4>
c0012d58:	83 ec 08             	sub    esp,0x8
c0012d5b:	68 e0 0c 03 c0       	push   0xc0030ce0
c0012d60:	68 a6 fa 02 c0       	push   0xc002faa6
c0012d65:	e8 26 ce 00 00       	call   c001fb90 <CPrintf>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	e9 6a 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d7f:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d89:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d8c:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012da0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012da8:	0f b7 c0             	movzx  eax,ax
c0012dab:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012db0:	76 16                	jbe    c0012dc8 <icmp_input+0x328>
c0012db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012db6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dba:	83 c0 09             	add    eax,0x9
c0012dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc1:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012dc5:	eb 15                	jmp    c0012ddc <icmp_input+0x33c>
c0012dc7:	90                   	nop
c0012dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dcc:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dd0:	83 c0 08             	add    eax,0x8
c0012dd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dd7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012ddb:	90                   	nop
c0012ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de0:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de8:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012dee:	83 ec 08             	sub    esp,0x8
c0012df1:	6a 14                	push   0x14
c0012df3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012df7:	e8 fc 06 00 00       	call   c00134f8 <inet_chksum>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e03:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012e07:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012e0d:	83 c0 01             	add    eax,0x1
c0012e10:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012e16:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e1b:	83 ec 08             	sub    esp,0x8
c0012e1e:	50                   	push   eax
c0012e1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e23:	e8 98 53 ff ff       	call   c00081c0 <pbuf_header>
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	0f b6 c0             	movzx  eax,al
c0012e2e:	85 c0                	test   eax,eax
c0012e30:	74 1a                	je     c0012e4c <icmp_input+0x3ac>
c0012e32:	83 ec 08             	sub    esp,0x8
c0012e35:	68 c8 0b 03 c0       	push   0xc0030bc8
c0012e3a:	68 a6 fa 02 c0       	push   0xc002faa6
c0012e3f:	e8 4c cd 00 00       	call   c001fb90 <CPrintf>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	eb 53                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 04             	sub    esp,0x4
c0012e4f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e53:	6a 01                	push   0x1
c0012e55:	6a 00                	push   0x0
c0012e57:	68 ff 00 00 00       	push   0xff
c0012e5c:	6a 00                	push   0x0
c0012e5e:	68 98 68 03 c0       	push   0xc0036898
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	e8 70 0c 00 00       	call   c0013adc <ip_output_if>
c0012e6c:	83 c4 20             	add    esp,0x20
c0012e6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e73:	eb 27                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e75:	8d 76 00             	lea    esi,[esi+0x0]
c0012e78:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e7e:	83 c0 01             	add    eax,0x1
c0012e81:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e87:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012e8d:	83 c0 01             	add    eax,0x1
c0012e90:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012e96:	eb 04                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e98:	90                   	nop
c0012e99:	8d 76 00             	lea    esi,[esi+0x0]
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea3:	e8 b4 54 ff ff       	call   c000835c <pbuf_free>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	eb 4f                	jmp    c0012efc <icmp_input+0x45c>
c0012ead:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb0:	90                   	nop
c0012eb1:	eb 05                	jmp    c0012eb8 <icmp_input+0x418>
c0012eb3:	90                   	nop
c0012eb4:	90                   	nop
c0012eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb8:	83 ec 0c             	sub    esp,0xc
c0012ebb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ebf:	e8 98 54 ff ff       	call   c000835c <pbuf_free>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012ecd:	83 c0 01             	add    eax,0x1
c0012ed0:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012ed6:	eb 24                	jmp    c0012efc <icmp_input+0x45c>
c0012ed8:	90                   	nop
c0012ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee3:	e8 74 54 ff ff       	call   c000835c <pbuf_free>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ef1:	83 c0 01             	add    eax,0x1
c0012ef4:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012efa:	90                   	nop
c0012efb:	90                   	nop
c0012efc:	83 c4 2c             	add    esp,0x2c
c0012eff:	c3                   	ret    

c0012f00 <icmp_send_response>:
c0012f00:	83 ec 2c             	sub    esp,0x2c
c0012f03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012f07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f0b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012f0f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012f13:	83 ec 04             	sub    esp,0x4
c0012f16:	6a 00                	push   0x0
c0012f18:	6a 24                	push   0x24
c0012f1a:	6a 01                	push   0x1
c0012f1c:	e8 13 56 ff ff       	call   c0008534 <pbuf_alloc>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f2d:	0f 84 fd 00 00 00    	je     c0013030 <icmp_send_response+0x130>
c0012f33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f37:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f3b:	0f b7 c0             	movzx  eax,ax
c0012f3e:	83 f8 23             	cmp    eax,0x23
c0012f41:	77 15                	ja     c0012f58 <icmp_send_response+0x58>
c0012f43:	83 ec 08             	sub    esp,0x8
c0012f46:	68 14 0d 03 c0       	push   0xc0030d14
c0012f4b:	68 a6 fa 02 c0       	push   0xc002faa6
c0012f50:	e8 3b cc 00 00       	call   c001fb90 <CPrintf>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f72:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f76:	88 10                	mov    BYTE PTR [eax],dl
c0012f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f80:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f87:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f91:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fa2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fa5:	83 c2 08             	add    edx,0x8
c0012fa8:	83 ec 04             	sub    esp,0x4
c0012fab:	6a 1c                	push   0x1c
c0012fad:	50                   	push   eax
c0012fae:	52                   	push   edx
c0012faf:	e8 c6 d3 fe ff       	call   c000037a <memcpy>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fbb:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012fc9:	0f b7 c0             	movzx  eax,ax
c0012fcc:	83 ec 08             	sub    esp,0x8
c0012fcf:	50                   	push   eax
c0012fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fd4:	e8 1f 05 00 00       	call   c00134f8 <inet_chksum>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fe0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012fe4:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fea:	83 c0 01             	add    eax,0x1
c0012fed:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012ff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ffa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ffe:	83 ec 08             	sub    esp,0x8
c0013001:	6a 01                	push   0x1
c0013003:	6a 00                	push   0x0
c0013005:	68 ff 00 00 00       	push   0xff
c001300a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001300e:	50                   	push   eax
c001300f:	6a 00                	push   0x0
c0013011:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013015:	e8 92 0d 00 00       	call   c0013dac <ip_output>
c001301a:	83 c4 20             	add    esp,0x20
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013024:	e8 33 53 ff ff       	call   c000835c <pbuf_free>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	eb 06                	jmp    c0013034 <icmp_send_response+0x134>
c001302e:	66 90                	xchg   ax,ax
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 c4 2c             	add    esp,0x2c
c0013037:	c3                   	ret    

c0013038 <icmp_dest_unreach>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303f:	0f b6 c0             	movzx  eax,al
c0013042:	83 ec 04             	sub    esp,0x4
c0013045:	50                   	push   eax
c0013046:	6a 03                	push   0x3
c0013048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001304c:	e8 af fe ff ff       	call   c0012f00 <icmp_send_response>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	90                   	nop
c0013055:	83 c4 0c             	add    esp,0xc
c0013058:	c3                   	ret    
c0013059:	8d 76 00             	lea    esi,[esi+0x0]

c001305c <icmp_time_exceeded>:
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013063:	0f b6 c0             	movzx  eax,al
c0013066:	83 ec 04             	sub    esp,0x4
c0013069:	50                   	push   eax
c001306a:	6a 0b                	push   0xb
c001306c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013070:	e8 8b fe ff ff       	call   c0012f00 <icmp_send_response>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	90                   	nop
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	c3                   	ret    
c001307d:	66 90                	xchg   ax,ax
c001307f:	90                   	nop

c0013080 <lwip_standard_chksum>:
c0013080:	83 ec 2c             	sub    esp,0x2c
c0013083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001308b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0013092:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001309a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001309e:	83 e0 01             	and    eax,0x1
c00130a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00130aa:	74 24                	je     c00130d0 <lwip_standard_chksum+0x50>
c00130ac:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130b1:	7e 1d                	jle    c00130d0 <lwip_standard_chksum+0x50>
c00130b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130b7:	8d 42 01             	lea    eax,[edx+0x1]
c00130ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130be:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130c2:	83 c0 01             	add    eax,0x1
c00130c5:	8a 12                	mov    dl,BYTE PTR [edx]
c00130c7:	88 10                	mov    BYTE PTR [eax],dl
c00130c9:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c00130ce:	66 90                	xchg   ax,ax
c00130d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130d8:	eb 1e                	jmp    c00130f8 <lwip_standard_chksum+0x78>
c00130da:	66 90                	xchg   ax,ax
c00130dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e0:	8d 50 02             	lea    edx,[eax+0x2]
c00130e3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00130ea:	0f b7 c0             	movzx  eax,ax
c00130ed:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130f1:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00130f6:	66 90                	xchg   ax,ax
c00130f8:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00130fd:	7f dd                	jg     c00130dc <lwip_standard_chksum+0x5c>
c00130ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013104:	7e 0e                	jle    c0013114 <lwip_standard_chksum+0x94>
c0013106:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001310a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001310e:	8a 12                	mov    dl,BYTE PTR [edx]
c0013110:	88 10                	mov    BYTE PTR [eax],dl
c0013112:	66 90                	xchg   ax,ax
c0013114:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013119:	0f b7 c0             	movzx  eax,ax
c001311c:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013124:	c1 e8 10             	shr    eax,0x10
c0013127:	89 c2                	mov    edx,eax
c0013129:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312d:	0f b7 c0             	movzx  eax,ax
c0013130:	01 d0                	add    eax,edx
c0013132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313a:	c1 e8 10             	shr    eax,0x10
c001313d:	89 c2                	mov    edx,eax
c001313f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013143:	0f b7 c0             	movzx  eax,ax
c0013146:	01 d0                	add    eax,edx
c0013148:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001314c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013151:	74 1d                	je     c0013170 <lwip_standard_chksum+0xf0>
c0013153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013157:	0f b7 c0             	movzx  eax,ax
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 85 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	0f b7 c0             	movzx  eax,ax
c0013169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001316d:	8d 76 00             	lea    esi,[esi+0x0]
c0013170:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013174:	83 c4 2c             	add    esp,0x2c
c0013177:	c3                   	ret    

c0013178 <inet_chksum_pseudo>:
c0013178:	83 ec 2c             	sub    esp,0x2c
c001317b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001317f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013183:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013187:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001318c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013194:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001319d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131a1:	e9 8a 00 00 00       	jmp    c0013230 <inet_chksum_pseudo+0xb8>
c00131a6:	66 90                	xchg   ax,ax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131b0:	0f b7 d0             	movzx  edx,ax
c00131b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ba:	83 ec 08             	sub    esp,0x8
c00131bd:	52                   	push   edx
c00131be:	50                   	push   eax
c00131bf:	e8 bc fe ff ff       	call   c0013080 <lwip_standard_chksum>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	0f b7 c0             	movzx  eax,ax
c00131ca:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d2:	c1 e8 10             	shr    eax,0x10
c00131d5:	89 c2                	mov    edx,eax
c00131d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131db:	0f b7 c0             	movzx  eax,ax
c00131de:	01 d0                	add    eax,edx
c00131e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131ec:	83 e0 01             	and    eax,0x1
c00131ef:	0f b7 c0             	movzx  eax,ax
c00131f2:	85 c0                	test   eax,eax
c00131f4:	74 2e                	je     c0013224 <inet_chksum_pseudo+0xac>
c00131f6:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00131fa:	ba 01 00 00 00       	mov    edx,0x1
c00131ff:	29 c2                	sub    edx,eax
c0013201:	89 d0                	mov    eax,edx
c0013203:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001320b:	0f b7 c0             	movzx  eax,ax
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	50                   	push   eax
c0013212:	e8 d1 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	0f b7 c0             	movzx  eax,ax
c001321d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013221:	8d 76 00             	lea    esi,[esi+0x0]
c0013224:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013228:	8b 00                	mov    eax,DWORD PTR [eax]
c001322a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001322e:	66 90                	xchg   ax,ax
c0013230:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013235:	0f 85 6d ff ff ff    	jne    c00131a8 <inet_chksum_pseudo+0x30>
c001323b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013240:	85 c0                	test   eax,eax
c0013242:	74 1c                	je     c0013260 <inet_chksum_pseudo+0xe8>
c0013244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013248:	0f b7 c0             	movzx  eax,ax
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	50                   	push   eax
c001324f:	e8 94 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	0f b7 c0             	movzx  eax,ax
c001325a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001325e:	66 90                	xchg   ax,ax
c0013260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013264:	8b 00                	mov    eax,DWORD PTR [eax]
c0013266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001326a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326e:	0f b7 c0             	movzx  eax,ax
c0013271:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013279:	c1 e8 10             	shr    eax,0x10
c001327c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013280:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013284:	8b 00                	mov    eax,DWORD PTR [eax]
c0013286:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328e:	0f b7 c0             	movzx  eax,ax
c0013291:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013299:	c1 e8 10             	shr    eax,0x10
c001329c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00132a5:	83 ec 0c             	sub    esp,0xc
c00132a8:	50                   	push   eax
c00132a9:	e8 3a d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132b8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	50                   	push   eax
c00132c1:	e8 22 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	0f b7 c0             	movzx  eax,ax
c00132cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d4:	c1 e8 10             	shr    eax,0x10
c00132d7:	89 c2                	mov    edx,eax
c00132d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132dd:	0f b7 c0             	movzx  eax,ax
c00132e0:	01 d0                	add    eax,edx
c00132e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ea:	c1 e8 10             	shr    eax,0x10
c00132ed:	89 c2                	mov    edx,eax
c00132ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f3:	0f b7 c0             	movzx  eax,ax
c00132f6:	01 d0                	add    eax,edx
c00132f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013300:	f7 d0                	not    eax
c0013302:	83 c4 2c             	add    esp,0x2c
c0013305:	c3                   	ret    
c0013306:	66 90                	xchg   ax,ax

c0013308 <inet_chksum_pseudo_partial>:
c0013308:	83 ec 2c             	sub    esp,0x2c
c001330b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001330f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013313:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013317:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001331b:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013320:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013325:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001333a:	e9 d9 00 00 00       	jmp    c0013418 <inet_chksum_pseudo_partial+0x110>
c001333f:	90                   	nop
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001334d:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013352:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013357:	39 c2                	cmp    edx,eax
c0013359:	76 09                	jbe    c0013364 <inet_chksum_pseudo_partial+0x5c>
c001335b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335f:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013364:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013369:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001336d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013370:	83 ec 08             	sub    esp,0x8
c0013373:	52                   	push   edx
c0013374:	50                   	push   eax
c0013375:	e8 06 fd ff ff       	call   c0013080 <lwip_standard_chksum>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013384:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001338c:	89 d1                	mov    ecx,edx
c001338e:	29 c1                	sub    ecx,eax
c0013390:	89 c8                	mov    eax,ecx
c0013392:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013397:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001339c:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00133a1:	76 15                	jbe    c00133b8 <inet_chksum_pseudo_partial+0xb0>
c00133a3:	83 ec 08             	sub    esp,0x8
c00133a6:	68 40 0d 03 c0       	push   0xc0030d40
c00133ab:	68 a6 fa 02 c0       	push   0xc002faa6
c00133b0:	e8 db c7 00 00       	call   c001fb90 <CPrintf>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bc:	c1 e8 10             	shr    eax,0x10
c00133bf:	89 c2                	mov    edx,eax
c00133c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c5:	0f b7 c0             	movzx  eax,ax
c00133c8:	01 d0                	add    eax,edx
c00133ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00133d6:	83 e0 01             	and    eax,0x1
c00133d9:	0f b7 c0             	movzx  eax,ax
c00133dc:	85 c0                	test   eax,eax
c00133de:	74 2c                	je     c001340c <inet_chksum_pseudo_partial+0x104>
c00133e0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133e4:	ba 01 00 00 00       	mov    edx,0x1
c00133e9:	29 c2                	sub    edx,eax
c00133eb:	89 d0                	mov    eax,edx
c00133ed:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00133f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f5:	0f b7 c0             	movzx  eax,ax
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	50                   	push   eax
c00133fc:	e8 e7 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	0f b7 c0             	movzx  eax,ax
c0013407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001340b:	90                   	nop
c001340c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013410:	8b 00                	mov    eax,DWORD PTR [eax]
c0013412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013416:	66 90                	xchg   ax,ax
c0013418:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001341d:	74 0d                	je     c001342c <inet_chksum_pseudo_partial+0x124>
c001341f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013424:	85 c0                	test   eax,eax
c0013426:	0f 85 14 ff ff ff    	jne    c0013340 <inet_chksum_pseudo_partial+0x38>
c001342c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013431:	85 c0                	test   eax,eax
c0013433:	74 1b                	je     c0013450 <inet_chksum_pseudo_partial+0x148>
c0013435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013439:	0f b7 c0             	movzx  eax,ax
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	50                   	push   eax
c0013440:	e8 a3 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	0f b7 c0             	movzx  eax,ax
c001344b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001344f:	90                   	nop
c0013450:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013454:	8b 00                	mov    eax,DWORD PTR [eax]
c0013456:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	0f b7 c0             	movzx  eax,ax
c0013461:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013469:	c1 e8 10             	shr    eax,0x10
c001346c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013474:	8b 00                	mov    eax,DWORD PTR [eax]
c0013476:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	0f b7 c0             	movzx  eax,ax
c0013481:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013489:	c1 e8 10             	shr    eax,0x10
c001348c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013490:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013495:	83 ec 0c             	sub    esp,0xc
c0013498:	50                   	push   eax
c0013499:	e8 4a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	0f b7 c0             	movzx  eax,ax
c00134a4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134a8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	50                   	push   eax
c00134b1:	e8 32 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	0f b7 c0             	movzx  eax,ax
c00134bc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c4:	c1 e8 10             	shr    eax,0x10
c00134c7:	89 c2                	mov    edx,eax
c00134c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134cd:	0f b7 c0             	movzx  eax,ax
c00134d0:	01 d0                	add    eax,edx
c00134d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134da:	c1 e8 10             	shr    eax,0x10
c00134dd:	89 c2                	mov    edx,eax
c00134df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e3:	0f b7 c0             	movzx  eax,ax
c00134e6:	01 d0                	add    eax,edx
c00134e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f0:	f7 d0                	not    eax
c00134f2:	83 c4 2c             	add    esp,0x2c
c00134f5:	c3                   	ret    
c00134f6:	66 90                	xchg   ax,ax

c00134f8 <inet_chksum>:
c00134f8:	83 ec 1c             	sub    esp,0x1c
c00134fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00134ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013504:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013509:	83 ec 08             	sub    esp,0x8
c001350c:	50                   	push   eax
c001350d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013511:	e8 6a fb ff ff       	call   c0013080 <lwip_standard_chksum>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	f7 d0                	not    eax
c001351b:	83 c4 1c             	add    esp,0x1c
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <inet_chksum_pbuf>:
c0013520:	83 ec 1c             	sub    esp,0x1c
c0013523:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001352b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013534:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013538:	e9 8b 00 00 00       	jmp    c00135c8 <inet_chksum_pbuf+0xa8>
c001353d:	8d 76 00             	lea    esi,[esi+0x0]
c0013540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013548:	0f b7 d0             	movzx  edx,ax
c001354b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001354f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	52                   	push   edx
c0013556:	50                   	push   eax
c0013557:	e8 24 fb ff ff       	call   c0013080 <lwip_standard_chksum>
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	0f b7 c0             	movzx  eax,ax
c0013562:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001356a:	c1 e8 10             	shr    eax,0x10
c001356d:	89 c2                	mov    edx,eax
c001356f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013573:	0f b7 c0             	movzx  eax,ax
c0013576:	01 d0                	add    eax,edx
c0013578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013580:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013584:	83 e0 01             	and    eax,0x1
c0013587:	0f b7 c0             	movzx  eax,ax
c001358a:	85 c0                	test   eax,eax
c001358c:	74 2e                	je     c00135bc <inet_chksum_pbuf+0x9c>
c001358e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013592:	ba 01 00 00 00       	mov    edx,0x1
c0013597:	29 c2                	sub    edx,eax
c0013599:	89 d0                	mov    eax,edx
c001359b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001359f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a3:	0f b7 c0             	movzx  eax,ax
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	50                   	push   eax
c00135aa:	e8 39 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	0f b7 c0             	movzx  eax,ax
c00135b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135b9:	8d 76 00             	lea    esi,[esi+0x0]
c00135bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135c6:	66 90                	xchg   ax,ax
c00135c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135cd:	0f 85 6d ff ff ff    	jne    c0013540 <inet_chksum_pbuf+0x20>
c00135d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00135d8:	85 c0                	test   eax,eax
c00135da:	74 1c                	je     c00135f8 <inet_chksum_pbuf+0xd8>
c00135dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	83 ec 0c             	sub    esp,0xc
c00135e6:	50                   	push   eax
c00135e7:	e8 fc d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	0f b7 c0             	movzx  eax,ax
c00135f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f6:	66 90                	xchg   ax,ax
c00135f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fc:	f7 d0                	not    eax
c00135fe:	83 c4 1c             	add    esp,0x1c
c0013601:	c3                   	ret    
c0013602:	66 90                	xchg   ax,ax

c0013604 <ip_route>:
c0013604:	83 ec 10             	sub    esp,0x10
c0013607:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c001360c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013610:	eb 42                	jmp    c0013654 <ip_route+0x50>
c0013612:	66 90                	xchg   ax,ax
c0013614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013618:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001361b:	83 e0 01             	and    eax,0x1
c001361e:	0f b6 c0             	movzx  eax,al
c0013621:	85 c0                	test   eax,eax
c0013623:	74 23                	je     c0013648 <ip_route+0x44>
c0013625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013629:	8b 10                	mov    edx,DWORD PTR [eax]
c001362b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001362f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013632:	31 c2                	xor    edx,eax
c0013634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013638:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001363b:	21 d0                	and    eax,edx
c001363d:	75 09                	jne    c0013648 <ip_route+0x44>
c001363f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013643:	eb 4f                	jmp    c0013694 <ip_route+0x90>
c0013645:	8d 76 00             	lea    esi,[esi+0x0]
c0013648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001364c:	8b 00                	mov    eax,DWORD PTR [eax]
c001364e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013652:	66 90                	xchg   ax,ax
c0013654:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013659:	75 b9                	jne    c0013614 <ip_route+0x10>
c001365b:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013660:	85 c0                	test   eax,eax
c0013662:	74 10                	je     c0013674 <ip_route+0x70>
c0013664:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013669:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001366c:	0f b6 c0             	movzx  eax,al
c001366f:	83 e0 01             	and    eax,0x1
c0013672:	75 18                	jne    c001368c <ip_route+0x88>
c0013674:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c001367a:	83 c0 01             	add    eax,0x1
c001367d:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013683:	b8 00 00 00 00       	mov    eax,0x0
c0013688:	eb 0a                	jmp    c0013694 <ip_route+0x90>
c001368a:	66 90                	xchg   ax,ax
c001368c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013691:	8d 76 00             	lea    esi,[esi+0x0]
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	c3                   	ret    

c0013698 <ip_input>:
c0013698:	83 ec 1c             	sub    esp,0x1c
c001369b:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00136a1:	83 c0 01             	add    eax,0x1
c00136a4:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00136aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136bc:	0f b7 c0             	movzx  eax,ax
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	50                   	push   eax
c00136c3:	e8 20 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	0f b7 c0             	movzx  eax,ax
c00136ce:	c1 e8 0c             	shr    eax,0xc
c00136d1:	0f b7 c0             	movzx  eax,ax
c00136d4:	83 f8 04             	cmp    eax,0x4
c00136d7:	74 37                	je     c0013710 <ip_input+0x78>
c00136d9:	83 ec 0c             	sub    esp,0xc
c00136dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136e0:	e8 77 4c ff ff       	call   c000835c <pbuf_free>
c00136e5:	83 c4 10             	add    esp,0x10
c00136e8:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00136ee:	83 c0 01             	add    eax,0x1
c00136f1:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00136f7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136fd:	83 c0 01             	add    eax,0x1
c0013700:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013706:	b0 00                	mov    al,0x0
c0013708:	e9 cb 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001370d:	8d 76 00             	lea    esi,[esi+0x0]
c0013710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013714:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013717:	0f b7 c0             	movzx  eax,ax
c001371a:	83 ec 0c             	sub    esp,0xc
c001371d:	50                   	push   eax
c001371e:	e8 c5 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013723:	83 c4 10             	add    esp,0x10
c0013726:	0f b7 c0             	movzx  eax,ax
c0013729:	c1 e8 08             	shr    eax,0x8
c001372c:	83 e0 0f             	and    eax,0xf
c001372f:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013734:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013739:	c1 e0 02             	shl    eax,0x2
c001373c:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013745:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013749:	0f b7 c0             	movzx  eax,ax
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	50                   	push   eax
c0013750:	e8 93 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	66 89 04 24          	mov    WORD PTR [esp],ax
c001375c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013760:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013764:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013769:	0f b7 c0             	movzx  eax,ax
c001376c:	39 c2                	cmp    edx,eax
c001376e:	77 14                	ja     c0013784 <ip_input+0xec>
c0013770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013777:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c001377b:	0f b7 c0             	movzx  eax,ax
c001377e:	39 c2                	cmp    edx,eax
c0013780:	76 36                	jbe    c00137b8 <ip_input+0x120>
c0013782:	66 90                	xchg   ax,ax
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001378b:	e8 cc 4b ff ff       	call   c000835c <pbuf_free>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013799:	83 c0 01             	add    eax,0x1
c001379c:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00137a2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137a8:	83 c0 01             	add    eax,0x1
c00137ab:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137b1:	b0 00                	mov    al,0x0
c00137b3:	e9 20 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c00137b8:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00137bd:	83 ec 08             	sub    esp,0x8
c00137c0:	50                   	push   eax
c00137c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137c5:	e8 2e fd ff ff       	call   c00134f8 <inet_chksum>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	0f b7 c0             	movzx  eax,ax
c00137d0:	85 c0                	test   eax,eax
c00137d2:	74 34                	je     c0013808 <ip_input+0x170>
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137db:	e8 7c 4b ff ff       	call   c000835c <pbuf_free>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00137e9:	83 c0 01             	add    eax,0x1
c00137ec:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00137f2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137f8:	83 c0 01             	add    eax,0x1
c00137fb:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013801:	b0 00                	mov    al,0x0
c0013803:	e9 d0 02 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013808:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001380c:	83 ec 08             	sub    esp,0x8
c001380f:	50                   	push   eax
c0013810:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013814:	e8 13 51 ff ff       	call   c000892c <pbuf_realloc>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013820:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013823:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001382f:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013834:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001383c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013848:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001384b:	83 e0 01             	and    eax,0x1
c001384e:	0f b6 c0             	movzx  eax,al
c0013851:	85 c0                	test   eax,eax
c0013853:	74 43                	je     c0013898 <ip_input+0x200>
c0013855:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013859:	83 c0 04             	add    eax,0x4
c001385c:	74 3a                	je     c0013898 <ip_input+0x200>
c001385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013865:	85 c0                	test   eax,eax
c0013867:	74 2f                	je     c0013898 <ip_input+0x200>
c0013869:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013876:	39 c2                	cmp    edx,eax
c0013878:	74 66                	je     c00138e0 <ip_input+0x248>
c001387a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001387f:	83 ec 08             	sub    esp,0x8
c0013882:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013886:	50                   	push   eax
c0013887:	e8 c4 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	0f b6 c0             	movzx  eax,al
c0013892:	85 c0                	test   eax,eax
c0013894:	75 4a                	jne    c00138e0 <ip_input+0x248>
c0013896:	66 90                	xchg   ax,ax
c0013898:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001389d:	74 15                	je     c00138b4 <ip_input+0x21c>
c001389f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00138a7:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00138ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b0:	eb 0e                	jmp    c00138c0 <ip_input+0x228>
c00138b2:	66 90                	xchg   ax,ax
c00138b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138be:	66 90                	xchg   ax,ax
c00138c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138c4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00138c8:	75 0a                	jne    c00138d4 <ip_input+0x23c>
c00138ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138d9:	0f 85 65 ff ff ff    	jne    c0013844 <ip_input+0x1ac>
c00138df:	90                   	nop
c00138e0:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138e5:	83 ec 08             	sub    esp,0x8
c00138e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ec:	50                   	push   eax
c00138ed:	e8 5e 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	0f b6 c0             	movzx  eax,al
c00138f8:	85 c0                	test   eax,eax
c00138fa:	75 14                	jne    c0013910 <ip_input+0x278>
c00138fc:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013901:	25 f0 00 00 00       	and    eax,0xf0
c0013906:	3d e0 00 00 00       	cmp    eax,0xe0
c001390b:	75 2b                	jne    c0013938 <ip_input+0x2a0>
c001390d:	8d 76 00             	lea    esi,[esi+0x0]
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013917:	e8 40 4a ff ff       	call   c000835c <pbuf_free>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013925:	83 c0 01             	add    eax,0x1
c0013928:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001392e:	b0 00                	mov    al,0x0
c0013930:	e9 a3 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013935:	8d 76 00             	lea    esi,[esi+0x0]
c0013938:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001393d:	75 19                	jne    c0013958 <ip_input+0x2c0>
c001393f:	83 ec 0c             	sub    esp,0xc
c0013942:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013946:	e8 11 4a ff ff       	call   c000835c <pbuf_free>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	b0 00                	mov    al,0x0
c0013950:	e9 83 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013955:	8d 76 00             	lea    esi,[esi+0x0]
c0013958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001395c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013960:	0f b7 c0             	movzx  eax,ax
c0013963:	25 3f ff 00 00       	and    eax,0xff3f
c0013968:	74 2e                	je     c0013998 <ip_input+0x300>
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013971:	e8 7a 13 00 00       	call   c0014cf0 <ip_reass>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001397d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013982:	75 08                	jne    c001398c <ip_input+0x2f4>
c0013984:	b0 00                	mov    al,0x0
c0013986:	e9 4d 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001398b:	90                   	nop
c001398c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013997:	90                   	nop
c0013998:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001399c:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00139a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139a5:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00139aa:	83 ec 08             	sub    esp,0x8
c00139ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b5:	e8 c6 5c ff ff       	call   c0009680 <raw_input>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	0f b6 c0             	movzx  eax,al
c00139c0:	85 c0                	test   eax,eax
c00139c2:	0f 85 e0 00 00 00    	jne    c0013aa8 <ip_input+0x410>
c00139c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139cc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00139cf:	0f b6 c0             	movzx  eax,al
c00139d2:	83 f8 06             	cmp    eax,0x6
c00139d5:	74 25                	je     c00139fc <ip_input+0x364>
c00139d7:	83 f8 11             	cmp    eax,0x11
c00139da:	74 08                	je     c00139e4 <ip_input+0x34c>
c00139dc:	83 f8 01             	cmp    eax,0x1
c00139df:	74 33                	je     c0013a14 <ip_input+0x37c>
c00139e1:	eb 49                	jmp    c0013a2c <ip_input+0x394>
c00139e3:	90                   	nop
c00139e4:	83 ec 08             	sub    esp,0x8
c00139e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ef:	e8 c0 d3 ff ff       	call   c0010db4 <udp_input>
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	e9 b0 00 00 00       	jmp    c0013aac <ip_input+0x414>
c00139fc:	83 ec 08             	sub    esp,0x8
c00139ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a07:	e8 00 a5 ff ff       	call   c000df0c <tcp_input>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	e9 98 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a14:	83 ec 08             	sub    esp,0x8
c0013a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1f:	e8 7c f0 ff ff       	call   c0012aa0 <icmp_input>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	e9 80 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a2c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a31:	83 ec 08             	sub    esp,0x8
c0013a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a38:	50                   	push   eax
c0013a39:	e8 12 04 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	0f b6 c0             	movzx  eax,al
c0013a44:	85 c0                	test   eax,eax
c0013a46:	75 30                	jne    c0013a78 <ip_input+0x3e0>
c0013a48:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a4d:	25 f0 00 00 00       	and    eax,0xf0
c0013a52:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a57:	74 1f                	je     c0013a78 <ip_input+0x3e0>
c0013a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	6a 02                	push   0x2
c0013a69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6d:	e8 c6 f5 ff ff       	call   c0013038 <icmp_dest_unreach>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7f:	e8 d8 48 ff ff       	call   c000835c <pbuf_free>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013a8d:	83 c0 01             	add    eax,0x1
c0013a90:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013a96:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a9c:	83 c0 01             	add    eax,0x1
c0013a9f:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013aa5:	eb 05                	jmp    c0013aac <ip_input+0x414>
c0013aa7:	90                   	nop
c0013aa8:	90                   	nop
c0013aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aac:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013ab6:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013ac0:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013aca:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ad4:	b0 00                	mov    al,0x0
c0013ad6:	66 90                	xchg   ax,ax
c0013ad8:	83 c4 1c             	add    esp,0x1c
c0013adb:	c3                   	ret    

c0013adc <ip_output_if>:
c0013adc:	83 ec 2c             	sub    esp,0x2c
c0013adf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013ae3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013ae7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013aeb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013aef:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013af3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013af7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b03:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013b07:	0f b7 c0             	movzx  eax,ax
c0013b0a:	83 f8 01             	cmp    eax,0x1
c0013b0d:	74 15                	je     c0013b24 <ip_output_if+0x48>
c0013b0f:	83 ec 08             	sub    esp,0x8
c0013b12:	68 4a 0d 03 c0       	push   0xc0030d4a
c0013b17:	68 a6 fa 02 c0       	push   0xc002faa6
c0013b1c:	e8 6f c0 00 00       	call   c001fb90 <CPrintf>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013b29:	0f 84 ed 01 00 00    	je     c0013d1c <ip_output_if+0x240>
c0013b2f:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013b36:	83 ec 08             	sub    esp,0x8
c0013b39:	6a 14                	push   0x14
c0013b3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b3f:	e8 7c 46 ff ff       	call   c00081c0 <pbuf_header>
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	0f b6 c0             	movzx  eax,al
c0013b4a:	85 c0                	test   eax,eax
c0013b4c:	74 16                	je     c0013b64 <ip_output_if+0x88>
c0013b4e:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b54:	83 c0 01             	add    eax,0x1
c0013b57:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b5d:	b0 fe                	mov    al,0xfe
c0013b5f:	e9 44 02 00 00       	jmp    c0013da8 <ip_output_if+0x2cc>
c0013b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b73:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b77:	0f b7 c0             	movzx  eax,ax
c0013b7a:	83 f8 13             	cmp    eax,0x13
c0013b7d:	77 15                	ja     c0013b94 <ip_output_if+0xb8>
c0013b7f:	83 ec 08             	sub    esp,0x8
c0013b82:	68 58 0d 03 c0       	push   0xc0030d58
c0013b87:	68 a6 fa 02 c0       	push   0xc002faa6
c0013b8c:	e8 ff bf 00 00       	call   c001fb90 <CPrintf>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b98:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013b9c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013b9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ba7:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013baa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013baf:	c1 e0 08             	shl    eax,0x8
c0013bb2:	89 c2                	mov    edx,eax
c0013bb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013bb9:	09 d0                	or     eax,edx
c0013bbb:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013bcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bd3:	0f b7 c0             	movzx  eax,ax
c0013bd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bde:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013be1:	c1 e8 10             	shr    eax,0x10
c0013be4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013be8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013bed:	c1 e8 02             	shr    eax,0x2
c0013bf0:	0f b7 c0             	movzx  eax,ax
c0013bf3:	c1 e0 08             	shl    eax,0x8
c0013bf6:	80 cc 40             	or     ah,0x40
c0013bf9:	89 c2                	mov    edx,eax
c0013bfb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c00:	09 d0                	or     eax,edx
c0013c02:	0f b7 c0             	movzx  eax,ax
c0013c05:	83 ec 0c             	sub    esp,0xc
c0013c08:	50                   	push   eax
c0013c09:	e8 da cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c15:	66 89 02             	mov    WORD PTR [edx],ax
c0013c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c1c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c1f:	0f b7 c0             	movzx  eax,ax
c0013c22:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c2d:	0f b7 c0             	movzx  eax,ax
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	50                   	push   eax
c0013c34:	e8 af cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c39:	83 c4 10             	add    esp,0x10
c0013c3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c40:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013c44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c48:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c4c:	0f b7 c0             	movzx  eax,ax
c0013c4f:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c57:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c5d:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c63:	0f b7 c0             	movzx  eax,ax
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	50                   	push   eax
c0013c6a:	e8 79 cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c7e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013c82:	0f b7 c0             	movzx  eax,ax
c0013c85:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c89:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c8f:	83 c0 01             	add    eax,0x1
c0013c92:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013c98:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013c9d:	74 0d                	je     c0013cac <ip_output_if+0x1d0>
c0013c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ca5:	85 c0                	test   eax,eax
c0013ca7:	75 13                	jne    c0013cbc <ip_output_if+0x1e0>
c0013ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013cb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cba:	eb 10                	jmp    c0013ccc <ip_output_if+0x1f0>
c0013cbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cd3:	0f b7 c0             	movzx  eax,ax
c0013cd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cde:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ce1:	c1 e8 10             	shr    eax,0x10
c0013ce4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cec:	c1 e8 10             	shr    eax,0x10
c0013cef:	89 c2                	mov    edx,eax
c0013cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf5:	0f b7 c0             	movzx  eax,ax
c0013cf8:	01 d0                	add    eax,edx
c0013cfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d02:	c1 e8 10             	shr    eax,0x10
c0013d05:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d09:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d15:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013d19:	eb 21                	jmp    c0013d3c <ip_output_if+0x260>
c0013d1b:	90                   	nop
c0013d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d36:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d3a:	66 90                	xchg   ax,ax
c0013d3c:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d42:	83 c0 01             	add    eax,0x1
c0013d45:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d52:	0f b7 c0             	movzx  eax,ax
c0013d55:	85 c0                	test   eax,eax
c0013d57:	74 33                	je     c0013d8c <ip_output_if+0x2b0>
c0013d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d67:	0f b7 d2             	movzx  edx,dx
c0013d6a:	0f b7 c0             	movzx  eax,ax
c0013d6d:	39 c2                	cmp    edx,eax
c0013d6f:	76 1b                	jbe    c0013d8c <ip_output_if+0x2b0>
c0013d71:	83 ec 04             	sub    esp,0x4
c0013d74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d78:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013d7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d80:	e8 2b 14 00 00       	call   c00151b0 <ip_frag>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	eb 1e                	jmp    c0013da8 <ip_output_if+0x2cc>
c0013d8a:	66 90                	xchg   ax,ax
c0013d8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013d93:	83 ec 04             	sub    esp,0x4
c0013d96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013d9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013da2:	ff d0                	call   eax
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	90                   	nop
c0013da8:	83 c4 2c             	add    esp,0x2c
c0013dab:	c3                   	ret    

c0013dac <ip_output>:
c0013dac:	83 ec 2c             	sub    esp,0x2c
c0013daf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013db3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013db7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013dbb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dbf:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013dc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013dcf:	0f b7 c0             	movzx  eax,ax
c0013dd2:	83 f8 01             	cmp    eax,0x1
c0013dd5:	74 15                	je     c0013dec <ip_output+0x40>
c0013dd7:	83 ec 08             	sub    esp,0x8
c0013dda:	68 4a 0d 03 c0       	push   0xc0030d4a
c0013ddf:	68 a6 fa 02 c0       	push   0xc002faa6
c0013de4:	e8 a7 bd 00 00       	call   c001fb90 <CPrintf>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013df3:	e8 0c f8 ff ff       	call   c0013604 <ip_route>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e04:	75 16                	jne    c0013e1c <ip_output+0x70>
c0013e06:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013e0c:	83 c0 01             	add    eax,0x1
c0013e0f:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013e15:	b0 fc                	mov    al,0xfc
c0013e17:	eb 33                	jmp    c0013e4c <ip_output+0xa0>
c0013e19:	8d 76 00             	lea    esi,[esi+0x0]
c0013e1c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e21:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e2b:	83 ec 04             	sub    esp,0x4
c0013e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e32:	51                   	push   ecx
c0013e33:	52                   	push   edx
c0013e34:	50                   	push   eax
c0013e35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e41:	e8 96 fc ff ff       	call   c0013adc <ip_output_if>
c0013e46:	83 c4 20             	add    esp,0x20
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	83 c4 2c             	add    esp,0x2c
c0013e4f:	c3                   	ret    

c0013e50 <ip4_addr_isbroadcast>:
c0013e50:	83 ec 10             	sub    esp,0x10
c0013e53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e5b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e60:	74 0a                	je     c0013e6c <ip4_addr_isbroadcast+0x1c>
c0013e62:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e67:	75 07                	jne    c0013e70 <ip4_addr_isbroadcast+0x20>
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	b0 01                	mov    al,0x1
c0013e6e:	eb 64                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e74:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e77:	0f b6 c0             	movzx  eax,al
c0013e7a:	83 e0 02             	and    eax,0x2
c0013e7d:	75 05                	jne    c0013e84 <ip4_addr_isbroadcast+0x34>
c0013e7f:	b0 00                	mov    al,0x0
c0013e81:	eb 51                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e83:	90                   	nop
c0013e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e8b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013e8f:	75 07                	jne    c0013e98 <ip4_addr_isbroadcast+0x48>
c0013e91:	b0 00                	mov    al,0x0
c0013e93:	eb 3f                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e95:	8d 76 00             	lea    esi,[esi+0x0]
c0013e98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ea3:	31 c2                	xor    edx,eax
c0013ea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eac:	21 d0                	and    eax,edx
c0013eae:	75 20                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eb7:	f7 d0                	not    eax
c0013eb9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013ebd:	89 c2                	mov    edx,eax
c0013ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ec6:	f7 d0                	not    eax
c0013ec8:	39 c2                	cmp    edx,eax
c0013eca:	75 04                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013ecc:	b0 01                	mov    al,0x1
c0013ece:	eb 04                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013ed0:	b0 00                	mov    al,0x0
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	c3                   	ret    

c0013ed8 <ip4_addr_netmask_valid>:
c0013ed8:	83 ec 1c             	sub    esp,0x1c
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee2:	e8 25 cd fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013eee:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013ef6:	eb 10                	jmp    c0013f08 <ip4_addr_netmask_valid+0x30>
c0013ef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013efc:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f00:	74 12                	je     c0013f14 <ip4_addr_netmask_valid+0x3c>
c0013f02:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f0d:	75 e9                	jne    c0013ef8 <ip4_addr_netmask_valid+0x20>
c0013f0f:	eb 1b                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f11:	8d 76 00             	lea    esi,[esi+0x0]
c0013f14:	90                   	nop
c0013f15:	eb 15                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f17:	90                   	nop
c0013f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f1c:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f20:	74 06                	je     c0013f28 <ip4_addr_netmask_valid+0x50>
c0013f22:	b0 00                	mov    al,0x0
c0013f24:	eb 12                	jmp    c0013f38 <ip4_addr_netmask_valid+0x60>
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f31:	75 e5                	jne    c0013f18 <ip4_addr_netmask_valid+0x40>
c0013f33:	b0 01                	mov    al,0x1
c0013f35:	8d 76 00             	lea    esi,[esi+0x0]
c0013f38:	83 c4 1c             	add    esp,0x1c
c0013f3b:	c3                   	ret    

c0013f3c <ipaddr_aton>:
c0013f3c:	83 ec 2c             	sub    esp,0x2c
c0013f3f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f4b:	8a 00                	mov    al,BYTE PTR [eax]
c0013f4d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f51:	8d 76 00             	lea    esi,[esi+0x0]
c0013f54:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f58:	0f b6 c0             	movzx  eax,al
c0013f5b:	83 f8 2f             	cmp    eax,0x2f
c0013f5e:	76 0c                	jbe    c0013f6c <ipaddr_aton+0x30>
c0013f60:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f64:	0f b6 c0             	movzx  eax,al
c0013f67:	83 f8 39             	cmp    eax,0x39
c0013f6a:	76 0c                	jbe    c0013f78 <ipaddr_aton+0x3c>
c0013f6c:	b8 00 00 00 00       	mov    eax,0x0
c0013f71:	e9 f2 02 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c0013f76:	66 90                	xchg   ax,ax
c0013f78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f80:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013f85:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f8a:	83 f8 30             	cmp    eax,0x30
c0013f8d:	75 45                	jne    c0013fd4 <ipaddr_aton+0x98>
c0013f8f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f98:	8a 00                	mov    al,BYTE PTR [eax]
c0013f9a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f9e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fa3:	83 f8 78             	cmp    eax,0x78
c0013fa6:	74 0c                	je     c0013fb4 <ipaddr_aton+0x78>
c0013fa8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fad:	83 f8 58             	cmp    eax,0x58
c0013fb0:	75 1a                	jne    c0013fcc <ipaddr_aton+0x90>
c0013fb2:	66 90                	xchg   ax,ax
c0013fb4:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013fb9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc2:	8a 00                	mov    al,BYTE PTR [eax]
c0013fc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fc8:	eb 0a                	jmp    c0013fd4 <ipaddr_aton+0x98>
c0013fca:	66 90                	xchg   ax,ax
c0013fcc:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fd8:	0f b6 c0             	movzx  eax,al
c0013fdb:	83 f8 2f             	cmp    eax,0x2f
c0013fde:	76 3c                	jbe    c001401c <ipaddr_aton+0xe0>
c0013fe0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fe4:	0f b6 c0             	movzx  eax,al
c0013fe7:	83 f8 39             	cmp    eax,0x39
c0013fea:	77 30                	ja     c001401c <ipaddr_aton+0xe0>
c0013fec:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013ff1:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013ff6:	89 c2                	mov    edx,eax
c0013ff8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ffd:	01 d0                	add    eax,edx
c0013fff:	83 e8 30             	sub    eax,0x30
c0014002:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014006:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001400b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400f:	8a 00                	mov    al,BYTE PTR [eax]
c0014011:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014015:	e9 ae 00 00 00       	jmp    c00140c8 <ipaddr_aton+0x18c>
c001401a:	66 90                	xchg   ax,ax
c001401c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014021:	83 f8 10             	cmp    eax,0x10
c0014024:	0f 85 a6 00 00 00    	jne    c00140d0 <ipaddr_aton+0x194>
c001402a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001402e:	0f b6 c0             	movzx  eax,al
c0014031:	83 f8 2f             	cmp    eax,0x2f
c0014034:	76 0e                	jbe    c0014044 <ipaddr_aton+0x108>
c0014036:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001403a:	0f b6 c0             	movzx  eax,al
c001403d:	83 f8 39             	cmp    eax,0x39
c0014040:	76 32                	jbe    c0014074 <ipaddr_aton+0x138>
c0014042:	66 90                	xchg   ax,ax
c0014044:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014048:	0f b6 c0             	movzx  eax,al
c001404b:	83 f8 60             	cmp    eax,0x60
c001404e:	76 0c                	jbe    c001405c <ipaddr_aton+0x120>
c0014050:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014054:	0f b6 c0             	movzx  eax,al
c0014057:	83 f8 66             	cmp    eax,0x66
c001405a:	76 18                	jbe    c0014074 <ipaddr_aton+0x138>
c001405c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014060:	0f b6 c0             	movzx  eax,al
c0014063:	83 f8 40             	cmp    eax,0x40
c0014066:	76 68                	jbe    c00140d0 <ipaddr_aton+0x194>
c0014068:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001406c:	0f b6 c0             	movzx  eax,al
c001406f:	83 f8 46             	cmp    eax,0x46
c0014072:	77 5c                	ja     c00140d0 <ipaddr_aton+0x194>
c0014074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014078:	c1 e0 04             	shl    eax,0x4
c001407b:	89 c2                	mov    edx,eax
c001407d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014082:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014085:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014089:	0f b6 c0             	movzx  eax,al
c001408c:	83 f8 60             	cmp    eax,0x60
c001408f:	76 13                	jbe    c00140a4 <ipaddr_aton+0x168>
c0014091:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014095:	0f b6 c0             	movzx  eax,al
c0014098:	83 f8 7a             	cmp    eax,0x7a
c001409b:	77 07                	ja     c00140a4 <ipaddr_aton+0x168>
c001409d:	b8 61 00 00 00       	mov    eax,0x61
c00140a2:	eb 08                	jmp    c00140ac <ipaddr_aton+0x170>
c00140a4:	b8 41 00 00 00       	mov    eax,0x41
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	29 c1                	sub    ecx,eax
c00140ae:	89 c8                	mov    eax,ecx
c00140b0:	09 d0                	or     eax,edx
c00140b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140b6:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140bf:	8a 00                	mov    al,BYTE PTR [eax]
c00140c1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	e9 07 ff ff ff       	jmp    c0013fd4 <ipaddr_aton+0x98>
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140d5:	83 f8 2e             	cmp    eax,0x2e
c00140d8:	75 42                	jne    c001411c <ipaddr_aton+0x1e0>
c00140da:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140de:	83 c0 0c             	add    eax,0xc
c00140e1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140e5:	72 0d                	jb     c00140f4 <ipaddr_aton+0x1b8>
c00140e7:	b8 00 00 00 00       	mov    eax,0x0
c00140ec:	e9 77 01 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140f8:	8d 50 04             	lea    edx,[eax+0x4]
c00140fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014103:	89 10                	mov    DWORD PTR [eax],edx
c0014105:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001410a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001410e:	8a 00                	mov    al,BYTE PTR [eax]
c0014110:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014114:	e9 3b fe ff ff       	jmp    c0013f54 <ipaddr_aton+0x18>
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	90                   	nop
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	85 c0                	test   eax,eax
c0014124:	74 46                	je     c001416c <ipaddr_aton+0x230>
c0014126:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001412b:	83 f8 20             	cmp    eax,0x20
c001412e:	74 3c                	je     c001416c <ipaddr_aton+0x230>
c0014130:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014135:	83 f8 0c             	cmp    eax,0xc
c0014138:	74 32                	je     c001416c <ipaddr_aton+0x230>
c001413a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413f:	83 f8 0a             	cmp    eax,0xa
c0014142:	74 28                	je     c001416c <ipaddr_aton+0x230>
c0014144:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014149:	83 f8 0d             	cmp    eax,0xd
c001414c:	74 1e                	je     c001416c <ipaddr_aton+0x230>
c001414e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014153:	83 f8 09             	cmp    eax,0x9
c0014156:	74 14                	je     c001416c <ipaddr_aton+0x230>
c0014158:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415d:	83 f8 0b             	cmp    eax,0xb
c0014160:	74 0a                	je     c001416c <ipaddr_aton+0x230>
c0014162:	b8 00 00 00 00       	mov    eax,0x0
c0014167:	e9 fc 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001416c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014170:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014174:	29 c2                	sub    edx,eax
c0014176:	89 d0                	mov    eax,edx
c0014178:	c1 f8 02             	sar    eax,0x2
c001417b:	83 c0 01             	add    eax,0x1
c001417e:	83 f8 04             	cmp    eax,0x4
c0014181:	0f 87 9d 00 00 00    	ja     c0014224 <ipaddr_aton+0x2e8>
c0014187:	8b 04 85 90 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf270]
c001418e:	ff e0                	jmp    eax
c0014190:	b8 00 00 00 00       	mov    eax,0x0
c0014195:	e9 ce 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001419a:	66 90                	xchg   ax,ax
c001419c:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00141a4:	76 0a                	jbe    c00141b0 <ipaddr_aton+0x274>
c00141a6:	b8 00 00 00 00       	mov    eax,0x0
c00141ab:	e9 b8 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b4:	c1 e0 18             	shl    eax,0x18
c00141b7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141bb:	e9 80 00 00 00       	jmp    c0014240 <ipaddr_aton+0x304>
c00141c0:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00141c8:	76 0a                	jbe    c00141d4 <ipaddr_aton+0x298>
c00141ca:	b8 00 00 00 00       	mov    eax,0x0
c00141cf:	e9 94 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d8:	c1 e0 18             	shl    eax,0x18
c00141db:	89 c2                	mov    edx,eax
c00141dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141e1:	c1 e0 10             	shl    eax,0x10
c00141e4:	09 d0                	or     eax,edx
c00141e6:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141ea:	eb 54                	jmp    c0014240 <ipaddr_aton+0x304>
c00141ec:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00141f4:	76 0a                	jbe    c0014200 <ipaddr_aton+0x2c4>
c00141f6:	b8 00 00 00 00       	mov    eax,0x0
c00141fb:	eb 6b                	jmp    c0014268 <ipaddr_aton+0x32c>
c00141fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014204:	c1 e0 18             	shl    eax,0x18
c0014207:	89 c2                	mov    edx,eax
c0014209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001420d:	c1 e0 10             	shl    eax,0x10
c0014210:	09 c2                	or     edx,eax
c0014212:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014216:	c1 e0 08             	shl    eax,0x8
c0014219:	09 d0                	or     eax,edx
c001421b:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001421f:	eb 1f                	jmp    c0014240 <ipaddr_aton+0x304>
c0014221:	8d 76 00             	lea    esi,[esi+0x0]
c0014224:	83 ec 08             	sub    esp,0x8
c0014227:	68 85 0d 03 c0       	push   0xc0030d85
c001422c:	68 a6 fa 02 c0       	push   0xc002faa6
c0014231:	e8 5a b9 00 00       	call   c001fb90 <CPrintf>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	eb 05                	jmp    c0014240 <ipaddr_aton+0x304>
c001423b:	90                   	nop
c001423c:	90                   	nop
c001423d:	8d 76 00             	lea    esi,[esi+0x0]
c0014240:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014245:	74 19                	je     c0014260 <ipaddr_aton+0x324>
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001424e:	e8 b9 c9 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	89 c2                	mov    edx,eax
c0014258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001425c:	89 10                	mov    DWORD PTR [eax],edx
c001425e:	66 90                	xchg   ax,ax
c0014260:	b8 01 00 00 00       	mov    eax,0x1
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	83 c4 2c             	add    esp,0x2c
c001426b:	c3                   	ret    

c001426c <ipaddr_addr>:
c001426c:	83 ec 1c             	sub    esp,0x1c
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014276:	50                   	push   eax
c0014277:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427b:	e8 bc fc ff ff       	call   c0013f3c <ipaddr_aton>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	85 c0                	test   eax,eax
c0014285:	74 09                	je     c0014290 <ipaddr_addr+0x24>
c0014287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001428b:	eb 0b                	jmp    c0014298 <ipaddr_addr+0x2c>
c001428d:	8d 76 00             	lea    esi,[esi+0x0]
c0014290:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014295:	8d 76 00             	lea    esi,[esi+0x0]
c0014298:	83 c4 1c             	add    esp,0x1c
c001429b:	c3                   	ret    

c001429c <ipaddr_ntoa_r>:
c001429c:	83 ec 20             	sub    esp,0x20
c001429f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00142bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142c1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00142c6:	e9 f9 00 00 00       	jmp    c00143c4 <ipaddr_ntoa_r+0x128>
c00142cb:	90                   	nop
c00142cc:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142d1:	8d 76 00             	lea    esi,[esi+0x0]
c00142d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d8:	8a 00                	mov    al,BYTE PTR [eax]
c00142da:	0f b6 c8             	movzx  ecx,al
c00142dd:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00142e2:	89 c8                	mov    eax,ecx
c00142e4:	f7 e2                	mul    edx
c00142e6:	c1 ea 03             	shr    edx,0x3
c00142e9:	89 d0                	mov    eax,edx
c00142eb:	c1 e0 02             	shl    eax,0x2
c00142ee:	01 d0                	add    eax,edx
c00142f0:	01 c0                	add    eax,eax
c00142f2:	29 c1                	sub    ecx,eax
c00142f4:	89 c8                	mov    eax,ecx
c00142f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00142fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142fe:	8a 00                	mov    al,BYTE PTR [eax]
c0014300:	0f b6 c0             	movzx  eax,al
c0014303:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014308:	f7 e2                	mul    edx
c001430a:	89 d0                	mov    eax,edx
c001430c:	c1 e8 03             	shr    eax,0x3
c001430f:	88 c2                	mov    dl,al
c0014311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014315:	88 10                	mov    BYTE PTR [eax],dl
c0014317:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001431b:	83 c0 30             	add    eax,0x30
c001431e:	88 c1                	mov    cl,al
c0014320:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014324:	8d 50 01             	lea    edx,[eax+0x1]
c0014327:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001432b:	0f b6 c0             	movzx  eax,al
c001432e:	88 ca                	mov    dl,cl
c0014330:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014338:	8a 00                	mov    al,BYTE PTR [eax]
c001433a:	0f b6 c0             	movzx  eax,al
c001433d:	85 c0                	test   eax,eax
c001433f:	75 93                	jne    c00142d4 <ipaddr_ntoa_r+0x38>
c0014341:	eb 35                	jmp    c0014378 <ipaddr_ntoa_r+0xdc>
c0014343:	90                   	nop
c0014344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014348:	8d 50 01             	lea    edx,[eax+0x1]
c001434b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014353:	7f 0b                	jg     c0014360 <ipaddr_ntoa_r+0xc4>
c0014355:	b8 00 00 00 00       	mov    eax,0x0
c001435a:	e9 85 00 00 00       	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c001435f:	90                   	nop
c0014360:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014369:	8d 48 01             	lea    ecx,[eax+0x1]
c001436c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014370:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014374:	88 10                	mov    BYTE PTR [eax],dl
c0014376:	66 90                	xchg   ax,ax
c0014378:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001437c:	8d 50 ff             	lea    edx,[eax-0x1]
c001437f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014383:	0f b6 c0             	movzx  eax,al
c0014386:	85 c0                	test   eax,eax
c0014388:	75 ba                	jne    c0014344 <ipaddr_ntoa_r+0xa8>
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	8d 50 01             	lea    edx,[eax+0x1]
c0014391:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014395:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014399:	7f 09                	jg     c00143a4 <ipaddr_ntoa_r+0x108>
c001439b:	b8 00 00 00 00       	mov    eax,0x0
c00143a0:	eb 42                	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143a8:	8d 50 01             	lea    edx,[eax+0x1]
c00143ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143af:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00143b2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00143b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00143bb:	83 c0 01             	add    eax,0x1
c00143be:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00143c2:	66 90                	xchg   ax,ax
c00143c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00143c9:	83 f8 03             	cmp    eax,0x3
c00143cc:	0f 86 fa fe ff ff    	jbe    c00142cc <ipaddr_ntoa_r+0x30>
c00143d2:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00143de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143e2:	66 90                	xchg   ax,ax
c00143e4:	83 c4 20             	add    esp,0x20
c00143e7:	c3                   	ret    

c00143e8 <ipaddr_ntoa>:
c00143e8:	6a 10                	push   0x10
c00143ea:	68 a4 a9 03 c0       	push   0xc003a9a4
c00143ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143f3:	e8 a4 fe ff ff       	call   c001429c <ipaddr_ntoa_r>
c00143f8:	83 c4 0c             	add    esp,0xc
c00143fb:	c3                   	ret    

c00143fc <ip_reass_dequeue_datagram>:
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014404:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014408:	75 0e                	jne    c0014418 <ip_reass_dequeue_datagram+0x1c>
c001440a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014410:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014415:	eb 29                	jmp    c0014440 <ip_reass_dequeue_datagram+0x44>
c0014417:	90                   	nop
c0014418:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001441d:	75 15                	jne    c0014434 <ip_reass_dequeue_datagram+0x38>
c001441f:	83 ec 08             	sub    esp,0x8
c0014422:	68 ac 0d 03 c0       	push   0xc0030dac
c0014427:	68 a6 fa 02 c0       	push   0xc002faa6
c001442c:	e8 5f b7 00 00       	call   c001fb90 <CPrintf>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014438:	8b 10                	mov    edx,DWORD PTR [eax]
c001443a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001443e:	89 10                	mov    DWORD PTR [eax],edx
c0014440:	83 ec 08             	sub    esp,0x8
c0014443:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014447:	6a 05                	push   0x5
c0014449:	e8 52 36 ff ff       	call   c0007aa0 <memp_free>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	90                   	nop
c0014452:	83 c4 0c             	add    esp,0xc
c0014455:	c3                   	ret    
c0014456:	66 90                	xchg   ax,ax

c0014458 <ip_reass_free_complete_datagram>:
c0014458:	83 ec 2c             	sub    esp,0x2c
c001445b:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0014462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014466:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001446a:	75 18                	jne    c0014484 <ip_reass_free_complete_datagram+0x2c>
c001446c:	83 ec 08             	sub    esp,0x8
c001446f:	68 c5 0d 03 c0       	push   0xc0030dc5
c0014474:	68 a6 fa 02 c0       	push   0xc002faa6
c0014479:	e8 12 b7 00 00       	call   c001fb90 <CPrintf>
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	8d 76 00             	lea    esi,[esi+0x0]
c0014484:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014489:	74 21                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c001448b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001448f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014491:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014495:	74 15                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	68 d1 0d 03 c0       	push   0xc0030dd1
c001449f:	68 a6 fa 02 c0       	push   0xc002faa6
c00144a4:	e8 e7 b6 00 00       	call   c001fb90 <CPrintf>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144be:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144c2:	0f b7 c0             	movzx  eax,ax
c00144c5:	85 c0                	test   eax,eax
c00144c7:	0f 85 a3 00 00 00    	jne    c0014570 <ip_reass_free_complete_datagram+0x118>
c00144cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00144de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00144e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e9:	8d 50 08             	lea    edx,[eax+0x8]
c00144ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144f3:	83 ec 04             	sub    esp,0x4
c00144f6:	6a 14                	push   0x14
c00144f8:	52                   	push   edx
c00144f9:	50                   	push   eax
c00144fa:	e8 7b be fe ff       	call   c000037a <memcpy>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	83 ec 08             	sub    esp,0x8
c0014505:	6a 01                	push   0x1
c0014507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001450b:	e8 4c eb ff ff       	call   c001305c <icmp_time_exceeded>
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	83 ec 0c             	sub    esp,0xc
c0014516:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001451a:	e8 11 46 ff ff       	call   c0008b30 <pbuf_clen>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014526:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001452b:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014530:	01 d0                	add    eax,edx
c0014532:	3d ff ff 00 00       	cmp    eax,0xffff
c0014537:	7e 17                	jle    c0014550 <ip_reass_free_complete_datagram+0xf8>
c0014539:	83 ec 08             	sub    esp,0x8
c001453c:	68 e3 0d 03 c0       	push   0xc0030de3
c0014541:	68 a6 fa 02 c0       	push   0xc002faa6
c0014546:	e8 45 b6 00 00       	call   c001fb90 <CPrintf>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	66 90                	xchg   ax,ax
c0014550:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014555:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001455a:	01 d0                	add    eax,edx
c001455c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014568:	e8 ef 3d ff ff       	call   c000835c <pbuf_free>
c001456d:	83 c4 10             	add    esp,0x10
c0014570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001457b:	eb 7b                	jmp    c00145f8 <ip_reass_free_complete_datagram+0x1a0>
c001457d:	8d 76 00             	lea    esi,[esi+0x0]
c0014580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014587:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001458b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001458f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014597:	8b 00                	mov    eax,DWORD PTR [eax]
c0014599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a4:	e8 87 45 ff ff       	call   c0008b30 <pbuf_clen>
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00145b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145b5:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145ba:	01 d0                	add    eax,edx
c00145bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00145c1:	7e 15                	jle    c00145d8 <ip_reass_free_complete_datagram+0x180>
c00145c3:	83 ec 08             	sub    esp,0x8
c00145c6:	68 e3 0d 03 c0       	push   0xc0030de3
c00145cb:	68 a6 fa 02 c0       	push   0xc002faa6
c00145d0:	e8 bb b5 00 00       	call   c001fb90 <CPrintf>
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145dd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00145e2:	01 d0                	add    eax,edx
c00145e4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f0:	e8 67 3d ff ff       	call   c000835c <pbuf_free>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00145fd:	75 81                	jne    c0014580 <ip_reass_free_complete_datagram+0x128>
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014606:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001460a:	e8 ed fd ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c001460f:	83 c4 10             	add    esp,0x10
c0014612:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014618:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001461d:	0f b7 c0             	movzx  eax,ax
c0014620:	39 c2                	cmp    edx,eax
c0014622:	76 18                	jbe    c001463c <ip_reass_free_complete_datagram+0x1e4>
c0014624:	83 ec 08             	sub    esp,0x8
c0014627:	68 00 0e 03 c0       	push   0xc0030e00
c001462c:	68 a6 fa 02 c0       	push   0xc002faa6
c0014631:	e8 5a b5 00 00       	call   c001fb90 <CPrintf>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	8d 76 00             	lea    esi,[esi+0x0]
c001463c:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014643:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014648:	89 d1                	mov    ecx,edx
c001464a:	29 c1                	sub    ecx,eax
c001464c:	89 c8                	mov    eax,ecx
c001464e:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014654:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014659:	83 c4 2c             	add    esp,0x2c
c001465c:	c3                   	ret    
c001465d:	8d 76 00             	lea    esi,[esi+0x0]

c0014660 <ip_reass_tmr>:
c0014660:	83 ec 1c             	sub    esp,0x1c
c0014663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001466b:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014674:	eb 62                	jmp    c00146d8 <ip_reass_tmr+0x78>
c0014676:	66 90                	xchg   ax,ax
c0014678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001467c:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001467f:	0f b6 c0             	movzx  eax,al
c0014682:	85 c0                	test   eax,eax
c0014684:	74 2a                	je     c00146b0 <ip_reass_tmr+0x50>
c0014686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001468a:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001468d:	83 e8 01             	sub    eax,0x1
c0014690:	88 c2                	mov    dl,al
c0014692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014696:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001469d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00146a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146ab:	eb 2b                	jmp    c00146d8 <ip_reass_tmr+0x78>
c00146ad:	8d 76 00             	lea    esi,[esi+0x0]
c00146b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00146be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146c2:	83 ec 08             	sub    esp,0x8
c00146c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146cd:	e8 86 fd ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	8d 76 00             	lea    esi,[esi+0x0]
c00146d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146dd:	75 99                	jne    c0014678 <ip_reass_tmr+0x18>
c00146df:	90                   	nop
c00146e0:	83 c4 1c             	add    esp,0x1c
c00146e3:	c3                   	ret    

c00146e4 <ip_reass_remove_oldest_datagram>:
c00146e4:	83 ec 2c             	sub    esp,0x2c
c00146e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146ef:	90                   	nop
c00146f0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014708:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001470d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014711:	e9 9a 00 00 00       	jmp    c00147b0 <ip_reass_remove_oldest_datagram+0xcc>
c0014716:	66 90                	xchg   ax,ax
c0014718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001471c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001471f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014723:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014726:	39 c2                	cmp    edx,eax
c0014728:	75 2e                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001472a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001472e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014735:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014738:	39 c2                	cmp    edx,eax
c001473a:	75 1c                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001473c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014740:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014747:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001474b:	0f b7 d2             	movzx  edx,dx
c001474e:	0f b7 c0             	movzx  eax,ax
c0014751:	39 c2                	cmp    edx,eax
c0014753:	74 3b                	je     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001475d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014762:	75 0c                	jne    c0014770 <ip_reass_remove_oldest_datagram+0x8c>
c0014764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001476c:	eb 22                	jmp    c0014790 <ip_reass_remove_oldest_datagram+0xac>
c001476e:	66 90                	xchg   ax,ax
c0014770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014774:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001477b:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001477e:	0f b6 d2             	movzx  edx,dl
c0014781:	0f b6 c0             	movzx  eax,al
c0014784:	39 c2                	cmp    edx,eax
c0014786:	77 08                	ja     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001478c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014794:	8b 00                	mov    eax,DWORD PTR [eax]
c0014796:	85 c0                	test   eax,eax
c0014798:	74 0a                	je     c00147a4 <ip_reass_remove_oldest_datagram+0xc0>
c001479a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001479e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147a2:	66 90                	xchg   ax,ax
c00147a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00147aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ae:	66 90                	xchg   ax,ax
c00147b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00147b5:	0f 85 5d ff ff ff    	jne    c0014718 <ip_reass_remove_oldest_datagram+0x34>
c00147bb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147c0:	74 22                	je     c00147e4 <ip_reass_remove_oldest_datagram+0x100>
c00147c2:	83 ec 08             	sub    esp,0x8
c00147c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147cd:	e8 86 fc ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147dd:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00147e1:	8d 76 00             	lea    esi,[esi+0x0]
c00147e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00147ec:	7d 0e                	jge    c00147fc <ip_reass_remove_oldest_datagram+0x118>
c00147ee:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00147f3:	0f 8f f7 fe ff ff    	jg     c00146f0 <ip_reass_remove_oldest_datagram+0xc>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014800:	83 c4 2c             	add    esp,0x2c
c0014803:	c3                   	ret    

c0014804 <ip_reass_enqueue_new_datagram>:
c0014804:	83 ec 1c             	sub    esp,0x1c
c0014807:	83 ec 0c             	sub    esp,0xc
c001480a:	6a 05                	push   0x5
c001480c:	e8 63 31 ff ff       	call   c0007974 <memp_malloc>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014818:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001481d:	75 4d                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014826:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001482a:	e8 b5 fe ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014836:	7f 14                	jg     c001484c <ip_reass_enqueue_new_datagram+0x48>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	6a 05                	push   0x5
c001483d:	e8 32 31 ff ff       	call   c0007974 <memp_malloc>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014849:	8d 76 00             	lea    esi,[esi+0x0]
c001484c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014851:	75 19                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c0014853:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014859:	83 c0 01             	add    eax,0x1
c001485c:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014862:	b8 00 00 00 00       	mov    eax,0x0
c0014867:	eb 53                	jmp    c00148bc <ip_reass_enqueue_new_datagram+0xb8>
c0014869:	8d 76 00             	lea    esi,[esi+0x0]
c001486c:	83 ec 04             	sub    esp,0x4
c001486f:	6a 20                	push   0x20
c0014871:	6a 00                	push   0x0
c0014873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014877:	e8 74 bc fe ff       	call   c00004f0 <memset>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014883:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014887:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c001488d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014891:	89 10                	mov    DWORD PTR [eax],edx
c0014893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014897:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148a0:	83 c0 08             	add    eax,0x8
c00148a3:	83 ec 04             	sub    esp,0x4
c00148a6:	6a 14                	push   0x14
c00148a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148ac:	50                   	push   eax
c00148ad:	e8 c8 ba fe ff       	call   c000037a <memcpy>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b9:	8d 76 00             	lea    esi,[esi+0x0]
c00148bc:	83 c4 1c             	add    esp,0x1c
c00148bf:	c3                   	ret    

c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>:
c00148c0:	53                   	push   ebx
c00148c1:	83 ec 28             	sub    esp,0x28
c00148c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148cc:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e3:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00148e7:	0f b7 c0             	movzx  eax,ax
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	50                   	push   eax
c00148ee:	e8 f5 c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00148f3:	83 c4 10             	add    esp,0x10
c00148f6:	89 c3                	mov    ebx,eax
c00148f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00148ff:	0f b7 c0             	movzx  eax,ax
c0014902:	83 ec 0c             	sub    esp,0xc
c0014905:	50                   	push   eax
c0014906:	e8 dd c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	0f b7 c0             	movzx  eax,ax
c0014911:	c1 e8 08             	shr    eax,0x8
c0014914:	83 e0 0f             	and    eax,0xf
c0014917:	c1 e0 02             	shl    eax,0x2
c001491a:	89 d9                	mov    ecx,ebx
c001491c:	29 c1                	sub    ecx,eax
c001491e:	89 c8                	mov    eax,ecx
c0014920:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014929:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001492d:	0f b7 c0             	movzx  eax,ax
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	50                   	push   eax
c0014934:	e8 af c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	25 ff 1f 00 00       	and    eax,0x1fff
c0014941:	c1 e0 03             	shl    eax,0x3
c0014944:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014949:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001494d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014950:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014958:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001495e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014966:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001496a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001496e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014973:	01 d0                	add    eax,edx
c0014975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014979:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001497d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014981:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014988:	e9 13 01 00 00       	jmp    c0014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c001498d:	8d 76 00             	lea    esi,[esi+0x0]
c0014990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001499b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001499f:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149a7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149ab:	0f b7 d2             	movzx  edx,dx
c00149ae:	0f b7 c0             	movzx  eax,ax
c00149b1:	39 c2                	cmp    edx,eax
c00149b3:	73 6f                	jae    c0014a24 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00149b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149bd:	89 10                	mov    DWORD PTR [eax],edx
c00149bf:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149c4:	74 4e                	je     c0014a14 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00149c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149ca:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149d2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149d6:	0f b7 d2             	movzx  edx,dx
c00149d9:	0f b7 c0             	movzx  eax,ax
c00149dc:	39 c2                	cmp    edx,eax
c00149de:	0f 82 bc 02 00 00    	jb     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00149e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149e8:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149f0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149f4:	0f b7 d2             	movzx  edx,dx
c00149f7:	0f b7 c0             	movzx  eax,ax
c00149fa:	39 c2                	cmp    edx,eax
c00149fc:	0f 87 9e 02 00 00    	ja     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a0a:	89 10                	mov    DWORD PTR [eax],edx
c0014a0c:	e9 9b 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a11:	8d 76 00             	lea    esi,[esi+0x0]
c0014a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a1f:	e9 88 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a28:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a30:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a34:	0f b7 d2             	movzx  edx,dx
c0014a37:	0f b7 c0             	movzx  eax,ax
c0014a3a:	39 c2                	cmp    edx,eax
c0014a3c:	0f 84 62 02 00 00    	je     c0014ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a46:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a4e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a52:	0f b7 d2             	movzx  edx,dx
c0014a55:	0f b7 c0             	movzx  eax,ax
c0014a58:	39 c2                	cmp    edx,eax
c0014a5a:	0f 82 48 02 00 00    	jb     c0014ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a60:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a65:	74 25                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a6b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a73:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a77:	0f b7 d2             	movzx  edx,dx
c0014a7a:	0f b7 c0             	movzx  eax,ax
c0014a7d:	39 c2                	cmp    edx,eax
c0014a7f:	74 0b                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a89:	8d 76 00             	lea    esi,[esi+0x0]
c0014a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a9e:	66 90                	xchg   ax,ax
c0014aa0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014aa5:	0f 85 e5 fe ff ff    	jne    c0014990 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014aab:	90                   	nop
c0014aac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ab1:	0f 85 95 00 00 00    	jne    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014ab7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014abc:	74 62                	je     c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ac2:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ac6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ace:	0f b7 d2             	movzx  edx,dx
c0014ad1:	0f b7 c0             	movzx  eax,ax
c0014ad4:	39 c2                	cmp    edx,eax
c0014ad6:	76 18                	jbe    c0014af0 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014ad8:	83 ec 08             	sub    esp,0x8
c0014adb:	68 1b 0e 03 c0       	push   0xc0030e1b
c0014ae0:	68 a6 fa 02 c0       	push   0xc002faa6
c0014ae5:	e8 a6 b0 00 00       	call   c001fb90 <CPrintf>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014af4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014af8:	89 10                	mov    DWORD PTR [eax],edx
c0014afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014afe:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b06:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b0a:	0f b7 d2             	movzx  edx,dx
c0014b0d:	0f b7 c0             	movzx  eax,ax
c0014b10:	39 c2                	cmp    edx,eax
c0014b12:	74 38                	je     c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b14:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b1c:	eb 2e                	jmp    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b1e:	66 90                	xchg   ax,ax
c0014b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b27:	85 c0                	test   eax,eax
c0014b29:	74 15                	je     c0014b40 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014b2b:	83 ec 08             	sub    esp,0x8
c0014b2e:	68 5c 0e 03 c0       	push   0xc0030e5c
c0014b33:	68 a6 fa 02 c0       	push   0xc002faa6
c0014b38:	e8 53 b0 00 00       	call   c001fb90 <CPrintf>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b4b:	90                   	nop
c0014b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b50:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b53:	0f b6 c0             	movzx  eax,al
c0014b56:	83 e0 01             	and    eax,0x1
c0014b59:	0f 84 39 01 00 00    	je     c0014c98 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b5f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b64:	0f 84 26 01 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b74:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b78:	0f b7 c0             	movzx  eax,ax
c0014b7b:	85 c0                	test   eax,eax
c0014b7d:	74 0d                	je     c0014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014b7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b87:	e9 04 01 00 00       	jmp    c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b9e:	eb 44                	jmp    c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014baf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bbb:	0f b7 d2             	movzx  edx,dx
c0014bbe:	0f b7 c0             	movzx  eax,ax
c0014bc1:	39 c2                	cmp    edx,eax
c0014bc3:	74 0b                	je     c0014bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014bc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bcd:	eb 1d                	jmp    c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014bcf:	90                   	nop
c0014bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014be2:	66 90                	xchg   ax,ax
c0014be4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014be9:	75 b5                	jne    c0014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014beb:	90                   	nop
c0014bec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014bf1:	0f 84 99 00 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bfe:	85 c0                	test   eax,eax
c0014c00:	75 16                	jne    c0014c18 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014c02:	83 ec 08             	sub    esp,0x8
c0014c05:	68 39 0e 03 c0       	push   0xc0030e39
c0014c0a:	68 a6 fa 02 c0       	push   0xc002faa6
c0014c0f:	e8 7c af 00 00       	call   c001fb90 <CPrintf>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	90                   	nop
c0014c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c22:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014c26:	75 18                	jne    c0014c40 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014c28:	83 ec 08             	sub    esp,0x8
c0014c2b:	68 39 0e 03 c0       	push   0xc0030e39
c0014c30:	68 a6 fa 02 c0       	push   0xc002faa6
c0014c35:	e8 56 af 00 00       	call   c001fb90 <CPrintf>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c46:	85 c0                	test   eax,eax
c0014c48:	74 16                	je     c0014c60 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c4a:	83 ec 08             	sub    esp,0x8
c0014c4d:	68 94 0e 03 c0       	push   0xc0030e94
c0014c52:	68 a6 fa 02 c0       	push   0xc002faa6
c0014c57:	e8 34 af 00 00       	call   c001fb90 <CPrintf>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	90                   	nop
c0014c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c64:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c6f:	0f b7 d2             	movzx  edx,dx
c0014c72:	0f b7 c0             	movzx  eax,ax
c0014c75:	39 c2                	cmp    edx,eax
c0014c77:	74 17                	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c79:	83 ec 08             	sub    esp,0x8
c0014c7c:	68 b8 0e 03 c0       	push   0xc0030eb8
c0014c81:	68 a6 fa 02 c0       	push   0xc002faa6
c0014c86:	e8 05 af 00 00       	call   c001fb90 <CPrintf>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	66 90                	xchg   ax,ax
c0014c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c94:	eb 52                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c96:	66 90                	xchg   ax,ax
c0014c98:	b8 00 00 00 00       	mov    eax,0x0
c0014c9d:	eb 49                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c9f:	90                   	nop
c0014ca0:	90                   	nop
c0014ca1:	eb 09                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca3:	90                   	nop
c0014ca4:	90                   	nop
c0014ca5:	eb 05                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca7:	90                   	nop
c0014ca8:	90                   	nop
c0014ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cb3:	e8 78 3e ff ff       	call   c0008b30 <pbuf_clen>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014cc2:	0f b6 c0             	movzx  eax,al
c0014cc5:	89 d3                	mov    ebx,edx
c0014cc7:	29 c3                	sub    ebx,eax
c0014cc9:	89 d8                	mov    eax,ebx
c0014ccb:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cd8:	e8 7f 36 ff ff       	call   c000835c <pbuf_free>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	b8 00 00 00 00       	mov    eax,0x0
c0014ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ce8:	83 c4 28             	add    esp,0x28
c0014ceb:	5b                   	pop    ebx
c0014cec:	c3                   	ret    
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]

c0014cf0 <ip_reass>:
c0014cf0:	53                   	push   ebx
c0014cf1:	83 ec 28             	sub    esp,0x28
c0014cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cfc:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014d02:	83 c0 01             	add    eax,0x1
c0014d05:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d1d:	0f b7 c0             	movzx  eax,ax
c0014d20:	83 ec 0c             	sub    esp,0xc
c0014d23:	50                   	push   eax
c0014d24:	e8 bf be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	0f b7 c0             	movzx  eax,ax
c0014d2f:	c1 e8 08             	shr    eax,0x8
c0014d32:	0f b7 c0             	movzx  eax,ax
c0014d35:	83 e0 0f             	and    eax,0xf
c0014d38:	c1 e0 02             	shl    eax,0x2
c0014d3b:	83 f8 14             	cmp    eax,0x14
c0014d3e:	74 14                	je     c0014d54 <ip_reass+0x64>
c0014d40:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d46:	83 c0 01             	add    eax,0x1
c0014d49:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d4f:	e9 68 03 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d58:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d5c:	0f b7 c0             	movzx  eax,ax
c0014d5f:	83 ec 0c             	sub    esp,0xc
c0014d62:	50                   	push   eax
c0014d63:	e8 80 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d70:	c1 e0 03             	shl    eax,0x3
c0014d73:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d7c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014d80:	0f b7 c0             	movzx  eax,ax
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	50                   	push   eax
c0014d87:	e8 5c be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	89 c3                	mov    ebx,eax
c0014d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d98:	0f b7 c0             	movzx  eax,ax
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	50                   	push   eax
c0014d9f:	e8 44 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014da4:	83 c4 10             	add    esp,0x10
c0014da7:	0f b7 c0             	movzx  eax,ax
c0014daa:	c1 e8 08             	shr    eax,0x8
c0014dad:	83 e0 0f             	and    eax,0xf
c0014db0:	c1 e0 02             	shl    eax,0x2
c0014db3:	89 d9                	mov    ecx,ebx
c0014db5:	29 c1                	sub    ecx,eax
c0014db7:	89 c8                	mov    eax,ecx
c0014db9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014dbe:	83 ec 0c             	sub    esp,0xc
c0014dc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014dc5:	e8 66 3d ff ff       	call   c0008b30 <pbuf_clen>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014dd1:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dd7:	0f b7 d0             	movzx  edx,ax
c0014dda:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ddf:	01 d0                	add    eax,edx
c0014de1:	83 f8 0a             	cmp    eax,0xa
c0014de4:	7e 42                	jle    c0014e28 <ip_reass+0x138>
c0014de6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014deb:	83 ec 08             	sub    esp,0x8
c0014dee:	50                   	push   eax
c0014def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df3:	e8 ec f8 ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	85 c0                	test   eax,eax
c0014dfd:	74 15                	je     c0014e14 <ip_reass+0x124>
c0014dff:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e05:	0f b7 d0             	movzx  edx,ax
c0014e08:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e0d:	01 d0                	add    eax,edx
c0014e0f:	83 f8 0a             	cmp    eax,0xa
c0014e12:	7e 14                	jle    c0014e28 <ip_reass+0x138>
c0014e14:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014e1a:	83 c0 01             	add    eax,0x1
c0014e1d:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014e23:	e9 94 02 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014e28:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e31:	eb 65                	jmp    c0014e98 <ip_reass+0x1a8>
c0014e33:	90                   	nop
c0014e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e38:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e42:	39 c2                	cmp    edx,eax
c0014e44:	75 3e                	jne    c0014e84 <ip_reass+0x194>
c0014e46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e54:	39 c2                	cmp    edx,eax
c0014e56:	75 2c                	jne    c0014e84 <ip_reass+0x194>
c0014e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e67:	0f b7 d2             	movzx  edx,dx
c0014e6a:	0f b7 c0             	movzx  eax,ax
c0014e6d:	39 c2                	cmp    edx,eax
c0014e6f:	75 13                	jne    c0014e84 <ip_reass+0x194>
c0014e71:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e77:	83 c0 01             	add    eax,0x1
c0014e7a:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014e80:	eb 1e                	jmp    c0014ea0 <ip_reass+0x1b0>
c0014e82:	66 90                	xchg   ax,ax
c0014e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e9d:	75 95                	jne    c0014e34 <ip_reass+0x144>
c0014e9f:	90                   	nop
c0014ea0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ea5:	75 25                	jne    c0014ecc <ip_reass+0x1dc>
c0014ea7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014eac:	83 ec 08             	sub    esp,0x8
c0014eaf:	50                   	push   eax
c0014eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eb4:	e8 4b f9 ff ff       	call   c0014804 <ip_reass_enqueue_new_datagram>
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ec0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ec5:	75 61                	jne    c0014f28 <ip_reass+0x238>
c0014ec7:	e9 f0 01 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ed4:	0f b7 c0             	movzx  eax,ax
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	50                   	push   eax
c0014edb:	e8 08 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	0f b7 c0             	movzx  eax,ax
c0014ee6:	25 ff 1f 00 00       	and    eax,0x1fff
c0014eeb:	75 3b                	jne    c0014f28 <ip_reass+0x238>
c0014eed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ef1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014ef5:	0f b7 c0             	movzx  eax,ax
c0014ef8:	83 ec 0c             	sub    esp,0xc
c0014efb:	50                   	push   eax
c0014efc:	e8 e7 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	0f b7 c0             	movzx  eax,ax
c0014f07:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f0c:	74 1a                	je     c0014f28 <ip_reass+0x238>
c0014f0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f12:	83 c0 08             	add    eax,0x8
c0014f15:	83 ec 04             	sub    esp,0x4
c0014f18:	6a 14                	push   0x14
c0014f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f1e:	50                   	push   eax
c0014f1f:	e8 56 b4 fe ff       	call   c000037a <memcpy>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	90                   	nop
c0014f28:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f2d:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f33:	01 d0                	add    eax,edx
c0014f35:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f43:	0f b7 c0             	movzx  eax,ax
c0014f46:	83 e0 20             	and    eax,0x20
c0014f49:	75 29                	jne    c0014f74 <ip_reass+0x284>
c0014f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f4f:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f52:	83 c8 01             	or     eax,0x1
c0014f55:	88 c2                	mov    dl,al
c0014f57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f5b:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f5e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f67:	01 d0                	add    eax,edx
c0014f69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f6d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014f71:	8d 76 00             	lea    esi,[esi+0x0]
c0014f74:	83 ec 08             	sub    esp,0x8
c0014f77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014f7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f7f:	e8 3c f9 ff ff       	call   c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	85 c0                	test   eax,eax
c0014f89:	0f 84 25 01 00 00    	je     c00150b4 <ip_reass+0x3c4>
c0014f8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f93:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f96:	83 c0 14             	add    eax,0x14
c0014f99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f9d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014fa1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fc3:	83 c0 08             	add    eax,0x8
c0014fc6:	83 ec 04             	sub    esp,0x4
c0014fc9:	6a 14                	push   0x14
c0014fcb:	50                   	push   eax
c0014fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fd0:	e8 a5 b3 fe ff       	call   c000037a <memcpy>
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fdf:	0f b7 c0             	movzx  eax,ax
c0014fe2:	83 ec 0c             	sub    esp,0xc
c0014fe5:	50                   	push   eax
c0014fe6:	e8 fd bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ff2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffa:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015004:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c001500a:	83 ec 08             	sub    esp,0x8
c001500d:	6a 14                	push   0x14
c001500f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015013:	e8 e0 e4 ff ff       	call   c00134f8 <inet_chksum>
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001501f:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015023:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001502a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001502e:	eb 3c                	jmp    c001506c <ip_reass+0x37c>
c0015030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001503b:	83 ec 08             	sub    esp,0x8
c001503e:	6a ec                	push   0xffffffec
c0015040:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015044:	e8 77 31 ff ff       	call   c00081c0 <pbuf_header>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	83 ec 08             	sub    esp,0x8
c001504f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015057:	e8 38 3b ff ff       	call   c0008b94 <pbuf_cat>
c001505c:	83 c4 10             	add    esp,0x10
c001505f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015063:	8b 00                	mov    eax,DWORD PTR [eax]
c0015065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015069:	8d 76 00             	lea    esi,[esi+0x0]
c001506c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015071:	75 bd                	jne    c0015030 <ip_reass+0x340>
c0015073:	83 ec 08             	sub    esp,0x8
c0015076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001507a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001507e:	e8 79 f3 ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001508d:	e8 9e 3a ff ff       	call   c0008b30 <pbuf_clen>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001509c:	0f b6 c0             	movzx  eax,al
c001509f:	89 d3                	mov    ebx,edx
c00150a1:	29 c3                	sub    ebx,eax
c00150a3:	89 d8                	mov    eax,ebx
c00150a5:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150af:	eb 2f                	jmp    c00150e0 <ip_reass+0x3f0>
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	b8 00 00 00 00       	mov    eax,0x0
c00150b9:	eb 25                	jmp    c00150e0 <ip_reass+0x3f0>
c00150bb:	90                   	nop
c00150bc:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00150c2:	83 c0 01             	add    eax,0x1
c00150c5:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150d2:	e8 85 32 ff ff       	call   c000835c <pbuf_free>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	b8 00 00 00 00       	mov    eax,0x0
c00150df:	90                   	nop
c00150e0:	83 c4 28             	add    esp,0x28
c00150e3:	5b                   	pop    ebx
c00150e4:	c3                   	ret    
c00150e5:	8d 76 00             	lea    esi,[esi+0x0]

c00150e8 <ip_frag_alloc_pbuf_custom_ref>:
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	83 ec 0c             	sub    esp,0xc
c00150ee:	6a 06                	push   0x6
c00150f0:	e8 7f 28 ff ff       	call   c0007974 <memp_malloc>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	83 c4 0c             	add    esp,0xc
c00150fb:	c3                   	ret    

c00150fc <ip_frag_free_pbuf_custom_ref>:
c00150fc:	83 ec 0c             	sub    esp,0xc
c00150ff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015104:	75 16                	jne    c001511c <ip_frag_free_pbuf_custom_ref+0x20>
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	68 d6 fe 02 c0       	push   0xc002fed6
c001510e:	68 a6 fa 02 c0       	push   0xc002faa6
c0015113:	e8 78 aa 00 00       	call   c001fb90 <CPrintf>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	90                   	nop
c001511c:	83 ec 08             	sub    esp,0x8
c001511f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015123:	6a 06                	push   0x6
c0015125:	e8 76 29 ff ff       	call   c0007aa0 <memp_free>
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	90                   	nop
c001512e:	83 c4 0c             	add    esp,0xc
c0015131:	c3                   	ret    
c0015132:	66 90                	xchg   ax,ax

c0015134 <ipfrag_free_pbuf_custom>:
c0015134:	83 ec 1c             	sub    esp,0x1c
c0015137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001513f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015144:	75 16                	jne    c001515c <ipfrag_free_pbuf_custom+0x28>
c0015146:	83 ec 08             	sub    esp,0x8
c0015149:	68 46 0e 03 c0       	push   0xc0030e46
c001514e:	68 a6 fa 02 c0       	push   0xc002faa6
c0015153:	e8 38 aa 00 00       	call   c001fb90 <CPrintf>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	90                   	nop
c001515c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015160:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015164:	74 16                	je     c001517c <ipfrag_free_pbuf_custom+0x48>
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	68 52 0e 03 c0       	push   0xc0030e52
c001516e:	68 a6 fa 02 c0       	push   0xc002faa6
c0015173:	e8 18 aa 00 00       	call   c001fb90 <CPrintf>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	90                   	nop
c001517c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015180:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015183:	85 c0                	test   eax,eax
c0015185:	74 15                	je     c001519c <ipfrag_free_pbuf_custom+0x68>
c0015187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001518b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001518e:	83 ec 0c             	sub    esp,0xc
c0015191:	50                   	push   eax
c0015192:	e8 c5 31 ff ff       	call   c000835c <pbuf_free>
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	66 90                	xchg   ax,ax
c001519c:	83 ec 0c             	sub    esp,0xc
c001519f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151a3:	e8 54 ff ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	90                   	nop
c00151ac:	83 c4 1c             	add    esp,0x1c
c00151af:	c3                   	ret    

c00151b0 <ip_frag>:
c00151b0:	53                   	push   ebx
c00151b1:	83 ec 38             	sub    esp,0x38
c00151b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151bb:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00151c0:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151c7:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151e5:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151e9:	0f b7 c0             	movzx  eax,ax
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	50                   	push   eax
c00151f0:	e8 f3 b9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00151f5:	83 c4 10             	add    esp,0x10
c00151f8:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015201:	25 ff 1f 00 00       	and    eax,0x1fff
c0015206:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001520b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001520f:	25 00 20 00 00       	and    eax,0x2000
c0015214:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001521d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015220:	83 e8 14             	sub    eax,0x14
c0015223:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015228:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001522d:	83 e8 14             	sub    eax,0x14
c0015230:	79 06                	jns    c0015238 <ip_frag+0x88>
c0015232:	83 c0 07             	add    eax,0x7
c0015235:	8d 76 00             	lea    esi,[esi+0x0]
c0015238:	c1 f8 03             	sar    eax,0x3
c001523b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015240:	e9 03 03 00 00       	jmp    c0015548 <ip_frag+0x398>
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001524d:	8d 50 ed             	lea    edx,[eax-0x13]
c0015250:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015255:	39 c2                	cmp    edx,eax
c0015257:	0f 9f c0             	setg   al
c001525a:	0f b6 c0             	movzx  eax,al
c001525d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015262:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015266:	25 ff 1f 00 00       	and    eax,0x1fff
c001526b:	89 c2                	mov    edx,eax
c001526d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015272:	09 d0                	or     eax,edx
c0015274:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015279:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001527e:	85 c0                	test   eax,eax
c0015280:	75 0e                	jne    c0015290 <ip_frag+0xe0>
c0015282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015286:	80 cc 20             	or     ah,0x20
c0015289:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001528e:	66 90                	xchg   ax,ax
c0015290:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015295:	85 c0                	test   eax,eax
c0015297:	75 0b                	jne    c00152a4 <ip_frag+0xf4>
c0015299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001529d:	c1 e0 03             	shl    eax,0x3
c00152a0:	eb 0a                	jmp    c00152ac <ip_frag+0xfc>
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00152a9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ac:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00152b1:	83 ec 04             	sub    esp,0x4
c00152b4:	6a 00                	push   0x0
c00152b6:	6a 14                	push   0x14
c00152b8:	6a 02                	push   0x2
c00152ba:	e8 75 32 ff ff       	call   c0008534 <pbuf_alloc>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152cb:	75 07                	jne    c00152d4 <ip_frag+0x124>
c00152cd:	b0 ff                	mov    al,0xff
c00152cf:	e9 84 02 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00152d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00152dc:	0f b7 c0             	movzx  eax,ax
c00152df:	83 f8 13             	cmp    eax,0x13
c00152e2:	77 18                	ja     c00152fc <ip_frag+0x14c>
c00152e4:	83 ec 08             	sub    esp,0x8
c00152e7:	68 e8 0e 03 c0       	push   0xc0030ee8
c00152ec:	68 a6 fa 02 c0       	push   0xc002faa6
c00152f1:	e8 9a a8 00 00       	call   c001fb90 <CPrintf>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	8d 76 00             	lea    esi,[esi+0x0]
c00152fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015303:	83 ec 04             	sub    esp,0x4
c0015306:	6a 14                	push   0x14
c0015308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001530c:	50                   	push   eax
c001530d:	e8 68 b0 fe ff       	call   c000037a <memcpy>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001531c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015320:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015324:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015327:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c001532c:	01 c2                	add    edx,eax
c001532e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015332:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015339:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001533d:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015342:	89 d1                	mov    ecx,edx
c0015344:	29 c1                	sub    ecx,eax
c0015346:	89 c8                	mov    eax,ecx
c0015348:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001534c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015354:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015359:	e9 1a 01 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c001535e:	66 90                	xchg   ax,ax
c0015360:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015364:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536c:	0f b7 d8             	movzx  ebx,ax
c001536f:	0f b7 ca             	movzx  ecx,dx
c0015372:	39 cb                	cmp    ebx,ecx
c0015374:	76 02                	jbe    c0015378 <ip_frag+0x1c8>
c0015376:	89 d0                	mov    eax,edx
c0015378:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c001537d:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015382:	85 c0                	test   eax,eax
c0015384:	75 12                	jne    c0015398 <ip_frag+0x1e8>
c0015386:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015390:	e9 e3 00 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c0015395:	8d 76 00             	lea    esi,[esi+0x0]
c0015398:	e8 4b fd ff ff       	call   c00150e8 <ip_frag_alloc_pbuf_custom_ref>
c001539d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153a6:	75 18                	jne    c00153c0 <ip_frag+0x210>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153af:	e8 a8 2f ff ff       	call   c000835c <pbuf_free>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	b0 ff                	mov    al,0xff
c00153b9:	e9 9a 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00153be:	66 90                	xchg   ax,ax
c00153c0:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00153c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153c9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153d0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153d5:	83 ec 08             	sub    esp,0x8
c00153d8:	53                   	push   ebx
c00153d9:	51                   	push   ecx
c00153da:	52                   	push   edx
c00153db:	6a 02                	push   0x2
c00153dd:	50                   	push   eax
c00153de:	6a 03                	push   0x3
c00153e0:	e8 b7 2c ff ff       	call   c000809c <pbuf_alloced_custom>
c00153e5:	83 c4 20             	add    esp,0x20
c00153e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00153f1:	75 25                	jne    c0015418 <ip_frag+0x268>
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153fa:	e8 fd fc ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	83 ec 0c             	sub    esp,0xc
c0015405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015409:	e8 4e 2f ff ff       	call   c000835c <pbuf_free>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	b0 ff                	mov    al,0xff
c0015413:	e9 40 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001541f:	e8 40 37 ff ff       	call   c0008b64 <pbuf_ref>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001542b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001542f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015436:	c7 40 10 34 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015134
c001543d:	83 ec 08             	sub    esp,0x8
c0015440:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015448:	e8 47 37 ff ff       	call   c0008b94 <pbuf_cat>
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015454:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015459:	89 d3                	mov    ebx,edx
c001545b:	29 c3                	sub    ebx,eax
c001545d:	89 d8                	mov    eax,ebx
c001545f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015464:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015469:	85 c0                	test   eax,eax
c001546b:	74 0b                	je     c0015478 <ip_frag+0x2c8>
c001546d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015471:	8b 00                	mov    eax,DWORD PTR [eax]
c0015473:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015477:	90                   	nop
c0015478:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001547d:	85 c0                	test   eax,eax
c001547f:	0f 85 db fe ff ff    	jne    c0015360 <ip_frag+0x1b0>
c0015485:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001548a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001548f:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	50                   	push   eax
c0015498:	e8 4b b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00154a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ac:	83 c0 14             	add    eax,0x14
c00154af:	0f b7 c0             	movzx  eax,ax
c00154b2:	83 ec 0c             	sub    esp,0xc
c00154b5:	50                   	push   eax
c00154b6:	e8 2d b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00154c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154ca:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00154d0:	83 ec 08             	sub    esp,0x8
c00154d3:	6a 14                	push   0x14
c00154d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154d9:	e8 1a e0 ff ff       	call   c00134f8 <inet_chksum>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154e5:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00154ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154f0:	83 ec 04             	sub    esp,0x4
c00154f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154fb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001550a:	83 c0 01             	add    eax,0x1
c001550d:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001551a:	e8 3d 2e ff ff       	call   c000835c <pbuf_free>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001552b:	89 d1                	mov    ecx,edx
c001552d:	29 c1                	sub    ecx,eax
c001552f:	89 c8                	mov    eax,ecx
c0015531:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015536:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001553a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001553e:	01 d0                	add    eax,edx
c0015540:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001554d:	85 c0                	test   eax,eax
c001554f:	0f 85 f3 fc ff ff    	jne    c0015248 <ip_frag+0x98>
c0015555:	b0 00                	mov    al,0x0
c0015557:	90                   	nop
c0015558:	83 c4 38             	add    esp,0x38
c001555b:	5b                   	pop    ebx
c001555c:	c3                   	ret    
c001555d:	90                   	nop

c001555e <Computer::close(int, int, void*)>:
c001555e:	53                   	push   ebx
c001555f:	83 ec 08             	sub    esp,0x8
c0015562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015566:	e8 b5 a4 00 00       	call   c001fa20 <KeExecuteAtexit()>
c001556b:	83 ec 0c             	sub    esp,0xc
c001556e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015574:	50                   	push   eax
c0015575:	e8 b8 5f 00 00       	call   c001b532 <Device::closeAll()>
c001557a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015580:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015584:	8b 10                	mov    edx,DWORD PTR [eax]
c0015586:	51                   	push   ecx
c0015587:	68 0f 27 00 00       	push   0x270f
c001558c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015590:	53                   	push   ebx
c0015591:	50                   	push   eax
c0015592:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015595:	83 c4 14             	add    esp,0x14
c0015598:	68 08 0f 03 c0       	push   0xc0030f08
c001559d:	e8 c0 ac 00 00       	call   c0020262 <KePanic(char const*)>
c00155a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155a7:	83 c4 18             	add    esp,0x18
c00155aa:	5b                   	pop    ebx
c00155ab:	c3                   	ret    

c00155ac <Krnl::firstTask()>:
c00155ac:	53                   	push   ebx
c00155ad:	83 ec 14             	sub    esp,0x14
c00155b0:	fb                   	sti    
c00155b1:	68 1e 0f 03 c0       	push   0xc0030f1e
c00155b6:	e8 44 a5 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c00155bb:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00155c2:	e8 f3 0d 00 00       	call   c00163ba <malloc>
c00155c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155ce:	89 c3                	mov    ebx,eax
c00155d0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00155d5:	50                   	push   eax
c00155d6:	68 37 0f 03 c0       	push   0xc0030f37
c00155db:	6a 01                	push   0x1
c00155dd:	53                   	push   ebx
c00155de:	e8 fd f7 00 00       	call   c0024de0 <Process::Process(bool, char const*, Process*, char**)>
c00155e3:	83 c4 20             	add    esp,0x20
c00155e6:	68 ff 00 00 00       	push   0xff
c00155eb:	6a 00                	push   0x0
c00155ed:	68 01 5e 01 c0       	push   0xc0015e01
c00155f2:	53                   	push   ebx
c00155f3:	e8 10 fa 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c00155f8:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00155fe:	6a 7a                	push   0x7a
c0015600:	6a 00                	push   0x0
c0015602:	68 d0 58 02 c0       	push   0xc00258d0
c0015607:	52                   	push   edx
c0015608:	e8 fb f9 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c001560d:	83 c4 14             	add    esp,0x14
c0015610:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015615:	68 34 10 03 c0       	push   0xc0031034
c001561a:	e8 e0 a4 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001561f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015626:	e8 f0 ad 00 00       	call   c002041b <KeInitRand()>
c001562b:	e8 37 06 01 00       	call   c0025c67 <Vm::initialise8086()>
c0015630:	e8 f9 4a 00 00       	call   c001a12e <Fs::initVFS()>
c0015635:	c7 04 24 44 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f44
c001563c:	e8 be a4 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015641:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015646:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001564c:	8b 10                	mov    edx,DWORD PTR [eax]
c001564e:	6a 00                	push   0x0
c0015650:	6a 00                	push   0x0
c0015652:	6a 00                	push   0x0
c0015654:	50                   	push   eax
c0015655:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015658:	83 c4 14             	add    esp,0x14
c001565b:	68 34 10 03 c0       	push   0xc0031034
c0015660:	e8 9a a4 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015665:	e8 5e 42 00 00       	call   c00198c8 <KeInitialiseSymlinks()>
c001566a:	e8 3b aa 00 00       	call   c00200aa <KeLoadSystemEnv()>
c001566f:	e8 b3 ac 00 00       	call   c0020327 <KeSetupPowerManager()>
c0015674:	83 c4 0c             	add    esp,0xc
c0015677:	6a 3a                	push   0x3a
c0015679:	68 5e 0f 03 c0       	push   0xc0030f5e
c001567e:	68 67 0f 03 c0       	push   0xc0030f67
c0015683:	e8 12 d9 00 00       	call   c0022f9a <Reg::readIntWithDefault(char*, char*, int)>
c0015688:	89 04 24             	mov    DWORD PTR [esp],eax
c001568b:	e8 b8 56 00 00       	call   c001ad48 <User::loadClockSettings(int)>
c0015690:	c7 04 24 58 10 03 c0 	mov    DWORD PTR [esp],0xc0031058
c0015697:	e8 63 a4 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001569c:	59                   	pop    ecx
c001569d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00156a2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00156a8:	53                   	push   ebx
c00156a9:	e8 38 5d 00 00       	call   c001b3e6 <Device::loadDriversForAll()>
c00156ae:	c7 04 24 6f 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f6f
c00156b5:	e8 45 a4 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c00156ba:	58                   	pop    eax
c00156bb:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00156c1:	5a                   	pop    edx
c00156c2:	6a 01                	push   0x1
c00156c4:	68 80 0f 03 c0       	push   0xc0030f80
c00156c9:	e8 07 f1 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c00156ce:	59                   	pop    ecx
c00156cf:	5a                   	pop    edx
c00156d0:	53                   	push   ebx
c00156d1:	50                   	push   eax
c00156d2:	e8 50 f3 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c00156d7:	83 c4 10             	add    esp,0x10
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	6a 02                	push   0x2
c00156df:	e8 30 fc 00 00       	call   c0025314 <blockTask(TaskState)>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	eb f1                	jmp    c00156da <Krnl::firstTask()+0x12e>
c00156e9:	90                   	nop

c00156ea <Computer::Computer()>:
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f1:	83 ec 08             	sub    esp,0x8
c00156f4:	68 9c 0f 03 c0       	push   0xc0030f9c
c00156f9:	50                   	push   eax
c00156fa:	e8 2d 5d 00 00       	call   c001b42c <Device::Device(char const*)>
c00156ff:	83 c4 10             	add    esp,0x10
c0015702:	ba a4 10 03 c0       	mov    edx,0xc00310a4
c0015707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001570b:	89 10                	mov    DWORD PTR [eax],edx
c001570d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015711:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001571b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001572d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015733:	83 ca 04             	or     edx,0x4
c0015736:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001573c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015740:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015746:	0f b6 d0             	movzx  edx,al
c0015749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001574d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015758:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001575e:	0f b6 d0             	movzx  edx,al
c0015761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015765:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001576a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001576e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015774:	8d 50 01             	lea    edx,[eax+0x1]
c0015777:	88 d1                	mov    cl,dl
c0015779:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001577d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015783:	0f b6 d0             	movzx  edx,al
c0015786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001578e:	83 e1 3f             	and    ecx,0x3f
c0015791:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015795:	90                   	nop
c0015796:	83 c4 0c             	add    esp,0xc
c0015799:	c3                   	ret    

c001579a <Computer::setBootMessage(char const*)>:
c001579a:	c3                   	ret    
c001579b:	90                   	nop

c001579c <Computer::detectFeatures()>:
c001579c:	55                   	push   ebp
c001579d:	57                   	push   edi
c001579e:	56                   	push   esi
c001579f:	53                   	push   ebx
c00157a0:	83 ec 1c             	sub    esp,0x1c
c00157a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157a7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00157ad:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00157b3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00157b9:	e8 3b aa fe ff       	call   c00001f9 <detectCPUID>
c00157be:	31 d2                	xor    edx,edx
c00157c0:	85 c0                	test   eax,eax
c00157c2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157c8:	0f 95 c2             	setne  dl
c00157cb:	83 e0 fd             	and    eax,0xfffffffd
c00157ce:	d1 e2                	shl    edx,1
c00157d0:	09 d0                	or     eax,edx
c00157d2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157d8:	a8 02                	test   al,0x2
c00157da:	75 51                	jne    c001582d <Computer::detectFeatures()+0x91>
c00157dc:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00157e3:	74 0f                	je     c00157f4 <Computer::detectFeatures()+0x58>
c00157e5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157eb:	83 e0 fb             	and    eax,0xfffffffb
c00157ee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157f4:	e8 1d 8b 01 00       	call   c002e316 <x87Detect>
c00157f9:	83 e0 01             	and    eax,0x1
c00157fc:	c1 e0 04             	shl    eax,0x4
c00157ff:	89 c2                	mov    edx,eax
c0015801:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015807:	83 e0 ef             	and    eax,0xffffffef
c001580a:	09 d0                	or     eax,edx
c001580c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015812:	88 c2                	mov    dl,al
c0015814:	a8 10                	test   al,0x10
c0015816:	0f 85 33 01 00 00    	jne    c001594f <Computer::detectFeatures()+0x1b3>
c001581c:	80 e2 80             	and    dl,0x80
c001581f:	0f 85 4c 01 00 00    	jne    c0015971 <Computer::detectFeatures()+0x1d5>
c0015825:	83 c4 1c             	add    esp,0x1c
c0015828:	5b                   	pop    ebx
c0015829:	5e                   	pop    esi
c001582a:	5f                   	pop    edi
c001582b:	5d                   	pop    ebp
c001582c:	c3                   	ret    
c001582d:	83 ec 0c             	sub    esp,0xc
c0015830:	6a 20                	push   0x20
c0015832:	e8 01 97 00 00       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c0015837:	83 e0 01             	and    eax,0x1
c001583a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015841:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015847:	83 e0 f7             	and    eax,0xfffffff7
c001584a:	09 d0                	or     eax,edx
c001584c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015852:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015859:	e8 da 96 00 00       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001585e:	89 c2                	mov    edx,eax
c0015860:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015866:	83 e2 01             	and    edx,0x1
c0015869:	83 e0 fe             	and    eax,0xfffffffe
c001586c:	09 d0                	or     eax,edx
c001586e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015874:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001587b:	e8 b8 96 00 00       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c0015880:	89 c2                	mov    edx,eax
c0015882:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015888:	c1 e2 07             	shl    edx,0x7
c001588b:	83 e0 7f             	and    eax,0x7f
c001588e:	09 d0                	or     eax,edx
c0015890:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015896:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c001589d:	e8 96 96 00 00       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	83 e0 01             	and    eax,0x1
c00158a8:	c1 e0 05             	shl    eax,0x5
c00158ab:	89 c2                	mov    edx,eax
c00158ad:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158b3:	83 e0 df             	and    eax,0xffffffdf
c00158b6:	09 d0                	or     eax,edx
c00158b8:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00158c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158c8:	0f 84 c9 00 00 00    	je     c0015997 <Computer::detectFeatures()+0x1fb>
c00158ce:	83 e0 fe             	and    eax,0xfffffffe
c00158d1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158d7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158dd:	89 c2                	mov    edx,eax
c00158df:	83 e2 09             	and    edx,0x9
c00158e2:	83 fa 01             	cmp    edx,0x1
c00158e5:	75 09                	jne    c00158f0 <Computer::detectFeatures()+0x154>
c00158e7:	83 e0 fe             	and    eax,0xfffffffe
c00158ea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f0:	83 ec 0c             	sub    esp,0xc
c00158f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00158f7:	50                   	push   eax
c00158f8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00158fc:	55                   	push   ebp
c00158fd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015901:	57                   	push   edi
c0015902:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015906:	56                   	push   esi
c0015907:	68 00 00 00 80       	push   0x80000000
c001590c:	e8 a3 95 00 00       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015911:	83 c4 20             	add    esp,0x20
c0015914:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001591b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001591f:	0f 86 b7 fe ff ff    	jbe    c00157dc <Computer::detectFeatures()+0x40>
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	50                   	push   eax
c0015929:	55                   	push   ebp
c001592a:	57                   	push   edi
c001592b:	56                   	push   esi
c001592c:	68 01 00 00 80       	push   0x80000001
c0015931:	e8 7e 95 00 00       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015936:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001593c:	83 c4 20             	add    esp,0x20
c001593f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015944:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001594a:	e9 8d fe ff ff       	jmp    c00157dc <Computer::detectFeatures()+0x40>
c001594f:	e8 7c 89 01 00       	call   c002e2d0 <sseDetect>
c0015954:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c001595a:	c1 e0 07             	shl    eax,0x7
c001595d:	83 e2 7f             	and    edx,0x7f
c0015960:	09 c2                	or     edx,eax
c0015962:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015968:	80 e2 80             	and    dl,0x80
c001596b:	0f 84 b4 fe ff ff    	je     c0015825 <Computer::detectFeatures()+0x89>
c0015971:	e8 ea 85 01 00       	call   c002df60 <avxDetect>
c0015976:	83 e0 01             	and    eax,0x1
c0015979:	c1 e0 05             	shl    eax,0x5
c001597c:	89 c2                	mov    edx,eax
c001597e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015984:	83 e0 df             	and    eax,0xffffffdf
c0015987:	09 d0                	or     eax,edx
c0015989:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001598f:	83 c4 1c             	add    esp,0x1c
c0015992:	5b                   	pop    ebx
c0015993:	5e                   	pop    esi
c0015994:	5f                   	pop    edi
c0015995:	5d                   	pop    ebp
c0015996:	c3                   	ret    
c0015997:	83 ec 0c             	sub    esp,0xc
c001599a:	68 00 02 00 00       	push   0x200
c001599f:	e8 94 95 00 00       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	89 c2                	mov    edx,eax
c00159a9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159af:	83 e2 01             	and    edx,0x1
c00159b2:	83 e0 fe             	and    eax,0xfffffffe
c00159b5:	09 d0                	or     eax,edx
c00159b7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159bd:	e9 15 ff ff ff       	jmp    c00158d7 <Computer::detectFeatures()+0x13b>

c00159c2 <Computer::displayFeatures()>:
c00159c2:	c3                   	ret    
c00159c3:	90                   	nop

c00159c4 <Computer::rdmsr(unsigned int)>:
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159d2:	74 0a                	je     c00159de <Computer::rdmsr(unsigned int)+0x1a>
c00159d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00159d8:	0f 32                	rdmsr  
c00159da:	83 c4 0c             	add    esp,0xc
c00159dd:	c3                   	ret    
c00159de:	83 ec 0c             	sub    esp,0xc
c00159e1:	68 a5 0f 03 c0       	push   0xc0030fa5
c00159e6:	e8 77 a8 00 00       	call   c0020262 <KePanic(char const*)>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	eb e4                	jmp    c00159d4 <Computer::rdmsr(unsigned int)+0x10>

c00159f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00159f0:	57                   	push   edi
c00159f1:	56                   	push   esi
c00159f2:	83 ec 04             	sub    esp,0x4
c00159f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00159fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015a01:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a08:	74 10                	je     c0015a1a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015a0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a0e:	89 f0                	mov    eax,esi
c0015a10:	89 fa                	mov    edx,edi
c0015a12:	0f 30                	wrmsr  
c0015a14:	83 c4 04             	add    esp,0x4
c0015a17:	5e                   	pop    esi
c0015a18:	5f                   	pop    edi
c0015a19:	c3                   	ret    
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	68 ab 0f 03 c0       	push   0xc0030fab
c0015a22:	e8 3b a8 00 00       	call   c0020262 <KePanic(char const*)>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	eb de                	jmp    c0015a0a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a2c <Computer::shutdown()>:
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a33:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a35:	6a 00                	push   0x0
c0015a37:	6a 00                	push   0x0
c0015a39:	6a 00                	push   0x0
c0015a3b:	50                   	push   eax
c0015a3c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a3f:	83 c4 1c             	add    esp,0x1c
c0015a42:	c3                   	ret    
c0015a43:	90                   	nop

c0015a44 <Computer::restart()>:
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a4d:	6a 00                	push   0x0
c0015a4f:	6a 00                	push   0x0
c0015a51:	6a 01                	push   0x1
c0015a53:	50                   	push   eax
c0015a54:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a57:	83 c4 1c             	add    esp,0x1c
c0015a5a:	c3                   	ret    
c0015a5b:	90                   	nop

c0015a5c <Computer::sleep()>:
c0015a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a60:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a6a:	e9 e1 8e 00 00       	jmp    c001e950 <ACPI::sleep()>
c0015a6f:	90                   	nop

c0015a70 <Computer::nmiEnabled()>:
c0015a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a74:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015a7a:	c3                   	ret    
c0015a7b:	90                   	nop

c0015a7c <Computer::readCMOS(unsigned char)>:
c0015a7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a84:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015a8b:	75 09                	jne    c0015a96 <Computer::readCMOS(unsigned char)+0x1a>
c0015a8d:	b2 80                	mov    dl,0x80
c0015a8f:	09 d0                	or     eax,edx
c0015a91:	e6 70                	out    0x70,al
c0015a93:	e4 71                	in     al,0x71
c0015a95:	c3                   	ret    
c0015a96:	31 d2                	xor    edx,edx
c0015a98:	eb f5                	jmp    c0015a8f <Computer::readCMOS(unsigned char)+0x13>

c0015a9a <Computer::enableNMI(bool)>:
c0015a9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aa2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015aa8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015ab0:	eb ca                	jmp    c0015a7c <Computer::readCMOS(unsigned char)>

c0015ab2 <Computer::open(int, int, void*)>:
c0015ab2:	56                   	push   esi
c0015ab3:	53                   	push   ebx
c0015ab4:	83 ec 10             	sub    esp,0x10
c0015ab7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015abb:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ac2:	68 b1 0f 03 c0       	push   0xc0030fb1
c0015ac7:	0f 94 05 80 3b 03 c0 	sete   BYTE PTR ds:0xc0033b80
c0015ace:	e8 2c a0 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015ad3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015ada:	e8 db 08 00 00       	call   c00163ba <malloc>
c0015adf:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ae2:	89 c6                	mov    esi,eax
c0015ae4:	e8 db 89 00 00       	call   c001e4c4 <ACPI::ACPI()>
c0015ae9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015aef:	58                   	pop    eax
c0015af0:	5a                   	pop    edx
c0015af1:	56                   	push   esi
c0015af2:	53                   	push   ebx
c0015af3:	e8 d2 57 00 00       	call   c001b2ca <Device::addChild(Device*)>
c0015af8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015afb:	e8 9c fc ff ff       	call   c001579c <Computer::detectFeatures()>
c0015b00:	59                   	pop    ecx
c0015b01:	5e                   	pop    esi
c0015b02:	6a 01                	push   0x1
c0015b04:	53                   	push   ebx
c0015b05:	e8 90 ff ff ff       	call   c0015a9a <Computer::enableNMI(bool)>
c0015b0a:	c7 04 24 c9 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fc9
c0015b11:	e8 e9 9f 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015b16:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015b1d:	e8 98 08 00 00       	call   c00163ba <malloc>
c0015b22:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b25:	89 c6                	mov    esi,eax
c0015b27:	e8 c4 94 00 00       	call   c001eff0 <CPU::CPU()>
c0015b2c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b32:	58                   	pop    eax
c0015b33:	5a                   	pop    edx
c0015b34:	56                   	push   esi
c0015b35:	53                   	push   ebx
c0015b36:	e8 8f 57 00 00       	call   c001b2ca <Device::addChild(Device*)>
c0015b3b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b45:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b47:	51                   	push   ecx
c0015b48:	6a 00                	push   0x0
c0015b4a:	6a 00                	push   0x0
c0015b4c:	50                   	push   eax
c0015b4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b50:	83 c4 14             	add    esp,0x14
c0015b53:	68 78 10 03 c0       	push   0xc0031078
c0015b58:	e8 a2 9f 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015b5d:	e8 42 13 01 00       	call   c0026ea4 <HalInitialiseCoprocessor()>
c0015b62:	c7 04 24 e3 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe3
c0015b69:	e8 91 9f 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c0015b6e:	c7 04 24 ac 55 01 c0 	mov    DWORD PTR [esp],0xc00155ac
c0015b75:	e8 ba f5 00 00       	call   c0025134 <setupMultitasking(void (*)())>
c0015b7a:	83 c4 14             	add    esp,0x14
c0015b7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b82:	5b                   	pop    ebx
c0015b83:	5e                   	pop    esi
c0015b84:	c3                   	ret    
c0015b85:	90                   	nop

c0015b86 <Computer::disableNMI()>:
c0015b86:	6a 00                	push   0x0
c0015b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b8c:	50                   	push   eax
c0015b8d:	e8 08 ff ff ff       	call   c0015a9a <Computer::enableNMI(bool)>
c0015b92:	5a                   	pop    edx
c0015b93:	59                   	pop    ecx
c0015b94:	c3                   	ret    
c0015b95:	90                   	nop

c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015b96:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ba2:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015ba9:	75 0b                	jne    c0015bb6 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015bab:	b1 80                	mov    cl,0x80
c0015bad:	09 c8                	or     eax,ecx
c0015baf:	e6 70                	out    0x70,al
c0015bb1:	88 d0                	mov    al,dl
c0015bb3:	e6 71                	out    0x71,al
c0015bb5:	c3                   	ret    
c0015bb6:	31 c9                	xor    ecx,ecx
c0015bb8:	eb f3                	jmp    c0015bad <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015bba <Computer::handleNMI()>:
c0015bba:	56                   	push   esi
c0015bbb:	53                   	push   ebx
c0015bbc:	83 ec 10             	sub    esp,0x10
c0015bbf:	e4 92                	in     al,0x92
c0015bc1:	89 c6                	mov    esi,eax
c0015bc3:	e4 61                	in     al,0x61
c0015bc5:	68 fe 0f 03 c0       	push   0xc0030ffe
c0015bca:	88 c3                	mov    bl,al
c0015bcc:	e8 78 36 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	83 e6 10             	and    esi,0x10
c0015bd7:	75 10                	jne    c0015be9 <Computer::handleNMI()+0x2f>
c0015bd9:	f6 c3 40             	test   bl,0x40
c0015bdc:	75 20                	jne    c0015bfe <Computer::handleNMI()+0x44>
c0015bde:	80 e3 80             	and    bl,0x80
c0015be1:	75 30                	jne    c0015c13 <Computer::handleNMI()+0x59>
c0015be3:	83 c4 04             	add    esp,0x4
c0015be6:	5b                   	pop    ebx
c0015be7:	5e                   	pop    esi
c0015be8:	c3                   	ret    
c0015be9:	83 ec 0c             	sub    esp,0xc
c0015bec:	68 0f 10 03 c0       	push   0xc003100f
c0015bf1:	e8 6c a6 00 00       	call   c0020262 <KePanic(char const*)>
c0015bf6:	83 c4 10             	add    esp,0x10
c0015bf9:	f6 c3 40             	test   bl,0x40
c0015bfc:	74 e0                	je     c0015bde <Computer::handleNMI()+0x24>
c0015bfe:	83 ec 0c             	sub    esp,0xc
c0015c01:	68 1c 10 03 c0       	push   0xc003101c
c0015c06:	e8 57 a6 00 00       	call   c0020262 <KePanic(char const*)>
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	80 e3 80             	and    bl,0x80
c0015c11:	74 d0                	je     c0015be3 <Computer::handleNMI()+0x29>
c0015c13:	c7 44 24 10 26 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031026
c0015c1b:	83 c4 04             	add    esp,0x4
c0015c1e:	5b                   	pop    ebx
c0015c1f:	5e                   	pop    esi
c0015c20:	e9 3d a6 00 00       	jmp    c0020262 <KePanic(char const*)>
c0015c25:	90                   	nop

c0015c26 <GDTEntry::setBase(unsigned int)>:
c0015c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c2e:	89 c1                	mov    ecx,eax
c0015c30:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c34:	c1 e9 10             	shr    ecx,0x10
c0015c37:	c1 e8 18             	shr    eax,0x18
c0015c3a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c3d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c40:	c3                   	ret    
c0015c41:	90                   	nop

c0015c42 <GDTEntry::setLimit(unsigned int)>:
c0015c42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c4a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c4d:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c50:	83 e2 f0             	and    edx,0xfffffff0
c0015c53:	c1 e8 10             	shr    eax,0x10
c0015c56:	83 e0 0f             	and    eax,0xf
c0015c59:	09 d0                	or     eax,edx
c0015c5b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c5e:	c3                   	ret    
c0015c5f:	90                   	nop

c0015c60 <GDT::GDT()>:
c0015c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c6e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c74:	90                   	nop
c0015c75:	c3                   	ret    

c0015c76 <GDT::addEntry(GDTEntry)>:
c0015c76:	53                   	push   ebx
c0015c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c7f:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c85:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015c89:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015c8d:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c90:	c1 e0 03             	shl    eax,0x3
c0015c93:	89 0a                	mov    DWORD PTR [edx],ecx
c0015c95:	5b                   	pop    ebx
c0015c96:	c3                   	ret    
c0015c97:	90                   	nop

c0015c98 <GDT::getNumberOfEntries()>:
c0015c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	c3                   	ret    
c0015c9f:	90                   	nop

c0015ca0 <GDT::flush()>:
c0015ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ca4:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ca6:	83 c0 04             	add    eax,0x4
c0015ca9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015cb0:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015cb5:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015cbc:	e9 99 a6 fe ff       	jmp    c000035a <loadGDT>
c0015cc1:	90                   	nop

c0015cc2 <GDT::setup()>:
c0015cc2:	57                   	push   edi
c0015cc3:	56                   	push   esi
c0015cc4:	53                   	push   ebx
c0015cc5:	83 ec 30             	sub    esp,0x30
c0015cc8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015ccc:	6a 00                	push   0x0
c0015cce:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015cd2:	56                   	push   esi
c0015cd3:	e8 4e ff ff ff       	call   c0015c26 <GDTEntry::setBase(unsigned int)>
c0015cd8:	6a 00                	push   0x0
c0015cda:	56                   	push   esi
c0015cdb:	e8 62 ff ff ff       	call   c0015c42 <GDTEntry::setLimit(unsigned int)>
c0015ce0:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015ce8:	6a 00                	push   0x0
c0015cea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015cee:	56                   	push   esi
c0015cef:	e8 32 ff ff ff       	call   c0015c26 <GDTEntry::setBase(unsigned int)>
c0015cf4:	68 ff ff ff 00       	push   0xffffff
c0015cf9:	56                   	push   esi
c0015cfa:	e8 43 ff ff ff       	call   c0015c42 <GDTEntry::setLimit(unsigned int)>
c0015cff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015d03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d07:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d0b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015d0f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015d14:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015d19:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d1d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015d21:	89 f8                	mov    eax,edi
c0015d23:	89 fa                	mov    edx,edi
c0015d25:	80 e4 f7             	and    ah,0xf7
c0015d28:	80 ce 60             	or     dh,0x60
c0015d2b:	89 c7                	mov    edi,eax
c0015d2d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d31:	80 cc 60             	or     ah,0x60
c0015d34:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d38:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d3c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d44:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d48:	83 c4 20             	add    esp,0x20
c0015d4b:	6a 00                	push   0x0
c0015d4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d51:	50                   	push   eax
c0015d52:	e8 cf fe ff ff       	call   c0015c26 <GDTEntry::setBase(unsigned int)>
c0015d57:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d5b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d5f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d63:	83 e0 3f             	and    eax,0x3f
c0015d66:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d6a:	6a 00                	push   0x0
c0015d6c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d70:	50                   	push   eax
c0015d71:	e8 b0 fe ff ff       	call   c0015c26 <GDTEntry::setBase(unsigned int)>
c0015d76:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015d7a:	83 e0 3f             	and    eax,0x3f
c0015d7d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015d81:	83 c4 0c             	add    esp,0xc
c0015d84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d8c:	53                   	push   ebx
c0015d8d:	e8 e4 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015d92:	83 c4 0c             	add    esp,0xc
c0015d95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d9d:	53                   	push   ebx
c0015d9e:	e8 d3 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015da3:	83 c4 0c             	add    esp,0xc
c0015da6:	57                   	push   edi
c0015da7:	56                   	push   esi
c0015da8:	53                   	push   ebx
c0015da9:	e8 c8 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015dae:	83 c4 0c             	add    esp,0xc
c0015db1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015db9:	53                   	push   ebx
c0015dba:	e8 b7 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015dbf:	83 c4 0c             	add    esp,0xc
c0015dc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dca:	53                   	push   ebx
c0015dcb:	e8 a6 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015dd0:	83 c4 0c             	add    esp,0xc
c0015dd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015dd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ddb:	53                   	push   ebx
c0015ddc:	e8 95 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015de1:	83 c4 0c             	add    esp,0xc
c0015de4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dec:	53                   	push   ebx
c0015ded:	e8 84 fe ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c0015df2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015df5:	e8 a6 fe ff ff       	call   c0015ca0 <GDT::flush()>
c0015dfa:	83 c4 40             	add    esp,0x40
c0015dfd:	5b                   	pop    ebx
c0015dfe:	5e                   	pop    esi
c0015dff:	5f                   	pop    edi
c0015e00:	c3                   	ret    

c0015e01 <idleFunction(void*)>:
c0015e01:	83 ec 0c             	sub    esp,0xc
c0015e04:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015e09:	48                   	dec    eax
c0015e0a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015e0f:	75 01                	jne    c0015e12 <idleFunction(void*)+0x11>
c0015e11:	fb                   	sti    
c0015e12:	e8 59 0d 01 00       	call   c0026b70 <HalSystemIdle()>
c0015e17:	e8 b6 8a 01 00       	call   c002e8d2 <idleCommon()>
c0015e1c:	eb f4                	jmp    c0015e12 <idleFunction(void*)+0x11>
c0015e1e:	66 90                	xchg   ax,ax

c0015e20 <IDTEntry::IDTEntry(bool)>:
c0015e20:	53                   	push   ebx
c0015e21:	83 ec 04             	sub    esp,0x4
c0015e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e28:	88 04 24             	mov    BYTE PTR [esp],al
c0015e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e2f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e39:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e41:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e44:	83 e2 f0             	and    edx,0xfffffff0
c0015e47:	83 ca 0e             	or     edx,0xe
c0015e4a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e51:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e54:	83 e2 ef             	and    edx,0xffffffef
c0015e57:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e5a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e5e:	85 c0                	test   eax,eax
c0015e60:	74 06                	je     c0015e68 <IDTEntry::IDTEntry(bool)+0x48>
c0015e62:	b2 03                	mov    dl,0x3
c0015e64:	eb 06                	jmp    c0015e6c <IDTEntry::IDTEntry(bool)+0x4c>
c0015e66:	66 90                	xchg   ax,ax
c0015e68:	b2 00                	mov    dl,0x0
c0015e6a:	66 90                	xchg   ax,ax
c0015e6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e70:	83 e2 03             	and    edx,0x3
c0015e73:	89 d3                	mov    ebx,edx
c0015e75:	c1 e3 05             	shl    ebx,0x5
c0015e78:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e7b:	83 e2 9f             	and    edx,0xffffff9f
c0015e7e:	88 d1                	mov    cl,dl
c0015e80:	88 da                	mov    dl,bl
c0015e82:	09 ca                	or     edx,ecx
c0015e84:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e8b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e8e:	83 ca 80             	or     edx,0xffffff80
c0015e91:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e94:	90                   	nop
c0015e95:	83 c4 04             	add    esp,0x4
c0015e98:	5b                   	pop    ebx
c0015e99:	c3                   	ret    

c0015e9a <IDTEntry::setOffset(unsigned int)>:
c0015e9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ea2:	66 89 02             	mov    WORD PTR [edx],ax
c0015ea5:	c1 e8 10             	shr    eax,0x10
c0015ea8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015eac:	c3                   	ret    
c0015ead:	90                   	nop
c0015eae:	66 90                	xchg   ax,ax

c0015eb0 <IDT::IDT()>:
c0015eb0:	90                   	nop
c0015eb1:	c3                   	ret    

c0015eb2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb6:	83 c0 30             	add    eax,0x30
c0015eb9:	c3                   	ret    

c0015eba <IDT::addEntry(IDTEntry, int)>:
c0015eba:	53                   	push   ebx
c0015ebb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ebf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ec3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ec7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ecb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015ece:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015ed2:	5b                   	pop    ebx
c0015ed3:	c3                   	ret    

c0015ed4 <IDT::addEntry(int, void (*)(), bool)>:
c0015ed4:	53                   	push   ebx
c0015ed5:	83 ec 10             	sub    esp,0x10
c0015ed8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015edd:	50                   	push   eax
c0015ede:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015ee2:	53                   	push   ebx
c0015ee3:	e8 38 ff ff ff       	call   c0015e20 <IDTEntry::IDTEntry(bool)>
c0015ee8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015eec:	53                   	push   ebx
c0015eed:	e8 a8 ff ff ff       	call   c0015e9a <IDTEntry::setOffset(unsigned int)>
c0015ef2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ef6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015efa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015efe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f02:	e8 b3 ff ff ff       	call   c0015eba <IDT::addEntry(IDTEntry, int)>
c0015f07:	83 c4 30             	add    esp,0x30
c0015f0a:	5b                   	pop    ebx
c0015f0b:	c3                   	ret    

c0015f0c <IDT::flush()>:
c0015f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f10:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015f19:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015f1e:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015f25:	c3                   	ret    

c0015f26 <IDT::setup()>:
c0015f26:	57                   	push   edi
c0015f27:	56                   	push   esi
c0015f28:	53                   	push   ebx
c0015f29:	83 ec 10             	sub    esp,0x10
c0015f2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f30:	6a 00                	push   0x0
c0015f32:	68 d0 df 02 c0       	push   0xc002dfd0
c0015f37:	6a 00                	push   0x0
c0015f39:	53                   	push   ebx
c0015f3a:	e8 95 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f3f:	6a 00                	push   0x0
c0015f41:	68 e0 df 02 c0       	push   0xc002dfe0
c0015f46:	6a 01                	push   0x1
c0015f48:	53                   	push   ebx
c0015f49:	e8 86 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f4e:	83 c4 20             	add    esp,0x20
c0015f51:	6a 00                	push   0x0
c0015f53:	68 ea df 02 c0       	push   0xc002dfea
c0015f58:	6a 02                	push   0x2
c0015f5a:	53                   	push   ebx
c0015f5b:	e8 74 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f60:	6a 00                	push   0x0
c0015f62:	68 f4 df 02 c0       	push   0xc002dff4
c0015f67:	6a 03                	push   0x3
c0015f69:	53                   	push   ebx
c0015f6a:	e8 65 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f6f:	83 c4 20             	add    esp,0x20
c0015f72:	6a 00                	push   0x0
c0015f74:	68 fe df 02 c0       	push   0xc002dffe
c0015f79:	6a 04                	push   0x4
c0015f7b:	53                   	push   ebx
c0015f7c:	e8 53 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f81:	6a 00                	push   0x0
c0015f83:	68 08 e0 02 c0       	push   0xc002e008
c0015f88:	6a 05                	push   0x5
c0015f8a:	53                   	push   ebx
c0015f8b:	e8 44 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015f90:	83 c4 20             	add    esp,0x20
c0015f93:	6a 00                	push   0x0
c0015f95:	68 12 e0 02 c0       	push   0xc002e012
c0015f9a:	6a 06                	push   0x6
c0015f9c:	53                   	push   ebx
c0015f9d:	e8 32 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015fa2:	6a 00                	push   0x0
c0015fa4:	68 1c e0 02 c0       	push   0xc002e01c
c0015fa9:	6a 07                	push   0x7
c0015fab:	53                   	push   ebx
c0015fac:	e8 23 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015fb1:	83 c4 20             	add    esp,0x20
c0015fb4:	6a 00                	push   0x0
c0015fb6:	68 26 e0 02 c0       	push   0xc002e026
c0015fbb:	6a 08                	push   0x8
c0015fbd:	53                   	push   ebx
c0015fbe:	e8 11 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015fc3:	6a 00                	push   0x0
c0015fc5:	68 2e e0 02 c0       	push   0xc002e02e
c0015fca:	6a 09                	push   0x9
c0015fcc:	53                   	push   ebx
c0015fcd:	e8 02 ff ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015fd2:	83 c4 20             	add    esp,0x20
c0015fd5:	6a 00                	push   0x0
c0015fd7:	68 38 e0 02 c0       	push   0xc002e038
c0015fdc:	6a 0a                	push   0xa
c0015fde:	53                   	push   ebx
c0015fdf:	e8 f0 fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015fe4:	6a 00                	push   0x0
c0015fe6:	68 40 e0 02 c0       	push   0xc002e040
c0015feb:	6a 0b                	push   0xb
c0015fed:	53                   	push   ebx
c0015fee:	e8 e1 fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0015ff3:	83 c4 20             	add    esp,0x20
c0015ff6:	6a 00                	push   0x0
c0015ff8:	68 48 e0 02 c0       	push   0xc002e048
c0015ffd:	6a 0c                	push   0xc
c0015fff:	53                   	push   ebx
c0016000:	e8 cf fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016005:	6a 00                	push   0x0
c0016007:	68 50 e0 02 c0       	push   0xc002e050
c001600c:	6a 0d                	push   0xd
c001600e:	53                   	push   ebx
c001600f:	e8 c0 fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016014:	83 c4 20             	add    esp,0x20
c0016017:	6a 00                	push   0x0
c0016019:	68 6a e0 02 c0       	push   0xc002e06a
c001601e:	6a 0e                	push   0xe
c0016020:	53                   	push   ebx
c0016021:	e8 ae fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016026:	6a 00                	push   0x0
c0016028:	68 72 e0 02 c0       	push   0xc002e072
c001602d:	6a 0f                	push   0xf
c001602f:	53                   	push   ebx
c0016030:	e8 9f fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016035:	83 c4 20             	add    esp,0x20
c0016038:	6a 00                	push   0x0
c001603a:	68 7c e0 02 c0       	push   0xc002e07c
c001603f:	6a 10                	push   0x10
c0016041:	53                   	push   ebx
c0016042:	e8 8d fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016047:	6a 00                	push   0x0
c0016049:	68 86 e0 02 c0       	push   0xc002e086
c001604e:	6a 11                	push   0x11
c0016050:	53                   	push   ebx
c0016051:	e8 7e fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016056:	83 c4 20             	add    esp,0x20
c0016059:	6a 00                	push   0x0
c001605b:	68 90 e0 02 c0       	push   0xc002e090
c0016060:	6a 12                	push   0x12
c0016062:	53                   	push   ebx
c0016063:	e8 6c fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016068:	6a 01                	push   0x1
c001606a:	68 2a e1 02 c0       	push   0xc002e12a
c001606f:	6a 60                	push   0x60
c0016071:	53                   	push   ebx
c0016072:	e8 5d fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016077:	83 c4 20             	add    esp,0x20
c001607a:	6a 00                	push   0x0
c001607c:	68 31 e1 02 c0       	push   0xc002e131
c0016081:	6a 20                	push   0x20
c0016083:	53                   	push   ebx
c0016084:	e8 4b fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016089:	6a 00                	push   0x0
c001608b:	68 1c e1 02 c0       	push   0xc002e11c
c0016090:	6a 21                	push   0x21
c0016092:	53                   	push   ebx
c0016093:	e8 3c fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016098:	83 c4 20             	add    esp,0x20
c001609b:	6a 00                	push   0x0
c001609d:	68 23 e1 02 c0       	push   0xc002e123
c00160a2:	6a 22                	push   0x22
c00160a4:	53                   	push   ebx
c00160a5:	e8 2a fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160aa:	6a 00                	push   0x0
c00160ac:	68 9a e0 02 c0       	push   0xc002e09a
c00160b1:	6a 23                	push   0x23
c00160b3:	53                   	push   ebx
c00160b4:	e8 1b fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160b9:	83 c4 20             	add    esp,0x20
c00160bc:	6a 00                	push   0x0
c00160be:	68 a4 e0 02 c0       	push   0xc002e0a4
c00160c3:	6a 24                	push   0x24
c00160c5:	53                   	push   ebx
c00160c6:	e8 09 fe ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160cb:	6a 00                	push   0x0
c00160cd:	68 ae e0 02 c0       	push   0xc002e0ae
c00160d2:	6a 25                	push   0x25
c00160d4:	53                   	push   ebx
c00160d5:	e8 fa fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160da:	83 c4 20             	add    esp,0x20
c00160dd:	6a 00                	push   0x0
c00160df:	68 b8 e0 02 c0       	push   0xc002e0b8
c00160e4:	6a 26                	push   0x26
c00160e6:	53                   	push   ebx
c00160e7:	e8 e8 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160ec:	6a 00                	push   0x0
c00160ee:	68 c2 e0 02 c0       	push   0xc002e0c2
c00160f3:	6a 27                	push   0x27
c00160f5:	53                   	push   ebx
c00160f6:	e8 d9 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00160fb:	83 c4 20             	add    esp,0x20
c00160fe:	6a 00                	push   0x0
c0016100:	68 cc e0 02 c0       	push   0xc002e0cc
c0016105:	6a 28                	push   0x28
c0016107:	53                   	push   ebx
c0016108:	e8 c7 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001610d:	6a 00                	push   0x0
c001610f:	68 d6 e0 02 c0       	push   0xc002e0d6
c0016114:	6a 29                	push   0x29
c0016116:	53                   	push   ebx
c0016117:	e8 b8 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001611c:	83 c4 20             	add    esp,0x20
c001611f:	6a 00                	push   0x0
c0016121:	68 e0 e0 02 c0       	push   0xc002e0e0
c0016126:	6a 2a                	push   0x2a
c0016128:	53                   	push   ebx
c0016129:	e8 a6 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001612e:	6a 00                	push   0x0
c0016130:	68 ea e0 02 c0       	push   0xc002e0ea
c0016135:	6a 2b                	push   0x2b
c0016137:	53                   	push   ebx
c0016138:	e8 97 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001613d:	83 c4 20             	add    esp,0x20
c0016140:	6a 00                	push   0x0
c0016142:	68 f4 e0 02 c0       	push   0xc002e0f4
c0016147:	6a 2c                	push   0x2c
c0016149:	53                   	push   ebx
c001614a:	e8 85 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001614f:	6a 00                	push   0x0
c0016151:	68 fe e0 02 c0       	push   0xc002e0fe
c0016156:	6a 2d                	push   0x2d
c0016158:	53                   	push   ebx
c0016159:	e8 76 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001615e:	83 c4 20             	add    esp,0x20
c0016161:	6a 00                	push   0x0
c0016163:	68 08 e1 02 c0       	push   0xc002e108
c0016168:	6a 2e                	push   0x2e
c001616a:	53                   	push   ebx
c001616b:	e8 64 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016170:	6a 00                	push   0x0
c0016172:	68 12 e1 02 c0       	push   0xc002e112
c0016177:	6a 2f                	push   0x2f
c0016179:	53                   	push   ebx
c001617a:	e8 55 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c001617f:	83 c4 20             	add    esp,0x20
c0016182:	6a 00                	push   0x0
c0016184:	68 6c e2 02 c0       	push   0xc002e26c
c0016189:	6a 30                	push   0x30
c001618b:	53                   	push   ebx
c001618c:	e8 43 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016191:	6a 00                	push   0x0
c0016193:	68 76 e2 02 c0       	push   0xc002e276
c0016198:	6a 31                	push   0x31
c001619a:	53                   	push   ebx
c001619b:	e8 34 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161a0:	83 c4 20             	add    esp,0x20
c00161a3:	6a 00                	push   0x0
c00161a5:	68 80 e2 02 c0       	push   0xc002e280
c00161aa:	6a 32                	push   0x32
c00161ac:	53                   	push   ebx
c00161ad:	e8 22 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161b2:	6a 00                	push   0x0
c00161b4:	68 8a e2 02 c0       	push   0xc002e28a
c00161b9:	6a 33                	push   0x33
c00161bb:	53                   	push   ebx
c00161bc:	e8 13 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161c1:	83 c4 20             	add    esp,0x20
c00161c4:	6a 00                	push   0x0
c00161c6:	68 94 e2 02 c0       	push   0xc002e294
c00161cb:	6a 34                	push   0x34
c00161cd:	53                   	push   ebx
c00161ce:	e8 01 fd ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161d3:	6a 00                	push   0x0
c00161d5:	68 9e e2 02 c0       	push   0xc002e29e
c00161da:	6a 35                	push   0x35
c00161dc:	53                   	push   ebx
c00161dd:	e8 f2 fc ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161e2:	83 c4 20             	add    esp,0x20
c00161e5:	6a 00                	push   0x0
c00161e7:	68 a8 e2 02 c0       	push   0xc002e2a8
c00161ec:	6a 36                	push   0x36
c00161ee:	53                   	push   ebx
c00161ef:	e8 e0 fc ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c00161f4:	6a 00                	push   0x0
c00161f6:	68 b2 e2 02 c0       	push   0xc002e2b2
c00161fb:	6a 37                	push   0x37
c00161fd:	53                   	push   ebx
c00161fe:	e8 d1 fc ff ff       	call   c0015ed4 <IDT::addEntry(int, void (*)(), bool)>
c0016203:	83 c4 1c             	add    esp,0x1c
c0016206:	6a 03                	push   0x3
c0016208:	6a 02                	push   0x2
c001620a:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016210:	e8 13 25 00 00       	call   c0018728 <VAS::allocatePages(int, int)>
c0016215:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001621c:	89 c6                	mov    esi,eax
c001621e:	e8 97 01 00 00       	call   c00163ba <malloc>
c0016223:	81 c6 00 20 00 00    	add    esi,0x2000
c0016229:	89 04 24             	mov    DWORD PTR [esp],eax
c001622c:	89 c7                	mov    edi,eax
c001622e:	e8 15 16 00 00       	call   c0017848 <TSS::TSS()>
c0016233:	83 c4 0c             	add    esp,0xc
c0016236:	68 26 e0 02 c0       	push   0xc002e026
c001623b:	56                   	push   esi
c001623c:	57                   	push   edi
c001623d:	e8 4a 16 00 00       	call   c001788c <TSS::setup(unsigned long, unsigned long)>
c0016242:	89 c6                	mov    esi,eax
c0016244:	58                   	pop    eax
c0016245:	5a                   	pop    edx
c0016246:	6a 00                	push   0x0
c0016248:	8d 44 24 14          	lea    eax,[esp+0x14]
c001624c:	50                   	push   eax
c001624d:	e8 ce fb ff ff       	call   c0015e20 <IDTEntry::IDTEntry(bool)>
c0016252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016256:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001625b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016262:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016268:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001626c:	80 ce 05             	or     dh,0x5
c001626f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0016272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016276:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001627a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001627d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016280:	e8 87 fc ff ff       	call   c0015f0c <IDT::flush()>
c0016285:	83 c4 20             	add    esp,0x20
c0016288:	5b                   	pop    ebx
c0016289:	5e                   	pop    esi
c001628a:	5f                   	pop    edi
c001628b:	c3                   	ret    

c001628c <sbrk>:
c001628c:	55                   	push   ebp
c001628d:	57                   	push   edi
c001628e:	56                   	push   esi
c001628f:	53                   	push   ebx
c0016290:	83 ec 1c             	sub    esp,0x1c
c0016293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016297:	85 c0                	test   eax,eax
c0016299:	74 61                	je     c00162fc <sbrk+0x70>
c001629b:	78 66                	js     c0016303 <sbrk+0x77>
c001629d:	8b 15 64 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b64
c00162a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162a7:	05 ff 0f 00 00       	add    eax,0xfff
c00162ac:	89 c5                	mov    ebp,eax
c00162ae:	78 6b                	js     c001631b <sbrk+0x8f>
c00162b0:	c1 fd 0c             	sar    ebp,0xc
c00162b3:	bb 00 00 00 00       	mov    ebx,0x0
c00162b8:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00162be:	8b 3d 64 3b 03 c0    	mov    edi,DWORD PTR ds:0xc0033b64
c00162c4:	e8 fa 03 00 00       	call   c00166c3 <Phys::allocatePage()>
c00162c9:	68 01 04 00 00       	push   0x401
c00162ce:	57                   	push   edi
c00162cf:	50                   	push   eax
c00162d0:	56                   	push   esi
c00162d1:	e8 4e 23 00 00       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c00162d6:	81 05 64 3b 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033b64,0x1000
c00162e0:	83 c3 01             	add    ebx,0x1
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	39 dd                	cmp    ebp,ebx
c00162e8:	75 ce                	jne    c00162b8 <sbrk+0x2c>
c00162ea:	0f 20 d8             	mov    eax,cr3
c00162ed:	0f 22 d8             	mov    cr3,eax
c00162f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162f4:	83 c4 1c             	add    esp,0x1c
c00162f7:	5b                   	pop    ebx
c00162f8:	5e                   	pop    esi
c00162f9:	5f                   	pop    edi
c00162fa:	5d                   	pop    ebp
c00162fb:	c3                   	ret    
c00162fc:	a1 64 3b 03 c0       	mov    eax,ds:0xc0033b64
c0016301:	eb f1                	jmp    c00162f4 <sbrk+0x68>
c0016303:	83 ec 08             	sub    esp,0x8
c0016306:	50                   	push   eax
c0016307:	68 c8 10 03 c0       	push   0xc00310c8
c001630c:	e8 38 2f 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016319:	eb d9                	jmp    c00162f4 <sbrk+0x68>
c001631b:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0016321:	eb 8d                	jmp    c00162b0 <sbrk+0x24>

c0016323 <mmap>:
c0016323:	83 ec 18             	sub    esp,0x18
c0016326:	68 f8 10 03 c0       	push   0xc00310f8
c001632b:	e8 32 9f 00 00       	call   c0020262 <KePanic(char const*)>
c0016330:	b8 00 00 00 00       	mov    eax,0x0
c0016335:	83 c4 1c             	add    esp,0x1c
c0016338:	c3                   	ret    

c0016339 <munmap>:
c0016339:	83 ec 18             	sub    esp,0x18
c001633c:	68 fd 10 03 c0       	push   0xc00310fd
c0016341:	e8 1c 9f 00 00       	call   c0020262 <KePanic(char const*)>
c0016346:	b8 00 00 00 00       	mov    eax,0x0
c001634b:	83 c4 1c             	add    esp,0x1c
c001634e:	c3                   	ret    

c001634f <liballoc_lock()>:
c001634f:	fa                   	cli    
c0016350:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016357:	b8 00 00 00 00       	mov    eax,0x0
c001635c:	c3                   	ret    

c001635d <liballoc_unlock()>:
c001635d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016362:	83 e8 01             	sub    eax,0x1
c0016365:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001636a:	75 01                	jne    c001636d <liballoc_unlock()+0x10>
c001636c:	fb                   	sti    
c001636d:	b8 00 00 00 00       	mov    eax,0x0
c0016372:	c3                   	ret    

c0016373 <liballoc_alloc(int)>:
c0016373:	83 ec 10             	sub    esp,0x10
c0016376:	6a 01                	push   0x1
c0016378:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001637c:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016382:	e8 a1 23 00 00       	call   c0018728 <VAS::allocatePages(int, int)>
c0016387:	83 c4 1c             	add    esp,0x1c
c001638a:	c3                   	ret    

c001638b <liballoc_free(void*, int)>:
c001638b:	83 ec 14             	sub    esp,0x14
c001638e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016392:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016398:	e8 cf 1f 00 00       	call   c001836c <VAS::freeAllocatedPages(unsigned long)>
c001639d:	b8 00 00 00 00       	mov    eax,0x0
c00163a2:	83 c4 1c             	add    esp,0x1c
c00163a5:	c3                   	ret    

c00163a6 <realloc>:
c00163a6:	83 ec 14             	sub    esp,0x14
c00163a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b1:	e8 e8 b3 fe ff       	call   c000179e <dlrealloc>
c00163b6:	83 c4 1c             	add    esp,0x1c
c00163b9:	c3                   	ret    

c00163ba <malloc>:
c00163ba:	83 ec 18             	sub    esp,0x18
c00163bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c1:	e8 9b ae fe ff       	call   c0001261 <dlmalloc>
c00163c6:	83 c4 1c             	add    esp,0x1c
c00163c9:	c3                   	ret    

c00163ca <free>:
c00163ca:	83 ec 18             	sub    esp,0x18
c00163cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d1:	e8 33 ab fe ff       	call   c0000f09 <dlfree>
c00163d6:	83 c4 1c             	add    esp,0x1c
c00163d9:	c3                   	ret    

c00163da <rfree>:
c00163da:	83 ec 18             	sub    esp,0x18
c00163dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e1:	e8 23 ab fe ff       	call   c0000f09 <dlfree>
c00163e6:	83 c4 1c             	add    esp,0x1c
c00163e9:	c3                   	ret    

c00163ea <calloc>:
c00163ea:	56                   	push   esi
c00163eb:	53                   	push   ebx
c00163ec:	83 ec 10             	sub    esp,0x10
c00163ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163f3:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00163f8:	53                   	push   ebx
c00163f9:	e8 bc ff ff ff       	call   c00163ba <malloc>
c00163fe:	89 c6                	mov    esi,eax
c0016400:	83 c4 0c             	add    esp,0xc
c0016403:	53                   	push   ebx
c0016404:	6a 00                	push   0x0
c0016406:	50                   	push   eax
c0016407:	e8 e4 a0 fe ff       	call   c00004f0 <memset>
c001640c:	89 f0                	mov    eax,esi
c001640e:	83 c4 14             	add    esp,0x14
c0016411:	5b                   	pop    ebx
c0016412:	5e                   	pop    esi
c0016413:	c3                   	ret    

c0016414 <KeEntryPoint>:
c0016414:	57                   	push   edi
c0016415:	bf f9 03 00 00       	mov    edi,0x3f9
c001641a:	56                   	push   esi
c001641b:	89 fa                	mov    edx,edi
c001641d:	53                   	push   ebx
c001641e:	31 f6                	xor    esi,esi
c0016420:	83 ec 2c             	sub    esp,0x2c
c0016423:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016428:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c001642d:	89 f0                	mov    eax,esi
c001642f:	ee                   	out    dx,al
c0016430:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016435:	b0 80                	mov    al,0x80
c0016437:	89 da                	mov    edx,ebx
c0016439:	ee                   	out    dx,al
c001643a:	b1 03                	mov    cl,0x3
c001643c:	ba f8 03 00 00       	mov    edx,0x3f8
c0016441:	88 c8                	mov    al,cl
c0016443:	ee                   	out    dx,al
c0016444:	89 f0                	mov    eax,esi
c0016446:	89 fa                	mov    edx,edi
c0016448:	ee                   	out    dx,al
c0016449:	88 c8                	mov    al,cl
c001644b:	89 da                	mov    edx,ebx
c001644d:	ee                   	out    dx,al
c001644e:	b0 c7                	mov    al,0xc7
c0016450:	ba fa 03 00 00       	mov    edx,0x3fa
c0016455:	ee                   	out    dx,al
c0016456:	b0 0b                	mov    al,0xb
c0016458:	ba fc 03 00 00       	mov    edx,0x3fc
c001645d:	ee                   	out    dx,al
c001645e:	68 04 11 03 c0       	push   0xc0031104
c0016463:	e8 e1 2d 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0016468:	e8 16 96 00 00       	call   c001fa83 <KeDisplaySplashScreen()>
c001646d:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016472:	05 ff 0f 00 00       	add    eax,0xfff
c0016477:	25 00 f0 ff ff       	and    eax,0xfffff000
c001647c:	89 04 24             	mov    DWORD PTR [esp],eax
c001647f:	e8 ad 03 00 00       	call   c0016831 <Phys::physicalMemorySetup(unsigned int)>
c0016484:	e8 66 1c 00 00       	call   c00180ef <Virt::virtualMemorySetup()>
c0016489:	e8 3f 95 00 00       	call   c001f9cd <KeInitialiseAtexit()>
c001648e:	58                   	pop    eax
c001648f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016493:	53                   	push   ebx
c0016494:	e8 53 1f 00 00       	call   c00183ec <VAS::VAS()>
c0016499:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c001649f:	e8 c6 83 01 00       	call   c002e86a <_init>
c00164a4:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00164ab:	e8 0a ff ff ff       	call   c00163ba <malloc>
c00164b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00164b3:	89 c6                	mov    esi,eax
c00164b5:	e8 30 f2 ff ff       	call   c00156ea <Computer::Computer()>
c00164ba:	53                   	push   ebx
c00164bb:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00164c1:	6a 00                	push   0x0
c00164c3:	6a 00                	push   0x0
c00164c5:	56                   	push   esi
c00164c6:	e8 e7 f5 ff ff       	call   c0015ab2 <Computer::open(int, int, void*)>
c00164cb:	83 c4 14             	add    esp,0x14
c00164ce:	53                   	push   ebx
c00164cf:	e8 e2 1f 00 00       	call   c00184b6 <VAS::~VAS()>
c00164d4:	83 c4 30             	add    esp,0x30
c00164d7:	5b                   	pop    ebx
c00164d8:	5e                   	pop    esi
c00164d9:	5f                   	pop    edi
c00164da:	c3                   	ret    

c00164db <Phys::allocateDMA(unsigned long)>:
c00164db:	55                   	push   ebp
c00164dc:	31 ed                	xor    ebp,ebp
c00164de:	57                   	push   edi
c00164df:	56                   	push   esi
c00164e0:	53                   	push   ebx
c00164e1:	31 db                	xor    ebx,ebx
c00164e3:	83 ec 1c             	sub    esp,0x1c
c00164e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164ea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00164f2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00164f8:	31 c0                	xor    eax,eax
c00164fa:	c1 ef 0c             	shr    edi,0xc
c00164fd:	eb 1b                	jmp    c001651a <Phys::allocateDMA(unsigned long)+0x3f>
c00164ff:	85 c0                	test   eax,eax
c0016501:	75 06                	jne    c0016509 <Phys::allocateDMA(unsigned long)+0x2e>
c0016503:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016507:	89 dd                	mov    ebp,ebx
c0016509:	8d 70 01             	lea    esi,[eax+0x1]
c001650c:	39 f7                	cmp    edi,esi
c001650e:	74 37                	je     c0016547 <Phys::allocateDMA(unsigned long)+0x6c>
c0016510:	89 f0                	mov    eax,esi
c0016512:	83 c3 01             	add    ebx,0x1
c0016515:	83 fb 0f             	cmp    ebx,0xf
c0016518:	7f 13                	jg     c001652d <Phys::allocateDMA(unsigned long)+0x52>
c001651a:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016521:	74 dc                	je     c00164ff <Phys::allocateDMA(unsigned long)+0x24>
c0016523:	31 c0                	xor    eax,eax
c0016525:	83 c3 01             	add    ebx,0x1
c0016528:	83 fb 0f             	cmp    ebx,0xf
c001652b:	7e ed                	jle    c001651a <Phys::allocateDMA(unsigned long)+0x3f>
c001652d:	83 ec 0c             	sub    esp,0xc
c0016530:	68 1c 11 03 c0       	push   0xc003111c
c0016535:	e8 28 9d 00 00       	call   c0020262 <KePanic(char const*)>
c001653a:	83 c4 10             	add    esp,0x10
c001653d:	31 c0                	xor    eax,eax
c001653f:	83 c4 1c             	add    esp,0x1c
c0016542:	5b                   	pop    ebx
c0016543:	5e                   	pop    esi
c0016544:	5f                   	pop    edi
c0016545:	5d                   	pop    ebp
c0016546:	c3                   	ret    
c0016547:	89 e9                	mov    ecx,ebp
c0016549:	c1 f9 04             	sar    ecx,0x4
c001654c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016550:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016554:	89 ca                	mov    edx,ecx
c0016556:	83 ea 01             	sub    edx,0x1
c0016559:	79 03                	jns    c001655e <Phys::allocateDMA(unsigned long)+0x83>
c001655b:	8d 51 0e             	lea    edx,[ecx+0xe]
c001655e:	c1 fa 04             	sar    edx,0x4
c0016561:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0016565:	74 08                	je     c001656f <Phys::allocateDMA(unsigned long)+0x94>
c0016567:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001656b:	31 c0                	xor    eax,eax
c001656d:	eb b6                	jmp    c0016525 <Phys::allocateDMA(unsigned long)+0x4a>
c001656f:	85 f6                	test   esi,esi
c0016571:	74 17                	je     c001658a <Phys::allocateDMA(unsigned long)+0xaf>
c0016573:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c0016579:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016580:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016583:	83 c2 01             	add    edx,0x1
c0016586:	39 d0                	cmp    eax,edx
c0016588:	75 f6                	jne    c0016580 <Phys::allocateDMA(unsigned long)+0xa5>
c001658a:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001658f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016593:	01 f8                	add    eax,edi
c0016595:	85 d2                	test   edx,edx
c0016597:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001659c:	74 17                	je     c00165b5 <Phys::allocateDMA(unsigned long)+0xda>
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	68 1c 11 03 c0       	push   0xc003111c
c00165a6:	e8 b7 9c 00 00       	call   c0020262 <KePanic(char const*)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	89 f0                	mov    eax,esi
c00165b0:	e9 5d ff ff ff       	jmp    c0016512 <Phys::allocateDMA(unsigned long)+0x37>
c00165b5:	c1 e5 0c             	shl    ebp,0xc
c00165b8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00165be:	e9 7c ff ff ff       	jmp    c001653f <Phys::allocateDMA(unsigned long)+0x64>

c00165c3 <Phys::freeDMA(unsigned long, unsigned long)>:
c00165c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165cd:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165d2:	c1 ea 0c             	shr    edx,0xc
c00165d5:	29 d0                	sub    eax,edx
c00165d7:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165e0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00165e5:	c1 e8 0c             	shr    eax,0xc
c00165e8:	85 d2                	test   edx,edx
c00165ea:	74 11                	je     c00165fd <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00165ec:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00165f1:	01 c2                	add    edx,eax
c00165f3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00165f6:	83 c0 01             	add    eax,0x1
c00165f9:	39 d0                	cmp    eax,edx
c00165fb:	75 f6                	jne    c00165f3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00165fd:	c3                   	ret    

c00165fe <Phys::setPageState(unsigned long, bool)>:
c00165fe:	57                   	push   edi
c00165ff:	56                   	push   esi
c0016600:	8b 35 68 3b 03 c0    	mov    esi,DWORD PTR ds:0xc0033b68
c0016606:	53                   	push   ebx
c0016607:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001660c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016610:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016614:	0f b6 c0             	movzx  eax,al
c0016617:	89 ca                	mov    edx,ecx
c0016619:	83 e1 07             	and    ecx,0x7
c001661c:	c1 ea 03             	shr    edx,0x3
c001661f:	d3 c3                	rol    ebx,cl
c0016621:	01 d6                	add    esi,edx
c0016623:	d3 e0                	shl    eax,cl
c0016625:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016628:	21 fb                	and    ebx,edi
c001662a:	88 1e                	mov    BYTE PTR [esi],bl
c001662c:	8b 1d 68 3b 03 c0    	mov    ebx,DWORD PTR ds:0xc0033b68
c0016632:	01 da                	add    edx,ebx
c0016634:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016636:	09 c8                	or     eax,ecx
c0016638:	88 02                	mov    BYTE PTR [edx],al
c001663a:	5b                   	pop    ebx
c001663b:	5e                   	pop    esi
c001663c:	5f                   	pop    edi
c001663d:	c3                   	ret    

c001663e <Phys::getPageState(unsigned long)>:
c001663e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016642:	8b 15 68 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b68
c0016648:	89 c8                	mov    eax,ecx
c001664a:	83 e1 07             	and    ecx,0x7
c001664d:	c1 e8 03             	shr    eax,0x3
c0016650:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016654:	d3 f8                	sar    eax,cl
c0016656:	83 e0 01             	and    eax,0x1
c0016659:	c3                   	ret    

c001665a <Phys::freePage(unsigned long)>:
c001665a:	53                   	push   ebx
c001665b:	83 ec 08             	sub    esp,0x8
c001665e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016662:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016668:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001666e:	76 41                	jbe    c00166b1 <Phys::freePage(unsigned long)+0x57>
c0016670:	c1 e8 0c             	shr    eax,0xc
c0016673:	50                   	push   eax
c0016674:	89 c3                	mov    ebx,eax
c0016676:	e8 c3 ff ff ff       	call   c001663e <Phys::getPageState(unsigned long)>
c001667b:	5a                   	pop    edx
c001667c:	84 c0                	test   al,al
c001667e:	74 20                	je     c00166a0 <Phys::freePage(unsigned long)+0x46>
c0016680:	83 ec 08             	sub    esp,0x8
c0016683:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016688:	6a 00                	push   0x0
c001668a:	83 e8 01             	sub    eax,0x1
c001668d:	53                   	push   ebx
c001668e:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016693:	e8 66 ff ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016698:	83 c4 10             	add    esp,0x10
c001669b:	83 c4 08             	add    esp,0x8
c001669e:	5b                   	pop    ebx
c001669f:	c3                   	ret    
c00166a0:	c7 44 24 10 c1 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc00311c1
c00166a8:	83 c4 08             	add    esp,0x8
c00166ab:	5b                   	pop    ebx
c00166ac:	e9 b1 9b 00 00       	jmp    c0020262 <KePanic(char const*)>
c00166b1:	68 00 10 00 00       	push   0x1000
c00166b6:	50                   	push   eax
c00166b7:	e8 07 ff ff ff       	call   c00165c3 <Phys::freeDMA(unsigned long, unsigned long)>
c00166bc:	59                   	pop    ecx
c00166bd:	5b                   	pop    ebx
c00166be:	83 c4 08             	add    esp,0x8
c00166c1:	5b                   	pop    ebx
c00166c2:	c3                   	ret    

c00166c3 <Phys::allocatePage()>:
c00166c3:	56                   	push   esi
c00166c4:	53                   	push   ebx
c00166c5:	83 ec 14             	sub    esp,0x14
c00166c8:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166ce:	89 f3                	mov    ebx,esi
c00166d0:	eb 0a                	jmp    c00166dc <Phys::allocatePage()+0x19>
c00166d2:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00166d8:	39 de                	cmp    esi,ebx
c00166da:	74 26                	je     c0016702 <Phys::allocatePage()+0x3f>
c00166dc:	53                   	push   ebx
c00166dd:	e8 5c ff ff ff       	call   c001663e <Phys::getPageState(unsigned long)>
c00166e2:	5a                   	pop    edx
c00166e3:	84 c0                	test   al,al
c00166e5:	74 67                	je     c001674e <Phys::allocatePage()+0x8b>
c00166e7:	83 c3 01             	add    ebx,0x1
c00166ea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00166f0:	75 e0                	jne    c00166d2 <Phys::allocatePage()+0xf>
c00166f2:	31 db                	xor    ebx,ebx
c00166f4:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00166fe:	39 de                	cmp    esi,ebx
c0016700:	75 da                	jne    c00166dc <Phys::allocatePage()+0x19>
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c001670a:	83 f0 01             	xor    eax,0x1
c001670d:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001671a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016720:	50                   	push   eax
c0016721:	e8 a8 27 00 00       	call   c0018ece <VAS::scanForEviction()>
c0016726:	83 c4 10             	add    esp,0x10
c0016729:	85 c0                	test   eax,eax
c001672b:	75 48                	jne    c0016775 <Phys::allocatePage()+0xb2>
c001672d:	83 ec 0c             	sub    esp,0xc
c0016730:	68 44 11 03 c0       	push   0xc0031144
c0016735:	e8 28 9b 00 00       	call   c0020262 <KePanic(char const*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016743:	53                   	push   ebx
c0016744:	e8 f5 fe ff ff       	call   c001663e <Phys::getPageState(unsigned long)>
c0016749:	5a                   	pop    edx
c001674a:	84 c0                	test   al,al
c001674c:	75 99                	jne    c00166e7 <Phys::allocatePage()+0x24>
c001674e:	6a 01                	push   0x1
c0016750:	53                   	push   ebx
c0016751:	e8 a8 fe ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016756:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c001675c:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016761:	83 c2 01             	add    edx,0x1
c0016764:	59                   	pop    ecx
c0016765:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001676b:	c1 e0 0c             	shl    eax,0xc
c001676e:	5b                   	pop    ebx
c001676f:	83 c4 14             	add    esp,0x14
c0016772:	5b                   	pop    ebx
c0016773:	5e                   	pop    esi
c0016774:	c3                   	ret    
c0016775:	83 ec 08             	sub    esp,0x8
c0016778:	89 c2                	mov    edx,eax
c001677a:	6a 01                	push   0x1
c001677c:	c1 ea 0c             	shr    edx,0xc
c001677f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016783:	52                   	push   edx
c0016784:	e8 75 fe ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016789:	83 c4 10             	add    esp,0x10
c001678c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016790:	eb dd                	jmp    c001676f <Phys::allocatePage()+0xac>

c0016792 <Phys::allocateContiguousPages(int)>:
c0016792:	57                   	push   edi
c0016793:	56                   	push   esi
c0016794:	53                   	push   ebx
c0016795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016799:	fa                   	cli    
c001679a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001679f:	31 db                	xor    ebx,ebx
c00167a1:	83 c0 01             	add    eax,0x1
c00167a4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167a9:	85 db                	test   ebx,ebx
c00167ab:	75 11                	jne    c00167be <Phys::allocateContiguousPages(int)+0x2c>
c00167ad:	e8 11 ff ff ff       	call   c00166c3 <Phys::allocatePage()>
c00167b2:	83 fe 01             	cmp    esi,0x1
c00167b5:	89 c7                	mov    edi,eax
c00167b7:	74 21                	je     c00167da <Phys::allocateContiguousPages(int)+0x48>
c00167b9:	bb 01 00 00 00       	mov    ebx,0x1
c00167be:	e8 00 ff ff ff       	call   c00166c3 <Phys::allocatePage()>
c00167c3:	89 da                	mov    edx,ebx
c00167c5:	c1 e2 0c             	shl    edx,0xc
c00167c8:	01 fa                	add    edx,edi
c00167ca:	39 c2                	cmp    edx,eax
c00167cc:	74 22                	je     c00167f0 <Phys::allocateContiguousPages(int)+0x5e>
c00167ce:	bb 01 00 00 00       	mov    ebx,0x1
c00167d3:	89 c7                	mov    edi,eax
c00167d5:	83 fe 01             	cmp    esi,0x1
c00167d8:	75 e4                	jne    c00167be <Phys::allocateContiguousPages(int)+0x2c>
c00167da:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167df:	83 e8 01             	sub    eax,0x1
c00167e2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167e7:	75 01                	jne    c00167ea <Phys::allocateContiguousPages(int)+0x58>
c00167e9:	fb                   	sti    
c00167ea:	89 f8                	mov    eax,edi
c00167ec:	5b                   	pop    ebx
c00167ed:	5e                   	pop    esi
c00167ee:	5f                   	pop    edi
c00167ef:	c3                   	ret    
c00167f0:	83 c3 01             	add    ebx,0x1
c00167f3:	39 f3                	cmp    ebx,esi
c00167f5:	75 b2                	jne    c00167a9 <Phys::allocateContiguousPages(int)+0x17>
c00167f7:	eb e1                	jmp    c00167da <Phys::allocateContiguousPages(int)+0x48>

c00167f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00167f9:	56                   	push   esi
c00167fa:	53                   	push   ebx
c00167fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167ff:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016805:	73 06                	jae    c001680d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016807:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c001680d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016811:	c1 eb 0c             	shr    ebx,0xc
c0016814:	c1 e8 0c             	shr    eax,0xc
c0016817:	39 d8                	cmp    eax,ebx
c0016819:	73 13                	jae    c001682e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001681b:	6a 00                	push   0x0
c001681d:	8d 70 01             	lea    esi,[eax+0x1]
c0016820:	50                   	push   eax
c0016821:	e8 d8 fd ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016826:	5a                   	pop    edx
c0016827:	89 f0                	mov    eax,esi
c0016829:	59                   	pop    ecx
c001682a:	39 f3                	cmp    ebx,esi
c001682c:	75 ed                	jne    c001681b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001682e:	5b                   	pop    ebx
c001682f:	5e                   	pop    esi
c0016830:	c3                   	ret    

c0016831 <Phys::physicalMemorySetup(unsigned int)>:
c0016831:	55                   	push   ebp
c0016832:	57                   	push   edi
c0016833:	56                   	push   esi
c0016834:	53                   	push   ebx
c0016835:	83 ec 40             	sub    esp,0x40
c0016838:	6a 10                	push   0x10
c001683a:	6a 00                	push   0x0
c001683c:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016841:	e8 aa 9c fe ff       	call   c00004f0 <memset>
c0016846:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001684a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001684f:	05 00 10 00 00       	add    eax,0x1000
c0016854:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016858:	5b                   	pop    ebx
c0016859:	31 db                	xor    ebx,ebx
c001685b:	5e                   	pop    esi
c001685c:	50                   	push   eax
c001685d:	68 d7 11 03 c0       	push   0xc00311d7
c0016862:	e8 e2 29 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0016867:	83 c4 10             	add    esp,0x10
c001686a:	83 ec 08             	sub    esp,0x8
c001686d:	6a 01                	push   0x1
c001686f:	53                   	push   ebx
c0016870:	83 c3 01             	add    ebx,0x1
c0016873:	e8 86 fd ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016878:	83 c4 10             	add    esp,0x10
c001687b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016881:	75 e7                	jne    c001686a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016883:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001688a:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016891:	c1 e0 08             	shl    eax,0x8
c0016894:	09 c2                	or     edx,eax
c0016896:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001689a:	0f 84 98 01 00 00    	je     c0016a38 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00168a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168a4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00168ac:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00168b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168b5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168bd:	eb 1c                	jmp    c00168db <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00168bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168c3:	83 c3 18             	add    ebx,0x18
c00168c6:	83 c6 01             	add    esi,0x1
c00168c9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00168cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00168d1:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00168d5:	0f 84 6d 01 00 00    	je     c0016a48 <Phys::physicalMemorySetup(unsigned int)+0x217>
c00168db:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00168de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168e1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00168e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00168ec:	8b 33                	mov    esi,DWORD PTR [ebx]
c00168ee:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00168f1:	01 f0                	add    eax,esi
c00168f3:	55                   	push   ebp
c00168f4:	11 fa                	adc    edx,edi
c00168f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00168fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016902:	51                   	push   ecx
c0016903:	56                   	push   esi
c0016904:	68 74 11 03 c0       	push   0xc0031174
c0016909:	e8 3b 29 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001690e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	09 f8                	or     eax,edi
c0016917:	0f 85 2b 01 00 00    	jne    c0016a48 <Phys::physicalMemorySetup(unsigned int)+0x217>
c001691d:	83 fd 01             	cmp    ebp,0x1
c0016920:	75 9d                	jne    c00168bf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016922:	ba 00 00 08 00       	mov    edx,0x80000
c0016927:	89 c1                	mov    ecx,eax
c0016929:	39 f2                	cmp    edx,esi
c001692b:	19 f9                	sbb    ecx,edi
c001692d:	0f 82 ab 00 00 00    	jb     c00169de <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016933:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016937:	89 c1                	mov    ecx,eax
c0016939:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001693d:	0f 83 9b 00 00 00    	jae    c00169de <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016943:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016948:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001694c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016950:	39 fa                	cmp    edx,edi
c0016952:	19 e8                	sbb    eax,ebp
c0016954:	0f 82 b0 01 00 00    	jb     c0016b0a <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001695a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001695e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016962:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016968:	ba ff 1f 00 00       	mov    edx,0x1fff
c001696d:	83 d5 ff             	adc    ebp,0xffffffff
c0016970:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016974:	31 c0                	xor    eax,eax
c0016976:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001697a:	39 fa                	cmp    edx,edi
c001697c:	89 c1                	mov    ecx,eax
c001697e:	19 e9                	sbb    ecx,ebp
c0016980:	0f 83 39 ff ff ff    	jae    c00168bf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016986:	be 00 00 08 00       	mov    esi,0x80000
c001698b:	83 ec 04             	sub    esp,0x4
c001698e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016992:	57                   	push   edi
c0016993:	56                   	push   esi
c0016994:	68 98 11 03 c0       	push   0xc0031198
c0016999:	e8 ab 28 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001699e:	5d                   	pop    ebp
c001699f:	58                   	pop    eax
c00169a0:	57                   	push   edi
c00169a1:	56                   	push   esi
c00169a2:	e8 52 fe ff ff       	call   c00167f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00169a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00169ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00169af:	83 c4 0c             	add    esp,0xc
c00169b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00169b6:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c00169bc:	01 d0                	add    eax,edx
c00169be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00169c5:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169ca:	52                   	push   edx
c00169cb:	50                   	push   eax
c00169cc:	68 fd 11 03 c0       	push   0xc00311fd
c00169d1:	e8 73 28 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00169d6:	83 c4 10             	add    esp,0x10
c00169d9:	e9 e1 fe ff ff       	jmp    c00168bf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00169de:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00169e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169ea:	39 ea                	cmp    edx,ebp
c00169ec:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00169f0:	0f 82 c9 fe ff ff    	jb     c00168bf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00169f6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00169fb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00169ff:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016a03:	0f 83 b6 fe ff ff    	jae    c00168bf <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016a09:	39 ee                	cmp    esi,ebp
c0016a0b:	89 f8                	mov    eax,edi
c0016a0d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016a11:	0f 83 74 ff ff ff    	jae    c001698b <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a1f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016a23:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016a27:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016a2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a33:	e9 53 ff ff ff       	jmp    c001698b <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	68 ef 11 03 c0       	push   0xc00311ef
c0016a40:	e8 1d 98 00 00       	call   c0020262 <KePanic(char const*)>
c0016a45:	83 c4 10             	add    esp,0x10
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	bb 60 00 00 00       	mov    ebx,0x60
c0016a50:	6a 00                	push   0x0
c0016a52:	6a 06                	push   0x6
c0016a54:	e8 a5 fb ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016a59:	58                   	pop    eax
c0016a5a:	5a                   	pop    edx
c0016a5b:	6a 00                	push   0x0
c0016a5d:	6a 07                	push   0x7
c0016a5f:	e8 9a fb ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016a64:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016a6a:	83 c4 10             	add    esp,0x10
c0016a6d:	83 c1 02             	add    ecx,0x2
c0016a70:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016a76:	83 ec 08             	sub    esp,0x8
c0016a79:	6a 00                	push   0x0
c0016a7b:	53                   	push   ebx
c0016a7c:	83 c3 01             	add    ebx,0x1
c0016a7f:	e8 7a fb ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016a8d:	75 e7                	jne    c0016a76 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016a8f:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a94:	bb 40 01 00 00       	mov    ebx,0x140
c0016a99:	83 c0 20             	add    eax,0x20
c0016a9c:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016aa1:	eb 26                	jmp    c0016ac9 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016aa3:	83 ec 08             	sub    esp,0x8
c0016aa6:	6a 00                	push   0x0
c0016aa8:	53                   	push   ebx
c0016aa9:	83 c3 01             	add    ebx,0x1
c0016aac:	e8 4d fb ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016ab1:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016ab6:	83 c4 10             	add    esp,0x10
c0016ab9:	83 c0 01             	add    eax,0x1
c0016abc:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016ac2:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ac7:	74 07                	je     c0016ad0 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016ac9:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016ace:	7e d3                	jle    c0016aa3 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016ad0:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016ad5:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ada:	7f 26                	jg     c0016b02 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016adc:	83 ec 08             	sub    esp,0x8
c0016adf:	6a 00                	push   0x0
c0016ae1:	53                   	push   ebx
c0016ae2:	83 c3 01             	add    ebx,0x1
c0016ae5:	e8 14 fb ff ff       	call   c00165fe <Phys::setPageState(unsigned long, bool)>
c0016aea:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	83 c0 01             	add    eax,0x1
c0016af5:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016afb:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b00:	75 d3                	jne    c0016ad5 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016b02:	83 c4 3c             	add    esp,0x3c
c0016b05:	5b                   	pop    ebx
c0016b06:	5e                   	pop    esi
c0016b07:	5f                   	pop    edi
c0016b08:	5d                   	pop    ebp
c0016b09:	c3                   	ret    
c0016b0a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016b12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b1a:	e9 3b fe ff ff       	jmp    c001695a <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016b1f:	90                   	nop

c0016b20 <Pipe::isAtty()>:
c0016b20:	31 c0                	xor    eax,eax
c0016b22:	c3                   	ret    
c0016b23:	90                   	nop

c0016b24 <Pipe::~Pipe()>:
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	ba 5c 12 03 c0       	mov    edx,0xc003125c
c0016b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b30:	89 10                	mov    DWORD PTR [eax],edx
c0016b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	50                   	push   eax
c0016b3a:	e8 69 11 00 00       	call   c0017ca8 <UnixFile::~UnixFile()>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	90                   	nop
c0016b43:	83 c4 0c             	add    esp,0xc
c0016b46:	c3                   	ret    
c0016b47:	90                   	nop

c0016b48 <Pipe::~Pipe()>:
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	83 ec 0c             	sub    esp,0xc
c0016b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b52:	e8 cd ff ff ff       	call   c0016b24 <Pipe::~Pipe()>
c0016b57:	83 c4 10             	add    esp,0x10
c0016b5a:	83 ec 08             	sub    esp,0x8
c0016b5d:	6a 20                	push   0x20
c0016b5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b63:	e8 b4 25 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	83 c4 0c             	add    esp,0xc
c0016b6e:	c3                   	ret    
c0016b6f:	90                   	nop

c0016b70 <Pipe::write(unsigned long long, void*, int*)>:
c0016b70:	55                   	push   ebp
c0016b71:	57                   	push   edi
c0016b72:	56                   	push   esi
c0016b73:	53                   	push   ebx
c0016b74:	83 ec 1c             	sub    esp,0x1c
c0016b77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b7f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016b82:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b86:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b8d:	89 d8                	mov    eax,ebx
c0016b8f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016b92:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016b96:	89 d6                	mov    esi,edx
c0016b98:	89 d7                	mov    edi,edx
c0016b9a:	c1 ff 1f             	sar    edi,0x1f
c0016b9d:	03 34 24             	add    esi,DWORD PTR [esp]
c0016ba0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016ba4:	c1 f8 1f             	sar    eax,0x1f
c0016ba7:	39 f3                	cmp    ebx,esi
c0016ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bb1:	19 f8                	sbb    eax,edi
c0016bb3:	b8 01 00 00 00       	mov    eax,0x1
c0016bb8:	72 6e                	jb     c0016c28 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016bba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bbd:	01 d0                	add    eax,edx
c0016bbf:	99                   	cdq    
c0016bc0:	f7 fb                	idiv   ebx
c0016bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bc6:	29 d3                	sub    ebx,edx
c0016bc8:	89 d7                	mov    edi,edx
c0016bca:	89 de                	mov    esi,ebx
c0016bcc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016bcf:	c1 fb 1f             	sar    ebx,0x1f
c0016bd2:	39 f2                	cmp    edx,esi
c0016bd4:	19 d8                	sbb    eax,ebx
c0016bd6:	b8 00 00 00 00       	mov    eax,0x0
c0016bdb:	72 04                	jb     c0016be1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016bdd:	89 d0                	mov    eax,edx
c0016bdf:	29 f0                	sub    eax,esi
c0016be1:	89 d3                	mov    ebx,edx
c0016be3:	29 c3                	sub    ebx,eax
c0016be5:	74 0b                	je     c0016bf2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016be7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016bea:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016bee:	89 d9                	mov    ecx,ebx
c0016bf0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bf2:	85 c0                	test   eax,eax
c0016bf4:	74 0d                	je     c0016c03 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016bf6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016bfa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016bfd:	89 de                	mov    esi,ebx
c0016bff:	89 c1                	mov    ecx,eax
c0016c01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c03:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016c06:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c0b:	75 10                	jne    c0016c1d <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016c0d:	83 ec 0c             	sub    esp,0xc
c0016c10:	68 19 12 03 c0       	push   0xc0031219
c0016c15:	e8 48 96 00 00       	call   c0020262 <KePanic(char const*)>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c21:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c24:	89 08                	mov    DWORD PTR [eax],ecx
c0016c26:	31 c0                	xor    eax,eax
c0016c28:	83 c4 1c             	add    esp,0x1c
c0016c2b:	5b                   	pop    ebx
c0016c2c:	5e                   	pop    esi
c0016c2d:	5f                   	pop    edi
c0016c2e:	5d                   	pop    ebp
c0016c2f:	c3                   	ret    

c0016c30 <Pipe::read(unsigned long long, void*, int*)>:
c0016c30:	55                   	push   ebp
c0016c31:	57                   	push   edi
c0016c32:	56                   	push   esi
c0016c33:	53                   	push   ebx
c0016c34:	83 ec 1c             	sub    esp,0x1c
c0016c37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c3b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c3f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c43:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c46:	89 c8                	mov    eax,ecx
c0016c48:	99                   	cdq    
c0016c49:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c4d:	74 24                	je     c0016c73 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c4f:	39 f9                	cmp    ecx,edi
c0016c51:	89 d1                	mov    ecx,edx
c0016c53:	19 f1                	sbb    ecx,esi
c0016c55:	73 1c                	jae    c0016c73 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c57:	fa                   	cli    
c0016c58:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c5e:	e8 f5 e5 00 00       	call   c0025258 <schedule()>
c0016c63:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c68:	48                   	dec    eax
c0016c69:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c6e:	75 d3                	jne    c0016c43 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c70:	fb                   	sti    
c0016c71:	eb d0                	jmp    c0016c43 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c73:	39 f8                	cmp    eax,edi
c0016c75:	89 d1                	mov    ecx,edx
c0016c77:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c7a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016c7e:	19 f1                	sbb    ecx,esi
c0016c80:	73 07                	jae    c0016c89 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016c82:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c89:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016c8c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016c8f:	29 f7                	sub    edi,esi
c0016c91:	89 f8                	mov    eax,edi
c0016c93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016c97:	99                   	cdq    
c0016c98:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016c9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9f:	19 d0                	sbb    eax,edx
c0016ca1:	73 07                	jae    c0016caa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016ca6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016caa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016cad:	89 ea                	mov    edx,ebp
c0016caf:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016cb3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cb8:	74 0d                	je     c0016cc7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016cba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016cbd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016cc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cc7:	85 d2                	test   edx,edx
c0016cc9:	74 11                	je     c0016cdc <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016ccb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ccf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016cd2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cd6:	89 d1                	mov    ecx,edx
c0016cd8:	89 c7                	mov    edi,eax
c0016cda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016cdf:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016ce2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016ce5:	99                   	cdq    
c0016ce6:	89 f7                	mov    edi,esi
c0016ce8:	03 04 24             	add    eax,DWORD PTR [esp]
c0016ceb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016cef:	c1 ff 1f             	sar    edi,0x1f
c0016cf2:	57                   	push   edi
c0016cf3:	56                   	push   esi
c0016cf4:	52                   	push   edx
c0016cf5:	50                   	push   eax
c0016cf6:	e8 55 7a 01 00       	call   c002e750 <__umoddi3>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016d01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016d06:	75 10                	jne    c0016d18 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	68 36 12 03 c0       	push   0xc0031236
c0016d10:	e8 4d 95 00 00       	call   c0020262 <KePanic(char const*)>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d1c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016d1f:	89 10                	mov    DWORD PTR [eax],edx
c0016d21:	83 c4 1c             	add    esp,0x1c
c0016d24:	31 c0                	xor    eax,eax
c0016d26:	5b                   	pop    ebx
c0016d27:	5e                   	pop    esi
c0016d28:	5f                   	pop    edi
c0016d29:	5d                   	pop    ebp
c0016d2a:	c3                   	ret    
c0016d2b:	90                   	nop

c0016d2c <Pipe::Pipe(int)>:
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d33:	83 ec 08             	sub    esp,0x8
c0016d36:	6a 00                	push   0x0
c0016d38:	50                   	push   eax
c0016d39:	e8 84 0d 00 00       	call   c0017ac2 <UnixFile::UnixFile(int)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	ba 5c 12 03 c0       	mov    edx,0xc003125c
c0016d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4a:	89 10                	mov    DWORD PTR [eax],edx
c0016d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d66:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	50                   	push   eax
c0016d75:	e8 40 f6 ff ff       	call   c00163ba <malloc>
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	89 c2                	mov    edx,eax
c0016d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016d8e:	90                   	nop
c0016d8f:	83 c4 0c             	add    esp,0xc
c0016d92:	c3                   	ret    
c0016d93:	90                   	nop

c0016d94 <VgaText::isAtty()>:
c0016d94:	b0 01                	mov    al,0x1
c0016d96:	c3                   	ret    
c0016d97:	90                   	nop

c0016d98 <VgaText::~VgaText()>:
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	ba a4 12 03 c0       	mov    edx,0xc00312a4
c0016da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da4:	89 10                	mov    DWORD PTR [eax],edx
c0016da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	50                   	push   eax
c0016dae:	e8 f5 0e 00 00       	call   c0017ca8 <UnixFile::~UnixFile()>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	90                   	nop
c0016db7:	83 c4 0c             	add    esp,0xc
c0016dba:	c3                   	ret    
c0016dbb:	90                   	nop

c0016dbc <VgaText::~VgaText()>:
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	83 ec 0c             	sub    esp,0xc
c0016dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc6:	e8 cd ff ff ff       	call   c0016d98 <VgaText::~VgaText()>
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	83 ec 08             	sub    esp,0x8
c0016dd1:	68 84 01 00 00       	push   0x184
c0016dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dda:	e8 3d 23 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	83 c4 0c             	add    esp,0xc
c0016de5:	c3                   	ret    

c0016de6 <VgaText::read(unsigned long long, void*, int*)>:
c0016de6:	83 ec 10             	sub    esp,0x10
c0016de9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ded:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016df1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df5:	e8 ba 53 00 00       	call   c001c1b4 <readKeyboard(VgaText*, char*, unsigned long)>
c0016dfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016dfe:	89 02                	mov    DWORD PTR [edx],eax
c0016e00:	31 c0                	xor    eax,eax
c0016e02:	83 c4 1c             	add    esp,0x1c
c0016e05:	c3                   	ret    

c0016e06 <setTerminalScrollLock(bool)>:
c0016e06:	c3                   	ret    

c0016e07 <doTerminalCycle()>:
c0016e07:	c3                   	ret    

c0016e08 <addToTerminalCycle(VgaText*)>:
c0016e08:	c3                   	ret    

c0016e09 <scrollTerminalScrollLock(int)>:
c0016e09:	c3                   	ret    

c0016e0a <VgaText::updateTitle()>:
c0016e0a:	c3                   	ret    
c0016e0b:	90                   	nop

c0016e0c <VgaText::load()>:
c0016e0c:	c3                   	ret    
c0016e0d:	90                   	nop

c0016e0e <VgaText::updateCursor()>:
c0016e0e:	83 ec 14             	sub    esp,0x14
c0016e11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e15:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016e18:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016e1b:	e8 44 0f 01 00       	call   c0027d64 <HalConsoleCursorUpdate(int, int)>
c0016e20:	83 c4 1c             	add    esp,0x1c
c0016e23:	c3                   	ret    

c0016e24 <VgaText::doANSI_SGR(int)>:
c0016e24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e2c:	85 d2                	test   edx,edx
c0016e2e:	75 0b                	jne    c0016e3b <VgaText::doANSI_SGR(int)+0x17>
c0016e30:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e33:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e36:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e39:	eb 59                	jmp    c0016e94 <VgaText::doANSI_SGR(int)+0x70>
c0016e3b:	83 fa 07             	cmp    edx,0x7
c0016e3e:	75 0b                	jne    c0016e4b <VgaText::doANSI_SGR(int)+0x27>
c0016e40:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e43:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e46:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e49:	eb 49                	jmp    c0016e94 <VgaText::doANSI_SGR(int)+0x70>
c0016e4b:	83 fa 1b             	cmp    edx,0x1b
c0016e4e:	74 e0                	je     c0016e30 <VgaText::doANSI_SGR(int)+0xc>
c0016e50:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e53:	83 f9 07             	cmp    ecx,0x7
c0016e56:	77 09                	ja     c0016e61 <VgaText::doANSI_SGR(int)+0x3d>
c0016e58:	8b 14 8d a0 3b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc460]
c0016e5f:	eb 20                	jmp    c0016e81 <VgaText::doANSI_SGR(int)+0x5d>
c0016e61:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e64:	83 f9 07             	cmp    ecx,0x7
c0016e67:	77 09                	ja     c0016e72 <VgaText::doANSI_SGR(int)+0x4e>
c0016e69:	8b 14 8d a0 3b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc460]
c0016e70:	eb 22                	jmp    c0016e94 <VgaText::doANSI_SGR(int)+0x70>
c0016e72:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e75:	83 f9 07             	cmp    ecx,0x7
c0016e78:	77 0b                	ja     c0016e85 <VgaText::doANSI_SGR(int)+0x61>
c0016e7a:	8b 14 95 58 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc5a8]
c0016e81:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e84:	c3                   	ret    
c0016e85:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016e88:	83 f9 07             	cmp    ecx,0x7
c0016e8b:	77 0a                	ja     c0016e97 <VgaText::doANSI_SGR(int)+0x73>
c0016e8d:	8b 14 95 30 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc5d0]
c0016e94:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016e97:	c3                   	ret    

c0016e98 <VgaText::setDefaultBgColour(VgaColour)>:
c0016e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ea0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ea3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016ea6:	c3                   	ret    
c0016ea7:	90                   	nop

c0016ea8 <VgaText::setDefaultFgColour(VgaColour)>:
c0016ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eb0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016eb3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016eb6:	c3                   	ret    
c0016eb7:	90                   	nop

c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016eb8:	53                   	push   ebx
c0016eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016ebd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016ec1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ec5:	51                   	push   ecx
c0016ec6:	e8 cd ff ff ff       	call   c0016e98 <VgaText::setDefaultBgColour(VgaColour)>
c0016ecb:	58                   	pop    eax
c0016ecc:	5a                   	pop    edx
c0016ecd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016ed1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ed5:	5b                   	pop    ebx
c0016ed6:	eb d0                	jmp    c0016ea8 <VgaText::setDefaultFgColour(VgaColour)>

c0016ed8 <VgaText::setTitleTextColour(VgaColour)>:
c0016ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016edc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ee0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016ee3:	c3                   	ret    

c0016ee4 <VgaText::setTitleColour(VgaColour)>:
c0016ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016eef:	c3                   	ret    

c0016ef0 <VgaText::setTitle(char*)>:
c0016ef0:	c3                   	ret    
c0016ef1:	90                   	nop

c0016ef2 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ef6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016efb:	83 e0 0f             	and    eax,0xf
c0016efe:	c1 e2 04             	shl    edx,0x4
c0016f01:	09 d0                	or     eax,edx
c0016f03:	c3                   	ret    

c0016f04 <VgaText::scrollScreen()>:
c0016f04:	55                   	push   ebp
c0016f05:	57                   	push   edi
c0016f06:	56                   	push   esi
c0016f07:	be 01 00 00 00       	mov    esi,0x1
c0016f0c:	53                   	push   ebx
c0016f0d:	83 ec 0c             	sub    esp,0xc
c0016f10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f14:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016f17:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016f1d:	31 ff                	xor    edi,edi
c0016f1f:	01 e9                	add    ecx,ebp
c0016f21:	8a 01                	mov    al,BYTE PTR [ecx]
c0016f23:	83 fe 18             	cmp    esi,0x18
c0016f26:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016f2c:	75 20                	jne    c0016f4e <VgaText::scrollScreen()+0x4a>
c0016f2e:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f34:	74 15                	je     c0016f4b <VgaText::scrollScreen()+0x47>
c0016f36:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f3a:	50                   	push   eax
c0016f3b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f3f:	50                   	push   eax
c0016f40:	e8 ad ff ff ff       	call   c0016ef2 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f45:	5a                   	pop    edx
c0016f46:	5a                   	pop    edx
c0016f47:	88 01                	mov    BYTE PTR [ecx],al
c0016f49:	eb 03                	jmp    c0016f4e <VgaText::scrollScreen()+0x4a>
c0016f4b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f4e:	47                   	inc    edi
c0016f4f:	41                   	inc    ecx
c0016f50:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f56:	75 c9                	jne    c0016f21 <VgaText::scrollScreen()+0x1d>
c0016f58:	46                   	inc    esi
c0016f59:	83 fe 19             	cmp    esi,0x19
c0016f5c:	75 b9                	jne    c0016f17 <VgaText::scrollScreen()+0x13>
c0016f5e:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f64:	75 1f                	jne    c0016f85 <VgaText::scrollScreen()+0x81>
c0016f66:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f6a:	74 05                	je     c0016f71 <VgaText::scrollScreen()+0x6d>
c0016f6c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f6f:	eb 14                	jmp    c0016f85 <VgaText::scrollScreen()+0x81>
c0016f71:	50                   	push   eax
c0016f72:	50                   	push   eax
c0016f73:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f77:	50                   	push   eax
c0016f78:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f7c:	50                   	push   eax
c0016f7d:	e8 76 0c 01 00       	call   c0027bf8 <HalConsoleScroll(int, int)>
c0016f82:	83 c4 10             	add    esp,0x10
c0016f85:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016f89:	83 c4 0c             	add    esp,0xc
c0016f8c:	5b                   	pop    ebx
c0016f8d:	5e                   	pop    esi
c0016f8e:	5f                   	pop    edi
c0016f8f:	5d                   	pop    ebp
c0016f90:	e9 79 fe ff ff       	jmp    c0016e0e <VgaText::updateCursor()>
c0016f95:	90                   	nop

c0016f96 <VgaText::combineCharAndColour(char, unsigned char)>:
c0016f96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016f9b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016fa0:	c1 e0 08             	shl    eax,0x8
c0016fa3:	09 d0                	or     eax,edx
c0016fa5:	c3                   	ret    

c0016fa6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016fa6:	55                   	push   ebp
c0016fa7:	57                   	push   edi
c0016fa8:	56                   	push   esi
c0016fa9:	53                   	push   ebx
c0016faa:	83 ec 1c             	sub    esp,0x1c
c0016fad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fbd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fc1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fc5:	0f b6 c3             	movzx  eax,bl
c0016fc8:	50                   	push   eax
c0016fc9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016fce:	50                   	push   eax
c0016fcf:	e8 1e ff ff ff       	call   c0016ef2 <VgaText::combineColours(unsigned char, unsigned char)>
c0016fd4:	5a                   	pop    edx
c0016fd5:	0f b6 c0             	movzx  eax,al
c0016fd8:	59                   	pop    ecx
c0016fd9:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016fde:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fe2:	50                   	push   eax
c0016fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016fe7:	e8 aa ff ff ff       	call   c0016f96 <VgaText::combineCharAndColour(char, unsigned char)>
c0016fec:	5a                   	pop    edx
c0016fed:	6b d7 50             	imul   edx,edi,0x50
c0016ff0:	59                   	pop    ecx
c0016ff1:	01 f2                	add    edx,esi
c0016ff3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016ff6:	0f b7 d2             	movzx  edx,dx
c0016ff9:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0016ffd:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017003:	75 28                	jne    c001702d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017009:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001700d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017011:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017015:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017019:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001701d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017021:	83 c4 1c             	add    esp,0x1c
c0017024:	5b                   	pop    ebx
c0017025:	5e                   	pop    esi
c0017026:	5f                   	pop    edi
c0017027:	5d                   	pop    ebp
c0017028:	e9 d3 0c 01 00       	jmp    c0027d00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001702d:	83 c4 1c             	add    esp,0x1c
c0017030:	5b                   	pop    ebx
c0017031:	5e                   	pop    esi
c0017032:	5f                   	pop    edi
c0017033:	5d                   	pop    ebp
c0017034:	c3                   	ret    
c0017035:	90                   	nop

c0017036 <VgaText::getCursorX()>:
c0017036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001703a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001703d:	c3                   	ret    

c001703e <VgaText::getCursorY()>:
c001703e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017042:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017045:	c3                   	ret    

c0017046 <VgaText::setCursor(int, int)>:
c0017046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001704a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001704e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017055:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017058:	e9 b1 fd ff ff       	jmp    c0016e0e <VgaText::updateCursor()>

c001705d <setActiveTerminal(VgaText*)>:
c001705d:	53                   	push   ebx
c001705e:	83 ec 08             	sub    esp,0x8
c0017061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017065:	85 db                	test   ebx,ebx
c0017067:	75 11                	jne    c001707a <setActiveTerminal(VgaText*)+0x1d>
c0017069:	c7 44 24 10 70 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031270
c0017071:	83 c4 08             	add    esp,0x8
c0017074:	5b                   	pop    ebx
c0017075:	e9 e8 91 00 00       	jmp    c0020262 <KePanic(char const*)>
c001707a:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001707f:	85 c0                	test   eax,eax
c0017081:	74 0c                	je     c001708f <setActiveTerminal(VgaText*)+0x32>
c0017083:	83 ec 0c             	sub    esp,0xc
c0017086:	50                   	push   eax
c0017087:	e8 82 fd ff ff       	call   c0016e0e <VgaText::updateCursor()>
c001708c:	83 c4 10             	add    esp,0x10
c001708f:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0017095:	50                   	push   eax
c0017096:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017099:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001709c:	53                   	push   ebx
c001709d:	e8 a4 ff ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c00170a2:	83 c4 18             	add    esp,0x18
c00170a5:	5b                   	pop    ebx
c00170a6:	c3                   	ret    
c00170a7:	90                   	nop

c00170a8 <VgaText::clearScreen()>:
c00170a8:	57                   	push   edi
c00170a9:	56                   	push   esi
c00170aa:	31 f6                	xor    esi,esi
c00170ac:	53                   	push   ebx
c00170ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170b1:	52                   	push   edx
c00170b2:	6a 00                	push   0x0
c00170b4:	6a 00                	push   0x0
c00170b6:	53                   	push   ebx
c00170b7:	e8 8a ff ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c00170bc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00170c9:	7e 20                	jle    c00170eb <VgaText::clearScreen()+0x43>
c00170cb:	31 ff                	xor    edi,edi
c00170cd:	50                   	push   eax
c00170ce:	50                   	push   eax
c00170cf:	56                   	push   esi
c00170d0:	57                   	push   edi
c00170d1:	47                   	inc    edi
c00170d2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170d5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170d8:	6a 20                	push   0x20
c00170da:	53                   	push   ebx
c00170db:	e8 c6 fe ff ff       	call   c0016fa6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00170e0:	83 c4 20             	add    esp,0x20
c00170e3:	83 ff 50             	cmp    edi,0x50
c00170e6:	75 e5                	jne    c00170cd <VgaText::clearScreen()+0x25>
c00170e8:	46                   	inc    esi
c00170e9:	eb db                	jmp    c00170c6 <VgaText::clearScreen()+0x1e>
c00170eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00170f2:	5b                   	pop    ebx
c00170f3:	5e                   	pop    esi
c00170f4:	5f                   	pop    edi
c00170f5:	c3                   	ret    

c00170f6 <VgaText::setCursorX(int)>:
c00170f6:	83 ec 10             	sub    esp,0x10
c00170f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170fd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017104:	50                   	push   eax
c0017105:	e8 3c ff ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c001710a:	83 c4 1c             	add    esp,0x1c
c001710d:	c3                   	ret    

c001710e <VgaText::setCursorY(int)>:
c001710e:	83 ec 10             	sub    esp,0x10
c0017111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017119:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001711c:	50                   	push   eax
c001711d:	e8 24 ff ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c0017122:	83 c4 1c             	add    esp,0x1c
c0017125:	c3                   	ret    

c0017126 <VgaText::incrementCursor(bool)>:
c0017126:	56                   	push   esi
c0017127:	53                   	push   ebx
c0017128:	51                   	push   ecx
c0017129:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001712d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017131:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017134:	40                   	inc    eax
c0017135:	83 f8 50             	cmp    eax,0x50
c0017138:	74 05                	je     c001713f <VgaText::incrementCursor(bool)+0x19>
c001713a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001713d:	eb 24                	jmp    c0017163 <VgaText::incrementCursor(bool)+0x3d>
c001713f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017149:	8d 50 01             	lea    edx,[eax+0x1]
c001714c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001714f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017152:	75 0f                	jne    c0017163 <VgaText::incrementCursor(bool)+0x3d>
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001715a:	53                   	push   ebx
c001715b:	e8 a4 fd ff ff       	call   c0016f04 <VgaText::scrollScreen()>
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	89 f0                	mov    eax,esi
c0017165:	84 c0                	test   al,al
c0017167:	74 0c                	je     c0017175 <VgaText::incrementCursor(bool)+0x4f>
c0017169:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001716d:	5a                   	pop    edx
c001716e:	5b                   	pop    ebx
c001716f:	5e                   	pop    esi
c0017170:	e9 99 fc ff ff       	jmp    c0016e0e <VgaText::updateCursor()>
c0017175:	58                   	pop    eax
c0017176:	5b                   	pop    ebx
c0017177:	5e                   	pop    esi
c0017178:	c3                   	ret    
c0017179:	90                   	nop

c001717a <VgaText::decrementCursor(bool)>:
c001717a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001717e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017182:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017185:	85 c0                	test   eax,eax
c0017187:	74 04                	je     c001718d <VgaText::decrementCursor(bool)+0x13>
c0017189:	48                   	dec    eax
c001718a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001718d:	84 c9                	test   cl,cl
c001718f:	74 09                	je     c001719a <VgaText::decrementCursor(bool)+0x20>
c0017191:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017195:	e9 74 fc ff ff       	jmp    c0016e0e <VgaText::updateCursor()>
c001719a:	c3                   	ret    
c001719b:	90                   	nop

c001719c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001719c:	53                   	push   ebx
c001719d:	83 ec 08             	sub    esp,0x8
c00171a0:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00171a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171b1:	83 f8 07             	cmp    eax,0x7
c00171b4:	75 21                	jne    c00171d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00171b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171be:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00171c6:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00171ce:	83 c4 08             	add    esp,0x8
c00171d1:	5b                   	pop    ebx
c00171d2:	e9 18 3b 00 00       	jmp    c001acef <Krnl::beep(int, int, bool)>
c00171d7:	83 f8 0d             	cmp    eax,0xd
c00171da:	75 09                	jne    c00171e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171e3:	eb 2d                	jmp    c0017212 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00171e5:	83 f8 0a             	cmp    eax,0xa
c00171e8:	75 31                	jne    c001721b <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00171ea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00171ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171f4:	8d 50 01             	lea    edx,[eax+0x1]
c00171f7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00171fa:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00171fd:	75 0f                	jne    c001720e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00171ff:	83 ec 0c             	sub    esp,0xc
c0017202:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017205:	53                   	push   ebx
c0017206:	e8 f9 fc ff ff       	call   c0016f04 <VgaText::scrollScreen()>
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017212:	83 c4 08             	add    esp,0x8
c0017215:	5b                   	pop    ebx
c0017216:	e9 f3 fb ff ff       	jmp    c0016e0e <VgaText::updateCursor()>
c001721b:	83 f8 08             	cmp    eax,0x8
c001721e:	75 25                	jne    c0017245 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017220:	50                   	push   eax
c0017221:	50                   	push   eax
c0017222:	6a 01                	push   0x1
c0017224:	53                   	push   ebx
c0017225:	e8 50 ff ff ff       	call   c001717a <VgaText::decrementCursor(bool)>
c001722a:	5a                   	pop    edx
c001722b:	59                   	pop    ecx
c001722c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001722f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017232:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017235:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017238:	6a 20                	push   0x20
c001723a:	53                   	push   ebx
c001723b:	e8 66 fd ff ff       	call   c0016fa6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017240:	83 c4 28             	add    esp,0x28
c0017243:	5b                   	pop    ebx
c0017244:	c3                   	ret    
c0017245:	83 ec 08             	sub    esp,0x8
c0017248:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001724b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001724e:	51                   	push   ecx
c001724f:	52                   	push   edx
c0017250:	50                   	push   eax
c0017251:	53                   	push   ebx
c0017252:	e8 4f fd ff ff       	call   c0016fa6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017257:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001725b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017263:	83 c4 28             	add    esp,0x28
c0017266:	5b                   	pop    ebx
c0017267:	e9 ba fe ff ff       	jmp    c0017126 <VgaText::incrementCursor(bool)>

c001726c <VgaText::putchar(char)>:
c001726c:	57                   	push   edi
c001726d:	56                   	push   esi
c001726e:	53                   	push   ebx
c001726f:	83 ec 10             	sub    esp,0x10
c0017272:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017276:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001727a:	89 f8                	mov    eax,edi
c001727c:	0f be c0             	movsx  eax,al
c001727f:	83 f8 5b             	cmp    eax,0x5b
c0017282:	75 18                	jne    c001729c <VgaText::putchar(char)+0x30>
c0017284:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017288:	74 20                	je     c00172aa <VgaText::putchar(char)+0x3e>
c001728a:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017290:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0017297:	e9 c1 00 00 00       	jmp    c001735d <VgaText::putchar(char)+0xf1>
c001729c:	83 f8 1b             	cmp    eax,0x1b
c001729f:	75 09                	jne    c00172aa <VgaText::putchar(char)+0x3e>
c00172a1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00172a5:	e9 b3 00 00 00       	jmp    c001735d <VgaText::putchar(char)+0xf1>
c00172aa:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00172ad:	84 c9                	test   cl,cl
c00172af:	0f 84 98 00 00 00    	je     c001734d <VgaText::putchar(char)+0xe1>
c00172b5:	8d 77 c0             	lea    esi,[edi-0x40]
c00172b8:	89 f2                	mov    edx,esi
c00172ba:	80 fa 3e             	cmp    dl,0x3e
c00172bd:	77 78                	ja     c0017337 <VgaText::putchar(char)+0xcb>
c00172bf:	83 f8 6d             	cmp    eax,0x6d
c00172c2:	75 47                	jne    c001730b <VgaText::putchar(char)+0x9f>
c00172c4:	31 f6                	xor    esi,esi
c00172c6:	31 d2                	xor    edx,edx
c00172c8:	31 c0                	xor    eax,eax
c00172ca:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00172cd:	7e 2d                	jle    c00172fc <VgaText::putchar(char)+0x90>
c00172cf:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00172d4:	83 fa 3b             	cmp    edx,0x3b
c00172d7:	75 17                	jne    c00172f0 <VgaText::putchar(char)+0x84>
c00172d9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00172dd:	50                   	push   eax
c00172de:	53                   	push   ebx
c00172df:	e8 40 fb ff ff       	call   c0016e24 <VgaText::doANSI_SGR(int)>
c00172e4:	59                   	pop    ecx
c00172e5:	31 d2                	xor    edx,edx
c00172e7:	5f                   	pop    edi
c00172e8:	31 c0                	xor    eax,eax
c00172ea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00172ee:	eb 09                	jmp    c00172f9 <VgaText::putchar(char)+0x8d>
c00172f0:	6b c0 0a             	imul   eax,eax,0xa
c00172f3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00172f7:	88 ca                	mov    dl,cl
c00172f9:	46                   	inc    esi
c00172fa:	eb ce                	jmp    c00172ca <VgaText::putchar(char)+0x5e>
c00172fc:	84 d2                	test   dl,dl
c00172fe:	74 2f                	je     c001732f <VgaText::putchar(char)+0xc3>
c0017300:	50                   	push   eax
c0017301:	53                   	push   ebx
c0017302:	e8 1d fb ff ff       	call   c0016e24 <VgaText::doANSI_SGR(int)>
c0017307:	58                   	pop    eax
c0017308:	5a                   	pop    edx
c0017309:	eb 24                	jmp    c001732f <VgaText::putchar(char)+0xc3>
c001730b:	83 f8 4a             	cmp    eax,0x4a
c001730e:	75 1f                	jne    c001732f <VgaText::putchar(char)+0xc3>
c0017310:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017314:	75 19                	jne    c001732f <VgaText::putchar(char)+0xc3>
c0017316:	83 ec 0c             	sub    esp,0xc
c0017319:	53                   	push   ebx
c001731a:	e8 89 fd ff ff       	call   c00170a8 <VgaText::clearScreen()>
c001731f:	83 c4 0c             	add    esp,0xc
c0017322:	6a 00                	push   0x0
c0017324:	6a 00                	push   0x0
c0017326:	53                   	push   ebx
c0017327:	e8 1a fd ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c001732c:	83 c4 10             	add    esp,0x10
c001732f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017335:	eb 26                	jmp    c001735d <VgaText::putchar(char)+0xf1>
c0017337:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001733a:	83 f8 0e             	cmp    eax,0xe
c001733d:	7f 1e                	jg     c001735d <VgaText::putchar(char)+0xf1>
c001733f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017342:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017345:	89 f9                	mov    ecx,edi
c0017347:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001734b:	eb 10                	jmp    c001735d <VgaText::putchar(char)+0xf1>
c001734d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017350:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017353:	50                   	push   eax
c0017354:	53                   	push   ebx
c0017355:	e8 42 fe ff ff       	call   c001719c <VgaText::putchar(char, VgaColour, VgaColour)>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	5b                   	pop    ebx
c0017361:	5e                   	pop    esi
c0017362:	5f                   	pop    edi
c0017363:	c3                   	ret    

c0017364 <VgaText::putx(unsigned int)>:
c0017364:	57                   	push   edi
c0017365:	b9 11 00 00 00       	mov    ecx,0x11
c001736a:	56                   	push   esi
c001736b:	be 7e 12 03 c0       	mov    esi,0xc003127e
c0017370:	53                   	push   ebx
c0017371:	83 ec 20             	sub    esp,0x20
c0017374:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017378:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001737c:	fc                   	cld    
c001737d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001737f:	be 08 00 00 00       	mov    esi,0x8
c0017384:	50                   	push   eax
c0017385:	50                   	push   eax
c0017386:	89 d8                	mov    eax,ebx
c0017388:	c1 e3 04             	shl    ebx,0x4
c001738b:	c1 e8 1c             	shr    eax,0x1c
c001738e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0017393:	50                   	push   eax
c0017394:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017398:	e8 cf fe ff ff       	call   c001726c <VgaText::putchar(char)>
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	4e                   	dec    esi
c00173a1:	75 e1                	jne    c0017384 <VgaText::putx(unsigned int)+0x20>
c00173a3:	83 c4 20             	add    esp,0x20
c00173a6:	5b                   	pop    ebx
c00173a7:	5e                   	pop    esi
c00173a8:	5f                   	pop    edi
c00173a9:	c3                   	ret    

c00173aa <VgaText::puts(char const*)>:
c00173aa:	53                   	push   ebx
c00173ab:	83 ec 08             	sub    esp,0x8
c00173ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00173b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00173b5:	85 c0                	test   eax,eax
c00173b7:	74 12                	je     c00173cb <VgaText::puts(char const*)+0x21>
c00173b9:	43                   	inc    ebx
c00173ba:	51                   	push   ecx
c00173bb:	51                   	push   ecx
c00173bc:	50                   	push   eax
c00173bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173c1:	e8 a6 fe ff ff       	call   c001726c <VgaText::putchar(char)>
c00173c6:	83 c4 10             	add    esp,0x10
c00173c9:	eb e7                	jmp    c00173b2 <VgaText::puts(char const*)+0x8>
c00173cb:	83 c4 08             	add    esp,0x8
c00173ce:	5b                   	pop    ebx
c00173cf:	c3                   	ret    

c00173d0 <VgaText::write(unsigned long long, void*, int*)>:
c00173d0:	55                   	push   ebp
c00173d1:	57                   	push   edi
c00173d2:	56                   	push   esi
c00173d3:	53                   	push   ebx
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173db:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00173df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173e3:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173ea:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00173ed:	39 eb                	cmp    ebx,ebp
c00173ef:	74 13                	je     c0017404 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00173f1:	43                   	inc    ebx
c00173f2:	50                   	push   eax
c00173f3:	50                   	push   eax
c00173f4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00173f8:	50                   	push   eax
c00173f9:	56                   	push   esi
c00173fa:	e8 6d fe ff ff       	call   c001726c <VgaText::putchar(char)>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	eb e9                	jmp    c00173ed <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017404:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001740b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001740f:	89 38                	mov    DWORD PTR [eax],edi
c0017411:	83 c4 0c             	add    esp,0xc
c0017414:	31 c0                	xor    eax,eax
c0017416:	5b                   	pop    ebx
c0017417:	5e                   	pop    esi
c0017418:	5f                   	pop    edi
c0017419:	5d                   	pop    ebp
c001741a:	c3                   	ret    
c001741b:	90                   	nop

c001741c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001741c:	55                   	push   ebp
c001741d:	57                   	push   edi
c001741e:	56                   	push   esi
c001741f:	53                   	push   ebx
c0017420:	83 ec 0c             	sub    esp,0xc
c0017423:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017427:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001742c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017433:	50                   	push   eax
c0017434:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017439:	50                   	push   eax
c001743a:	e8 b3 fa ff ff       	call   c0016ef2 <VgaText::combineColours(unsigned char, unsigned char)>
c001743f:	5a                   	pop    edx
c0017440:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017444:	59                   	pop    ecx
c0017445:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017448:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001744c:	0f b7 f6             	movzx  esi,si
c001744f:	0f b6 e8             	movzx  ebp,al
c0017452:	01 f6                	add    esi,esi
c0017454:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017457:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001745a:	85 c0                	test   eax,eax
c001745c:	0f 84 ef 00 00 00    	je     c0017551 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017462:	83 f8 0d             	cmp    eax,0xd
c0017465:	75 0c                	jne    c0017473 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017467:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001746e:	e9 d8 00 00 00       	jmp    c001754b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017473:	83 f8 0a             	cmp    eax,0xa
c0017476:	75 44                	jne    c00174bc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017478:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001747b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017482:	8d 48 01             	lea    ecx,[eax+0x1]
c0017485:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0017488:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001748b:	75 0f                	jne    c001749c <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c001748d:	83 ec 0c             	sub    esp,0xc
c0017490:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017493:	53                   	push   ebx
c0017494:	e8 6b fa ff ff       	call   c0016f04 <VgaText::scrollScreen()>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	83 ec 0c             	sub    esp,0xc
c001749f:	53                   	push   ebx
c00174a0:	e8 69 f9 ff ff       	call   c0016e0e <VgaText::updateCursor()>
c00174a5:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174af:	0f b7 f6             	movzx  esi,si
c00174b2:	01 f6                	add    esi,esi
c00174b4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00174b7:	e9 8f 00 00 00       	jmp    c001754b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174bc:	83 f8 08             	cmp    eax,0x8
c00174bf:	75 34                	jne    c00174f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00174c1:	51                   	push   ecx
c00174c2:	51                   	push   ecx
c00174c3:	6a 01                	push   0x1
c00174c5:	53                   	push   ebx
c00174c6:	e8 af fc ff ff       	call   c001717a <VgaText::decrementCursor(bool)>
c00174cb:	5e                   	pop    esi
c00174cc:	58                   	pop    eax
c00174cd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174d0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174d3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00174d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00174d9:	6a 20                	push   0x20
c00174db:	53                   	push   ebx
c00174dc:	e8 c5 fa ff ff       	call   c0016fa6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174e1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174e5:	83 c4 20             	add    esp,0x20
c00174e8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174eb:	0f b7 f6             	movzx  esi,si
c00174ee:	01 f6                	add    esi,esi
c00174f0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00174f3:	eb 56                	jmp    c001754b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174f5:	52                   	push   edx
c00174f6:	52                   	push   edx
c00174f7:	55                   	push   ebp
c00174f8:	50                   	push   eax
c00174f9:	e8 98 fa ff ff       	call   c0016f96 <VgaText::combineCharAndColour(char, unsigned char)>
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	66 89 06             	mov    WORD PTR [esi],ax
c0017504:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001750a:	75 1d                	jne    c0017529 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017512:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017515:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017519:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001751d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017520:	50                   	push   eax
c0017521:	e8 da 07 01 00       	call   c0027d00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017526:	83 c4 20             	add    esp,0x20
c0017529:	83 c6 02             	add    esi,0x2
c001752c:	50                   	push   eax
c001752d:	50                   	push   eax
c001752e:	6a 00                	push   0x0
c0017530:	53                   	push   ebx
c0017531:	e8 f0 fb ff ff       	call   c0017126 <VgaText::incrementCursor(bool)>
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001753d:	75 0c                	jne    c001754b <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001753f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017543:	0f b7 f6             	movzx  esi,si
c0017546:	01 f6                	add    esi,esi
c0017548:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001754b:	47                   	inc    edi
c001754c:	e9 06 ff ff ff       	jmp    c0017457 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	53                   	push   ebx
c0017555:	e8 b4 f8 ff ff       	call   c0016e0e <VgaText::updateCursor()>
c001755a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017561:	83 c4 1c             	add    esp,0x1c
c0017564:	5b                   	pop    ebx
c0017565:	5e                   	pop    esi
c0017566:	5f                   	pop    edi
c0017567:	5d                   	pop    ebp
c0017568:	c3                   	ret    
c0017569:	90                   	nop

c001756a <VgaText::VgaText(char const*)>:
c001756a:	56                   	push   esi
c001756b:	53                   	push   ebx
c001756c:	83 ec 04             	sub    esp,0x4
c001756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017573:	83 ec 08             	sub    esp,0x8
c0017576:	6a 00                	push   0x0
c0017578:	50                   	push   eax
c0017579:	e8 44 05 00 00       	call   c0017ac2 <UnixFile::UnixFile(int)>
c001757e:	83 c4 10             	add    esp,0x10
c0017581:	ba a4 12 03 c0       	mov    edx,0xc00312a4
c0017586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758a:	89 10                	mov    DWORD PTR [eax],edx
c001758c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017590:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0017597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00175a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00175aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ae:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00175b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00175bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00175c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175cc:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00175d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00175de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e2:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175e9:	83 ec 0c             	sub    esp,0xc
c00175ec:	6a 01                	push   0x1
c00175ee:	e8 1e 09 00 00       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	89 c2                	mov    edx,eax
c00175f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00175ff:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017609:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001760c:	89 c6                	mov    esi,eax
c001760e:	e8 b0 f0 ff ff       	call   c00166c3 <Phys::allocatePage()>
c0017613:	68 05 0c 00 00       	push   0xc05
c0017618:	56                   	push   esi
c0017619:	50                   	push   eax
c001761a:	53                   	push   ebx
c001761b:	e8 04 10 00 00       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017627:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001762a:	83 ec 04             	sub    esp,0x4
c001762d:	68 a0 0f 00 00       	push   0xfa0
c0017632:	6a 00                	push   0x0
c0017634:	50                   	push   eax
c0017635:	e8 b6 8e fe ff       	call   c00004f0 <memset>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	83 ec 04             	sub    esp,0x4
c0017640:	6a 00                	push   0x0
c0017642:	6a 07                	push   0x7
c0017644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017648:	e8 6b f8 ff ff       	call   c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	83 ec 04             	sub    esp,0x4
c0017653:	6a 00                	push   0x0
c0017655:	6a 00                	push   0x0
c0017657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765b:	e8 e6 f9 ff ff       	call   c0017046 <VgaText::setCursor(int, int)>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	83 ec 0c             	sub    esp,0xc
c0017666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766a:	e8 39 fa ff ff       	call   c00170a8 <VgaText::clearScreen()>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017676:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001767a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767e:	05 82 00 00 00       	add    eax,0x82
c0017683:	83 ec 04             	sub    esp,0x4
c0017686:	68 80 00 00 00       	push   0x80
c001768b:	6a 00                	push   0x0
c001768d:	50                   	push   eax
c001768e:	e8 5d 8e fe ff       	call   c00004f0 <memset>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769a:	05 02 01 00 00       	add    eax,0x102
c001769f:	83 ec 04             	sub    esp,0x4
c00176a2:	68 80 00 00 00       	push   0x80
c00176a7:	6a 00                	push   0x0
c00176a9:	50                   	push   eax
c00176aa:	e8 41 8e fe ff       	call   c00004f0 <memset>
c00176af:	83 c4 10             	add    esp,0x10
c00176b2:	90                   	nop
c00176b3:	83 c4 04             	add    esp,0x4
c00176b6:	5b                   	pop    ebx
c00176b7:	5e                   	pop    esi
c00176b8:	c3                   	ret    
c00176b9:	90                   	nop

c00176ba <VgaText::receiveKey(unsigned char)>:
c00176ba:	55                   	push   ebp
c00176bb:	57                   	push   edi
c00176bc:	56                   	push   esi
c00176bd:	53                   	push   ebx
c00176be:	83 ec 2c             	sub    esp,0x2c
c00176c1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00176c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176c9:	89 ef                	mov    edi,ebp
c00176cb:	81 e7 ff 00 00 00    	and    edi,0xff
c00176d1:	0f 84 66 01 00 00    	je     c001783d <VgaText::receiveKey(unsigned char)+0x183>
c00176d7:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00176dd:	83 ff 08             	cmp    edi,0x8
c00176e0:	75 73                	jne    c0017755 <VgaText::receiveKey(unsigned char)+0x9b>
c00176e2:	83 ec 0c             	sub    esp,0xc
c00176e5:	56                   	push   esi
c00176e6:	e8 85 8e fe ff       	call   c0000570 <strlen>
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	85 c0                	test   eax,eax
c00176f0:	0f 84 02 01 00 00    	je     c00177f8 <VgaText::receiveKey(unsigned char)+0x13e>
c00176f6:	50                   	push   eax
c00176f7:	50                   	push   eax
c00176f8:	6a 08                	push   0x8
c00176fa:	53                   	push   ebx
c00176fb:	e8 6c fb ff ff       	call   c001726c <VgaText::putchar(char)>
c0017700:	89 34 24             	mov    DWORD PTR [esp],esi
c0017703:	e8 68 8e fe ff       	call   c0000570 <strlen>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017713:	83 fa 0d             	cmp    edx,0xd
c0017716:	89 d0                	mov    eax,edx
c0017718:	0f 95 c1             	setne  cl
c001771b:	83 fa 1f             	cmp    edx,0x1f
c001771e:	0f 9e c2             	setle  dl
c0017721:	0f b6 d2             	movzx  edx,dl
c0017724:	85 ca                	test   edx,ecx
c0017726:	74 17                	je     c001773f <VgaText::receiveKey(unsigned char)+0x85>
c0017728:	83 e8 08             	sub    eax,0x8
c001772b:	3c 02                	cmp    al,0x2
c001772d:	76 10                	jbe    c001773f <VgaText::receiveKey(unsigned char)+0x85>
c001772f:	55                   	push   ebp
c0017730:	55                   	push   ebp
c0017731:	68 8f 12 03 c0       	push   0xc003128f
c0017736:	53                   	push   ebx
c0017737:	e8 6e fc ff ff       	call   c00173aa <VgaText::puts(char const*)>
c001773c:	83 c4 10             	add    esp,0x10
c001773f:	83 ec 0c             	sub    esp,0xc
c0017742:	56                   	push   esi
c0017743:	e8 28 8e fe ff       	call   c0000570 <strlen>
c0017748:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017750:	e9 a0 00 00 00       	jmp    c00177f5 <VgaText::receiveKey(unsigned char)+0x13b>
c0017755:	83 ec 0c             	sub    esp,0xc
c0017758:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001775e:	50                   	push   eax
c001775f:	e8 0c 8e fe ff       	call   c0000570 <strlen>
c0017764:	89 34 24             	mov    DWORD PTR [esp],esi
c0017767:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001776b:	e8 00 8e fe ff       	call   c0000570 <strlen>
c0017770:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001777b:	3d 80 00 00 00       	cmp    eax,0x80
c0017780:	0f 87 b7 00 00 00    	ja     c001783d <VgaText::receiveKey(unsigned char)+0x183>
c0017786:	8d 45 ff             	lea    eax,[ebp-0x1]
c0017789:	8d 55 f7             	lea    edx,[ebp-0x9]
c001778c:	3c 1e                	cmp    al,0x1e
c001778e:	0f 96 c0             	setbe  al
c0017791:	80 fa 01             	cmp    dl,0x1
c0017794:	0f 97 c2             	seta   dl
c0017797:	0f b6 d2             	movzx  edx,dl
c001779a:	85 c2                	test   edx,eax
c001779c:	74 2e                	je     c00177cc <VgaText::receiveKey(unsigned char)+0x112>
c001779e:	83 ff 0d             	cmp    edi,0xd
c00177a1:	74 29                	je     c00177cc <VgaText::receiveKey(unsigned char)+0x112>
c00177a3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177a6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177a9:	68 95 12 03 c0       	push   0xc0031295
c00177ae:	53                   	push   ebx
c00177af:	e8 68 fc ff ff       	call   c001741c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177b4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177b7:	8d 45 40             	lea    eax,[ebp+0x40]
c00177ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177bd:	0f b6 c0             	movzx  eax,al
c00177c0:	50                   	push   eax
c00177c1:	53                   	push   ebx
c00177c2:	e8 d5 f9 ff ff       	call   c001719c <VgaText::putchar(char, VgaColour, VgaColour)>
c00177c7:	83 c4 20             	add    esp,0x20
c00177ca:	eb 11                	jmp    c00177dd <VgaText::receiveKey(unsigned char)+0x123>
c00177cc:	89 e8                	mov    eax,ebp
c00177ce:	51                   	push   ecx
c00177cf:	0f be c0             	movsx  eax,al
c00177d2:	51                   	push   ecx
c00177d3:	50                   	push   eax
c00177d4:	53                   	push   ebx
c00177d5:	e8 92 fa ff ff       	call   c001726c <VgaText::putchar(char)>
c00177da:	83 c4 10             	add    esp,0x10
c00177dd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177e2:	89 e8                	mov    eax,ebp
c00177e4:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00177e8:	52                   	push   edx
c00177e9:	52                   	push   edx
c00177ea:	8d 44 24 26          	lea    eax,[esp+0x26]
c00177ee:	50                   	push   eax
c00177ef:	56                   	push   esi
c00177f0:	e8 4b 90 fe ff       	call   c0000840 <strcat>
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00177fe:	b0 01                	mov    al,0x1
c0017800:	83 ff 1c             	cmp    edi,0x1c
c0017803:	77 0e                	ja     c0017813 <VgaText::receiveKey(unsigned char)+0x159>
c0017805:	b8 08 04 00 10       	mov    eax,0x10000408
c001780a:	89 f9                	mov    ecx,edi
c001780c:	d3 e8                	shr    eax,cl
c001780e:	f7 d0                	not    eax
c0017810:	83 e0 01             	and    eax,0x1
c0017813:	84 c0                	test   al,al
c0017815:	74 04                	je     c001781b <VgaText::receiveKey(unsigned char)+0x161>
c0017817:	84 d2                	test   dl,dl
c0017819:	74 22                	je     c001783d <VgaText::receiveKey(unsigned char)+0x183>
c001781b:	81 c3 02 01 00 00    	add    ebx,0x102
c0017821:	50                   	push   eax
c0017822:	50                   	push   eax
c0017823:	56                   	push   esi
c0017824:	53                   	push   ebx
c0017825:	e8 16 90 fe ff       	call   c0000840 <strcat>
c001782a:	83 c4 0c             	add    esp,0xc
c001782d:	68 80 00 00 00       	push   0x80
c0017832:	6a 00                	push   0x0
c0017834:	56                   	push   esi
c0017835:	e8 b6 8c fe ff       	call   c00004f0 <memset>
c001783a:	83 c4 10             	add    esp,0x10
c001783d:	83 c4 2c             	add    esp,0x2c
c0017840:	5b                   	pop    ebx
c0017841:	5e                   	pop    esi
c0017842:	5f                   	pop    edi
c0017843:	5d                   	pop    ebp
c0017844:	c3                   	ret    
c0017845:	90                   	nop

c0017846 <VgaText::doUpdate()>:
c0017846:	c3                   	ret    
c0017847:	90                   	nop

c0017848 <TSS::TSS()>:
c0017848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001784c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017853:	90                   	nop
c0017854:	c3                   	ret    
c0017855:	90                   	nop
c0017856:	66 90                	xchg   ax,ax

c0017858 <TSS::setESP(unsigned long)>:
c0017858:	55                   	push   ebp
c0017859:	89 e5                	mov    ebp,esp
c001785b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001785e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017861:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017864:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017867:	90                   	nop
c0017868:	5d                   	pop    ebp
c0017869:	c3                   	ret    
c001786a:	66 90                	xchg   ax,ax

c001786c <TSS::flush()>:
c001786c:	55                   	push   ebp
c001786d:	89 e5                	mov    ebp,esp
c001786f:	83 ec 10             	sub    esp,0x10
c0017872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017875:	8b 00                	mov    eax,DWORD PTR [eax]
c0017877:	83 c8 03             	or     eax,0x3
c001787a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001787e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017882:	66 89 d0             	mov    ax,dx
c0017885:	0f 00 d8             	ltr    ax
c0017888:	90                   	nop
c0017889:	c9                   	leave  
c001788a:	c3                   	ret    
c001788b:	90                   	nop

c001788c <TSS::setup(unsigned long, unsigned long)>:
c001788c:	55                   	push   ebp
c001788d:	89 e5                	mov    ebp,esp
c001788f:	83 ec 18             	sub    esp,0x18
c0017892:	83 ec 0c             	sub    esp,0xc
c0017895:	6a 68                	push   0x68
c0017897:	e8 1e eb ff ff       	call   c00163ba <malloc>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	89 c2                	mov    edx,eax
c00178a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ad:	83 ec 04             	sub    esp,0x4
c00178b0:	6a 68                	push   0x68
c00178b2:	6a 00                	push   0x0
c00178b4:	50                   	push   eax
c00178b5:	e8 36 8c fe ff       	call   c00004f0 <memset>
c00178ba:	83 c4 10             	add    esp,0x10
c00178bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00178c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178cf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00178d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00178ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178f3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00178f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ff:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001790b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017914:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017917:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001791d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017920:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017923:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001792c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001792f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017932:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001793b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001793e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017944:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017947:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001794e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017951:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017954:	0f 20 da             	mov    edx,cr3
c0017957:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001795a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001795d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017963:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017966:	83 ec 08             	sub    esp,0x8
c0017969:	50                   	push   eax
c001796a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001796d:	50                   	push   eax
c001796e:	e8 b3 e2 ff ff       	call   c0015c26 <GDTEntry::setBase(unsigned int)>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	83 ec 08             	sub    esp,0x8
c0017979:	6a 68                	push   0x68
c001797b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001797e:	50                   	push   eax
c001797f:	e8 be e2 ff ff       	call   c0015c42 <GDTEntry::setLimit(unsigned int)>
c0017984:	83 c4 10             	add    esp,0x10
c0017987:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001798b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001798e:	83 e0 0f             	and    eax,0xf
c0017991:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017994:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017997:	83 c8 40             	or     eax,0x40
c001799a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001799d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179a8:	05 78 01 00 00       	add    eax,0x178
c00179ad:	83 ec 04             	sub    esp,0x4
c00179b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00179b3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179b6:	50                   	push   eax
c00179b7:	e8 ba e2 ff ff       	call   c0015c76 <GDT::addEntry(GDTEntry)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	89 c2                	mov    edx,eax
c00179c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179c4:	89 10                	mov    DWORD PTR [eax],edx
c00179c6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179d1:	05 78 01 00 00       	add    eax,0x178
c00179d6:	83 ec 0c             	sub    esp,0xc
c00179d9:	50                   	push   eax
c00179da:	e8 c1 e2 ff ff       	call   c0015ca0 <GDT::flush()>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e7:	c9                   	leave  
c00179e8:	c3                   	ret    
c00179e9:	90                   	nop

c00179ea <ReservedFilename::read(unsigned long long, void*, int*)>:
c00179ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179fa:	75 08                	jne    c0017a04 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00179fc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a02:	eb 38                	jmp    c0017a3c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017a04:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a09:	75 17                	jne    c0017a22 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017a0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a19:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a1f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017a22:	89 c1                	mov    ecx,eax
c0017a24:	83 e1 fd             	and    ecx,0xfffffffd
c0017a27:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017a2d:	74 cd                	je     c00179fc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a2f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a34:	83 e0 ef             	and    eax,0xffffffef
c0017a37:	83 f8 08             	cmp    eax,0x8
c0017a3a:	76 c0                	jbe    c00179fc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a3c:	31 c0                	xor    eax,eax
c0017a3e:	c3                   	ret    
c0017a3f:	90                   	nop

c0017a40 <ReservedFilename::isAtty()>:
c0017a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a47:	31 c0                	xor    eax,eax
c0017a49:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017a4f:	74 09                	je     c0017a5a <ReservedFilename::isAtty()+0x1a>
c0017a51:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017a57:	0f 94 c0             	sete   al
c0017a5a:	c3                   	ret    
c0017a5b:	90                   	nop

c0017a5c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a6b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a70:	75 08                	jne    c0017a7a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a72:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a78:	eb 3d                	jmp    c0017ab7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a7a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a7f:	75 17                	jne    c0017a98 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a95:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017a98:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017a9d:	75 04                	jne    c0017aa3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017a9f:	89 0a                	mov    DWORD PTR [edx],ecx
c0017aa1:	eb 14                	jmp    c0017ab7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017aa3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017aa8:	74 c8                	je     c0017a72 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017aaa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017aaf:	83 e0 ef             	and    eax,0xffffffef
c0017ab2:	83 f8 08             	cmp    eax,0x8
c0017ab5:	76 bb                	jbe    c0017a72 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017ab7:	31 c0                	xor    eax,eax
c0017ab9:	c3                   	ret    

c0017aba <UnixFile::getFileDescriptor()>:
c0017aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017abe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac1:	c3                   	ret    

c0017ac2 <UnixFile::UnixFile(int)>:
c0017ac2:	53                   	push   ebx
c0017ac3:	83 ec 28             	sub    esp,0x28
c0017ac6:	ba 6c 13 03 c0       	mov    edx,0xc003136c
c0017acb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017acf:	89 10                	mov    DWORD PTR [eax],edx
c0017ad1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017ad9:	0f 8f 90 01 00 00    	jg     c0017c6f <UnixFile::UnixFile(int)+0x1ad>
c0017adf:	a1 e0 3b 03 c0       	mov    eax,ds:0xc0033be0
c0017ae4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae7:	89 15 e0 3b 03 c0    	mov    DWORD PTR ds:0xc0033be0,edx
c0017aed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017af1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017af4:	83 ec 08             	sub    esp,0x8
c0017af7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017afb:	68 98 aa 03 c0       	push   0xc003aa98
c0017b00:	e8 33 6e 01 00       	call   c002e938 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017b0d:	83 f0 01             	xor    eax,0x1
c0017b10:	0f b6 c0             	movzx  eax,al
c0017b13:	85 c0                	test   eax,eax
c0017b15:	0f 84 55 01 00 00    	je     c0017c70 <UnixFile::UnixFile(int)+0x1ae>
c0017b1b:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017b22:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b31:	e8 84 e8 ff ff       	call   c00163ba <malloc>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	89 c3                	mov    ebx,eax
c0017b3b:	83 ec 08             	sub    esp,0x8
c0017b3e:	68 03 ff ff 0f       	push   0xfffff03
c0017b43:	53                   	push   ebx
c0017b44:	e8 2d 01 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017b52:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b61:	e8 54 e8 ff ff       	call   c00163ba <malloc>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	89 c3                	mov    ebx,eax
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 01 ff ff 0f       	push   0xfffff01
c0017b73:	53                   	push   ebx
c0017b74:	e8 fd 00 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b82:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b8a:	83 ec 0c             	sub    esp,0xc
c0017b8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b91:	e8 24 e8 ff ff       	call   c00163ba <malloc>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	89 c3                	mov    ebx,eax
c0017b9b:	83 ec 08             	sub    esp,0x8
c0017b9e:	68 00 ff ff 0f       	push   0xfffff00
c0017ba3:	53                   	push   ebx
c0017ba4:	e8 cd 00 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017bb2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017bba:	83 ec 0c             	sub    esp,0xc
c0017bbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bc1:	e8 f4 e7 ff ff       	call   c00163ba <malloc>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	89 c3                	mov    ebx,eax
c0017bcb:	83 ec 08             	sub    esp,0x8
c0017bce:	68 02 ff ff 0f       	push   0xfffff02
c0017bd3:	53                   	push   ebx
c0017bd4:	e8 9d 00 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017be2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017bea:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017bef:	7f 7f                	jg     c0017c70 <UnixFile::UnixFile(int)+0x1ae>
c0017bf1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017bf9:	83 ec 0c             	sub    esp,0xc
c0017bfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c00:	e8 b5 e7 ff ff       	call   c00163ba <malloc>
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	89 c3                	mov    ebx,eax
c0017c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c0e:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017c13:	83 ec 08             	sub    esp,0x8
c0017c16:	50                   	push   eax
c0017c17:	53                   	push   ebx
c0017c18:	e8 59 00 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017c1d:	83 c4 10             	add    esp,0x10
c0017c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c24:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017c2b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017c33:	83 ec 0c             	sub    esp,0xc
c0017c36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c3a:	e8 7b e7 ff ff       	call   c00163ba <malloc>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	89 c3                	mov    ebx,eax
c0017c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c48:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017c4d:	83 ec 08             	sub    esp,0x8
c0017c50:	50                   	push   eax
c0017c51:	53                   	push   ebx
c0017c52:	e8 1f 00 00 00       	call   c0017c76 <ReservedFilename::ReservedFilename(int)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c5e:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c65:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c6a:	e9 7b ff ff ff       	jmp    c0017bea <UnixFile::UnixFile(int)+0x128>
c0017c6f:	90                   	nop
c0017c70:	83 c4 28             	add    esp,0x28
c0017c73:	5b                   	pop    ebx
c0017c74:	c3                   	ret    
c0017c75:	90                   	nop

c0017c76 <ReservedFilename::ReservedFilename(int)>:
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7d:	83 ec 08             	sub    esp,0x8
c0017c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c84:	50                   	push   eax
c0017c85:	e8 38 fe ff ff       	call   c0017ac2 <UnixFile::UnixFile(int)>
c0017c8a:	83 c4 10             	add    esp,0x10
c0017c8d:	ba 88 13 03 c0       	mov    edx,0xc0031388
c0017c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c96:	89 10                	mov    DWORD PTR [eax],edx
c0017c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ca0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ca3:	90                   	nop
c0017ca4:	83 c4 0c             	add    esp,0xc
c0017ca7:	c3                   	ret    

c0017ca8 <UnixFile::~UnixFile()>:
c0017ca8:	83 ec 1c             	sub    esp,0x1c
c0017cab:	ba 6c 13 03 c0       	mov    edx,0xc003136c
c0017cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cb4:	89 10                	mov    DWORD PTR [eax],edx
c0017cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cbd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017cc2:	7f 76                	jg     c0017d3a <UnixFile::~UnixFile()+0x92>
c0017cc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	68 98 aa 03 c0       	push   0xc003aa98
c0017cd4:	e8 33 6d 01 00       	call   c002ea0c <LinkedList<UnixFile>::getFirstElement()>
c0017cd9:	83 c4 10             	add    esp,0x10
c0017cdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	68 98 aa 03 c0       	push   0xc003aa98
c0017ce8:	e8 27 6d 01 00       	call   c002ea14 <LinkedList<UnixFile>::removeFirst()>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cf4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017cf8:	74 43                	je     c0017d3d <UnixFile::~UnixFile()+0x95>
c0017cfa:	83 ec 08             	sub    esp,0x8
c0017cfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d01:	68 98 aa 03 c0       	push   0xc003aa98
c0017d06:	e8 2d 6c 01 00       	call   c002e938 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d0b:	83 c4 10             	add    esp,0x10
c0017d0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d12:	8d 50 01             	lea    edx,[eax+0x1]
c0017d15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d19:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017d1e:	0f 94 c0             	sete   al
c0017d21:	0f b6 c0             	movzx  eax,al
c0017d24:	85 c0                	test   eax,eax
c0017d26:	74 a4                	je     c0017ccc <UnixFile::~UnixFile()+0x24>
c0017d28:	83 ec 0c             	sub    esp,0xc
c0017d2b:	68 44 13 03 c0       	push   0xc0031344
c0017d30:	e8 2d 85 00 00       	call   c0020262 <KePanic(char const*)>
c0017d35:	83 c4 10             	add    esp,0x10
c0017d38:	eb 92                	jmp    c0017ccc <UnixFile::~UnixFile()+0x24>
c0017d3a:	90                   	nop
c0017d3b:	eb 01                	jmp    c0017d3e <UnixFile::~UnixFile()+0x96>
c0017d3d:	90                   	nop
c0017d3e:	90                   	nop
c0017d3f:	83 c4 1c             	add    esp,0x1c
c0017d42:	c3                   	ret    
c0017d43:	90                   	nop

c0017d44 <UnixFile::~UnixFile()>:
c0017d44:	83 ec 0c             	sub    esp,0xc
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d4e:	e8 55 ff ff ff       	call   c0017ca8 <UnixFile::~UnixFile()>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	83 ec 08             	sub    esp,0x8
c0017d59:	6a 0c                	push   0xc
c0017d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d5f:	e8 b8 13 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	83 c4 0c             	add    esp,0xc
c0017d6a:	c3                   	ret    
c0017d6b:	90                   	nop

c0017d6c <ReservedFilename::~ReservedFilename()>:
c0017d6c:	83 ec 0c             	sub    esp,0xc
c0017d6f:	ba 88 13 03 c0       	mov    edx,0xc0031388
c0017d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d78:	89 10                	mov    DWORD PTR [eax],edx
c0017d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d7e:	83 ec 0c             	sub    esp,0xc
c0017d81:	50                   	push   eax
c0017d82:	e8 21 ff ff ff       	call   c0017ca8 <UnixFile::~UnixFile()>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	90                   	nop
c0017d8b:	83 c4 0c             	add    esp,0xc
c0017d8e:	c3                   	ret    
c0017d8f:	90                   	nop

c0017d90 <ReservedFilename::~ReservedFilename()>:
c0017d90:	83 ec 0c             	sub    esp,0xc
c0017d93:	83 ec 0c             	sub    esp,0xc
c0017d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d9a:	e8 cd ff ff ff       	call   c0017d6c <ReservedFilename::~ReservedFilename()>
c0017d9f:	83 c4 10             	add    esp,0x10
c0017da2:	83 ec 08             	sub    esp,0x8
c0017da5:	6a 0c                	push   0xc
c0017da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dab:	e8 6c 13 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	83 c4 0c             	add    esp,0xc
c0017db6:	c3                   	ret    

c0017db7 <KeGetFileFromDescriptor(int)>:
c0017db7:	53                   	push   ebx
c0017db8:	83 ec 08             	sub    esp,0x8
c0017dbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dbf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017dc5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017dcb:	7f 2c                	jg     c0017df9 <KeGetFileFromDescriptor(int)+0x42>
c0017dcd:	83 ec 0c             	sub    esp,0xc
c0017dd0:	68 98 aa 03 c0       	push   0xc003aa98
c0017dd5:	e8 32 6c 01 00       	call   c002ea0c <LinkedList<UnixFile>::getFirstElement()>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	85 c0                	test   eax,eax
c0017ddf:	75 04                	jne    c0017de5 <KeGetFileFromDescriptor(int)+0x2e>
c0017de1:	31 c0                	xor    eax,eax
c0017de3:	eb 6e                	jmp    c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017de5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017de8:	74 69                	je     c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017dea:	52                   	push   edx
c0017deb:	52                   	push   edx
c0017dec:	50                   	push   eax
c0017ded:	68 98 aa 03 c0       	push   0xc003aa98
c0017df2:	e8 bf 6c 01 00       	call   c002eab6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017df7:	eb e1                	jmp    c0017dda <KeGetFileFromDescriptor(int)+0x23>
c0017df9:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017dfe:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017e04:	74 4d                	je     c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017e06:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017e0b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017e11:	74 40                	je     c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017e13:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017e18:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017e1e:	74 33                	je     c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017e20:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017e25:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017e2b:	74 26                	je     c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017e2d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017e33:	83 f8 08             	cmp    eax,0x8
c0017e36:	77 09                	ja     c0017e41 <KeGetFileFromDescriptor(int)+0x8a>
c0017e38:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017e3f:	eb 12                	jmp    c0017e53 <KeGetFileFromDescriptor(int)+0x9c>
c0017e41:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017e47:	83 fb 08             	cmp    ebx,0x8
c0017e4a:	77 95                	ja     c0017de1 <KeGetFileFromDescriptor(int)+0x2a>
c0017e4c:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017e53:	83 c4 08             	add    esp,0x8
c0017e56:	5b                   	pop    ebx
c0017e57:	c3                   	ret    

c0017e58 <__static_initialization_and_destruction_0(int, int)>:
c0017e58:	83 ec 0c             	sub    esp,0xc
c0017e5b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e60:	75 34                	jne    c0017e96 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e6a:	75 2a                	jne    c0017e96 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	68 98 aa 03 c0       	push   0xc003aa98
c0017e74:	e8 7d 6a 01 00       	call   c002e8f6 <LinkedList<UnixFile>::LinkedList()>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	83 ec 04             	sub    esp,0x4
c0017e7f:	68 58 3b 03 c0       	push   0xc0033b58
c0017e84:	68 98 aa 03 c0       	push   0xc003aa98
c0017e89:	68 f4 e8 02 c0       	push   0xc002e8f4
c0017e8e:	e8 39 12 00 00       	call   c00190cc <__cxa_atexit>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	90                   	nop
c0017e97:	83 c4 0c             	add    esp,0xc
c0017e9a:	c3                   	ret    

c0017e9b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017e9b:	83 ec 0c             	sub    esp,0xc
c0017e9e:	83 ec 08             	sub    esp,0x8
c0017ea1:	68 ff ff 00 00       	push   0xffff
c0017ea6:	6a 01                	push   0x1
c0017ea8:	e8 ab ff ff ff       	call   c0017e58 <__static_initialization_and_destruction_0(int, int)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	83 c4 0c             	add    esp,0xc
c0017eb3:	c3                   	ret    

c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017eb4:	53                   	push   ebx
c0017eb5:	8b 15 e8 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033be8
c0017ebb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ec3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017ec9:	89 d8                	mov    eax,ebx
c0017ecb:	d1 e8                	shr    eax,1
c0017ecd:	01 d0                	add    eax,edx
c0017ecf:	80 e3 01             	and    bl,0x1
c0017ed2:	8a 10                	mov    dl,BYTE PTR [eax]
c0017ed4:	75 09                	jne    c0017edf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017ed6:	83 e2 f0             	and    edx,0xfffffff0
c0017ed9:	09 ca                	or     edx,ecx
c0017edb:	88 10                	mov    BYTE PTR [eax],dl
c0017edd:	5b                   	pop    ebx
c0017ede:	c3                   	ret    
c0017edf:	83 e2 0f             	and    edx,0xf
c0017ee2:	0f b6 c9             	movzx  ecx,cl
c0017ee5:	c1 e1 04             	shl    ecx,0x4
c0017ee8:	09 ca                	or     edx,ecx
c0017eea:	88 10                	mov    BYTE PTR [eax],dl
c0017eec:	5b                   	pop    ebx
c0017eed:	c3                   	ret    

c0017eee <Virt::getPageState(unsigned long)>:
c0017eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ef2:	8b 0d e8 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033be8
c0017ef8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017efe:	89 d0                	mov    eax,edx
c0017f00:	d1 e8                	shr    eax,1
c0017f02:	80 e2 01             	and    dl,0x1
c0017f05:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017f08:	74 03                	je     c0017f0d <Virt::getPageState(unsigned long)+0x1f>
c0017f0a:	c1 e8 04             	shr    eax,0x4
c0017f0d:	83 e0 0f             	and    eax,0xf
c0017f10:	c3                   	ret    

c0017f11 <Virt::allocateKernelVirtualPages(int)>:
c0017f11:	55                   	push   ebp
c0017f12:	31 ed                	xor    ebp,ebp
c0017f14:	57                   	push   edi
c0017f15:	31 ff                	xor    edi,edi
c0017f17:	56                   	push   esi
c0017f18:	53                   	push   ebx
c0017f19:	31 db                	xor    ebx,ebx
c0017f1b:	83 ec 0c             	sub    esp,0xc
c0017f1e:	8b 35 e4 3b 03 c0    	mov    esi,DWORD PTR ds:0xc0033be4
c0017f24:	56                   	push   esi
c0017f25:	e8 c4 ff ff ff       	call   c0017eee <Virt::getPageState(unsigned long)>
c0017f2a:	5a                   	pop    edx
c0017f2b:	84 c0                	test   al,al
c0017f2d:	75 41                	jne    c0017f70 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017f2f:	85 db                	test   ebx,ebx
c0017f31:	75 02                	jne    c0017f35 <Virt::allocateKernelVirtualPages(int)+0x24>
c0017f33:	89 f5                	mov    ebp,esi
c0017f35:	83 c3 01             	add    ebx,0x1
c0017f38:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f3c:	74 5f                	je     c0017f9d <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017f3e:	83 c6 01             	add    esi,0x1
c0017f41:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f47:	76 34                	jbe    c0017f7d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017f49:	c7 05 e4 3b 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033be4,0xc8000
c0017f53:	f7 c7 01 00 00 00    	test   edi,0x1
c0017f59:	75 2a                	jne    c0017f85 <Virt::allocateKernelVirtualPages(int)+0x74>
c0017f5b:	be 00 80 0c 00       	mov    esi,0xc8000
c0017f60:	bf 01 00 00 00       	mov    edi,0x1
c0017f65:	56                   	push   esi
c0017f66:	e8 83 ff ff ff       	call   c0017eee <Virt::getPageState(unsigned long)>
c0017f6b:	5a                   	pop    edx
c0017f6c:	84 c0                	test   al,al
c0017f6e:	74 bf                	je     c0017f2f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017f70:	31 db                	xor    ebx,ebx
c0017f72:	83 c6 01             	add    esi,0x1
c0017f75:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f7b:	77 cc                	ja     c0017f49 <Virt::allocateKernelVirtualPages(int)+0x38>
c0017f7d:	89 35 e4 3b 03 c0    	mov    DWORD PTR ds:0xc0033be4,esi
c0017f83:	eb 9f                	jmp    c0017f24 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017f85:	83 ec 0c             	sub    esp,0xc
c0017f88:	68 9c 13 03 c0       	push   0xc003139c
c0017f8d:	e8 d0 82 00 00       	call   c0020262 <KePanic(char const*)>
c0017f92:	8b 35 e4 3b 03 c0    	mov    esi,DWORD PTR ds:0xc0033be4
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	eb 87                	jmp    c0017f24 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017f9d:	89 2d e4 3b 03 c0    	mov    DWORD PTR ds:0xc0033be4,ebp
c0017fa3:	83 fb 01             	cmp    ebx,0x1
c0017fa6:	74 6f                	je     c0018017 <Virt::allocateKernelVirtualPages(int)+0x106>
c0017fa8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fac:	85 c9                	test   ecx,ecx
c0017fae:	74 49                	je     c0017ff9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fb4:	89 e8                	mov    eax,ebp
c0017fb6:	31 db                	xor    ebx,ebx
c0017fb8:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017fbb:	eb 18                	jmp    c0017fd5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017fbd:	6a 01                	push   0x1
c0017fbf:	83 c3 01             	add    ebx,0x1
c0017fc2:	50                   	push   eax
c0017fc3:	e8 ec fe ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fc8:	58                   	pop    eax
c0017fc9:	5a                   	pop    edx
c0017fca:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017fce:	74 29                	je     c0017ff9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fd0:	a1 e4 3b 03 c0       	mov    eax,ds:0xc0033be4
c0017fd5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd8:	85 db                	test   ebx,ebx
c0017fda:	89 15 e4 3b 03 c0    	mov    DWORD PTR ds:0xc0033be4,edx
c0017fe0:	74 24                	je     c0018006 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017fe2:	39 df                	cmp    edi,ebx
c0017fe4:	75 d7                	jne    c0017fbd <Virt::allocateKernelVirtualPages(int)+0xac>
c0017fe6:	6a 03                	push   0x3
c0017fe8:	83 c3 01             	add    ebx,0x1
c0017feb:	50                   	push   eax
c0017fec:	e8 c3 fe ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ff1:	59                   	pop    ecx
c0017ff2:	5e                   	pop    esi
c0017ff3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017ff7:	75 d7                	jne    c0017fd0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017ff9:	83 c4 0c             	add    esp,0xc
c0017ffc:	89 e8                	mov    eax,ebp
c0017ffe:	5b                   	pop    ebx
c0017fff:	c1 e0 0c             	shl    eax,0xc
c0018002:	5e                   	pop    esi
c0018003:	5f                   	pop    edi
c0018004:	5d                   	pop    ebp
c0018005:	c3                   	ret    
c0018006:	6a 02                	push   0x2
c0018008:	bb 01 00 00 00       	mov    ebx,0x1
c001800d:	50                   	push   eax
c001800e:	e8 a1 fe ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018013:	58                   	pop    eax
c0018014:	5a                   	pop    edx
c0018015:	eb b9                	jmp    c0017fd0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018017:	6a 04                	push   0x4
c0018019:	8d 45 01             	lea    eax,[ebp+0x1]
c001801c:	55                   	push   ebp
c001801d:	a3 e4 3b 03 c0       	mov    ds:0xc0033be4,eax
c0018022:	e8 8d fe ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018027:	5b                   	pop    ebx
c0018028:	89 e8                	mov    eax,ebp
c001802a:	5e                   	pop    esi
c001802b:	c1 e0 0c             	shl    eax,0xc
c001802e:	83 c4 0c             	add    esp,0xc
c0018031:	5b                   	pop    ebx
c0018032:	5e                   	pop    esi
c0018033:	5f                   	pop    edi
c0018034:	5d                   	pop    ebp
c0018035:	c3                   	ret    

c0018036 <Virt::freeSwapfilePage(unsigned long)>:
c0018036:	53                   	push   ebx
c0018037:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c001803d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018041:	b8 01 00 00 00       	mov    eax,0x1
c0018046:	89 cb                	mov    ebx,ecx
c0018048:	d3 e0                	shl    eax,cl
c001804a:	c1 eb 05             	shr    ebx,0x5
c001804d:	f7 d0                	not    eax
c001804f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0018052:	21 c1                	and    ecx,eax
c0018054:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018057:	5b                   	pop    ebx
c0018058:	c3                   	ret    

c0018059 <Virt::swapIDToSector(unsigned long)>:
c0018059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001805d:	8b 15 ec 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033bec
c0018063:	8b 0d f4 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033bf4
c0018069:	0f af c2             	imul   eax,edx
c001806c:	01 c8                	add    eax,ecx
c001806e:	c3                   	ret    

c001806f <Virt::allocateSwapfilePage()>:
c001806f:	55                   	push   ebp
c0018070:	31 d2                	xor    edx,edx
c0018072:	57                   	push   edi
c0018073:	56                   	push   esi
c0018074:	53                   	push   ebx
c0018075:	83 ec 0c             	sub    esp,0xc
c0018078:	8b 0d ec 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033bec
c001807e:	a1 f0 3b 03 c0       	mov    eax,ds:0xc0033bf0
c0018083:	f7 f1                	div    ecx
c0018085:	39 0d f0 3b 03 c0    	cmp    DWORD PTR ds:0xc0033bf0,ecx
c001808b:	72 2f                	jb     c00180bc <Virt::allocateSwapfilePage()+0x4d>
c001808d:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018093:	8b 16                	mov    edx,DWORD PTR [esi]
c0018095:	f6 c2 01             	test   dl,0x1
c0018098:	74 3e                	je     c00180d8 <Virt::allocateSwapfilePage()+0x69>
c001809a:	31 c9                	xor    ecx,ecx
c001809c:	bf 01 00 00 00       	mov    edi,0x1
c00180a1:	eb 12                	jmp    c00180b5 <Virt::allocateSwapfilePage()+0x46>
c00180a3:	89 fd                	mov    ebp,edi
c00180a5:	89 ca                	mov    edx,ecx
c00180a7:	d3 e5                	shl    ebp,cl
c00180a9:	c1 ea 05             	shr    edx,0x5
c00180ac:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00180af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00180b1:	85 ea                	test   edx,ebp
c00180b3:	74 2c                	je     c00180e1 <Virt::allocateSwapfilePage()+0x72>
c00180b5:	83 c1 01             	add    ecx,0x1
c00180b8:	39 c8                	cmp    eax,ecx
c00180ba:	77 e7                	ja     c00180a3 <Virt::allocateSwapfilePage()+0x34>
c00180bc:	83 ec 0c             	sub    esp,0xc
c00180bf:	68 30 16 03 c0       	push   0xc0031630
c00180c4:	e8 99 81 00 00       	call   c0020262 <KePanic(char const*)>
c00180c9:	83 c4 10             	add    esp,0x10
c00180cc:	31 c9                	xor    ecx,ecx
c00180ce:	83 c4 0c             	add    esp,0xc
c00180d1:	89 c8                	mov    eax,ecx
c00180d3:	5b                   	pop    ebx
c00180d4:	5e                   	pop    esi
c00180d5:	5f                   	pop    edi
c00180d6:	5d                   	pop    ebp
c00180d7:	c3                   	ret    
c00180d8:	89 f3                	mov    ebx,esi
c00180da:	bd 01 00 00 00       	mov    ebp,0x1
c00180df:	31 c9                	xor    ecx,ecx
c00180e1:	09 ea                	or     edx,ebp
c00180e3:	89 c8                	mov    eax,ecx
c00180e5:	89 13                	mov    DWORD PTR [ebx],edx
c00180e7:	83 c4 0c             	add    esp,0xc
c00180ea:	5b                   	pop    ebx
c00180eb:	5e                   	pop    esi
c00180ec:	5f                   	pop    edi
c00180ed:	5d                   	pop    ebp
c00180ee:	c3                   	ret    

c00180ef <Virt::virtualMemorySetup()>:
c00180ef:	53                   	push   ebx
c00180f0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180f5:	6a 0f                	push   0xf
c00180f7:	53                   	push   ebx
c00180f8:	83 c3 01             	add    ebx,0x1
c00180fb:	e8 b4 fd ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018100:	58                   	pop    eax
c0018101:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018107:	5a                   	pop    edx
c0018108:	75 eb                	jne    c00180f5 <Virt::virtualMemorySetup()+0x6>
c001810a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001810f:	6a 00                	push   0x0
c0018111:	53                   	push   ebx
c0018112:	83 c3 01             	add    ebx,0x1
c0018115:	e8 9a fd ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001811a:	59                   	pop    ecx
c001811b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018121:	58                   	pop    eax
c0018122:	75 eb                	jne    c001810f <Virt::virtualMemorySetup()+0x20>
c0018124:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018129:	6a 0f                	push   0xf
c001812b:	53                   	push   ebx
c001812c:	83 c3 01             	add    ebx,0x1
c001812f:	e8 80 fd ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018134:	58                   	pop    eax
c0018135:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001813b:	5a                   	pop    edx
c001813c:	75 eb                	jne    c0018129 <Virt::virtualMemorySetup()+0x3a>
c001813e:	5b                   	pop    ebx
c001813f:	c3                   	ret    

c0018140 <Virt::setupPageSwapping(int)>:
c0018140:	53                   	push   ebx
c0018141:	83 ec 0c             	sub    esp,0xc
c0018144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018148:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c001814d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018153:	8b 10                	mov    edx,DWORD PTR [eax]
c0018155:	53                   	push   ebx
c0018156:	c1 e3 0b             	shl    ebx,0xb
c0018159:	68 47 16 03 c0       	push   0xc0031647
c001815e:	50                   	push   eax
c001815f:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018162:	89 1d f0 3b 03 c0    	mov    DWORD PTR ds:0xc0033bf0,ebx
c0018168:	c6 05 f8 3b 03 c0 43 	mov    BYTE PTR ds:0xc0033bf8,0x43
c001816f:	c1 eb 08             	shr    ebx,0x8
c0018172:	a3 f4 3b 03 c0       	mov    ds:0xc0033bf4,eax
c0018177:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001817a:	c7 05 ec 3b 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033bec,0x8
c0018184:	e8 31 e2 ff ff       	call   c00163ba <malloc>
c0018189:	83 c4 0c             	add    esp,0xc
c001818c:	89 c1                	mov    ecx,eax
c001818e:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018193:	31 d2                	xor    edx,edx
c0018195:	a1 f0 3b 03 c0       	mov    eax,ds:0xc0033bf0
c001819a:	f7 35 ec 3b 03 c0    	div    DWORD PTR ds:0xc0033bec
c00181a0:	c1 e8 05             	shr    eax,0x5
c00181a3:	50                   	push   eax
c00181a4:	6a 00                	push   0x0
c00181a6:	51                   	push   ecx
c00181a7:	e8 44 83 fe ff       	call   c00004f0 <memset>
c00181ac:	83 c4 18             	add    esp,0x18
c00181af:	5b                   	pop    ebx
c00181b0:	c3                   	ret    
c00181b1:	90                   	nop

c00181b2 <VAS::setCPUSpecific(unsigned long)>:
c00181b2:	c3                   	ret    
c00181b3:	90                   	nop

c00181b4 <VAS::VAS(VAS*)>:
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181cd:	83 ec 0c             	sub    esp,0xc
c00181d0:	68 bc 13 03 c0       	push   0xc00313bc
c00181d5:	e8 88 80 00 00       	call   c0020262 <KePanic(char const*)>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	90                   	nop
c00181de:	83 c4 0c             	add    esp,0xc
c00181e1:	c3                   	ret    

c00181e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00181e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181e6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00181eb:	89 c2                	mov    edx,eax
c00181ed:	c1 e8 0a             	shr    eax,0xa
c00181f0:	c1 ea 16             	shr    edx,0x16
c00181f3:	83 f9 01             	cmp    ecx,0x1
c00181f6:	19 c9                	sbb    ecx,ecx
c00181f8:	c1 e2 0c             	shl    edx,0xc
c00181fb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018201:	25 fc 0f 00 00       	and    eax,0xffc
c0018206:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001820d:	01 d0                	add    eax,edx
c001820f:	c3                   	ret    

c0018210 <VAS::getPageTableEntry(unsigned long)>:
c0018210:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018214:	89 ca                	mov    edx,ecx
c0018216:	c1 e9 0a             	shr    ecx,0xa
c0018219:	c1 ea 16             	shr    edx,0x16
c001821c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018222:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018228:	c1 e0 0c             	shl    eax,0xc
c001822b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001822e:	c3                   	ret    

c001822f <Virt::freeKernelVirtualPages(unsigned long)>:
c001822f:	55                   	push   ebp
c0018230:	57                   	push   edi
c0018231:	bf 01 00 00 00       	mov    edi,0x1
c0018236:	56                   	push   esi
c0018237:	53                   	push   ebx
c0018238:	83 ec 1c             	sub    esp,0x1c
c001823b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001823f:	c1 ee 0c             	shr    esi,0xc
c0018242:	eb 48                	jmp    c001828c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018244:	83 ec 08             	sub    esp,0x8
c0018247:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001824c:	55                   	push   ebp
c001824d:	50                   	push   eax
c001824e:	e8 bd ff ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c0018253:	83 c4 10             	add    esp,0x10
c0018256:	8b 10                	mov    edx,DWORD PTR [eax]
c0018258:	f6 c6 04             	test   dh,0x4
c001825b:	75 70                	jne    c00182cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001825d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018263:	83 fb 04             	cmp    ebx,0x4
c0018266:	0f 84 8a 00 00 00    	je     c00182f6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001826c:	83 fb 02             	cmp    ebx,0x2
c001826f:	0f 84 9a 00 00 00    	je     c001830f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018275:	83 fb 03             	cmp    ebx,0x3
c0018278:	0f 84 be 00 00 00    	je     c001833c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001827e:	83 fb 01             	cmp    ebx,0x1
c0018281:	0f 84 a2 00 00 00    	je     c0018329 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018287:	83 c6 01             	add    esi,0x1
c001828a:	31 ff                	xor    edi,edi
c001828c:	56                   	push   esi
c001828d:	89 f5                	mov    ebp,esi
c001828f:	e8 5a fc ff ff       	call   c0017eee <Virt::getPageState(unsigned long)>
c0018294:	c1 e5 0c             	shl    ebp,0xc
c0018297:	0f b6 d8             	movzx  ebx,al
c001829a:	5a                   	pop    edx
c001829b:	85 db                	test   ebx,ebx
c001829d:	75 a5                	jne    c0018244 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001829f:	83 ec 0c             	sub    esp,0xc
c00182a2:	68 5e 16 03 c0       	push   0xc003165e
c00182a7:	e8 b6 7f 00 00       	call   c0020262 <KePanic(char const*)>
c00182ac:	5a                   	pop    edx
c00182ad:	59                   	pop    ecx
c00182ae:	55                   	push   ebp
c00182af:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00182b5:	55                   	push   ebp
c00182b6:	e8 55 ff ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	8b 10                	mov    edx,DWORD PTR [eax]
c00182c0:	f6 c6 04             	test   dh,0x4
c00182c3:	75 08                	jne    c00182cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182cb:	eb ba                	jmp    c0018287 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00182d7:	83 ec 0c             	sub    esp,0xc
c00182da:	52                   	push   edx
c00182db:	e8 7a e3 ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	83 fb 04             	cmp    ebx,0x4
c00182e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182f0:	0f 85 76 ff ff ff    	jne    c001826c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00182f6:	83 e7 01             	and    edi,0x1
c00182f9:	75 46                	jne    c0018341 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00182fb:	c7 44 24 30 e0 13 03 c0 	mov    DWORD PTR [esp+0x30],0xc00313e0
c0018303:	83 c4 1c             	add    esp,0x1c
c0018306:	5b                   	pop    ebx
c0018307:	5e                   	pop    esi
c0018308:	5f                   	pop    edi
c0018309:	5d                   	pop    ebp
c001830a:	e9 53 7f 00 00       	jmp    c0020262 <KePanic(char const*)>
c001830f:	83 e7 01             	and    edi,0x1
c0018312:	75 15                	jne    c0018329 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018314:	83 ec 0c             	sub    esp,0xc
c0018317:	68 7a 16 03 c0       	push   0xc003167a
c001831c:	e8 41 7f 00 00       	call   c0020262 <KePanic(char const*)>
c0018321:	83 c4 10             	add    esp,0x10
c0018324:	e9 5e ff ff ff       	jmp    c0018287 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018329:	83 ec 08             	sub    esp,0x8
c001832c:	6a 00                	push   0x0
c001832e:	56                   	push   esi
c001832f:	e8 80 fb ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018334:	83 c4 10             	add    esp,0x10
c0018337:	e9 4b ff ff ff       	jmp    c0018287 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001833c:	83 e7 01             	and    edi,0x1
c001833f:	75 16                	jne    c0018357 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018341:	83 ec 08             	sub    esp,0x8
c0018344:	6a 00                	push   0x0
c0018346:	56                   	push   esi
c0018347:	e8 68 fb ff ff       	call   c0017eb4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001834c:	83 c4 10             	add    esp,0x10
c001834f:	83 c4 1c             	add    esp,0x1c
c0018352:	5b                   	pop    ebx
c0018353:	5e                   	pop    esi
c0018354:	5f                   	pop    edi
c0018355:	5d                   	pop    ebp
c0018356:	c3                   	ret    
c0018357:	c7 44 24 30 96 16 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031696
c001835f:	83 c4 1c             	add    esp,0x1c
c0018362:	5b                   	pop    ebx
c0018363:	5e                   	pop    esi
c0018364:	5f                   	pop    edi
c0018365:	5d                   	pop    ebp
c0018366:	e9 f7 7e 00 00       	jmp    c0020262 <KePanic(char const*)>
c001836b:	90                   	nop

c001836c <VAS::freeAllocatedPages(unsigned long)>:
c001836c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018374:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018378:	74 09                	je     c0018383 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001837a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001837e:	e9 ac fe ff ff       	jmp    c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0018383:	c7 44 24 04 04 14 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031404
c001838b:	e9 b9 0e 00 00       	jmp    c0019249 <Dbg::kprintf(char const*, ...)>

c0018390 <VAS::virtualToPhysical(unsigned long)>:
c0018390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018394:	50                   	push   eax
c0018395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018399:	52                   	push   edx
c001839a:	e8 71 fe ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c001839f:	59                   	pop    ecx
c00183a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a2:	5a                   	pop    edx
c00183a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183a8:	c3                   	ret    
c00183a9:	90                   	nop

c00183aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00183aa:	55                   	push   ebp
c00183ab:	57                   	push   edi
c00183ac:	56                   	push   esi
c00183ad:	53                   	push   ebx
c00183ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00183b2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00183b6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183be:	85 db                	test   ebx,ebx
c00183c0:	7e 24                	jle    c00183e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00183c2:	c1 e3 0c             	shl    ebx,0xc
c00183c5:	01 f3                	add    ebx,esi
c00183c7:	56                   	push   esi
c00183c8:	81 c6 00 10 00 00    	add    esi,0x1000
c00183ce:	55                   	push   ebp
c00183cf:	e8 3c fe ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c00183d4:	5a                   	pop    edx
c00183d5:	59                   	pop    ecx
c00183d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00183d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183dc:	21 f9                	and    ecx,edi
c00183de:	09 d1                	or     ecx,edx
c00183e0:	39 f3                	cmp    ebx,esi
c00183e2:	89 08                	mov    DWORD PTR [eax],ecx
c00183e4:	75 e1                	jne    c00183c7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00183e6:	5b                   	pop    ebx
c00183e7:	5e                   	pop    esi
c00183e8:	5f                   	pop    edi
c00183e9:	5d                   	pop    ebp
c00183ea:	c3                   	ret    
c00183eb:	90                   	nop

c00183ec <VAS::VAS()>:
c00183ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018406:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c001840b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001840f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0018413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018417:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001841a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001841e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018425:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c001842a:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001842f:	29 c2                	sub    edx,eax
c0018431:	89 d0                	mov    eax,edx
c0018433:	05 ff 0f 00 00       	add    eax,0xfff
c0018438:	c1 e8 0c             	shr    eax,0xc
c001843b:	89 c2                	mov    edx,eax
c001843d:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018442:	6a 04                	push   0x4
c0018444:	6a ff                	push   0xffffffff
c0018446:	52                   	push   edx
c0018447:	50                   	push   eax
c0018448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001844c:	e8 59 ff ff ff       	call   c00183aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018451:	83 c4 14             	add    esp,0x14
c0018454:	90                   	nop
c0018455:	c3                   	ret    

c0018456 <VAS::setToWriteCombining(unsigned long, int)>:
c0018456:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001845b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018461:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018468:	75 01                	jne    c001846b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001846a:	c3                   	ret    
c001846b:	68 80 00 00 00       	push   0x80
c0018470:	6a ff                	push   0xffffffff
c0018472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018476:	50                   	push   eax
c0018477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001847b:	52                   	push   edx
c001847c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018480:	51                   	push   ecx
c0018481:	e8 24 ff ff ff       	call   c00183aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018486:	83 c4 14             	add    esp,0x14
c0018489:	c3                   	ret    

c001848a <VAS::mapOtherVASIn(bool, VAS*)>:
c001848a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001848e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018495:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018498:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001849d:	83 f8 01             	cmp    eax,0x1
c00184a0:	19 c0                	sbb    eax,eax
c00184a2:	83 ca 03             	or     edx,0x3
c00184a5:	83 e0 fc             	and    eax,0xfffffffc
c00184a8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00184af:	0f 20 d8             	mov    eax,cr3
c00184b2:	0f 22 d8             	mov    cr3,eax
c00184b5:	c3                   	ret    

c00184b6 <VAS::~VAS()>:
c00184b6:	83 ec 2c             	sub    esp,0x2c
c00184b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184c1:	fa                   	cli    
c00184c2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00184c7:	83 c0 01             	add    eax,0x1
c00184ca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00184cf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00184d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184d9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e3:	6a 01                	push   0x1
c00184e5:	50                   	push   eax
c00184e6:	e8 9f ff ff ff       	call   c001848a <VAS::mapOtherVASIn(bool, VAS*)>
c00184eb:	83 c4 0c             	add    esp,0xc
c00184ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00184f6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00184fe:	0f 8f d8 00 00 00    	jg     c00185dc <VAS::~VAS()+0x126>
c0018504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001850b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001850f:	c1 e2 02             	shl    edx,0x2
c0018512:	01 d0                	add    eax,edx
c0018514:	8b 00                	mov    eax,DWORD PTR [eax]
c0018516:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001851a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001851e:	83 e0 01             	and    eax,0x1
c0018521:	0f 84 ab 00 00 00    	je     c00185d2 <VAS::~VAS()+0x11c>
c0018527:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001852f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018537:	7f 74                	jg     c00185ad <VAS::~VAS()+0xf7>
c0018539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001853d:	c1 e0 0a             	shl    eax,0xa
c0018540:	89 c2                	mov    edx,eax
c0018542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018546:	01 d0                	add    eax,edx
c0018548:	c1 e0 0c             	shl    eax,0xc
c001854b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001854f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018554:	8b 00                	mov    eax,DWORD PTR [eax]
c0018556:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018559:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001855f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018563:	6a 01                	push   0x1
c0018565:	50                   	push   eax
c0018566:	e8 77 fc ff ff       	call   c00181e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001856b:	83 c4 0c             	add    esp,0xc
c001856e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018576:	8b 00                	mov    eax,DWORD PTR [eax]
c0018578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018580:	25 01 04 00 00       	and    eax,0x401
c0018585:	3d 01 04 00 00       	cmp    eax,0x401
c001858a:	75 1a                	jne    c00185a6 <VAS::~VAS()+0xf0>
c001858c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018590:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018595:	83 ec 0c             	sub    esp,0xc
c0018598:	50                   	push   eax
c0018599:	e8 bc e0 ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c001859e:	83 c4 10             	add    esp,0x10
c00185a1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185a6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00185ab:	eb 82                	jmp    c001852f <VAS::~VAS()+0x79>
c00185ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b1:	25 00 04 00 00       	and    eax,0x400
c00185b6:	74 1a                	je     c00185d2 <VAS::~VAS()+0x11c>
c00185b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185c1:	83 ec 0c             	sub    esp,0xc
c00185c4:	50                   	push   eax
c00185c5:	e8 90 e0 ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185d2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00185d7:	e9 1a ff ff ff       	jmp    c00184f6 <VAS::~VAS()+0x40>
c00185dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185e3:	83 ec 0c             	sub    esp,0xc
c00185e6:	50                   	push   eax
c00185e7:	e8 43 fc ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c00185ec:	83 c4 10             	add    esp,0x10
c00185ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185f6:	83 ec 0c             	sub    esp,0xc
c00185f9:	50                   	push   eax
c00185fa:	e8 5b e0 ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018607:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001860c:	83 e8 01             	sub    eax,0x1
c001860f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018614:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018619:	85 c0                	test   eax,eax
c001861b:	75 01                	jne    c001861e <VAS::~VAS()+0x168>
c001861d:	fb                   	sti    
c001861e:	90                   	nop
c001861f:	83 c4 2c             	add    esp,0x2c
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018624:	55                   	push   ebp
c0018625:	57                   	push   edi
c0018626:	56                   	push   esi
c0018627:	53                   	push   ebx
c0018628:	83 ec 1c             	sub    esp,0x1c
c001862b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001862f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018633:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018639:	77 08                	ja     c0018643 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001863b:	0f 20 d8             	mov    eax,cr3
c001863e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018641:	75 49                	jne    c001868c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0018643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018647:	09 d8                	or     eax,ebx
c0018649:	a9 ff 0f 00 00       	test   eax,0xfff
c001864e:	75 59                	jne    c00186a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018650:	89 de                	mov    esi,ebx
c0018652:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018655:	c1 ee 16             	shr    esi,0x16
c0018658:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001865f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018663:	74 56                	je     c00186bb <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0018665:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018669:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001866d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018673:	c1 eb 0a             	shr    ebx,0xa
c0018676:	c1 e6 0c             	shl    esi,0xc
c0018679:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001867f:	09 d0                	or     eax,edx
c0018681:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0018684:	83 c4 1c             	add    esp,0x1c
c0018687:	5b                   	pop    ebx
c0018688:	5e                   	pop    esi
c0018689:	5f                   	pop    edi
c001868a:	5d                   	pop    ebp
c001868b:	c3                   	ret    
c001868c:	83 ec 0c             	sub    esp,0xc
c001868f:	68 28 14 03 c0       	push   0xc0031428
c0018694:	e8 b0 0b 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186a0:	09 d8                	or     eax,ebx
c00186a2:	a9 ff 0f 00 00       	test   eax,0xfff
c00186a7:	74 a7                	je     c0018650 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186a9:	83 ec 0c             	sub    esp,0xc
c00186ac:	68 90 14 03 c0       	push   0xc0031490
c00186b1:	e8 ac 7b 00 00       	call   c0020262 <KePanic(char const*)>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	eb 95                	jmp    c0018650 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00186bf:	e8 ff df ff ff       	call   c00166c3 <Phys::allocatePage()>
c00186c4:	83 ec 0c             	sub    esp,0xc
c00186c7:	89 c5                	mov    ebp,eax
c00186c9:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00186cf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00186d3:	6a 01                	push   0x1
c00186d5:	e8 37 f8 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c00186da:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186e1:	6a 01                	push   0x1
c00186e3:	50                   	push   eax
c00186e4:	55                   	push   ebp
c00186e5:	81 cd 07 04 00 00    	or     ebp,0x407
c00186eb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00186ef:	51                   	push   ecx
c00186f0:	e8 29 01 00 00       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00186f5:	83 c4 1c             	add    esp,0x1c
c00186f8:	68 00 10 00 00       	push   0x1000
c00186fd:	6a 00                	push   0x0
c00186ff:	50                   	push   eax
c0018700:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018704:	e8 e7 7d fe ff       	call   c00004f0 <memset>
c0018709:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001870d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018710:	e8 1a fb ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0018715:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018719:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001871c:	83 c4 10             	add    esp,0x10
c001871f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0018722:	e9 3e ff ff ff       	jmp    c0018665 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0018727:	90                   	nop

c0018728 <VAS::allocatePages(int, int)>:
c0018728:	55                   	push   ebp
c0018729:	57                   	push   edi
c001872a:	56                   	push   esi
c001872b:	53                   	push   ebx
c001872c:	83 ec 1c             	sub    esp,0x1c
c001872f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018733:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018737:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001873b:	75 71                	jne    c00187ae <VAS::allocatePages(int, int)+0x86>
c001873d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018744:	85 c0                	test   eax,eax
c0018746:	74 4d                	je     c0018795 <VAS::allocatePages(int, int)+0x6d>
c0018748:	89 dd                	mov    ebp,ebx
c001874a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001874e:	c1 e5 0c             	shl    ebp,0xc
c0018751:	01 c5                	add    ebp,eax
c0018753:	85 db                	test   ebx,ebx
c0018755:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018758:	7e 29                	jle    c0018783 <VAS::allocatePages(int, int)+0x5b>
c001875a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001875e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018762:	81 cf 00 04 00 00    	or     edi,0x400
c0018768:	e8 56 df ff ff       	call   c00166c3 <Phys::allocatePage()>
c001876d:	57                   	push   edi
c001876e:	53                   	push   ebx
c001876f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018775:	50                   	push   eax
c0018776:	56                   	push   esi
c0018777:	e8 a8 fe ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	39 dd                	cmp    ebp,ebx
c0018781:	75 e5                	jne    c0018768 <VAS::allocatePages(int, int)+0x40>
c0018783:	0f 20 d8             	mov    eax,cr3
c0018786:	0f 22 d8             	mov    cr3,eax
c0018789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001878d:	83 c4 1c             	add    esp,0x1c
c0018790:	5b                   	pop    ebx
c0018791:	5e                   	pop    esi
c0018792:	5f                   	pop    edi
c0018793:	5d                   	pop    ebp
c0018794:	c3                   	ret    
c0018795:	83 ec 0c             	sub    esp,0xc
c0018798:	68 b4 14 03 c0       	push   0xc00314b4
c001879d:	e8 c0 7a 00 00       	call   c0020262 <KePanic(char const*)>
c00187a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00187a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	eb 9a                	jmp    c0018748 <VAS::allocatePages(int, int)+0x20>
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	53                   	push   ebx
c00187b2:	e8 5a f7 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c00187b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00187c3:	77 37                	ja     c00187fc <VAS::allocatePages(int, int)+0xd4>
c00187c5:	85 db                	test   ebx,ebx
c00187c7:	7e ba                	jle    c0018783 <VAS::allocatePages(int, int)+0x5b>
c00187c9:	c1 e3 0c             	shl    ebx,0xc
c00187cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187d0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187d4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00187d7:	81 cf 00 04 00 00    	or     edi,0x400
c00187dd:	89 c3                	mov    ebx,eax
c00187df:	e8 df de ff ff       	call   c00166c3 <Phys::allocatePage()>
c00187e4:	57                   	push   edi
c00187e5:	53                   	push   ebx
c00187e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00187ec:	50                   	push   eax
c00187ed:	56                   	push   esi
c00187ee:	e8 31 fe ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	39 dd                	cmp    ebp,ebx
c00187f8:	75 e5                	jne    c00187df <VAS::allocatePages(int, int)+0xb7>
c00187fa:	eb 87                	jmp    c0018783 <VAS::allocatePages(int, int)+0x5b>
c00187fc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018801:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018807:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c001880e:	74 b5                	je     c00187c5 <VAS::allocatePages(int, int)+0x9d>
c0018810:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018814:	80 ce 01             	or     dh,0x1
c0018817:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001881b:	eb a8                	jmp    c00187c5 <VAS::allocatePages(int, int)+0x9d>
c001881d:	90                   	nop

c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001881e:	55                   	push   ebp
c001881f:	57                   	push   edi
c0018820:	56                   	push   esi
c0018821:	53                   	push   ebx
c0018822:	83 ec 0c             	sub    esp,0xc
c0018825:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018829:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001882d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018831:	85 db                	test   ebx,ebx
c0018833:	7e 2f                	jle    c0018864 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018835:	c1 e3 0c             	shl    ebx,0xc
c0018838:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001883c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018840:	01 d3                	add    ebx,edx
c0018842:	55                   	push   ebp
c0018843:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018847:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884b:	29 c2                	sub    edx,eax
c001884d:	01 f2                	add    edx,esi
c001884f:	52                   	push   edx
c0018850:	56                   	push   esi
c0018851:	81 c6 00 10 00 00    	add    esi,0x1000
c0018857:	57                   	push   edi
c0018858:	e8 c7 fd ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	39 de                	cmp    esi,ebx
c0018862:	75 de                	jne    c0018842 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018864:	0f 20 d8             	mov    eax,cr3
c0018867:	0f 22 d8             	mov    cr3,eax
c001886a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001886e:	83 c4 0c             	add    esp,0xc
c0018871:	5b                   	pop    ebx
c0018872:	5e                   	pop    esi
c0018873:	5f                   	pop    edi
c0018874:	5d                   	pop    ebp
c0018875:	c3                   	ret    

c0018876 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018876:	55                   	push   ebp
c0018877:	57                   	push   edi
c0018878:	56                   	push   esi
c0018879:	53                   	push   ebx
c001887a:	83 ec 1c             	sub    esp,0x1c
c001887d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018881:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018889:	09 f8                	or     eax,edi
c001888b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001888f:	a9 ff 0f 00 00       	test   eax,0xfff
c0018894:	75 4f                	jne    c00188e5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018896:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001889a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001889d:	c1 eb 16             	shr    ebx,0x16
c00188a0:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00188a7:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00188ab:	74 52                	je     c00188ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00188ad:	0f b6 f2             	movzx  esi,dl
c00188b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188b4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00188b8:	c1 e8 0a             	shr    eax,0xa
c00188bb:	83 fe 01             	cmp    esi,0x1
c00188be:	19 d2                	sbb    edx,edx
c00188c0:	c1 e3 0c             	shl    ebx,0xc
c00188c3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00188c9:	25 fc 0f 00 00       	and    eax,0xffc
c00188ce:	01 d8                	add    eax,ebx
c00188d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00188d4:	09 d9                	or     ecx,ebx
c00188d6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00188dd:	83 c4 1c             	add    esp,0x1c
c00188e0:	5b                   	pop    ebx
c00188e1:	5e                   	pop    esi
c00188e2:	5f                   	pop    edi
c00188e3:	5d                   	pop    ebp
c00188e4:	c3                   	ret    
c00188e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00188e9:	83 ec 0c             	sub    esp,0xc
c00188ec:	68 e0 14 03 c0       	push   0xc00314e0
c00188f1:	e8 6c 79 00 00       	call   c0020262 <KePanic(char const*)>
c00188f6:	83 c4 10             	add    esp,0x10
c00188f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188fd:	eb 97                	jmp    c0018896 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00188ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018903:	e8 bb dd ff ff       	call   c00166c3 <Phys::allocatePage()>
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	89 c5                	mov    ebp,eax
c001890d:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018913:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018917:	6a 01                	push   0x1
c0018919:	e8 f3 f5 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c001891e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018925:	6a 01                	push   0x1
c0018927:	50                   	push   eax
c0018928:	55                   	push   ebp
c0018929:	81 cd 07 04 00 00    	or     ebp,0x407
c001892f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018933:	51                   	push   ecx
c0018934:	e8 e5 fe ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018939:	83 c4 1c             	add    esp,0x1c
c001893c:	68 00 10 00 00       	push   0x1000
c0018941:	6a 00                	push   0x0
c0018943:	50                   	push   eax
c0018944:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018948:	e8 a3 7b fe ff       	call   c00004f0 <memset>
c001894d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018951:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018954:	e8 d6 f8 ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0018959:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018962:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018966:	e9 42 ff ff ff       	jmp    c00188ad <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c001896b:	90                   	nop

c001896c <VAS::VAS(bool)>:
c001896c:	53                   	push   ebx
c001896d:	83 ec 28             	sub    esp,0x28
c0018970:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018974:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001897c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018987:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001898e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018992:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018996:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018999:	e8 25 dd ff ff       	call   c00166c3 <Phys::allocatePage()>
c001899e:	89 c2                	mov    edx,eax
c00189a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00189a7:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00189ad:	83 ec 0c             	sub    esp,0xc
c00189b0:	6a 01                	push   0x1
c00189b2:	e8 5a f5 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	89 c2                	mov    edx,eax
c00189bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189c3:	83 ec 0c             	sub    esp,0xc
c00189c6:	6a 03                	push   0x3
c00189c8:	6a 01                	push   0x1
c00189ca:	52                   	push   edx
c00189cb:	50                   	push   eax
c00189cc:	53                   	push   ebx
c00189cd:	e8 4c fe ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189d2:	83 c4 20             	add    esp,0x20
c00189d5:	89 c2                	mov    edx,eax
c00189d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00189de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00189e6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00189ee:	7f 1d                	jg     c0018a0d <VAS::VAS(bool)+0xa1>
c00189f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189fb:	c1 e2 02             	shl    edx,0x2
c00189fe:	01 d0                	add    eax,edx
c0018a00:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a06:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018a0b:	eb d9                	jmp    c00189e6 <VAS::VAS(bool)+0x7a>
c0018a0d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018a15:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018a1d:	7f 7e                	jg     c0018a9d <VAS::VAS(bool)+0x131>
c0018a1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a23:	2d 00 02 00 00       	sub    eax,0x200
c0018a28:	c1 e0 0c             	shl    eax,0xc
c0018a2b:	83 c8 05             	or     eax,0x5
c0018a2e:	89 c2                	mov    edx,eax
c0018a30:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a3b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a41:	83 e0 10             	and    eax,0x10
c0018a44:	0f b6 c0             	movzx  eax,al
c0018a47:	85 c0                	test   eax,eax
c0018a49:	74 07                	je     c0018a52 <VAS::VAS(bool)+0xe6>
c0018a4b:	b8 00 01 00 00       	mov    eax,0x100
c0018a50:	eb 05                	jmp    c0018a57 <VAS::VAS(bool)+0xeb>
c0018a52:	b8 00 00 00 00       	mov    eax,0x0
c0018a57:	09 d0                	or     eax,edx
c0018a59:	89 c1                	mov    ecx,eax
c0018a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a66:	c1 e2 02             	shl    edx,0x2
c0018a69:	01 d0                	add    eax,edx
c0018a6b:	89 ca                	mov    edx,ecx
c0018a6d:	89 10                	mov    DWORD PTR [eax],edx
c0018a6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a73:	2d 40 03 00 00       	sub    eax,0x340
c0018a78:	83 f8 7f             	cmp    eax,0x7f
c0018a7b:	77 16                	ja     c0018a93 <VAS::VAS(bool)+0x127>
c0018a7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a88:	c1 e2 02             	shl    edx,0x2
c0018a8b:	01 d0                	add    eax,edx
c0018a8d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a93:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018a98:	e9 78 ff ff ff       	jmp    c0018a15 <VAS::VAS(bool)+0xa9>
c0018a9d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018aa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aa8:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aae:	83 e0 10             	and    eax,0x10
c0018ab1:	0f b6 c0             	movzx  eax,al
c0018ab4:	85 c0                	test   eax,eax
c0018ab6:	74 07                	je     c0018abf <VAS::VAS(bool)+0x153>
c0018ab8:	b8 03 41 00 00       	mov    eax,0x4103
c0018abd:	eb 05                	jmp    c0018ac4 <VAS::VAS(bool)+0x158>
c0018abf:	b8 03 40 00 00       	mov    eax,0x4003
c0018ac4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ac8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018acb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018ad1:	89 02                	mov    DWORD PTR [edx],eax
c0018ad3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ad7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ada:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018adf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ae5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aeb:	83 e0 10             	and    eax,0x10
c0018aee:	0f b6 c0             	movzx  eax,al
c0018af1:	85 c0                	test   eax,eax
c0018af3:	74 07                	je     c0018afc <VAS::VAS(bool)+0x190>
c0018af5:	b8 00 01 00 00       	mov    eax,0x100
c0018afa:	eb 05                	jmp    c0018b01 <VAS::VAS(bool)+0x195>
c0018afc:	b8 00 00 00 00       	mov    eax,0x0
c0018b01:	09 c2                	or     edx,eax
c0018b03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b0a:	05 fc 0f 00 00       	add    eax,0xffc
c0018b0f:	83 ca 03             	or     edx,0x3
c0018b12:	89 10                	mov    DWORD PTR [eax],edx
c0018b14:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b1f:	83 ec 0c             	sub    esp,0xc
c0018b22:	50                   	push   eax
c0018b23:	e8 00 2a 00 00       	call   c001b528 <Device::getName()>
c0018b28:	83 c4 10             	add    esp,0x10
c0018b2b:	83 ec 08             	sub    esp,0x8
c0018b2e:	68 b0 16 03 c0       	push   0xc00316b0
c0018b33:	50                   	push   eax
c0018b34:	e8 17 7c fe ff       	call   c0000750 <strcmp>
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	0f 94 c0             	sete   al
c0018b41:	0f b6 c0             	movzx  eax,al
c0018b44:	85 c0                	test   eax,eax
c0018b46:	74 68                	je     c0018bb0 <VAS::VAS(bool)+0x244>
c0018b48:	fa                   	cli    
c0018b49:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b54:	05 7c 09 00 00       	add    eax,0x97c
c0018b59:	83 ec 0c             	sub    esp,0xc
c0018b5c:	50                   	push   eax
c0018b5d:	e8 50 d3 ff ff       	call   c0015eb2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b62:	83 c4 10             	add    esp,0x10
c0018b65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b6a:	89 c3                	mov    ebx,eax
c0018b6c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b77:	05 7c 09 00 00       	add    eax,0x97c
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	50                   	push   eax
c0018b80:	e8 2d d3 ff ff       	call   c0015eb2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b85:	83 c4 10             	add    esp,0x10
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	50                   	push   eax
c0018b8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b90:	e8 7b f6 ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c0018b95:	83 c4 10             	add    esp,0x10
c0018b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b9f:	6a 11                	push   0x11
c0018ba1:	53                   	push   ebx
c0018ba2:	50                   	push   eax
c0018ba3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ba7:	e8 78 fa ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018bac:	83 c4 10             	add    esp,0x10
c0018baf:	fb                   	sti    
c0018bb0:	90                   	nop
c0018bb1:	83 c4 28             	add    esp,0x28
c0018bb4:	5b                   	pop    ebx
c0018bb5:	c3                   	ret    

c0018bb6 <VAS::evict(unsigned long)>:
c0018bb6:	55                   	push   ebp
c0018bb7:	57                   	push   edi
c0018bb8:	56                   	push   esi
c0018bb9:	53                   	push   ebx
c0018bba:	83 ec 1c             	sub    esp,0x1c
c0018bbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bc9:	e8 a1 f4 ff ff       	call   c001806f <Virt::allocateSwapfilePage()>
c0018bce:	89 c7                	mov    edi,eax
c0018bd0:	a1 ec 3b 03 c0       	mov    eax,ds:0xc0033bec
c0018bd5:	85 c0                	test   eax,eax
c0018bd7:	7e 40                	jle    c0018c19 <VAS::evict(unsigned long)+0x63>
c0018bd9:	89 ee                	mov    esi,ebp
c0018bdb:	31 db                	xor    ebx,ebx
c0018bdd:	83 ec 0c             	sub    esp,0xc
c0018be0:	57                   	push   edi
c0018be1:	e8 73 f4 ff ff       	call   c0018059 <Virt::swapIDToSector(unsigned long)>
c0018be6:	89 34 24             	mov    DWORD PTR [esp],esi
c0018be9:	01 d8                	add    eax,ebx
c0018beb:	6a 01                	push   0x1
c0018bed:	31 d2                	xor    edx,edx
c0018bef:	83 c3 01             	add    ebx,0x1
c0018bf2:	52                   	push   edx
c0018bf3:	81 c6 00 02 00 00    	add    esi,0x200
c0018bf9:	50                   	push   eax
c0018bfa:	0f be 05 f8 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033bf8
c0018c01:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018c08:	50                   	push   eax
c0018c09:	e8 1a 3b 00 00       	call   c001c728 <LogicalDisk::write(unsigned long long, int, void*)>
c0018c0e:	83 c4 20             	add    esp,0x20
c0018c11:	39 1d ec 3b 03 c0    	cmp    DWORD PTR ds:0xc0033bec,ebx
c0018c17:	7f c4                	jg     c0018bdd <VAS::evict(unsigned long)+0x27>
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	c1 e7 0c             	shl    edi,0xc
c0018c1f:	55                   	push   ebp
c0018c20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c24:	50                   	push   eax
c0018c25:	e8 e6 f5 ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c0018c2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c2c:	89 d3                	mov    ebx,edx
c0018c2e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018c34:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c3a:	09 d7                	or     edi,edx
c0018c3c:	89 38                	mov    DWORD PTR [eax],edi
c0018c3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c41:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018c47:	83 c2 01             	add    edx,0x1
c0018c4a:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018c50:	e8 05 da ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c0018c55:	0f 20 d8             	mov    eax,cr3
c0018c58:	0f 22 d8             	mov    cr3,eax
c0018c5b:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c61:	51                   	push   ecx
c0018c62:	55                   	push   ebp
c0018c63:	53                   	push   ebx
c0018c64:	68 04 15 03 c0       	push   0xc0031504
c0018c69:	e8 db 05 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018c6e:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c73:	c7 44 24 50 be 16 03 c0 	mov    DWORD PTR [esp+0x50],0xc00316be
c0018c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0018c7e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c82:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c88:	83 c4 3c             	add    esp,0x3c
c0018c8b:	5b                   	pop    ebx
c0018c8c:	5e                   	pop    esi
c0018c8d:	5f                   	pop    edi
c0018c8e:	5d                   	pop    ebp
c0018c8f:	e9 b5 05 00 00       	jmp    c0019249 <Dbg::kprintf(char const*, ...)>

c0018c94 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018c94:	55                   	push   ebp
c0018c95:	57                   	push   edi
c0018c96:	56                   	push   esi
c0018c97:	53                   	push   ebx
c0018c98:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018c9e:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018ca5:	89 f3                	mov    ebx,esi
c0018ca7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018cad:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018cb3:	77 22                	ja     c0018cd7 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018cb5:	83 ec 08             	sub    esp,0x8
c0018cb8:	56                   	push   esi
c0018cb9:	68 e1 16 03 c0       	push   0xc00316e1
c0018cbe:	e8 86 05 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	85 db                	test   ebx,ebx
c0018cc8:	75 2a                	jne    c0018cf4 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018cca:	31 c0                	xor    eax,eax
c0018ccc:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018cd2:	5b                   	pop    ebx
c0018cd3:	5e                   	pop    esi
c0018cd4:	5f                   	pop    edi
c0018cd5:	5d                   	pop    ebp
c0018cd6:	c3                   	ret    
c0018cd7:	83 ec 0c             	sub    esp,0xc
c0018cda:	68 cf 16 03 c0       	push   0xc00316cf
c0018cdf:	e8 7e 75 00 00       	call   c0020262 <KePanic(char const*)>
c0018ce4:	5f                   	pop    edi
c0018ce5:	5d                   	pop    ebp
c0018ce6:	56                   	push   esi
c0018ce7:	68 e1 16 03 c0       	push   0xc00316e1
c0018cec:	e8 58 05 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018cf1:	83 c4 10             	add    esp,0x10
c0018cf4:	83 ec 08             	sub    esp,0x8
c0018cf7:	53                   	push   ebx
c0018cf8:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018cff:	51                   	push   ecx
c0018d00:	e8 0b f5 ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	89 c2                	mov    edx,eax
c0018d0a:	85 c0                	test   eax,eax
c0018d0c:	74 bc                	je     c0018cca <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d0e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018d10:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018d16:	0f 85 c0 00 00 00    	jne    c0018ddc <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018d1c:	89 e8                	mov    eax,ebp
c0018d1e:	25 01 04 00 00       	and    eax,0x401
c0018d23:	3d 00 04 00 00       	cmp    eax,0x400
c0018d28:	75 a0                	jne    c0018cca <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d2e:	c1 ed 0c             	shr    ebp,0xc
c0018d31:	e8 8d d9 ff ff       	call   c00166c3 <Phys::allocatePage()>
c0018d36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d3a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d3c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018d42:	09 c1                	or     ecx,eax
c0018d44:	81 c9 01 08 00 00    	or     ecx,0x801
c0018d4a:	89 0a                	mov    DWORD PTR [edx],ecx
c0018d4c:	8b 15 ec 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033bec
c0018d52:	85 d2                	test   edx,edx
c0018d54:	7e 40                	jle    c0018d96 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018d56:	89 df                	mov    edi,ebx
c0018d58:	31 f6                	xor    esi,esi
c0018d5a:	83 ec 0c             	sub    esp,0xc
c0018d5d:	55                   	push   ebp
c0018d5e:	e8 f6 f2 ff ff       	call   c0018059 <Virt::swapIDToSector(unsigned long)>
c0018d63:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018d66:	01 f0                	add    eax,esi
c0018d68:	6a 01                	push   0x1
c0018d6a:	31 d2                	xor    edx,edx
c0018d6c:	83 c6 01             	add    esi,0x1
c0018d6f:	52                   	push   edx
c0018d70:	81 c7 00 02 00 00    	add    edi,0x200
c0018d76:	50                   	push   eax
c0018d77:	0f be 05 f8 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033bf8
c0018d7e:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018d85:	50                   	push   eax
c0018d86:	e8 31 39 00 00       	call   c001c6bc <LogicalDisk::read(unsigned long long, int, void*)>
c0018d8b:	83 c4 20             	add    esp,0x20
c0018d8e:	39 35 ec 3b 03 c0    	cmp    DWORD PTR ds:0xc0033bec,esi
c0018d94:	7f c4                	jg     c0018d5a <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018d96:	83 ec 04             	sub    esp,0x4
c0018d99:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018d9e:	83 e8 01             	sub    eax,0x1
c0018da1:	50                   	push   eax
c0018da2:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018da7:	53                   	push   ebx
c0018da8:	68 f4 16 03 c0       	push   0xc00316f4
c0018dad:	e8 97 04 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018db2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018db5:	e8 7c f2 ff ff       	call   c0018036 <Virt::freeSwapfilePage(unsigned long)>
c0018dba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	83 e8 01             	sub    eax,0x1
c0018dc5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018dca:	85 c0                	test   eax,eax
c0018dcc:	75 01                	jne    c0018dcf <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018dce:	fb                   	sti    
c0018dcf:	0f 20 d8             	mov    eax,cr3
c0018dd2:	0f 22 d8             	mov    cr3,eax
c0018dd5:	b0 01                	mov    al,0x1
c0018dd7:	e9 f0 fe ff ff       	jmp    c0018ccc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018ddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018de0:	bd 00 10 00 00       	mov    ebp,0x1000
c0018de5:	83 ec 0c             	sub    esp,0xc
c0018de8:	89 de                	mov    esi,ebx
c0018dea:	68 34 15 03 c0       	push   0xc0031534
c0018def:	e8 55 04 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018df4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018df8:	e8 c6 d8 ff ff       	call   c00166c3 <Phys::allocatePage()>
c0018dfd:	89 e9                	mov    ecx,ebp
c0018dff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e05:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018e07:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018e0d:	09 c8                	or     eax,ecx
c0018e0f:	83 c8 02             	or     eax,0x2
c0018e12:	89 02                	mov    DWORD PTR [edx],eax
c0018e14:	0f 20 d8             	mov    eax,cr3
c0018e17:	0f 22 d8             	mov    cr3,eax
c0018e1a:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018e1e:	89 df                	mov    edi,ebx
c0018e20:	89 e9                	mov    ecx,ebp
c0018e22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e24:	b0 01                	mov    al,0x1
c0018e26:	83 c4 10             	add    esp,0x10
c0018e29:	e9 9e fe ff ff       	jmp    c0018ccc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018e2e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018e2e:	55                   	push   ebp
c0018e2f:	57                   	push   edi
c0018e30:	56                   	push   esi
c0018e31:	53                   	push   ebx
c0018e32:	83 ec 28             	sub    esp,0x28
c0018e35:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018e39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e3d:	50                   	push   eax
c0018e3e:	e8 ce f0 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c0018e43:	83 c4 0c             	add    esp,0xc
c0018e46:	89 c5                	mov    ebp,eax
c0018e48:	6a 07                	push   0x7
c0018e4a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e4e:	52                   	push   edx
c0018e4f:	56                   	push   esi
c0018e50:	e8 d3 f8 ff ff       	call   c0018728 <VAS::allocatePages(int, int)>
c0018e55:	83 c4 10             	add    esp,0x10
c0018e58:	89 c7                	mov    edi,eax
c0018e5a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e5e:	85 c9                	test   ecx,ecx
c0018e60:	74 2f                	je     c0018e91 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e62:	31 db                	xor    ebx,ebx
c0018e64:	e8 5a d8 ff ff       	call   c00166c3 <Phys::allocatePage()>
c0018e69:	83 c3 01             	add    ebx,0x1
c0018e6c:	6a 03                	push   0x3
c0018e6e:	55                   	push   ebp
c0018e6f:	50                   	push   eax
c0018e70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e74:	56                   	push   esi
c0018e75:	e8 aa f7 ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e7a:	6a 07                	push   0x7
c0018e7c:	57                   	push   edi
c0018e7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e81:	50                   	push   eax
c0018e82:	56                   	push   esi
c0018e83:	e8 9c f7 ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e88:	83 c4 20             	add    esp,0x20
c0018e8b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018e8f:	75 d3                	jne    c0018e64 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018e91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e95:	89 28                	mov    DWORD PTR [eax],ebp
c0018e97:	83 c4 1c             	add    esp,0x1c
c0018e9a:	89 f8                	mov    eax,edi
c0018e9c:	5b                   	pop    ebx
c0018e9d:	5e                   	pop    esi
c0018e9e:	5f                   	pop    edi
c0018e9f:	5d                   	pop    ebp
c0018ea0:	c3                   	ret    
c0018ea1:	90                   	nop

c0018ea2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018ea2:	53                   	push   ebx
c0018ea3:	83 ec 14             	sub    esp,0x14
c0018ea6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018eaa:	68 54 15 03 c0       	push   0xc0031554
c0018eaf:	e8 95 03 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018eb4:	c7 04 24 b4 15 03 c0 	mov    DWORD PTR [esp],0xc00315b4
c0018ebb:	e8 89 03 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018ec0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018ec4:	83 c4 18             	add    esp,0x18
c0018ec7:	5b                   	pop    ebx
c0018ec8:	e9 62 f3 ff ff       	jmp    c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0018ecd:	90                   	nop

c0018ece <VAS::scanForEviction()>:
c0018ece:	57                   	push   edi
c0018ecf:	56                   	push   esi
c0018ed0:	31 f6                	xor    esi,esi
c0018ed2:	53                   	push   ebx
c0018ed3:	83 ec 10             	sub    esp,0x10
c0018ed6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018eda:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018edd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ee3:	75 0e                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018ee5:	89 da                	mov    edx,ebx
c0018ee7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018eea:	c1 ea 16             	shr    edx,0x16
c0018eed:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ef1:	74 57                	je     c0018f4a <VAS::scanForEviction()+0x7c>
c0018ef3:	53                   	push   ebx
c0018ef4:	57                   	push   edi
c0018ef5:	e8 16 f3 ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c0018efa:	5a                   	pop    edx
c0018efb:	8b 10                	mov    edx,DWORD PTR [eax]
c0018efd:	59                   	pop    ecx
c0018efe:	89 d1                	mov    ecx,edx
c0018f00:	c1 e9 0c             	shr    ecx,0xc
c0018f03:	74 10                	je     c0018f15 <VAS::scanForEviction()+0x47>
c0018f05:	89 d1                	mov    ecx,edx
c0018f07:	81 e1 01 08 00 00    	and    ecx,0x801
c0018f0d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018f13:	74 40                	je     c0018f55 <VAS::scanForEviction()+0x87>
c0018f15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018f1b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018f21:	76 2d                	jbe    c0018f50 <VAS::scanForEviction()+0x82>
c0018f23:	83 c6 01             	add    esi,0x1
c0018f26:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018f2d:	83 fe 03             	cmp    esi,0x3
c0018f30:	74 32                	je     c0018f64 <VAS::scanForEviction()+0x96>
c0018f32:	31 db                	xor    ebx,ebx
c0018f34:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f3a:	75 b7                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018f3c:	89 da                	mov    edx,ebx
c0018f3e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f41:	c1 ea 16             	shr    edx,0x16
c0018f44:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f48:	75 a9                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018f4a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018f50:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018f53:	eb 88                	jmp    c0018edd <VAS::scanForEviction()+0xf>
c0018f55:	f6 c2 20             	test   dl,0x20
c0018f58:	74 13                	je     c0018f6d <VAS::scanForEviction()+0x9f>
c0018f5a:	83 e2 df             	and    edx,0xffffffdf
c0018f5d:	89 10                	mov    DWORD PTR [eax],edx
c0018f5f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f62:	eb b1                	jmp    c0018f15 <VAS::scanForEviction()+0x47>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	31 c0                	xor    eax,eax
c0018f69:	5b                   	pop    ebx
c0018f6a:	5e                   	pop    esi
c0018f6b:	5f                   	pop    edi
c0018f6c:	c3                   	ret    
c0018f6d:	83 ec 08             	sub    esp,0x8
c0018f70:	89 d0                	mov    eax,edx
c0018f72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f7b:	53                   	push   ebx
c0018f7c:	68 09 17 03 c0       	push   0xc0031709
c0018f81:	e8 c3 02 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018f86:	58                   	pop    eax
c0018f87:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f8a:	5a                   	pop    edx
c0018f8b:	51                   	push   ecx
c0018f8c:	57                   	push   edi
c0018f8d:	e8 24 fc ff ff       	call   c0018bb6 <VAS::evict(unsigned long)>
c0018f92:	5b                   	pop    ebx
c0018f93:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018f96:	5e                   	pop    esi
c0018f97:	50                   	push   eax
c0018f98:	68 1d 17 03 c0       	push   0xc003171d
c0018f9d:	e8 a7 02 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018fa2:	58                   	pop    eax
c0018fa3:	5a                   	pop    edx
c0018fa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fa8:	50                   	push   eax
c0018fa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fad:	68 30 17 03 c0       	push   0xc0031730
c0018fb2:	e8 92 02 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0018fb7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fc7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	5b                   	pop    ebx
c0018fce:	5e                   	pop    esi
c0018fcf:	5f                   	pop    edi
c0018fd0:	c3                   	ret    

c0018fd1 <mapVASFirstTime>:
c0018fd1:	55                   	push   ebp
c0018fd2:	57                   	push   edi
c0018fd3:	56                   	push   esi
c0018fd4:	53                   	push   ebx
c0018fd5:	83 ec 0c             	sub    esp,0xc
c0018fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fdd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018fe0:	83 fa 01             	cmp    edx,0x1
c0018fe3:	0f 84 cb 00 00 00    	je     c00190b4 <mapVASFirstTime+0xe3>
c0018fe9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018fec:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018fef:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018ff4:	c1 e5 15             	shl    ebp,0x15
c0018ff7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018ffc:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0019002:	29 eb                	sub    ebx,ebp
c0019004:	29 ef                	sub    edi,ebp
c0019006:	e8 b8 d6 ff ff       	call   c00166c3 <Phys::allocatePage()>
c001900b:	83 ec 0c             	sub    esp,0xc
c001900e:	68 03 04 00 00       	push   0x403
c0019013:	6a 01                	push   0x1
c0019015:	53                   	push   ebx
c0019016:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001901c:	50                   	push   eax
c001901d:	56                   	push   esi
c001901e:	e8 fb f7 ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019023:	83 c4 20             	add    esp,0x20
c0019026:	39 fb                	cmp    ebx,edi
c0019028:	75 dc                	jne    c0019006 <mapVASFirstTime+0x35>
c001902a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001902f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019034:	29 eb                	sub    ebx,ebp
c0019036:	29 ef                	sub    edi,ebp
c0019038:	e8 86 d6 ff ff       	call   c00166c3 <Phys::allocatePage()>
c001903d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019041:	83 fa 01             	cmp    edx,0x1
c0019044:	19 d2                	sbb    edx,edx
c0019046:	83 ec 0c             	sub    esp,0xc
c0019049:	83 e2 04             	and    edx,0x4
c001904c:	81 c2 03 04 00 00    	add    edx,0x403
c0019052:	52                   	push   edx
c0019053:	6a 01                	push   0x1
c0019055:	53                   	push   ebx
c0019056:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001905c:	50                   	push   eax
c001905d:	56                   	push   esi
c001905e:	e8 bb f7 ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019063:	83 c4 20             	add    esp,0x20
c0019066:	39 df                	cmp    edi,ebx
c0019068:	75 ce                	jne    c0019038 <mapVASFirstTime+0x67>
c001906a:	83 ec 0c             	sub    esp,0xc
c001906d:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0019072:	6a 04                	push   0x4
c0019074:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c001907a:	6a ff                	push   0xffffffff
c001907c:	c1 eb 0c             	shr    ebx,0xc
c001907f:	53                   	push   ebx
c0019080:	68 00 50 03 c0       	push   0xc0035000
c0019085:	56                   	push   esi
c0019086:	e8 1f f3 ff ff       	call   c00183aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001908b:	83 c4 14             	add    esp,0x14
c001908e:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0019093:	6a 04                	push   0x4
c0019095:	6a ff                	push   0xffffffff
c0019097:	53                   	push   ebx
c0019098:	68 00 50 03 c0       	push   0xc0035000
c001909d:	50                   	push   eax
c001909e:	e8 07 f3 ff ff       	call   c00183aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00190a3:	0f 20 d8             	mov    eax,cr3
c00190a6:	0f 22 d8             	mov    cr3,eax
c00190a9:	83 c4 20             	add    esp,0x20
c00190ac:	83 c4 0c             	add    esp,0xc
c00190af:	5b                   	pop    ebx
c00190b0:	5e                   	pop    esi
c00190b1:	5f                   	pop    edi
c00190b2:	5d                   	pop    ebp
c00190b3:	c3                   	ret    
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	68 3d 17 03 c0       	push   0xc003173d
c00190bc:	e8 88 01 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	83 c4 0c             	add    esp,0xc
c00190c7:	5b                   	pop    ebx
c00190c8:	5e                   	pop    esi
c00190c9:	5f                   	pop    edi
c00190ca:	5d                   	pop    ebp
c00190cb:	c3                   	ret    

c00190cc <__cxa_atexit>:
c00190cc:	31 c0                	xor    eax,eax
c00190ce:	c3                   	ret    

c00190cf <__cxa_finalize>:
c00190cf:	c3                   	ret    

c00190d0 <__stack_chk_fail>:
c00190d0:	55                   	push   ebp
c00190d1:	89 e5                	mov    ebp,esp
c00190d3:	83 ec 10             	sub    esp,0x10
c00190d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190d9:	68 56 17 03 c0       	push   0xc0031756
c00190de:	e8 66 01 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00190e3:	58                   	pop    eax
c00190e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190e7:	5a                   	pop    edx
c00190e8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00190eb:	68 56 17 03 c0       	push   0xc0031756
c00190f0:	e8 54 01 00 00       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00190f5:	c7 04 24 5e 17 03 c0 	mov    DWORD PTR [esp],0xc003175e
c00190fc:	e8 61 71 00 00       	call   c0020262 <KePanic(char const*)>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	c9                   	leave  
c0019105:	c3                   	ret    

c0019106 <__cxa_pure_virtual>:
c0019106:	83 ec 18             	sub    esp,0x18
c0019109:	68 76 17 03 c0       	push   0xc0031776
c001910e:	e8 4f 71 00 00       	call   c0020262 <KePanic(char const*)>
c0019113:	83 c4 1c             	add    esp,0x1c
c0019116:	c3                   	ret    

c0019117 <operator new[](unsigned long)>:
c0019117:	e9 9e d2 ff ff       	jmp    c00163ba <malloc>

c001911c <operator delete(void*, unsigned long)>:
c001911c:	e9 b9 d2 ff ff       	jmp    c00163da <rfree>

c0019121 <operator delete[](void*)>:
c0019121:	e9 b4 d2 ff ff       	jmp    c00163da <rfree>

c0019126 <operator delete[](void*, unsigned long)>:
c0019126:	e9 af d2 ff ff       	jmp    c00163da <rfree>

c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001912b:	55                   	push   ebp
c001912c:	57                   	push   edi
c001912d:	56                   	push   esi
c001912e:	be 7f 12 03 c0       	mov    esi,0xc003127f
c0019133:	53                   	push   ebx
c0019134:	83 ec 20             	sub    esp,0x20
c0019137:	a0 7e 12 03 c0       	mov    al,ds:0xc003127e
c001913c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019140:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019144:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001914c:	b8 10 00 00 00       	mov    eax,0x10
c0019151:	f7 c7 02 00 00 00    	test   edi,0x2
c0019157:	75 60                	jne    c00191b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019159:	89 c1                	mov    ecx,eax
c001915b:	c1 e9 02             	shr    ecx,0x2
c001915e:	fc                   	cld    
c001915f:	31 d2                	xor    edx,edx
c0019161:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019163:	a8 02                	test   al,0x2
c0019165:	74 0b                	je     c0019172 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0019167:	66 8b 16             	mov    dx,WORD PTR [esi]
c001916a:	66 89 17             	mov    WORD PTR [edi],dx
c001916d:	ba 02 00 00 00       	mov    edx,0x2
c0019172:	a8 01                	test   al,0x1
c0019174:	74 06                	je     c001917c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0019176:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019179:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c001917c:	89 ee                	mov    esi,ebp
c001917e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0019182:	eb 02                	jmp    c0019186 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0019184:	89 c6                	mov    esi,eax
c0019186:	31 d2                	xor    edx,edx
c0019188:	83 c1 01             	add    ecx,0x1
c001918b:	89 f0                	mov    eax,esi
c001918d:	f7 f3                	div    ebx
c001918f:	39 de                	cmp    esi,ebx
c0019191:	73 f1                	jae    c0019184 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0019193:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0019196:	eb 02                	jmp    c001919a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0019198:	89 c5                	mov    ebp,eax
c001919a:	31 d2                	xor    edx,edx
c001919c:	83 e9 01             	sub    ecx,0x1
c001919f:	89 e8                	mov    eax,ebp
c00191a1:	f7 f3                	div    ebx
c00191a3:	39 dd                	cmp    ebp,ebx
c00191a5:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00191a9:	88 11                	mov    BYTE PTR [ecx],dl
c00191ab:	73 eb                	jae    c0019198 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00191ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191b1:	83 c4 20             	add    esp,0x20
c00191b4:	5b                   	pop    ebx
c00191b5:	5e                   	pop    esi
c00191b6:	5f                   	pop    edi
c00191b7:	5d                   	pop    ebp
c00191b8:	c3                   	ret    
c00191b9:	66 8b 16             	mov    dx,WORD PTR [esi]
c00191bc:	83 c7 02             	add    edi,0x2
c00191bf:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00191c3:	83 c6 02             	add    esi,0x2
c00191c6:	83 e8 02             	sub    eax,0x2
c00191c9:	eb 8e                	jmp    c0019159 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00191cb <Dbg::logc(char)>:
c00191cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191cf:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191d6:	75 12                	jne    c00191ea <Dbg::logc(char)+0x1f>
c00191d8:	ba fd 03 00 00       	mov    edx,0x3fd
c00191dd:	ec                   	in     al,dx
c00191de:	a8 20                	test   al,0x20
c00191e0:	74 fb                	je     c00191dd <Dbg::logc(char)+0x12>
c00191e2:	ba f8 03 00 00       	mov    edx,0x3f8
c00191e7:	88 c8                	mov    al,cl
c00191e9:	ee                   	out    dx,al
c00191ea:	c3                   	ret    

c00191eb <Dbg::logs(char*)>:
c00191eb:	53                   	push   ebx
c00191ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00191f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191f3:	85 c0                	test   eax,eax
c00191f5:	74 11                	je     c0019208 <Dbg::logs(char*)+0x1d>
c00191f7:	83 c3 01             	add    ebx,0x1
c00191fa:	50                   	push   eax
c00191fb:	e8 cb ff ff ff       	call   c00191cb <Dbg::logc(char)>
c0019200:	58                   	pop    eax
c0019201:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019204:	85 c0                	test   eax,eax
c0019206:	75 ef                	jne    c00191f7 <Dbg::logs(char*)+0xc>
c0019208:	5b                   	pop    ebx
c0019209:	c3                   	ret    

c001920a <Dbg::logWriteInt(unsigned int)>:
c001920a:	83 ec 10             	sub    esp,0x10
c001920d:	6a 0a                	push   0xa
c001920f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019213:	50                   	push   eax
c0019214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019218:	50                   	push   eax
c0019219:	e8 0d ff ff ff       	call   c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001921e:	50                   	push   eax
c001921f:	e8 c7 ff ff ff       	call   c00191eb <Dbg::logs(char*)>
c0019224:	83 c4 20             	add    esp,0x20
c0019227:	c3                   	ret    

c0019228 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019228:	83 ec 10             	sub    esp,0x10
c001922b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001922f:	50                   	push   eax
c0019230:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019234:	50                   	push   eax
c0019235:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019239:	52                   	push   edx
c001923a:	e8 ec fe ff ff       	call   c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001923f:	50                   	push   eax
c0019240:	e8 a6 ff ff ff       	call   c00191eb <Dbg::logs(char*)>
c0019245:	83 c4 20             	add    esp,0x20
c0019248:	c3                   	ret    

c0019249 <Dbg::kprintf(char const*, ...)>:
c0019249:	55                   	push   ebp
c001924a:	57                   	push   edi
c001924b:	56                   	push   esi
c001924c:	53                   	push   ebx
c001924d:	83 ec 0c             	sub    esp,0xc
c0019250:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019254:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001925b:	74 08                	je     c0019265 <Dbg::kprintf(char const*, ...)+0x1c>
c001925d:	83 c4 0c             	add    esp,0xc
c0019260:	5b                   	pop    ebx
c0019261:	5e                   	pop    esi
c0019262:	5f                   	pop    edi
c0019263:	5d                   	pop    ebp
c0019264:	c3                   	ret    
c0019265:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019269:	31 ff                	xor    edi,edi
c001926b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001926f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019272:	85 c0                	test   eax,eax
c0019274:	74 e7                	je     c001925d <Dbg::kprintf(char const*, ...)+0x14>
c0019276:	8d 77 01             	lea    esi,[edi+0x1]
c0019279:	83 f8 25             	cmp    eax,0x25
c001927c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001927f:	75 47                	jne    c00192c8 <Dbg::kprintf(char const*, ...)+0x7f>
c0019281:	83 c7 02             	add    edi,0x2
c0019284:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019287:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001928a:	83 e8 25             	sub    eax,0x25
c001928d:	0f b6 c0             	movzx  eax,al
c0019290:	83 f8 53             	cmp    eax,0x53
c0019293:	0f 87 ce 00 00 00    	ja     c0019367 <Dbg::kprintf(char const*, ...)+0x11e>
c0019299:	ff 24 85 8c 17 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce874]
c00192a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192a4:	89 c8                	mov    eax,ecx
c00192a6:	83 c1 04             	add    ecx,0x4
c00192a9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192ad:	8b 28                	mov    ebp,DWORD PTR [eax]
c00192af:	55                   	push   ebp
c00192b0:	e8 55 ff ff ff       	call   c001920a <Dbg::logWriteInt(unsigned int)>
c00192b5:	58                   	pop    eax
c00192b6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00192b9:	85 c0                	test   eax,eax
c00192bb:	74 a0                	je     c001925d <Dbg::kprintf(char const*, ...)+0x14>
c00192bd:	8d 77 01             	lea    esi,[edi+0x1]
c00192c0:	83 f8 25             	cmp    eax,0x25
c00192c3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00192c6:	74 b9                	je     c0019281 <Dbg::kprintf(char const*, ...)+0x38>
c00192c8:	50                   	push   eax
c00192c9:	89 f7                	mov    edi,esi
c00192cb:	e8 fb fe ff ff       	call   c00191cb <Dbg::logc(char)>
c00192d0:	89 ee                	mov    esi,ebp
c00192d2:	58                   	pop    eax
c00192d3:	eb e1                	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c00192d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192d9:	89 c8                	mov    eax,ecx
c00192db:	83 c1 04             	add    ecx,0x4
c00192de:	8b 00                	mov    eax,DWORD PTR [eax]
c00192e0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192e4:	50                   	push   eax
c00192e5:	e8 01 ff ff ff       	call   c00191eb <Dbg::logs(char*)>
c00192ea:	58                   	pop    eax
c00192eb:	eb c9                	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c00192ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192f1:	89 d0                	mov    eax,edx
c00192f3:	83 c2 04             	add    edx,0x4
c00192f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00192fc:	50                   	push   eax
c00192fd:	e8 08 ff ff ff       	call   c001920a <Dbg::logWriteInt(unsigned int)>
c0019302:	58                   	pop    eax
c0019303:	eb b1                	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c0019305:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019309:	89 d0                	mov    eax,edx
c001930b:	83 c2 04             	add    edx,0x4
c001930e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019311:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019315:	50                   	push   eax
c0019316:	e8 b0 fe ff ff       	call   c00191cb <Dbg::logc(char)>
c001931b:	58                   	pop    eax
c001931c:	eb 98                	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c001931e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019322:	89 c8                	mov    eax,ecx
c0019324:	83 c1 04             	add    ecx,0x4
c0019327:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001932b:	6a 10                	push   0x10
c001932d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001932f:	51                   	push   ecx
c0019330:	e8 f3 fe ff ff       	call   c0019228 <Dbg::logWriteIntBase(unsigned int, int)>
c0019335:	5d                   	pop    ebp
c0019336:	58                   	pop    eax
c0019337:	e9 7a ff ff ff       	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c001933c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019340:	89 d0                	mov    eax,edx
c0019342:	83 c2 08             	add    edx,0x8
c0019345:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019349:	6a 10                	push   0x10
c001934b:	8b 00                	mov    eax,DWORD PTR [eax]
c001934d:	50                   	push   eax
c001934e:	e8 d5 fe ff ff       	call   c0019228 <Dbg::logWriteIntBase(unsigned int, int)>
c0019353:	58                   	pop    eax
c0019354:	5a                   	pop    edx
c0019355:	e9 5c ff ff ff       	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c001935a:	6a 25                	push   0x25
c001935c:	e8 6a fe ff ff       	call   c00191cb <Dbg::logc(char)>
c0019361:	5a                   	pop    edx
c0019362:	e9 4f ff ff ff       	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c0019367:	6a 25                	push   0x25
c0019369:	e8 5d fe ff ff       	call   c00191cb <Dbg::logc(char)>
c001936e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0019372:	50                   	push   eax
c0019373:	e8 53 fe ff ff       	call   c00191cb <Dbg::logc(char)>
c0019378:	5a                   	pop    edx
c0019379:	59                   	pop    ecx
c001937a:	e9 37 ff ff ff       	jmp    c00192b6 <Dbg::kprintf(char const*, ...)+0x6d>
c001937f:	90                   	nop

c0019380 <KiUbsanPrintDetails(char const*, void*)>:
c0019380:	83 ec 1c             	sub    esp,0x1c
c0019383:	83 ec 08             	sub    esp,0x8
c0019386:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001938a:	68 dc 18 03 c0       	push   0xc00318dc
c001938f:	e8 b5 fe ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001939b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001939f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a5:	83 ec 08             	sub    esp,0x8
c00193a8:	50                   	push   eax
c00193a9:	68 f0 18 03 c0       	push   0xc00318f0
c00193ae:	e8 96 fe ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00193bd:	83 ec 08             	sub    esp,0x8
c00193c0:	50                   	push   eax
c00193c1:	68 fa 18 03 c0       	push   0xc00318fa
c00193c6:	e8 7e fe ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00193d5:	83 ec 08             	sub    esp,0x8
c00193d8:	50                   	push   eax
c00193d9:	68 04 19 03 c0       	push   0xc0031904
c00193de:	e8 66 fe ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00193e3:	83 c4 10             	add    esp,0x10
c00193e6:	90                   	nop
c00193e7:	83 c4 1c             	add    esp,0x1c
c00193ea:	c3                   	ret    
c00193eb:	90                   	nop

c00193ec <__ubsan_handle_type_mismatch_v1>:
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	83 ec 08             	sub    esp,0x8
c00193f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193f6:	68 48 1a 03 c0       	push   0xc0031a48
c00193fb:	e8 80 ff ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019408:	75 16                	jne    c0019420 <__ubsan_handle_type_mismatch_v1+0x34>
c001940a:	83 ec 0c             	sub    esp,0xc
c001940d:	68 0e 19 03 c0       	push   0xc003190e
c0019412:	e8 32 fe ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	e9 91 00 00 00       	jmp    c00194b0 <__ubsan_handle_type_mismatch_v1+0xc4>
c001941f:	90                   	nop
c0019420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019424:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019427:	85 c0                	test   eax,eax
c0019429:	74 29                	je     c0019454 <__ubsan_handle_type_mismatch_v1+0x68>
c001942b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001942f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019432:	83 e8 01             	sub    eax,0x1
c0019435:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019439:	75 19                	jne    c0019454 <__ubsan_handle_type_mismatch_v1+0x68>
c001943b:	83 ec 08             	sub    esp,0x8
c001943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019442:	68 68 1a 03 c0       	push   0xc0031a68
c0019447:	e8 fd fd ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	eb 5f                	jmp    c00194b0 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	83 ec 0c             	sub    esp,0xc
c0019457:	68 23 19 03 c0       	push   0xc0031923
c001945c:	e8 e8 fd ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019468:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001946b:	0f b6 c0             	movzx  eax,al
c001946e:	83 ec 08             	sub    esp,0x8
c0019471:	50                   	push   eax
c0019472:	68 3d 19 03 c0       	push   0xc003193d
c0019477:	e8 cd fd ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001947c:	83 c4 10             	add    esp,0x10
c001947f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019483:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019486:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019489:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001948d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019491:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019494:	0f b6 c0             	movzx  eax,al
c0019497:	8b 04 85 00 3c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc400]
c001949e:	51                   	push   ecx
c001949f:	52                   	push   edx
c00194a0:	50                   	push   eax
c00194a1:	68 90 1a 03 c0       	push   0xc0031a90
c00194a6:	e8 9e fd ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	66 90                	xchg   ax,ax
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	68 48 1a 03 c0       	push   0xc0031a48
c00194b8:	e8 a5 6d 00 00       	call   c0020262 <KePanic(char const*)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	90                   	nop
c00194c1:	83 c4 0c             	add    esp,0xc
c00194c4:	c3                   	ret    
c00194c5:	8d 76 00             	lea    esi,[esi+0x0]

c00194c8 <__ubsan_handle_pointer_overflow>:
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	83 ec 08             	sub    esp,0x8
c00194ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194d2:	68 d8 1a 03 c0       	push   0xc0031ad8
c00194d7:	e8 a4 fe ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	83 ec 0c             	sub    esp,0xc
c00194e2:	68 d8 1a 03 c0       	push   0xc0031ad8
c00194e7:	e8 76 6d 00 00       	call   c0020262 <KePanic(char const*)>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	90                   	nop
c00194f0:	83 c4 0c             	add    esp,0xc
c00194f3:	c3                   	ret    

c00194f4 <__ubsan_handle_out_of_bounds>:
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	83 ec 08             	sub    esp,0x8
c00194fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194fe:	68 48 19 03 c0       	push   0xc0031948
c0019503:	e8 78 fe ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	83 ec 0c             	sub    esp,0xc
c001950e:	68 48 19 03 c0       	push   0xc0031948
c0019513:	e8 4a 6d 00 00       	call   c0020262 <KePanic(char const*)>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	90                   	nop
c001951c:	83 c4 0c             	add    esp,0xc
c001951f:	c3                   	ret    

c0019520 <__ubsan_handle_add_overflow>:
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	83 ec 08             	sub    esp,0x8
c0019526:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001952a:	68 65 19 03 c0       	push   0xc0031965
c001952f:	e8 4c fe ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	68 65 19 03 c0       	push   0xc0031965
c001953f:	e8 1e 6d 00 00       	call   c0020262 <KePanic(char const*)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	90                   	nop
c0019548:	83 c4 0c             	add    esp,0xc
c001954b:	c3                   	ret    

c001954c <__ubsan_handle_load_invalid_value>:
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	83 ec 08             	sub    esp,0x8
c0019552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019556:	68 f8 1a 03 c0       	push   0xc0031af8
c001955b:	e8 20 fe ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	68 f8 1a 03 c0       	push   0xc0031af8
c001956b:	e8 f2 6c 00 00       	call   c0020262 <KePanic(char const*)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	90                   	nop
c0019574:	83 c4 0c             	add    esp,0xc
c0019577:	c3                   	ret    

c0019578 <__ubsan_handle_divrem_overflow>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	83 ec 08             	sub    esp,0x8
c001957e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019582:	68 1c 1b 03 c0       	push   0xc0031b1c
c0019587:	e8 f4 fd ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	83 ec 0c             	sub    esp,0xc
c0019592:	68 1c 1b 03 c0       	push   0xc0031b1c
c0019597:	e8 c6 6c 00 00       	call   c0020262 <KePanic(char const*)>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	90                   	nop
c00195a0:	83 c4 0c             	add    esp,0xc
c00195a3:	c3                   	ret    

c00195a4 <__ubsan_handle_mul_overflow>:
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	83 ec 08             	sub    esp,0x8
c00195aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ae:	68 81 19 03 c0       	push   0xc0031981
c00195b3:	e8 c8 fd ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	83 ec 0c             	sub    esp,0xc
c00195be:	68 81 19 03 c0       	push   0xc0031981
c00195c3:	e8 9a 6c 00 00       	call   c0020262 <KePanic(char const*)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	90                   	nop
c00195cc:	83 c4 0c             	add    esp,0xc
c00195cf:	c3                   	ret    

c00195d0 <__ubsan_handle_sub_overflow>:
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	83 ec 08             	sub    esp,0x8
c00195d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195da:	68 9d 19 03 c0       	push   0xc003199d
c00195df:	e8 9c fd ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c00195e4:	83 c4 10             	add    esp,0x10
c00195e7:	83 ec 0c             	sub    esp,0xc
c00195ea:	68 9d 19 03 c0       	push   0xc003199d
c00195ef:	e8 6e 6c 00 00       	call   c0020262 <KePanic(char const*)>
c00195f4:	83 c4 10             	add    esp,0x10
c00195f7:	90                   	nop
c00195f8:	83 c4 0c             	add    esp,0xc
c00195fb:	c3                   	ret    

c00195fc <__ubsan_handle_shift_out_of_bounds>:
c00195fc:	83 ec 0c             	sub    esp,0xc
c00195ff:	83 ec 08             	sub    esp,0x8
c0019602:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019606:	68 3c 1b 03 c0       	push   0xc0031b3c
c001960b:	e8 70 fd ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	83 ec 0c             	sub    esp,0xc
c0019616:	68 3c 1b 03 c0       	push   0xc0031b3c
c001961b:	e8 42 6c 00 00       	call   c0020262 <KePanic(char const*)>
c0019620:	83 c4 10             	add    esp,0x10
c0019623:	90                   	nop
c0019624:	83 c4 0c             	add    esp,0xc
c0019627:	c3                   	ret    

c0019628 <__ubsan_handle_negate_overflow>:
c0019628:	83 ec 0c             	sub    esp,0xc
c001962b:	83 ec 08             	sub    esp,0x8
c001962e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019632:	68 60 1b 03 c0       	push   0xc0031b60
c0019637:	e8 44 fd ff ff       	call   c0019380 <KiUbsanPrintDetails(char const*, void*)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	68 60 1b 03 c0       	push   0xc0031b60
c0019647:	e8 16 6c 00 00       	call   c0020262 <KePanic(char const*)>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	90                   	nop
c0019650:	83 c4 0c             	add    esp,0xc
c0019653:	c3                   	ret    

c0019654 <KiIsHashInTable(unsigned short)>:
c0019654:	0f b7 d0             	movzx  edx,ax
c0019657:	83 e0 07             	and    eax,0x7
c001965a:	c1 fa 03             	sar    edx,0x3
c001965d:	88 c1                	mov    cl,al
c001965f:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c0019666:	d3 fa                	sar    edx,cl
c0019668:	89 d0                	mov    eax,edx
c001966a:	83 e0 01             	and    eax,0x1
c001966d:	c3                   	ret    

c001966e <KiSetHashInTable(unsigned short, bool)>:
c001966e:	56                   	push   esi
c001966f:	53                   	push   ebx
c0019670:	0f b7 d8             	movzx  ebx,ax
c0019673:	83 e0 07             	and    eax,0x7
c0019676:	c1 fb 03             	sar    ebx,0x3
c0019679:	89 c1                	mov    ecx,eax
c001967b:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019682:	b8 01 00 00 00       	mov    eax,0x1
c0019687:	d3 e0                	shl    eax,cl
c0019689:	84 d2                	test   dl,dl
c001968b:	74 04                	je     c0019691 <KiSetHashInTable(unsigned short, bool)+0x23>
c001968d:	09 f0                	or     eax,esi
c001968f:	eb 04                	jmp    c0019695 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019691:	f7 d0                	not    eax
c0019693:	21 f0                	and    eax,esi
c0019695:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c001969b:	5b                   	pop    ebx
c001969c:	5e                   	pop    esi
c001969d:	c3                   	ret    

c001969e <KiFlushSymlinkChanges()>:
c001969e:	57                   	push   edi
c001969f:	56                   	push   esi
c00196a0:	53                   	push   ebx
c00196a1:	83 ec 1c             	sub    esp,0x1c
c00196a4:	68 14 01 00 00       	push   0x114
c00196a9:	e8 0c cd ff ff       	call   c00163ba <malloc>
c00196ae:	83 c4 0c             	add    esp,0xc
c00196b1:	89 c3                	mov    ebx,eax
c00196b3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00196b9:	68 7f 1b 03 c0       	push   0xc0031b7f
c00196be:	50                   	push   eax
c00196bf:	e8 8c 0d 00 00       	call   c001a450 <File::File(char const*, Process*)>
c00196c4:	83 c4 10             	add    esp,0x10
c00196c7:	85 db                	test   ebx,ebx
c00196c9:	75 10                	jne    c00196db <KiFlushSymlinkChanges()+0x3d>
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	68 9d 1b 03 c0       	push   0xc0031b9d
c00196d3:	e8 8a 6b 00 00       	call   c0020262 <KePanic(char const*)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	50                   	push   eax
c00196dc:	50                   	push   eax
c00196dd:	6a 06                	push   0x6
c00196df:	53                   	push   ebx
c00196e0:	e8 89 0d 00 00       	call   c001a46e <File::open(FileOpenMode)>
c00196e5:	83 c4 10             	add    esp,0x10
c00196e8:	85 c0                	test   eax,eax
c00196ea:	74 10                	je     c00196fc <KiFlushSymlinkChanges()+0x5e>
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	68 b7 1b 03 c0       	push   0xc0031bb7
c00196f4:	e8 69 6b 00 00       	call   c0020262 <KePanic(char const*)>
c00196f9:	83 c4 10             	add    esp,0x10
c00196fc:	31 f6                	xor    esi,esi
c00196fe:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019704:	7e 70                	jle    c0019776 <KiFlushSymlinkChanges()+0xd8>
c0019706:	83 ec 0c             	sub    esp,0xc
c0019709:	8b 13                	mov    edx,DWORD PTR [ebx]
c001970b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001970f:	89 f0                	mov    eax,esi
c0019711:	57                   	push   edi
c0019712:	c1 e0 08             	shl    eax,0x8
c0019715:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001971a:	50                   	push   eax
c001971b:	6a 00                	push   0x0
c001971d:	68 00 01 00 00       	push   0x100
c0019722:	53                   	push   ebx
c0019723:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019726:	83 c4 20             	add    esp,0x20
c0019729:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019731:	74 10                	je     c0019743 <KiFlushSymlinkChanges()+0xa5>
c0019733:	83 ec 0c             	sub    esp,0xc
c0019736:	68 d1 1b 03 c0       	push   0xc0031bd1
c001973b:	e8 22 6b 00 00       	call   c0020262 <KePanic(char const*)>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	83 ec 0c             	sub    esp,0xc
c0019746:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019748:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c001974f:	57                   	push   edi
c0019750:	52                   	push   edx
c0019751:	6a 00                	push   0x0
c0019753:	6a 08                	push   0x8
c0019755:	53                   	push   ebx
c0019756:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019759:	83 c4 20             	add    esp,0x20
c001975c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019761:	74 10                	je     c0019773 <KiFlushSymlinkChanges()+0xd5>
c0019763:	83 ec 0c             	sub    esp,0xc
c0019766:	68 eb 1b 03 c0       	push   0xc0031beb
c001976b:	e8 f2 6a 00 00       	call   c0020262 <KePanic(char const*)>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	46                   	inc    esi
c0019774:	eb 88                	jmp    c00196fe <KiFlushSymlinkChanges()+0x60>
c0019776:	83 ec 0c             	sub    esp,0xc
c0019779:	53                   	push   ebx
c001977a:	e8 4d 0d 00 00       	call   c001a4cc <File::close()>
c001977f:	83 c4 10             	add    esp,0x10
c0019782:	85 db                	test   ebx,ebx
c0019784:	74 0c                	je     c0019792 <KiFlushSymlinkChanges()+0xf4>
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	8b 03                	mov    eax,DWORD PTR [ebx]
c001978b:	53                   	push   ebx
c001978c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	5b                   	pop    ebx
c00197a0:	5e                   	pop    esi
c00197a1:	5f                   	pop    edi
c00197a2:	c3                   	ret    

c00197a3 <KiDeinitialiseSymlinks(void*)>:
c00197a3:	e9 f6 fe ff ff       	jmp    c001969e <KiFlushSymlinkChanges()>

c00197a8 <KiGetSymlinkHash(char const*)>:
c00197a8:	53                   	push   ebx
c00197a9:	89 c3                	mov    ebx,eax
c00197ab:	83 ec 14             	sub    esp,0x14
c00197ae:	50                   	push   eax
c00197af:	e8 bc 6d fe ff       	call   c0000570 <strlen>
c00197b4:	5a                   	pop    edx
c00197b5:	59                   	pop    ecx
c00197b6:	50                   	push   eax
c00197b7:	53                   	push   ebx
c00197b8:	e8 0c 64 00 00       	call   c001fbc9 <KeCalculateCRC32(unsigned char*, int)>
c00197bd:	83 c4 18             	add    esp,0x18
c00197c0:	89 c2                	mov    edx,eax
c00197c2:	5b                   	pop    ebx
c00197c3:	c1 ea 10             	shr    edx,0x10
c00197c6:	31 d0                	xor    eax,edx
c00197c8:	c3                   	ret    

c00197c9 <KiCreateSymlinkID()>:
c00197c9:	55                   	push   ebp
c00197ca:	57                   	push   edi
c00197cb:	56                   	push   esi
c00197cc:	53                   	push   ebx
c00197cd:	31 db                	xor    ebx,ebx
c00197cf:	83 ec 1c             	sub    esp,0x1c
c00197d2:	e8 d9 6b 00 00       	call   c00203b0 <KeRand()>
c00197d7:	43                   	inc    ebx
c00197d8:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00197de:	31 d2                	xor    edx,edx
c00197e0:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00197e3:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00197e7:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00197ed:	c1 e0 1f             	shl    eax,0x1f
c00197f0:	89 d7                	mov    edi,edx
c00197f2:	89 c6                	mov    esi,eax
c00197f4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00197f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019800:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019806:	75 10                	jne    c0019818 <KiCreateSymlinkID()+0x4f>
c0019808:	83 ec 0c             	sub    esp,0xc
c001980b:	68 05 1c 03 c0       	push   0xc0031c05
c0019810:	e8 4d 6a 00 00       	call   c0020262 <KePanic(char const*)>
c0019815:	83 c4 10             	add    esp,0x10
c0019818:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c001981c:	75 04                	jne    c0019822 <KiCreateSymlinkID()+0x59>
c001981e:	39 f5                	cmp    ebp,esi
c0019820:	74 b0                	je     c00197d2 <KiCreateSymlinkID()+0x9>
c0019822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019826:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001982a:	31 f0                	xor    eax,esi
c001982c:	83 c4 1c             	add    esp,0x1c
c001982f:	31 fa                	xor    edx,edi
c0019831:	5b                   	pop    ebx
c0019832:	5e                   	pop    esi
c0019833:	5f                   	pop    edi
c0019834:	5d                   	pop    ebp
c0019835:	c3                   	ret    

c0019836 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019836:	53                   	push   ebx
c0019837:	83 ec 0c             	sub    esp,0xc
c001983a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001983e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019846:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001984b:	68 00 01 00 00       	push   0x100
c0019850:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019857:	6a 00                	push   0x0
c0019859:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019860:	c1 e0 08             	shl    eax,0x8
c0019863:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019868:	50                   	push   eax
c0019869:	e8 82 6c fe ff       	call   c00004f0 <memset>
c001986e:	58                   	pop    eax
c001986f:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019874:	5a                   	pop    edx
c0019875:	c1 e0 08             	shl    eax,0x8
c0019878:	53                   	push   ebx
c0019879:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001987e:	50                   	push   eax
c001987f:	e8 bc 6d fe ff       	call   c0000640 <strcpy>
c0019884:	89 d8                	mov    eax,ebx
c0019886:	e8 1d ff ff ff       	call   c00197a8 <KiGetSymlinkHash(char const*)>
c001988b:	59                   	pop    ecx
c001988c:	0f b7 d8             	movzx  ebx,ax
c001988f:	58                   	pop    eax
c0019890:	53                   	push   ebx
c0019891:	68 0e 1c 03 c0       	push   0xc0031c0e
c0019896:	e8 ae f9 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001989b:	89 d8                	mov    eax,ebx
c001989d:	ba 01 00 00 00       	mov    edx,0x1
c00198a2:	e8 c7 fd ff ff       	call   c001966e <KiSetHashInTable(unsigned short, bool)>
c00198a7:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	40                   	inc    eax
c00198b0:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c00198b5:	83 f8 03             	cmp    eax,0x3
c00198b8:	7e 09                	jle    c00198c3 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c00198ba:	83 c4 08             	add    esp,0x8
c00198bd:	5b                   	pop    ebx
c00198be:	e9 db fd ff ff       	jmp    c001969e <KiFlushSymlinkChanges()>
c00198c3:	83 c4 08             	add    esp,0x8
c00198c6:	5b                   	pop    ebx
c00198c7:	c3                   	ret    

c00198c8 <KeInitialiseSymlinks()>:
c00198c8:	57                   	push   edi
c00198c9:	56                   	push   esi
c00198ca:	53                   	push   ebx
c00198cb:	81 ec 14 01 00 00    	sub    esp,0x114
c00198d1:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00198db:	68 00 20 00 00       	push   0x2000
c00198e0:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00198ea:	6a 00                	push   0x0
c00198ec:	68 00 af 03 c0       	push   0xc003af00
c00198f1:	e8 fa 6b fe ff       	call   c00004f0 <memset>
c00198f6:	59                   	pop    ecx
c00198f7:	5b                   	pop    ebx
c00198f8:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c00198fe:	68 22 1c 03 c0       	push   0xc0031c22
c0019903:	e8 41 f9 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019908:	5e                   	pop    esi
c0019909:	5f                   	pop    edi
c001990a:	6a 00                	push   0x0
c001990c:	68 a3 97 01 c0       	push   0xc00197a3
c0019911:	e8 d6 60 00 00       	call   c001f9ec <KeRegisterAtexit(void (*)(void*), void*)>
c0019916:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001991d:	e8 98 ca ff ff       	call   c00163ba <malloc>
c0019922:	83 c4 0c             	add    esp,0xc
c0019925:	89 c3                	mov    ebx,eax
c0019927:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001992d:	68 7f 1b 03 c0       	push   0xc0031b7f
c0019932:	50                   	push   eax
c0019933:	e8 18 0b 00 00       	call   c001a450 <File::File(char const*, Process*)>
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	85 db                	test   ebx,ebx
c001993d:	75 10                	jne    c001994f <KeInitialiseSymlinks()+0x87>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	68 3f 1c 03 c0       	push   0xc0031c3f
c0019947:	e8 16 69 00 00       	call   c0020262 <KePanic(char const*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	83 ec 0c             	sub    esp,0xc
c0019952:	53                   	push   ebx
c0019953:	e8 da 0d 00 00       	call   c001a732 <File::exists()>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	84 c0                	test   al,al
c001995d:	75 3a                	jne    c0019999 <KeInitialiseSymlinks()+0xd1>
c001995f:	52                   	push   edx
c0019960:	52                   	push   edx
c0019961:	6a 12                	push   0x12
c0019963:	53                   	push   ebx
c0019964:	e8 05 0b 00 00       	call   c001a46e <File::open(FileOpenMode)>
c0019969:	83 c4 10             	add    esp,0x10
c001996c:	85 c0                	test   eax,eax
c001996e:	74 10                	je     c0019980 <KeInitialiseSymlinks()+0xb8>
c0019970:	83 ec 0c             	sub    esp,0xc
c0019973:	68 5c 1c 03 c0       	push   0xc0031c5c
c0019978:	e8 e5 68 00 00       	call   c0020262 <KePanic(char const*)>
c001997d:	83 c4 10             	add    esp,0x10
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	53                   	push   ebx
c0019984:	e8 43 0b 00 00       	call   c001a4cc <File::close()>
c0019989:	83 c4 10             	add    esp,0x10
c001998c:	85 db                	test   ebx,ebx
c001998e:	0f 84 9e 00 00 00    	je     c0019a32 <KeInitialiseSymlinks()+0x16a>
c0019994:	e9 8d 00 00 00       	jmp    c0019a26 <KeInitialiseSymlinks()+0x15e>
c0019999:	50                   	push   eax
c001999a:	50                   	push   eax
c001999b:	6a 01                	push   0x1
c001999d:	53                   	push   ebx
c001999e:	e8 cb 0a 00 00       	call   c001a46e <File::open(FileOpenMode)>
c00199a3:	83 c4 10             	add    esp,0x10
c00199a6:	85 c0                	test   eax,eax
c00199a8:	74 10                	je     c00199ba <KeInitialiseSymlinks()+0xf2>
c00199aa:	83 ec 0c             	sub    esp,0xc
c00199ad:	68 79 1c 03 c0       	push   0xc0031c79
c00199b2:	e8 ab 68 00 00       	call   c0020262 <KePanic(char const*)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	83 ec 0c             	sub    esp,0xc
c00199bd:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c00199c3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00199c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199c9:	57                   	push   edi
c00199ca:	8d 74 24 20          	lea    esi,[esp+0x20]
c00199ce:	56                   	push   esi
c00199cf:	6a 00                	push   0x0
c00199d1:	68 00 01 00 00       	push   0x100
c00199d6:	53                   	push   ebx
c00199d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199da:	83 c4 20             	add    esp,0x20
c00199dd:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00199e5:	75 33                	jne    c0019a1a <KeInitialiseSymlinks()+0x152>
c00199e7:	83 ec 0c             	sub    esp,0xc
c00199ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ec:	57                   	push   edi
c00199ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c00199f1:	52                   	push   edx
c00199f2:	6a 00                	push   0x0
c00199f4:	6a 08                	push   0x8
c00199f6:	53                   	push   ebx
c00199f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199fa:	83 c4 20             	add    esp,0x20
c00199fd:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a02:	75 16                	jne    c0019a1a <KeInitialiseSymlinks()+0x152>
c0019a04:	89 f0                	mov    eax,esi
c0019a06:	e8 9d fd ff ff       	call   c00197a8 <KiGetSymlinkHash(char const*)>
c0019a0b:	ba 01 00 00 00       	mov    edx,0x1
c0019a10:	0f b7 c0             	movzx  eax,ax
c0019a13:	e8 56 fc ff ff       	call   c001966e <KiSetHashInTable(unsigned short, bool)>
c0019a18:	eb a0                	jmp    c00199ba <KeInitialiseSymlinks()+0xf2>
c0019a1a:	83 ec 0c             	sub    esp,0xc
c0019a1d:	53                   	push   ebx
c0019a1e:	e8 a9 0a 00 00       	call   c001a4cc <File::close()>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	83 ec 0c             	sub    esp,0xc
c0019a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a2b:	53                   	push   ebx
c0019a2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	81 c4 10 01 00 00    	add    esp,0x110
c0019a38:	5b                   	pop    ebx
c0019a39:	5e                   	pop    esi
c0019a3a:	5f                   	pop    edi
c0019a3b:	c3                   	ret    

c0019a3c <KiIsSymlinkRegistered(char const*)>:
c0019a3c:	55                   	push   ebp
c0019a3d:	57                   	push   edi
c0019a3e:	56                   	push   esi
c0019a3f:	53                   	push   ebx
c0019a40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a46:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019a4d:	89 f0                	mov    eax,esi
c0019a4f:	e8 54 fd ff ff       	call   c00197a8 <KiGetSymlinkHash(char const*)>
c0019a54:	0f b7 c0             	movzx  eax,ax
c0019a57:	53                   	push   ebx
c0019a58:	56                   	push   esi
c0019a59:	50                   	push   eax
c0019a5a:	68 94 1c 03 c0       	push   0xc0031c94
c0019a5f:	e8 e5 f7 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019a64:	89 f0                	mov    eax,esi
c0019a66:	e8 3d fd ff ff       	call   c00197a8 <KiGetSymlinkHash(char const*)>
c0019a6b:	0f b7 c0             	movzx  eax,ax
c0019a6e:	e8 e1 fb ff ff       	call   c0019654 <KiIsHashInTable(unsigned short)>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	88 c1                	mov    cl,al
c0019a78:	31 d2                	xor    edx,edx
c0019a7a:	31 c0                	xor    eax,eax
c0019a7c:	84 c9                	test   cl,cl
c0019a7e:	0f 84 31 01 00 00    	je     c0019bb5 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a84:	31 db                	xor    ebx,ebx
c0019a86:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019a8c:	7e 30                	jle    c0019abe <KiIsSymlinkRegistered(char const*)+0x82>
c0019a8e:	89 d8                	mov    eax,ebx
c0019a90:	51                   	push   ecx
c0019a91:	c1 e0 08             	shl    eax,0x8
c0019a94:	51                   	push   ecx
c0019a95:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a9a:	50                   	push   eax
c0019a9b:	56                   	push   esi
c0019a9c:	e8 af 6c fe ff       	call   c0000750 <strcmp>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	85 c0                	test   eax,eax
c0019aa6:	75 13                	jne    c0019abb <KiIsSymlinkRegistered(char const*)+0x7f>
c0019aa8:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019aaf:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019ab6:	e9 fa 00 00 00       	jmp    c0019bb5 <KiIsSymlinkRegistered(char const*)+0x179>
c0019abb:	43                   	inc    ebx
c0019abc:	eb c8                	jmp    c0019a86 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	68 14 01 00 00       	push   0x114
c0019ac6:	e8 ef c8 ff ff       	call   c00163ba <malloc>
c0019acb:	83 c4 0c             	add    esp,0xc
c0019ace:	89 c3                	mov    ebx,eax
c0019ad0:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019ad6:	68 7f 1b 03 c0       	push   0xc0031b7f
c0019adb:	50                   	push   eax
c0019adc:	e8 6f 09 00 00       	call   c001a450 <File::File(char const*, Process*)>
c0019ae1:	83 c4 10             	add    esp,0x10
c0019ae4:	85 db                	test   ebx,ebx
c0019ae6:	75 12                	jne    c0019afa <KiIsSymlinkRegistered(char const*)+0xbe>
c0019ae8:	83 ec 0c             	sub    esp,0xc
c0019aeb:	68 a9 1c 03 c0       	push   0xc0031ca9
c0019af0:	e8 6d 67 00 00       	call   c0020262 <KePanic(char const*)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	eb 10                	jmp    c0019b0a <KiIsSymlinkRegistered(char const*)+0xce>
c0019afa:	83 ec 0c             	sub    esp,0xc
c0019afd:	53                   	push   ebx
c0019afe:	e8 2f 0c 00 00       	call   c001a732 <File::exists()>
c0019b03:	83 c4 10             	add    esp,0x10
c0019b06:	84 c0                	test   al,al
c0019b08:	74 de                	je     c0019ae8 <KiIsSymlinkRegistered(char const*)+0xac>
c0019b0a:	52                   	push   edx
c0019b0b:	52                   	push   edx
c0019b0c:	6a 01                	push   0x1
c0019b0e:	53                   	push   ebx
c0019b0f:	e8 5a 09 00 00       	call   c001a46e <File::open(FileOpenMode)>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	85 c0                	test   eax,eax
c0019b19:	74 10                	je     c0019b2b <KiIsSymlinkRegistered(char const*)+0xef>
c0019b1b:	83 ec 0c             	sub    esp,0xc
c0019b1e:	68 c4 1c 03 c0       	push   0xc0031cc4
c0019b23:	e8 3a 67 00 00       	call   c0020262 <KePanic(char const*)>
c0019b28:	83 c4 10             	add    esp,0x10
c0019b2b:	83 ec 0c             	sub    esp,0xc
c0019b2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b30:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019b34:	55                   	push   ebp
c0019b35:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019b39:	57                   	push   edi
c0019b3a:	6a 00                	push   0x0
c0019b3c:	68 00 01 00 00       	push   0x100
c0019b41:	53                   	push   ebx
c0019b42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b45:	83 c4 20             	add    esp,0x20
c0019b48:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019b50:	75 4b                	jne    c0019b9d <KiIsSymlinkRegistered(char const*)+0x161>
c0019b52:	83 ec 0c             	sub    esp,0xc
c0019b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b57:	55                   	push   ebp
c0019b58:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b5c:	52                   	push   edx
c0019b5d:	6a 00                	push   0x0
c0019b5f:	6a 08                	push   0x8
c0019b61:	53                   	push   ebx
c0019b62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b65:	83 c4 20             	add    esp,0x20
c0019b68:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019b6d:	75 2e                	jne    c0019b9d <KiIsSymlinkRegistered(char const*)+0x161>
c0019b6f:	50                   	push   eax
c0019b70:	50                   	push   eax
c0019b71:	57                   	push   edi
c0019b72:	56                   	push   esi
c0019b73:	e8 d8 6b fe ff       	call   c0000750 <strcmp>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	85 c0                	test   eax,eax
c0019b7d:	75 ac                	jne    c0019b2b <KiIsSymlinkRegistered(char const*)+0xef>
c0019b7f:	83 ec 0c             	sub    esp,0xc
c0019b82:	53                   	push   ebx
c0019b83:	e8 44 09 00 00       	call   c001a4cc <File::close()>
c0019b88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b98:	83 c4 10             	add    esp,0x10
c0019b9b:	eb 18                	jmp    c0019bb5 <KiIsSymlinkRegistered(char const*)+0x179>
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	53                   	push   ebx
c0019ba1:	e8 26 09 00 00       	call   c001a4cc <File::close()>
c0019ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bae:	83 c4 10             	add    esp,0x10
c0019bb1:	31 c0                	xor    eax,eax
c0019bb3:	31 d2                	xor    edx,edx
c0019bb5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bbb:	5b                   	pop    ebx
c0019bbc:	5e                   	pop    esi
c0019bbd:	5f                   	pop    edi
c0019bbe:	5d                   	pop    ebp
c0019bbf:	c3                   	ret    

c0019bc0 <KeDereferenceSymlink(char const*, char*)>:
c0019bc0:	55                   	push   ebp
c0019bc1:	57                   	push   edi
c0019bc2:	56                   	push   esi
c0019bc3:	53                   	push   ebx
c0019bc4:	83 ec 48             	sub    esp,0x48
c0019bc7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019bcb:	56                   	push   esi
c0019bcc:	e8 6b fe ff ff       	call   c0019a3c <KiIsSymlinkRegistered(char const*)>
c0019bd1:	83 c4 10             	add    esp,0x10
c0019bd4:	89 c7                	mov    edi,eax
c0019bd6:	89 d0                	mov    eax,edx
c0019bd8:	09 f8                	or     eax,edi
c0019bda:	75 07                	jne    c0019be3 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019bdc:	31 c0                	xor    eax,eax
c0019bde:	e9 7c 01 00 00       	jmp    c0019d5f <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	89 d5                	mov    ebp,edx
c0019be8:	68 14 01 00 00       	push   0x114
c0019bed:	e8 c8 c7 ff ff       	call   c00163ba <malloc>
c0019bf2:	83 c4 0c             	add    esp,0xc
c0019bf5:	89 c3                	mov    ebx,eax
c0019bf7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019bfd:	56                   	push   esi
c0019bfe:	50                   	push   eax
c0019bff:	e8 4c 08 00 00       	call   c001a450 <File::File(char const*, Process*)>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	85 db                	test   ebx,ebx
c0019c09:	0f 84 32 01 00 00    	je     c0019d41 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c0f:	56                   	push   esi
c0019c10:	56                   	push   esi
c0019c11:	6a 01                	push   0x1
c0019c13:	53                   	push   ebx
c0019c14:	e8 55 08 00 00       	call   c001a46e <File::open(FileOpenMode)>
c0019c19:	83 c4 10             	add    esp,0x10
c0019c1c:	85 c0                	test   eax,eax
c0019c1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c20:	74 09                	je     c0019c2b <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	53                   	push   ebx
c0019c26:	e9 10 01 00 00       	jmp    c0019d3b <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019c2b:	83 ec 0c             	sub    esp,0xc
c0019c2e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c32:	56                   	push   esi
c0019c33:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019c37:	52                   	push   edx
c0019c38:	6a 00                	push   0x0
c0019c3a:	6a 08                	push   0x8
c0019c3c:	53                   	push   ebx
c0019c3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c40:	83 c4 20             	add    esp,0x20
c0019c43:	85 c0                	test   eax,eax
c0019c45:	0f 85 e2 00 00 00    	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c4b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c50:	0f 85 d7 00 00 00    	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c56:	83 ec 0c             	sub    esp,0xc
c0019c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c5b:	56                   	push   esi
c0019c5c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019c60:	52                   	push   edx
c0019c61:	6a 00                	push   0x0
c0019c63:	6a 08                	push   0x8
c0019c65:	53                   	push   ebx
c0019c66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c69:	83 c4 20             	add    esp,0x20
c0019c6c:	85 c0                	test   eax,eax
c0019c6e:	0f 85 b9 00 00 00    	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c74:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c79:	0f 85 ae 00 00 00    	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c7f:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019c83:	0f 85 53 ff ff ff    	jne    c0019bdc <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c89:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019c8d:	0f 85 49 ff ff ff    	jne    c0019bdc <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c93:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019ca3:	51                   	push   ecx
c0019ca4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019ca8:	50                   	push   eax
c0019ca9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cad:	50                   	push   eax
c0019cae:	53                   	push   ebx
c0019caf:	e8 bc 0a 00 00       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0019cb4:	83 c4 10             	add    esp,0x10
c0019cb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019cbc:	75 6f                	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cbe:	31 c9                	xor    ecx,ecx
c0019cc0:	bf 0f 00 00 00       	mov    edi,0xf
c0019cc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cc9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ccd:	39 c7                	cmp    edi,eax
c0019ccf:	89 cf                	mov    edi,ecx
c0019cd1:	19 d7                	sbb    edi,edx
c0019cd3:	73 58                	jae    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cd5:	83 c0 f0             	add    eax,0xfffffff0
c0019cd8:	bf ff 00 00 00       	mov    edi,0xff
c0019cdd:	83 d2 ff             	adc    edx,0xffffffff
c0019ce0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ce4:	39 c7                	cmp    edi,eax
c0019ce6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cea:	19 d1                	sbb    ecx,edx
c0019cec:	72 53                	jb     c0019d41 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019cee:	40                   	inc    eax
c0019cef:	52                   	push   edx
c0019cf0:	50                   	push   eax
c0019cf1:	6a 00                	push   0x0
c0019cf3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019cf7:	e8 f4 67 fe ff       	call   c00004f0 <memset>
c0019cfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cfe:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d01:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019d05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d0d:	53                   	push   ebx
c0019d0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d11:	83 c4 20             	add    esp,0x20
c0019d14:	85 c0                	test   eax,eax
c0019d16:	75 15                	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d1c:	89 c7                	mov    edi,eax
c0019d1e:	c1 ff 1f             	sar    edi,0x1f
c0019d21:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019d25:	75 06                	jne    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d27:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019d2b:	74 19                	je     c0019d46 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019d2d:	83 ec 0c             	sub    esp,0xc
c0019d30:	53                   	push   ebx
c0019d31:	e8 96 07 00 00       	call   c001a4cc <File::close()>
c0019d36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	83 c8 ff             	or     eax,0xffffffff
c0019d44:	eb 19                	jmp    c0019d5f <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019d46:	83 ec 0c             	sub    esp,0xc
c0019d49:	53                   	push   ebx
c0019d4a:	e8 7d 07 00 00       	call   c001a4cc <File::close()>
c0019d4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d57:	83 c4 10             	add    esp,0x10
c0019d5a:	b8 01 00 00 00       	mov    eax,0x1
c0019d5f:	83 c4 3c             	add    esp,0x3c
c0019d62:	5b                   	pop    ebx
c0019d63:	5e                   	pop    esi
c0019d64:	5f                   	pop    edi
c0019d65:	5d                   	pop    ebp
c0019d66:	c3                   	ret    

c0019d67 <KeCreateSymlink(char const*, char const*)>:
c0019d67:	55                   	push   ebp
c0019d68:	57                   	push   edi
c0019d69:	56                   	push   esi
c0019d6a:	53                   	push   ebx
c0019d6b:	83 ec 38             	sub    esp,0x38
c0019d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019d72:	68 14 01 00 00       	push   0x114
c0019d77:	e8 3e c6 ff ff       	call   c00163ba <malloc>
c0019d7c:	6a 00                	push   0x0
c0019d7e:	89 c3                	mov    ebx,eax
c0019d80:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d8a:	50                   	push   eax
c0019d8b:	e8 e2 05 00 00       	call   c001a372 <File::File(char const*, Process*, bool)>
c0019d90:	83 c4 20             	add    esp,0x20
c0019d93:	b8 01 00 00 00       	mov    eax,0x1
c0019d98:	85 db                	test   ebx,ebx
c0019d9a:	0f 84 19 01 00 00    	je     c0019eb9 <KeCreateSymlink(char const*, char const*)+0x152>
c0019da0:	52                   	push   edx
c0019da1:	52                   	push   edx
c0019da2:	6a 12                	push   0x12
c0019da4:	53                   	push   ebx
c0019da5:	e8 c4 06 00 00       	call   c001a46e <File::open(FileOpenMode)>
c0019daa:	83 c4 10             	add    esp,0x10
c0019dad:	85 c0                	test   eax,eax
c0019daf:	74 0b                	je     c0019dbc <KeCreateSymlink(char const*, char const*)+0x55>
c0019db1:	83 ec 0c             	sub    esp,0xc
c0019db4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019db6:	53                   	push   ebx
c0019db7:	e9 f2 00 00 00       	jmp    c0019eae <KeCreateSymlink(char const*, char const*)+0x147>
c0019dbc:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019dc0:	be 11 1d 03 c0       	mov    esi,0xc0031d11
c0019dc5:	b9 09 00 00 00       	mov    ecx,0x9
c0019dca:	fc                   	cld    
c0019dcb:	83 ec 0c             	sub    esp,0xc
c0019dce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dd0:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019dd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dd6:	56                   	push   esi
c0019dd7:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019ddb:	52                   	push   edx
c0019ddc:	6a 00                	push   0x0
c0019dde:	6a 08                	push   0x8
c0019de0:	53                   	push   ebx
c0019de1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019de4:	83 c4 20             	add    esp,0x20
c0019de7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019dec:	0f 85 ae 00 00 00    	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019df2:	85 c0                	test   eax,eax
c0019df4:	0f 85 a6 00 00 00    	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019dfa:	e8 ca f9 ff ff       	call   c00197c9 <KiCreateSymlinkID()>
c0019dff:	83 ec 0c             	sub    esp,0xc
c0019e02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019e0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e0c:	56                   	push   esi
c0019e0d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019e11:	52                   	push   edx
c0019e12:	6a 00                	push   0x0
c0019e14:	6a 08                	push   0x8
c0019e16:	53                   	push   ebx
c0019e17:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e1a:	83 c4 20             	add    esp,0x20
c0019e1d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e22:	75 7c                	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e24:	85 c0                	test   eax,eax
c0019e26:	75 78                	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e28:	83 ec 0c             	sub    esp,0xc
c0019e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e2d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e30:	55                   	push   ebp
c0019e31:	e8 3a 67 fe ff       	call   c0000570 <strlen>
c0019e36:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e39:	31 d2                	xor    edx,edx
c0019e3b:	55                   	push   ebp
c0019e3c:	52                   	push   edx
c0019e3d:	50                   	push   eax
c0019e3e:	53                   	push   ebx
c0019e3f:	ff d7                	call   edi
c0019e41:	83 c4 14             	add    esp,0x14
c0019e44:	89 c6                	mov    esi,eax
c0019e46:	55                   	push   ebp
c0019e47:	e8 24 67 fe ff       	call   c0000570 <strlen>
c0019e4c:	83 c4 10             	add    esp,0x10
c0019e4f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e53:	75 4b                	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e55:	85 f6                	test   esi,esi
c0019e57:	75 47                	jne    c0019ea0 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e59:	50                   	push   eax
c0019e5a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e5e:	55                   	push   ebp
c0019e5f:	68 df 1c 03 c0       	push   0xc0031cdf
c0019e64:	e8 e0 f3 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019e69:	83 c4 0c             	add    esp,0xc
c0019e6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e74:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019e78:	e8 b9 f9 ff ff       	call   c0019836 <KeRegisterSymlink(char const*, unsigned long long)>
c0019e7d:	c7 04 24 04 1d 03 c0 	mov    DWORD PTR [esp],0xc0031d04
c0019e84:	e8 c0 f3 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0019e89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8c:	e8 3b 06 00 00       	call   c001a4cc <File::close()>
c0019e91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	31 c0                	xor    eax,eax
c0019e9e:	eb 19                	jmp    c0019eb9 <KeCreateSymlink(char const*, char const*)+0x152>
c0019ea0:	83 ec 0c             	sub    esp,0xc
c0019ea3:	53                   	push   ebx
c0019ea4:	e8 23 06 00 00       	call   c001a4cc <File::close()>
c0019ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	b8 01 00 00 00       	mov    eax,0x1
c0019eb9:	83 c4 2c             	add    esp,0x2c
c0019ebc:	5b                   	pop    ebx
c0019ebd:	5e                   	pop    esi
c0019ebe:	5f                   	pop    edi
c0019ebf:	5d                   	pop    ebp
c0019ec0:	c3                   	ret    
c0019ec1:	90                   	nop

c0019ec2 <File::read(unsigned long long, void*, int*)>:
c0019ec2:	53                   	push   ebx
c0019ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ec7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ecb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ed2:	83 f8 19             	cmp    eax,0x19
c0019ed5:	77 35                	ja     c0019f0c <File::read(unsigned long long, void*, int*)+0x4a>
c0019ed7:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019ede:	85 c0                	test   eax,eax
c0019ee0:	74 2a                	je     c0019f0c <File::read(unsigned long long, void*, int*)+0x4a>
c0019ee2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019ee8:	85 c0                	test   eax,eax
c0019eea:	74 20                	je     c0019f0c <File::read(unsigned long long, void*, int*)+0x4a>
c0019eec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019ef0:	74 21                	je     c0019f13 <File::read(unsigned long long, void*, int*)+0x51>
c0019ef2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ef4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019ef8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019efe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f06:	5b                   	pop    ebx
c0019f07:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019f0a:	ff e0                	jmp    eax
c0019f0c:	b8 0b 00 00 00       	mov    eax,0xb
c0019f11:	eb 05                	jmp    c0019f18 <File::read(unsigned long long, void*, int*)+0x56>
c0019f13:	b8 05 00 00 00       	mov    eax,0x5
c0019f18:	5b                   	pop    ebx
c0019f19:	c3                   	ret    

c0019f1a <File::write(unsigned long long, void*, int*)>:
c0019f1a:	53                   	push   ebx
c0019f1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f2a:	83 f8 19             	cmp    eax,0x19
c0019f2d:	77 35                	ja     c0019f64 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f2f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f36:	85 c0                	test   eax,eax
c0019f38:	74 2a                	je     c0019f64 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f40:	85 c0                	test   eax,eax
c0019f42:	74 20                	je     c0019f64 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f48:	74 21                	je     c0019f6b <File::write(unsigned long long, void*, int*)+0x51>
c0019f4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f5e:	5b                   	pop    ebx
c0019f5f:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019f62:	ff e0                	jmp    eax
c0019f64:	b8 0b 00 00 00       	mov    eax,0xb
c0019f69:	eb 05                	jmp    c0019f70 <File::write(unsigned long long, void*, int*)+0x56>
c0019f6b:	b8 05 00 00 00       	mov    eax,0x5
c0019f70:	5b                   	pop    ebx
c0019f71:	c3                   	ret    

c0019f72 <Directory::read(unsigned long long, void*, int*)>:
c0019f72:	53                   	push   ebx
c0019f73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f77:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f7b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f82:	83 f8 19             	cmp    eax,0x19
c0019f85:	77 35                	ja     c0019fbc <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f87:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f8e:	85 c0                	test   eax,eax
c0019f90:	74 2a                	je     c0019fbc <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f92:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f98:	85 c0                	test   eax,eax
c0019f9a:	74 20                	je     c0019fbc <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019fa0:	74 21                	je     c0019fc3 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019fa2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019fa4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fa8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019fae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fb6:	5b                   	pop    ebx
c0019fb7:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019fba:	ff e0                	jmp    eax
c0019fbc:	b8 0b 00 00 00       	mov    eax,0xb
c0019fc1:	eb 05                	jmp    c0019fc8 <Directory::read(unsigned long long, void*, int*)+0x56>
c0019fc3:	b8 05 00 00 00       	mov    eax,0x5
c0019fc8:	5b                   	pop    ebx
c0019fc9:	c3                   	ret    

c0019fca <Directory::write(unsigned long long, void*, int*)>:
c0019fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fce:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019fd5:	b8 0b 00 00 00       	mov    eax,0xb
c0019fda:	83 fa 19             	cmp    edx,0x19
c0019fdd:	77 18                	ja     c0019ff7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fdf:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019fe6:	85 d2                	test   edx,edx
c0019fe8:	74 0d                	je     c0019ff7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fea:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019ff1:	19 c0                	sbb    eax,eax
c0019ff3:	83 e0 0a             	and    eax,0xa
c0019ff6:	40                   	inc    eax
c0019ff7:	c3                   	ret    

c0019ff8 <File::isAtty()>:
c0019ff8:	31 c0                	xor    eax,eax
c0019ffa:	c3                   	ret    
c0019ffb:	90                   	nop

c0019ffc <Directory::isAtty()>:
c0019ffc:	31 c0                	xor    eax,eax
c0019ffe:	c3                   	ret    
c0019fff:	90                   	nop

c001a000 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a000:	b8 0a 00 00 00       	mov    eax,0xa
c001a005:	c3                   	ret    

c001a006 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a006:	b8 0a 00 00 00       	mov    eax,0xa
c001a00b:	c3                   	ret    

c001a00c <Filesystem::allocateSwapfile(char const*, int)>:
c001a00c:	31 c0                	xor    eax,eax
c001a00e:	31 d2                	xor    edx,edx
c001a010:	c3                   	ret    
c001a011:	90                   	nop

c001a012 <File::~File()>:
c001a012:	83 ec 0c             	sub    esp,0xc
c001a015:	ba d0 1d 03 c0       	mov    edx,0xc0031dd0
c001a01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01e:	89 10                	mov    DWORD PTR [eax],edx
c001a020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a024:	83 ec 0c             	sub    esp,0xc
c001a027:	50                   	push   eax
c001a028:	e8 7b dc ff ff       	call   c0017ca8 <UnixFile::~UnixFile()>
c001a02d:	83 c4 10             	add    esp,0x10
c001a030:	90                   	nop
c001a031:	83 c4 0c             	add    esp,0xc
c001a034:	c3                   	ret    
c001a035:	90                   	nop

c001a036 <File::~File()>:
c001a036:	83 ec 0c             	sub    esp,0xc
c001a039:	83 ec 0c             	sub    esp,0xc
c001a03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a040:	e8 cd ff ff ff       	call   c001a012 <File::~File()>
c001a045:	83 c4 10             	add    esp,0x10
c001a048:	83 ec 08             	sub    esp,0x8
c001a04b:	68 14 01 00 00       	push   0x114
c001a050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a054:	e8 c3 f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	83 c4 0c             	add    esp,0xc
c001a05f:	c3                   	ret    

c001a060 <Directory::~Directory()>:
c001a060:	83 ec 0c             	sub    esp,0xc
c001a063:	ba ec 1d 03 c0       	mov    edx,0xc0031dec
c001a068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06c:	89 10                	mov    DWORD PTR [eax],edx
c001a06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a072:	83 ec 0c             	sub    esp,0xc
c001a075:	50                   	push   eax
c001a076:	e8 2d dc ff ff       	call   c0017ca8 <UnixFile::~UnixFile()>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	90                   	nop
c001a07f:	83 c4 0c             	add    esp,0xc
c001a082:	c3                   	ret    
c001a083:	90                   	nop

c001a084 <Directory::~Directory()>:
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	83 ec 0c             	sub    esp,0xc
c001a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a08e:	e8 cd ff ff ff       	call   c001a060 <Directory::~Directory()>
c001a093:	83 c4 10             	add    esp,0x10
c001a096:	83 ec 08             	sub    esp,0x8
c001a099:	68 14 01 00 00       	push   0x114
c001a09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a2:	e8 75 f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	83 c4 0c             	add    esp,0xc
c001a0ad:	c3                   	ret    

c001a0ae <Filesystem::Filesystem()>:
c001a0ae:	ba 64 1d 03 c0       	mov    edx,0xc0031d64
c001a0b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b7:	89 10                	mov    DWORD PTR [eax],edx
c001a0b9:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a0bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ca:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a0cf:	90                   	nop
c001a0d0:	c3                   	ret    
c001a0d1:	90                   	nop

c001a0d2 <Filesystem::~Filesystem()>:
c001a0d2:	ba 64 1d 03 c0       	mov    edx,0xc0031d64
c001a0d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0db:	89 10                	mov    DWORD PTR [eax],edx
c001a0dd:	90                   	nop
c001a0de:	c3                   	ret    
c001a0df:	90                   	nop

c001a0e0 <Filesystem::~Filesystem()>:
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0e7:	e8 e6 ff ff ff       	call   c001a0d2 <Filesystem::~Filesystem()>
c001a0ec:	83 c4 04             	add    esp,0x4
c001a0ef:	83 ec 08             	sub    esp,0x8
c001a0f2:	6a 08                	push   0x8
c001a0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f8:	e8 1f f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	83 c4 0c             	add    esp,0xc
c001a103:	c3                   	ret    

c001a104 <Fs::getcwd(Process*, char*, int)>:
c001a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a108:	31 c0                	xor    eax,eax
c001a10a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a10d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a111:	7d 15                	jge    c001a128 <Fs::getcwd(Process*, char*, int)+0x24>
c001a113:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a117:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a11e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a121:	84 c9                	test   cl,cl
c001a123:	74 06                	je     c001a12b <Fs::getcwd(Process*, char*, int)+0x27>
c001a125:	40                   	inc    eax
c001a126:	eb e2                	jmp    c001a10a <Fs::getcwd(Process*, char*, int)+0x6>
c001a128:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a12b:	31 c0                	xor    eax,eax
c001a12d:	c3                   	ret    

c001a12e <Fs::initVFS()>:
c001a12e:	83 ec 18             	sub    esp,0x18
c001a131:	6a 08                	push   0x8
c001a133:	e8 82 c2 ff ff       	call   c00163ba <malloc>
c001a138:	89 04 24             	mov    DWORD PTR [esp],eax
c001a13b:	e8 d8 e9 00 00       	call   c0028b18 <FAT::FAT()>
c001a140:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a147:	e8 6e c2 ff ff       	call   c00163ba <malloc>
c001a14c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a14f:	e8 f0 f8 00 00       	call   c0029a44 <ISO9660::ISO9660()>
c001a154:	83 c4 1c             	add    esp,0x1c
c001a157:	c3                   	ret    

c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a158:	55                   	push   ebp
c001a159:	57                   	push   edi
c001a15a:	56                   	push   esi
c001a15b:	53                   	push   ebx
c001a15c:	81 ec 10 04 00 00    	sub    esp,0x410
c001a162:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a169:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a170:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a178:	68 00 04 00 00       	push   0x400
c001a17d:	6a 00                	push   0x0
c001a17f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a183:	57                   	push   edi
c001a184:	e8 67 63 fe ff       	call   c00004f0 <memset>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a190:	75 0b                	jne    c001a19d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a192:	50                   	push   eax
c001a193:	50                   	push   eax
c001a194:	55                   	push   ebp
c001a195:	57                   	push   edi
c001a196:	e8 a5 64 fe ff       	call   c0000640 <strcpy>
c001a19b:	eb 51                	jmp    c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a19d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a1a1:	83 f8 5c             	cmp    eax,0x5c
c001a1a4:	74 05                	je     c001a1ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a1a6:	83 f8 2f             	cmp    eax,0x2f
c001a1a9:	75 1e                	jne    c001a1c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a1ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a1b2:	8a 00                	mov    al,BYTE PTR [eax]
c001a1b4:	3c 60                	cmp    al,0x60
c001a1b6:	7e 03                	jle    c001a1bb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a1b8:	83 e8 20             	sub    eax,0x20
c001a1bb:	88 04 24             	mov    BYTE PTR [esp],al
c001a1be:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a1c5:	50                   	push   eax
c001a1c6:	50                   	push   eax
c001a1c7:	eb 1e                	jmp    c001a1e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a1c9:	50                   	push   eax
c001a1ca:	50                   	push   eax
c001a1cb:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a1d2:	57                   	push   edi
c001a1d3:	e8 68 64 fe ff       	call   c0000640 <strcpy>
c001a1d8:	58                   	pop    eax
c001a1d9:	5a                   	pop    edx
c001a1da:	68 5f 2e 03 c0       	push   0xc0032e5f
c001a1df:	57                   	push   edi
c001a1e0:	e8 5b 66 fe ff       	call   c0000840 <strcat>
c001a1e5:	59                   	pop    ecx
c001a1e6:	58                   	pop    eax
c001a1e7:	55                   	push   ebp
c001a1e8:	57                   	push   edi
c001a1e9:	e8 52 66 fe ff       	call   c0000840 <strcat>
c001a1ee:	83 c4 10             	add    esp,0x10
c001a1f1:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a1f4:	3c 60                	cmp    al,0x60
c001a1f6:	7e 03                	jle    c001a1fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a1f8:	83 e8 20             	sub    eax,0x20
c001a1fb:	88 04 24             	mov    BYTE PTR [esp],al
c001a1fe:	88 06                	mov    BYTE PTR [esi],al
c001a200:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a207:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a20d:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a211:	bf 03 00 00 00       	mov    edi,0x3
c001a216:	b8 03 00 00 00       	mov    eax,0x3
c001a21b:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a21f:	89 e9                	mov    ecx,ebp
c001a221:	85 ed                	test   ebp,ebp
c001a223:	0f 84 97 00 00 00    	je     c001a2c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a229:	8d 57 01             	lea    edx,[edi+0x1]
c001a22c:	83 fd 5c             	cmp    ebp,0x5c
c001a22f:	74 05                	je     c001a236 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a231:	83 fd 2f             	cmp    ebp,0x2f
c001a234:	75 12                	jne    c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a236:	89 c5                	mov    ebp,eax
c001a238:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a23d:	74 09                	je     c001a248 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a23f:	40                   	inc    eax
c001a240:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a244:	89 d7                	mov    edi,edx
c001a246:	eb d3                	jmp    c001a21b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a248:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a24d:	0f be e9             	movsx  ebp,cl
c001a250:	75 5e                	jne    c001a2b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a252:	83 fd 2e             	cmp    ebp,0x2e
c001a255:	75 59                	jne    c001a2b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a257:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a25b:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a260:	74 18                	je     c001a27a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a262:	83 fd 2e             	cmp    ebp,0x2e
c001a265:	74 53                	je     c001a2ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a267:	89 fa                	mov    edx,edi
c001a269:	42                   	inc    edx
c001a26a:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a26e:	83 f9 2f             	cmp    ecx,0x2f
c001a271:	74 f6                	je     c001a269 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a273:	83 f9 5c             	cmp    ecx,0x5c
c001a276:	74 f1                	je     c001a269 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a278:	eb ca                	jmp    c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a27a:	83 fd 2e             	cmp    ebp,0x2e
c001a27d:	74 3b                	je     c001a2ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a27f:	83 f8 03             	cmp    eax,0x3
c001a282:	74 c0                	je     c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a284:	42                   	inc    edx
c001a285:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a289:	83 f9 5c             	cmp    ecx,0x5c
c001a28c:	74 f6                	je     c001a284 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a28e:	83 f9 2f             	cmp    ecx,0x2f
c001a291:	74 f1                	je     c001a284 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a293:	48                   	dec    eax
c001a294:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a298:	75 06                	jne    c001a2a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a29a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a29e:	eb f3                	jmp    c001a293 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a2a0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a2a4:	74 07                	je     c001a2ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a2a6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2aa:	48                   	dec    eax
c001a2ab:	eb f3                	jmp    c001a2a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a2ad:	40                   	inc    eax
c001a2ae:	eb 94                	jmp    c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2b0:	83 fd 5c             	cmp    ebp,0x5c
c001a2b3:	74 8f                	je     c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2b5:	83 fd 2f             	cmp    ebp,0x2f
c001a2b8:	74 8a                	je     c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2ba:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a2bd:	40                   	inc    eax
c001a2be:	eb 84                	jmp    c001a244 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2c0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2c4:	83 ec 0c             	sub    esp,0xc
c001a2c7:	56                   	push   esi
c001a2c8:	e8 a3 62 fe ff       	call   c0000570 <strlen>
c001a2cd:	83 c4 10             	add    esp,0x10
c001a2d0:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a2d5:	74 17                	je     c001a2ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2d7:	83 ec 0c             	sub    esp,0xc
c001a2da:	56                   	push   esi
c001a2db:	e8 90 62 fe ff       	call   c0000570 <strlen>
c001a2e0:	83 c4 10             	add    esp,0x10
c001a2e3:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a2e8:	74 04                	je     c001a2ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2ea:	31 ff                	xor    edi,edi
c001a2ec:	eb 5c                	jmp    c001a34a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a2ee:	83 ec 0c             	sub    esp,0xc
c001a2f1:	56                   	push   esi
c001a2f2:	e8 79 62 fe ff       	call   c0000570 <strlen>
c001a2f7:	83 c4 10             	add    esp,0x10
c001a2fa:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a2ff:	74 e9                	je     c001a2ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a301:	83 ec 0c             	sub    esp,0xc
c001a304:	56                   	push   esi
c001a305:	e8 66 62 fe ff       	call   c0000570 <strlen>
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a312:	eb b0                	jmp    c001a2c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a314:	52                   	push   edx
c001a315:	52                   	push   edx
c001a316:	56                   	push   esi
c001a317:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a31b:	55                   	push   ebp
c001a31c:	e8 1f 63 fe ff       	call   c0000640 <strcpy>
c001a321:	59                   	pop    ecx
c001a322:	58                   	pop    eax
c001a323:	56                   	push   esi
c001a324:	55                   	push   ebp
c001a325:	e8 96 f8 ff ff       	call   c0019bc0 <KeDereferenceSymlink(char const*, char*)>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	48                   	dec    eax
c001a32e:	75 37                	jne    c001a367 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a330:	50                   	push   eax
c001a331:	56                   	push   esi
c001a332:	55                   	push   ebp
c001a333:	68 1a 1d 03 c0       	push   0xc0031d1a
c001a338:	e8 0c ef ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001a33d:	83 c4 10             	add    esp,0x10
c001a340:	8d 47 01             	lea    eax,[edi+0x1]
c001a343:	83 ff 14             	cmp    edi,0x14
c001a346:	74 08                	je     c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a348:	89 c7                	mov    edi,eax
c001a34a:	85 db                	test   ebx,ebx
c001a34c:	75 c6                	jne    c001a314 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a34e:	eb 17                	jmp    c001a367 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a350:	83 ec 0c             	sub    esp,0xc
c001a353:	bf 15 00 00 00       	mov    edi,0x15
c001a358:	68 35 1d 03 c0       	push   0xc0031d35
c001a35d:	e8 00 5f 00 00       	call   c0020262 <KePanic(char const*)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	eb e3                	jmp    c001a34a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a367:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a36d:	5b                   	pop    ebx
c001a36e:	5e                   	pop    esi
c001a36f:	5f                   	pop    edi
c001a370:	5d                   	pop    ebp
c001a371:	c3                   	ret    

c001a372 <File::File(char const*, Process*, bool)>:
c001a372:	83 ec 1c             	sub    esp,0x1c
c001a375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a379:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a37d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a381:	83 ec 08             	sub    esp,0x8
c001a384:	6a 00                	push   0x0
c001a386:	50                   	push   eax
c001a387:	e8 36 d7 ff ff       	call   c0017ac2 <UnixFile::UnixFile(int)>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	ba d0 1d 03 c0       	mov    edx,0xc0031dd0
c001a394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a398:	89 10                	mov    DWORD PTR [eax],edx
c001a39a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a39f:	85 c0                	test   eax,eax
c001a3a1:	74 0f                	je     c001a3b2 <File::File(char const*, Process*, bool)+0x40>
c001a3a3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a3a8:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a3ac:	74 04                	je     c001a3b2 <File::File(char const*, Process*, bool)+0x40>
c001a3ae:	b0 01                	mov    al,0x1
c001a3b0:	eb 02                	jmp    c001a3b4 <File::File(char const*, Process*, bool)+0x42>
c001a3b2:	b0 00                	mov    al,0x0
c001a3b4:	0f b6 c0             	movzx  eax,al
c001a3b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3bb:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a3c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3c5:	83 c2 0d             	add    edx,0xd
c001a3c8:	50                   	push   eax
c001a3c9:	51                   	push   ecx
c001a3ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ce:	52                   	push   edx
c001a3cf:	e8 84 fd ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a3d4:	83 c4 10             	add    esp,0x10
c001a3d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3db:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a3de:	83 e8 41             	sub    eax,0x41
c001a3e1:	88 c2                	mov    dl,al
c001a3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3e7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3f1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3f9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3ff:	0f b6 c0             	movzx  eax,al
c001a402:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a409:	85 c0                	test   eax,eax
c001a40b:	74 3e                	je     c001a44b <File::File(char const*, Process*, bool)+0xd9>
c001a40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a411:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a417:	0f b6 c0             	movzx  eax,al
c001a41a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a421:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a427:	85 c0                	test   eax,eax
c001a429:	75 20                	jne    c001a44b <File::File(char const*, Process*, bool)+0xd9>
c001a42b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a42f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a435:	0f b6 c0             	movzx  eax,al
c001a438:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a43f:	83 ec 0c             	sub    esp,0xc
c001a442:	50                   	push   eax
c001a443:	e8 b2 21 00 00       	call   c001c5fa <LogicalDisk::mount()>
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	90                   	nop
c001a44c:	83 c4 1c             	add    esp,0x1c
c001a44f:	c3                   	ret    

c001a450 <File::File(char const*, Process*)>:
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	6a 01                	push   0x1
c001a455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a461:	e8 0c ff ff ff       	call   c001a372 <File::File(char const*, Process*, bool)>
c001a466:	83 c4 10             	add    esp,0x10
c001a469:	90                   	nop
c001a46a:	83 c4 0c             	add    esp,0xc
c001a46d:	c3                   	ret    

c001a46e <File::open(FileOpenMode)>:
c001a46e:	53                   	push   ebx
c001a46f:	b8 0b 00 00 00       	mov    eax,0xb
c001a474:	83 ec 08             	sub    esp,0x8
c001a477:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a47b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a482:	83 fa 19             	cmp    edx,0x19
c001a485:	77 40                	ja     c001a4c7 <File::open(FileOpenMode)+0x59>
c001a487:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a48e:	85 d2                	test   edx,edx
c001a490:	74 35                	je     c001a4c7 <File::open(FileOpenMode)+0x59>
c001a492:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a498:	85 d2                	test   edx,edx
c001a49a:	74 2b                	je     c001a4c7 <File::open(FileOpenMode)+0x59>
c001a49c:	b8 06 00 00 00       	mov    eax,0x6
c001a4a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a4a5:	75 20                	jne    c001a4c7 <File::open(FileOpenMode)+0x59>
c001a4a7:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4a9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a4b3:	51                   	push   ecx
c001a4b4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a4b7:	51                   	push   ecx
c001a4b8:	52                   	push   edx
c001a4b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a4bc:	83 c4 10             	add    esp,0x10
c001a4bf:	85 c0                	test   eax,eax
c001a4c1:	75 04                	jne    c001a4c7 <File::open(FileOpenMode)+0x59>
c001a4c3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a4c7:	83 c4 08             	add    esp,0x8
c001a4ca:	5b                   	pop    ebx
c001a4cb:	c3                   	ret    

c001a4cc <File::close()>:
c001a4cc:	53                   	push   ebx
c001a4cd:	b8 0b 00 00 00       	mov    eax,0xb
c001a4d2:	83 ec 08             	sub    esp,0x8
c001a4d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a4e0:	83 f9 19             	cmp    ecx,0x19
c001a4e3:	77 41                	ja     c001a526 <File::close()+0x5a>
c001a4e5:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4ec:	85 db                	test   ebx,ebx
c001a4ee:	74 36                	je     c001a526 <File::close()+0x5a>
c001a4f0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a4f7:	74 2d                	je     c001a526 <File::close()+0x5a>
c001a4f9:	b8 05 00 00 00       	mov    eax,0x5
c001a4fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a502:	74 22                	je     c001a526 <File::close()+0x5a>
c001a504:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a508:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a50f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a515:	53                   	push   ebx
c001a516:	53                   	push   ebx
c001a517:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a519:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a51f:	50                   	push   eax
c001a520:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	83 c4 08             	add    esp,0x8
c001a529:	5b                   	pop    ebx
c001a52a:	c3                   	ret    
c001a52b:	90                   	nop

c001a52c <File::seek(unsigned long long)>:
c001a52c:	56                   	push   esi
c001a52d:	53                   	push   ebx
c001a52e:	b8 0b 00 00 00       	mov    eax,0xb
c001a533:	51                   	push   ecx
c001a534:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a538:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a53c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a543:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a547:	83 fa 19             	cmp    edx,0x19
c001a54a:	77 31                	ja     c001a57d <File::seek(unsigned long long)+0x51>
c001a54c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a553:	85 d2                	test   edx,edx
c001a555:	74 26                	je     c001a57d <File::seek(unsigned long long)+0x51>
c001a557:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a55d:	85 d2                	test   edx,edx
c001a55f:	74 1c                	je     c001a57d <File::seek(unsigned long long)+0x51>
c001a561:	b8 05 00 00 00       	mov    eax,0x5
c001a566:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a56a:	74 11                	je     c001a57d <File::seek(unsigned long long)+0x51>
c001a56c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a56e:	53                   	push   ebx
c001a56f:	51                   	push   ecx
c001a570:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a576:	52                   	push   edx
c001a577:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	5a                   	pop    edx
c001a57e:	5b                   	pop    ebx
c001a57f:	5e                   	pop    esi
c001a580:	c3                   	ret    
c001a581:	90                   	nop

c001a582 <File::truncate(unsigned long long)>:
c001a582:	56                   	push   esi
c001a583:	53                   	push   ebx
c001a584:	b8 0b 00 00 00       	mov    eax,0xb
c001a589:	51                   	push   ecx
c001a58a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a58e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a592:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a599:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a59d:	83 fa 19             	cmp    edx,0x19
c001a5a0:	77 31                	ja     c001a5d3 <File::truncate(unsigned long long)+0x51>
c001a5a2:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5a9:	85 d2                	test   edx,edx
c001a5ab:	74 26                	je     c001a5d3 <File::truncate(unsigned long long)+0x51>
c001a5ad:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5b3:	85 d2                	test   edx,edx
c001a5b5:	74 1c                	je     c001a5d3 <File::truncate(unsigned long long)+0x51>
c001a5b7:	b8 05 00 00 00       	mov    eax,0x5
c001a5bc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a5c0:	74 11                	je     c001a5d3 <File::truncate(unsigned long long)+0x51>
c001a5c2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5c4:	53                   	push   ebx
c001a5c5:	51                   	push   ecx
c001a5c6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a5cc:	52                   	push   edx
c001a5cd:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	5a                   	pop    edx
c001a5d4:	5b                   	pop    ebx
c001a5d5:	5e                   	pop    esi
c001a5d6:	c3                   	ret    
c001a5d7:	90                   	nop

c001a5d8 <File::tell(unsigned long long*)>:
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	b8 0b 00 00 00       	mov    eax,0xb
c001a5e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5e4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a5eb:	83 fa 19             	cmp    edx,0x19
c001a5ee:	77 34                	ja     c001a624 <File::tell(unsigned long long*)+0x4c>
c001a5f0:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5f7:	85 d2                	test   edx,edx
c001a5f9:	74 29                	je     c001a624 <File::tell(unsigned long long*)+0x4c>
c001a5fb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a601:	85 d2                	test   edx,edx
c001a603:	74 1f                	je     c001a624 <File::tell(unsigned long long*)+0x4c>
c001a605:	b8 05 00 00 00       	mov    eax,0x5
c001a60a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a60e:	74 14                	je     c001a624 <File::tell(unsigned long long*)+0x4c>
c001a610:	50                   	push   eax
c001a611:	8b 02                	mov    eax,DWORD PTR [edx]
c001a613:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a617:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a61d:	52                   	push   edx
c001a61e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	83 c4 0c             	add    esp,0xc
c001a627:	c3                   	ret    

c001a628 <File::rewind()>:
c001a628:	83 ec 10             	sub    esp,0x10
c001a62b:	6a 00                	push   0x0
c001a62d:	6a 00                	push   0x0
c001a62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a633:	e8 f4 fe ff ff       	call   c001a52c <File::seek(unsigned long long)>
c001a638:	83 c4 1c             	add    esp,0x1c
c001a63b:	c3                   	ret    

c001a63c <File::unlink()>:
c001a63c:	83 ec 0c             	sub    esp,0xc
c001a63f:	b8 0b 00 00 00       	mov    eax,0xb
c001a644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a648:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a64f:	83 f9 19             	cmp    ecx,0x19
c001a652:	77 2f                	ja     c001a683 <File::unlink()+0x47>
c001a654:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a65b:	85 c9                	test   ecx,ecx
c001a65d:	74 24                	je     c001a683 <File::unlink()+0x47>
c001a65f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a665:	85 c9                	test   ecx,ecx
c001a667:	74 1a                	je     c001a683 <File::unlink()+0x47>
c001a669:	b8 06 00 00 00       	mov    eax,0x6
c001a66e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a672:	75 0f                	jne    c001a683 <File::unlink()+0x47>
c001a674:	83 c2 0d             	add    edx,0xd
c001a677:	50                   	push   eax
c001a678:	50                   	push   eax
c001a679:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a67b:	52                   	push   edx
c001a67c:	51                   	push   ecx
c001a67d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a680:	83 c4 10             	add    esp,0x10
c001a683:	83 c4 0c             	add    esp,0xc
c001a686:	c3                   	ret    
c001a687:	90                   	nop

c001a688 <File::rename(char const*)>:
c001a688:	83 ec 0c             	sub    esp,0xc
c001a68b:	b8 0b 00 00 00       	mov    eax,0xb
c001a690:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a694:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a69b:	83 f9 19             	cmp    ecx,0x19
c001a69e:	77 32                	ja     c001a6d2 <File::rename(char const*)+0x4a>
c001a6a0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6a7:	85 c9                	test   ecx,ecx
c001a6a9:	74 27                	je     c001a6d2 <File::rename(char const*)+0x4a>
c001a6ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6b1:	85 c9                	test   ecx,ecx
c001a6b3:	74 1d                	je     c001a6d2 <File::rename(char const*)+0x4a>
c001a6b5:	b8 06 00 00 00       	mov    eax,0x6
c001a6ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6be:	75 12                	jne    c001a6d2 <File::rename(char const*)+0x4a>
c001a6c0:	83 c2 0d             	add    edx,0xd
c001a6c3:	50                   	push   eax
c001a6c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ca:	52                   	push   edx
c001a6cb:	51                   	push   ecx
c001a6cc:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a6cf:	83 c4 10             	add    esp,0x10
c001a6d2:	83 c4 0c             	add    esp,0xc
c001a6d5:	c3                   	ret    

c001a6d6 <File::chfatattr(unsigned char, unsigned char)>:
c001a6d6:	57                   	push   edi
c001a6d7:	b8 0b 00 00 00       	mov    eax,0xb
c001a6dc:	56                   	push   esi
c001a6dd:	53                   	push   ebx
c001a6de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6f1:	83 f9 19             	cmp    ecx,0x19
c001a6f4:	77 37                	ja     c001a72d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6f6:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6fd:	85 c9                	test   ecx,ecx
c001a6ff:	74 2c                	je     c001a72d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a701:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a707:	85 c9                	test   ecx,ecx
c001a709:	74 22                	je     c001a72d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a70b:	b8 06 00 00 00       	mov    eax,0x6
c001a710:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a714:	75 17                	jne    c001a72d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a716:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a718:	89 f0                	mov    eax,esi
c001a71a:	83 c2 0d             	add    edx,0xd
c001a71d:	0f b6 f0             	movzx  esi,al
c001a720:	0f b6 db             	movzx  ebx,bl
c001a723:	56                   	push   esi
c001a724:	53                   	push   ebx
c001a725:	52                   	push   edx
c001a726:	51                   	push   ecx
c001a727:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	5b                   	pop    ebx
c001a72e:	5e                   	pop    esi
c001a72f:	5f                   	pop    edi
c001a730:	c3                   	ret    
c001a731:	90                   	nop

c001a732 <File::exists()>:
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	31 c0                	xor    eax,eax
c001a737:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a73b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a742:	83 f9 19             	cmp    ecx,0x19
c001a745:	77 24                	ja     c001a76b <File::exists()+0x39>
c001a747:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a74e:	85 c9                	test   ecx,ecx
c001a750:	74 19                	je     c001a76b <File::exists()+0x39>
c001a752:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a758:	85 c9                	test   ecx,ecx
c001a75a:	74 0f                	je     c001a76b <File::exists()+0x39>
c001a75c:	83 c2 0d             	add    edx,0xd
c001a75f:	50                   	push   eax
c001a760:	50                   	push   eax
c001a761:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a763:	52                   	push   edx
c001a764:	51                   	push   ecx
c001a765:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a768:	83 c4 10             	add    esp,0x10
c001a76b:	83 c4 0c             	add    esp,0xc
c001a76e:	c3                   	ret    
c001a76f:	90                   	nop

c001a770 <File::stat(unsigned long long*, bool*)>:
c001a770:	56                   	push   esi
c001a771:	53                   	push   ebx
c001a772:	50                   	push   eax
c001a773:	b8 0b 00 00 00       	mov    eax,0xb
c001a778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a77c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a780:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a787:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a78b:	83 f9 19             	cmp    ecx,0x19
c001a78e:	77 3d                	ja     c001a7cd <File::stat(unsigned long long*, bool*)+0x5d>
c001a790:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a797:	85 c9                	test   ecx,ecx
c001a799:	74 32                	je     c001a7cd <File::stat(unsigned long long*, bool*)+0x5d>
c001a79b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a7a1:	85 c9                	test   ecx,ecx
c001a7a3:	74 28                	je     c001a7cd <File::stat(unsigned long long*, bool*)+0x5d>
c001a7a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a7a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a7ab:	74 13                	je     c001a7c0 <File::stat(unsigned long long*, bool*)+0x50>
c001a7ad:	83 ec 04             	sub    esp,0x4
c001a7b0:	56                   	push   esi
c001a7b1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7b7:	51                   	push   ecx
c001a7b8:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a7bb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a7be:	eb 0a                	jmp    c001a7ca <File::stat(unsigned long long*, bool*)+0x5a>
c001a7c0:	53                   	push   ebx
c001a7c1:	83 c2 0d             	add    edx,0xd
c001a7c4:	56                   	push   esi
c001a7c5:	52                   	push   edx
c001a7c6:	51                   	push   ecx
c001a7c7:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	5a                   	pop    edx
c001a7ce:	5b                   	pop    ebx
c001a7cf:	5e                   	pop    esi
c001a7d0:	c3                   	ret    

c001a7d1 <Fs::setcwd(Process*, char*)>:
c001a7d1:	55                   	push   ebp
c001a7d2:	57                   	push   edi
c001a7d3:	56                   	push   esi
c001a7d4:	53                   	push   ebx
c001a7d5:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a7db:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a7e2:	6a 00                	push   0x0
c001a7e4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a7ea:	57                   	push   edi
c001a7eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a7f2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a7f6:	56                   	push   esi
c001a7f7:	e8 5c f9 ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a7fc:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7ff:	e8 6c 5d fe ff       	call   c0000570 <strlen>
c001a804:	83 c4 10             	add    esp,0x10
c001a807:	83 f8 02             	cmp    eax,0x2
c001a80a:	77 15                	ja     c001a821 <Fs::setcwd(Process*, char*)+0x50>
c001a80c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a811:	83 eb 41             	sub    ebx,0x41
c001a814:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a81b:	85 c0                	test   eax,eax
c001a81d:	75 1c                	jne    c001a83b <Fs::setcwd(Process*, char*)+0x6a>
c001a81f:	eb 2f                	jmp    c001a850 <Fs::setcwd(Process*, char*)+0x7f>
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	56                   	push   esi
c001a825:	e8 46 5d fe ff       	call   c0000570 <strlen>
c001a82a:	83 c4 10             	add    esp,0x10
c001a82d:	83 f8 03             	cmp    eax,0x3
c001a830:	75 57                	jne    c001a889 <Fs::setcwd(Process*, char*)+0xb8>
c001a832:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a837:	75 50                	jne    c001a889 <Fs::setcwd(Process*, char*)+0xb8>
c001a839:	eb d1                	jmp    c001a80c <Fs::setcwd(Process*, char*)+0x3b>
c001a83b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a842:	75 0c                	jne    c001a850 <Fs::setcwd(Process*, char*)+0x7f>
c001a844:	83 ec 0c             	sub    esp,0xc
c001a847:	50                   	push   eax
c001a848:	e8 ad 1d 00 00       	call   c001c5fa <LogicalDisk::mount()>
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	b8 03 00 00 00       	mov    eax,0x3
c001a855:	83 fb 19             	cmp    ebx,0x19
c001a858:	0f 87 c6 00 00 00    	ja     c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a85e:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a865:	b8 05 00 00 00       	mov    eax,0x5
c001a86a:	85 d2                	test   edx,edx
c001a86c:	0f 84 b2 00 00 00    	je     c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a872:	b8 06 00 00 00       	mov    eax,0x6
c001a877:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a87e:	0f 85 92 00 00 00    	jne    c001a916 <Fs::setcwd(Process*, char*)+0x145>
c001a884:	e9 9b 00 00 00       	jmp    c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a889:	83 ec 0c             	sub    esp,0xc
c001a88c:	68 14 01 00 00       	push   0x114
c001a891:	e8 24 bb ff ff       	call   c00163ba <malloc>
c001a896:	83 c4 0c             	add    esp,0xc
c001a899:	89 c3                	mov    ebx,eax
c001a89b:	55                   	push   ebp
c001a89c:	56                   	push   esi
c001a89d:	50                   	push   eax
c001a89e:	e8 ad fb ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001a8a3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a8a8:	83 c4 0c             	add    esp,0xc
c001a8ab:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a8af:	50                   	push   eax
c001a8b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a8b4:	50                   	push   eax
c001a8b5:	53                   	push   ebx
c001a8b6:	e8 b5 fe ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	83 f8 02             	cmp    eax,0x2
c001a8c1:	74 27                	je     c001a8ea <Fs::setcwd(Process*, char*)+0x119>
c001a8c3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a8c8:	75 1c                	jne    c001a8e6 <Fs::setcwd(Process*, char*)+0x115>
c001a8ca:	b8 02 00 00 00       	mov    eax,0x2
c001a8cf:	85 db                	test   ebx,ebx
c001a8d1:	74 51                	je     c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a8d3:	83 ec 0c             	sub    esp,0xc
c001a8d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8d8:	53                   	push   ebx
c001a8d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8dc:	83 c4 10             	add    esp,0x10
c001a8df:	b8 02 00 00 00       	mov    eax,0x2
c001a8e4:	eb 3e                	jmp    c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a8e6:	85 c0                	test   eax,eax
c001a8e8:	74 1c                	je     c001a906 <Fs::setcwd(Process*, char*)+0x135>
c001a8ea:	b8 01 00 00 00       	mov    eax,0x1
c001a8ef:	85 db                	test   ebx,ebx
c001a8f1:	74 31                	je     c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a8f3:	83 ec 0c             	sub    esp,0xc
c001a8f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8f8:	53                   	push   ebx
c001a8f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8fc:	83 c4 10             	add    esp,0x10
c001a8ff:	b8 01 00 00 00       	mov    eax,0x1
c001a904:	eb 1e                	jmp    c001a924 <Fs::setcwd(Process*, char*)+0x153>
c001a906:	85 db                	test   ebx,ebx
c001a908:	74 0c                	je     c001a916 <Fs::setcwd(Process*, char*)+0x145>
c001a90a:	83 ec 0c             	sub    esp,0xc
c001a90d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a90f:	53                   	push   ebx
c001a910:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a913:	83 c4 10             	add    esp,0x10
c001a916:	50                   	push   eax
c001a917:	50                   	push   eax
c001a918:	56                   	push   esi
c001a919:	57                   	push   edi
c001a91a:	e8 21 5d fe ff       	call   c0000640 <strcpy>
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	31 c0                	xor    eax,eax
c001a924:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a92a:	5b                   	pop    ebx
c001a92b:	5e                   	pop    esi
c001a92c:	5f                   	pop    edi
c001a92d:	5d                   	pop    ebp
c001a92e:	c3                   	ret    
c001a92f:	90                   	nop

c001a930 <Directory::Directory(char const*, Process*)>:
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a937:	83 ec 08             	sub    esp,0x8
c001a93a:	6a 00                	push   0x0
c001a93c:	50                   	push   eax
c001a93d:	e8 80 d1 ff ff       	call   c0017ac2 <UnixFile::UnixFile(int)>
c001a942:	83 c4 10             	add    esp,0x10
c001a945:	ba ec 1d 03 c0       	mov    edx,0xc0031dec
c001a94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94e:	89 10                	mov    DWORD PTR [eax],edx
c001a950:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a955:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a959:	0f 95 c0             	setne  al
c001a95c:	0f b6 c0             	movzx  eax,al
c001a95f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a963:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a969:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a96d:	83 c2 0d             	add    edx,0xd
c001a970:	50                   	push   eax
c001a971:	51                   	push   ecx
c001a972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a976:	52                   	push   edx
c001a977:	e8 dc f7 ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a97c:	83 c4 10             	add    esp,0x10
c001a97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a983:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a986:	83 e8 41             	sub    eax,0x41
c001a989:	88 c2                	mov    dl,al
c001a98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a999:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9a7:	0f b6 c0             	movzx  eax,al
c001a9aa:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9b1:	85 c0                	test   eax,eax
c001a9b3:	74 3e                	je     c001a9f3 <Directory::Directory(char const*, Process*)+0xc3>
c001a9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9bf:	0f b6 c0             	movzx  eax,al
c001a9c2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9c9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9cf:	85 c0                	test   eax,eax
c001a9d1:	75 20                	jne    c001a9f3 <Directory::Directory(char const*, Process*)+0xc3>
c001a9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9dd:	0f b6 c0             	movzx  eax,al
c001a9e0:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9e7:	83 ec 0c             	sub    esp,0xc
c001a9ea:	50                   	push   eax
c001a9eb:	e8 0a 1c 00 00       	call   c001c5fa <LogicalDisk::mount()>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	90                   	nop
c001a9f4:	83 c4 0c             	add    esp,0xc
c001a9f7:	c3                   	ret    

c001a9f8 <Directory::open()>:
c001a9f8:	53                   	push   ebx
c001a9f9:	b8 0b 00 00 00       	mov    eax,0xb
c001a9fe:	83 ec 08             	sub    esp,0x8
c001aa01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa05:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aa0c:	83 fa 19             	cmp    edx,0x19
c001aa0f:	77 3d                	ja     c001aa4e <Directory::open()+0x56>
c001aa11:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aa18:	85 d2                	test   edx,edx
c001aa1a:	74 32                	je     c001aa4e <Directory::open()+0x56>
c001aa1c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aa22:	85 d2                	test   edx,edx
c001aa24:	74 28                	je     c001aa4e <Directory::open()+0x56>
c001aa26:	b8 06 00 00 00       	mov    eax,0x6
c001aa2b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aa2f:	75 1d                	jne    c001aa4e <Directory::open()+0x56>
c001aa31:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aa37:	50                   	push   eax
c001aa38:	8b 02                	mov    eax,DWORD PTR [edx]
c001aa3a:	51                   	push   ecx
c001aa3b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aa3e:	51                   	push   ecx
c001aa3f:	52                   	push   edx
c001aa40:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aa43:	83 c4 10             	add    esp,0x10
c001aa46:	85 c0                	test   eax,eax
c001aa48:	75 04                	jne    c001aa4e <Directory::open()+0x56>
c001aa4a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aa4e:	83 c4 08             	add    esp,0x8
c001aa51:	5b                   	pop    ebx
c001aa52:	c3                   	ret    
c001aa53:	90                   	nop

c001aa54 <Directory::close()>:
c001aa54:	53                   	push   ebx
c001aa55:	b8 0b 00 00 00       	mov    eax,0xb
c001aa5a:	83 ec 08             	sub    esp,0x8
c001aa5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa61:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa68:	83 f9 19             	cmp    ecx,0x19
c001aa6b:	77 41                	ja     c001aaae <Directory::close()+0x5a>
c001aa6d:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa74:	85 db                	test   ebx,ebx
c001aa76:	74 36                	je     c001aaae <Directory::close()+0x5a>
c001aa78:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa7f:	74 2d                	je     c001aaae <Directory::close()+0x5a>
c001aa81:	b8 05 00 00 00       	mov    eax,0x5
c001aa86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa8a:	74 22                	je     c001aaae <Directory::close()+0x5a>
c001aa8c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aa90:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa97:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa9d:	53                   	push   ebx
c001aa9e:	53                   	push   ebx
c001aa9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aaa1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aaa7:	50                   	push   eax
c001aaa8:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aaab:	83 c4 10             	add    esp,0x10
c001aaae:	83 c4 08             	add    esp,0x8
c001aab1:	5b                   	pop    ebx
c001aab2:	c3                   	ret    
c001aab3:	90                   	nop

c001aab4 <Directory::unlink()>:
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	b8 0b 00 00 00       	mov    eax,0xb
c001aabc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aac0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aac7:	83 f9 19             	cmp    ecx,0x19
c001aaca:	77 2f                	ja     c001aafb <Directory::unlink()+0x47>
c001aacc:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aad3:	85 c9                	test   ecx,ecx
c001aad5:	74 24                	je     c001aafb <Directory::unlink()+0x47>
c001aad7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aadd:	85 c9                	test   ecx,ecx
c001aadf:	74 1a                	je     c001aafb <Directory::unlink()+0x47>
c001aae1:	b8 06 00 00 00       	mov    eax,0x6
c001aae6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aaea:	75 0f                	jne    c001aafb <Directory::unlink()+0x47>
c001aaec:	83 c2 0d             	add    edx,0xd
c001aaef:	50                   	push   eax
c001aaf0:	50                   	push   eax
c001aaf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aaf3:	52                   	push   edx
c001aaf4:	51                   	push   ecx
c001aaf5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	83 c4 0c             	add    esp,0xc
c001aafe:	c3                   	ret    
c001aaff:	90                   	nop

c001ab00 <Directory::rename(char const*)>:
c001ab00:	83 ec 0c             	sub    esp,0xc
c001ab03:	b8 0b 00 00 00       	mov    eax,0xb
c001ab08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab13:	83 f9 19             	cmp    ecx,0x19
c001ab16:	77 32                	ja     c001ab4a <Directory::rename(char const*)+0x4a>
c001ab18:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab1f:	85 c9                	test   ecx,ecx
c001ab21:	74 27                	je     c001ab4a <Directory::rename(char const*)+0x4a>
c001ab23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab29:	85 c9                	test   ecx,ecx
c001ab2b:	74 1d                	je     c001ab4a <Directory::rename(char const*)+0x4a>
c001ab2d:	b8 06 00 00 00       	mov    eax,0x6
c001ab32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab36:	75 12                	jne    c001ab4a <Directory::rename(char const*)+0x4a>
c001ab38:	83 c2 0d             	add    edx,0xd
c001ab3b:	50                   	push   eax
c001ab3c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab42:	52                   	push   edx
c001ab43:	51                   	push   ecx
c001ab44:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	83 c4 0c             	add    esp,0xc
c001ab4d:	c3                   	ret    

c001ab4e <Directory::exists()>:
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	31 c0                	xor    eax,eax
c001ab53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab57:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab5e:	83 f9 19             	cmp    ecx,0x19
c001ab61:	77 24                	ja     c001ab87 <Directory::exists()+0x39>
c001ab63:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab6a:	85 c9                	test   ecx,ecx
c001ab6c:	74 19                	je     c001ab87 <Directory::exists()+0x39>
c001ab6e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab74:	85 c9                	test   ecx,ecx
c001ab76:	74 0f                	je     c001ab87 <Directory::exists()+0x39>
c001ab78:	83 c2 0d             	add    edx,0xd
c001ab7b:	50                   	push   eax
c001ab7c:	50                   	push   eax
c001ab7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab7f:	52                   	push   edx
c001ab80:	51                   	push   ecx
c001ab81:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	83 c4 0c             	add    esp,0xc
c001ab8a:	c3                   	ret    
c001ab8b:	90                   	nop

c001ab8c <Directory::read(dirent*)>:
c001ab8c:	83 ec 1c             	sub    esp,0x1c
c001ab8f:	b8 0b 00 00 00       	mov    eax,0xb
c001ab94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab9f:	83 f9 19             	cmp    ecx,0x19
c001aba2:	77 30                	ja     c001abd4 <Directory::read(dirent*)+0x48>
c001aba4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abab:	85 c9                	test   ecx,ecx
c001abad:	74 25                	je     c001abd4 <Directory::read(dirent*)+0x48>
c001abaf:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001abb6:	74 1c                	je     c001abd4 <Directory::read(dirent*)+0x48>
c001abb8:	83 ec 0c             	sub    esp,0xc
c001abbb:	8b 02                	mov    eax,DWORD PTR [edx]
c001abbd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001abc1:	51                   	push   ecx
c001abc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001abc6:	6a 00                	push   0x0
c001abc8:	68 10 01 00 00       	push   0x110
c001abcd:	52                   	push   edx
c001abce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abd1:	83 c4 20             	add    esp,0x20
c001abd4:	83 c4 1c             	add    esp,0x1c
c001abd7:	c3                   	ret    

c001abd8 <Directory::create()>:
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	b8 0b 00 00 00       	mov    eax,0xb
c001abe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abe4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abeb:	83 f9 19             	cmp    ecx,0x19
c001abee:	77 2f                	ja     c001ac1f <Directory::create()+0x47>
c001abf0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abf7:	85 c9                	test   ecx,ecx
c001abf9:	74 24                	je     c001ac1f <Directory::create()+0x47>
c001abfb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac01:	85 c9                	test   ecx,ecx
c001ac03:	74 1a                	je     c001ac1f <Directory::create()+0x47>
c001ac05:	b8 06 00 00 00       	mov    eax,0x6
c001ac0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac0e:	75 0f                	jne    c001ac1f <Directory::create()+0x47>
c001ac10:	83 c2 0d             	add    edx,0xd
c001ac13:	50                   	push   eax
c001ac14:	50                   	push   eax
c001ac15:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac17:	52                   	push   edx
c001ac18:	51                   	push   ecx
c001ac19:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ac1c:	83 c4 10             	add    esp,0x10
c001ac1f:	83 c4 0c             	add    esp,0xc
c001ac22:	c3                   	ret    
c001ac23:	90                   	nop

c001ac24 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac24:	b8 0a 00 00 00       	mov    eax,0xa
c001ac29:	c3                   	ret    
c001ac2a:	66 90                	xchg   ax,ax

c001ac2c <Bus::Bus(char const*)>:
c001ac2c:	83 ec 0c             	sub    esp,0xc
c001ac2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac33:	83 ec 08             	sub    esp,0x8
c001ac36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac3a:	50                   	push   eax
c001ac3b:	e8 ec 07 00 00       	call   c001b42c <Device::Device(char const*)>
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	ba 08 1e 03 c0       	mov    edx,0xc0031e08
c001ac48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4c:	89 10                	mov    DWORD PTR [eax],edx
c001ac4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac52:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ac5c:	90                   	nop
c001ac5d:	83 c4 0c             	add    esp,0xc
c001ac60:	c3                   	ret    
c001ac61:	90                   	nop
c001ac62:	66 90                	xchg   ax,ax

c001ac64 <Bus::~Bus()>:
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	ba 08 1e 03 c0       	mov    edx,0xc0031e08
c001ac6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac70:	89 10                	mov    DWORD PTR [eax],edx
c001ac72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac76:	83 ec 0c             	sub    esp,0xc
c001ac79:	50                   	push   eax
c001ac7a:	e8 4d 05 00 00       	call   c001b1cc <Device::~Device()>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	90                   	nop
c001ac83:	83 c4 0c             	add    esp,0xc
c001ac86:	c3                   	ret    
c001ac87:	90                   	nop

c001ac88 <Bus::~Bus()>:
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	83 ec 0c             	sub    esp,0xc
c001ac8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac92:	e8 cd ff ff ff       	call   c001ac64 <Bus::~Bus()>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	83 ec 08             	sub    esp,0x8
c001ac9d:	68 58 01 00 00       	push   0x158
c001aca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca6:	e8 71 e4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	83 c4 0c             	add    esp,0xc
c001acb1:	c3                   	ret    

c001acb2 <beepThread(void*)>:
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001acba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acbe:	48                   	dec    eax
c001acbf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001acc4:	75 01                	jne    c001acc7 <beepThread(void*)+0x15>
c001acc6:	fb                   	sti    
c001acc7:	83 ec 0c             	sub    esp,0xc
c001acca:	6b c2 0a             	imul   eax,edx,0xa
c001accd:	50                   	push   eax
c001acce:	e8 5d a7 00 00       	call   c0025430 <milliTenthSleep(unsigned int)>
c001acd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acda:	e8 58 c5 00 00       	call   c0027237 <HalMakeBeep(int)>
c001acdf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ace7:	83 c4 1c             	add    esp,0x1c
c001acea:	e9 25 a6 00 00       	jmp    c0025314 <blockTask(TaskState)>

c001acef <Krnl::beep(int, int, bool)>:
c001acef:	56                   	push   esi
c001acf0:	53                   	push   ebx
c001acf1:	83 ec 10             	sub    esp,0x10
c001acf4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad00:	e8 32 c5 00 00       	call   c0027237 <HalMakeBeep(int)>
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	89 f0                	mov    eax,esi
c001ad0a:	84 c0                	test   al,al
c001ad0c:	74 1e                	je     c001ad2c <Krnl::beep(int, int, bool)+0x3d>
c001ad0e:	83 ec 0c             	sub    esp,0xc
c001ad11:	6b db 0a             	imul   ebx,ebx,0xa
c001ad14:	53                   	push   ebx
c001ad15:	e8 16 a7 00 00       	call   c0025430 <milliTenthSleep(unsigned int)>
c001ad1a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad22:	83 c4 14             	add    esp,0x14
c001ad25:	5b                   	pop    ebx
c001ad26:	5e                   	pop    esi
c001ad27:	e9 0b c5 00 00       	jmp    c0027237 <HalMakeBeep(int)>
c001ad2c:	68 e6 00 00 00       	push   0xe6
c001ad31:	53                   	push   ebx
c001ad32:	68 b2 ac 01 c0       	push   0xc001acb2
c001ad37:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad3d:	e8 c6 a2 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c001ad42:	83 c4 14             	add    esp,0x14
c001ad45:	5b                   	pop    ebx
c001ad46:	5e                   	pop    esi
c001ad47:	c3                   	ret    

c001ad48 <User::loadClockSettings(int)>:
c001ad48:	53                   	push   ebx
c001ad49:	83 ec 14             	sub    esp,0x14
c001ad4c:	68 14 01 00 00       	push   0x114
c001ad51:	e8 64 b6 ff ff       	call   c00163ba <malloc>
c001ad56:	83 c4 0c             	add    esp,0xc
c001ad59:	89 c3                	mov    ebx,eax
c001ad5b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad61:	68 2c 1e 03 c0       	push   0xc0031e2c
c001ad66:	50                   	push   eax
c001ad67:	e8 e4 f6 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001ad6c:	58                   	pop    eax
c001ad6d:	5a                   	pop    edx
c001ad6e:	6a 01                	push   0x1
c001ad70:	53                   	push   ebx
c001ad71:	e8 f8 f6 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c001ad76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad79:	e8 4e f7 ff ff       	call   c001a4cc <File::close()>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	85 db                	test   ebx,ebx
c001ad83:	74 0f                	je     c001ad94 <User::loadClockSettings(int)+0x4c>
c001ad85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ad8e:	83 c4 08             	add    esp,0x8
c001ad91:	5b                   	pop    ebx
c001ad92:	ff e0                	jmp    eax
c001ad94:	83 c4 08             	add    esp,0x8
c001ad97:	5b                   	pop    ebx
c001ad98:	c3                   	ret    
c001ad99:	90                   	nop

c001ad9a <Clock::Clock(char const*)>:
c001ad9a:	83 ec 0c             	sub    esp,0xc
c001ad9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada1:	83 ec 08             	sub    esp,0x8
c001ada4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ada8:	50                   	push   eax
c001ada9:	e8 7e 06 00 00       	call   c001b42c <Device::Device(char const*)>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	ba 54 1e 03 c0       	mov    edx,0xc0031e54
c001adb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adba:	89 10                	mov    DWORD PTR [eax],edx
c001adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001adca:	90                   	nop
c001adcb:	83 c4 0c             	add    esp,0xc
c001adce:	c3                   	ret    
c001adcf:	90                   	nop

c001add0 <Clock::~Clock()>:
c001add0:	83 ec 0c             	sub    esp,0xc
c001add3:	ba 54 1e 03 c0       	mov    edx,0xc0031e54
c001add8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001addc:	89 10                	mov    DWORD PTR [eax],edx
c001adde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	50                   	push   eax
c001ade6:	e8 e1 03 00 00       	call   c001b1cc <Device::~Device()>
c001adeb:	83 c4 10             	add    esp,0x10
c001adee:	90                   	nop
c001adef:	83 c4 0c             	add    esp,0xc
c001adf2:	c3                   	ret    
c001adf3:	90                   	nop

c001adf4 <Clock::~Clock()>:
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	83 ec 0c             	sub    esp,0xc
c001adfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adfe:	e8 cd ff ff ff       	call   c001add0 <Clock::~Clock()>
c001ae03:	83 c4 10             	add    esp,0x10
c001ae06:	83 ec 08             	sub    esp,0x8
c001ae09:	68 58 01 00 00       	push   0x158
c001ae0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae12:	e8 05 e3 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	83 c4 0c             	add    esp,0xc
c001ae1d:	c3                   	ret    

c001ae1e <Clock::timeInSecondsLocal()>:
c001ae1e:	53                   	push   ebx
c001ae1f:	83 ec 14             	sub    esp,0x14
c001ae22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae26:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae28:	50                   	push   eax
c001ae29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae2c:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ae33:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ae39:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ae3f:	89 cb                	mov    ebx,ecx
c001ae41:	c1 fb 1f             	sar    ebx,0x1f
c001ae44:	01 c8                	add    eax,ecx
c001ae46:	11 da                	adc    edx,ebx
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	31 c9                	xor    ecx,ecx
c001ae4d:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae54:	74 05                	je     c001ae5b <Clock::timeInSecondsLocal()+0x3d>
c001ae56:	b9 08 07 00 00       	mov    ecx,0x708
c001ae5b:	31 db                	xor    ebx,ebx
c001ae5d:	01 c8                	add    eax,ecx
c001ae5f:	11 da                	adc    edx,ebx
c001ae61:	83 c4 08             	add    esp,0x8
c001ae64:	5b                   	pop    ebx
c001ae65:	c3                   	ret    

c001ae66 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ae66:	57                   	push   edi
c001ae67:	56                   	push   esi
c001ae68:	53                   	push   ebx
c001ae69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae71:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae77:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae7a:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae81:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae87:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ae8d:	99                   	cdq    
c001ae8e:	29 c6                	sub    esi,eax
c001ae90:	19 d7                	sbb    edi,edx
c001ae92:	89 f0                	mov    eax,esi
c001ae94:	89 fa                	mov    edx,edi
c001ae96:	31 f6                	xor    esi,esi
c001ae98:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae9f:	74 05                	je     c001aea6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001aea1:	be 08 07 00 00       	mov    esi,0x708
c001aea6:	31 ff                	xor    edi,edi
c001aea8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001aeac:	29 f0                	sub    eax,esi
c001aeae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb2:	19 fa                	sbb    edx,edi
c001aeb4:	89 d8                	mov    eax,ebx
c001aeb6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aeba:	5b                   	pop    ebx
c001aebb:	5e                   	pop    esi
c001aebc:	5f                   	pop    edi
c001aebd:	ff e0                	jmp    eax

c001aebf <datetimeToSeconds(datetime_t)>:
c001aebf:	55                   	push   ebp
c001aec0:	57                   	push   edi
c001aec1:	56                   	push   esi
c001aec2:	53                   	push   ebx
c001aec3:	83 ec 0c             	sub    esp,0xc
c001aec6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aeca:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aece:	89 d6                	mov    esi,edx
c001aed0:	0f b6 c7             	movzx  eax,bh
c001aed3:	c1 ee 10             	shr    esi,0x10
c001aed6:	6b e8 3c             	imul   ebp,eax,0x3c
c001aed9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001aedf:	0f b6 ce             	movzx  ecx,dh
c001aee2:	89 df                	mov    edi,ebx
c001aee4:	49                   	dec    ecx
c001aee5:	c1 ef 10             	shr    edi,0x10
c001aee8:	0f b6 db             	movzx  ebx,bl
c001aeeb:	89 f8                	mov    eax,edi
c001aeed:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001aef3:	0f b6 f8             	movzx  edi,al
c001aef6:	0f b6 d2             	movzx  edx,dl
c001aef9:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001aefd:	01 d8                	add    eax,ebx
c001aeff:	0f b7 de             	movzx  ebx,si
c001af02:	89 04 24             	mov    DWORD PTR [esp],eax
c001af05:	c1 f8 1f             	sar    eax,0x1f
c001af08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af0c:	0f b6 c1             	movzx  eax,cl
c001af0f:	8b 0c 85 a0 1e 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce160]
c001af16:	83 f8 01             	cmp    eax,0x1
c001af19:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001af1d:	76 27                	jbe    c001af46 <datetimeToSeconds(datetime_t)+0x87>
c001af1f:	83 e6 03             	and    esi,0x3
c001af22:	75 22                	jne    c001af46 <datetimeToSeconds(datetime_t)+0x87>
c001af24:	31 d2                	xor    edx,edx
c001af26:	be 64 00 00 00       	mov    esi,0x64
c001af2b:	89 d8                	mov    eax,ebx
c001af2d:	f7 f6                	div    esi
c001af2f:	85 d2                	test   edx,edx
c001af31:	75 12                	jne    c001af45 <datetimeToSeconds(datetime_t)+0x86>
c001af33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001af39:	be 90 01 00 00       	mov    esi,0x190
c001af3e:	99                   	cdq    
c001af3f:	f7 fe                	idiv   esi
c001af41:	85 d2                	test   edx,edx
c001af43:	75 01                	jne    c001af46 <datetimeToSeconds(datetime_t)+0x87>
c001af45:	41                   	inc    ecx
c001af46:	83 fb 46             	cmp    ebx,0x46
c001af49:	76 48                	jbe    c001af93 <datetimeToSeconds(datetime_t)+0xd4>
c001af4b:	be 46 00 00 00       	mov    esi,0x46
c001af50:	bf 64 00 00 00       	mov    edi,0x64
c001af55:	bd 90 01 00 00       	mov    ebp,0x190
c001af5a:	b8 6d 01 00 00       	mov    eax,0x16d
c001af5f:	f7 c6 03 00 00 00    	test   esi,0x3
c001af65:	75 23                	jne    c001af8a <datetimeToSeconds(datetime_t)+0xcb>
c001af67:	89 f0                	mov    eax,esi
c001af69:	99                   	cdq    
c001af6a:	f7 ff                	idiv   edi
c001af6c:	b8 6e 01 00 00       	mov    eax,0x16e
c001af71:	85 d2                	test   edx,edx
c001af73:	75 15                	jne    c001af8a <datetimeToSeconds(datetime_t)+0xcb>
c001af75:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af7b:	99                   	cdq    
c001af7c:	f7 fd                	idiv   ebp
c001af7e:	83 fa 01             	cmp    edx,0x1
c001af81:	19 c0                	sbb    eax,eax
c001af83:	f7 d0                	not    eax
c001af85:	05 6e 01 00 00       	add    eax,0x16e
c001af8a:	01 c1                	add    ecx,eax
c001af8c:	46                   	inc    esi
c001af8d:	39 de                	cmp    esi,ebx
c001af8f:	7c c9                	jl     c001af5a <datetimeToSeconds(datetime_t)+0x9b>
c001af91:	eb 34                	jmp    c001afc7 <datetimeToSeconds(datetime_t)+0x108>
c001af93:	74 32                	je     c001afc7 <datetimeToSeconds(datetime_t)+0x108>
c001af95:	b8 45 00 00 00       	mov    eax,0x45
c001af9a:	89 c2                	mov    edx,eax
c001af9c:	83 e2 03             	and    edx,0x3
c001af9f:	39 d8                	cmp    eax,ebx
c001afa1:	7e 0f                	jle    c001afb2 <datetimeToSeconds(datetime_t)+0xf3>
c001afa3:	83 fa 01             	cmp    edx,0x1
c001afa6:	19 d2                	sbb    edx,edx
c001afa8:	48                   	dec    eax
c001afa9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001afb0:	eb e8                	jmp    c001af9a <datetimeToSeconds(datetime_t)+0xdb>
c001afb2:	b8 6d 01 00 00       	mov    eax,0x16d
c001afb7:	85 d2                	test   edx,edx
c001afb9:	75 0a                	jne    c001afc5 <datetimeToSeconds(datetime_t)+0x106>
c001afbb:	83 fb 01             	cmp    ebx,0x1
c001afbe:	19 c0                	sbb    eax,eax
c001afc0:	05 6e 01 00 00       	add    eax,0x16e
c001afc5:	29 c1                	sub    ecx,eax
c001afc7:	b8 80 51 01 00       	mov    eax,0x15180
c001afcc:	f7 e9                	imul   ecx
c001afce:	03 04 24             	add    eax,DWORD PTR [esp]
c001afd1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001afd5:	83 c4 0c             	add    esp,0xc
c001afd8:	5b                   	pop    ebx
c001afd9:	5e                   	pop    esi
c001afda:	5f                   	pop    edi
c001afdb:	5d                   	pop    ebp
c001afdc:	c3                   	ret    
c001afdd:	90                   	nop

c001afde <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001afde:	57                   	push   edi
c001afdf:	56                   	push   esi
c001afe0:	53                   	push   ebx
c001afe1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afe5:	8b 06                	mov    eax,DWORD PTR [esi]
c001afe7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001afea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aff2:	e8 c8 fe ff ff       	call   c001aebf <datetimeToSeconds(datetime_t)>
c001aff7:	59                   	pop    ecx
c001aff8:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001afff:	5b                   	pop    ebx
c001b000:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b006:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b00c:	89 cb                	mov    ebx,ecx
c001b00e:	c1 fb 1f             	sar    ebx,0x1f
c001b011:	29 c8                	sub    eax,ecx
c001b013:	19 da                	sbb    edx,ebx
c001b015:	31 c9                	xor    ecx,ecx
c001b017:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b01e:	74 05                	je     c001b025 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b020:	b9 08 07 00 00       	mov    ecx,0x708
c001b025:	31 db                	xor    ebx,ebx
c001b027:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b02b:	29 c8                	sub    eax,ecx
c001b02d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b031:	19 da                	sbb    edx,ebx
c001b033:	89 f8                	mov    eax,edi
c001b035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b039:	5b                   	pop    ebx
c001b03a:	5e                   	pop    esi
c001b03b:	5f                   	pop    edi
c001b03c:	ff e0                	jmp    eax

c001b03e <secondsToDatetime(unsigned long long)>:
c001b03e:	55                   	push   ebp
c001b03f:	57                   	push   edi
c001b040:	56                   	push   esi
c001b041:	53                   	push   ebx
c001b042:	83 ec 1c             	sub    esp,0x1c
c001b045:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b049:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b04d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b051:	6a 00                	push   0x0
c001b053:	68 80 51 01 00       	push   0x15180
c001b058:	55                   	push   ebp
c001b059:	57                   	push   edi
c001b05a:	e8 f1 35 01 00       	call   c002e650 <__udivdi3>
c001b05f:	83 c4 10             	add    esp,0x10
c001b062:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b06c:	6a 00                	push   0x0
c001b06e:	68 80 51 01 00       	push   0x15180
c001b073:	55                   	push   ebp
c001b074:	57                   	push   edi
c001b075:	bf 10 0e 00 00       	mov    edi,0xe10
c001b07a:	e8 d1 36 01 00       	call   c002e750 <__umoddi3>
c001b07f:	83 c4 10             	add    esp,0x10
c001b082:	99                   	cdq    
c001b083:	f7 ff                	idiv   edi
c001b085:	bf 3c 00 00 00       	mov    edi,0x3c
c001b08a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b08d:	89 d0                	mov    eax,edx
c001b08f:	99                   	cdq    
c001b090:	f7 ff                	idiv   edi
c001b092:	85 db                	test   ebx,ebx
c001b094:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b097:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b09a:	79 11                	jns    c001b0ad <secondsToDatetime(unsigned long long)+0x6f>
c001b09c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b0a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0ab:	eb 07                	jmp    c001b0b4 <secondsToDatetime(unsigned long long)+0x76>
c001b0ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0b2:	89 d8                	mov    eax,ebx
c001b0b4:	bf b4 05 00 00       	mov    edi,0x5b4
c001b0b9:	99                   	cdq    
c001b0ba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b0bf:	f7 f9                	idiv   ecx
c001b0c1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b0c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0ca:	31 d2                	xor    edx,edx
c001b0cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b0d4:	01 c3                	add    ebx,eax
c001b0d6:	89 d8                	mov    eax,ebx
c001b0d8:	f7 f1                	div    ecx
c001b0da:	31 d2                	xor    edx,edx
c001b0dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b0df:	89 d8                	mov    eax,ebx
c001b0e1:	f7 f7                	div    edi
c001b0e3:	31 d2                	xor    edx,edx
c001b0e5:	29 c1                	sub    ecx,eax
c001b0e7:	89 d8                	mov    eax,ebx
c001b0e9:	f7 f5                	div    ebp
c001b0eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b0f0:	29 c1                	sub    ecx,eax
c001b0f2:	31 d2                	xor    edx,edx
c001b0f4:	89 c8                	mov    eax,ecx
c001b0f6:	f7 f5                	div    ebp
c001b0f8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b101:	31 d2                	xor    edx,edx
c001b103:	89 c8                	mov    eax,ecx
c001b105:	f7 f5                	div    ebp
c001b107:	31 d2                	xor    edx,edx
c001b109:	01 c3                	add    ebx,eax
c001b10b:	89 c8                	mov    eax,ecx
c001b10d:	f7 f7                	div    edi
c001b10f:	bf 99 00 00 00       	mov    edi,0x99
c001b114:	29 c3                	sub    ebx,eax
c001b116:	31 d2                	xor    edx,edx
c001b118:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b120:	29 c3                	sub    ebx,eax
c001b122:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b125:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b128:	bb 05 00 00 00       	mov    ebx,0x5
c001b12d:	83 c1 02             	add    ecx,0x2
c001b130:	89 c8                	mov    eax,ecx
c001b132:	f7 f7                	div    edi
c001b134:	31 d2                	xor    edx,edx
c001b136:	89 c7                	mov    edi,eax
c001b138:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b13e:	83 c0 02             	add    eax,0x2
c001b141:	f7 f3                	div    ebx
c001b143:	89 eb                	mov    ebx,ebp
c001b145:	29 c3                	sub    ebx,eax
c001b147:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b14d:	88 1e                	mov    BYTE PTR [esi],bl
c001b14f:	19 c0                	sbb    eax,eax
c001b151:	31 d2                	xor    edx,edx
c001b153:	83 e0 0c             	and    eax,0xc
c001b156:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b15a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b162:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b166:	83 f9 01             	cmp    ecx,0x1
c001b169:	0f 96 c2             	setbe  dl
c001b16c:	41                   	inc    ecx
c001b16d:	01 d0                	add    eax,edx
c001b16f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b172:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b176:	83 c4 1c             	add    esp,0x1c
c001b179:	89 f0                	mov    eax,esi
c001b17b:	5b                   	pop    ebx
c001b17c:	5e                   	pop    esi
c001b17d:	5f                   	pop    edi
c001b17e:	5d                   	pop    ebp
c001b17f:	c2 04 00             	ret    0x4

c001b182 <Clock::timeInDatetimeLocal()>:
c001b182:	53                   	push   ebx
c001b183:	83 ec 14             	sub    esp,0x14
c001b186:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b18a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b18e:	e8 8b fc ff ff       	call   c001ae1e <Clock::timeInSecondsLocal()>
c001b193:	83 c4 0c             	add    esp,0xc
c001b196:	52                   	push   edx
c001b197:	50                   	push   eax
c001b198:	53                   	push   ebx
c001b199:	e8 a0 fe ff ff       	call   c001b03e <secondsToDatetime(unsigned long long)>
c001b19e:	89 d8                	mov    eax,ebx
c001b1a0:	83 c4 14             	add    esp,0x14
c001b1a3:	5b                   	pop    ebx
c001b1a4:	c2 04 00             	ret    0x4
c001b1a7:	90                   	nop

c001b1a8 <Device::hibernate()>:
c001b1a8:	c3                   	ret    
c001b1a9:	90                   	nop

c001b1aa <Device::wake()>:
c001b1aa:	c3                   	ret    
c001b1ab:	90                   	nop

c001b1ac <Device::detect()>:
c001b1ac:	c3                   	ret    
c001b1ad:	90                   	nop

c001b1ae <Device::disableLegacy()>:
c001b1ae:	c3                   	ret    
c001b1af:	90                   	nop

c001b1b0 <Device::powerSaving(PowerSavingLevel)>:
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop

c001b1b2 <DriverlessDevice::close(int, int, void*)>:
c001b1b2:	31 c0                	xor    eax,eax
c001b1b4:	c3                   	ret    
c001b1b5:	90                   	nop

c001b1b6 <DriverlessDevice::detect()>:
c001b1b6:	c3                   	ret    
c001b1b7:	90                   	nop

c001b1b8 <DriverlessDevice::open(int, int, void*)>:
c001b1b8:	83 ec 18             	sub    esp,0x18
c001b1bb:	68 d0 1e 03 c0       	push   0xc0031ed0
c001b1c0:	e8 9d 50 00 00       	call   c0020262 <KePanic(char const*)>
c001b1c5:	83 c8 ff             	or     eax,0xffffffff
c001b1c8:	83 c4 1c             	add    esp,0x1c
c001b1cb:	c3                   	ret    

c001b1cc <Device::~Device()>:
c001b1cc:	ba 3c 1f 03 c0       	mov    edx,0xc0031f3c
c001b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1d5:	89 10                	mov    DWORD PTR [eax],edx
c001b1d7:	90                   	nop
c001b1d8:	c3                   	ret    
c001b1d9:	90                   	nop

c001b1da <Device::~Device()>:
c001b1da:	83 ec 0c             	sub    esp,0xc
c001b1dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1e1:	e8 e6 ff ff ff       	call   c001b1cc <Device::~Device()>
c001b1e6:	83 c4 04             	add    esp,0x4
c001b1e9:	83 ec 08             	sub    esp,0x8
c001b1ec:	68 58 01 00 00       	push   0x158
c001b1f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1f5:	e8 22 df ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b1fa:	83 c4 10             	add    esp,0x10
c001b1fd:	83 c4 0c             	add    esp,0xc
c001b200:	c3                   	ret    
c001b201:	90                   	nop

c001b202 <Device::findAndLoadDriver()>:
c001b202:	c7 44 24 04 ee 1e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031eee
c001b20a:	e9 3a e0 ff ff       	jmp    c0019249 <Dbg::kprintf(char const*, ...)>
c001b20f:	90                   	nop

c001b210 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b210:	57                   	push   edi
c001b211:	b9 09 00 00 00       	mov    ecx,0x9
c001b216:	56                   	push   esi
c001b217:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b21b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b21f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b229:	81 c7 18 01 00 00    	add    edi,0x118
c001b22f:	fc                   	cld    
c001b230:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b232:	5e                   	pop    esi
c001b233:	5f                   	pop    edi
c001b234:	c3                   	ret    
c001b235:	90                   	nop

c001b236 <Device::preOpenACPI(void*, char*, char*)>:
c001b236:	57                   	push   edi
c001b237:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b23c:	56                   	push   esi
c001b23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b241:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b245:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b24f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b255:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b25b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b25f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b261:	b9 0e 00 00 00       	mov    ecx,0xe
c001b266:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b26c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b270:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b272:	5e                   	pop    esi
c001b273:	5f                   	pop    edi
c001b274:	c3                   	ret    
c001b275:	90                   	nop

c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b276:	53                   	push   ebx
c001b277:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b27b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b27f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b283:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b287:	0f b6 c0             	movzx  eax,al
c001b28a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b28e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b296:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b29a:	5b                   	pop    ebx
c001b29b:	e9 c0 05 00 00       	jmp    c001b860 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b2a0 <Device::getParent()>:
c001b2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2a4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b2aa:	c3                   	ret    
c001b2ab:	90                   	nop

c001b2ac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b2ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2b4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b2b9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2c5:	e9 fe 06 00 00       	jmp    c001b9c8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b2ca <Device::addChild(Device*)>:
c001b2ca:	53                   	push   ebx
c001b2cb:	83 ec 08             	sub    esp,0x8
c001b2ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2d6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b2dc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b2e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2e4:	85 d2                	test   edx,edx
c001b2e6:	74 04                	je     c001b2ec <Device::addChild(Device*)+0x22>
c001b2e8:	89 d3                	mov    ebx,edx
c001b2ea:	eb f6                	jmp    c001b2e2 <Device::addChild(Device*)+0x18>
c001b2ec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b2ef:	83 ec 0c             	sub    esp,0xc
c001b2f2:	6a 08                	push   0x8
c001b2f4:	e8 c1 b0 ff ff       	call   c00163ba <malloc>
c001b2f9:	89 03                	mov    DWORD PTR [ebx],eax
c001b2fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b301:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b308:	83 c4 18             	add    esp,0x18
c001b30b:	5b                   	pop    ebx
c001b30c:	c3                   	ret    
c001b30d:	90                   	nop

c001b30e <Device::removeAllChildren()>:
c001b30e:	56                   	push   esi
c001b30f:	53                   	push   ebx
c001b310:	52                   	push   edx
c001b311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b315:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b31b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b31e:	74 17                	je     c001b337 <Device::removeAllChildren()+0x29>
c001b320:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b323:	85 c0                	test   eax,eax
c001b325:	74 0c                	je     c001b333 <Device::removeAllChildren()+0x25>
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b32c:	50                   	push   eax
c001b32d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b335:	eb e4                	jmp    c001b31b <Device::removeAllChildren()+0xd>
c001b337:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b33d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b343:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b349:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b350:	58                   	pop    eax
c001b351:	5b                   	pop    ebx
c001b352:	5e                   	pop    esi
c001b353:	c3                   	ret    

c001b354 <Device::hibernateAll()>:
c001b354:	53                   	push   ebx
c001b355:	83 ec 14             	sub    esp,0x14
c001b358:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b35c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b35e:	53                   	push   ebx
c001b35f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b362:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b368:	83 c4 10             	add    esp,0x10
c001b36b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b36e:	74 0f                	je     c001b37f <Device::hibernateAll()+0x2b>
c001b370:	83 ec 0c             	sub    esp,0xc
c001b373:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b376:	e8 d9 ff ff ff       	call   c001b354 <Device::hibernateAll()>
c001b37b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b37d:	eb e9                	jmp    c001b368 <Device::hibernateAll()+0x14>
c001b37f:	83 c4 08             	add    esp,0x8
c001b382:	5b                   	pop    ebx
c001b383:	c3                   	ret    

c001b384 <Device::wakeAll()>:
c001b384:	53                   	push   ebx
c001b385:	83 ec 14             	sub    esp,0x14
c001b388:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b38c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b38e:	53                   	push   ebx
c001b38f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b392:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b39e:	74 0f                	je     c001b3af <Device::wakeAll()+0x2b>
c001b3a0:	83 ec 0c             	sub    esp,0xc
c001b3a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3a6:	e8 d9 ff ff ff       	call   c001b384 <Device::wakeAll()>
c001b3ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3ad:	eb e9                	jmp    c001b398 <Device::wakeAll()+0x14>
c001b3af:	83 c4 08             	add    esp,0x8
c001b3b2:	5b                   	pop    ebx
c001b3b3:	c3                   	ret    

c001b3b4 <Device::detectAll()>:
c001b3b4:	53                   	push   ebx
c001b3b5:	83 ec 14             	sub    esp,0x14
c001b3b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3be:	53                   	push   ebx
c001b3bf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b3c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3c8:	83 c4 10             	add    esp,0x10
c001b3cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3ce:	74 0f                	je     c001b3df <Device::detectAll()+0x2b>
c001b3d0:	83 ec 0c             	sub    esp,0xc
c001b3d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3d6:	e8 d9 ff ff ff       	call   c001b3b4 <Device::detectAll()>
c001b3db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3dd:	eb e9                	jmp    c001b3c8 <Device::detectAll()+0x14>
c001b3df:	83 c4 08             	add    esp,0x8
c001b3e2:	5b                   	pop    ebx
c001b3e3:	c3                   	ret    

c001b3e4 <Device::disableLegacyAll()>:
c001b3e4:	c3                   	ret    
c001b3e5:	90                   	nop

c001b3e6 <Device::loadDriversForAll()>:
c001b3e6:	c3                   	ret    
c001b3e7:	90                   	nop

c001b3e8 <Device::powerSavingAll(PowerSavingLevel)>:
c001b3e8:	56                   	push   esi
c001b3e9:	53                   	push   ebx
c001b3ea:	83 ec 0c             	sub    esp,0xc
c001b3ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b3f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3f7:	56                   	push   esi
c001b3f8:	53                   	push   ebx
c001b3f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b3fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b408:	74 0f                	je     c001b419 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b40a:	52                   	push   edx
c001b40b:	52                   	push   edx
c001b40c:	56                   	push   esi
c001b40d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b410:	e8 d3 ff ff ff       	call   c001b3e8 <Device::powerSavingAll(PowerSavingLevel)>
c001b415:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b417:	eb e9                	jmp    c001b402 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b419:	58                   	pop    eax
c001b41a:	5b                   	pop    ebx
c001b41b:	5e                   	pop    esi
c001b41c:	c3                   	ret    
c001b41d:	90                   	nop

c001b41e <Device::setName(char const*)>:
c001b41e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b426:	e9 15 52 fe ff       	jmp    c0000640 <strcpy>
c001b42b:	90                   	nop

c001b42c <Device::Device(char const*)>:
c001b42c:	83 ec 1c             	sub    esp,0x1c
c001b42f:	ba 3c 1f 03 c0       	mov    edx,0xc0031f3c
c001b434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b438:	89 10                	mov    DWORD PTR [eax],edx
c001b43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b43e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b44c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b45a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b468:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b472:	83 ec 08             	sub    esp,0x8
c001b475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47d:	e8 9c ff ff ff       	call   c001b41e <Device::setName(char const*)>
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b48d:	83 ec 0c             	sub    esp,0xc
c001b490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b494:	e8 21 af ff ff       	call   c00163ba <malloc>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b4ad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b4b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4b7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4c7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4d8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b50a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b518:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b522:	90                   	nop
c001b523:	83 c4 1c             	add    esp,0x1c
c001b526:	c3                   	ret    
c001b527:	90                   	nop

c001b528 <Device::getName()>:
c001b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b52c:	05 d0 00 00 00       	add    eax,0xd0
c001b531:	c3                   	ret    

c001b532 <Device::closeAll()>:
c001b532:	53                   	push   ebx
c001b533:	83 ec 08             	sub    esp,0x8
c001b536:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b53a:	53                   	push   ebx
c001b53b:	e8 e8 ff ff ff       	call   c001b528 <Device::getName()>
c001b540:	52                   	push   edx
c001b541:	50                   	push   eax
c001b542:	68 28 1f 03 c0       	push   0xc0031f28
c001b547:	e8 fd dc ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001b54c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b54e:	6a 00                	push   0x0
c001b550:	6a 00                	push   0x0
c001b552:	6a 00                	push   0x0
c001b554:	53                   	push   ebx
c001b555:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b558:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b55e:	83 c4 20             	add    esp,0x20
c001b561:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b564:	74 12                	je     c001b578 <Device::closeAll()+0x46>
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b56c:	e8 c1 ff ff ff       	call   c001b532 <Device::closeAll()>
c001b571:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	eb e9                	jmp    c001b561 <Device::closeAll()+0x2f>
c001b578:	83 c4 08             	add    esp,0x8
c001b57b:	5b                   	pop    ebx
c001b57c:	c3                   	ret    
c001b57d:	90                   	nop

c001b57e <DriverlessDevice::DriverlessDevice(char const*)>:
c001b57e:	83 ec 0c             	sub    esp,0xc
c001b581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b585:	83 ec 08             	sub    esp,0x8
c001b588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b58c:	50                   	push   eax
c001b58d:	e8 9a fe ff ff       	call   c001b42c <Device::Device(char const*)>
c001b592:	83 c4 10             	add    esp,0x10
c001b595:	ba 68 1f 03 c0       	mov    edx,0xc0031f68
c001b59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59e:	89 10                	mov    DWORD PTR [eax],edx
c001b5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b5ae:	90                   	nop
c001b5af:	83 c4 0c             	add    esp,0xc
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b5b4:	57                   	push   edi
c001b5b5:	56                   	push   esi
c001b5b6:	53                   	push   ebx
c001b5b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5c3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b5c9:	75 0c                	jne    c001b5d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b5cb:	52                   	push   edx
c001b5cc:	52                   	push   edx
c001b5cd:	53                   	push   ebx
c001b5ce:	56                   	push   esi
c001b5cf:	e8 2e 35 01 00       	call   c002eb02 <LinkedList<Device>::addElement(Device*)>
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5e0:	74 12                	je     c001b5f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b5e2:	50                   	push   eax
c001b5e3:	57                   	push   edi
c001b5e4:	56                   	push   esi
c001b5e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5e8:	e8 c7 ff ff ff       	call   c001b5b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5ef:	83 c4 10             	add    esp,0x10
c001b5f2:	eb e9                	jmp    c001b5dd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b5f4:	5b                   	pop    ebx
c001b5f5:	5e                   	pop    esi
c001b5f6:	5f                   	pop    edi
c001b5f7:	c3                   	ret    

c001b5f8 <getDevicesOfType(DeviceType)>:
c001b5f8:	53                   	push   ebx
c001b5f9:	83 ec 14             	sub    esp,0x14
c001b5fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b600:	53                   	push   ebx
c001b601:	e8 d8 35 01 00       	call   c002ebde <LinkedList<Device>::LinkedList()>
c001b606:	83 c4 0c             	add    esp,0xc
c001b609:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b60d:	53                   	push   ebx
c001b60e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b614:	e8 9b ff ff ff       	call   c001b5b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b619:	89 d8                	mov    eax,ebx
c001b61b:	83 c4 18             	add    esp,0x18
c001b61e:	5b                   	pop    ebx
c001b61f:	c2 04 00             	ret    0x4
c001b622:	66 90                	xchg   ax,ax

c001b624 <HardDiskController::HardDiskController(char const*)>:
c001b624:	83 ec 0c             	sub    esp,0xc
c001b627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62b:	83 ec 08             	sub    esp,0x8
c001b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b632:	50                   	push   eax
c001b633:	e8 f4 fd ff ff       	call   c001b42c <Device::Device(char const*)>
c001b638:	83 c4 10             	add    esp,0x10
c001b63b:	ba 94 1f 03 c0       	mov    edx,0xc0031f94
c001b640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b644:	89 10                	mov    DWORD PTR [eax],edx
c001b646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b654:	90                   	nop
c001b655:	83 c4 0c             	add    esp,0xc
c001b658:	c3                   	ret    
c001b659:	90                   	nop
c001b65a:	66 90                	xchg   ax,ax

c001b65c <HardDiskController::~HardDiskController()>:
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	ba 94 1f 03 c0       	mov    edx,0xc0031f94
c001b664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b668:	89 10                	mov    DWORD PTR [eax],edx
c001b66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	50                   	push   eax
c001b672:	e8 55 fb ff ff       	call   c001b1cc <Device::~Device()>
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	90                   	nop
c001b67b:	83 c4 0c             	add    esp,0xc
c001b67e:	c3                   	ret    
c001b67f:	90                   	nop

c001b680 <HardDiskController::~HardDiskController()>:
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	83 ec 0c             	sub    esp,0xc
c001b686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b68a:	e8 cd ff ff ff       	call   c001b65c <HardDiskController::~HardDiskController()>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	83 ec 08             	sub    esp,0x8
c001b695:	68 58 01 00 00       	push   0x158
c001b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b69e:	e8 79 da ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	83 c4 0c             	add    esp,0xc
c001b6a9:	c3                   	ret    

c001b6aa <PhysicalDisk::eject()>:
c001b6aa:	83 c8 ff             	or     eax,0xffffffff
c001b6ad:	c3                   	ret    

c001b6ae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b6ae:	83 ec 0c             	sub    esp,0xc
c001b6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b5:	83 ec 08             	sub    esp,0x8
c001b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6bc:	50                   	push   eax
c001b6bd:	e8 6a fd ff ff       	call   c001b42c <Device::Device(char const*)>
c001b6c2:	83 c4 10             	add    esp,0x10
c001b6c5:	ba c0 1f 03 c0       	mov    edx,0xc0031fc0
c001b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ce:	89 10                	mov    DWORD PTR [eax],edx
c001b6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6df:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b706:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b710:	90                   	nop
c001b711:	83 c4 0c             	add    esp,0xc
c001b714:	c3                   	ret    
c001b715:	90                   	nop

c001b716 <PhysicalDisk::startCache()>:
c001b716:	56                   	push   esi
c001b717:	53                   	push   ebx
c001b718:	83 ec 10             	sub    esp,0x10
c001b71b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b71f:	6a 44                	push   0x44
c001b721:	e8 94 ac ff ff       	call   c00163ba <malloc>
c001b726:	89 c6                	mov    esi,eax
c001b728:	58                   	pop    eax
c001b729:	5a                   	pop    edx
c001b72a:	53                   	push   ebx
c001b72b:	56                   	push   esi
c001b72c:	e8 6f 17 00 00       	call   c001cea0 <VCache::VCache(PhysicalDisk*)>
c001b731:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b737:	83 c4 14             	add    esp,0x14
c001b73a:	5b                   	pop    ebx
c001b73b:	5e                   	pop    esi
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <PhysicalDisk::~PhysicalDisk()>:
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	ba c0 1f 03 c0       	mov    edx,0xc0031fc0
c001b746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74a:	89 10                	mov    DWORD PTR [eax],edx
c001b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b750:	83 ec 0c             	sub    esp,0xc
c001b753:	50                   	push   eax
c001b754:	e8 73 fa ff ff       	call   c001b1cc <Device::~Device()>
c001b759:	83 c4 10             	add    esp,0x10
c001b75c:	90                   	nop
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	c3                   	ret    
c001b761:	90                   	nop

c001b762 <PhysicalDisk::~PhysicalDisk()>:
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	83 ec 0c             	sub    esp,0xc
c001b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b76c:	e8 cd ff ff ff       	call   c001b73e <PhysicalDisk::~PhysicalDisk()>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	83 ec 08             	sub    esp,0x8
c001b777:	68 6c 01 00 00       	push   0x16c
c001b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b780:	e8 97 d9 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	83 c4 0c             	add    esp,0xc
c001b78b:	c3                   	ret    

c001b78c <int_handler>:
c001b78c:	55                   	push   ebp
c001b78d:	57                   	push   edi
c001b78e:	56                   	push   esi
c001b78f:	53                   	push   ebx
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b797:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b79e:	74 0b                	je     c001b7ab <int_handler+0x1f>
c001b7a0:	fa                   	cli    
c001b7a1:	f4                   	hlt    
c001b7a2:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b7a9:	75 f5                	jne    c001b7a0 <int_handler+0x14>
c001b7ab:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b7ae:	8d 46 e0             	lea    eax,[esi-0x20]
c001b7b1:	83 f8 17             	cmp    eax,0x17
c001b7b4:	76 40                	jbe    c001b7f6 <int_handler+0x6a>
c001b7b6:	c1 e6 04             	shl    esi,0x4
c001b7b9:	31 db                	xor    ebx,ebx
c001b7bb:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b7c1:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b7c7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7cb:	85 c0                	test   eax,eax
c001b7cd:	74 13                	je     c001b7e2 <int_handler+0x56>
c001b7cf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7d2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7d6:	74 2c                	je     c001b804 <int_handler+0x78>
c001b7d8:	83 ec 08             	sub    esp,0x8
c001b7db:	52                   	push   edx
c001b7dc:	57                   	push   edi
c001b7dd:	ff d0                	call   eax
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	83 c3 01             	add    ebx,0x1
c001b7e5:	83 fb 04             	cmp    ebx,0x4
c001b7e8:	75 dd                	jne    c001b7c7 <int_handler+0x3b>
c001b7ea:	83 c4 0c             	add    esp,0xc
c001b7ed:	31 c0                	xor    eax,eax
c001b7ef:	5b                   	pop    ebx
c001b7f0:	31 d2                	xor    edx,edx
c001b7f2:	5e                   	pop    esi
c001b7f3:	5f                   	pop    edi
c001b7f4:	5d                   	pop    ebp
c001b7f5:	c3                   	ret    
c001b7f6:	83 ec 0c             	sub    esp,0xc
c001b7f9:	50                   	push   eax
c001b7fa:	e8 75 ba 00 00       	call   c0027274 <HalEndOfInterrupt(int)>
c001b7ff:	83 c4 10             	add    esp,0x10
c001b802:	eb b2                	jmp    c001b7b6 <int_handler+0x2a>
c001b804:	83 ec 08             	sub    esp,0x8
c001b807:	52                   	push   edx
c001b808:	57                   	push   edi
c001b809:	ff d0                	call   eax
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	83 c4 0c             	add    esp,0xc
c001b811:	5b                   	pop    ebx
c001b812:	5e                   	pop    esi
c001b813:	5f                   	pop    edi
c001b814:	5d                   	pop    ebp
c001b815:	c3                   	ret    

c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b816:	56                   	push   esi
c001b817:	31 c0                	xor    eax,eax
c001b819:	53                   	push   ebx
c001b81a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b81e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b822:	89 ca                	mov    edx,ecx
c001b824:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b828:	c1 e2 04             	shl    edx,0x4
c001b82b:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b833:	74 17                	je     c001b84c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b835:	83 c0 01             	add    eax,0x1
c001b838:	83 f8 04             	cmp    eax,0x4
c001b83b:	75 ee                	jne    c001b82b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b83d:	c7 44 24 0c f0 1f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031ff0
c001b845:	5b                   	pop    ebx
c001b846:	5e                   	pop    esi
c001b847:	e9 16 4a 00 00       	jmp    c0020262 <KePanic(char const*)>
c001b84c:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b84f:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b856:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b85d:	5b                   	pop    ebx
c001b85e:	5e                   	pop    esi
c001b85f:	c3                   	ret    

c001b860 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b860:	57                   	push   edi
c001b861:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b867:	56                   	push   esi
c001b868:	53                   	push   ebx
c001b869:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b86d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b871:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b878:	74 54                	je     c001b8ce <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b87a:	89 c7                	mov    edi,eax
c001b87c:	84 c0                	test   al,al
c001b87e:	74 1d                	je     c001b89d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b880:	83 fe 0f             	cmp    esi,0xf
c001b883:	0f 8f d5 00 00 00    	jg     c001b95e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b889:	0f b6 b6 28 3c 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc3d8]
c001b890:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b898:	d1 ef                	shr    edi,1
c001b89a:	83 e7 01             	and    edi,0x1
c001b89d:	83 ec 08             	sub    esp,0x8
c001b8a0:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8a5:	31 db                	xor    ebx,ebx
c001b8a7:	50                   	push   eax
c001b8a8:	68 fd 1f 03 c0       	push   0xc0031ffd
c001b8ad:	e8 97 d9 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001b8b2:	83 c4 10             	add    esp,0x10
c001b8b5:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8ba:	85 c0                	test   eax,eax
c001b8bc:	7f 55                	jg     c001b913 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	68 14 20 03 c0       	push   0xc0032014
c001b8c6:	e8 97 49 00 00       	call   c0020262 <KePanic(char const*)>
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	8d 7e 20             	lea    edi,[esi+0x20]
c001b8d1:	89 f8                	mov    eax,edi
c001b8d3:	31 d2                	xor    edx,edx
c001b8d5:	c1 e0 04             	shl    eax,0x4
c001b8d8:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b8df:	85 c9                	test   ecx,ecx
c001b8e1:	0f 84 8e 00 00 00    	je     c001b975 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b8e7:	83 c2 01             	add    edx,0x1
c001b8ea:	83 fa 04             	cmp    edx,0x4
c001b8ed:	75 e9                	jne    c001b8d8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b8ef:	83 ec 0c             	sub    esp,0xc
c001b8f2:	68 68 20 03 c0       	push   0xc0032068
c001b8f7:	e8 66 49 00 00       	call   c0020262 <KePanic(char const*)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b904:	5b                   	pop    ebx
c001b905:	5e                   	pop    esi
c001b906:	5f                   	pop    edi
c001b907:	c3                   	ret    
c001b908:	83 c3 01             	add    ebx,0x1
c001b90b:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b911:	7e ab                	jle    c001b8be <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b913:	83 ec 08             	sub    esp,0x8
c001b916:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b91d:	56                   	push   esi
c001b91e:	50                   	push   eax
c001b91f:	e8 30 21 01 00       	call   c002da54 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b924:	83 c4 10             	add    esp,0x10
c001b927:	84 c0                	test   al,al
c001b929:	74 dd                	je     c001b908 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b92b:	83 ec 04             	sub    esp,0x4
c001b92e:	89 f8                	mov    eax,edi
c001b930:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b937:	0f b6 f8             	movzx  edi,al
c001b93a:	57                   	push   edi
c001b93b:	8d 7e 20             	lea    edi,[esi+0x20]
c001b93e:	6a 00                	push   0x0
c001b940:	89 f8                	mov    eax,edi
c001b942:	0f b6 c0             	movzx  eax,al
c001b945:	50                   	push   eax
c001b946:	89 f0                	mov    eax,esi
c001b948:	6a 00                	push   0x0
c001b94a:	0f b6 c0             	movzx  eax,al
c001b94d:	6a 00                	push   0x0
c001b94f:	50                   	push   eax
c001b950:	53                   	push   ebx
c001b951:	e8 6a 22 01 00       	call   c002dbc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b956:	83 c4 20             	add    esp,0x20
c001b959:	e9 73 ff ff ff       	jmp    c001b8d1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	31 ff                	xor    edi,edi
c001b963:	68 30 20 03 c0       	push   0xc0032030
c001b968:	e8 f5 48 00 00       	call   c0020262 <KePanic(char const*)>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	e9 28 ff ff ff       	jmp    c001b89d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b975:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b978:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b97c:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b983:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b987:	5b                   	pop    ebx
c001b988:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b98f:	89 f0                	mov    eax,esi
c001b991:	5e                   	pop    esi
c001b992:	5f                   	pop    edi
c001b993:	c3                   	ret    

c001b994 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b998:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b99c:	c1 e0 04             	shl    eax,0x4
c001b99f:	8d 50 10             	lea    edx,[eax+0x10]
c001b9a2:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b9a8:	74 08                	je     c001b9b2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b9aa:	83 c0 04             	add    eax,0x4
c001b9ad:	39 d0                	cmp    eax,edx
c001b9af:	75 f1                	jne    c001b9a2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9b1:	c3                   	ret    
c001b9b2:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9bc:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9c6:	eb e2                	jmp    c001b9aa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9c8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9c8:	53                   	push   ebx
c001b9c9:	83 ec 08             	sub    esp,0x8
c001b9cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9d0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9d5:	74 0e                	je     c001b9e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b9d7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b9dc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b9e3:	75 37                	jne    c001ba1c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e9:	83 c0 20             	add    eax,0x20
c001b9ec:	c1 e0 04             	shl    eax,0x4
c001b9ef:	8d 50 10             	lea    edx,[eax+0x10]
c001b9f2:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001b9f8:	74 0c                	je     c001ba06 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001b9fa:	83 c0 04             	add    eax,0x4
c001b9fd:	39 d0                	cmp    eax,edx
c001b9ff:	75 f1                	jne    c001b9f2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001ba01:	83 c4 08             	add    esp,0x8
c001ba04:	5b                   	pop    ebx
c001ba05:	c3                   	ret    
c001ba06:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba10:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba1a:	eb de                	jmp    c001b9fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001ba1c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ba21:	7f 11                	jg     c001ba34 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001ba23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba27:	0f b6 80 28 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc3d8]
c001ba2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba32:	eb b1                	jmp    c001b9e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	68 21 20 03 c0       	push   0xc0032021
c001ba3c:	e8 21 48 00 00       	call   c0020262 <KePanic(char const*)>
c001ba41:	83 c4 10             	add    esp,0x10
c001ba44:	eb 9f                	jmp    c001b9e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001ba46 <setupINTS()>:
c001ba46:	31 c0                	xor    eax,eax
c001ba48:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba52:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba5c:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001ba66:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001ba70:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001ba7a:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001ba84:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001ba8e:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001ba98:	83 c0 10             	add    eax,0x10
c001ba9b:	3d 00 10 00 00       	cmp    eax,0x1000
c001baa0:	75 a6                	jne    c001ba48 <setupINTS()+0x2>
c001baa2:	c3                   	ret    

c001baa3 <convertLegacyIRQNumber(int)>:
c001baa3:	83 ec 0c             	sub    esp,0xc
c001baa6:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001baac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bab7:	74 0c                	je     c001bac5 <convertLegacyIRQNumber(int)+0x22>
c001bab9:	83 f8 0f             	cmp    eax,0xf
c001babc:	7f 0b                	jg     c001bac9 <convertLegacyIRQNumber(int)+0x26>
c001babe:	0f b6 80 28 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc3d8]
c001bac5:	83 c4 0c             	add    esp,0xc
c001bac8:	c3                   	ret    
c001bac9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bacd:	83 ec 0c             	sub    esp,0xc
c001bad0:	68 30 20 03 c0       	push   0xc0032030
c001bad5:	e8 88 47 00 00       	call   c0020262 <KePanic(char const*)>
c001bada:	83 c4 10             	add    esp,0x10
c001badd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae1:	83 c4 0c             	add    esp,0xc
c001bae4:	c3                   	ret    
c001bae5:	90                   	nop

c001bae6 <startGUI(void*)>:
c001bae6:	55                   	push   ebp
c001bae7:	89 e5                	mov    ebp,esp
c001bae9:	53                   	push   ebx
c001baea:	83 ec 04             	sub    esp,0x4
c001baed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baf2:	83 e8 01             	sub    eax,0x1
c001baf5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bafa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baff:	85 c0                	test   eax,eax
c001bb01:	75 01                	jne    c001bb04 <startGUI(void*)+0x1e>
c001bb03:	fb                   	sti    
c001bb04:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb0a:	83 ec 08             	sub    esp,0x8
c001bb0d:	6a 01                	push   0x1
c001bb0f:	68 8d 20 03 c0       	push   0xc003208d
c001bb14:	e8 bc 8c 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	83 ec 08             	sub    esp,0x8
c001bb1f:	53                   	push   ebx
c001bb20:	50                   	push   eax
c001bb21:	e8 01 8f 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb2f:	83 ec 08             	sub    esp,0x8
c001bb32:	6a 01                	push   0x1
c001bb34:	68 a7 20 03 c0       	push   0xc00320a7
c001bb39:	e8 97 8c 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	83 ec 08             	sub    esp,0x8
c001bb44:	53                   	push   ebx
c001bb45:	50                   	push   eax
c001bb46:	e8 dc 8e 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	eb fe                	jmp    c001bb4e <startGUI(void*)+0x68>

c001bb50 <startGUIVESA(void*)>:
c001bb50:	55                   	push   ebp
c001bb51:	89 e5                	mov    ebp,esp
c001bb53:	53                   	push   ebx
c001bb54:	83 ec 04             	sub    esp,0x4
c001bb57:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb5c:	83 e8 01             	sub    eax,0x1
c001bb5f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb64:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb69:	85 c0                	test   eax,eax
c001bb6b:	75 01                	jne    c001bb6e <startGUIVESA(void*)+0x1e>
c001bb6d:	fb                   	sti    
c001bb6e:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb74:	83 ec 08             	sub    esp,0x8
c001bb77:	6a 01                	push   0x1
c001bb79:	68 c5 20 03 c0       	push   0xc00320c5
c001bb7e:	e8 52 8c 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	83 ec 08             	sub    esp,0x8
c001bb89:	53                   	push   ebx
c001bb8a:	50                   	push   eax
c001bb8b:	e8 97 8e 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb99:	83 ec 08             	sub    esp,0x8
c001bb9c:	6a 01                	push   0x1
c001bb9e:	68 a7 20 03 c0       	push   0xc00320a7
c001bba3:	e8 2d 8c 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001bba8:	83 c4 10             	add    esp,0x10
c001bbab:	83 ec 08             	sub    esp,0x8
c001bbae:	53                   	push   ebx
c001bbaf:	50                   	push   eax
c001bbb0:	e8 72 8e 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001bbb5:	83 c4 10             	add    esp,0x10
c001bbb8:	eb fe                	jmp    c001bbb8 <startGUIVESA(void*)+0x68>

c001bbba <sendKeyToTerminal(unsigned char)>:
c001bbba:	55                   	push   ebp
c001bbbb:	89 e5                	mov    ebp,esp
c001bbbd:	83 ec 28             	sub    esp,0x28
c001bbc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbc3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bbc6:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bbcb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bbcf:	83 ec 08             	sub    esp,0x8
c001bbd2:	52                   	push   edx
c001bbd3:	50                   	push   eax
c001bbd4:	e8 e1 ba ff ff       	call   c00176ba <VgaText::receiveKey(unsigned char)>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbe0:	83 f8 0a             	cmp    eax,0xa
c001bbe3:	74 16                	je     c001bbfb <sendKeyToTerminal(unsigned char)+0x41>
c001bbe5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbe9:	83 f8 03             	cmp    eax,0x3
c001bbec:	74 0d                	je     c001bbfb <sendKeyToTerminal(unsigned char)+0x41>
c001bbee:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbf2:	83 f8 1c             	cmp    eax,0x1c
c001bbf5:	0f 85 97 00 00 00    	jne    c001bc92 <sendKeyToTerminal(unsigned char)+0xd8>
c001bbfb:	fa                   	cli    
c001bbfc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc01:	83 c0 01             	add    eax,0x1
c001bc04:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc09:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc0e:	83 c0 01             	add    eax,0x1
c001bc11:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc16:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bc1b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc1e:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bc28:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bc2c:	74 1f                	je     c001bc4d <sendKeyToTerminal(unsigned char)+0x93>
c001bc2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bc31:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc34:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bc43:	e8 08 99 00 00       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	eb db                	jmp    c001bc28 <sendKeyToTerminal(unsigned char)+0x6e>
c001bc4d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc52:	83 e8 01             	sub    eax,0x1
c001bc55:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc5a:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc5f:	85 c0                	test   eax,eax
c001bc61:	75 18                	jne    c001bc7b <sendKeyToTerminal(unsigned char)+0xc1>
c001bc63:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bc68:	85 c0                	test   eax,eax
c001bc6a:	74 0f                	je     c001bc7b <sendKeyToTerminal(unsigned char)+0xc1>
c001bc6c:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc76:	e8 dd 95 00 00       	call   c0025258 <schedule()>
c001bc7b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc80:	83 e8 01             	sub    eax,0x1
c001bc83:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc88:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc8d:	85 c0                	test   eax,eax
c001bc8f:	75 01                	jne    c001bc92 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc91:	fb                   	sti    
c001bc92:	90                   	nop
c001bc93:	c9                   	leave  
c001bc94:	c3                   	ret    

c001bc95 <sendKeyboardToken(KeyboardToken)>:
c001bc95:	55                   	push   ebp
c001bc96:	89 e5                	mov    ebp,esp
c001bc98:	83 ec 18             	sub    esp,0x18
c001bc9b:	e8 12 46 00 00       	call   c00202b2 <KeUserIOReceived()>
c001bca0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bca6:	0f b7 c0             	movzx  eax,ax
c001bca9:	83 f2 01             	xor    edx,0x1
c001bcac:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bcb2:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bcb7:	85 c0                	test   eax,eax
c001bcb9:	74 24                	je     c001bcdf <sendKeyboardToken(KeyboardToken)+0x4a>
c001bcbb:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bcc1:	83 ec 04             	sub    esp,0x4
c001bcc4:	68 40 ef 03 c0       	push   0xc003ef40
c001bcc9:	83 ec 08             	sub    esp,0x8
c001bccc:	89 e2                	mov    edx,esp
c001bcce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcd1:	89 02                	mov    DWORD PTR [edx],eax
c001bcd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcd6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bcda:	ff d1                	call   ecx
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bce3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bce6:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bceb:	0f b6 d2             	movzx  edx,dl
c001bcee:	0f b6 c0             	movzx  eax,al
c001bcf1:	39 c2                	cmp    edx,eax
c001bcf3:	74 1c                	je     c001bd11 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bcf5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bcf8:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bcfd:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bd02:	0f b6 c0             	movzx  eax,al
c001bd05:	83 ec 0c             	sub    esp,0xc
c001bd08:	50                   	push   eax
c001bd09:	e8 f8 b0 ff ff       	call   c0016e06 <setTerminalScrollLock(bool)>
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bd14:	0f b6 c0             	movzx  eax,al
c001bd17:	85 c0                	test   eax,eax
c001bd19:	0f 84 da 00 00 00    	je     c001bdf9 <sendKeyboardToken(KeyboardToken)+0x164>
c001bd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd22:	0f b7 c0             	movzx  eax,ax
c001bd25:	3d 18 03 00 00       	cmp    eax,0x318
c001bd2a:	75 06                	jne    c001bd32 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bd2c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bd32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd35:	0f b7 c0             	movzx  eax,ax
c001bd38:	3d 19 03 00 00       	cmp    eax,0x319
c001bd3d:	75 06                	jne    c001bd45 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bd3f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd48:	0f b7 c0             	movzx  eax,ax
c001bd4b:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd50:	75 06                	jne    c001bd58 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bd52:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bd58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd5b:	0f b7 c0             	movzx  eax,ax
c001bd5e:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd63:	75 06                	jne    c001bd6b <sendKeyboardToken(KeyboardToken)+0xd6>
c001bd65:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd6e:	0f b7 c0             	movzx  eax,ax
c001bd71:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd76:	75 06                	jne    c001bd7e <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd78:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd81:	0f b7 c0             	movzx  eax,ax
c001bd84:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd89:	75 06                	jne    c001bd91 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd8b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd94:	0f b7 c0             	movzx  eax,ax
c001bd97:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bd9c:	75 06                	jne    c001bda4 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bd9e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bda4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda7:	0f b7 c0             	movzx  eax,ax
c001bdaa:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bdaf:	75 06                	jne    c001bdb7 <sendKeyboardToken(KeyboardToken)+0x122>
c001bdb1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bdb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdba:	0f b7 c0             	movzx  eax,ax
c001bdbd:	3d 20 03 00 00       	cmp    eax,0x320
c001bdc2:	75 06                	jne    c001bdca <sendKeyboardToken(KeyboardToken)+0x135>
c001bdc4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdcd:	0f b7 c0             	movzx  eax,ax
c001bdd0:	3d 21 03 00 00       	cmp    eax,0x321
c001bdd5:	75 06                	jne    c001bddd <sendKeyboardToken(KeyboardToken)+0x148>
c001bdd7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde0:	0f b7 c0             	movzx  eax,ax
c001bde3:	3d 22 03 00 00       	cmp    eax,0x322
c001bde8:	0f 85 f1 00 00 00    	jne    c001bedf <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdee:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bdf4:	e9 e6 00 00 00       	jmp    c001bedf <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdfc:	0f b7 c0             	movzx  eax,ax
c001bdff:	3d 18 03 00 00       	cmp    eax,0x318
c001be04:	75 0a                	jne    c001be10 <sendKeyboardToken(KeyboardToken)+0x17b>
c001be06:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001be0c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be13:	0f b7 c0             	movzx  eax,ax
c001be16:	3d 19 03 00 00       	cmp    eax,0x319
c001be1b:	75 0a                	jne    c001be27 <sendKeyboardToken(KeyboardToken)+0x192>
c001be1d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001be23:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2a:	0f b7 c0             	movzx  eax,ax
c001be2d:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be32:	75 0a                	jne    c001be3e <sendKeyboardToken(KeyboardToken)+0x1a9>
c001be34:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001be3a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be41:	0f b7 c0             	movzx  eax,ax
c001be44:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be49:	75 0a                	jne    c001be55 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001be4b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001be51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be58:	0f b7 c0             	movzx  eax,ax
c001be5b:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be60:	75 0a                	jne    c001be6c <sendKeyboardToken(KeyboardToken)+0x1d7>
c001be62:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001be68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be6f:	0f b7 c0             	movzx  eax,ax
c001be72:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be77:	75 0a                	jne    c001be83 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be79:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be7f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be86:	0f b7 c0             	movzx  eax,ax
c001be89:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be8e:	75 0a                	jne    c001be9a <sendKeyboardToken(KeyboardToken)+0x205>
c001be90:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001be96:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9d:	0f b7 c0             	movzx  eax,ax
c001bea0:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bea5:	75 0a                	jne    c001beb1 <sendKeyboardToken(KeyboardToken)+0x21c>
c001bea7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bead:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb4:	0f b7 c0             	movzx  eax,ax
c001beb7:	3d 20 03 00 00       	cmp    eax,0x320
c001bebc:	75 0a                	jne    c001bec8 <sendKeyboardToken(KeyboardToken)+0x233>
c001bebe:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bec4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001becb:	0f b7 c0             	movzx  eax,ax
c001bece:	3d 21 03 00 00       	cmp    eax,0x321
c001bed3:	75 0a                	jne    c001bedf <sendKeyboardToken(KeyboardToken)+0x24a>
c001bed5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bedb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee2:	0f b7 c0             	movzx  eax,ax
c001bee5:	3d 00 02 00 00       	cmp    eax,0x200
c001beea:	75 2f                	jne    c001bf1b <sendKeyboardToken(KeyboardToken)+0x286>
c001beec:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bef1:	83 f0 01             	xor    eax,0x1
c001bef4:	0f b6 c0             	movzx  eax,al
c001bef7:	85 c0                	test   eax,eax
c001bef9:	74 20                	je     c001bf1b <sendKeyboardToken(KeyboardToken)+0x286>
c001befb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf00:	6a 01                	push   0x1
c001bf02:	6a 00                	push   0x0
c001bf04:	68 e6 ba 01 c0       	push   0xc001bae6
c001bf09:	50                   	push   eax
c001bf0a:	e8 f9 90 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf19:	eb 3a                	jmp    c001bf55 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf1e:	0f b7 c0             	movzx  eax,ax
c001bf21:	3d 01 02 00 00       	cmp    eax,0x201
c001bf26:	75 2d                	jne    c001bf55 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf28:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf2d:	83 f0 01             	xor    eax,0x1
c001bf30:	0f b6 c0             	movzx  eax,al
c001bf33:	85 c0                	test   eax,eax
c001bf35:	74 1e                	je     c001bf55 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf37:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf3c:	6a 01                	push   0x1
c001bf3e:	6a 00                	push   0x0
c001bf40:	68 50 bb 01 c0       	push   0xc001bb50
c001bf45:	50                   	push   eax
c001bf46:	e8 bd 90 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf58:	0f b7 c0             	movzx  eax,ax
c001bf5b:	3d 25 03 00 00       	cmp    eax,0x325
c001bf60:	75 06                	jne    c001bf68 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bf62:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001bf68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf6b:	0f b7 c0             	movzx  eax,ax
c001bf6e:	3d 24 03 00 00       	cmp    eax,0x324
c001bf73:	75 06                	jne    c001bf7b <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf75:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf7e:	0f b7 c0             	movzx  eax,ax
c001bf81:	3d 23 03 00 00       	cmp    eax,0x323
c001bf86:	75 06                	jne    c001bf8e <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf88:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bf8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf91:	0f b7 c0             	movzx  eax,ax
c001bf94:	3d 26 03 00 00       	cmp    eax,0x326
c001bf99:	75 06                	jne    c001bfa1 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bf9b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bfa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa4:	0f b7 c0             	movzx  eax,ax
c001bfa7:	3d 27 03 00 00       	cmp    eax,0x327
c001bfac:	75 06                	jne    c001bfb4 <sendKeyboardToken(KeyboardToken)+0x31f>
c001bfae:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bfb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfb7:	0f b7 c0             	movzx  eax,ax
c001bfba:	3d 22 03 00 00       	cmp    eax,0x322
c001bfbf:	75 06                	jne    c001bfc7 <sendKeyboardToken(KeyboardToken)+0x332>
c001bfc1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bfc7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bfcb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfce:	83 f0 01             	xor    eax,0x1
c001bfd1:	0f b6 c0             	movzx  eax,al
c001bfd4:	85 c0                	test   eax,eax
c001bfd6:	74 7c                	je     c001c054 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bfd8:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bfdd:	0f b6 c0             	movzx  eax,al
c001bfe0:	85 c0                	test   eax,eax
c001bfe2:	74 43                	je     c001c027 <sendKeyboardToken(KeyboardToken)+0x392>
c001bfe4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfe8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bfec:	85 c0                	test   eax,eax
c001bfee:	74 2b                	je     c001c01b <sendKeyboardToken(KeyboardToken)+0x386>
c001bff0:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bff6:	89 d0                	mov    eax,edx
c001bff8:	c1 e0 02             	shl    eax,0x2
c001bffb:	01 d0                	add    eax,edx
c001bffd:	01 c0                	add    eax,eax
c001bfff:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c007:	0f b7 c0             	movzx  eax,ax
c001c00a:	8d 50 d0             	lea    edx,[eax-0x30]
c001c00d:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c012:	01 d0                	add    eax,edx
c001c014:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c019:	eb 71                	jmp    c001c08c <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c01b:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c025:	eb 65                	jmp    c001c08c <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c027:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c02c:	85 c0                	test   eax,eax
c001c02e:	74 18                	je     c001c048 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c030:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c035:	0f b6 c0             	movzx  eax,al
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	50                   	push   eax
c001c03c:	e8 79 fb ff ff       	call   c001bbba <sendKeyToTerminal(unsigned char)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c048:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c052:	eb 38                	jmp    c001c08c <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c057:	0f b7 c0             	movzx  eax,ax
c001c05a:	3d 01 01 00 00       	cmp    eax,0x101
c001c05f:	75 2b                	jne    c001c08c <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c061:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c066:	85 c0                	test   eax,eax
c001c068:	74 18                	je     c001c082 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c06a:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c06f:	0f b6 c0             	movzx  eax,al
c001c072:	83 ec 0c             	sub    esp,0xc
c001c075:	50                   	push   eax
c001c076:	e8 3f fb ff ff       	call   c001bbba <sendKeyToTerminal(unsigned char)>
c001c07b:	83 c4 10             	add    esp,0x10
c001c07e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c082:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c08c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c08f:	83 f0 01             	xor    eax,0x1
c001c092:	0f b6 c0             	movzx  eax,al
c001c095:	85 c0                	test   eax,eax
c001c097:	74 5a                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c099:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c09c:	83 f0 01             	xor    eax,0x1
c001c09f:	0f b6 c0             	movzx  eax,al
c001c0a2:	85 c0                	test   eax,eax
c001c0a4:	74 4d                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0a6:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0ab:	83 f0 01             	xor    eax,0x1
c001c0ae:	0f b6 c0             	movzx  eax,al
c001c0b1:	85 c0                	test   eax,eax
c001c0b3:	74 3e                	je     c001c0f3 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b8:	0f b7 c0             	movzx  eax,ax
c001c0bb:	83 f8 1f             	cmp    eax,0x1f
c001c0be:	76 0b                	jbe    c001c0cb <sendKeyboardToken(KeyboardToken)+0x436>
c001c0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c3:	0f b7 c0             	movzx  eax,ax
c001c0c6:	83 f8 7e             	cmp    eax,0x7e
c001c0c9:	76 16                	jbe    c001c0e1 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ce:	0f b7 c0             	movzx  eax,ax
c001c0d1:	83 f8 0a             	cmp    eax,0xa
c001c0d4:	74 0b                	je     c001c0e1 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d9:	0f b7 c0             	movzx  eax,ax
c001c0dc:	83 f8 08             	cmp    eax,0x8
c001c0df:	75 12                	jne    c001c0f3 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0e4:	0f b6 c0             	movzx  eax,al
c001c0e7:	83 ec 0c             	sub    esp,0xc
c001c0ea:	50                   	push   eax
c001c0eb:	e8 ca fa ff ff       	call   c001bbba <sendKeyToTerminal(unsigned char)>
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c0f6:	83 f0 01             	xor    eax,0x1
c001c0f9:	0f b6 c0             	movzx  eax,al
c001c0fc:	85 c0                	test   eax,eax
c001c0fe:	74 5d                	je     c001c15d <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c100:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c103:	83 f0 01             	xor    eax,0x1
c001c106:	0f b6 c0             	movzx  eax,al
c001c109:	85 c0                	test   eax,eax
c001c10b:	74 50                	je     c001c15d <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c10d:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c112:	0f b6 c0             	movzx  eax,al
c001c115:	85 c0                	test   eax,eax
c001c117:	74 44                	je     c001c15d <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c11c:	0f b7 c0             	movzx  eax,ax
c001c11f:	83 f8 3f             	cmp    eax,0x3f
c001c122:	76 39                	jbe    c001c15d <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c127:	0f b7 c0             	movzx  eax,ax
c001c12a:	83 f8 7f             	cmp    eax,0x7f
c001c12d:	77 2e                	ja     c001c15d <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c12f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c132:	88 c2                	mov    dl,al
c001c134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c137:	0f b7 c0             	movzx  eax,ax
c001c13a:	83 f8 5f             	cmp    eax,0x5f
c001c13d:	76 04                	jbe    c001c143 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c13f:	b0 20                	mov    al,0x20
c001c141:	eb 02                	jmp    c001c145 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c143:	b0 00                	mov    al,0x0
c001c145:	89 d1                	mov    ecx,edx
c001c147:	29 c1                	sub    ecx,eax
c001c149:	89 c8                	mov    eax,ecx
c001c14b:	83 e8 40             	sub    eax,0x40
c001c14e:	0f b6 c0             	movzx  eax,al
c001c151:	83 ec 0c             	sub    esp,0xc
c001c154:	50                   	push   eax
c001c155:	e8 60 fa ff ff       	call   c001bbba <sendKeyToTerminal(unsigned char)>
c001c15a:	83 c4 10             	add    esp,0x10
c001c15d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c160:	0f b7 c0             	movzx  eax,ax
c001c163:	3d 00 03 00 00       	cmp    eax,0x300
c001c168:	75 12                	jne    c001c17c <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c16a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c16d:	83 f0 01             	xor    eax,0x1
c001c170:	0f b6 c0             	movzx  eax,al
c001c173:	85 c0                	test   eax,eax
c001c175:	74 05                	je     c001c17c <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c177:	e8 8b ac ff ff       	call   c0016e07 <doTerminalCycle()>
c001c17c:	90                   	nop
c001c17d:	c9                   	leave  
c001c17e:	c3                   	ret    

c001c17f <clearInternalKeybuffer(VgaText*)>:
c001c17f:	55                   	push   ebp
c001c180:	89 e5                	mov    ebp,esp
c001c182:	83 ec 08             	sub    esp,0x8
c001c185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c188:	05 02 01 00 00       	add    eax,0x102
c001c18d:	83 ec 0c             	sub    esp,0xc
c001c190:	50                   	push   eax
c001c191:	e8 da 43 fe ff       	call   c0000570 <strlen>
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c19c:	81 c2 02 01 00 00    	add    edx,0x102
c001c1a2:	83 ec 04             	sub    esp,0x4
c001c1a5:	50                   	push   eax
c001c1a6:	6a 00                	push   0x0
c001c1a8:	52                   	push   edx
c001c1a9:	e8 42 43 fe ff       	call   c00004f0 <memset>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	90                   	nop
c001c1b2:	c9                   	leave  
c001c1b3:	c3                   	ret    

c001c1b4 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c1b4:	55                   	push   ebp
c001c1b5:	89 e5                	mov    ebp,esp
c001c1b7:	83 ec 18             	sub    esp,0x18
c001c1ba:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c1bf:	85 c0                	test   eax,eax
c001c1c1:	74 2a                	je     c001c1ed <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c1c3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c1c9:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c1cf:	83 ec 04             	sub    esp,0x4
c001c1d2:	68 40 ef 03 c0       	push   0xc003ef40
c001c1d7:	83 ec 08             	sub    esp,0x8
c001c1da:	89 e2                	mov    edx,esp
c001c1dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c1df:	89 02                	mov    DWORD PTR [edx],eax
c001c1e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c1e4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c1e8:	ff d1                	call   ecx
c001c1ea:	83 c4 10             	add    esp,0x10
c001c1ed:	fb                   	sti    
c001c1ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c1f5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c1f9:	0f 84 0d 01 00 00    	je     c001c30c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c202:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c208:	0f be c0             	movsx  eax,al
c001c20b:	85 c0                	test   eax,eax
c001c20d:	75 2c                	jne    c001c23b <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c20f:	fa                   	cli    
c001c210:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c215:	83 c0 01             	add    eax,0x1
c001c218:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c21d:	e8 36 90 00 00       	call   c0025258 <schedule()>
c001c222:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c227:	83 e8 01             	sub    eax,0x1
c001c22a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c22f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c234:	85 c0                	test   eax,eax
c001c236:	75 c7                	jne    c001c1ff <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c238:	fb                   	sti    
c001c239:	eb c4                	jmp    c001c1ff <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c23b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c23e:	8d 50 01             	lea    edx,[eax+0x1]
c001c241:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c244:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c247:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c24d:	88 10                	mov    BYTE PTR [eax],dl
c001c24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c252:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c258:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c25b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c25f:	83 f8 03             	cmp    eax,0x3
c001c262:	75 1e                	jne    c001c282 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c264:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c269:	8b 00                	mov    eax,DWORD PTR [eax]
c001c26b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c26e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c274:	83 ec 08             	sub    esp,0x8
c001c277:	6a 02                	push   0x2
c001c279:	50                   	push   eax
c001c27a:	e8 9c 48 00 00       	call   c0020b1b <KeRaiseSignal(SigHandlerBlock*, int)>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c286:	83 f8 1c             	cmp    eax,0x1c
c001c289:	75 1e                	jne    c001c2a9 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c28b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c290:	8b 00                	mov    eax,DWORD PTR [eax]
c001c292:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c295:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c29b:	83 ec 08             	sub    esp,0x8
c001c29e:	6a 09                	push   0x9
c001c2a0:	50                   	push   eax
c001c2a1:	e8 75 48 00 00       	call   c0020b1b <KeRaiseSignal(SigHandlerBlock*, int)>
c001c2a6:	83 c4 10             	add    esp,0x10
c001c2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ac:	05 02 01 00 00       	add    eax,0x102
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	50                   	push   eax
c001c2b5:	e8 b6 42 fe ff       	call   c0000570 <strlen>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2c0:	81 c2 02 01 00 00    	add    edx,0x102
c001c2c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c2c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2cc:	81 c2 02 01 00 00    	add    edx,0x102
c001c2d2:	83 ec 04             	sub    esp,0x4
c001c2d5:	50                   	push   eax
c001c2d6:	51                   	push   ecx
c001c2d7:	52                   	push   edx
c001c2d8:	e8 f3 40 fe ff       	call   c00003d0 <memmove>
c001c2dd:	83 c4 10             	add    esp,0x10
c001c2e0:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c2e4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c2e8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2ec:	83 f8 0a             	cmp    eax,0xa
c001c2ef:	74 16                	je     c001c307 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2f1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2f5:	83 f8 03             	cmp    eax,0x3
c001c2f8:	74 0d                	je     c001c307 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2fa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2fe:	83 f8 1c             	cmp    eax,0x1c
c001c301:	0f 85 ee fe ff ff    	jne    c001c1f5 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c307:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c30a:	eb 03                	jmp    c001c30f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c30c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c30f:	c9                   	leave  
c001c310:	c3                   	ret    
c001c311:	90                   	nop

c001c312 <Keyboard::Keyboard(char const*)>:
c001c312:	83 ec 0c             	sub    esp,0xc
c001c315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c319:	83 ec 08             	sub    esp,0x8
c001c31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c320:	50                   	push   eax
c001c321:	e8 06 f1 ff ff       	call   c001b42c <Device::Device(char const*)>
c001c326:	83 c4 10             	add    esp,0x10
c001c329:	ba e8 20 03 c0       	mov    edx,0xc00320e8
c001c32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c332:	89 10                	mov    DWORD PTR [eax],edx
c001c334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c338:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c342:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c349:	90                   	nop
c001c34a:	83 c4 0c             	add    esp,0xc
c001c34d:	c3                   	ret    

c001c34e <Keyboard::~Keyboard()>:
c001c34e:	83 ec 0c             	sub    esp,0xc
c001c351:	ba e8 20 03 c0       	mov    edx,0xc00320e8
c001c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35a:	89 10                	mov    DWORD PTR [eax],edx
c001c35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c360:	83 ec 0c             	sub    esp,0xc
c001c363:	50                   	push   eax
c001c364:	e8 63 ee ff ff       	call   c001b1cc <Device::~Device()>
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	90                   	nop
c001c36d:	83 c4 0c             	add    esp,0xc
c001c370:	c3                   	ret    
c001c371:	90                   	nop

c001c372 <Keyboard::~Keyboard()>:
c001c372:	83 ec 0c             	sub    esp,0xc
c001c375:	83 ec 0c             	sub    esp,0xc
c001c378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c37c:	e8 cd ff ff ff       	call   c001c34e <Keyboard::~Keyboard()>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	83 ec 08             	sub    esp,0x8
c001c387:	68 5c 01 00 00       	push   0x15c
c001c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c390:	e8 87 cd ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c395:	83 c4 10             	add    esp,0x10
c001c398:	83 c4 0c             	add    esp,0xc
c001c39b:	c3                   	ret    

c001c39c <LogicalDisk::close(int, int, void*)>:
c001c39c:	83 c8 ff             	or     eax,0xffffffff
c001c39f:	c3                   	ret    

c001c3a0 <LogicalDisk::~LogicalDisk()>:
c001c3a0:	83 ec 0c             	sub    esp,0xc
c001c3a3:	ba 60 21 03 c0       	mov    edx,0xc0032160
c001c3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ac:	89 10                	mov    DWORD PTR [eax],edx
c001c3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	50                   	push   eax
c001c3b6:	e8 11 ee ff ff       	call   c001b1cc <Device::~Device()>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	90                   	nop
c001c3bf:	83 c4 0c             	add    esp,0xc
c001c3c2:	c3                   	ret    
c001c3c3:	90                   	nop

c001c3c4 <LogicalDisk::~LogicalDisk()>:
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	83 ec 0c             	sub    esp,0xc
c001c3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3ce:	e8 cd ff ff ff       	call   c001c3a0 <LogicalDisk::~LogicalDisk()>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	83 ec 08             	sub    esp,0x8
c001c3d9:	68 78 01 00 00       	push   0x178
c001c3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e2:	e8 35 cd ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	83 c4 0c             	add    esp,0xc
c001c3ed:	c3                   	ret    

c001c3ee <LogicalDisk::open(int, int, void*)>:
c001c3ee:	83 ec 18             	sub    esp,0x18
c001c3f1:	68 14 21 03 c0       	push   0xc0032114
c001c3f6:	e8 67 3e 00 00       	call   c0020262 <KePanic(char const*)>
c001c3fb:	83 c8 ff             	or     eax,0xffffffff
c001c3fe:	83 c4 1c             	add    esp,0x1c
c001c401:	c3                   	ret    

c001c402 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c402:	53                   	push   ebx
c001c403:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c40b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c40f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c415:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c41b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c421:	77 10                	ja     c001c433 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c423:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c429:	89 d3                	mov    ebx,edx
c001c42b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c431:	72 05                	jb     c001c438 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c433:	83 c8 ff             	or     eax,0xffffffff
c001c436:	89 c2                	mov    edx,eax
c001c438:	5b                   	pop    ebx
c001c439:	c3                   	ret    

c001c43a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c43a:	56                   	push   esi
c001c43b:	83 c8 ff             	or     eax,0xffffffff
c001c43e:	53                   	push   ebx
c001c43f:	89 c2                	mov    edx,eax
c001c441:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c445:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c449:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c44d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c453:	77 27                	ja     c001c47c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c455:	89 d8                	mov    eax,ebx
c001c457:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c45d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c468:	89 c2                	mov    edx,eax
c001c46a:	73 10                	jae    c001c47c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c46c:	89 c8                	mov    eax,ecx
c001c46e:	89 da                	mov    edx,ebx
c001c470:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c476:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c47c:	5b                   	pop    ebx
c001c47d:	5e                   	pop    esi
c001c47e:	c3                   	ret    
c001c47f:	90                   	nop

c001c480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c480:	83 ec 1c             	sub    esp,0x1c
c001c483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c48b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c48f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c493:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c497:	89 04 24             	mov    DWORD PTR [esp],eax
c001c49a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c49e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a6:	83 ec 08             	sub    esp,0x8
c001c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4ad:	50                   	push   eax
c001c4ae:	e8 79 ef ff ff       	call   c001b42c <Device::Device(char const*)>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	ba 60 21 03 c0       	mov    edx,0xc0032160
c001c4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4bf:	89 10                	mov    DWORD PTR [eax],edx
c001c4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4db:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4e6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c4f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4fc:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c502:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c508:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c50c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c50f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c513:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c519:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c523:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c527:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c531:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c53b:	90                   	nop
c001c53c:	83 c4 1c             	add    esp,0x1c
c001c53f:	c3                   	ret    

c001c540 <LogicalDisk::assignDriveLetter()>:
c001c540:	55                   	push   ebp
c001c541:	57                   	push   edi
c001c542:	56                   	push   esi
c001c543:	53                   	push   ebx
c001c544:	83 ec 14             	sub    esp,0x14
c001c547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c54b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c551:	b0 41                	mov    al,0x41
c001c553:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c559:	84 d2                	test   dl,dl
c001c55b:	75 02                	jne    c001c55f <LogicalDisk::assignDriveLetter()+0x1f>
c001c55d:	b0 43                	mov    al,0x43
c001c55f:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c565:	0f b6 ca             	movzx  ecx,dl
c001c568:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c56c:	0f be e8             	movsx  ebp,al
c001c56f:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c575:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c579:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c57d:	3c 43                	cmp    al,0x43
c001c57f:	75 10                	jne    c001c591 <LogicalDisk::assignDriveLetter()+0x51>
c001c581:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c588:	75 5a                	jne    c001c5e4 <LogicalDisk::assignDriveLetter()+0xa4>
c001c58a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c58f:	75 53                	jne    c001c5e4 <LogicalDisk::assignDriveLetter()+0xa4>
c001c591:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c594:	ba 01 00 00 00       	mov    edx,0x1
c001c599:	89 34 24             	mov    DWORD PTR [esp],esi
c001c59c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c59f:	d3 e2                	shl    edx,cl
c001c5a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5a5:	89 d7                	mov    edi,edx
c001c5a7:	89 d6                	mov    esi,edx
c001c5a9:	c1 ff 1f             	sar    edi,0x1f
c001c5ac:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c5b0:	21 f9                	and    ecx,edi
c001c5b2:	09 d1                	or     ecx,edx
c001c5b4:	75 2e                	jne    c001c5e4 <LogicalDisk::assignDriveLetter()+0xa4>
c001c5b6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5be:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c5c4:	09 f2                	or     edx,esi
c001c5c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5c9:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c5cf:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c5d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5da:	09 fa                	or     edx,edi
c001c5dc:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c5e2:	eb 0d                	jmp    c001c5f1 <LogicalDisk::assignDriveLetter()+0xb1>
c001c5e4:	8d 50 01             	lea    edx,[eax+0x1]
c001c5e7:	45                   	inc    ebp
c001c5e8:	88 d0                	mov    al,dl
c001c5ea:	80 fa 5b             	cmp    dl,0x5b
c001c5ed:	75 8e                	jne    c001c57d <LogicalDisk::assignDriveLetter()+0x3d>
c001c5ef:	31 c0                	xor    eax,eax
c001c5f1:	83 c4 14             	add    esp,0x14
c001c5f4:	5b                   	pop    ebx
c001c5f5:	5e                   	pop    esi
c001c5f6:	5f                   	pop    edi
c001c5f7:	5d                   	pop    ebp
c001c5f8:	c3                   	ret    
c001c5f9:	90                   	nop

c001c5fa <LogicalDisk::mount()>:
c001c5fa:	56                   	push   esi
c001c5fb:	53                   	push   ebx
c001c5fc:	53                   	push   ebx
c001c5fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c601:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c607:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c611:	85 db                	test   ebx,ebx
c001c613:	74 27                	je     c001c63c <LogicalDisk::mount()+0x42>
c001c615:	51                   	push   ecx
c001c616:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c61d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c61f:	83 e8 41             	sub    eax,0x41
c001c622:	50                   	push   eax
c001c623:	56                   	push   esi
c001c624:	53                   	push   ebx
c001c625:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c628:	83 c4 10             	add    esp,0x10
c001c62b:	84 c0                	test   al,al
c001c62d:	74 08                	je     c001c637 <LogicalDisk::mount()+0x3d>
c001c62f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c635:	eb 07                	jmp    c001c63e <LogicalDisk::mount()+0x44>
c001c637:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c63a:	eb d5                	jmp    c001c611 <LogicalDisk::mount()+0x17>
c001c63c:	31 c0                	xor    eax,eax
c001c63e:	5a                   	pop    edx
c001c63f:	5b                   	pop    ebx
c001c640:	5e                   	pop    esi
c001c641:	c3                   	ret    

c001c642 <LogicalDisk::unmount()>:
c001c642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c646:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c650:	c3                   	ret    
c001c651:	90                   	nop

c001c652 <LogicalDisk::eject()>:
c001c652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c656:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c65c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c65e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c662:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c665:	90                   	nop

c001c666 <LogicalDisk::unassignDriveLetter()>:
c001c666:	57                   	push   edi
c001c667:	56                   	push   esi
c001c668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c66c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c673:	85 c9                	test   ecx,ecx
c001c675:	75 0f                	jne    c001c686 <LogicalDisk::unassignDriveLetter()+0x20>
c001c677:	c7 44 24 0c 38 21 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032138
c001c67f:	5e                   	pop    esi
c001c680:	5f                   	pop    edi
c001c681:	e9 dc 3b 00 00       	jmp    c0020262 <KePanic(char const*)>
c001c686:	83 e9 41             	sub    ecx,0x41
c001c689:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c690:	b8 01 00 00 00       	mov    eax,0x1
c001c695:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c6a0:	d3 e0                	shl    eax,cl
c001c6a2:	89 c7                	mov    edi,eax
c001c6a4:	f7 d0                	not    eax
c001c6a6:	c1 ff 1f             	sar    edi,0x1f
c001c6a9:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c6af:	89 fe                	mov    esi,edi
c001c6b1:	f7 d6                	not    esi
c001c6b3:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c6b9:	5e                   	pop    esi
c001c6ba:	5f                   	pop    edi
c001c6bb:	c3                   	ret    

c001c6bc <LogicalDisk::read(unsigned long long, int, void*)>:
c001c6bc:	57                   	push   edi
c001c6bd:	56                   	push   esi
c001c6be:	53                   	push   ebx
c001c6bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6c7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6cf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6d5:	77 41                	ja     c001c718 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c6d7:	99                   	cdq    
c001c6d8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6de:	01 c8                	add    eax,ecx
c001c6e0:	11 da                	adc    edx,ebx
c001c6e2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6e8:	19 d7                	sbb    edi,edx
c001c6ea:	72 33                	jb     c001c71f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c6ec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6f2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6fc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c700:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c706:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c70c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c710:	5b                   	pop    ebx
c001c711:	5e                   	pop    esi
c001c712:	5f                   	pop    edi
c001c713:	e9 c8 0a 00 00       	jmp    c001d1e0 <VCache::read(unsigned long long, int, void*)>
c001c718:	b8 05 00 00 00       	mov    eax,0x5
c001c71d:	eb 05                	jmp    c001c724 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c71f:	b8 07 00 00 00       	mov    eax,0x7
c001c724:	5b                   	pop    ebx
c001c725:	5e                   	pop    esi
c001c726:	5f                   	pop    edi
c001c727:	c3                   	ret    

c001c728 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c728:	57                   	push   edi
c001c729:	56                   	push   esi
c001c72a:	53                   	push   ebx
c001c72b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c72f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c733:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c73b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c741:	77 41                	ja     c001c784 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c743:	99                   	cdq    
c001c744:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c74a:	01 c8                	add    eax,ecx
c001c74c:	11 da                	adc    edx,ebx
c001c74e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c754:	19 d7                	sbb    edi,edx
c001c756:	72 33                	jb     c001c78b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c758:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c75e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c768:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c76c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c772:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c778:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c77c:	5b                   	pop    ebx
c001c77d:	5e                   	pop    esi
c001c77e:	5f                   	pop    edi
c001c77f:	e9 68 09 00 00       	jmp    c001d0ec <VCache::write(unsigned long long, int, void*)>
c001c784:	b8 05 00 00 00       	mov    eax,0x5
c001c789:	eb 05                	jmp    c001c790 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c78b:	b8 07 00 00 00       	mov    eax,0x7
c001c790:	5b                   	pop    ebx
c001c791:	5e                   	pop    esi
c001c792:	5f                   	pop    edi
c001c793:	c3                   	ret    

c001c794 <Mouse::Mouse(char const*)>:
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79b:	83 ec 08             	sub    esp,0x8
c001c79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a2:	50                   	push   eax
c001c7a3:	e8 84 ec ff ff       	call   c001b42c <Device::Device(char const*)>
c001c7a8:	83 c4 10             	add    esp,0x10
c001c7ab:	ba 8c 21 03 c0       	mov    edx,0xc003218c
c001c7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b4:	89 10                	mov    DWORD PTR [eax],edx
c001c7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ba:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c7c4:	90                   	nop
c001c7c5:	83 c4 0c             	add    esp,0xc
c001c7c8:	c3                   	ret    
c001c7c9:	90                   	nop
c001c7ca:	66 90                	xchg   ax,ax

c001c7cc <Mouse::~Mouse()>:
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	ba 8c 21 03 c0       	mov    edx,0xc003218c
c001c7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d8:	89 10                	mov    DWORD PTR [eax],edx
c001c7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7de:	83 ec 0c             	sub    esp,0xc
c001c7e1:	50                   	push   eax
c001c7e2:	e8 e5 e9 ff ff       	call   c001b1cc <Device::~Device()>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	90                   	nop
c001c7eb:	83 c4 0c             	add    esp,0xc
c001c7ee:	c3                   	ret    
c001c7ef:	90                   	nop

c001c7f0 <Mouse::~Mouse()>:
c001c7f0:	83 ec 0c             	sub    esp,0xc
c001c7f3:	83 ec 0c             	sub    esp,0xc
c001c7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7fa:	e8 cd ff ff ff       	call   c001c7cc <Mouse::~Mouse()>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	83 ec 08             	sub    esp,0x8
c001c805:	68 58 01 00 00       	push   0x158
c001c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c80e:	e8 09 c9 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	83 c4 0c             	add    esp,0xc
c001c819:	c3                   	ret    

c001c81a <NIC::getMAC()>:
c001c81a:	31 c0                	xor    eax,eax
c001c81c:	31 d2                	xor    edx,edx
c001c81e:	c3                   	ret    
c001c81f:	90                   	nop

c001c820 <NIC::write(int, unsigned char*, int*)>:
c001c820:	b8 01 00 00 00       	mov    eax,0x1
c001c825:	c3                   	ret    

c001c826 <NIC::NIC(char const*)>:
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82d:	83 ec 08             	sub    esp,0x8
c001c830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c834:	50                   	push   eax
c001c835:	e8 f2 eb ff ff       	call   c001b42c <Device::Device(char const*)>
c001c83a:	83 c4 10             	add    esp,0x10
c001c83d:	ba b8 21 03 c0       	mov    edx,0xc00321b8
c001c842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c846:	89 10                	mov    DWORD PTR [eax],edx
c001c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c856:	90                   	nop
c001c857:	83 c4 0c             	add    esp,0xc
c001c85a:	c3                   	ret    
c001c85b:	90                   	nop

c001c85c <NIC::~NIC()>:
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	ba b8 21 03 c0       	mov    edx,0xc00321b8
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	89 10                	mov    DWORD PTR [eax],edx
c001c86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86e:	83 ec 0c             	sub    esp,0xc
c001c871:	50                   	push   eax
c001c872:	e8 55 e9 ff ff       	call   c001b1cc <Device::~Device()>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	90                   	nop
c001c87b:	83 c4 0c             	add    esp,0xc
c001c87e:	c3                   	ret    
c001c87f:	90                   	nop

c001c880 <NIC::~NIC()>:
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	83 ec 0c             	sub    esp,0xc
c001c886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c88a:	e8 cd ff ff ff       	call   c001c85c <NIC::~NIC()>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	83 ec 08             	sub    esp,0x8
c001c895:	68 58 01 00 00       	push   0x158
c001c89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c89e:	e8 79 c8 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	83 c4 0c             	add    esp,0xc
c001c8a9:	c3                   	ret    

c001c8aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c8aa:	55                   	push   ebp
c001c8ab:	57                   	push   edi
c001c8ac:	56                   	push   esi
c001c8ad:	53                   	push   ebx
c001c8ae:	81 ec 28 01 00 00    	sub    esp,0x128
c001c8b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c8bb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c8c2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c8c9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c8d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8df:	e8 44 ec ff ff       	call   c001b528 <Device::getName()>
c001c8e4:	5a                   	pop    edx
c001c8e5:	59                   	pop    ecx
c001c8e6:	50                   	push   eax
c001c8e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c8eb:	55                   	push   ebp
c001c8ec:	e8 4f 3d fe ff       	call   c0000640 <strcpy>
c001c8f1:	5b                   	pop    ebx
c001c8f2:	58                   	pop    eax
c001c8f3:	68 e4 21 03 c0       	push   0xc00321e4
c001c8f8:	55                   	push   ebp
c001c8f9:	e8 42 3f fe ff       	call   c0000840 <strcat>
c001c8fe:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c905:	e8 b0 9a ff ff       	call   c00163ba <malloc>
c001c90a:	83 c4 0c             	add    esp,0xc
c001c90d:	89 c3                	mov    ebx,eax
c001c90f:	57                   	push   edi
c001c910:	56                   	push   esi
c001c911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c919:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c920:	55                   	push   ebp
c001c921:	50                   	push   eax
c001c922:	e8 59 fb ff ff       	call   c001c480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c927:	83 c4 14             	add    esp,0x14
c001c92a:	53                   	push   ebx
c001c92b:	e8 10 fc ff ff       	call   c001c540 <LogicalDisk::assignDriveLetter()>
c001c930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c933:	e8 c2 fc ff ff       	call   c001c5fa <LogicalDisk::mount()>
c001c938:	58                   	pop    eax
c001c939:	5a                   	pop    edx
c001c93a:	53                   	push   ebx
c001c93b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c942:	e8 83 e9 ff ff       	call   c001b2ca <Device::addChild(Device*)>
c001c947:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c94d:	5b                   	pop    ebx
c001c94e:	5e                   	pop    esi
c001c94f:	5f                   	pop    edi
c001c950:	5d                   	pop    ebp
c001c951:	c3                   	ret    

c001c952 <createPartitionsForDisk(PhysicalDisk*)>:
c001c952:	55                   	push   ebp
c001c953:	57                   	push   edi
c001c954:	56                   	push   esi
c001c955:	53                   	push   ebx
c001c956:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c95c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c963:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c969:	3d 00 02 00 00       	cmp    eax,0x200
c001c96e:	74 27                	je     c001c997 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c970:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c976:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c97c:	83 ec 10             	sub    esp,0x10
c001c97f:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c983:	99                   	cdq    
c001c984:	c1 e6 0a             	shl    esi,0xa
c001c987:	52                   	push   edx
c001c988:	89 fd                	mov    ebp,edi
c001c98a:	50                   	push   eax
c001c98b:	55                   	push   ebp
c001c98c:	56                   	push   esi
c001c98d:	e8 be 1c 01 00       	call   c002e650 <__udivdi3>
c001c992:	e9 b9 00 00 00       	jmp    c001ca50 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c997:	83 ec 0c             	sub    esp,0xc
c001c99a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c99c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c9a0:	56                   	push   esi
c001c9a1:	6a 01                	push   0x1
c001c9a3:	6a 00                	push   0x0
c001c9a5:	6a 00                	push   0x0
c001c9a7:	53                   	push   ebx
c001c9a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c9ab:	83 c4 20             	add    esp,0x20
c001c9ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c9b6:	75 0a                	jne    c001c9c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c9b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c9c0:	74 2c                	je     c001c9ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c9c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9d4:	83 ec 10             	sub    esp,0x10
c001c9d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9db:	89 f7                	mov    edi,esi
c001c9dd:	c1 e0 0a             	shl    eax,0xa
c001c9e0:	c1 ff 1f             	sar    edi,0x1f
c001c9e3:	57                   	push   edi
c001c9e4:	56                   	push   esi
c001c9e5:	52                   	push   edx
c001c9e6:	50                   	push   eax
c001c9e7:	e8 64 1c 01 00       	call   c002e650 <__udivdi3>
c001c9ec:	eb 62                	jmp    c001ca50 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c9ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c9f5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c9fc:	89 cf                	mov    edi,ecx
c001c9fe:	83 e2 7f             	and    edx,0x7f
c001ca01:	83 e7 7f             	and    edi,0x7f
c001ca04:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001ca0b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001ca0e:	83 e0 7f             	and    eax,0x7f
c001ca11:	8d 14 01             	lea    edx,[ecx+eax*1]
c001ca14:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001ca1b:	83 e0 7f             	and    eax,0x7f
c001ca1e:	01 d0                	add    eax,edx
c001ca20:	89 c5                	mov    ebp,eax
c001ca22:	84 c0                	test   al,al
c001ca24:	74 41                	je     c001ca67 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ca26:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca2c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca32:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca38:	83 ec 10             	sub    esp,0x10
c001ca3b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca3f:	89 f7                	mov    edi,esi
c001ca41:	c1 e0 0a             	shl    eax,0xa
c001ca44:	c1 ff 1f             	sar    edi,0x1f
c001ca47:	57                   	push   edi
c001ca48:	56                   	push   esi
c001ca49:	52                   	push   edx
c001ca4a:	50                   	push   eax
c001ca4b:	e8 00 1c 01 00       	call   c002e650 <__udivdi3>
c001ca50:	83 c4 14             	add    esp,0x14
c001ca53:	52                   	push   edx
c001ca54:	50                   	push   eax
c001ca55:	6a 00                	push   0x0
c001ca57:	6a 00                	push   0x0
c001ca59:	53                   	push   ebx
c001ca5a:	e8 4b fe ff ff       	call   c001c8aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ca5f:	83 c4 20             	add    esp,0x20
c001ca62:	e9 73 01 00 00       	jmp    c001cbda <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ca67:	89 f0                	mov    eax,esi
c001ca69:	31 c9                	xor    ecx,ecx
c001ca6b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca72:	75 02                	jne    c001ca76 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca74:	89 cd                	mov    ebp,ecx
c001ca76:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca7d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001ca84:	c1 e2 08             	shl    edx,0x8
c001ca87:	c1 e6 10             	shl    esi,0x10
c001ca8a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ca92:	09 f2                	or     edx,esi
c001ca94:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ca9c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001caa3:	83 c0 10             	add    eax,0x10
c001caa6:	09 f2                	or     edx,esi
c001caa8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001caaf:	c1 e6 18             	shl    esi,0x18
c001cab2:	09 f2                	or     edx,esi
c001cab4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cabb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cabf:	c1 e6 10             	shl    esi,0x10
c001cac2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cac9:	c1 e2 08             	shl    edx,0x8
c001cacc:	09 f2                	or     edx,esi
c001cace:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cad5:	09 f2                	or     edx,esi
c001cad7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cade:	c1 e6 18             	shl    esi,0x18
c001cae1:	09 f2                	or     edx,esi
c001cae3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cae7:	41                   	inc    ecx
c001cae8:	83 f9 04             	cmp    ecx,0x4
c001caeb:	0f 85 7a ff ff ff    	jne    c001ca6b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001caf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf5:	83 f0 01             	xor    eax,0x1
c001caf8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cafc:	75 4f                	jne    c001cb4d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb02:	83 f0 01             	xor    eax,0x1
c001cb05:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cb09:	75 42                	jne    c001cb4d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb0b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cb13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb1b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cb21:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cb27:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb31:	89 f7                	mov    edi,esi
c001cb33:	c1 e0 0a             	shl    eax,0xa
c001cb36:	c1 ff 1f             	sar    edi,0x1f
c001cb39:	57                   	push   edi
c001cb3a:	56                   	push   esi
c001cb3b:	52                   	push   edx
c001cb3c:	50                   	push   eax
c001cb3d:	e8 0e 1b 01 00       	call   c002e650 <__udivdi3>
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb4d:	89 e8                	mov    eax,ebp
c001cb4f:	0f b6 e8             	movzx  ebp,al
c001cb52:	85 ed                	test   ebp,ebp
c001cb54:	74 50                	je     c001cba6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cb56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cb5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb62:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb72:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb82:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb86:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb8a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb8e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb96:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cb9a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cb9e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cba2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cba6:	31 ed                	xor    ebp,ebp
c001cba8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cbac:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cbb0:	89 f8                	mov    eax,edi
c001cbb2:	09 f0                	or     eax,esi
c001cbb4:	74 1e                	je     c001cbd4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbb6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cbba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cbbe:	89 d1                	mov    ecx,edx
c001cbc0:	09 c1                	or     ecx,eax
c001cbc2:	74 10                	je     c001cbd4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	57                   	push   edi
c001cbc8:	56                   	push   esi
c001cbc9:	52                   	push   edx
c001cbca:	50                   	push   eax
c001cbcb:	53                   	push   ebx
c001cbcc:	e8 d9 fc ff ff       	call   c001c8aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbd1:	83 c4 20             	add    esp,0x20
c001cbd4:	45                   	inc    ebp
c001cbd5:	83 fd 04             	cmp    ebp,0x4
c001cbd8:	75 ce                	jne    c001cba8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cbda:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cbe0:	5b                   	pop    ebx
c001cbe1:	5e                   	pop    esi
c001cbe2:	5f                   	pop    edi
c001cbe3:	5d                   	pop    ebp
c001cbe4:	c3                   	ret    
c001cbe5:	66 90                	xchg   ax,ax
c001cbe7:	90                   	nop

c001cbe8 <Serial::Serial(char const*)>:
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbef:	83 ec 08             	sub    esp,0x8
c001cbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf6:	50                   	push   eax
c001cbf7:	e8 30 e8 ff ff       	call   c001b42c <Device::Device(char const*)>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	ba f8 21 03 c0       	mov    edx,0xc00321f8
c001cc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc08:	89 10                	mov    DWORD PTR [eax],edx
c001cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cc18:	90                   	nop
c001cc19:	83 c4 0c             	add    esp,0xc
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop
c001cc1e:	66 90                	xchg   ax,ax

c001cc20 <Serial::~Serial()>:
c001cc20:	83 ec 0c             	sub    esp,0xc
c001cc23:	ba f8 21 03 c0       	mov    edx,0xc00321f8
c001cc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2c:	89 10                	mov    DWORD PTR [eax],edx
c001cc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc32:	83 ec 0c             	sub    esp,0xc
c001cc35:	50                   	push   eax
c001cc36:	e8 91 e5 ff ff       	call   c001b1cc <Device::~Device()>
c001cc3b:	83 c4 10             	add    esp,0x10
c001cc3e:	90                   	nop
c001cc3f:	83 c4 0c             	add    esp,0xc
c001cc42:	c3                   	ret    
c001cc43:	90                   	nop

c001cc44 <Serial::~Serial()>:
c001cc44:	83 ec 0c             	sub    esp,0xc
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4e:	e8 cd ff ff ff       	call   c001cc20 <Serial::~Serial()>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	83 ec 08             	sub    esp,0x8
c001cc59:	68 58 01 00 00       	push   0x158
c001cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc62:	e8 b5 c4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	83 c4 0c             	add    esp,0xc
c001cc6d:	c3                   	ret    
c001cc6e:	66 90                	xchg   ax,ax

c001cc70 <Timer::Timer(char const*)>:
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc77:	83 ec 08             	sub    esp,0x8
c001cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7e:	50                   	push   eax
c001cc7f:	e8 a8 e7 ff ff       	call   c001b42c <Device::Device(char const*)>
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	ba 3c 22 03 c0       	mov    edx,0xc003223c
c001cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc90:	89 10                	mov    DWORD PTR [eax],edx
c001cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc96:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cca0:	90                   	nop
c001cca1:	83 c4 0c             	add    esp,0xc
c001cca4:	c3                   	ret    
c001cca5:	90                   	nop
c001cca6:	66 90                	xchg   ax,ax

c001cca8 <Timer::~Timer()>:
c001cca8:	83 ec 0c             	sub    esp,0xc
c001ccab:	ba 3c 22 03 c0       	mov    edx,0xc003223c
c001ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb4:	89 10                	mov    DWORD PTR [eax],edx
c001ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccba:	83 ec 0c             	sub    esp,0xc
c001ccbd:	50                   	push   eax
c001ccbe:	e8 09 e5 ff ff       	call   c001b1cc <Device::~Device()>
c001ccc3:	83 c4 10             	add    esp,0x10
c001ccc6:	90                   	nop
c001ccc7:	83 c4 0c             	add    esp,0xc
c001ccca:	c3                   	ret    
c001cccb:	90                   	nop

c001cccc <Timer::~Timer()>:
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	83 ec 0c             	sub    esp,0xc
c001ccd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd6:	e8 cd ff ff ff       	call   c001cca8 <Timer::~Timer()>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	83 ec 08             	sub    esp,0x8
c001cce1:	68 5c 01 00 00       	push   0x15c
c001cce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccea:	e8 2d c4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	83 c4 0c             	add    esp,0xc
c001ccf5:	c3                   	ret    

c001ccf6 <Timer::read()>:
c001ccf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd00:	c3                   	ret    

c001cd01 <setupTimer(int)>:
c001cd01:	53                   	push   ebx
c001cd02:	83 ec 14             	sub    esp,0x14
c001cd05:	68 5c 01 00 00       	push   0x15c
c001cd0a:	e8 ab 96 ff ff       	call   c00163ba <malloc>
c001cd0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd12:	89 c3                	mov    ebx,eax
c001cd14:	e8 c3 11 01 00       	call   c002dedc <PIT::PIT()>
c001cd19:	58                   	pop    eax
c001cd1a:	5a                   	pop    edx
c001cd1b:	53                   	push   ebx
c001cd1c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cd22:	e8 a3 e5 ff ff       	call   c001b2ca <Device::addChild(Device*)>
c001cd27:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd29:	6a 00                	push   0x0
c001cd2b:	6a 00                	push   0x0
c001cd2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd31:	53                   	push   ebx
c001cd32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd35:	89 d8                	mov    eax,ebx
c001cd37:	83 c4 28             	add    esp,0x28
c001cd3a:	5b                   	pop    ebx
c001cd3b:	c3                   	ret    

c001cd3c <timerHandler(unsigned int)>:
c001cd3c:	57                   	push   edi
c001cd3d:	56                   	push   esi
c001cd3e:	53                   	push   ebx
c001cd3f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cd43:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cd49:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cd50:	0f 84 46 01 00 00    	je     c001ce9c <timerHandler(unsigned int)+0x160>
c001cd56:	fa                   	cli    
c001cd57:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd5d:	83 ec 0c             	sub    esp,0xc
c001cd60:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd66:	68 e0 01 04 c0       	push   0xc00401e0
c001cd6b:	e8 b0 1e 01 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	84 c0                	test   al,al
c001cd75:	0f 85 a1 00 00 00    	jne    c001ce1c <timerHandler(unsigned int)+0xe0>
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	68 e0 01 04 c0       	push   0xc00401e0
c001cd83:	e8 b4 1e 01 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd88:	83 c4 10             	add    esp,0x10
c001cd8b:	89 c6                	mov    esi,eax
c001cd8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd90:	83 ec 0c             	sub    esp,0xc
c001cd93:	68 e0 01 04 c0       	push   0xc00401e0
c001cd98:	e8 9f 1e 01 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd9d:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cda4:	89 c3                	mov    ebx,eax
c001cda6:	e8 99 1e 01 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cdab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cdae:	83 c4 10             	add    esp,0x10
c001cdb1:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cdb7:	77 23                	ja     c001cddc <timerHandler(unsigned int)+0xa0>
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	53                   	push   ebx
c001cdbd:	e8 8e 87 00 00       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	39 de                	cmp    esi,ebx
c001cdc7:	75 27                	jne    c001cdf0 <timerHandler(unsigned int)+0xb4>
c001cdc9:	83 ec 0c             	sub    esp,0xc
c001cdcc:	68 e0 01 04 c0       	push   0xc00401e0
c001cdd1:	e8 66 1e 01 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdd6:	89 c6                	mov    esi,eax
c001cdd8:	eb 12                	jmp    c001cdec <timerHandler(unsigned int)+0xb0>
c001cdda:	66 90                	xchg   ax,ax
c001cddc:	50                   	push   eax
c001cddd:	50                   	push   eax
c001cdde:	53                   	push   ebx
c001cddf:	68 e0 01 04 c0       	push   0xc00401e0
c001cde4:	e8 17 1f 01 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cde9:	8d 76 00             	lea    esi,[esi+0x0]
c001cdec:	83 c4 10             	add    esp,0x10
c001cdef:	90                   	nop
c001cdf0:	83 ec 0c             	sub    esp,0xc
c001cdf3:	68 e0 01 04 c0       	push   0xc00401e0
c001cdf8:	e8 23 1e 01 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	84 c0                	test   al,al
c001ce02:	75 18                	jne    c001ce1c <timerHandler(unsigned int)+0xe0>
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	68 e0 01 04 c0       	push   0xc00401e0
c001ce0c:	e8 2b 1e 01 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce11:	83 c4 10             	add    esp,0x10
c001ce14:	39 f0                	cmp    eax,esi
c001ce16:	0f 85 74 ff ff ff    	jne    c001cd90 <timerHandler(unsigned int)+0x54>
c001ce1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce21:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ce25:	74 3d                	je     c001ce64 <timerHandler(unsigned int)+0x128>
c001ce27:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001ce2e:	74 34                	je     c001ce64 <timerHandler(unsigned int)+0x128>
c001ce30:	fa                   	cli    
c001ce31:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce37:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001ce3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce42:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001ce45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce4a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ce4d:	77 05                	ja     c001ce54 <timerHandler(unsigned int)+0x118>
c001ce4f:	e8 04 84 00 00       	call   c0025258 <schedule()>
c001ce54:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce59:	48                   	dec    eax
c001ce5a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce5f:	75 03                	jne    c001ce64 <timerHandler(unsigned int)+0x128>
c001ce61:	fb                   	sti    
c001ce62:	66 90                	xchg   ax,ax
c001ce64:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce69:	48                   	dec    eax
c001ce6a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce6f:	75 1b                	jne    c001ce8c <timerHandler(unsigned int)+0x150>
c001ce71:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce78:	74 12                	je     c001ce8c <timerHandler(unsigned int)+0x150>
c001ce7a:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce84:	e8 cf 83 00 00       	call   c0025258 <schedule()>
c001ce89:	8d 76 00             	lea    esi,[esi+0x0]
c001ce8c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce91:	48                   	dec    eax
c001ce92:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce97:	75 03                	jne    c001ce9c <timerHandler(unsigned int)+0x160>
c001ce99:	fb                   	sti    
c001ce9a:	66 90                	xchg   ax,ax
c001ce9c:	5b                   	pop    ebx
c001ce9d:	5e                   	pop    esi
c001ce9e:	5f                   	pop    edi
c001ce9f:	c3                   	ret    

c001cea0 <VCache::VCache(PhysicalDisk*)>:
c001cea0:	53                   	push   ebx
c001cea1:	83 ec 18             	sub    esp,0x18
c001cea4:	ba 6c 22 03 c0       	mov    edx,0xc003226c
c001cea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cead:	89 10                	mov    DWORD PTR [eax],edx
c001ceaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001ceba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cebe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ced0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ced7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cee2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cefc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf00:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cf07:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cf0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf12:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cf1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf22:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf31:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cf39:	83 ec 0c             	sub    esp,0xc
c001cf3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf40:	e8 75 94 ff ff       	call   c00163ba <malloc>
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	89 c3                	mov    ebx,eax
c001cf4a:	83 ec 0c             	sub    esp,0xc
c001cf4d:	53                   	push   ebx
c001cf4e:	e8 f5 32 00 00       	call   c0020248 <Mutex::Mutex()>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cf5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf65:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf77:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf81:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf88:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cf8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf94:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf98:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cf9b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cf9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cfa6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cfb0:	05 00 02 00 00       	add    eax,0x200
c001cfb5:	c1 e0 03             	shl    eax,0x3
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	50                   	push   eax
c001cfbc:	e8 f9 93 ff ff       	call   c00163ba <malloc>
c001cfc1:	83 c4 10             	add    esp,0x10
c001cfc4:	89 c2                	mov    edx,eax
c001cfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cfcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfd1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfdc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cfe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfe4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cfea:	89 d0                	mov    eax,edx
c001cfec:	c1 e0 02             	shl    eax,0x2
c001cfef:	01 d0                	add    eax,edx
c001cff1:	c1 e0 04             	shl    eax,0x4
c001cff4:	83 ec 0c             	sub    esp,0xc
c001cff7:	50                   	push   eax
c001cff8:	e8 bd 93 ff ff       	call   c00163ba <malloc>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	89 c2                	mov    edx,eax
c001d002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d006:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d009:	90                   	nop
c001d00a:	83 c4 18             	add    esp,0x18
c001d00d:	5b                   	pop    ebx
c001d00e:	c3                   	ret    
c001d00f:	90                   	nop

c001d010 <VCache::invalidateReadBuffer()>:
c001d010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d014:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d01a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d01e:	c3                   	ret    
c001d01f:	90                   	nop

c001d020 <VCache::writeWriteBuffer()>:
c001d020:	53                   	push   ebx
c001d021:	83 ec 08             	sub    esp,0x8
c001d024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d028:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d02c:	74 1e                	je     c001d04c <VCache::writeWriteBuffer()+0x2c>
c001d02e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d031:	83 ec 0c             	sub    esp,0xc
c001d034:	8b 10                	mov    edx,DWORD PTR [eax]
c001d036:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d039:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d03c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d03f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d042:	50                   	push   eax
c001d043:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d046:	83 c4 20             	add    esp,0x20
c001d049:	8d 76 00             	lea    esi,[esi+0x0]
c001d04c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d053:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d05a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d05e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d065:	83 c4 08             	add    esp,0x8
c001d068:	5b                   	pop    ebx
c001d069:	c3                   	ret    
c001d06a:	66 90                	xchg   ax,ax

c001d06c <VCache::~VCache()>:
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	ba 6c 22 03 c0       	mov    edx,0xc003226c
c001d074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d078:	89 10                	mov    DWORD PTR [eax],edx
c001d07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d081:	0f b6 c0             	movzx  eax,al
c001d084:	85 c0                	test   eax,eax
c001d086:	74 10                	je     c001d098 <VCache::~VCache()+0x2c>
c001d088:	83 ec 0c             	sub    esp,0xc
c001d08b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d08f:	e8 8c ff ff ff       	call   c001d020 <VCache::writeWriteBuffer()>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	90                   	nop
c001d098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d09f:	83 ec 0c             	sub    esp,0xc
c001d0a2:	50                   	push   eax
c001d0a3:	e8 22 93 ff ff       	call   c00163ca <free>
c001d0a8:	83 c4 10             	add    esp,0x10
c001d0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	50                   	push   eax
c001d0b6:	e8 0f 93 ff ff       	call   c00163ca <free>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	90                   	nop
c001d0bf:	83 c4 0c             	add    esp,0xc
c001d0c2:	c3                   	ret    
c001d0c3:	90                   	nop

c001d0c4 <VCache::~VCache()>:
c001d0c4:	83 ec 0c             	sub    esp,0xc
c001d0c7:	83 ec 0c             	sub    esp,0xc
c001d0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ce:	e8 99 ff ff ff       	call   c001d06c <VCache::~VCache()>
c001d0d3:	83 c4 10             	add    esp,0x10
c001d0d6:	83 ec 08             	sub    esp,0x8
c001d0d9:	6a 44                	push   0x44
c001d0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0df:	e8 38 c0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	83 c4 0c             	add    esp,0xc
c001d0ea:	c3                   	ret    
c001d0eb:	90                   	nop

c001d0ec <VCache::write(unsigned long long, int, void*)>:
c001d0ec:	55                   	push   ebp
c001d0ed:	57                   	push   edi
c001d0ee:	56                   	push   esi
c001d0ef:	53                   	push   ebx
c001d0f0:	83 ec 1c             	sub    esp,0x1c
c001d0f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d0fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d0ff:	e8 bc 7e 00 00       	call   c0024fc0 <KeDisablePreemption()>
c001d104:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d108:	74 0e                	je     c001d118 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d10a:	83 ec 0c             	sub    esp,0xc
c001d10d:	53                   	push   ebx
c001d10e:	e8 fd fe ff ff       	call   c001d010 <VCache::invalidateReadBuffer()>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	66 90                	xchg   ax,ax
c001d118:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d11c:	74 5e                	je     c001d17c <VCache::write(unsigned long long, int, void*)+0x90>
c001d11e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d121:	89 e8                	mov    eax,ebp
c001d123:	99                   	cdq    
c001d124:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d127:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d12a:	89 c1                	mov    ecx,eax
c001d12c:	89 d0                	mov    eax,edx
c001d12e:	31 f1                	xor    ecx,esi
c001d130:	31 f8                	xor    eax,edi
c001d132:	09 c1                	or     ecx,eax
c001d134:	75 3a                	jne    c001d170 <VCache::write(unsigned long long, int, void*)+0x84>
c001d136:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d13b:	75 33                	jne    c001d170 <VCache::write(unsigned long long, int, void*)+0x84>
c001d13d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d140:	89 ef                	mov    edi,ebp
c001d142:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d148:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d14c:	0f af f9             	imul   edi,ecx
c001d14f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d152:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d154:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d157:	40                   	inc    eax
c001d158:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d15b:	83 f8 50             	cmp    eax,0x50
c001d15e:	75 70                	jne    c001d1d0 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d160:	83 ec 0c             	sub    esp,0xc
c001d163:	53                   	push   ebx
c001d164:	e8 b7 fe ff ff       	call   c001d020 <VCache::writeWriteBuffer()>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	eb 62                	jmp    c001d1d0 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d16e:	66 90                	xchg   ax,ax
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	53                   	push   ebx
c001d174:	e8 a7 fe ff ff       	call   c001d020 <VCache::writeWriteBuffer()>
c001d179:	83 c4 10             	add    esp,0x10
c001d17c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d17f:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d184:	7f 22                	jg     c001d1a8 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d186:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d189:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d18c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d190:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d194:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d197:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d19a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1a0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d1a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1a6:	eb 28                	jmp    c001d1d0 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d1a8:	83 ec 0c             	sub    esp,0xc
c001d1ab:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1b5:	57                   	push   edi
c001d1b6:	56                   	push   esi
c001d1b7:	50                   	push   eax
c001d1b8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d1bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1bf:	83 c4 20             	add    esp,0x20
c001d1c2:	e8 21 7e 00 00       	call   c0024fe8 <KeRestorePreemption()>
c001d1c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1cb:	eb 0b                	jmp    c001d1d8 <VCache::write(unsigned long long, int, void*)+0xec>
c001d1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d0:	e8 13 7e 00 00       	call   c0024fe8 <KeRestorePreemption()>
c001d1d5:	31 c0                	xor    eax,eax
c001d1d7:	90                   	nop
c001d1d8:	83 c4 1c             	add    esp,0x1c
c001d1db:	5b                   	pop    ebx
c001d1dc:	5e                   	pop    esi
c001d1dd:	5f                   	pop    edi
c001d1de:	5d                   	pop    ebp
c001d1df:	c3                   	ret    

c001d1e0 <VCache::read(unsigned long long, int, void*)>:
c001d1e0:	55                   	push   ebp
c001d1e1:	57                   	push   edi
c001d1e2:	56                   	push   esi
c001d1e3:	53                   	push   ebx
c001d1e4:	83 ec 1c             	sub    esp,0x1c
c001d1e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d1f3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d1f7:	e8 c4 7d 00 00       	call   c0024fc0 <KeDisablePreemption()>
c001d1fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d200:	74 0e                	je     c001d210 <VCache::read(unsigned long long, int, void*)+0x30>
c001d202:	83 ec 0c             	sub    esp,0xc
c001d205:	53                   	push   ebx
c001d206:	e8 15 fe ff ff       	call   c001d020 <VCache::writeWriteBuffer()>
c001d20b:	83 c4 10             	add    esp,0x10
c001d20e:	66 90                	xchg   ax,ax
c001d210:	83 fd 01             	cmp    ebp,0x1
c001d213:	0f 85 97 00 00 00    	jne    c001d2b0 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d219:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d21c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d220:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d227:	0f 85 83 00 00 00    	jne    c001d2b0 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d22d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d230:	89 e9                	mov    ecx,ebp
c001d232:	f7 d9                	neg    ecx
c001d234:	89 c8                	mov    eax,ecx
c001d236:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d23a:	c1 f8 1f             	sar    eax,0x1f
c001d23d:	21 f1                	and    ecx,esi
c001d23f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d243:	89 c8                	mov    eax,ecx
c001d245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d249:	21 f9                	and    ecx,edi
c001d24b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d24f:	89 ca                	mov    edx,ecx
c001d251:	74 31                	je     c001d284 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d253:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d256:	75 2c                	jne    c001d284 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d258:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d25b:	75 27                	jne    c001d284 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d25d:	8d 76 00             	lea    esi,[esi+0x0]
c001d260:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d263:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d267:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d26d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d270:	48                   	dec    eax
c001d271:	21 c6                	and    esi,eax
c001d273:	0f af f1             	imul   esi,ecx
c001d276:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d279:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d27b:	e8 68 7d 00 00       	call   c0024fe8 <KeRestorePreemption()>
c001d280:	31 c0                	xor    eax,eax
c001d282:	eb 58                	jmp    c001d2dc <VCache::read(unsigned long long, int, void*)+0xfc>
c001d284:	83 ec 0c             	sub    esp,0xc
c001d287:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d28b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d28f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d292:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d295:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d297:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d29a:	55                   	push   ebp
c001d29b:	52                   	push   edx
c001d29c:	50                   	push   eax
c001d29d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2a1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d2a4:	83 c4 20             	add    esp,0x20
c001d2a7:	85 c0                	test   eax,eax
c001d2a9:	75 31                	jne    c001d2dc <VCache::read(unsigned long long, int, void*)+0xfc>
c001d2ab:	eb b3                	jmp    c001d260 <VCache::read(unsigned long long, int, void*)+0x80>
c001d2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b0:	83 ec 0c             	sub    esp,0xc
c001d2b3:	53                   	push   ebx
c001d2b4:	e8 57 fd ff ff       	call   c001d010 <VCache::invalidateReadBuffer()>
c001d2b9:	5a                   	pop    edx
c001d2ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2bd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2c3:	55                   	push   ebp
c001d2c4:	57                   	push   edi
c001d2c5:	56                   	push   esi
c001d2c6:	50                   	push   eax
c001d2c7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d2ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2ce:	83 c4 20             	add    esp,0x20
c001d2d1:	e8 12 7d 00 00       	call   c0024fe8 <KeRestorePreemption()>
c001d2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2da:	66 90                	xchg   ax,ax
c001d2dc:	83 c4 1c             	add    esp,0x1c
c001d2df:	5b                   	pop    ebx
c001d2e0:	5e                   	pop    esi
c001d2e1:	5f                   	pop    edi
c001d2e2:	5d                   	pop    ebp
c001d2e3:	c3                   	ret    

c001d2e4 <Video::putrect(int, int, int, int, unsigned int)>:
c001d2e4:	55                   	push   ebp
c001d2e5:	57                   	push   edi
c001d2e6:	56                   	push   esi
c001d2e7:	53                   	push   ebx
c001d2e8:	83 ec 1c             	sub    esp,0x1c
c001d2eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2f3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d2f7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d2fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d303:	01 df                	add    edi,ebx
c001d305:	39 fb                	cmp    ebx,edi
c001d307:	7d 1f                	jge    c001d328 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d309:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d30d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d311:	7d 12                	jge    c001d325 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d313:	8b 16                	mov    edx,DWORD PTR [esi]
c001d315:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d319:	53                   	push   ebx
c001d31a:	55                   	push   ebp
c001d31b:	45                   	inc    ebp
c001d31c:	56                   	push   esi
c001d31d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d320:	83 c4 10             	add    esp,0x10
c001d323:	eb e8                	jmp    c001d30d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d325:	43                   	inc    ebx
c001d326:	eb dd                	jmp    c001d305 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d328:	83 c4 1c             	add    esp,0x1c
c001d32b:	5b                   	pop    ebx
c001d32c:	5e                   	pop    esi
c001d32d:	5f                   	pop    edi
c001d32e:	5d                   	pop    ebp
c001d32f:	c3                   	ret    

c001d330 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d330:	55                   	push   ebp
c001d331:	57                   	push   edi
c001d332:	31 ff                	xor    edi,edi
c001d334:	56                   	push   esi
c001d335:	53                   	push   ebx
c001d336:	83 ec 1c             	sub    esp,0x1c
c001d339:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d33d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d341:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d348:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d34d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d351:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d355:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d359:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d35c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d360:	01 f9                	add    ecx,edi
c001d362:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d366:	7d 2f                	jge    c001d397 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d368:	31 f6                	xor    esi,esi
c001d36a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d36e:	01 f2                	add    edx,esi
c001d370:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d374:	7d 1a                	jge    c001d390 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d376:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d379:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d37c:	46                   	inc    esi
c001d37d:	51                   	push   ecx
c001d37e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d382:	52                   	push   edx
c001d383:	55                   	push   ebp
c001d384:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d387:	83 c4 10             	add    esp,0x10
c001d38a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d38e:	eb da                	jmp    c001d36a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d390:	47                   	inc    edi
c001d391:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d395:	eb c5                	jmp    c001d35c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d397:	83 c4 1c             	add    esp,0x1c
c001d39a:	5b                   	pop    ebx
c001d39b:	5e                   	pop    esi
c001d39c:	5f                   	pop    edi
c001d39d:	5d                   	pop    ebp
c001d39e:	c3                   	ret    
c001d39f:	90                   	nop

c001d3a0 <Video::blit(unsigned int*, int, int, int, int)>:
c001d3a0:	55                   	push   ebp
c001d3a1:	57                   	push   edi
c001d3a2:	56                   	push   esi
c001d3a3:	53                   	push   ebx
c001d3a4:	83 ec 1c             	sub    esp,0x1c
c001d3a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d3ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3af:	85 c0                	test   eax,eax
c001d3b1:	79 02                	jns    c001d3b5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d3b3:	31 c0                	xor    eax,eax
c001d3b5:	c1 e0 02             	shl    eax,0x2
c001d3b8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d3bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d3c4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d3c8:	39 d8                	cmp    eax,ebx
c001d3ca:	7e 49                	jle    c001d415 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3cc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3d2:	7c 41                	jl     c001d415 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3d4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3dc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d3e0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d3e4:	39 f9                	cmp    ecx,edi
c001d3e6:	7e 22                	jle    c001d40a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d3e8:	83 c5 04             	add    ebp,0x4
c001d3eb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d3f1:	7c 14                	jl     c001d407 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d3f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d3f5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d3f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d3fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d400:	56                   	push   esi
c001d401:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	47                   	inc    edi
c001d408:	eb d2                	jmp    c001d3dc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d40a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d40e:	43                   	inc    ebx
c001d40f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d413:	eb ab                	jmp    c001d3c0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d415:	83 c4 1c             	add    esp,0x1c
c001d418:	5b                   	pop    ebx
c001d419:	5e                   	pop    esi
c001d41a:	5f                   	pop    edi
c001d41b:	5d                   	pop    ebp
c001d41c:	c3                   	ret    
c001d41d:	90                   	nop

c001d41e <Video::clearScreen(unsigned int)>:
c001d41e:	57                   	push   edi
c001d41f:	56                   	push   esi
c001d420:	53                   	push   ebx
c001d421:	31 db                	xor    ebx,ebx
c001d423:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d427:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d42d:	7e 1f                	jle    c001d44e <Video::clearScreen(unsigned int)+0x30>
c001d42f:	31 ff                	xor    edi,edi
c001d431:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d437:	7e 12                	jle    c001d44b <Video::clearScreen(unsigned int)+0x2d>
c001d439:	8b 06                	mov    eax,DWORD PTR [esi]
c001d43b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d43f:	53                   	push   ebx
c001d440:	57                   	push   edi
c001d441:	47                   	inc    edi
c001d442:	56                   	push   esi
c001d443:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	eb e6                	jmp    c001d431 <Video::clearScreen(unsigned int)+0x13>
c001d44b:	43                   	inc    ebx
c001d44c:	eb d9                	jmp    c001d427 <Video::clearScreen(unsigned int)+0x9>
c001d44e:	5b                   	pop    ebx
c001d44f:	5e                   	pop    esi
c001d450:	5f                   	pop    edi
c001d451:	c3                   	ret    

c001d452 <Video::putpixel(int, int, unsigned int)>:
c001d452:	c7 44 24 04 74 22 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032274
c001d45a:	e9 03 2e 00 00       	jmp    c0020262 <KePanic(char const*)>
c001d45f:	90                   	nop

c001d460 <Video::readPixelApprox(int, int)>:
c001d460:	83 ec 18             	sub    esp,0x18
c001d463:	68 95 22 03 c0       	push   0xc0032295
c001d468:	e8 f5 2d 00 00       	call   c0020262 <KePanic(char const*)>
c001d46d:	31 c0                	xor    eax,eax
c001d46f:	83 c4 1c             	add    esp,0x1c
c001d472:	c3                   	ret    
c001d473:	90                   	nop

c001d474 <Video::Video(char const*)>:
c001d474:	83 ec 0c             	sub    esp,0xc
c001d477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47b:	83 ec 08             	sub    esp,0x8
c001d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d482:	50                   	push   eax
c001d483:	e8 a4 df ff ff       	call   c001b42c <Device::Device(char const*)>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	ba 38 23 03 c0       	mov    edx,0xc0032338
c001d490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d494:	89 10                	mov    DWORD PTR [eax],edx
c001d496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d4a4:	90                   	nop
c001d4a5:	83 c4 0c             	add    esp,0xc
c001d4a8:	c3                   	ret    
c001d4a9:	90                   	nop

c001d4aa <Video::~Video()>:
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	ba 38 23 03 c0       	mov    edx,0xc0032338
c001d4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b6:	89 10                	mov    DWORD PTR [eax],edx
c001d4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	50                   	push   eax
c001d4c0:	e8 07 dd ff ff       	call   c001b1cc <Device::~Device()>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	90                   	nop
c001d4c9:	83 c4 0c             	add    esp,0xc
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <Video::~Video()>:
c001d4ce:	83 ec 0c             	sub    esp,0xc
c001d4d1:	83 ec 0c             	sub    esp,0xc
c001d4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d8:	e8 cd ff ff ff       	call   c001d4aa <Video::~Video()>
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	83 ec 08             	sub    esp,0x8
c001d4e3:	68 64 01 00 00       	push   0x164
c001d4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ec:	e8 2b bc ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	83 c4 0c             	add    esp,0xc
c001d4f7:	c3                   	ret    

c001d4f8 <Video::isMonochrome()>:
c001d4f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4fc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d502:	c3                   	ret    
c001d503:	90                   	nop

c001d504 <Video::getWidth()>:
c001d504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d508:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d50e:	c3                   	ret    
c001d50f:	90                   	nop

c001d510 <Video::getHeight()>:
c001d510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d514:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d51a:	c3                   	ret    
c001d51b:	90                   	nop

c001d51c <Video::drawCursor(int, int, unsigned int*, int)>:
c001d51c:	55                   	push   ebp
c001d51d:	57                   	push   edi
c001d51e:	56                   	push   esi
c001d51f:	53                   	push   ebx
c001d520:	83 ec 2c             	sub    esp,0x2c
c001d523:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d527:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d52b:	83 f8 01             	cmp    eax,0x1
c001d52e:	19 c9                	sbb    ecx,ecx
c001d530:	31 db                	xor    ebx,ebx
c001d532:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d536:	89 cd                	mov    ebp,ecx
c001d538:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d540:	f7 d5                	not    ebp
c001d542:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d548:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d54c:	01 d8                	add    eax,ebx
c001d54e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d552:	56                   	push   esi
c001d553:	e8 b8 ff ff ff       	call   c001d510 <Video::getHeight()>
c001d558:	59                   	pop    ecx
c001d559:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d55d:	7e 70                	jle    c001d5cf <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d55f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d563:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d567:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d56a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d56e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d572:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d579:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d57d:	89 f8                	mov    eax,edi
c001d57f:	83 c0 20             	add    eax,0x20
c001d582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d586:	56                   	push   esi
c001d587:	e8 78 ff ff ff       	call   c001d504 <Video::getWidth()>
c001d58c:	5a                   	pop    edx
c001d58d:	39 c7                	cmp    edi,eax
c001d58f:	7d 34                	jge    c001d5c5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d591:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d596:	74 05                	je     c001d59d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d598:	8b 06                	mov    eax,DWORD PTR [esi]
c001d59a:	55                   	push   ebp
c001d59b:	eb 0d                	jmp    c001d5aa <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d59d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d5a2:	74 12                	je     c001d5b6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d5a4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5ae:	57                   	push   edi
c001d5af:	56                   	push   esi
c001d5b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d5ba:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d5be:	47                   	inc    edi
c001d5bf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d5c3:	75 c1                	jne    c001d586 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d5c5:	43                   	inc    ebx
c001d5c6:	83 fb 20             	cmp    ebx,0x20
c001d5c9:	0f 85 79 ff ff ff    	jne    c001d548 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d5cf:	83 c4 2c             	add    esp,0x2c
c001d5d2:	5b                   	pop    ebx
c001d5d3:	5e                   	pop    esi
c001d5d4:	5f                   	pop    edi
c001d5d5:	5d                   	pop    ebp
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d5d8:	55                   	push   ebp
c001d5d9:	57                   	push   edi
c001d5da:	56                   	push   esi
c001d5db:	53                   	push   ebx
c001d5dc:	83 ec 48             	sub    esp,0x48
c001d5df:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d5e3:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d5e7:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d5eb:	c1 e0 08             	shl    eax,0x8
c001d5ee:	01 d0                	add    eax,edx
c001d5f0:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d5f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5f8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d5fc:	c1 e0 08             	shl    eax,0x8
c001d5ff:	01 d0                	add    eax,edx
c001d601:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d605:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d609:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d60e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d616:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d61d:	50                   	push   eax
c001d61e:	e8 97 8d ff ff       	call   c00163ba <malloc>
c001d623:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d627:	83 c4 10             	add    esp,0x10
c001d62a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d62f:	75 10                	jne    c001d641 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d631:	83 ec 0c             	sub    esp,0xc
c001d634:	68 c0 22 03 c0       	push   0xc00322c0
c001d639:	e8 24 2c 00 00       	call   c0020262 <KePanic(char const*)>
c001d63e:	83 c4 10             	add    esp,0x10
c001d641:	51                   	push   ecx
c001d642:	51                   	push   ecx
c001d643:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d647:	50                   	push   eax
c001d648:	68 d0 22 03 c0       	push   0xc00322d0
c001d64d:	e8 f7 bb ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001d652:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d655:	83 e0 20             	and    eax,0x20
c001d658:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d65c:	85 c0                	test   eax,eax
c001d65e:	5e                   	pop    esi
c001d65f:	0f 94 c0             	sete   al
c001d662:	5f                   	pop    edi
c001d663:	0f b6 c0             	movzx  eax,al
c001d666:	be 12 00 00 00       	mov    esi,0x12
c001d66b:	50                   	push   eax
c001d66c:	68 da 22 03 c0       	push   0xc00322da
c001d671:	e8 d3 bb ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001d676:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d67a:	83 c4 10             	add    esp,0x10
c001d67d:	89 d0                	mov    eax,edx
c001d67f:	85 d2                	test   edx,edx
c001d681:	74 11                	je     c001d694 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d683:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d687:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d68b:	c1 fe 03             	sar    esi,0x3
c001d68e:	0f af f1             	imul   esi,ecx
c001d691:	83 c6 12             	add    esi,0x12
c001d694:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d699:	74 07                	je     c001d6a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d69b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d6a0:	75 12                	jne    c001d6b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d6a2:	83 ec 0c             	sub    esp,0xc
c001d6a5:	68 e8 22 03 c0       	push   0xc00322e8
c001d6aa:	e8 9a bb ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001d6af:	e9 a0 02 00 00       	jmp    c001d954 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d6b4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d6b8:	83 f9 02             	cmp    ecx,0x2
c001d6bb:	74 0e                	je     c001d6cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d6bd:	83 f9 0a             	cmp    ecx,0xa
c001d6c0:	0f 84 c8 00 00 00    	je     c001d78e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d6c6:	e9 72 02 00 00       	jmp    c001d93d <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d6cb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6d0:	75 0e                	jne    c001d6e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6d2:	84 c0                	test   al,al
c001d6d4:	75 0a                	jne    c001d6e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6d9:	83 e8 18             	sub    eax,0x18
c001d6dc:	a8 f7                	test   al,0xf7
c001d6de:	74 0d                	je     c001d6ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d6e0:	83 ec 0c             	sub    esp,0xc
c001d6e3:	68 fd 22 03 c0       	push   0xc00322fd
c001d6e8:	e9 58 02 00 00       	jmp    c001d945 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d6ed:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d6f2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6fa:	31 c0                	xor    eax,eax
c001d6fc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d700:	89 c7                	mov    edi,eax
c001d702:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d70a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d70f:	75 15                	jne    c001d726 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d711:	99                   	cdq    
c001d712:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d716:	85 d2                	test   edx,edx
c001d718:	75 0c                	jne    c001d726 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d71a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d71e:	29 c7                	sub    edi,eax
c001d720:	4f                   	dec    edi
c001d721:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d726:	31 d2                	xor    edx,edx
c001d728:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d72c:	75 08                	jne    c001d736 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d72e:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d733:	c1 e2 18             	shl    edx,0x18
c001d736:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d73b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d73f:	c1 e1 10             	shl    ecx,0x10
c001d742:	8d 47 01             	lea    eax,[edi+0x1]
c001d745:	89 cd                	mov    ebp,ecx
c001d747:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d74c:	c1 e1 08             	shl    ecx,0x8
c001d74f:	09 e9                	or     ecx,ebp
c001d751:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d755:	09 e9                	or     ecx,ebp
c001d757:	09 d1                	or     ecx,edx
c001d759:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d75d:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d760:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d764:	c1 fa 03             	sar    edx,0x3
c001d767:	01 d6                	add    esi,edx
c001d769:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d76d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d771:	7e 04                	jle    c001d777 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d773:	89 c7                	mov    edi,eax
c001d775:	eb 93                	jmp    c001d70a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d777:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d77b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d77f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d783:	0f 8f 77 ff ff ff    	jg     c001d700 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d789:	e9 d3 01 00 00       	jmp    c001d961 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d78e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d793:	75 0e                	jne    c001d7a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d795:	85 d2                	test   edx,edx
c001d797:	75 0a                	jne    c001d7a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d799:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d79c:	83 e8 18             	sub    eax,0x18
c001d79f:	a8 f7                	test   al,0xf7
c001d7a1:	74 0d                	je     c001d7b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d7a3:	83 ec 0c             	sub    esp,0xc
c001d7a6:	68 0b 23 03 c0       	push   0xc003230b
c001d7ab:	e9 95 01 00 00       	jmp    c001d945 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d7b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7c0:	31 c9                	xor    ecx,ecx
c001d7c2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d7c6:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d7ca:	0f 8e 91 01 00 00    	jle    c001d961 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7d0:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d7d4:	0f 8d 87 01 00 00    	jge    c001d961 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7da:	8d 46 01             	lea    eax,[esi+0x1]
c001d7dd:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d7e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7e5:	83 fd 7f             	cmp    ebp,0x7f
c001d7e8:	89 e8                	mov    eax,ebp
c001d7ea:	0f 8e 9d 00 00 00    	jle    c001d88d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d7f0:	83 e0 7f             	and    eax,0x7f
c001d7f3:	31 d2                	xor    edx,edx
c001d7f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d7f9:	40                   	inc    eax
c001d7fa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d802:	75 0a                	jne    c001d80e <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d804:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001d809:	89 ea                	mov    edx,ebp
c001d80b:	c1 e2 18             	shl    edx,0x18
c001d80e:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001d813:	c1 e0 10             	shl    eax,0x10
c001d816:	89 c7                	mov    edi,eax
c001d818:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d81d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d821:	c1 e0 08             	shl    eax,0x8
c001d824:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d828:	09 f8                	or     eax,edi
c001d82a:	31 f6                	xor    esi,esi
c001d82c:	09 c5                	or     ebp,eax
c001d82e:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001d833:	09 d5                	or     ebp,edx
c001d835:	85 ff                	test   edi,edi
c001d837:	75 1d                	jne    c001d856 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d839:	89 c8                	mov    eax,ecx
c001d83b:	99                   	cdq    
c001d83c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d840:	85 d2                	test   edx,edx
c001d842:	75 12                	jne    c001d856 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d844:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d848:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d84c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d850:	49                   	dec    ecx
c001d851:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d85a:	8d 51 01             	lea    edx,[ecx+0x1]
c001d85d:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001d860:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001d864:	8d 46 01             	lea    eax,[esi+0x1]
c001d867:	7e 06                	jle    c001d86f <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d869:	89 c6                	mov    esi,eax
c001d86b:	89 d1                	mov    ecx,edx
c001d86d:	eb c6                	jmp    c001d835 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001d86f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d873:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d877:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d87b:	c1 f8 03             	sar    eax,0x3
c001d87e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d882:	89 d1                	mov    ecx,edx
c001d884:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d888:	e9 35 ff ff ff       	jmp    c001d7c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001d88d:	8d 45 01             	lea    eax,[ebp+0x1]
c001d890:	31 f6                	xor    esi,esi
c001d892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d896:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001d89b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d89f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d8a4:	75 1d                	jne    c001d8c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8a6:	89 c8                	mov    eax,ecx
c001d8a8:	99                   	cdq    
c001d8a9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d8ad:	85 d2                	test   edx,edx
c001d8af:	75 12                	jne    c001d8c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8b5:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d8b9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d8bd:	49                   	dec    ecx
c001d8be:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d8c3:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d8cb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8cf:	75 10                	jne    c001d8e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001d8d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8d5:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d8da:	c1 e7 18             	shl    edi,0x18
c001d8dd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d8e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8e5:	8d 51 01             	lea    edx,[ecx+0x1]
c001d8e8:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001d8ed:	c1 e0 10             	shl    eax,0x10
c001d8f0:	89 c7                	mov    edi,eax
c001d8f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8f6:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001d8fb:	c1 e0 08             	shl    eax,0x8
c001d8fe:	09 f8                	or     eax,edi
c001d900:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d904:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001d908:	09 f8                	or     eax,edi
c001d90a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001d90e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d912:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001d915:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d919:	c1 f8 03             	sar    eax,0x3
c001d91c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d920:	8d 46 01             	lea    eax,[esi+0x1]
c001d923:	39 f5                	cmp    ebp,esi
c001d925:	7e 09                	jle    c001d930 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001d927:	89 c6                	mov    esi,eax
c001d929:	89 d1                	mov    ecx,edx
c001d92b:	e9 6f ff ff ff       	jmp    c001d89f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001d930:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d934:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d938:	e9 45 ff ff ff       	jmp    c001d882 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001d93d:	52                   	push   edx
c001d93e:	52                   	push   edx
c001d93f:	51                   	push   ecx
c001d940:	68 1a 23 03 c0       	push   0xc003231a
c001d945:	e8 ff b8 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001d94a:	58                   	pop    eax
c001d94b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d94f:	e8 76 8a ff ff       	call   c00163ca <free>
c001d954:	83 c4 10             	add    esp,0x10
c001d957:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d95f:	eb 14                	jmp    c001d975 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001d961:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d965:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d969:	89 18                	mov    DWORD PTR [eax],ebx
c001d96b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d96f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d973:	89 18                	mov    DWORD PTR [eax],ebx
c001d975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d979:	83 c4 3c             	add    esp,0x3c
c001d97c:	5b                   	pop    ebx
c001d97d:	5e                   	pop    esi
c001d97e:	5f                   	pop    edi
c001d97f:	5d                   	pop    ebp
c001d980:	c3                   	ret    
c001d981:	90                   	nop

c001d982 <Video::putTGA(int, int, unsigned char*, int)>:
c001d982:	55                   	push   ebp
c001d983:	57                   	push   edi
c001d984:	56                   	push   esi
c001d985:	53                   	push   ebx
c001d986:	83 ec 28             	sub    esp,0x28
c001d989:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d98d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d991:	50                   	push   eax
c001d992:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d996:	50                   	push   eax
c001d997:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d99b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d99f:	57                   	push   edi
c001d9a0:	e8 33 fc ff ff       	call   c001d5d8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d9a5:	83 c4 20             	add    esp,0x20
c001d9a8:	85 c0                	test   eax,eax
c001d9aa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d9ae:	74 3a                	je     c001d9ea <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9b0:	89 c6                	mov    esi,eax
c001d9b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9b6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d9ba:	39 d8                	cmp    eax,ebx
c001d9bc:	7e 2c                	jle    c001d9ea <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d9c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9c6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9ca:	39 e8                	cmp    eax,ebp
c001d9cc:	7e 19                	jle    c001d9e7 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001d9ce:	83 c6 04             	add    esi,0x4
c001d9d1:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d9d4:	85 c0                	test   eax,eax
c001d9d6:	79 0c                	jns    c001d9e4 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001d9d8:	8b 17                	mov    edx,DWORD PTR [edi]
c001d9da:	50                   	push   eax
c001d9db:	53                   	push   ebx
c001d9dc:	55                   	push   ebp
c001d9dd:	57                   	push   edi
c001d9de:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d9e1:	83 c4 10             	add    esp,0x10
c001d9e4:	45                   	inc    ebp
c001d9e5:	eb db                	jmp    c001d9c2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d9e7:	43                   	inc    ebx
c001d9e8:	eb c8                	jmp    c001d9b2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d9ea:	83 c4 1c             	add    esp,0x1c
c001d9ed:	5b                   	pop    ebx
c001d9ee:	5e                   	pop    esi
c001d9ef:	5f                   	pop    edi
c001d9f0:	5d                   	pop    ebp
c001d9f1:	c3                   	ret    
c001d9f2:	66 90                	xchg   ax,ax

c001d9f4 <ACPI::close(int, int, void*)>:
c001d9f4:	83 ec 1c             	sub    esp,0x1c
c001d9f7:	83 ec 0c             	sub    esp,0xc
c001d9fa:	68 7c 23 03 c0       	push   0xc003237c
c001d9ff:	e8 45 b8 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001da04:	83 c4 10             	add    esp,0x10
c001da07:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001da0f:	74 1b                	je     c001da2c <ACPI::close(int, int, void*)+0x38>
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	68 8b 23 03 c0       	push   0xc003238b
c001da19:	e8 2b b8 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	b8 00 00 00 00       	mov    eax,0x0
c001da26:	e9 01 01 00 00       	jmp    c001db2c <ACPI::close(int, int, void*)+0x138>
c001da2b:	90                   	nop
c001da2c:	83 ec 0c             	sub    esp,0xc
c001da2f:	68 9c 23 03 c0       	push   0xc003239c
c001da34:	e8 10 b8 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001da41:	75 45                	jne    c001da88 <ACPI::close(int, int, void*)+0x94>
c001da43:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da48:	83 ec 08             	sub    esp,0x8
c001da4b:	50                   	push   eax
c001da4c:	68 ab 23 03 c0       	push   0xc00323ab
c001da51:	e8 f3 b7 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001da56:	83 c4 10             	add    esp,0x10
c001da59:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da5e:	85 c0                	test   eax,eax
c001da60:	74 0a                	je     c001da6c <ACPI::close(int, int, void*)+0x78>
c001da62:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da67:	ff d0                	call   eax
c001da69:	8d 76 00             	lea    esi,[esi+0x0]
c001da6c:	83 ec 0c             	sub    esp,0xc
c001da6f:	68 7c 25 03 c0       	push   0xc003257c
c001da74:	e8 e9 27 00 00       	call   c0020262 <KePanic(char const*)>
c001da79:	83 c4 10             	add    esp,0x10
c001da7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da81:	e9 a6 00 00 00       	jmp    c001db2c <ACPI::close(int, int, void*)+0x138>
c001da86:	66 90                	xchg   ax,ax
c001da88:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001da8d:	0f 85 81 00 00 00    	jne    c001db14 <ACPI::close(int, int, void*)+0x120>
c001da93:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da98:	83 ec 08             	sub    esp,0x8
c001da9b:	50                   	push   eax
c001da9c:	68 c9 23 03 c0       	push   0xc00323c9
c001daa1:	e8 a3 b7 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001daae:	85 c0                	test   eax,eax
c001dab0:	74 0a                	je     c001dabc <ACPI::close(int, int, void*)+0xc8>
c001dab2:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dab7:	ff d0                	call   eax
c001dab9:	8d 76 00             	lea    esi,[esi+0x0]
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	68 e4 23 03 c0       	push   0xc00323e4
c001dac4:	e8 80 b7 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001dac9:	83 c4 10             	add    esp,0x10
c001dacc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dad1:	8d 76 00             	lea    esi,[esi+0x0]
c001dad4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dad9:	83 e0 02             	and    eax,0x2
c001dadc:	74 1e                	je     c001dafc <ACPI::close(int, int, void*)+0x108>
c001dade:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dae5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dae9:	89 c2                	mov    edx,eax
c001daeb:	ec                   	in     al,dx
c001daec:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001daf0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001daf4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daf8:	eb da                	jmp    c001dad4 <ACPI::close(int, int, void*)+0xe0>
c001dafa:	66 90                	xchg   ax,ax
c001dafc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001db03:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001db08:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001db0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db10:	ee                   	out    dx,al
c001db11:	8d 76 00             	lea    esi,[esi+0x0]
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	68 f6 23 03 c0       	push   0xc00323f6
c001db1c:	e8 28 b7 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db29:	8d 76 00             	lea    esi,[esi+0x0]
c001db2c:	83 c4 1c             	add    esp,0x1c
c001db2f:	c3                   	ret    

c001db30 <findRSDP()>:
c001db30:	83 ec 1c             	sub    esp,0x1c
c001db33:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db38:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db3e:	83 e0 04             	and    eax,0x4
c001db41:	0f b6 c0             	movzx  eax,al
c001db44:	85 c0                	test   eax,eax
c001db46:	75 08                	jne    c001db50 <findRSDP()+0x20>
c001db48:	b8 00 00 00 00       	mov    eax,0x0
c001db4d:	eb 75                	jmp    c001dbc4 <findRSDP()+0x94>
c001db4f:	90                   	nop
c001db50:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001db55:	3d ff 07 00 00       	cmp    eax,0x7ff
c001db5a:	7f 1c                	jg     c001db78 <findRSDP()+0x48>
c001db5c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db61:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001db67:	83 e2 fb             	and    edx,0xfffffffb
c001db6a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001db70:	b8 00 00 00 00       	mov    eax,0x0
c001db75:	eb 4d                	jmp    c001dbc4 <findRSDP()+0x94>
c001db77:	90                   	nop
c001db78:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001db80:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001db88:	77 32                	ja     c001dbbc <findRSDP()+0x8c>
c001db8a:	83 ec 04             	sub    esp,0x4
c001db8d:	6a 08                	push   0x8
c001db8f:	68 05 24 03 c0       	push   0xc0032405
c001db94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db98:	e8 e3 27 fe ff       	call   c0000380 <memcmp>
c001db9d:	83 c4 10             	add    esp,0x10
c001dba0:	85 c0                	test   eax,eax
c001dba2:	0f 94 c0             	sete   al
c001dba5:	0f b6 c0             	movzx  eax,al
c001dba8:	85 c0                	test   eax,eax
c001dbaa:	74 08                	je     c001dbb4 <findRSDP()+0x84>
c001dbac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbb0:	eb 12                	jmp    c001dbc4 <findRSDP()+0x94>
c001dbb2:	66 90                	xchg   ax,ax
c001dbb4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dbb9:	eb c5                	jmp    c001db80 <findRSDP()+0x50>
c001dbbb:	90                   	nop
c001dbbc:	b8 00 00 00 00       	mov    eax,0x0
c001dbc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc4:	83 c4 1c             	add    esp,0x1c
c001dbc7:	c3                   	ret    

c001dbc8 <loadACPITables(unsigned char*)>:
c001dbc8:	57                   	push   edi
c001dbc9:	56                   	push   esi
c001dbca:	53                   	push   ebx
c001dbcb:	83 ec 60             	sub    esp,0x60
c001dbce:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbd3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbd9:	83 e0 04             	and    eax,0x4
c001dbdc:	0f b6 c0             	movzx  eax,al
c001dbdf:	85 c0                	test   eax,eax
c001dbe1:	0f 84 41 02 00 00    	je     c001de28 <loadACPITables(unsigned char*)+0x260>
c001dbe7:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dbec:	0f b6 c0             	movzx  eax,al
c001dbef:	85 c0                	test   eax,eax
c001dbf1:	74 79                	je     c001dc6c <loadACPITables(unsigned char*)+0xa4>
c001dbf3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbf7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dbfb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dbff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc02:	83 e8 24             	sub    eax,0x24
c001dc05:	c1 e8 03             	shr    eax,0x3
c001dc08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc0c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dc14:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc18:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dc1c:	0f 8d ba 00 00 00    	jge    c001dcdc <loadACPITables(unsigned char*)+0x114>
c001dc22:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc26:	83 c0 24             	add    eax,0x24
c001dc29:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dc2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc31:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc39:	c1 e0 03             	shl    eax,0x3
c001dc3c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dc40:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc47:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc49:	89 c1                	mov    ecx,eax
c001dc4b:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc50:	8d 50 01             	lea    edx,[eax+0x1]
c001dc53:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc59:	89 ca                	mov    edx,ecx
c001dc5b:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc62:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dc67:	eb ab                	jmp    c001dc14 <loadACPITables(unsigned char*)+0x4c>
c001dc69:	8d 76 00             	lea    esi,[esi+0x0]
c001dc6c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc70:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dc74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dc78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc7b:	83 e8 24             	sub    eax,0x24
c001dc7e:	c1 e8 02             	shr    eax,0x2
c001dc81:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc85:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dc8d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dc94:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dc98:	7d 42                	jge    c001dcdc <loadACPITables(unsigned char*)+0x114>
c001dc9a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc9e:	83 c0 24             	add    eax,0x24
c001dca1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dca5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dca9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dcad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dcb1:	c1 e0 02             	shl    eax,0x2
c001dcb4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dcb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcbe:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcc3:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc6:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dccc:	89 ca                	mov    edx,ecx
c001dcce:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dcd5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dcda:	eb b4                	jmp    c001dc90 <loadACPITables(unsigned char*)+0xc8>
c001dcdc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dce4:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dce9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dced:	0f 8d 39 01 00 00    	jge    c001de2c <loadACPITables(unsigned char*)+0x264>
c001dcf3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcf7:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dcfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dd0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0e:	25 ff 0f 00 00       	and    eax,0xfff
c001dd13:	89 c6                	mov    esi,eax
c001dd15:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	6a 01                	push   0x1
c001dd20:	e8 ec a1 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c001dd25:	83 c4 10             	add    esp,0x10
c001dd28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd2c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd32:	83 ec 0c             	sub    esp,0xc
c001dd35:	6a 01                	push   0x1
c001dd37:	6a 01                	push   0x1
c001dd39:	50                   	push   eax
c001dd3a:	52                   	push   edx
c001dd3b:	53                   	push   ebx
c001dd3c:	e8 dd aa ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd41:	83 c4 20             	add    esp,0x20
c001dd44:	09 f0                	or     eax,esi
c001dd46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd4a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd4e:	c1 e0 03             	shl    eax,0x3
c001dd51:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dd56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd62:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dd6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dd7e:	89 c6                	mov    esi,eax
c001dd80:	89 d7                	mov    edi,edx
c001dd82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd84:	89 c8                	mov    eax,ecx
c001dd86:	89 fa                	mov    edx,edi
c001dd88:	89 f3                	mov    ebx,esi
c001dd8a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dd8e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dda1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dda5:	05 00 10 00 00       	add    eax,0x1000
c001ddaa:	c1 e8 0c             	shr    eax,0xc
c001ddad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbd:	25 ff 0f 00 00       	and    eax,0xfff
c001ddc2:	89 c6                	mov    esi,eax
c001ddc4:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddd1:	e8 3b a1 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c001ddd6:	83 c4 10             	add    esp,0x10
c001ddd9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dddd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dde3:	83 ec 0c             	sub    esp,0xc
c001dde6:	6a 01                	push   0x1
c001dde8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ddec:	50                   	push   eax
c001dded:	52                   	push   edx
c001ddee:	53                   	push   ebx
c001ddef:	e8 2a aa ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ddf4:	83 c4 20             	add    esp,0x20
c001ddf7:	09 f0                	or     eax,esi
c001ddf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de01:	83 ec 0c             	sub    esp,0xc
c001de04:	50                   	push   eax
c001de05:	e8 25 a4 ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de15:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de1c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001de21:	e9 be fe ff ff       	jmp    c001dce4 <loadACPITables(unsigned char*)+0x11c>
c001de26:	66 90                	xchg   ax,ax
c001de28:	90                   	nop
c001de29:	8d 76 00             	lea    esi,[esi+0x0]
c001de2c:	83 c4 60             	add    esp,0x60
c001de2f:	5b                   	pop    ebx
c001de30:	5e                   	pop    esi
c001de31:	5f                   	pop    edi
c001de32:	c3                   	ret    
c001de33:	90                   	nop

c001de34 <findRSDT(unsigned char*)>:
c001de34:	57                   	push   edi
c001de35:	56                   	push   esi
c001de36:	53                   	push   ebx
c001de37:	83 ec 50             	sub    esp,0x50
c001de3a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de3f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de45:	83 e0 04             	and    eax,0x4
c001de48:	0f b6 c0             	movzx  eax,al
c001de4b:	85 c0                	test   eax,eax
c001de4d:	75 0d                	jne    c001de5c <findRSDT(unsigned char*)+0x28>
c001de4f:	b8 00 00 00 00       	mov    eax,0x0
c001de54:	e9 2b 01 00 00       	jmp    c001df84 <findRSDT(unsigned char*)+0x150>
c001de59:	8d 76 00             	lea    esi,[esi+0x0]
c001de5c:	89 e0                	mov    eax,esp
c001de5e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de62:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001de66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de6a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001de72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de82:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de86:	89 c6                	mov    esi,eax
c001de88:	89 d7                	mov    edi,edx
c001de8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de8c:	89 c8                	mov    eax,ecx
c001de8e:	89 fa                	mov    edx,edi
c001de90:	89 f3                	mov    ebx,esi
c001de92:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001de96:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001de9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de9e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dea2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001dea6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001deae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deb6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001deba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001debe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dec2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dec6:	25 ff 0f 00 00       	and    eax,0xfff
c001decb:	89 c6                	mov    esi,eax
c001decd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ded3:	83 ec 0c             	sub    esp,0xc
c001ded6:	6a 02                	push   0x2
c001ded8:	e8 34 a0 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dee4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	6a 01                	push   0x1
c001deef:	6a 02                	push   0x2
c001def1:	50                   	push   eax
c001def2:	52                   	push   edx
c001def3:	53                   	push   ebx
c001def4:	e8 25 a9 ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001def9:	83 c4 20             	add    esp,0x20
c001defc:	09 f0                	or     eax,esi
c001defe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df06:	25 ff 0f 00 00       	and    eax,0xfff
c001df0b:	89 c6                	mov    esi,eax
c001df0d:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df13:	83 ec 0c             	sub    esp,0xc
c001df16:	6a 02                	push   0x2
c001df18:	e8 f4 9f ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c001df1d:	83 c4 10             	add    esp,0x10
c001df20:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	6a 01                	push   0x1
c001df2f:	6a 02                	push   0x2
c001df31:	50                   	push   eax
c001df32:	52                   	push   edx
c001df33:	53                   	push   ebx
c001df34:	e8 e5 a8 ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df39:	83 c4 20             	add    esp,0x20
c001df3c:	09 f0                	or     eax,esi
c001df3e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df42:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df47:	85 c0                	test   eax,eax
c001df49:	75 11                	jne    c001df5c <findRSDT(unsigned char*)+0x128>
c001df4b:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001df52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df5a:	eb 24                	jmp    c001df80 <findRSDT(unsigned char*)+0x14c>
c001df5c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df61:	83 f8 02             	cmp    eax,0x2
c001df64:	75 12                	jne    c001df78 <findRSDT(unsigned char*)+0x144>
c001df66:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001df6d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df71:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df75:	eb 09                	jmp    c001df80 <findRSDT(unsigned char*)+0x14c>
c001df77:	90                   	nop
c001df78:	b8 00 00 00 00       	mov    eax,0x0
c001df7d:	eb 05                	jmp    c001df84 <findRSDT(unsigned char*)+0x150>
c001df7f:	90                   	nop
c001df80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df84:	83 c4 50             	add    esp,0x50
c001df87:	5b                   	pop    ebx
c001df88:	5e                   	pop    esi
c001df89:	5f                   	pop    edi
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <findDataTable(unsigned char*, char*)>:
c001df8c:	83 ec 1c             	sub    esp,0x1c
c001df8f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df94:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df9a:	83 e0 04             	and    eax,0x4
c001df9d:	0f b6 c0             	movzx  eax,al
c001dfa0:	85 c0                	test   eax,eax
c001dfa2:	75 08                	jne    c001dfac <findDataTable(unsigned char*, char*)+0x20>
c001dfa4:	b8 00 00 00 00       	mov    eax,0x0
c001dfa9:	eb 5d                	jmp    c001e008 <findDataTable(unsigned char*, char*)+0x7c>
c001dfab:	90                   	nop
c001dfac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dfb4:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfb9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dfbd:	7d 41                	jge    c001e000 <findDataTable(unsigned char*, char*)+0x74>
c001dfbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfc3:	c1 e0 03             	shl    eax,0x3
c001dfc6:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfcb:	83 ec 04             	sub    esp,0x4
c001dfce:	6a 04                	push   0x4
c001dfd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfd4:	50                   	push   eax
c001dfd5:	e8 a6 23 fe ff       	call   c0000380 <memcmp>
c001dfda:	83 c4 10             	add    esp,0x10
c001dfdd:	85 c0                	test   eax,eax
c001dfdf:	0f 94 c0             	sete   al
c001dfe2:	0f b6 c0             	movzx  eax,al
c001dfe5:	85 c0                	test   eax,eax
c001dfe7:	74 0f                	je     c001dff8 <findDataTable(unsigned char*, char*)+0x6c>
c001dfe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfed:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dff4:	eb 12                	jmp    c001e008 <findDataTable(unsigned char*, char*)+0x7c>
c001dff6:	66 90                	xchg   ax,ax
c001dff8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dffd:	eb b5                	jmp    c001dfb4 <findDataTable(unsigned char*, char*)+0x28>
c001dfff:	90                   	nop
c001e000:	b8 00 00 00 00       	mov    eax,0x0
c001e005:	8d 76 00             	lea    esi,[esi+0x0]
c001e008:	83 c4 1c             	add    esp,0x1c
c001e00b:	c3                   	ret    

c001e00c <scanMADT()>:
c001e00c:	53                   	push   ebx
c001e00d:	83 ec 38             	sub    esp,0x38
c001e010:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e015:	25 00 04 00 00       	and    eax,0x400
c001e01a:	74 14                	je     c001e030 <scanMADT()+0x24>
c001e01c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e021:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e027:	83 e2 fb             	and    edx,0xfffffffb
c001e02a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e030:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e035:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e03b:	83 e0 04             	and    eax,0x4
c001e03e:	0f b6 c0             	movzx  eax,al
c001e041:	85 c0                	test   eax,eax
c001e043:	0f 84 6b 04 00 00    	je     c001e4b4 <scanMADT()+0x4a8>
c001e049:	e8 e2 fa ff ff       	call   c001db30 <findRSDP()>
c001e04e:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e053:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e058:	85 c0                	test   eax,eax
c001e05a:	75 1c                	jne    c001e078 <scanMADT()+0x6c>
c001e05c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e061:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e067:	83 e2 fb             	and    edx,0xfffffffb
c001e06a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e070:	e9 47 04 00 00       	jmp    c001e4bc <scanMADT()+0x4b0>
c001e075:	8d 76 00             	lea    esi,[esi+0x0]
c001e078:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e07d:	83 ec 0c             	sub    esp,0xc
c001e080:	50                   	push   eax
c001e081:	e8 ae fd ff ff       	call   c001de34 <findRSDT(unsigned char*)>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e08e:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e093:	85 c0                	test   eax,eax
c001e095:	75 19                	jne    c001e0b0 <scanMADT()+0xa4>
c001e097:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e09c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0a2:	83 e2 fb             	and    edx,0xfffffffb
c001e0a5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0ab:	e9 0c 04 00 00       	jmp    c001e4bc <scanMADT()+0x4b0>
c001e0b0:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0b5:	83 ec 0c             	sub    esp,0xc
c001e0b8:	50                   	push   eax
c001e0b9:	e8 0a fb ff ff       	call   c001dbc8 <loadACPITables(unsigned char*)>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0c6:	83 ec 08             	sub    esp,0x8
c001e0c9:	68 0e 24 03 c0       	push   0xc003240e
c001e0ce:	50                   	push   eax
c001e0cf:	e8 b8 fe ff ff       	call   c001df8c <findDataTable(unsigned char*, char*)>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0db:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e0e0:	75 1a                	jne    c001e0fc <scanMADT()+0xf0>
c001e0e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0e7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0ed:	83 e2 fe             	and    edx,0xfffffffe
c001e0f0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0f6:	e9 c1 03 00 00       	jmp    c001e4bc <scanMADT()+0x4b0>
c001e0fb:	90                   	nop
c001e0fc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e10b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e10f:	0f 87 a7 03 00 00    	ja     c001e4bc <scanMADT()+0x4b0>
c001e115:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e11d:	0f 87 99 03 00 00    	ja     c001e4bc <scanMADT()+0x4b0>
c001e123:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e127:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e12b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e12f:	8d 50 01             	lea    edx,[eax+0x1]
c001e132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e136:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e13a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e13e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e142:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e146:	8d 50 01             	lea    edx,[eax+0x1]
c001e149:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e14d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e151:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e155:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e159:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e15e:	83 f8 02             	cmp    eax,0x2
c001e161:	0f 86 51 03 00 00    	jbe    c001e4b8 <scanMADT()+0x4ac>
c001e167:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e16c:	85 c0                	test   eax,eax
c001e16e:	75 58                	jne    c001e1c8 <scanMADT()+0x1bc>
c001e170:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e174:	8d 50 01             	lea    edx,[eax+0x1]
c001e177:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e17b:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e181:	0f b6 d2             	movzx  edx,dl
c001e184:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e188:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e18c:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e192:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e196:	8d 50 01             	lea    edx,[eax+0x1]
c001e199:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e19d:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e1a3:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e1a6:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e1ac:	0f b6 d2             	movzx  edx,dl
c001e1af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1b3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1b7:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e1bd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1c2:	e9 d9 02 00 00       	jmp    c001e4a0 <scanMADT()+0x494>
c001e1c7:	90                   	nop
c001e1c8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1cd:	83 f8 01             	cmp    eax,0x1
c001e1d0:	0f 85 1a 01 00 00    	jne    c001e2f0 <scanMADT()+0x2e4>
c001e1d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1da:	8d 50 01             	lea    edx,[eax+0x1]
c001e1dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1e1:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e1e7:	0f b6 d2             	movzx  edx,dl
c001e1ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1ee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1f2:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e1f8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e1fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e201:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e205:	01 d0                	add    eax,edx
c001e207:	83 c0 2c             	add    eax,0x2c
c001e20a:	8a 00                	mov    al,BYTE PTR [eax]
c001e20c:	0f b6 d0             	movzx  edx,al
c001e20f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e213:	8d 48 01             	lea    ecx,[eax+0x1]
c001e216:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e21a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e21e:	0f b6 c0             	movzx  eax,al
c001e221:	c1 e0 08             	shl    eax,0x8
c001e224:	89 d1                	mov    ecx,edx
c001e226:	09 c1                	or     ecx,eax
c001e228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e22c:	8d 50 02             	lea    edx,[eax+0x2]
c001e22f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e233:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e237:	0f b6 c0             	movzx  eax,al
c001e23a:	c1 e0 10             	shl    eax,0x10
c001e23d:	09 c1                	or     ecx,eax
c001e23f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e243:	8d 50 03             	lea    edx,[eax+0x3]
c001e246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e24a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e24e:	0f b6 c0             	movzx  eax,al
c001e251:	c1 e0 18             	shl    eax,0x18
c001e254:	09 c1                	or     ecx,eax
c001e256:	89 ca                	mov    edx,ecx
c001e258:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e25d:	0f b6 c0             	movzx  eax,al
c001e260:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e267:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e26c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e270:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e274:	01 d0                	add    eax,edx
c001e276:	83 c0 2c             	add    eax,0x2c
c001e279:	8a 00                	mov    al,BYTE PTR [eax]
c001e27b:	0f b6 d0             	movzx  edx,al
c001e27e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e282:	8d 48 01             	lea    ecx,[eax+0x1]
c001e285:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e289:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e28d:	0f b6 c0             	movzx  eax,al
c001e290:	c1 e0 08             	shl    eax,0x8
c001e293:	89 d1                	mov    ecx,edx
c001e295:	09 c1                	or     ecx,eax
c001e297:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e29b:	8d 50 02             	lea    edx,[eax+0x2]
c001e29e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2a6:	0f b6 c0             	movzx  eax,al
c001e2a9:	c1 e0 10             	shl    eax,0x10
c001e2ac:	09 c1                	or     ecx,eax
c001e2ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2b2:	8d 50 03             	lea    edx,[eax+0x3]
c001e2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2bd:	0f b6 c0             	movzx  eax,al
c001e2c0:	c1 e0 18             	shl    eax,0x18
c001e2c3:	09 c1                	or     ecx,eax
c001e2c5:	89 ca                	mov    edx,ecx
c001e2c7:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2cc:	0f b6 c0             	movzx  eax,al
c001e2cf:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e2d6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2db:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2e0:	83 c0 01             	add    eax,0x1
c001e2e3:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e2e8:	e9 b3 01 00 00       	jmp    c001e4a0 <scanMADT()+0x494>
c001e2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e2f0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e2f5:	83 f8 02             	cmp    eax,0x2
c001e2f8:	0f 85 ea 00 00 00    	jne    c001e3e8 <scanMADT()+0x3dc>
c001e2fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e302:	8d 50 01             	lea    edx,[eax+0x1]
c001e305:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e309:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e30d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e311:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e315:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e319:	8d 50 01             	lea    edx,[eax+0x1]
c001e31c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e320:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e324:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e328:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e32c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e330:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e334:	01 d0                	add    eax,edx
c001e336:	83 c0 2c             	add    eax,0x2c
c001e339:	8a 00                	mov    al,BYTE PTR [eax]
c001e33b:	0f b6 d0             	movzx  edx,al
c001e33e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e342:	8d 48 01             	lea    ecx,[eax+0x1]
c001e345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e349:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e34d:	0f b6 c0             	movzx  eax,al
c001e350:	c1 e0 08             	shl    eax,0x8
c001e353:	89 d1                	mov    ecx,edx
c001e355:	09 c1                	or     ecx,eax
c001e357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e35b:	8d 50 02             	lea    edx,[eax+0x2]
c001e35e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e362:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e366:	0f b6 c0             	movzx  eax,al
c001e369:	c1 e0 10             	shl    eax,0x10
c001e36c:	09 c1                	or     ecx,eax
c001e36e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e372:	8d 50 03             	lea    edx,[eax+0x3]
c001e375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e379:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e37d:	0f b6 c0             	movzx  eax,al
c001e380:	c1 e0 18             	shl    eax,0x18
c001e383:	09 c8                	or     eax,ecx
c001e385:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e389:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e38e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e396:	01 d0                	add    eax,edx
c001e398:	83 c0 2c             	add    eax,0x2c
c001e39b:	8a 00                	mov    al,BYTE PTR [eax]
c001e39d:	0f b6 c0             	movzx  eax,al
c001e3a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e3a4:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e3a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3ab:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e3af:	0f b6 d2             	movzx  edx,dl
c001e3b2:	c1 e2 08             	shl    edx,0x8
c001e3b5:	09 d0                	or     eax,edx
c001e3b7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e3bc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e3c1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3ca:	88 90 28 3c 03 c0    	mov    BYTE PTR [eax-0x3ffcc3d8],dl
c001e3d0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e3d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e3da:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e3e2:	e9 b9 00 00 00       	jmp    c001e4a0 <scanMADT()+0x494>
c001e3e7:	90                   	nop
c001e3e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3ed:	83 f8 04             	cmp    eax,0x4
c001e3f0:	0f 85 9a 00 00 00    	jne    c001e490 <scanMADT()+0x484>
c001e3f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3fa:	8d 50 01             	lea    edx,[eax+0x1]
c001e3fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e401:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e405:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e409:	0f b6 c0             	movzx  eax,al
c001e40c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e410:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e414:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e418:	01 d0                	add    eax,edx
c001e41a:	83 c0 2c             	add    eax,0x2c
c001e41d:	8a 00                	mov    al,BYTE PTR [eax]
c001e41f:	0f b6 d0             	movzx  edx,al
c001e422:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e426:	8d 48 01             	lea    ecx,[eax+0x1]
c001e429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e42d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e431:	0f b6 c0             	movzx  eax,al
c001e434:	c1 e0 08             	shl    eax,0x8
c001e437:	09 d0                	or     eax,edx
c001e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e43d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e446:	8d 50 01             	lea    edx,[eax+0x1]
c001e449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e44d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e451:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e455:	0f b6 c0             	movzx  eax,al
c001e458:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e460:	c1 e0 08             	shl    eax,0x8
c001e463:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e467:	89 c1                	mov    ecx,eax
c001e469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e46d:	c1 e0 18             	shl    eax,0x18
c001e470:	89 c3                	mov    ebx,eax
c001e472:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e477:	8d 50 01             	lea    edx,[eax+0x1]
c001e47a:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e480:	09 d9                	or     ecx,ebx
c001e482:	89 ca                	mov    edx,ecx
c001e484:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e48b:	eb 13                	jmp    c001e4a0 <scanMADT()+0x494>
c001e48d:	8d 76 00             	lea    esi,[esi+0x0]
c001e490:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e495:	83 f8 05             	cmp    eax,0x5
c001e498:	75 06                	jne    c001e4a0 <scanMADT()+0x494>
c001e49a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e49f:	90                   	nop
c001e4a0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e4a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4a9:	01 d0                	add    eax,edx
c001e4ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4af:	e9 50 fc ff ff       	jmp    c001e104 <scanMADT()+0xf8>
c001e4b4:	90                   	nop
c001e4b5:	eb 05                	jmp    c001e4bc <scanMADT()+0x4b0>
c001e4b7:	90                   	nop
c001e4b8:	90                   	nop
c001e4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e4bc:	83 c4 38             	add    esp,0x38
c001e4bf:	5b                   	pop    ebx
c001e4c0:	c3                   	ret    
c001e4c1:	90                   	nop
c001e4c2:	66 90                	xchg   ax,ax

c001e4c4 <ACPI::ACPI()>:
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cb:	83 ec 08             	sub    esp,0x8
c001e4ce:	68 13 24 03 c0       	push   0xc0032413
c001e4d3:	50                   	push   eax
c001e4d4:	e8 53 cf ff ff       	call   c001b42c <Device::Device(char const*)>
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	ba 20 26 03 c0       	mov    edx,0xc0032620
c001e4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e5:	89 10                	mov    DWORD PTR [eax],edx
c001e4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e504:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e50e:	e8 f9 fa ff ff       	call   c001e00c <scanMADT()>
c001e513:	90                   	nop
c001e514:	83 c4 0c             	add    esp,0xc
c001e517:	c3                   	ret    

c001e518 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e518:	83 ec 2c             	sub    esp,0x2c
c001e51b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e51f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e523:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e527:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e52b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e530:	88 d0                	mov    al,dl
c001e532:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e536:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e53b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e543:	90                   	nop
c001e544:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e548:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e54e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e552:	0f 8d b0 00 00 00    	jge    c001e608 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e558:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e55c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e560:	83 c2 2a             	add    edx,0x2a
c001e563:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e567:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e56c:	0f b7 c0             	movzx  eax,ax
c001e56f:	39 c2                	cmp    edx,eax
c001e571:	0f 85 85 00 00 00    	jne    c001e5fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e577:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e57b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e57f:	83 c2 2a             	add    edx,0x2a
c001e582:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e586:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e58b:	0f b6 c0             	movzx  eax,al
c001e58e:	39 c2                	cmp    edx,eax
c001e590:	75 6a                	jne    c001e5fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e592:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e597:	85 c0                	test   eax,eax
c001e599:	74 3d                	je     c001e5d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e59b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e59f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5a3:	83 c2 2a             	add    edx,0x2a
c001e5a6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5b1:	39 c2                	cmp    edx,eax
c001e5b3:	74 13                	je     c001e5c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e5b5:	83 ec 0c             	sub    esp,0xc
c001e5b8:	68 a0 25 03 c0       	push   0xc00325a0
c001e5bd:	e8 a0 1c 00 00       	call   c0020262 <KePanic(char const*)>
c001e5c2:	83 c4 10             	add    esp,0x10
c001e5c5:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c8:	83 ec 0c             	sub    esp,0xc
c001e5cb:	68 18 24 03 c0       	push   0xc0032418
c001e5d0:	e8 8d 1c 00 00       	call   c0020262 <KePanic(char const*)>
c001e5d5:	83 c4 10             	add    esp,0x10
c001e5d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e5dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5e4:	83 c2 2a             	add    edx,0x2a
c001e5e7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e5eb:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5ed:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5f0:	89 01                	mov    DWORD PTR [ecx],eax
c001e5f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e5f5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5fa:	66 90                	xchg   ax,ax
c001e5fc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e601:	e9 3e ff ff ff       	jmp    c001e544 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e606:	66 90                	xchg   ax,ax
c001e608:	90                   	nop
c001e609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e60d:	83 c4 2c             	add    esp,0x2c
c001e610:	c2 04 00             	ret    0x4
c001e613:	90                   	nop

c001e614 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e614:	83 ec 1c             	sub    esp,0x1c
c001e617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e61b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e61f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e623:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e628:	88 c8                	mov    al,cl
c001e62a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e62e:	88 d0                	mov    al,dl
c001e630:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e638:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e642:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e645:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e649:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e651:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e657:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e65b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e65e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e662:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e66b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e671:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e675:	83 c0 01             	add    eax,0x1
c001e678:	88 c1                	mov    cl,al
c001e67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e67e:	83 c2 2a             	add    edx,0x2a
c001e681:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e689:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e693:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e696:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e69a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6a8:	8d 50 01             	lea    edx,[eax+0x1]
c001e6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6af:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6bf:	3d 00 02 00 00       	cmp    eax,0x200
c001e6c4:	75 12                	jne    c001e6d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e6c6:	83 ec 0c             	sub    esp,0xc
c001e6c9:	68 27 24 03 c0       	push   0xc0032427
c001e6ce:	e8 8f 1b 00 00       	call   c0020262 <KePanic(char const*)>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	66 90                	xchg   ax,ax
c001e6d8:	90                   	nop
c001e6d9:	83 c4 1c             	add    esp,0x1c
c001e6dc:	c3                   	ret    
c001e6dd:	90                   	nop
c001e6de:	66 90                	xchg   ax,ax

c001e6e0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e6e0:	b8 00 00 00 00       	mov    eax,0x0
c001e6e5:	c3                   	ret    
c001e6e6:	66 90                	xchg   ax,ax

c001e6e8 <ACPI::detectPCI()>:
c001e6e8:	53                   	push   ebx
c001e6e9:	83 ec 28             	sub    esp,0x28
c001e6ec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6f1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e6f6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e6fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e701:	83 e0 04             	and    eax,0x4
c001e704:	0f b6 c0             	movzx  eax,al
c001e707:	85 c0                	test   eax,eax
c001e709:	74 2d                	je     c001e738 <ACPI::detectPCI()+0x50>
c001e70b:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e710:	83 ec 08             	sub    esp,0x8
c001e713:	68 44 24 03 c0       	push   0xc0032444
c001e718:	50                   	push   eax
c001e719:	e8 6e f8 ff ff       	call   c001df8c <findDataTable(unsigned char*, char*)>
c001e71e:	83 c4 10             	add    esp,0x10
c001e721:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e725:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e72a:	74 0c                	je     c001e738 <ACPI::detectPCI()+0x50>
c001e72c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e731:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e736:	66 90                	xchg   ax,ax
c001e738:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e744:	8a 00                	mov    al,BYTE PTR [eax]
c001e746:	0f b6 c0             	movzx  eax,al
c001e749:	83 f8 01             	cmp    eax,0x1
c001e74c:	75 0e                	jne    c001e75c <ACPI::detectPCI()+0x74>
c001e74e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e753:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e758:	eb 2e                	jmp    c001e788 <ACPI::detectPCI()+0xa0>
c001e75a:	66 90                	xchg   ax,ax
c001e75c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e760:	8a 00                	mov    al,BYTE PTR [eax]
c001e762:	0f b6 c0             	movzx  eax,al
c001e765:	83 f8 02             	cmp    eax,0x2
c001e768:	75 1e                	jne    c001e788 <ACPI::detectPCI()+0xa0>
c001e76a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e76f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e774:	85 c0                	test   eax,eax
c001e776:	74 10                	je     c001e788 <ACPI::detectPCI()+0xa0>
c001e778:	83 ec 0c             	sub    esp,0xc
c001e77b:	68 d0 25 03 c0       	push   0xc00325d0
c001e780:	e8 dd 1a 00 00       	call   c0020262 <KePanic(char const*)>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e78c:	83 f0 01             	xor    eax,0x1
c001e78f:	0f b6 c0             	movzx  eax,al
c001e792:	85 c0                	test   eax,eax
c001e794:	74 46                	je     c001e7dc <ACPI::detectPCI()+0xf4>
c001e796:	e8 95 19 fe ff       	call   c0000130 <manualPCIProbe>
c001e79b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e79f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a4:	75 0e                	jne    c001e7b4 <ACPI::detectPCI()+0xcc>
c001e7a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7ab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7b0:	eb 2a                	jmp    c001e7dc <ACPI::detectPCI()+0xf4>
c001e7b2:	66 90                	xchg   ax,ax
c001e7b4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e7b9:	75 21                	jne    c001e7dc <ACPI::detectPCI()+0xf4>
c001e7bb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7c0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7c5:	85 c0                	test   eax,eax
c001e7c7:	74 13                	je     c001e7dc <ACPI::detectPCI()+0xf4>
c001e7c9:	83 ec 0c             	sub    esp,0xc
c001e7cc:	68 d0 25 03 c0       	push   0xc00325d0
c001e7d1:	e8 8c 1a 00 00       	call   c0020262 <KePanic(char const*)>
c001e7d6:	83 c4 10             	add    esp,0x10
c001e7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e7dc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7e1:	85 c0                	test   eax,eax
c001e7e3:	0f 84 87 00 00 00    	je     c001e870 <ACPI::detectPCI()+0x188>
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	68 49 24 03 c0       	push   0xc0032449
c001e7f1:	e8 09 13 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e801:	83 ec 0c             	sub    esp,0xc
c001e804:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e808:	e8 ad 7b ff ff       	call   c00163ba <malloc>
c001e80d:	83 c4 10             	add    esp,0x10
c001e810:	89 c3                	mov    ebx,eax
c001e812:	83 ec 0c             	sub    esp,0xc
c001e815:	53                   	push   ebx
c001e816:	e8 69 b8 00 00       	call   c002a084 <PCI::PCI()>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e826:	83 ec 08             	sub    esp,0x8
c001e829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e82d:	50                   	push   eax
c001e82e:	e8 97 ca ff ff       	call   c001b2ca <Device::addChild(Device*)>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e83a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e83c:	83 c0 08             	add    eax,0x8
c001e83f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e841:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e846:	85 d2                	test   edx,edx
c001e848:	74 0a                	je     c001e854 <ACPI::detectPCI()+0x16c>
c001e84a:	ba 01 00 00 00       	mov    edx,0x1
c001e84f:	eb 0b                	jmp    c001e85c <ACPI::detectPCI()+0x174>
c001e851:	8d 76 00             	lea    esi,[esi+0x0]
c001e854:	ba 02 00 00 00       	mov    edx,0x2
c001e859:	8d 76 00             	lea    esi,[esi+0x0]
c001e85c:	6a 00                	push   0x0
c001e85e:	6a 00                	push   0x0
c001e860:	52                   	push   edx
c001e861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e865:	ff d0                	call   eax
c001e867:	83 c4 10             	add    esp,0x10
c001e86a:	e9 91 00 00 00       	jmp    c001e900 <ACPI::detectPCI()+0x218>
c001e86f:	90                   	nop
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	68 61 24 03 c0       	push   0xc0032461
c001e878:	e8 82 12 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001e87d:	83 c4 10             	add    esp,0x10
c001e880:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e887:	83 ec 0c             	sub    esp,0xc
c001e88a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e88e:	e8 27 7b ff ff       	call   c00163ba <malloc>
c001e893:	83 c4 10             	add    esp,0x10
c001e896:	89 c3                	mov    ebx,eax
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	53                   	push   ebx
c001e89c:	e8 7d c3 00 00       	call   c002ac1e <IDE::IDE()>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e8a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8ac:	83 ec 08             	sub    esp,0x8
c001e8af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8b3:	50                   	push   eax
c001e8b4:	e8 11 ca ff ff       	call   c001b2ca <Device::addChild(Device*)>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8c0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e8ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ce:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e8d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8db:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e8e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ea:	83 c0 08             	add    eax,0x8
c001e8ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ef:	6a 00                	push   0x0
c001e8f1:	6a 00                	push   0x0
c001e8f3:	6a 00                	push   0x0
c001e8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8f9:	ff d0                	call   eax
c001e8fb:	83 c4 10             	add    esp,0x10
c001e8fe:	66 90                	xchg   ax,ax
c001e900:	90                   	nop
c001e901:	83 c4 28             	add    esp,0x28
c001e904:	5b                   	pop    ebx
c001e905:	c3                   	ret    
c001e906:	66 90                	xchg   ax,ax

c001e908 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e908:	83 ec 1c             	sub    esp,0x1c
c001e90b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e90f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e912:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e916:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e91b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e920:	83 ec 08             	sub    esp,0x8
c001e923:	52                   	push   edx
c001e924:	50                   	push   eax
c001e925:	e8 52 71 ff ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c001e92a:	83 c4 10             	add    esp,0x10
c001e92d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e931:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e936:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e93b:	83 ec 04             	sub    esp,0x4
c001e93e:	6a 01                	push   0x1
c001e940:	52                   	push   edx
c001e941:	50                   	push   eax
c001e942:	e8 4f 72 ff ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	90                   	nop
c001e94b:	83 c4 1c             	add    esp,0x1c
c001e94e:	c3                   	ret    
c001e94f:	90                   	nop

c001e950 <ACPI::sleep()>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e958:	85 c0                	test   eax,eax
c001e95a:	74 08                	je     c001e964 <ACPI::sleep()+0x14>
c001e95c:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e961:	ff d0                	call   eax
c001e963:	90                   	nop
c001e964:	90                   	nop
c001e965:	83 c4 0c             	add    esp,0xc
c001e968:	c3                   	ret    
c001e969:	90                   	nop
c001e96a:	66 90                	xchg   ax,ax

c001e96c <ACPI::open(int, int, void*)>:
c001e96c:	57                   	push   edi
c001e96d:	56                   	push   esi
c001e96e:	53                   	push   ebx
c001e96f:	81 ec 70 01 00 00    	sub    esp,0x170
c001e975:	83 ec 0c             	sub    esp,0xc
c001e978:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e97f:	e8 64 fd ff ff       	call   c001e6e8 <ACPI::detectPCI()>
c001e984:	83 c4 10             	add    esp,0x10
c001e987:	83 ec 0c             	sub    esp,0xc
c001e98a:	68 f8 25 03 c0       	push   0xc00325f8
c001e98f:	e8 6b 11 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	b8 4c 05 00 00       	mov    eax,0x54c
c001e99c:	8a 00                	mov    al,BYTE PTR [eax]
c001e99e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e9a5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9ad:	83 f8 01             	cmp    eax,0x1
c001e9b0:	75 12                	jne    c001e9c4 <ACPI::open(int, int, void*)+0x58>
c001e9b2:	83 ec 0c             	sub    esp,0xc
c001e9b5:	68 76 24 03 c0       	push   0xc0032476
c001e9ba:	e8 9c 53 00 00       	call   c0023d5b <Thr::loadKernelSymbolTable(char const*)>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	eb 34                	jmp    c001e9f8 <ACPI::open(int, int, void*)+0x8c>
c001e9c4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9cc:	3d bb 00 00 00       	cmp    eax,0xbb
c001e9d1:	75 15                	jne    c001e9e8 <ACPI::open(int, int, void*)+0x7c>
c001e9d3:	83 ec 0c             	sub    esp,0xc
c001e9d6:	68 94 24 03 c0       	push   0xc0032494
c001e9db:	e8 7b 53 00 00       	call   c0023d5b <Thr::loadKernelSymbolTable(char const*)>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	eb 13                	jmp    c001e9f8 <ACPI::open(int, int, void*)+0x8c>
c001e9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	68 b2 24 03 c0       	push   0xc00324b2
c001e9f0:	e8 6d 18 00 00       	call   c0020262 <KePanic(char const*)>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ea00:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ea15:	e8 a0 79 ff ff       	call   c00163ba <malloc>
c001ea1a:	83 c4 10             	add    esp,0x10
c001ea1d:	89 c3                	mov    ebx,eax
c001ea1f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea24:	83 ec 04             	sub    esp,0x4
c001ea27:	50                   	push   eax
c001ea28:	68 cc 24 03 c0       	push   0xc00324cc
c001ea2d:	53                   	push   ebx
c001ea2e:	e8 1d ba ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001ea33:	83 c4 10             	add    esp,0x10
c001ea36:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ea3d:	83 ec 08             	sub    esp,0x8
c001ea40:	6a 01                	push   0x1
c001ea42:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea49:	e8 20 ba ff ff       	call   c001a46e <File::open(FileOpenMode)>
c001ea4e:	83 c4 10             	add    esp,0x10
c001ea51:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ea58:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ea60:	75 16                	jne    c001ea78 <ACPI::open(int, int, void*)+0x10c>
c001ea62:	83 ec 0c             	sub    esp,0xc
c001ea65:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea6c:	e8 5b ba ff ff       	call   c001a4cc <File::close()>
c001ea71:	83 c4 10             	add    esp,0x10
c001ea74:	eb 0a                	jmp    c001ea80 <ACPI::open(int, int, void*)+0x114>
c001ea76:	66 90                	xchg   ax,ax
c001ea78:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ea80:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ea88:	74 1e                	je     c001eaa8 <ACPI::open(int, int, void*)+0x13c>
c001ea8a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001ea91:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea93:	83 c0 08             	add    eax,0x8
c001ea96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea98:	83 ec 0c             	sub    esp,0xc
c001ea9b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001eaa2:	ff d0                	call   eax
c001eaa4:	83 c4 10             	add    esp,0x10
c001eaa7:	90                   	nop
c001eaa8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001eaaf:	83 f0 01             	xor    eax,0x1
c001eab2:	0f b6 c0             	movzx  eax,al
c001eab5:	85 c0                	test   eax,eax
c001eab7:	74 43                	je     c001eafc <ACPI::open(int, int, void*)+0x190>
c001eab9:	83 ec 0c             	sub    esp,0xc
c001eabc:	68 ea 24 03 c0       	push   0xc00324ea
c001eac1:	e8 39 10 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	83 ec 04             	sub    esp,0x4
c001eacc:	6a 0c                	push   0xc
c001eace:	68 05 25 03 c0       	push   0xc0032505
c001ead3:	68 16 25 03 c0       	push   0xc0032516
c001ead8:	e8 bd 44 00 00       	call   c0022f9a <Reg::readIntWithDefault(char*, char*, int)>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001eaf1:	e8 4a 96 ff ff       	call   c0018140 <Virt::setupPageSwapping(int)>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	8d 76 00             	lea    esi,[esi+0x0]
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	68 44 0f 03 c0       	push   0xc0030f44
c001eb04:	e8 f6 0f 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001eb13:	83 ec 08             	sub    esp,0x8
c001eb16:	6a 13                	push   0x13
c001eb18:	50                   	push   eax
c001eb19:	e8 da ca ff ff       	call   c001b5f8 <getDevicesOfType(DeviceType)>
c001eb1e:	83 c4 0c             	add    esp,0xc
c001eb21:	8d 76 00             	lea    esi,[esi+0x0]
c001eb24:	83 ec 0c             	sub    esp,0xc
c001eb27:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb2e:	50                   	push   eax
c001eb2f:	e8 fc 02 01 00       	call   c002ee30 <LinkedList<Device>::isEmpty()>
c001eb34:	83 c4 10             	add    esp,0x10
c001eb37:	83 f0 01             	xor    eax,0x1
c001eb3a:	0f b6 c0             	movzx  eax,al
c001eb3d:	85 c0                	test   eax,eax
c001eb3f:	0f 84 47 01 00 00    	je     c001ec8c <ACPI::open(int, int, void*)+0x320>
c001eb45:	83 ec 0c             	sub    esp,0xc
c001eb48:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb4f:	50                   	push   eax
c001eb50:	e8 f7 02 01 00       	call   c002ee4c <LinkedList<Device>::getFirstElement()>
c001eb55:	83 c4 10             	add    esp,0x10
c001eb58:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eb5f:	83 ec 0c             	sub    esp,0xc
c001eb62:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb69:	50                   	push   eax
c001eb6a:	e8 e5 02 01 00       	call   c002ee54 <LinkedList<Device>::removeFirst()>
c001eb6f:	83 c4 10             	add    esp,0x10
c001eb72:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eb79:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eb80:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eb87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb8b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eb91:	ba 09 00 00 00       	mov    edx,0x9
c001eb96:	fc                   	cld    
c001eb97:	89 c7                	mov    edi,eax
c001eb99:	89 de                	mov    esi,ebx
c001eb9b:	89 d1                	mov    ecx,edx
c001eb9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eb9f:	83 ec 08             	sub    esp,0x8
c001eba2:	8d 44 24 38          	lea    eax,[esp+0x38]
c001eba6:	50                   	push   eax
c001eba7:	83 ec 24             	sub    esp,0x24
c001ebaa:	89 e0                	mov    eax,esp
c001ebac:	89 c3                	mov    ebx,eax
c001ebae:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ebb2:	ba 09 00 00 00       	mov    edx,0x9
c001ebb7:	89 df                	mov    edi,ebx
c001ebb9:	89 c6                	mov    esi,eax
c001ebbb:	89 d1                	mov    ecx,edx
c001ebbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ebbf:	e8 aa b9 00 00       	call   c002a56e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ebc4:	83 c4 30             	add    esp,0x30
c001ebc7:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ebce:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ebd6:	0f 84 48 ff ff ff    	je     c001eb24 <ACPI::open(int, int, void*)+0x1b8>
c001ebdc:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ebe7:	83 ec 0c             	sub    esp,0xc
c001ebea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ebf1:	e8 c4 77 ff ff       	call   c00163ba <malloc>
c001ebf6:	83 c4 10             	add    esp,0x10
c001ebf9:	89 c3                	mov    ebx,eax
c001ebfb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec00:	83 ec 04             	sub    esp,0x4
c001ec03:	50                   	push   eax
c001ec04:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec0b:	53                   	push   ebx
c001ec0c:	e8 3f b8 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ec1b:	83 ec 0c             	sub    esp,0xc
c001ec1e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec25:	e8 08 bb ff ff       	call   c001a732 <File::exists()>
c001ec2a:	83 c4 10             	add    esp,0x10
c001ec2d:	0f b6 c0             	movzx  eax,al
c001ec30:	85 c0                	test   eax,eax
c001ec32:	74 28                	je     c001ec5c <ACPI::open(int, int, void*)+0x2f0>
c001ec34:	83 ec 08             	sub    esp,0x8
c001ec37:	6a 01                	push   0x1
c001ec39:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec40:	e8 90 5b 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001ec45:	83 c4 10             	add    esp,0x10
c001ec48:	83 ec 08             	sub    esp,0x8
c001ec4b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec52:	50                   	push   eax
c001ec53:	e8 cf 5d 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001ec58:	83 c4 10             	add    esp,0x10
c001ec5b:	90                   	nop
c001ec5c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ec64:	0f 84 ba fe ff ff    	je     c001eb24 <ACPI::open(int, int, void*)+0x1b8>
c001ec6a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ec71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec73:	83 c0 08             	add    eax,0x8
c001ec76:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec78:	83 ec 0c             	sub    esp,0xc
c001ec7b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec82:	ff d0                	call   eax
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	e9 98 fe ff ff       	jmp    c001eb24 <ACPI::open(int, int, void*)+0x1b8>
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ec96:	50                   	push   eax
c001ec97:	e8 90 01 01 00       	call   c002ee2c <LinkedList<Device>::~LinkedList()>
c001ec9c:	83 c4 10             	add    esp,0x10
c001ec9f:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eca5:	83 ec 08             	sub    esp,0x8
c001eca8:	6a 01                	push   0x1
c001ecaa:	68 1d 25 03 c0       	push   0xc003251d
c001ecaf:	e8 21 5b 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	83 ec 08             	sub    esp,0x8
c001ecba:	53                   	push   ebx
c001ecbb:	50                   	push   eax
c001ecbc:	e8 66 5d 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ecc9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001eccf:	83 e0 04             	and    eax,0x4
c001ecd2:	0f b6 c0             	movzx  eax,al
c001ecd5:	85 c0                	test   eax,eax
c001ecd7:	0f 84 1b 01 00 00    	je     c001edf8 <ACPI::open(int, int, void*)+0x48c>
c001ecdd:	83 ec 0c             	sub    esp,0xc
c001ece0:	68 3a 25 03 c0       	push   0xc003253a
c001ece5:	e8 15 0e 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001ecea:	83 c4 10             	add    esp,0x10
c001eced:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ecf8:	83 ec 0c             	sub    esp,0xc
c001ecfb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ed02:	e8 b3 76 ff ff       	call   c00163ba <malloc>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	89 c3                	mov    ebx,eax
c001ed0c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed11:	83 ec 04             	sub    esp,0x4
c001ed14:	50                   	push   eax
c001ed15:	68 57 25 03 c0       	push   0xc0032557
c001ed1a:	53                   	push   ebx
c001ed1b:	e8 30 b7 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001ed20:	83 c4 10             	add    esp,0x10
c001ed23:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ed2a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed32:	74 20                	je     c001ed54 <ACPI::open(int, int, void*)+0x3e8>
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ed3e:	e8 ef b9 ff ff       	call   c001a732 <File::exists()>
c001ed43:	83 c4 10             	add    esp,0x10
c001ed46:	0f b6 c0             	movzx  eax,al
c001ed49:	85 c0                	test   eax,eax
c001ed4b:	74 07                	je     c001ed54 <ACPI::open(int, int, void*)+0x3e8>
c001ed4d:	b0 01                	mov    al,0x1
c001ed4f:	eb 07                	jmp    c001ed58 <ACPI::open(int, int, void*)+0x3ec>
c001ed51:	8d 76 00             	lea    esi,[esi+0x0]
c001ed54:	b0 00                	mov    al,0x0
c001ed56:	66 90                	xchg   ax,ax
c001ed58:	0f b6 c0             	movzx  eax,al
c001ed5b:	85 c0                	test   eax,eax
c001ed5d:	74 25                	je     c001ed84 <ACPI::open(int, int, void*)+0x418>
c001ed5f:	83 ec 08             	sub    esp,0x8
c001ed62:	6a 01                	push   0x1
c001ed64:	68 57 25 03 c0       	push   0xc0032557
c001ed69:	e8 67 5a 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	83 ec 08             	sub    esp,0x8
c001ed74:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ed7b:	50                   	push   eax
c001ed7c:	e8 a6 5c 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c001ed81:	83 c4 10             	add    esp,0x10
c001ed84:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed8c:	74 2a                	je     c001edb8 <ACPI::open(int, int, void*)+0x44c>
c001ed8e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed96:	74 20                	je     c001edb8 <ACPI::open(int, int, void*)+0x44c>
c001ed98:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001ed9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda1:	83 c0 08             	add    eax,0x8
c001eda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda6:	83 ec 0c             	sub    esp,0xc
c001eda9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001edb0:	ff d0                	call   eax
c001edb2:	83 c4 10             	add    esp,0x10
c001edb5:	8d 76 00             	lea    esi,[esi+0x0]
c001edb8:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001edbd:	83 ec 08             	sub    esp,0x8
c001edc0:	68 74 25 03 c0       	push   0xc0032574
c001edc5:	50                   	push   eax
c001edc6:	e8 c1 f1 ff ff       	call   c001df8c <findDataTable(unsigned char*, char*)>
c001edcb:	83 c4 10             	add    esp,0x10
c001edce:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001edd5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001eddd:	74 19                	je     c001edf8 <ACPI::open(int, int, void*)+0x48c>
c001eddf:	83 ec 08             	sub    esp,0x8
c001ede2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ede9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001edf0:	e8 13 fb ff ff       	call   c001e908 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001edf5:	83 c4 10             	add    esp,0x10
c001edf8:	b8 00 00 00 00       	mov    eax,0x0
c001edfd:	81 c4 70 01 00 00    	add    esp,0x170
c001ee03:	5b                   	pop    ebx
c001ee04:	5e                   	pop    esi
c001ee05:	5f                   	pop    edi
c001ee06:	c3                   	ret    
c001ee07:	90                   	nop

c001ee08 <CPU::close(int, int, void*)>:
c001ee08:	31 c0                	xor    eax,eax
c001ee0a:	c3                   	ret    
c001ee0b:	90                   	nop

c001ee0c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ee0c:	60                   	pusha  
c001ee0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee19:	9c                   	pushf  
c001ee1a:	fa                   	cli    
c001ee1b:	0f 09                	wbinvd 
c001ee1d:	0f 30                	wrmsr  
c001ee1f:	9d                   	popf   
c001ee20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee24:	89 02                	mov    DWORD PTR [edx],eax
c001ee26:	61                   	popa   
c001ee27:	c3                   	ret    

c001ee28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ee28:	60                   	pusha  
c001ee29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee2d:	9c                   	pushf  
c001ee2e:	fa                   	cli    
c001ee2f:	0f 09                	wbinvd 
c001ee31:	31 c0                	xor    eax,eax
c001ee33:	31 d2                	xor    edx,edx
c001ee35:	0f 32                	rdmsr  
c001ee37:	9d                   	popf   
c001ee38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee3c:	89 02                	mov    DWORD PTR [edx],eax
c001ee3e:	61                   	popa   
c001ee3f:	c3                   	ret    

c001ee40 <CPU::AMD_K6_writeback(int, int, int)>:
c001ee40:	56                   	push   esi
c001ee41:	53                   	push   ebx
c001ee42:	83 ec 10             	sub    esp,0x10
c001ee45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee49:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ee4e:	75 5d                	jne    c001eead <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee50:	83 f8 08             	cmp    eax,0x8
c001ee53:	75 09                	jne    c001ee5e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ee55:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ee5a:	7e 13                	jle    c001ee6f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee5c:	eb 30                	jmp    c001ee8e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee5e:	83 f8 06             	cmp    eax,0x6
c001ee61:	7c 4a                	jl     c001eead <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee63:	83 f8 07             	cmp    eax,0x7
c001ee66:	7e 07                	jle    c001ee6f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee68:	83 f8 09             	cmp    eax,0x9
c001ee6b:	74 21                	je     c001ee8e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee6d:	eb 3e                	jmp    c001eead <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee6f:	89 e6                	mov    esi,esp
c001ee71:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ee77:	56                   	push   esi
c001ee78:	c1 eb 15             	shr    ebx,0x15
c001ee7b:	68 82 00 00 c0       	push   0xc0000082
c001ee80:	83 e3 7e             	and    ebx,0x7e
c001ee83:	e8 a0 ff ff ff       	call   c001ee28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee88:	56                   	push   esi
c001ee89:	6a 00                	push   0x0
c001ee8b:	53                   	push   ebx
c001ee8c:	eb 12                	jmp    c001eea0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ee8e:	89 e3                	mov    ebx,esp
c001ee90:	53                   	push   ebx
c001ee91:	68 82 00 00 c0       	push   0xc0000082
c001ee96:	e8 8d ff ff ff       	call   c001ee28 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee9b:	53                   	push   ebx
c001ee9c:	6a 00                	push   0x0
c001ee9e:	6a 00                	push   0x0
c001eea0:	68 82 00 00 c0       	push   0xc0000082
c001eea5:	e8 62 ff ff ff       	call   c001ee0c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001eeaa:	83 c4 18             	add    esp,0x18
c001eead:	83 c4 10             	add    esp,0x10
c001eeb0:	5b                   	pop    ebx
c001eeb1:	5e                   	pop    esi
c001eeb2:	c3                   	ret    
c001eeb3:	90                   	nop

c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001eeb4:	55                   	push   ebp
c001eeb5:	57                   	push   edi
c001eeb6:	56                   	push   esi
c001eeb7:	53                   	push   ebx
c001eeb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eebc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eec0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eec4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eec8:	39 05 38 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c38,eax
c001eece:	75 23                	jne    c001eef3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001eed0:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001eed5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eed9:	89 06                	mov    DWORD PTR [esi],eax
c001eedb:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001eee0:	89 07                	mov    DWORD PTR [edi],eax
c001eee2:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eee7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001eeea:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001eeef:	89 02                	mov    DWORD PTR [edx],eax
c001eef1:	eb 3f                	jmp    c001ef32 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001eef3:	31 c9                	xor    ecx,ecx
c001eef5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eef9:	0f a2                	cpuid  
c001eefb:	89 06                	mov    DWORD PTR [esi],eax
c001eefd:	89 1f                	mov    DWORD PTR [edi],ebx
c001eeff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef03:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ef06:	89 10                	mov    DWORD PTR [eax],edx
c001ef08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef0c:	a3 38 3c 03 c0       	mov    ds:0xc0033c38,eax
c001ef11:	8b 06                	mov    eax,DWORD PTR [esi]
c001ef13:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ef18:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef1a:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ef1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ef22:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ef27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef2d:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ef32:	5b                   	pop    ebx
c001ef33:	5e                   	pop    esi
c001ef34:	5f                   	pop    edi
c001ef35:	5d                   	pop    ebp
c001ef36:	c3                   	ret    
c001ef37:	90                   	nop

c001ef38 <CPU::cpuidCheckEDX(unsigned int)>:
c001ef38:	83 ec 10             	sub    esp,0x10
c001ef3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef3f:	50                   	push   eax
c001ef40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef44:	50                   	push   eax
c001ef45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef49:	50                   	push   eax
c001ef4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef4e:	50                   	push   eax
c001ef4f:	6a 01                	push   0x1
c001ef51:	e8 5e ff ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef5a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ef5e:	0f 95 c0             	setne  al
c001ef61:	83 c4 24             	add    esp,0x24
c001ef64:	c3                   	ret    
c001ef65:	90                   	nop

c001ef66 <CPU::cpuidCheckECX(unsigned int)>:
c001ef66:	83 ec 10             	sub    esp,0x10
c001ef69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef6d:	50                   	push   eax
c001ef6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef72:	50                   	push   eax
c001ef73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef77:	50                   	push   eax
c001ef78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef7c:	50                   	push   eax
c001ef7d:	6a 01                	push   0x1
c001ef7f:	e8 30 ff ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef88:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef8c:	0f 95 c0             	setne  al
c001ef8f:	83 c4 24             	add    esp,0x24
c001ef92:	c3                   	ret    
c001ef93:	90                   	nop

c001ef94 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001ef94:	83 ec 10             	sub    esp,0x10
c001ef97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef9b:	50                   	push   eax
c001ef9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa0:	50                   	push   eax
c001efa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa5:	50                   	push   eax
c001efa6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efaa:	50                   	push   eax
c001efab:	6a 07                	push   0x7
c001efad:	e8 02 ff ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efb6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001efba:	0f 95 c0             	setne  al
c001efbd:	83 c4 24             	add    esp,0x24
c001efc0:	c3                   	ret    
c001efc1:	90                   	nop

c001efc2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001efc2:	83 ec 10             	sub    esp,0x10
c001efc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efc9:	50                   	push   eax
c001efca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efce:	50                   	push   eax
c001efcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd3:	50                   	push   eax
c001efd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd8:	50                   	push   eax
c001efd9:	6a 07                	push   0x7
c001efdb:	e8 d4 fe ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efe4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001efe8:	0f 95 c0             	setne  al
c001efeb:	83 c4 24             	add    esp,0x24
c001efee:	c3                   	ret    
c001efef:	90                   	nop

c001eff0 <CPU::CPU()>:
c001eff0:	83 ec 0c             	sub    esp,0xc
c001eff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff7:	83 ec 08             	sub    esp,0x8
c001effa:	68 35 27 03 c0       	push   0xc0032735
c001efff:	50                   	push   eax
c001f000:	e8 27 c4 ff ff       	call   c001b42c <Device::Device(char const*)>
c001f005:	83 c4 10             	add    esp,0x10
c001f008:	ba c8 27 03 c0       	mov    edx,0xc00327c8
c001f00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f011:	89 10                	mov    DWORD PTR [eax],edx
c001f013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f017:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f025:	05 78 01 00 00       	add    eax,0x178
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	50                   	push   eax
c001f02e:	e8 2d 6c ff ff       	call   c0015c60 <GDT::GDT()>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03a:	05 7c 09 00 00       	add    eax,0x97c
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	50                   	push   eax
c001f043:	e8 68 6e ff ff       	call   c0015eb0 <IDT::IDT()>
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04f:	05 7c 11 00 00       	add    eax,0x117c
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	50                   	push   eax
c001f058:	e8 eb 87 ff ff       	call   c0017848 <TSS::TSS()>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f064:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f079:	90                   	nop
c001f07a:	83 c4 0c             	add    esp,0xc
c001f07d:	c3                   	ret    

c001f07e <CPU::displayFeatures()>:
c001f07e:	c3                   	ret    
c001f07f:	90                   	nop

c001f080 <CPU::detectFeatures()>:
c001f080:	55                   	push   ebp
c001f081:	57                   	push   edi
c001f082:	56                   	push   esi
c001f083:	53                   	push   ebx
c001f084:	83 ec 30             	sub    esp,0x30
c001f087:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f08b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f095:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f09c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f0a2:	6a 0d                	push   0xd
c001f0a4:	6a 00                	push   0x0
c001f0a6:	55                   	push   ebp
c001f0a7:	e8 44 14 fe ff       	call   c00004f0 <memset>
c001f0ac:	83 c4 10             	add    esp,0x10
c001f0af:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f0b4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f0bb:	0f 84 db 05 00 00    	je     c001f69c <CPU::detectFeatures()+0x61c>
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	89 ef                	mov    edi,ebp
c001f0c6:	6a 10                	push   0x10
c001f0c8:	e8 6b fe ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f0cd:	83 e0 01             	and    eax,0x1
c001f0d0:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0d3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0d9:	83 e0 fd             	and    eax,0xfffffffd
c001f0dc:	09 d0                	or     eax,edx
c001f0de:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0e4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f0eb:	e8 48 fe ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f0f0:	83 e0 01             	and    eax,0x1
c001f0f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f0fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f100:	83 e0 fb             	and    eax,0xfffffffb
c001f103:	09 d0                	or     eax,edx
c001f105:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f10b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f112:	e8 21 fe ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f117:	83 e0 01             	and    eax,0x1
c001f11a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f121:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f127:	83 e0 f7             	and    eax,0xfffffff7
c001f12a:	09 d0                	or     eax,edx
c001f12c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f132:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f139:	e8 fa fd ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f13e:	83 e0 01             	and    eax,0x1
c001f141:	c1 e0 04             	shl    eax,0x4
c001f144:	89 c2                	mov    edx,eax
c001f146:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f14c:	83 e0 ef             	and    eax,0xffffffef
c001f14f:	09 d0                	or     eax,edx
c001f151:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f157:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f15e:	e8 d5 fd ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f163:	83 e0 01             	and    eax,0x1
c001f166:	c1 e0 05             	shl    eax,0x5
c001f169:	89 c2                	mov    edx,eax
c001f16b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f171:	83 e0 df             	and    eax,0xffffffdf
c001f174:	09 d0                	or     eax,edx
c001f176:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f17c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f183:	e8 b0 fd ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f188:	83 e0 01             	and    eax,0x1
c001f18b:	8d 14 00             	lea    edx,[eax+eax*1]
c001f18e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f194:	83 e0 fd             	and    eax,0xfffffffd
c001f197:	09 d0                	or     eax,edx
c001f199:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f19f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f1a6:	e8 8d fd ff ff       	call   c001ef38 <CPU::cpuidCheckEDX(unsigned int)>
c001f1ab:	83 e0 01             	and    eax,0x1
c001f1ae:	c1 e0 06             	shl    eax,0x6
c001f1b1:	89 c2                	mov    edx,eax
c001f1b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f1b9:	83 e0 bf             	and    eax,0xffffffbf
c001f1bc:	09 d0                	or     eax,edx
c001f1be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f1c4:	58                   	pop    eax
c001f1c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1c9:	50                   	push   eax
c001f1ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1ce:	50                   	push   eax
c001f1cf:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f1d3:	56                   	push   esi
c001f1d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1d8:	50                   	push   eax
c001f1d9:	6a 00                	push   0x0
c001f1db:	e8 d4 fc ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1e0:	b8 04 00 00 00       	mov    eax,0x4
c001f1e5:	89 c1                	mov    ecx,eax
c001f1e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1e9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f1ef:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f1f3:	89 c1                	mov    ecx,eax
c001f1f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1f7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f1fd:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f201:	89 c1                	mov    ecx,eax
c001f203:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f205:	83 c4 18             	add    esp,0x18
c001f208:	68 44 26 03 c0       	push   0xc0032644
c001f20d:	55                   	push   ebp
c001f20e:	e8 3d 15 fe ff       	call   c0000750 <strcmp>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	85 c0                	test   eax,eax
c001f218:	75 0f                	jne    c001f229 <CPU::detectFeatures()+0x1a9>
c001f21a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f224:	e9 22 02 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f229:	50                   	push   eax
c001f22a:	50                   	push   eax
c001f22b:	68 51 26 03 c0       	push   0xc0032651
c001f230:	55                   	push   ebp
c001f231:	e8 1a 15 fe ff       	call   c0000750 <strcmp>
c001f236:	83 c4 10             	add    esp,0x10
c001f239:	85 c0                	test   eax,eax
c001f23b:	74 dd                	je     c001f21a <CPU::detectFeatures()+0x19a>
c001f23d:	50                   	push   eax
c001f23e:	50                   	push   eax
c001f23f:	68 5e 26 03 c0       	push   0xc003265e
c001f244:	55                   	push   ebp
c001f245:	e8 06 15 fe ff       	call   c0000750 <strcmp>
c001f24a:	83 c4 10             	add    esp,0x10
c001f24d:	85 c0                	test   eax,eax
c001f24f:	74 2a                	je     c001f27b <CPU::detectFeatures()+0x1fb>
c001f251:	50                   	push   eax
c001f252:	50                   	push   eax
c001f253:	68 6b 26 03 c0       	push   0xc003266b
c001f258:	55                   	push   ebp
c001f259:	e8 f2 14 fe ff       	call   c0000750 <strcmp>
c001f25e:	83 c4 10             	add    esp,0x10
c001f261:	85 c0                	test   eax,eax
c001f263:	74 16                	je     c001f27b <CPU::detectFeatures()+0x1fb>
c001f265:	50                   	push   eax
c001f266:	50                   	push   eax
c001f267:	68 78 26 03 c0       	push   0xc0032678
c001f26c:	55                   	push   ebp
c001f26d:	e8 de 14 fe ff       	call   c0000750 <strcmp>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	85 c0                	test   eax,eax
c001f277:	74 48                	je     c001f2c1 <CPU::detectFeatures()+0x241>
c001f279:	eb 0f                	jmp    c001f28a <CPU::detectFeatures()+0x20a>
c001f27b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f285:	e9 c1 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f28a:	50                   	push   eax
c001f28b:	50                   	push   eax
c001f28c:	68 85 26 03 c0       	push   0xc0032685
c001f291:	55                   	push   ebp
c001f292:	e8 b9 14 fe ff       	call   c0000750 <strcmp>
c001f297:	83 c4 10             	add    esp,0x10
c001f29a:	85 c0                	test   eax,eax
c001f29c:	74 23                	je     c001f2c1 <CPU::detectFeatures()+0x241>
c001f29e:	57                   	push   edi
c001f29f:	57                   	push   edi
c001f2a0:	68 92 26 03 c0       	push   0xc0032692
c001f2a5:	55                   	push   ebp
c001f2a6:	e8 a5 14 fe ff       	call   c0000750 <strcmp>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	85 c0                	test   eax,eax
c001f2b0:	75 1e                	jne    c001f2d0 <CPU::detectFeatures()+0x250>
c001f2b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f2bc:	e9 8a 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f2c1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f2cb:	e9 7b 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f2d0:	56                   	push   esi
c001f2d1:	56                   	push   esi
c001f2d2:	68 9f 26 03 c0       	push   0xc003269f
c001f2d7:	55                   	push   ebp
c001f2d8:	e8 73 14 fe ff       	call   c0000750 <strcmp>
c001f2dd:	83 c4 10             	add    esp,0x10
c001f2e0:	85 c0                	test   eax,eax
c001f2e2:	75 0f                	jne    c001f2f3 <CPU::detectFeatures()+0x273>
c001f2e4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f2ee:	e9 58 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f2f3:	51                   	push   ecx
c001f2f4:	51                   	push   ecx
c001f2f5:	68 5e 26 03 c0       	push   0xc003265e
c001f2fa:	55                   	push   ebp
c001f2fb:	e8 50 14 fe ff       	call   c0000750 <strcmp>
c001f300:	83 c4 10             	add    esp,0x10
c001f303:	85 c0                	test   eax,eax
c001f305:	75 0f                	jne    c001f316 <CPU::detectFeatures()+0x296>
c001f307:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f311:	e9 35 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f316:	52                   	push   edx
c001f317:	52                   	push   edx
c001f318:	68 ac 26 03 c0       	push   0xc00326ac
c001f31d:	55                   	push   ebp
c001f31e:	e8 2d 14 fe ff       	call   c0000750 <strcmp>
c001f323:	83 c4 10             	add    esp,0x10
c001f326:	85 c0                	test   eax,eax
c001f328:	75 0f                	jne    c001f339 <CPU::detectFeatures()+0x2b9>
c001f32a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f334:	e9 12 01 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f339:	50                   	push   eax
c001f33a:	50                   	push   eax
c001f33b:	68 b9 26 03 c0       	push   0xc00326b9
c001f340:	55                   	push   ebp
c001f341:	e8 0a 14 fe ff       	call   c0000750 <strcmp>
c001f346:	83 c4 10             	add    esp,0x10
c001f349:	85 c0                	test   eax,eax
c001f34b:	75 0f                	jne    c001f35c <CPU::detectFeatures()+0x2dc>
c001f34d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f357:	e9 ef 00 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f35c:	50                   	push   eax
c001f35d:	50                   	push   eax
c001f35e:	68 c6 26 03 c0       	push   0xc00326c6
c001f363:	55                   	push   ebp
c001f364:	e8 e7 13 fe ff       	call   c0000750 <strcmp>
c001f369:	83 c4 10             	add    esp,0x10
c001f36c:	85 c0                	test   eax,eax
c001f36e:	75 0f                	jne    c001f37f <CPU::detectFeatures()+0x2ff>
c001f370:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f37a:	e9 cc 00 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f37f:	50                   	push   eax
c001f380:	50                   	push   eax
c001f381:	68 d3 26 03 c0       	push   0xc00326d3
c001f386:	55                   	push   ebp
c001f387:	e8 c4 13 fe ff       	call   c0000750 <strcmp>
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	85 c0                	test   eax,eax
c001f391:	75 0f                	jne    c001f3a2 <CPU::detectFeatures()+0x322>
c001f393:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f39d:	e9 a9 00 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f3a2:	50                   	push   eax
c001f3a3:	50                   	push   eax
c001f3a4:	68 e0 26 03 c0       	push   0xc00326e0
c001f3a9:	55                   	push   ebp
c001f3aa:	e8 a1 13 fe ff       	call   c0000750 <strcmp>
c001f3af:	83 c4 10             	add    esp,0x10
c001f3b2:	85 c0                	test   eax,eax
c001f3b4:	75 0f                	jne    c001f3c5 <CPU::detectFeatures()+0x345>
c001f3b6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f3c0:	e9 86 00 00 00       	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f3c5:	50                   	push   eax
c001f3c6:	50                   	push   eax
c001f3c7:	68 ed 26 03 c0       	push   0xc00326ed
c001f3cc:	55                   	push   ebp
c001f3cd:	e8 7e 13 fe ff       	call   c0000750 <strcmp>
c001f3d2:	83 c4 10             	add    esp,0x10
c001f3d5:	85 c0                	test   eax,eax
c001f3d7:	75 0c                	jne    c001f3e5 <CPU::detectFeatures()+0x365>
c001f3d9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f3e3:	eb 66                	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f3e5:	50                   	push   eax
c001f3e6:	50                   	push   eax
c001f3e7:	68 fa 26 03 c0       	push   0xc00326fa
c001f3ec:	55                   	push   ebp
c001f3ed:	e8 5e 13 fe ff       	call   c0000750 <strcmp>
c001f3f2:	83 c4 10             	add    esp,0x10
c001f3f5:	85 c0                	test   eax,eax
c001f3f7:	75 0c                	jne    c001f405 <CPU::detectFeatures()+0x385>
c001f3f9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f403:	eb 46                	jmp    c001f44b <CPU::detectFeatures()+0x3cb>
c001f405:	57                   	push   edi
c001f406:	57                   	push   edi
c001f407:	68 07 27 03 c0       	push   0xc0032707
c001f40c:	55                   	push   ebp
c001f40d:	e8 3e 13 fe ff       	call   c0000750 <strcmp>
c001f412:	83 c4 10             	add    esp,0x10
c001f415:	85 c0                	test   eax,eax
c001f417:	74 e0                	je     c001f3f9 <CPU::detectFeatures()+0x379>
c001f419:	56                   	push   esi
c001f41a:	56                   	push   esi
c001f41b:	68 14 27 03 c0       	push   0xc0032714
c001f420:	55                   	push   ebp
c001f421:	e8 2a 13 fe ff       	call   c0000750 <strcmp>
c001f426:	83 c4 10             	add    esp,0x10
c001f429:	85 c0                	test   eax,eax
c001f42b:	74 cc                	je     c001f3f9 <CPU::detectFeatures()+0x379>
c001f42d:	51                   	push   ecx
c001f42e:	51                   	push   ecx
c001f42f:	68 21 27 03 c0       	push   0xc0032721
c001f434:	55                   	push   ebp
c001f435:	e8 16 13 fe ff       	call   c0000750 <strcmp>
c001f43a:	83 c4 10             	add    esp,0x10
c001f43d:	85 c0                	test   eax,eax
c001f43f:	74 b8                	je     c001f3f9 <CPU::detectFeatures()+0x379>
c001f441:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f44b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f450:	0f 86 be 00 00 00    	jbe    c001f514 <CPU::detectFeatures()+0x494>
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	68 80 00 00 00       	push   0x80
c001f45e:	e8 31 fb ff ff       	call   c001ef94 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f463:	83 e0 01             	and    eax,0x1
c001f466:	c1 e0 06             	shl    eax,0x6
c001f469:	89 c2                	mov    edx,eax
c001f46b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f471:	83 e0 bf             	and    eax,0xffffffbf
c001f474:	09 d0                	or     eax,edx
c001f476:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f47c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f483:	e8 0c fb ff ff       	call   c001ef94 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f488:	83 e0 01             	and    eax,0x1
c001f48b:	c1 e0 04             	shl    eax,0x4
c001f48e:	89 c2                	mov    edx,eax
c001f490:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f496:	83 e0 ef             	and    eax,0xffffffef
c001f499:	09 d0                	or     eax,edx
c001f49b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4a1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f4a8:	e8 e7 fa ff ff       	call   c001ef94 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f4ad:	89 c2                	mov    edx,eax
c001f4af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4b5:	c1 e2 07             	shl    edx,0x7
c001f4b8:	83 e0 7f             	and    eax,0x7f
c001f4bb:	09 d0                	or     eax,edx
c001f4bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f4ca:	e8 f3 fa ff ff       	call   c001efc2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4cf:	83 e0 01             	and    eax,0x1
c001f4d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f4d9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4df:	83 e0 f7             	and    eax,0xfffffff7
c001f4e2:	09 d0                	or     eax,edx
c001f4e4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4ea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f4f1:	e8 cc fa ff ff       	call   c001efc2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4f6:	83 c4 10             	add    esp,0x10
c001f4f9:	83 e0 01             	and    eax,0x1
c001f4fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f503:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f509:	83 e0 fb             	and    eax,0xfffffffb
c001f50c:	09 d0                	or     eax,edx
c001f50e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f514:	83 ec 0c             	sub    esp,0xc
c001f517:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f51b:	50                   	push   eax
c001f51c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f520:	50                   	push   eax
c001f521:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f525:	57                   	push   edi
c001f526:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f52a:	56                   	push   esi
c001f52b:	6a 01                	push   0x1
c001f52d:	e8 82 f9 ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f536:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f53c:	89 c1                	mov    ecx,eax
c001f53e:	83 e2 f0             	and    edx,0xfffffff0
c001f541:	83 e1 0f             	and    ecx,0xf
c001f544:	09 ca                	or     edx,ecx
c001f546:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f54c:	89 c2                	mov    edx,eax
c001f54e:	c1 ea 04             	shr    edx,0x4
c001f551:	83 e2 0f             	and    edx,0xf
c001f554:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f558:	89 d1                	mov    ecx,edx
c001f55a:	83 c4 20             	add    esp,0x20
c001f55d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f563:	c1 e1 06             	shl    ecx,0x6
c001f566:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f56c:	09 ca                	or     edx,ecx
c001f56e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f575:	89 c2                	mov    edx,eax
c001f577:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f57d:	c1 ea 08             	shr    edx,0x8
c001f580:	83 e1 3f             	and    ecx,0x3f
c001f583:	83 e2 0f             	and    edx,0xf
c001f586:	89 d5                	mov    ebp,edx
c001f588:	83 e5 03             	and    ebp,0x3
c001f58b:	c1 e5 06             	shl    ebp,0x6
c001f58e:	09 e9                	or     ecx,ebp
c001f590:	89 d5                	mov    ebp,edx
c001f592:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f598:	c1 ed 02             	shr    ebp,0x2
c001f59b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f5a1:	83 e1 c0             	and    ecx,0xffffffc0
c001f5a4:	09 e9                	or     ecx,ebp
c001f5a6:	89 c5                	mov    ebp,eax
c001f5a8:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f5ae:	c1 ed 08             	shr    ebp,0x8
c001f5b1:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f5b7:	83 e5 30             	and    ebp,0x30
c001f5ba:	83 e1 cf             	and    ecx,0xffffffcf
c001f5bd:	09 e9                	or     ecx,ebp
c001f5bf:	83 fa 06             	cmp    edx,0x6
c001f5c2:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f5c8:	74 05                	je     c001f5cf <CPU::detectFeatures()+0x54f>
c001f5ca:	83 fa 0f             	cmp    edx,0xf
c001f5cd:	75 64                	jne    c001f633 <CPU::detectFeatures()+0x5b3>
c001f5cf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f5d5:	89 c1                	mov    ecx,eax
c001f5d7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f5dd:	c1 e9 10             	shr    ecx,0x10
c001f5e0:	c1 e1 04             	shl    ecx,0x4
c001f5e3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f5e7:	0f b6 c9             	movzx  ecx,cl
c001f5ea:	c1 e1 06             	shl    ecx,0x6
c001f5ed:	09 e9                	or     ecx,ebp
c001f5ef:	83 fa 0f             	cmp    edx,0xf
c001f5f2:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f5f9:	75 38                	jne    c001f633 <CPU::detectFeatures()+0x5b3>
c001f5fb:	c1 e8 14             	shr    eax,0x14
c001f5fe:	83 c0 0f             	add    eax,0xf
c001f601:	0f b6 c0             	movzx  eax,al
c001f604:	89 c2                	mov    edx,eax
c001f606:	c1 e8 02             	shr    eax,0x2
c001f609:	83 e2 03             	and    edx,0x3
c001f60c:	89 d1                	mov    ecx,edx
c001f60e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f614:	c1 e1 06             	shl    ecx,0x6
c001f617:	83 e2 3f             	and    edx,0x3f
c001f61a:	09 ca                	or     edx,ecx
c001f61c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f622:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f628:	83 e2 c0             	and    edx,0xffffffc0
c001f62b:	09 d0                	or     eax,edx
c001f62d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f633:	83 ec 0c             	sub    esp,0xc
c001f636:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f63c:	83 c8 07             	or     eax,0x7
c001f63f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f645:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f649:	50                   	push   eax
c001f64a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f64e:	55                   	push   ebp
c001f64f:	57                   	push   edi
c001f650:	56                   	push   esi
c001f651:	68 00 00 00 80       	push   0x80000000
c001f656:	e8 59 f8 ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f65b:	83 c4 20             	add    esp,0x20
c001f65e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f666:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f66a:	76 1e                	jbe    c001f68a <CPU::detectFeatures()+0x60a>
c001f66c:	83 ec 0c             	sub    esp,0xc
c001f66f:	50                   	push   eax
c001f670:	55                   	push   ebp
c001f671:	57                   	push   edi
c001f672:	56                   	push   esi
c001f673:	68 01 00 00 80       	push   0x80000001
c001f678:	e8 37 f8 ff ff       	call   c001eeb4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f67d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f687:	83 c4 20             	add    esp,0x20
c001f68a:	52                   	push   edx
c001f68b:	52                   	push   edx
c001f68c:	68 2d 27 03 c0       	push   0xc003272d
c001f691:	53                   	push   ebx
c001f692:	e8 87 bd ff ff       	call   c001b41e <Device::setName(char const*)>
c001f697:	83 c4 10             	add    esp,0x10
c001f69a:	eb 69                	jmp    c001f705 <CPU::detectFeatures()+0x685>
c001f69c:	50                   	push   eax
c001f69d:	50                   	push   eax
c001f69e:	68 92 26 03 c0       	push   0xc0032692
c001f6a3:	55                   	push   ebp
c001f6a4:	e8 97 0f fe ff       	call   c0000640 <strcpy>
c001f6a9:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f6b3:	e8 0b 0b fe ff       	call   c00001c3 <is486>
c001f6b8:	83 c4 10             	add    esp,0x10
c001f6bb:	85 c0                	test   eax,eax
c001f6bd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6c3:	74 1f                	je     c001f6e4 <CPU::detectFeatures()+0x664>
c001f6c5:	83 c8 07             	or     eax,0x7
c001f6c8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6ce:	0f 20 c0             	mov    eax,cr0
c001f6d1:	83 e0 14             	and    eax,0x14
c001f6d4:	83 f8 04             	cmp    eax,0x4
c001f6d7:	75 10                	jne    c001f6e9 <CPU::detectFeatures()+0x669>
c001f6d9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6df:	83 e0 fd             	and    eax,0xfffffffd
c001f6e2:	eb 1b                	jmp    c001f6ff <CPU::detectFeatures()+0x67f>
c001f6e4:	83 e0 f8             	and    eax,0xfffffff8
c001f6e7:	eb df                	jmp    c001f6c8 <CPU::detectFeatures()+0x648>
c001f6e9:	e8 b0 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f6ee:	83 e0 01             	and    eax,0x1
c001f6f1:	8d 14 00             	lea    edx,[eax+eax*1]
c001f6f4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6fa:	83 e0 fd             	and    eax,0xfffffffd
c001f6fd:	09 d0                	or     eax,edx
c001f6ff:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f705:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f70c:	74 17                	je     c001f725 <CPU::detectFeatures()+0x6a5>
c001f70e:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f714:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f71a:	83 c8 10             	or     eax,0x10
c001f71d:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f723:	eb 20                	jmp    c001f745 <CPU::detectFeatures()+0x6c5>
c001f725:	e8 74 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f72a:	83 e0 01             	and    eax,0x1
c001f72d:	8d 14 00             	lea    edx,[eax+eax*1]
c001f730:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f736:	83 e0 fd             	and    eax,0xfffffffd
c001f739:	09 d0                	or     eax,edx
c001f73b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f741:	a8 02                	test   al,0x2
c001f743:	75 c9                	jne    c001f70e <CPU::detectFeatures()+0x68e>
c001f745:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f74c:	83 c4 2c             	add    esp,0x2c
c001f74f:	5b                   	pop    ebx
c001f750:	5e                   	pop    esi
c001f751:	5f                   	pop    edi
c001f752:	5d                   	pop    ebp
c001f753:	c3                   	ret    

c001f754 <CPU::setupSMEP()>:
c001f754:	0f 20 e0             	mov    eax,cr4
c001f757:	0d 00 00 10 00       	or     eax,0x100000
c001f75c:	0f 22 e0             	mov    cr4,eax
c001f75f:	c3                   	ret    

c001f760 <CPU::setupUMIP()>:
c001f760:	0f 20 e0             	mov    eax,cr4
c001f763:	80 cc 08             	or     ah,0x8
c001f766:	0f 22 e0             	mov    cr4,eax
c001f769:	c3                   	ret    

c001f76a <CPU::setupTSC()>:
c001f76a:	0f 20 e0             	mov    eax,cr4
c001f76d:	83 c8 04             	or     eax,0x4
c001f770:	0f 22 e0             	mov    cr4,eax
c001f773:	c3                   	ret    

c001f774 <CPU::setupLargePages()>:
c001f774:	0f 20 e0             	mov    eax,cr4
c001f777:	83 c8 10             	or     eax,0x10
c001f77a:	0f 22 e0             	mov    cr4,eax
c001f77d:	c3                   	ret    

c001f77e <CPU::setupPAT()>:
c001f77e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f783:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f78a:	74 2c                	je     c001f7b8 <CPU::setupPAT()+0x3a>
c001f78c:	53                   	push   ebx
c001f78d:	83 ec 10             	sub    esp,0x10
c001f790:	68 77 02 00 00       	push   0x277
c001f795:	50                   	push   eax
c001f796:	e8 29 62 ff ff       	call   c00159c4 <Computer::rdmsr(unsigned int)>
c001f79b:	83 e2 f8             	and    edx,0xfffffff8
c001f79e:	83 ca 01             	or     edx,0x1
c001f7a1:	52                   	push   edx
c001f7a2:	50                   	push   eax
c001f7a3:	68 77 02 00 00       	push   0x277
c001f7a8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f7ae:	e8 3d 62 ff ff       	call   c00159f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f7b3:	83 c4 28             	add    esp,0x28
c001f7b6:	5b                   	pop    ebx
c001f7b7:	c3                   	ret    
c001f7b8:	c3                   	ret    
c001f7b9:	90                   	nop

c001f7ba <CPU::setupMTRR()>:
c001f7ba:	c3                   	ret    
c001f7bb:	90                   	nop

c001f7bc <CPU::setupGlobalPages()>:
c001f7bc:	0f 20 e0             	mov    eax,cr4
c001f7bf:	0c 80                	or     al,0x80
c001f7c1:	0f 22 e0             	mov    cr4,eax
c001f7c4:	c3                   	ret    
c001f7c5:	90                   	nop

c001f7c6 <CPU::allowUsermodeDataAccess()>:
c001f7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ca:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7d1:	74 03                	je     c001f7d6 <CPU::allowUsermodeDataAccess()+0x10>
c001f7d3:	0f 01 cb             	stac   
c001f7d6:	c3                   	ret    
c001f7d7:	90                   	nop

c001f7d8 <CPU::prohibitUsermodeDataAccess()>:
c001f7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7dc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7e3:	74 03                	je     c001f7e8 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f7e5:	0f 01 ca             	clac   
c001f7e8:	c3                   	ret    
c001f7e9:	90                   	nop

c001f7ea <CPU::setupSMAP()>:
c001f7ea:	0f 20 e0             	mov    eax,cr4
c001f7ed:	0d 00 00 20 00       	or     eax,0x200000
c001f7f2:	0f 22 e0             	mov    cr4,eax
c001f7f5:	eb e1                	jmp    c001f7d8 <CPU::prohibitUsermodeDataAccess()>
c001f7f7:	90                   	nop

c001f7f8 <CPU::setupFeatures()>:
c001f7f8:	53                   	push   ebx
c001f7f9:	83 ec 08             	sub    esp,0x8
c001f7fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f800:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f807:	74 18                	je     c001f821 <CPU::setupFeatures()+0x29>
c001f809:	83 ec 0c             	sub    esp,0xc
c001f80c:	68 39 27 03 c0       	push   0xc0032739
c001f811:	e8 33 9a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001f816:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f819:	e8 42 ff ff ff       	call   c001f760 <CPU::setupUMIP()>
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f828:	74 18                	je     c001f842 <CPU::setupFeatures()+0x4a>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	68 43 27 03 c0       	push   0xc0032743
c001f832:	e8 12 9a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001f837:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f83a:	e8 2b ff ff ff       	call   c001f76a <CPU::setupTSC()>
c001f83f:	83 c4 10             	add    esp,0x10
c001f842:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f849:	74 18                	je     c001f863 <CPU::setupFeatures()+0x6b>
c001f84b:	83 ec 0c             	sub    esp,0xc
c001f84e:	68 4c 27 03 c0       	push   0xc003274c
c001f853:	e8 f1 99 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001f858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f85b:	e8 14 ff ff ff       	call   c001f774 <CPU::setupLargePages()>
c001f860:	83 c4 10             	add    esp,0x10
c001f863:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f86a:	74 18                	je     c001f884 <CPU::setupFeatures()+0x8c>
c001f86c:	83 ec 0c             	sub    esp,0xc
c001f86f:	68 55 27 03 c0       	push   0xc0032755
c001f874:	e8 d0 99 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001f879:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f87c:	e8 3b ff ff ff       	call   c001f7bc <CPU::setupGlobalPages()>
c001f881:	83 c4 10             	add    esp,0x10
c001f884:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f88b:	74 18                	je     c001f8a5 <CPU::setupFeatures()+0xad>
c001f88d:	83 ec 0c             	sub    esp,0xc
c001f890:	68 67 27 03 c0       	push   0xc0032767
c001f895:	e8 af 99 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001f89a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f89d:	e8 dc fe ff ff       	call   c001f77e <CPU::setupPAT()>
c001f8a2:	83 c4 10             	add    esp,0x10
c001f8a5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f8ac:	74 11                	je     c001f8bf <CPU::setupFeatures()+0xc7>
c001f8ae:	c7 44 24 10 70 27 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032770
c001f8b6:	83 c4 08             	add    esp,0x8
c001f8b9:	5b                   	pop    ebx
c001f8ba:	e9 8a 99 ff ff       	jmp    c0019249 <Dbg::kprintf(char const*, ...)>
c001f8bf:	83 c4 08             	add    esp,0x8
c001f8c2:	5b                   	pop    ebx
c001f8c3:	c3                   	ret    

c001f8c4 <CPU::open(int, int, void*)>:
c001f8c4:	55                   	push   ebp
c001f8c5:	57                   	push   edi
c001f8c6:	56                   	push   esi
c001f8c7:	53                   	push   ebx
c001f8c8:	83 ec 18             	sub    esp,0x18
c001f8cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f8cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8d7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f8dd:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f8e3:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f8e9:	50                   	push   eax
c001f8ea:	e8 d3 63 ff ff       	call   c0015cc2 <GDT::setup()>
c001f8ef:	83 c4 0c             	add    esp,0xc
c001f8f2:	6a 00                	push   0x0
c001f8f4:	68 ef be ad de       	push   0xdeadbeef
c001f8f9:	55                   	push   ebp
c001f8fa:	e8 8d 7f ff ff       	call   c001788c <TSS::setup(unsigned long, unsigned long)>
c001f8ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f902:	e8 65 7f ff ff       	call   c001786c <TSS::flush()>
c001f907:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f90d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f910:	e8 11 66 ff ff       	call   c0015f26 <IDT::setup()>
c001f915:	b8 00 04 00 00       	mov    eax,0x400
c001f91a:	0f 23 f8             	mov    db7,eax
c001f91d:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f927:	e8 97 6d ff ff       	call   c00166c3 <Phys::allocatePage()>
c001f92c:	83 c4 10             	add    esp,0x10
c001f92f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f935:	85 f6                	test   esi,esi
c001f937:	89 38                	mov    DWORD PTR [eax],edi
c001f939:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f93f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f942:	74 10                	je     c001f954 <CPU::open(int, int, void*)+0x90>
c001f944:	50                   	push   eax
c001f945:	50                   	push   eax
c001f946:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f94c:	56                   	push   esi
c001f94d:	e8 60 88 ff ff       	call   c00181b2 <VAS::setCPUSpecific(unsigned long)>
c001f952:	eb 0d                	jmp    c001f961 <CPU::open(int, int, void*)+0x9d>
c001f954:	83 ec 0c             	sub    esp,0xc
c001f957:	68 7a 27 03 c0       	push   0xc003277a
c001f95c:	e8 01 09 00 00       	call   c0020262 <KePanic(char const*)>
c001f961:	83 c4 10             	add    esp,0x10
c001f964:	83 ec 0c             	sub    esp,0xc
c001f967:	68 88 27 03 c0       	push   0xc0032788
c001f96c:	e8 8e 01 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001f971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f974:	e8 07 f7 ff ff       	call   c001f080 <CPU::detectFeatures()>
c001f979:	c7 04 24 ab 27 03 c0 	mov    DWORD PTR [esp],0xc00327ab
c001f980:	e8 7a 01 00 00       	call   c001faff <KeSetBootMessage(char const*)>
c001f985:	e8 f7 76 00 00       	call   c0027081 <HalInitialise()>
c001f98a:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f98f:	83 e0 10             	and    eax,0x10
c001f992:	83 f8 01             	cmp    eax,0x1
c001f995:	19 c0                	sbb    eax,eax
c001f997:	83 e0 46             	and    eax,0x46
c001f99a:	83 c0 1e             	add    eax,0x1e
c001f99d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9a0:	e8 5c d3 ff ff       	call   c001cd01 <setupTimer(int)>
c001f9a5:	83 c4 10             	add    esp,0x10
c001f9a8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f9ae:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f9b5:	74 0c                	je     c001f9c3 <CPU::open(int, int, void*)+0xff>
c001f9b7:	83 ec 0c             	sub    esp,0xc
c001f9ba:	53                   	push   ebx
c001f9bb:	e8 38 fe ff ff       	call   c001f7f8 <CPU::setupFeatures()>
c001f9c0:	83 c4 10             	add    esp,0x10
c001f9c3:	83 c4 0c             	add    esp,0xc
c001f9c6:	31 c0                	xor    eax,eax
c001f9c8:	5b                   	pop    ebx
c001f9c9:	5e                   	pop    esi
c001f9ca:	5f                   	pop    edi
c001f9cb:	5d                   	pop    ebp
c001f9cc:	c3                   	ret    

c001f9cd <KeInitialiseAtexit()>:
c001f9cd:	83 ec 10             	sub    esp,0x10
c001f9d0:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f9da:	6a 60                	push   0x60
c001f9dc:	6a 00                	push   0x0
c001f9de:	68 20 f9 03 c0       	push   0xc003f920
c001f9e3:	e8 08 0b fe ff       	call   c00004f0 <memset>
c001f9e8:	83 c4 1c             	add    esp,0x1c
c001f9eb:	c3                   	ret    

c001f9ec <KeRegisterAtexit(void (*)(void*), void*)>:
c001f9ec:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f9f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9f5:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f9fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa00:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fa07:	40                   	inc    eax
c001fa08:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fa0d:	83 f8 17             	cmp    eax,0x17
c001fa10:	7e 0d                	jle    c001fa1f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fa12:	c7 44 24 04 ec 27 03 c0 	mov    DWORD PTR [esp+0x4],0xc00327ec
c001fa1a:	e9 43 08 00 00       	jmp    c0020262 <KePanic(char const*)>
c001fa1f:	c3                   	ret    

c001fa20 <KeExecuteAtexit()>:
c001fa20:	53                   	push   ebx
c001fa21:	31 db                	xor    ebx,ebx
c001fa23:	83 ec 08             	sub    esp,0x8
c001fa26:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fa2c:	7e 50                	jle    c001fa7e <KeExecuteAtexit()+0x5e>
c001fa2e:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fa35:	85 c0                	test   eax,eax
c001fa37:	74 42                	je     c001fa7b <KeExecuteAtexit()+0x5b>
c001fa39:	51                   	push   ecx
c001fa3a:	50                   	push   eax
c001fa3b:	53                   	push   ebx
c001fa3c:	68 05 28 03 c0       	push   0xc0032805
c001fa41:	e8 03 98 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001fa46:	58                   	pop    eax
c001fa47:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fa4e:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fa55:	c7 04 24 27 28 03 c0 	mov    DWORD PTR [esp],0xc0032827
c001fa5c:	e8 e8 97 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001fa61:	c7 04 24 d3 39 03 c0 	mov    DWORD PTR [esp],0xc00339d3
c001fa68:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fa73:	e8 d1 97 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001fa78:	83 c4 10             	add    esp,0x10
c001fa7b:	43                   	inc    ebx
c001fa7c:	eb a8                	jmp    c001fa26 <KeExecuteAtexit()+0x6>
c001fa7e:	83 c4 08             	add    esp,0x8
c001fa81:	5b                   	pop    ebx
c001fa82:	c3                   	ret    

c001fa83 <KeDisplaySplashScreen()>:
c001fa83:	55                   	push   ebp
c001fa84:	bd 05 00 00 00       	mov    ebp,0x5
c001fa89:	57                   	push   edi
c001fa8a:	bf 0a 00 00 00       	mov    edi,0xa
c001fa8f:	56                   	push   esi
c001fa90:	31 f6                	xor    esi,esi
c001fa92:	53                   	push   ebx
c001fa93:	31 db                	xor    ebx,ebx
c001fa95:	83 ec 0c             	sub    esp,0xc
c001fa98:	0f b6 96 40 3c 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc3c0]
c001fa9f:	89 d0                	mov    eax,edx
c001faa1:	85 d2                	test   edx,edx
c001faa3:	74 52                	je     c001faf7 <KeDisplaySplashScreen()+0x74>
c001faa5:	80 bb 76 3c 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc38a],0xdb
c001faac:	75 13                	jne    c001fac1 <KeDisplaySplashScreen()+0x3e>
c001faae:	0f b6 8b 75 3c 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc38b]
c001fab5:	83 e1 fe             	and    ecx,0xfffffffe
c001fab8:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fabe:	75 01                	jne    c001fac1 <KeDisplaySplashScreen()+0x3e>
c001fac0:	47                   	inc    edi
c001fac1:	83 fa 0d             	cmp    edx,0xd
c001fac4:	74 28                	je     c001faee <KeDisplaySplashScreen()+0x6b>
c001fac6:	83 fa 0a             	cmp    edx,0xa
c001fac9:	75 0a                	jne    c001fad5 <KeDisplaySplashScreen()+0x52>
c001facb:	45                   	inc    ebp
c001facc:	bf 0a 00 00 00       	mov    edi,0xa
c001fad1:	31 db                	xor    ebx,ebx
c001fad3:	eb 19                	jmp    c001faee <KeDisplaySplashScreen()+0x6b>
c001fad5:	83 ec 0c             	sub    esp,0xc
c001fad8:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fadb:	55                   	push   ebp
c001fadc:	0f be c0             	movsx  eax,al
c001fadf:	52                   	push   edx
c001fae0:	43                   	inc    ebx
c001fae1:	6a 00                	push   0x0
c001fae3:	6a 0e                	push   0xe
c001fae5:	50                   	push   eax
c001fae6:	e8 15 82 00 00       	call   c0027d00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001faeb:	83 c4 20             	add    esp,0x20
c001faee:	46                   	inc    esi
c001faef:	81 fe 42 01 00 00    	cmp    esi,0x142
c001faf5:	75 a1                	jne    c001fa98 <KeDisplaySplashScreen()+0x15>
c001faf7:	83 c4 0c             	add    esp,0xc
c001fafa:	5b                   	pop    ebx
c001fafb:	5e                   	pop    esi
c001fafc:	5f                   	pop    edi
c001fafd:	5d                   	pop    ebp
c001fafe:	c3                   	ret    

c001faff <KeSetBootMessage(char const*)>:
c001faff:	57                   	push   edi
c001fb00:	56                   	push   esi
c001fb01:	53                   	push   ebx
c001fb02:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fb08:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fb0f:	68 9e 00 00 00       	push   0x9e
c001fb14:	6a 00                	push   0x0
c001fb16:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fb1a:	56                   	push   esi
c001fb1b:	e8 d0 09 fe ff       	call   c00004f0 <memset>
c001fb20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb23:	e8 48 0a fe ff       	call   c0000570 <strlen>
c001fb28:	ba 50 00 00 00       	mov    edx,0x50
c001fb2d:	83 c4 10             	add    esp,0x10
c001fb30:	29 c2                	sub    edx,eax
c001fb32:	31 c9                	xor    ecx,ecx
c001fb34:	83 e2 fe             	and    edx,0xfffffffe
c001fb37:	01 f2                	add    edx,esi
c001fb39:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fb3e:	84 c0                	test   al,al
c001fb40:	74 0a                	je     c001fb4c <KeSetBootMessage(char const*)+0x4d>
c001fb42:	80 cc 0f             	or     ah,0xf
c001fb45:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fb49:	41                   	inc    ecx
c001fb4a:	eb ed                	jmp    c001fb39 <KeSetBootMessage(char const*)+0x3a>
c001fb4c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fb51:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fb56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb58:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fb5e:	5b                   	pop    ebx
c001fb5f:	5e                   	pop    esi
c001fb60:	5f                   	pop    edi
c001fb61:	c3                   	ret    
c001fb62:	66 90                	xchg   ax,ax

c001fb64 <CUnlockScheduler>:
c001fb64:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb69:	83 e8 01             	sub    eax,0x1
c001fb6c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb71:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb76:	85 c0                	test   eax,eax
c001fb78:	75 02                	jne    c001fb7c <CUnlockScheduler+0x18>
c001fb7a:	fb                   	sti    
c001fb7b:	90                   	nop
c001fb7c:	90                   	nop
c001fb7d:	c3                   	ret    
c001fb7e:	66 90                	xchg   ax,ax

c001fb80 <CLockScheduler>:
c001fb80:	fa                   	cli    
c001fb81:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb86:	83 c0 01             	add    eax,0x1
c001fb89:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb8e:	90                   	nop
c001fb8f:	c3                   	ret    

c001fb90 <CPrintf>:
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	83 ec 08             	sub    esp,0x8
c001fb96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb9a:	68 b0 fa 02 c0       	push   0xc002fab0
c001fb9f:	e8 a5 96 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	90                   	nop
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

c001fbac <Krnl::handlePowerButton()>:
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	e8 09 07 00 00       	call   c00202bd <KeHandlePowerButton()>
c001fbb4:	90                   	nop
c001fbb5:	83 c4 0c             	add    esp,0xc
c001fbb8:	c3                   	ret    
c001fbb9:	8d 76 00             	lea    esi,[esi+0x0]

c001fbbc <Krnl::handleSleepButton()>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	e8 2e 07 00 00       	call   c00202f2 <KeHandleSleepButton()>
c001fbc4:	90                   	nop
c001fbc5:	83 c4 0c             	add    esp,0xc
c001fbc8:	c3                   	ret    

c001fbc9 <KeCalculateCRC32(unsigned char*, int)>:
c001fbc9:	53                   	push   ebx
c001fbca:	83 c8 ff             	or     eax,0xffffffff
c001fbcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbd5:	01 cb                	add    ebx,ecx
c001fbd7:	39 d9                	cmp    ecx,ebx
c001fbd9:	74 15                	je     c001fbf0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fbdb:	41                   	inc    ecx
c001fbdc:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fbdf:	31 c2                	xor    edx,eax
c001fbe1:	c1 e8 08             	shr    eax,0x8
c001fbe4:	0f b6 d2             	movzx  edx,dl
c001fbe7:	33 04 95 a0 3d 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc260]
c001fbee:	eb e7                	jmp    c001fbd7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fbf0:	f7 d0                	not    eax
c001fbf2:	5b                   	pop    ebx
c001fbf3:	c3                   	ret    

c001fbf4 <EnvVarContainer::getEnv(char const*)>:
c001fbf4:	57                   	push   edi
c001fbf5:	56                   	push   esi
c001fbf6:	53                   	push   ebx
c001fbf7:	31 db                	xor    ebx,ebx
c001fbf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbfd:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fbff:	7e 2b                	jle    c001fc2c <EnvVarContainer::getEnv(char const*)+0x38>
c001fc01:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fc08:	50                   	push   eax
c001fc09:	50                   	push   eax
c001fc0a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc0d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fc10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc14:	e8 37 0b fe ff       	call   c0000750 <strcmp>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	85 c0                	test   eax,eax
c001fc1e:	75 09                	jne    c001fc29 <EnvVarContainer::getEnv(char const*)+0x35>
c001fc20:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc23:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fc27:	eb 05                	jmp    c001fc2e <EnvVarContainer::getEnv(char const*)+0x3a>
c001fc29:	43                   	inc    ebx
c001fc2a:	eb d1                	jmp    c001fbfd <EnvVarContainer::getEnv(char const*)+0x9>
c001fc2c:	31 c0                	xor    eax,eax
c001fc2e:	5b                   	pop    ebx
c001fc2f:	5e                   	pop    esi
c001fc30:	5f                   	pop    edi
c001fc31:	c3                   	ret    

c001fc32 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fc32:	55                   	push   ebp
c001fc33:	57                   	push   edi
c001fc34:	56                   	push   esi
c001fc35:	53                   	push   ebx
c001fc36:	83 ec 28             	sub    esp,0x28
c001fc39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fc3d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fc41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc45:	56                   	push   esi
c001fc46:	e8 25 09 fe ff       	call   c0000570 <strlen>
c001fc4b:	40                   	inc    eax
c001fc4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc4f:	e8 66 67 ff ff       	call   c00163ba <malloc>
c001fc54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc5b:	e8 10 09 fe ff       	call   c0000570 <strlen>
c001fc60:	40                   	inc    eax
c001fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc64:	e8 51 67 ff ff       	call   c00163ba <malloc>
c001fc69:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc70:	e8 fb 08 fe ff       	call   c0000570 <strlen>
c001fc75:	83 c4 0c             	add    esp,0xc
c001fc78:	40                   	inc    eax
c001fc79:	50                   	push   eax
c001fc7a:	6a 00                	push   0x0
c001fc7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc80:	e8 6b 08 fe ff       	call   c00004f0 <memset>
c001fc85:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc88:	e8 e3 08 fe ff       	call   c0000570 <strlen>
c001fc8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fc91:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc99:	89 de                	mov    esi,ebx
c001fc9b:	e8 d0 08 fe ff       	call   c0000570 <strlen>
c001fca0:	83 c4 0c             	add    esp,0xc
c001fca3:	40                   	inc    eax
c001fca4:	50                   	push   eax
c001fca5:	6a 00                	push   0x0
c001fca7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcab:	e8 40 08 fe ff       	call   c00004f0 <memset>
c001fcb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcb3:	e8 b8 08 fe ff       	call   c0000570 <strlen>
c001fcb8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fcbc:	8d 48 01             	lea    ecx,[eax+0x1]
c001fcbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fcc4:	40                   	inc    eax
c001fcc5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fcc8:	c1 e0 03             	shl    eax,0x3
c001fccb:	5a                   	pop    edx
c001fccc:	59                   	pop    ecx
c001fccd:	50                   	push   eax
c001fcce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fcd1:	e8 d0 66 ff ff       	call   c00163a6 <realloc>
c001fcd6:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fcda:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fcdd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fce0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fce4:	b9 08 00 00 00       	mov    ecx,0x8
c001fce9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fceb:	83 c4 2c             	add    esp,0x2c
c001fcee:	5b                   	pop    ebx
c001fcef:	5e                   	pop    esi
c001fcf0:	5f                   	pop    edi
c001fcf1:	5d                   	pop    ebp
c001fcf2:	c3                   	ret    
c001fcf3:	90                   	nop

c001fcf4 <EnvVarContainer::deleteEnv(char const*)>:
c001fcf4:	c3                   	ret    
c001fcf5:	90                   	nop

c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fcf6:	55                   	push   ebp
c001fcf7:	57                   	push   edi
c001fcf8:	56                   	push   esi
c001fcf9:	53                   	push   ebx
c001fcfa:	81 ec 38 01 00 00    	sub    esp,0x138
c001fd00:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fd07:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fd0e:	68 14 01 00 00       	push   0x114
c001fd13:	e8 a2 66 ff ff       	call   c00163ba <malloc>
c001fd18:	83 c4 0c             	add    esp,0xc
c001fd1b:	89 c3                	mov    ebx,eax
c001fd1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd20:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fd27:	50                   	push   eax
c001fd28:	e8 23 a7 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c001fd2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd30:	e8 fd a9 ff ff       	call   c001a732 <File::exists()>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	84 c0                	test   al,al
c001fd3a:	75 31                	jne    c001fd6d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fd3c:	50                   	push   eax
c001fd3d:	50                   	push   eax
c001fd3e:	6a 12                	push   0x12
c001fd40:	53                   	push   ebx
c001fd41:	e8 28 a7 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c001fd46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd48:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fd4b:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd4e:	e8 1d 08 fe ff       	call   c0000570 <strlen>
c001fd53:	5a                   	pop    edx
c001fd54:	31 d2                	xor    edx,edx
c001fd56:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fd5a:	51                   	push   ecx
c001fd5b:	56                   	push   esi
c001fd5c:	52                   	push   edx
c001fd5d:	50                   	push   eax
c001fd5e:	53                   	push   ebx
c001fd5f:	ff d7                	call   edi
c001fd61:	83 c4 14             	add    esp,0x14
c001fd64:	53                   	push   ebx
c001fd65:	e8 62 a7 ff ff       	call   c001a4cc <File::close()>
c001fd6a:	83 c4 10             	add    esp,0x10
c001fd6d:	56                   	push   esi
c001fd6e:	31 f6                	xor    esi,esi
c001fd70:	68 00 01 00 00       	push   0x100
c001fd75:	6a 00                	push   0x0
c001fd77:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fd7b:	50                   	push   eax
c001fd7c:	e8 6f 07 fe ff       	call   c00004f0 <memset>
c001fd81:	5f                   	pop    edi
c001fd82:	58                   	pop    eax
c001fd83:	6a 01                	push   0x1
c001fd85:	53                   	push   ebx
c001fd86:	e8 e3 a6 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c001fd8b:	83 c4 10             	add    esp,0x10
c001fd8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd96:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fd9e:	83 ec 0c             	sub    esp,0xc
c001fda1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fda3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fda7:	51                   	push   ecx
c001fda8:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fdac:	52                   	push   edx
c001fdad:	6a 00                	push   0x0
c001fdaf:	6a 01                	push   0x1
c001fdb1:	53                   	push   ebx
c001fdb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fdb5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fdba:	83 c4 20             	add    esp,0x20
c001fdbd:	89 c2                	mov    edx,eax
c001fdbf:	85 c0                	test   eax,eax
c001fdc1:	0f 84 36 01 00 00    	je     c001fefd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fdc7:	83 f8 0d             	cmp    eax,0xd
c001fdca:	0f 84 22 01 00 00    	je     c001fef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fdd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fdd5:	0f 84 f0 00 00 00    	je     c001fecb <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fddb:	83 f8 0a             	cmp    eax,0xa
c001fdde:	74 13                	je     c001fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fde0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fde5:	74 0c                	je     c001fdf3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fde7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fded:	0f 8e f6 00 00 00    	jle    c001fee9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fdf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdf7:	83 ec 0c             	sub    esp,0xc
c001fdfa:	8d 78 01             	lea    edi,[eax+0x1]
c001fdfd:	57                   	push   edi
c001fdfe:	e8 b7 65 ff ff       	call   c00163ba <malloc>
c001fe03:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fe07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fe0b:	8d 56 04             	lea    edx,[esi+0x4]
c001fe0e:	89 14 24             	mov    DWORD PTR [esp],edx
c001fe11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe15:	e8 a0 65 ff ff       	call   c00163ba <malloc>
c001fe1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	57                   	push   edi
c001fe22:	6a 00                	push   0x0
c001fe24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fe28:	e8 c3 06 fe ff       	call   c00004f0 <memset>
c001fe2d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe31:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fe35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe3b:	83 c4 0c             	add    esp,0xc
c001fe3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe42:	52                   	push   edx
c001fe43:	6a 00                	push   0x0
c001fe45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe49:	e8 a2 06 fe ff       	call   c00004f0 <memset>
c001fe4e:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe52:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fe56:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe59:	e8 12 07 fe ff       	call   c0000570 <strlen>
c001fe5e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fe62:	89 c1                	mov    ecx,eax
c001fe64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe66:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fe69:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fe6c:	40                   	inc    eax
c001fe6d:	83 c4 10             	add    esp,0x10
c001fe70:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fe73:	85 d2                	test   edx,edx
c001fe75:	75 0c                	jne    c001fe83 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fe77:	83 ec 0c             	sub    esp,0xc
c001fe7a:	6a 08                	push   0x8
c001fe7c:	e8 39 65 ff ff       	call   c00163ba <malloc>
c001fe81:	eb 0c                	jmp    c001fe8f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fe83:	c1 e0 03             	shl    eax,0x3
c001fe86:	51                   	push   ecx
c001fe87:	51                   	push   ecx
c001fe88:	50                   	push   eax
c001fe89:	52                   	push   edx
c001fe8a:	e8 17 65 ff ff       	call   c00163a6 <realloc>
c001fe8f:	83 c4 10             	add    esp,0x10
c001fe92:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fe95:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fe98:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fe9b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fe9f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fea3:	b9 08 00 00 00       	mov    ecx,0x8
c001fea8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001feaa:	31 f6                	xor    esi,esi
c001feac:	50                   	push   eax
c001fead:	68 00 01 00 00       	push   0x100
c001feb2:	6a 00                	push   0x0
c001feb4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001feb8:	50                   	push   eax
c001feb9:	e8 32 06 fe ff       	call   c00004f0 <memset>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fec9:	eb 27                	jmp    c001fef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fecb:	83 f8 3d             	cmp    eax,0x3d
c001fece:	74 1e                	je     c001feee <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fed0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fed6:	7f 07                	jg     c001fedf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fed8:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fedc:	46                   	inc    esi
c001fedd:	eb 13                	jmp    c001fef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fedf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fee7:	eb 09                	jmp    c001fef2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fee9:	83 f8 3d             	cmp    eax,0x3d
c001feec:	75 ea                	jne    c001fed8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001feee:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fef7:	0f 85 99 fe ff ff    	jne    c001fd96 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fefd:	83 ec 0c             	sub    esp,0xc
c001ff00:	53                   	push   ebx
c001ff01:	e8 c6 a5 ff ff       	call   c001a4cc <File::close()>
c001ff06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ff0e:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ff14:	5b                   	pop    ebx
c001ff15:	5e                   	pop    esi
c001ff16:	5f                   	pop    edi
c001ff17:	5d                   	pop    ebp
c001ff18:	c3                   	ret    
c001ff19:	90                   	nop

c001ff1a <EnvVarContainer::__loadSystem()>:
c001ff1a:	83 ec 10             	sub    esp,0x10
c001ff1d:	68 a0 41 03 c0       	push   0xc00341a0
c001ff22:	68 2c 28 03 c0       	push   0xc003282c
c001ff27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2b:	e8 c6 fd ff ff       	call   c001fcf6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001ff30:	83 c4 1c             	add    esp,0x1c
c001ff33:	c3                   	ret    

c001ff34 <EnvVarContainer::__loadUser()>:
c001ff34:	c3                   	ret    
c001ff35:	90                   	nop

c001ff36 <EnvVarContainer::EnvVarContainer(Process*)>:
c001ff36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff48:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff56:	90                   	nop
c001ff57:	c3                   	ret    

c001ff58 <EnvVarContainer::~EnvVarContainer()>:
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff62:	85 c0                	test   eax,eax
c001ff64:	74 1d                	je     c001ff83 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6c:	85 c0                	test   eax,eax
c001ff6e:	74 13                	je     c001ff83 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	50                   	push   eax
c001ff7b:	e8 4a 64 ff ff       	call   c00163ca <free>
c001ff80:	83 c4 10             	add    esp,0x10
c001ff83:	90                   	nop
c001ff84:	83 c4 0c             	add    esp,0xc
c001ff87:	c3                   	ret    

c001ff88 <KeGetEnv(Process*, char const*)>:
c001ff88:	53                   	push   ebx
c001ff89:	83 ec 08             	sub    esp,0x8
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff94:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001ff9a:	74 04                	je     c001ffa0 <KeGetEnv(Process*, char const*)+0x18>
c001ff9c:	85 c0                	test   eax,eax
c001ff9e:	75 0b                	jne    c001ffab <KeGetEnv(Process*, char const*)+0x23>
c001ffa0:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ffa5:	85 c0                	test   eax,eax
c001ffa7:	75 19                	jne    c001ffc2 <KeGetEnv(Process*, char const*)+0x3a>
c001ffa9:	eb 27                	jmp    c001ffd2 <KeGetEnv(Process*, char const*)+0x4a>
c001ffab:	52                   	push   edx
c001ffac:	52                   	push   edx
c001ffad:	53                   	push   ebx
c001ffae:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ffb4:	e8 3b fc ff ff       	call   c001fbf4 <EnvVarContainer::getEnv(char const*)>
c001ffb9:	83 c4 10             	add    esp,0x10
c001ffbc:	85 c0                	test   eax,eax
c001ffbe:	75 28                	jne    c001ffe8 <KeGetEnv(Process*, char const*)+0x60>
c001ffc0:	eb de                	jmp    c001ffa0 <KeGetEnv(Process*, char const*)+0x18>
c001ffc2:	52                   	push   edx
c001ffc3:	52                   	push   edx
c001ffc4:	53                   	push   ebx
c001ffc5:	50                   	push   eax
c001ffc6:	e8 29 fc ff ff       	call   c001fbf4 <EnvVarContainer::getEnv(char const*)>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	85 c0                	test   eax,eax
c001ffd0:	75 16                	jne    c001ffe8 <KeGetEnv(Process*, char const*)+0x60>
c001ffd2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ffd6:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ffdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ffdf:	83 c4 08             	add    esp,0x8
c001ffe2:	5b                   	pop    ebx
c001ffe3:	e9 0c fc ff ff       	jmp    c001fbf4 <EnvVarContainer::getEnv(char const*)>
c001ffe8:	83 c4 08             	add    esp,0x8
c001ffeb:	5b                   	pop    ebx
c001ffec:	c3                   	ret    

c001ffed <KeSetEnvSystem(char const*, char const*)>:
c001ffed:	83 ec 10             	sub    esp,0x10
c001fff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fff8:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001fffe:	e8 2f fc ff ff       	call   c001fc32 <EnvVarContainer::setEnv(char const*, char const*)>
c0020003:	83 c4 1c             	add    esp,0x1c
c0020006:	c3                   	ret    

c0020007 <KeSetEnvUser(char const*, char const*)>:
c0020007:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c002000c:	85 c0                	test   eax,eax
c002000e:	74 15                	je     c0020025 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020010:	83 ec 10             	sub    esp,0x10
c0020013:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002001b:	50                   	push   eax
c002001c:	e8 11 fc ff ff       	call   c001fc32 <EnvVarContainer::setEnv(char const*, char const*)>
c0020021:	83 c4 1c             	add    esp,0x1c
c0020024:	c3                   	ret    
c0020025:	c3                   	ret    

c0020026 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0020026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020030:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020034:	e9 f9 fb ff ff       	jmp    c001fc32 <EnvVarContainer::setEnv(char const*, char const*)>

c0020039 <KeDeleteEnvSystem(char const*)>:
c0020039:	c3                   	ret    

c002003a <KeDeleteEnvUser(char const*)>:
c002003a:	c3                   	ret    

c002003b <KeDeleteEnvProcess(Process*, char const*)>:
c002003b:	c3                   	ret    

c002003c <KeNewProcessEnv(Process*)>:
c002003c:	83 ec 28             	sub    esp,0x28
c002003f:	6a 0c                	push   0xc
c0020041:	e8 74 63 ff ff       	call   c00163ba <malloc>
c0020046:	5a                   	pop    edx
c0020047:	59                   	pop    ecx
c0020048:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002004c:	50                   	push   eax
c002004d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020051:	e8 e0 fe ff ff       	call   c001ff36 <EnvVarContainer::EnvVarContainer(Process*)>
c0020056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002005a:	83 c4 2c             	add    esp,0x2c
c002005d:	c3                   	ret    

c002005e <KeCopyProcessEnv(Process*, Process*)>:
c002005e:	57                   	push   edi
c002005f:	56                   	push   esi
c0020060:	53                   	push   ebx
c0020061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020065:	83 ec 0c             	sub    esp,0xc
c0020068:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c002006e:	6a 0c                	push   0xc
c0020070:	e8 45 63 ff ff       	call   c00163ba <malloc>
c0020075:	89 c3                	mov    ebx,eax
c0020077:	58                   	pop    eax
c0020078:	5a                   	pop    edx
c0020079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002007d:	53                   	push   ebx
c002007e:	e8 b3 fe ff ff       	call   c001ff36 <EnvVarContainer::EnvVarContainer(Process*)>
c0020083:	8b 07                	mov    eax,DWORD PTR [edi]
c0020085:	89 03                	mov    DWORD PTR [ebx],eax
c0020087:	c1 e0 03             	shl    eax,0x3
c002008a:	89 04 24             	mov    DWORD PTR [esp],eax
c002008d:	e8 28 63 ff ff       	call   c00163ba <malloc>
c0020092:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0020095:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0020097:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c002009a:	c1 e1 03             	shl    ecx,0x3
c002009d:	89 c7                	mov    edi,eax
c002009f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	89 d8                	mov    eax,ebx
c00200a6:	5b                   	pop    ebx
c00200a7:	5e                   	pop    esi
c00200a8:	5f                   	pop    edi
c00200a9:	c3                   	ret    

c00200aa <KeLoadSystemEnv()>:
c00200aa:	53                   	push   ebx
c00200ab:	83 ec 14             	sub    esp,0x14
c00200ae:	6a 0c                	push   0xc
c00200b0:	e8 05 63 ff ff       	call   c00163ba <malloc>
c00200b5:	89 c3                	mov    ebx,eax
c00200b7:	58                   	pop    eax
c00200b8:	5a                   	pop    edx
c00200b9:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200bf:	53                   	push   ebx
c00200c0:	e8 71 fe ff ff       	call   c001ff36 <EnvVarContainer::EnvVarContainer(Process*)>
c00200c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200c8:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00200ce:	e8 47 fe ff ff       	call   c001ff1a <EnvVarContainer::__loadSystem()>
c00200d3:	83 c4 18             	add    esp,0x18
c00200d6:	5b                   	pop    ebx
c00200d7:	c3                   	ret    

c00200d8 <KeLoadUserEnv()>:
c00200d8:	53                   	push   ebx
c00200d9:	83 ec 14             	sub    esp,0x14
c00200dc:	6a 0c                	push   0xc
c00200de:	e8 d7 62 ff ff       	call   c00163ba <malloc>
c00200e3:	89 c3                	mov    ebx,eax
c00200e5:	58                   	pop    eax
c00200e6:	5a                   	pop    edx
c00200e7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200ed:	53                   	push   ebx
c00200ee:	e8 43 fe ff ff       	call   c001ff36 <EnvVarContainer::EnvVarContainer(Process*)>
c00200f3:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c00200f9:	83 c4 18             	add    esp,0x18
c00200fc:	5b                   	pop    ebx
c00200fd:	c3                   	ret    

c00200fe <KeFlushEnv()>:
c00200fe:	c3                   	ret    

c00200ff <KeGetProcessTotalEnvCount(Process*)>:
c00200ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020103:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020109:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002010f:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020114:	8b 00                	mov    eax,DWORD PTR [eax]
c0020116:	03 01                	add    eax,DWORD PTR [ecx]
c0020118:	85 d2                	test   edx,edx
c002011a:	74 02                	je     c002011e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c002011c:	03 02                	add    eax,DWORD PTR [edx]
c002011e:	c3                   	ret    

c002011f <KeGetProcessEnvPair(Process*, int)>:
c002011f:	57                   	push   edi
c0020120:	56                   	push   esi
c0020121:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c0020127:	53                   	push   ebx
c0020128:	85 f6                	test   esi,esi
c002012a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002012e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020132:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020138:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002013c:	8b 01                	mov    eax,DWORD PTR [ecx]
c002013e:	75 16                	jne    c0020156 <KeGetProcessEnvPair(Process*, int)+0x37>
c0020140:	39 c2                	cmp    edx,eax
c0020142:	7c 16                	jl     c002015a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020144:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002014a:	8b 31                	mov    esi,DWORD PTR [ecx]
c002014c:	01 c6                	add    esi,eax
c002014e:	39 d6                	cmp    esi,edx
c0020150:	7e 3c                	jle    c002018e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020152:	29 c2                	sub    edx,eax
c0020154:	eb 04                	jmp    c002015a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020156:	39 c2                	cmp    edx,eax
c0020158:	7d 05                	jge    c002015f <KeGetProcessEnvPair(Process*, int)+0x40>
c002015a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c002015d:	eb 20                	jmp    c002017f <KeGetProcessEnvPair(Process*, int)+0x60>
c002015f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020161:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020164:	39 d1                	cmp    ecx,edx
c0020166:	7e 04                	jle    c002016c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0020168:	29 c2                	sub    edx,eax
c002016a:	eb 10                	jmp    c002017c <KeGetProcessEnvPair(Process*, int)+0x5d>
c002016c:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c0020172:	03 0e                	add    ecx,DWORD PTR [esi]
c0020174:	39 d1                	cmp    ecx,edx
c0020176:	7e 16                	jle    c002018e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020178:	29 c2                	sub    edx,eax
c002017a:	29 fa                	sub    edx,edi
c002017c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c002017f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0020182:	8b 02                	mov    eax,DWORD PTR [edx]
c0020184:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0020187:	89 03                	mov    DWORD PTR [ebx],eax
c0020189:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c002018c:	eb 1d                	jmp    c00201ab <KeGetProcessEnvPair(Process*, int)+0x8c>
c002018e:	83 ec 0c             	sub    esp,0xc
c0020191:	68 4e 28 03 c0       	push   0xc003284e
c0020196:	e8 c7 00 00 00       	call   c0020262 <KePanic(char const*)>
c002019b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00201a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201a8:	83 c4 10             	add    esp,0x10
c00201ab:	89 d8                	mov    eax,ebx
c00201ad:	5b                   	pop    ebx
c00201ae:	5e                   	pop    esi
c00201af:	5f                   	pop    edi
c00201b0:	c2 04 00             	ret    0x4

c00201b3 <CPU::current()>:
c00201b3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00201b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201be:	c3                   	ret    

c00201bf <operator new(unsigned long)>:
c00201bf:	e9 f6 61 ff ff       	jmp    c00163ba <malloc>

c00201c4 <operator delete(void*)>:
c00201c4:	e9 11 62 ff ff       	jmp    c00163da <rfree>

c00201c9 <disableIRQs()>:
c00201c9:	fa                   	cli    
c00201ca:	c3                   	ret    

c00201cb <enableIRQs()>:
c00201cb:	fb                   	sti    
c00201cc:	c3                   	ret    

c00201cd <lockScheduler()>:
c00201cd:	fa                   	cli    
c00201ce:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201d4:	c3                   	ret    

c00201d5 <unlockScheduler()>:
c00201d5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201da:	48                   	dec    eax
c00201db:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201e0:	75 01                	jne    c00201e3 <unlockScheduler()+0xe>
c00201e2:	fb                   	sti    
c00201e3:	c3                   	ret    

c00201e4 <lockStuff()>:
c00201e4:	fa                   	cli    
c00201e5:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201eb:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c00201f1:	c3                   	ret    

c00201f2 <unlockStuff()>:
c00201f2:	83 ec 0c             	sub    esp,0xc
c00201f5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00201fa:	48                   	dec    eax
c00201fb:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020200:	75 18                	jne    c002021a <unlockStuff()+0x28>
c0020202:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020209:	74 0f                	je     c002021a <unlockStuff()+0x28>
c002020b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020215:	e8 3e 50 00 00       	call   c0025258 <schedule()>
c002021a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002021f:	48                   	dec    eax
c0020220:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020225:	75 01                	jne    c0020228 <unlockStuff()+0x36>
c0020227:	fb                   	sti    
c0020228:	83 c4 0c             	add    esp,0xc
c002022b:	c3                   	ret    

c002022c <Virt::getAKernelVAS()>:
c002022c:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020231:	c3                   	ret    

c0020232 <__not_memcpy>:
c0020232:	57                   	push   edi
c0020233:	56                   	push   esi
c0020234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020238:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002023c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020240:	89 c7                	mov    edi,eax
c0020242:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020244:	5e                   	pop    esi
c0020245:	5f                   	pop    edi
c0020246:	c3                   	ret    
c0020247:	90                   	nop

c0020248 <Mutex::Mutex()>:
c0020248:	83 ec 0c             	sub    esp,0xc
c002024b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024f:	83 ec 08             	sub    esp,0x8
c0020252:	6a 01                	push   0x1
c0020254:	50                   	push   eax
c0020255:	e8 b2 03 00 00       	call   c002060c <Semaphore::Semaphore(int)>
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	90                   	nop
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	c3                   	ret    

c0020262 <KePanic(char const*)>:
c0020262:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c0020269:	e9 e4 6c 00 00       	jmp    c0026f52 <HalPanic(char const*)>

c002026e <KePowerThread(void*)>:
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020276:	48                   	dec    eax
c0020277:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002027c:	75 01                	jne    c002027f <KePowerThread(void*)+0x11>
c002027e:	fb                   	sti    
c002027f:	83 ec 0c             	sub    esp,0xc
c0020282:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020289:	6a 0a                	push   0xa
c002028b:	e8 b4 51 00 00       	call   c0025444 <sleep(unsigned int)>
c0020290:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c0020297:	83 c4 10             	add    esp,0x10
c002029a:	eb e3                	jmp    c002027f <KePowerThread(void*)+0x11>

c002029c <KeChangePowerSettings(PowerSettings)>:
c002029c:	57                   	push   edi
c002029d:	b9 09 00 00 00       	mov    ecx,0x9
c00202a2:	56                   	push   esi
c00202a3:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00202a8:	fc                   	cld    
c00202a9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00202ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202af:	5e                   	pop    esi
c00202b0:	5f                   	pop    edi
c00202b1:	c3                   	ret    

c00202b2 <KeUserIOReceived()>:
c00202b2:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00202bc:	c3                   	ret    

c00202bd <KeHandlePowerButton()>:
c00202bd:	83 ec 0c             	sub    esp,0xc
c00202c0:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00202c5:	83 f8 02             	cmp    eax,0x2
c00202c8:	75 10                	jne    c00202da <KeHandlePowerButton()+0x1d>
c00202ca:	83 ec 0c             	sub    esp,0xc
c00202cd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202d3:	e8 54 57 ff ff       	call   c0015a2c <Computer::shutdown()>
c00202d8:	eb 11                	jmp    c00202eb <KeHandlePowerButton()+0x2e>
c00202da:	48                   	dec    eax
c00202db:	75 11                	jne    c00202ee <KeHandlePowerButton()+0x31>
c00202dd:	83 ec 0c             	sub    esp,0xc
c00202e0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202e6:	e8 71 57 ff ff       	call   c0015a5c <Computer::sleep()>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	83 c4 0c             	add    esp,0xc
c00202f1:	c3                   	ret    

c00202f2 <KeHandleSleepButton()>:
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c00202fa:	83 f8 02             	cmp    eax,0x2
c00202fd:	75 10                	jne    c002030f <KeHandleSleepButton()+0x1d>
c00202ff:	83 ec 0c             	sub    esp,0xc
c0020302:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020308:	e8 1f 57 ff ff       	call   c0015a2c <Computer::shutdown()>
c002030d:	eb 11                	jmp    c0020320 <KeHandleSleepButton()+0x2e>
c002030f:	48                   	dec    eax
c0020310:	75 11                	jne    c0020323 <KeHandleSleepButton()+0x31>
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002031b:	e8 3c 57 ff ff       	call   c0015a5c <Computer::sleep()>
c0020320:	83 c4 10             	add    esp,0x10
c0020323:	83 c4 0c             	add    esp,0xc
c0020326:	c3                   	ret    

c0020327 <KeSetupPowerManager()>:
c0020327:	83 ec 0c             	sub    esp,0xc
c002032a:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020334:	68 f0 00 00 00       	push   0xf0
c0020339:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020340:	6a 00                	push   0x0
c0020342:	68 6e 02 02 c0       	push   0xc002026e
c0020347:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002034d:	e8 b6 4c 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c0020352:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c002035c:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c0020366:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020370:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c002037a:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c0020384:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c002038e:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c0020398:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00203a2:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00203ac:	83 c4 1c             	add    esp,0x1c
c00203af:	c3                   	ret    

c00203b0 <KeRand()>:
c00203b0:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00203ba:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00203c4:	53                   	push   ebx
c00203c5:	01 c1                	add    ecx,eax
c00203c7:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00203cc:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00203d2:	01 ca                	add    edx,ecx
c00203d4:	05 ef 04 b5 00       	add    eax,0xb504ef
c00203d9:	83 d2 00             	adc    edx,0x0
c00203dc:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00203e1:	0f b7 da             	movzx  ebx,dx
c00203e4:	89 da                	mov    edx,ebx
c00203e6:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00203ec:	0f ac d0 0e          	shrd   eax,edx,0xe
c00203f0:	5b                   	pop    ebx
c00203f1:	c3                   	ret    

c00203f2 <KeSeedRand(unsigned int)>:
c00203f2:	53                   	push   ebx
c00203f3:	83 ec 08             	sub    esp,0x8
c00203f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203fa:	e8 72 6e 00 00       	call   c0027271 <HalGetRand()>
c00203ff:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020409:	31 d8                	xor    eax,ebx
c002040b:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020410:	e8 9b ff ff ff       	call   c00203b0 <KeRand()>
c0020415:	83 c4 08             	add    esp,0x8
c0020418:	5b                   	pop    ebx
c0020419:	eb 95                	jmp    c00203b0 <KeRand()>

c002041b <KeInitRand()>:
c002041b:	83 ec 0c             	sub    esp,0xc
c002041e:	e8 43 6c 00 00       	call   c0027066 <HalQueryPerformanceCounter()>
c0020423:	0f 20 da             	mov    edx,cr3
c0020426:	0f 22 da             	mov    cr3,edx
c0020429:	0f 20 da             	mov    edx,cr3
c002042c:	0f 22 da             	mov    cr3,edx
c002042f:	0f 20 da             	mov    edx,cr3
c0020432:	0f 22 da             	mov    cr3,edx
c0020435:	0f 20 da             	mov    edx,cr3
c0020438:	0f 22 da             	mov    cr3,edx
c002043b:	83 ec 0c             	sub    esp,0xc
c002043e:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020443:	50                   	push   eax
c0020444:	e8 a9 ff ff ff       	call   c00203f2 <KeSeedRand(unsigned int)>
c0020449:	83 c4 1c             	add    esp,0x1c
c002044c:	c3                   	ret    
c002044d:	66 90                	xchg   ax,ax
c002044f:	90                   	nop

c0020450 <KeResolveCompatibilitySymbol(char*)>:
c0020450:	83 ec 0c             	sub    esp,0xc
c0020453:	83 ec 08             	sub    esp,0x8
c0020456:	68 68 28 03 c0       	push   0xc0032868
c002045b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045f:	e8 ec 02 fe ff       	call   c0000750 <strcmp>
c0020464:	83 c4 10             	add    esp,0x10
c0020467:	85 c0                	test   eax,eax
c0020469:	0f 94 c0             	sete   al
c002046c:	0f b6 c0             	movzx  eax,al
c002046f:	85 c0                	test   eax,eax
c0020471:	74 0d                	je     c0020480 <KeResolveCompatibilitySymbol(char*)+0x30>
c0020473:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020478:	e9 8b 01 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002047d:	8d 76 00             	lea    esi,[esi+0x0]
c0020480:	83 ec 08             	sub    esp,0x8
c0020483:	68 71 28 03 c0       	push   0xc0032871
c0020488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048c:	e8 bf 02 fe ff       	call   c0000750 <strcmp>
c0020491:	83 c4 10             	add    esp,0x10
c0020494:	85 c0                	test   eax,eax
c0020496:	0f 94 c0             	sete   al
c0020499:	0f b6 c0             	movzx  eax,al
c002049c:	85 c0                	test   eax,eax
c002049e:	74 0c                	je     c00204ac <KeResolveCompatibilitySymbol(char*)+0x5c>
c00204a0:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c00204a5:	e9 5e 01 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204aa:	66 90                	xchg   ax,ax
c00204ac:	83 ec 08             	sub    esp,0x8
c00204af:	68 7b 28 03 c0       	push   0xc003287b
c00204b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b8:	e8 93 02 fe ff       	call   c0000750 <strcmp>
c00204bd:	83 c4 10             	add    esp,0x10
c00204c0:	85 c0                	test   eax,eax
c00204c2:	0f 94 c0             	sete   al
c00204c5:	0f b6 c0             	movzx  eax,al
c00204c8:	85 c0                	test   eax,eax
c00204ca:	74 0c                	je     c00204d8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00204cc:	b8 84 e3 02 c0       	mov    eax,0xc002e384
c00204d1:	e9 32 01 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204d6:	66 90                	xchg   ax,ax
c00204d8:	83 ec 08             	sub    esp,0x8
c00204db:	68 84 28 03 c0       	push   0xc0032884
c00204e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e4:	e8 67 02 fe ff       	call   c0000750 <strcmp>
c00204e9:	83 c4 10             	add    esp,0x10
c00204ec:	85 c0                	test   eax,eax
c00204ee:	0f 94 c0             	sete   al
c00204f1:	0f b6 c0             	movzx  eax,al
c00204f4:	85 c0                	test   eax,eax
c00204f6:	74 0c                	je     c0020504 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00204f8:	b8 62 02 02 c0       	mov    eax,0xc0020262
c00204fd:	e9 06 01 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020502:	66 90                	xchg   ax,ax
c0020504:	83 ec 08             	sub    esp,0x8
c0020507:	68 97 28 03 c0       	push   0xc0032897
c002050c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020510:	e8 3b 02 fe ff       	call   c0000750 <strcmp>
c0020515:	83 c4 10             	add    esp,0x10
c0020518:	85 c0                	test   eax,eax
c002051a:	0f 94 c0             	sete   al
c002051d:	0f b6 c0             	movzx  eax,al
c0020520:	85 c0                	test   eax,eax
c0020522:	74 0c                	je     c0020530 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020524:	b8 ff fa 01 c0       	mov    eax,0xc001faff
c0020529:	e9 da 00 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002052e:	66 90                	xchg   ax,ax
c0020530:	83 ec 08             	sub    esp,0x8
c0020533:	68 b4 28 03 c0       	push   0xc00328b4
c0020538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002053c:	e8 0f 02 fe ff       	call   c0000750 <strcmp>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	85 c0                	test   eax,eax
c0020546:	0f 94 c0             	sete   al
c0020549:	0f b6 c0             	movzx  eax,al
c002054c:	85 c0                	test   eax,eax
c002054e:	74 0c                	je     c002055c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020550:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0020555:	e9 ae 00 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002055a:	66 90                	xchg   ax,ax
c002055c:	83 ec 08             	sub    esp,0x8
c002055f:	68 be 28 03 c0       	push   0xc00328be
c0020564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020568:	e8 e3 01 fe ff       	call   c0000750 <strcmp>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	85 c0                	test   eax,eax
c0020572:	0f 94 c0             	sete   al
c0020575:	0f b6 c0             	movzx  eax,al
c0020578:	85 c0                	test   eax,eax
c002057a:	74 0c                	je     c0020588 <KeResolveCompatibilitySymbol(char*)+0x138>
c002057c:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0020581:	e9 82 00 00 00       	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020586:	66 90                	xchg   ax,ax
c0020588:	83 ec 08             	sub    esp,0x8
c002058b:	68 c7 28 03 c0       	push   0xc00328c7
c0020590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020594:	e8 b7 01 fe ff       	call   c0000750 <strcmp>
c0020599:	83 c4 10             	add    esp,0x10
c002059c:	85 c0                	test   eax,eax
c002059e:	0f 94 c0             	sete   al
c00205a1:	0f b6 c0             	movzx  eax,al
c00205a4:	85 c0                	test   eax,eax
c00205a6:	74 08                	je     c00205b0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00205a8:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205ad:	eb 59                	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205af:	90                   	nop
c00205b0:	83 ec 08             	sub    esp,0x8
c00205b3:	68 df 28 03 c0       	push   0xc00328df
c00205b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205bc:	e8 8f 01 fe ff       	call   c0000750 <strcmp>
c00205c1:	83 c4 10             	add    esp,0x10
c00205c4:	85 c0                	test   eax,eax
c00205c6:	0f 94 c0             	sete   al
c00205c9:	0f b6 c0             	movzx  eax,al
c00205cc:	85 c0                	test   eax,eax
c00205ce:	74 08                	je     c00205d8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00205d0:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205d5:	eb 31                	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205d7:	90                   	nop
c00205d8:	83 ec 08             	sub    esp,0x8
c00205db:	68 ec 28 03 c0       	push   0xc00328ec
c00205e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e4:	e8 67 01 fe ff       	call   c0000750 <strcmp>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	85 c0                	test   eax,eax
c00205ee:	0f 94 c0             	sete   al
c00205f1:	0f b6 c0             	movzx  eax,al
c00205f4:	85 c0                	test   eax,eax
c00205f6:	74 08                	je     c0020600 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00205f8:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c00205fd:	eb 09                	jmp    c0020608 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205ff:	90                   	nop
c0020600:	b8 00 00 00 00       	mov    eax,0x0
c0020605:	8d 76 00             	lea    esi,[esi+0x0]
c0020608:	83 c4 0c             	add    esp,0xc
c002060b:	c3                   	ret    

c002060c <Semaphore::Semaphore(int)>:
c002060c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020614:	89 10                	mov    DWORD PTR [eax],edx
c0020616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002061a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020625:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020630:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020637:	90                   	nop
c0020638:	c3                   	ret    
c0020639:	90                   	nop
c002063a:	66 90                	xchg   ax,ax

c002063c <Semaphore::tryAcquire()>:
c002063c:	83 ec 0c             	sub    esp,0xc
c002063f:	fa                   	cli    
c0020640:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020645:	83 c0 01             	add    eax,0x1
c0020648:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002064d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020652:	83 c0 01             	add    eax,0x1
c0020655:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002065a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020665:	8b 00                	mov    eax,DWORD PTR [eax]
c0020667:	39 c2                	cmp    edx,eax
c0020669:	7d 5d                	jge    c00206c8 <Semaphore::tryAcquire()+0x8c>
c002066b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020672:	8d 50 01             	lea    edx,[eax+0x1]
c0020675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002067c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020681:	83 e8 01             	sub    eax,0x1
c0020684:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020689:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002068e:	85 c0                	test   eax,eax
c0020690:	75 1a                	jne    c00206ac <Semaphore::tryAcquire()+0x70>
c0020692:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020697:	85 c0                	test   eax,eax
c0020699:	74 11                	je     c00206ac <Semaphore::tryAcquire()+0x70>
c002069b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206a5:	e8 ae 4b 00 00       	call   c0025258 <schedule()>
c00206aa:	66 90                	xchg   ax,ax
c00206ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206b1:	83 e8 01             	sub    eax,0x1
c00206b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206b9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206be:	85 c0                	test   eax,eax
c00206c0:	75 02                	jne    c00206c4 <Semaphore::tryAcquire()+0x88>
c00206c2:	fb                   	sti    
c00206c3:	90                   	nop
c00206c4:	b0 01                	mov    al,0x1
c00206c6:	eb 4c                	jmp    c0020714 <Semaphore::tryAcquire()+0xd8>
c00206c8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206cd:	83 e8 01             	sub    eax,0x1
c00206d0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206d5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206da:	85 c0                	test   eax,eax
c00206dc:	75 1a                	jne    c00206f8 <Semaphore::tryAcquire()+0xbc>
c00206de:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206e3:	85 c0                	test   eax,eax
c00206e5:	74 11                	je     c00206f8 <Semaphore::tryAcquire()+0xbc>
c00206e7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206f1:	e8 62 4b 00 00       	call   c0025258 <schedule()>
c00206f6:	66 90                	xchg   ax,ax
c00206f8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206fd:	83 e8 01             	sub    eax,0x1
c0020700:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020705:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002070a:	85 c0                	test   eax,eax
c002070c:	75 02                	jne    c0020710 <Semaphore::tryAcquire()+0xd4>
c002070e:	fb                   	sti    
c002070f:	90                   	nop
c0020710:	b0 00                	mov    al,0x0
c0020712:	66 90                	xchg   ax,ax
c0020714:	83 c4 0c             	add    esp,0xc
c0020717:	c3                   	ret    

c0020718 <Semaphore::assertLocked(char const*)>:
c0020718:	83 ec 0c             	sub    esp,0xc
c002071b:	fa                   	cli    
c002071c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020721:	83 c0 01             	add    eax,0x1
c0020724:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020729:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002072e:	83 c0 01             	add    eax,0x1
c0020731:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002073d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020741:	8b 00                	mov    eax,DWORD PTR [eax]
c0020743:	39 c2                	cmp    edx,eax
c0020745:	7d 11                	jge    c0020758 <Semaphore::assertLocked(char const*)+0x40>
c0020747:	83 ec 0c             	sub    esp,0xc
c002074a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002074e:	e8 0f fb ff ff       	call   c0020262 <KePanic(char const*)>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	66 90                	xchg   ax,ax
c0020758:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002075d:	83 e8 01             	sub    eax,0x1
c0020760:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020765:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002076a:	85 c0                	test   eax,eax
c002076c:	75 1a                	jne    c0020788 <Semaphore::assertLocked(char const*)+0x70>
c002076e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020773:	85 c0                	test   eax,eax
c0020775:	74 11                	je     c0020788 <Semaphore::assertLocked(char const*)+0x70>
c0020777:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020781:	e8 d2 4a 00 00       	call   c0025258 <schedule()>
c0020786:	66 90                	xchg   ax,ax
c0020788:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002078d:	83 e8 01             	sub    eax,0x1
c0020790:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020795:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002079a:	85 c0                	test   eax,eax
c002079c:	75 02                	jne    c00207a0 <Semaphore::assertLocked(char const*)+0x88>
c002079e:	fb                   	sti    
c002079f:	90                   	nop
c00207a0:	90                   	nop
c00207a1:	83 c4 0c             	add    esp,0xc
c00207a4:	c3                   	ret    
c00207a5:	90                   	nop
c00207a6:	66 90                	xchg   ax,ax

c00207a8 <Semaphore::acquire(int)>:
c00207a8:	83 ec 1c             	sub    esp,0x1c
c00207ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207b0:	0f 84 9a 00 00 00    	je     c0020850 <Semaphore::acquire(int)+0xa8>
c00207b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207be:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00207c3:	90                   	nop
c00207c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00207c9:	85 c0                	test   eax,eax
c00207cb:	74 77                	je     c0020844 <Semaphore::acquire(int)+0x9c>
c00207cd:	83 ec 0c             	sub    esp,0xc
c00207d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d4:	e8 63 fe ff ff       	call   c002063c <Semaphore::tryAcquire()>
c00207d9:	83 c4 10             	add    esp,0x10
c00207dc:	83 f0 01             	xor    eax,0x1
c00207df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00207e3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00207e7:	83 f0 01             	xor    eax,0x1
c00207ea:	0f b6 c0             	movzx  eax,al
c00207ed:	85 c0                	test   eax,eax
c00207ef:	75 4f                	jne    c0020840 <Semaphore::acquire(int)+0x98>
c00207f1:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00207f6:	7f 2c                	jg     c0020824 <Semaphore::acquire(int)+0x7c>
c00207f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207fc:	89 d0                	mov    eax,edx
c00207fe:	c1 e0 02             	shl    eax,0x2
c0020801:	01 d0                	add    eax,edx
c0020803:	01 c0                	add    eax,eax
c0020805:	83 ec 0c             	sub    esp,0xc
c0020808:	50                   	push   eax
c0020809:	e8 22 4c 00 00       	call   c0025430 <milliTenthSleep(unsigned int)>
c002080e:	83 c4 10             	add    esp,0x10
c0020811:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020815:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020819:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020821:	eb a1                	jmp    c00207c4 <Semaphore::acquire(int)+0x1c>
c0020823:	90                   	nop
c0020824:	83 ec 0c             	sub    esp,0xc
c0020827:	68 90 01 00 00       	push   0x190
c002082c:	e8 ff 4b 00 00       	call   c0025430 <milliTenthSleep(unsigned int)>
c0020831:	83 c4 10             	add    esp,0x10
c0020834:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020839:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c002083e:	eb 84                	jmp    c00207c4 <Semaphore::acquire(int)+0x1c>
c0020840:	90                   	nop
c0020841:	8d 76 00             	lea    esi,[esi+0x0]
c0020844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020848:	e9 ff 00 00 00       	jmp    c002094c <Semaphore::acquire(int)+0x1a4>
c002084d:	8d 76 00             	lea    esi,[esi+0x0]
c0020850:	fa                   	cli    
c0020851:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020856:	83 c0 01             	add    eax,0x1
c0020859:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002085e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020863:	83 c0 01             	add    eax,0x1
c0020866:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002086b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002086f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020876:	8b 00                	mov    eax,DWORD PTR [eax]
c0020878:	39 c2                	cmp    edx,eax
c002087a:	7d 14                	jge    c0020890 <Semaphore::acquire(int)+0xe8>
c002087c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020880:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020883:	8d 50 01             	lea    edx,[eax+0x1]
c0020886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002088a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002088d:	eb 6d                	jmp    c00208fc <Semaphore::acquire(int)+0x154>
c002088f:	90                   	nop
c0020890:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020895:	8b 00                	mov    eax,DWORD PTR [eax]
c0020897:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002089e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a5:	85 c0                	test   eax,eax
c00208a7:	75 13                	jne    c00208bc <Semaphore::acquire(int)+0x114>
c00208a9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00208b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208b7:	eb 17                	jmp    c00208d0 <Semaphore::acquire(int)+0x128>
c00208b9:	8d 76 00             	lea    esi,[esi+0x0]
c00208bc:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00208c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208c8:	8b 12                	mov    edx,DWORD PTR [edx]
c00208ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00208cd:	8d 76 00             	lea    esi,[esi+0x0]
c00208d0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00208d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208de:	83 ec 0c             	sub    esp,0xc
c00208e1:	68 fc 28 03 c0       	push   0xc00328fc
c00208e6:	e8 5e 89 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	83 ec 0c             	sub    esp,0xc
c00208f1:	6a 05                	push   0x5
c00208f3:	e8 1c 4a 00 00       	call   c0025314 <blockTask(TaskState)>
c00208f8:	83 c4 10             	add    esp,0x10
c00208fb:	90                   	nop
c00208fc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020901:	83 e8 01             	sub    eax,0x1
c0020904:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020909:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002090e:	85 c0                	test   eax,eax
c0020910:	75 1a                	jne    c002092c <Semaphore::acquire(int)+0x184>
c0020912:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020917:	85 c0                	test   eax,eax
c0020919:	74 11                	je     c002092c <Semaphore::acquire(int)+0x184>
c002091b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020925:	e8 2e 49 00 00       	call   c0025258 <schedule()>
c002092a:	66 90                	xchg   ax,ax
c002092c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020931:	83 e8 01             	sub    eax,0x1
c0020934:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020939:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002093e:	85 c0                	test   eax,eax
c0020940:	75 02                	jne    c0020944 <Semaphore::acquire(int)+0x19c>
c0020942:	fb                   	sti    
c0020943:	90                   	nop
c0020944:	b8 00 00 00 00       	mov    eax,0x0
c0020949:	8d 76 00             	lea    esi,[esi+0x0]
c002094c:	83 c4 1c             	add    esp,0x1c
c002094f:	c3                   	ret    

c0020950 <Semaphore::acquire()>:
c0020950:	83 ec 0c             	sub    esp,0xc
c0020953:	83 ec 08             	sub    esp,0x8
c0020956:	6a 00                	push   0x0
c0020958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002095c:	e8 47 fe ff ff       	call   c00207a8 <Semaphore::acquire(int)>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	90                   	nop
c0020965:	83 c4 0c             	add    esp,0xc
c0020968:	c3                   	ret    
c0020969:	90                   	nop
c002096a:	66 90                	xchg   ax,ax

c002096c <Semaphore::release()>:
c002096c:	83 ec 1c             	sub    esp,0x1c
c002096f:	fa                   	cli    
c0020970:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020975:	83 c0 01             	add    eax,0x1
c0020978:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002097d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020982:	83 c0 01             	add    eax,0x1
c0020985:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002098a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002098e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020991:	85 c0                	test   eax,eax
c0020993:	74 2b                	je     c00209c0 <Semaphore::release()+0x54>
c0020995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002099c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00209a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00209ae:	83 ec 0c             	sub    esp,0xc
c00209b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209b5:	e8 96 4b 00 00       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c00209ba:	83 c4 10             	add    esp,0x10
c00209bd:	eb 15                	jmp    c00209d4 <Semaphore::release()+0x68>
c00209bf:	90                   	nop
c00209c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209c7:	8d 50 ff             	lea    edx,[eax-0x1]
c00209ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209ce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209d1:	8d 76 00             	lea    esi,[esi+0x0]
c00209d4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209d9:	83 e8 01             	sub    eax,0x1
c00209dc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209e1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209e6:	85 c0                	test   eax,eax
c00209e8:	75 1a                	jne    c0020a04 <Semaphore::release()+0x98>
c00209ea:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209ef:	85 c0                	test   eax,eax
c00209f1:	74 11                	je     c0020a04 <Semaphore::release()+0x98>
c00209f3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00209fd:	e8 56 48 00 00       	call   c0025258 <schedule()>
c0020a02:	66 90                	xchg   ax,ax
c0020a04:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a09:	83 e8 01             	sub    eax,0x1
c0020a0c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a11:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a16:	85 c0                	test   eax,eax
c0020a18:	75 02                	jne    c0020a1c <Semaphore::release()+0xb0>
c0020a1a:	fb                   	sti    
c0020a1b:	90                   	nop
c0020a1c:	90                   	nop
c0020a1d:	83 c4 1c             	add    esp,0x1c
c0020a20:	c3                   	ret    

c0020a21 <KiSigKill(int)>:
c0020a21:	83 ec 0c             	sub    esp,0xc
c0020a24:	6a 00                	push   0x0
c0020a26:	6a 00                	push   0x0
c0020a28:	6a ff                	push   0xffffffff
c0020a2a:	6a 01                	push   0x1
c0020a2c:	e8 21 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a31:	83 c4 1c             	add    esp,0x1c
c0020a34:	c3                   	ret    

c0020a35 <KiDefaultSignalHandlerIgnore(int)>:
c0020a35:	c3                   	ret    

c0020a36 <KiDefaultSignalHandlerPause(int)>:
c0020a36:	57                   	push   edi
c0020a37:	b9 07 00 00 00       	mov    ecx,0x7
c0020a3c:	56                   	push   esi
c0020a3d:	be 57 29 03 c0       	mov    esi,0xc0032957
c0020a42:	83 ec 24             	sub    esp,0x24
c0020a45:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a49:	fc                   	cld    
c0020a4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a4c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a50:	50                   	push   eax
c0020a51:	6a 00                	push   0x0
c0020a53:	6a 00                	push   0x0
c0020a55:	6a 27                	push   0x27
c0020a57:	e8 f6 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a5c:	83 c4 34             	add    esp,0x34
c0020a5f:	5e                   	pop    esi
c0020a60:	5f                   	pop    edi
c0020a61:	c3                   	ret    

c0020a62 <KiDefaultSignalHandlerResume(int)>:
c0020a62:	57                   	push   edi
c0020a63:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020a68:	56                   	push   esi
c0020a69:	be 73 29 03 c0       	mov    esi,0xc0032973
c0020a6e:	83 ec 24             	sub    esp,0x24
c0020a71:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020a75:	fc                   	cld    
c0020a76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a78:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020a7c:	50                   	push   eax
c0020a7d:	6a 00                	push   0x0
c0020a7f:	6a 00                	push   0x0
c0020a81:	6a 27                	push   0x27
c0020a83:	e8 ca 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a88:	83 c4 34             	add    esp,0x34
c0020a8b:	5e                   	pop    esi
c0020a8c:	5f                   	pop    edi
c0020a8d:	c3                   	ret    

c0020a8e <KeDeinitSignals(SigHandlerBlock*)>:
c0020a8e:	e9 37 59 ff ff       	jmp    c00163ca <free>

c0020a93 <KeInitSignals()>:
c0020a93:	53                   	push   ebx
c0020a94:	83 ec 14             	sub    esp,0x14
c0020a97:	68 c8 00 00 00       	push   0xc8
c0020a9c:	e8 19 59 ff ff       	call   c00163ba <malloc>
c0020aa1:	83 c4 0c             	add    esp,0xc
c0020aa4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020aae:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020ab8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020abf:	89 c3                	mov    ebx,eax
c0020ac1:	6a 20                	push   0x20
c0020ac3:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020ac9:	6a 00                	push   0x0
c0020acb:	50                   	push   eax
c0020acc:	e8 1f fa fd ff       	call   c00004f0 <memset>
c0020ad1:	83 c4 0c             	add    esp,0xc
c0020ad4:	6a 44                	push   0x44
c0020ad6:	6a 00                	push   0x0
c0020ad8:	53                   	push   ebx
c0020ad9:	e8 12 fa fd ff       	call   c00004f0 <memset>
c0020ade:	89 d8                	mov    eax,ebx
c0020ae0:	83 c4 18             	add    esp,0x18
c0020ae3:	5b                   	pop    ebx
c0020ae4:	c3                   	ret    

c0020ae5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020ae5:	53                   	push   ebx
c0020ae6:	b8 01 00 00 00       	mov    eax,0x1
c0020aeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020aef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020af3:	83 f9 10             	cmp    ecx,0x10
c0020af6:	7f 21                	jg     c0020b19 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020af8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aff:	89 03                	mov    DWORD PTR [ebx],eax
c0020b01:	b8 01 00 00 00       	mov    eax,0x1
c0020b06:	d3 e0                	shl    eax,cl
c0020b08:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020b0c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020b0f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020b17:	31 c0                	xor    eax,eax
c0020b19:	5b                   	pop    ebx
c0020b1a:	c3                   	ret    

c0020b1b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020b1b:	55                   	push   ebp
c0020b1c:	57                   	push   edi
c0020b1d:	bf 08 00 00 00       	mov    edi,0x8
c0020b22:	56                   	push   esi
c0020b23:	53                   	push   ebx
c0020b24:	83 ec 18             	sub    esp,0x18
c0020b27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b2b:	68 90 29 03 c0       	push   0xc0032990
c0020b30:	e8 14 87 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0020b35:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b3c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020b42:	83 c4 10             	add    esp,0x10
c0020b45:	31 c9                	xor    ecx,ecx
c0020b47:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020b4b:	99                   	cdq    
c0020b4c:	f7 ff                	idiv   edi
c0020b4e:	8d 42 24             	lea    eax,[edx+0x24]
c0020b51:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020b55:	85 f6                	test   esi,esi
c0020b57:	75 1a                	jne    c0020b73 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020b59:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020b5d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020b61:	50                   	push   eax
c0020b62:	50                   	push   eax
c0020b63:	52                   	push   edx
c0020b64:	68 a1 29 03 c0       	push   0xc00329a1
c0020b69:	e8 db 86 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0020b6e:	83 c4 10             	add    esp,0x10
c0020b71:	eb 1b                	jmp    c0020b8e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020b73:	41                   	inc    ecx
c0020b74:	83 f9 08             	cmp    ecx,0x8
c0020b77:	75 ce                	jne    c0020b47 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020b79:	83 ec 0c             	sub    esp,0xc
c0020b7c:	be 01 00 00 00       	mov    esi,0x1
c0020b81:	68 c2 29 03 c0       	push   0xc00329c2
c0020b86:	e8 be 86 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0020b8b:	83 c4 10             	add    esp,0x10
c0020b8e:	83 c4 0c             	add    esp,0xc
c0020b91:	89 f0                	mov    eax,esi
c0020b93:	5b                   	pop    ebx
c0020b94:	5e                   	pop    esi
c0020b95:	5f                   	pop    edi
c0020b96:	5d                   	pop    ebp
c0020b97:	c3                   	ret    

c0020b98 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020b98:	55                   	push   ebp
c0020b99:	57                   	push   edi
c0020b9a:	56                   	push   esi
c0020b9b:	53                   	push   ebx
c0020b9c:	51                   	push   ecx
c0020b9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ba1:	85 db                	test   ebx,ebx
c0020ba3:	0f 84 bc 00 00 00    	je     c0020c65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ba9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020bb0:	0f 84 af 00 00 00    	je     c0020c65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bb6:	31 c9                	xor    ecx,ecx
c0020bb8:	bf 08 00 00 00       	mov    edi,0x8
c0020bbd:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020bc3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020bc6:	99                   	cdq    
c0020bc7:	f7 ff                	idiv   edi
c0020bc9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020bd0:	85 ed                	test   ebp,ebp
c0020bd2:	0f 84 9e 00 00 00    	je     c0020c76 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020bd8:	89 e9                	mov    ecx,ebp
c0020bda:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020be0:	bf 01 00 00 00       	mov    edi,0x1
c0020be5:	89 04 24             	mov    DWORD PTR [esp],eax
c0020be8:	d3 e7                	shl    edi,cl
c0020bea:	31 c9                	xor    ecx,ecx
c0020bec:	b8 01 00 00 00       	mov    eax,0x1
c0020bf1:	d3 e0                	shl    eax,cl
c0020bf3:	85 04 24             	test   DWORD PTR [esp],eax
c0020bf6:	74 06                	je     c0020bfe <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020bf8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020bfc:	75 67                	jne    c0020c65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bfe:	41                   	inc    ecx
c0020bff:	83 f9 11             	cmp    ecx,0x11
c0020c02:	75 e8                	jne    c0020bec <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020c04:	46                   	inc    esi
c0020c05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c08:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c0e:	09 f8                	or     eax,edi
c0020c10:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020c1b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020c21:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020c28:	31 c0                	xor    eax,eax
c0020c2a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020c32:	74 09                	je     c0020c3d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020c34:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020c3b:	eb 06                	jmp    c0020c43 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020c3d:	40                   	inc    eax
c0020c3e:	83 f8 08             	cmp    eax,0x8
c0020c41:	75 e7                	jne    c0020c2a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020c43:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020c46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c4a:	83 fd 09             	cmp    ebp,0x9
c0020c4d:	89 2a                	mov    DWORD PTR [edx],ebp
c0020c4f:	75 07                	jne    c0020c58 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020c51:	b8 21 0a 02 c0       	mov    eax,0xc0020a21
c0020c56:	eb 31                	jmp    c0020c89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c58:	83 f8 01             	cmp    eax,0x1
c0020c5b:	75 0c                	jne    c0020c69 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020c5d:	f7 d7                	not    edi
c0020c5f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020c65:	31 c0                	xor    eax,eax
c0020c67:	eb 20                	jmp    c0020c89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c69:	85 c0                	test   eax,eax
c0020c6b:	75 1c                	jne    c0020c89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c6d:	8b 04 ad 00 42 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbe00]
c0020c74:	eb 13                	jmp    c0020c89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c76:	46                   	inc    esi
c0020c77:	41                   	inc    ecx
c0020c78:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c7e:	83 f9 08             	cmp    ecx,0x8
c0020c81:	0f 85 36 ff ff ff    	jne    c0020bbd <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020c87:	eb dc                	jmp    c0020c65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c89:	5a                   	pop    edx
c0020c8a:	5b                   	pop    ebx
c0020c8b:	5e                   	pop    esi
c0020c8c:	5f                   	pop    edi
c0020c8d:	5d                   	pop    ebp
c0020c8e:	c3                   	ret    

c0020c8f <KiCheckSignalZ>:
c0020c8f:	83 ec 10             	sub    esp,0x10
c0020c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c96:	50                   	push   eax
c0020c97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c9f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020ca5:	e8 ee fe ff ff       	call   c0020b98 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020caa:	5a                   	pop    edx
c0020cab:	31 d2                	xor    edx,edx
c0020cad:	59                   	pop    ecx
c0020cae:	85 c0                	test   eax,eax
c0020cb0:	74 19                	je     c0020ccb <KiCheckSignalZ+0x3c>
c0020cb2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020cb8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020cbb:	89 02                	mov    DWORD PTR [edx],eax
c0020cbd:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020cc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020ccb:	89 d0                	mov    eax,edx
c0020ccd:	83 c4 10             	add    esp,0x10
c0020cd0:	c3                   	ret    

c0020cd1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020cd1:	56                   	push   esi
c0020cd2:	53                   	push   ebx
c0020cd3:	bb 01 00 00 00       	mov    ebx,0x1
c0020cd8:	52                   	push   edx
c0020cd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020ce1:	d3 e3                	shl    ebx,cl
c0020ce3:	83 f9 10             	cmp    ecx,0x10
c0020ce6:	7f 08                	jg     c0020cf0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020ce8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020cee:	75 10                	jne    c0020d00 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020cf0:	83 ec 0c             	sub    esp,0xc
c0020cf3:	68 d3 29 03 c0       	push   0xc00329d3
c0020cf8:	e8 65 f5 ff ff       	call   c0020262 <KePanic(char const*)>
c0020cfd:	83 c4 10             	add    esp,0x10
c0020d00:	f7 d3                	not    ebx
c0020d02:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020d08:	58                   	pop    eax
c0020d09:	5b                   	pop    ebx
c0020d0a:	5e                   	pop    esi
c0020d0b:	c3                   	ret    

c0020d0c <KiFinishSignalZ>:
c0020d0c:	53                   	push   ebx
c0020d0d:	83 ec 10             	sub    esp,0x10
c0020d10:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d14:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020d17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d1f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020d25:	e8 a7 ff ff ff       	call   c0020cd1 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020d2a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020d30:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020d37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020d3e:	83 c4 18             	add    esp,0x18
c0020d41:	5b                   	pop    ebx
c0020d42:	c3                   	ret    

c0020d43 <SysSeekDir(regs*)>:
c0020d43:	31 c0                	xor    eax,eax
c0020d45:	31 d2                	xor    edx,edx
c0020d47:	c3                   	ret    

c0020d48 <SysTellDir(regs*)>:
c0020d48:	31 c0                	xor    eax,eax
c0020d4a:	31 d2                	xor    edx,edx
c0020d4c:	c3                   	ret    

c0020d4d <SysVerify(regs*)>:
c0020d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d51:	31 d2                	xor    edx,edx
c0020d53:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d56:	c3                   	ret    

c0020d57 <SysGetArgc(regs*)>:
c0020d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d5f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020d65:	89 c2                	mov    edx,eax
c0020d67:	c1 fa 1f             	sar    edx,0x1f
c0020d6a:	c3                   	ret    

c0020d6b <SysTTYName(regs*)>:
c0020d6b:	b8 01 00 00 00       	mov    eax,0x1
c0020d70:	31 d2                	xor    edx,edx
c0020d72:	c3                   	ret    

c0020d73 <SysFormatDisk(regs*)>:
c0020d73:	56                   	push   esi
c0020d74:	53                   	push   ebx
c0020d75:	83 ec 04             	sub    esp,0x4
c0020d78:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d7c:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020d82:	eb 28                	jmp    c0020dac <SysFormatDisk(regs*)+0x39>
c0020d84:	83 ec 0c             	sub    esp,0xc
c0020d87:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020d8a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020d8d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020d8f:	51                   	push   ecx
c0020d90:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020d93:	51                   	push   ecx
c0020d94:	50                   	push   eax
c0020d95:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020d9c:	50                   	push   eax
c0020d9d:	53                   	push   ebx
c0020d9e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020da1:	83 c4 20             	add    esp,0x20
c0020da4:	83 f8 08             	cmp    eax,0x8
c0020da7:	75 14                	jne    c0020dbd <SysFormatDisk(regs*)+0x4a>
c0020da9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020dac:	85 db                	test   ebx,ebx
c0020dae:	75 d4                	jne    c0020d84 <SysFormatDisk(regs*)+0x11>
c0020db0:	83 c4 04             	add    esp,0x4
c0020db3:	b8 03 00 00 00       	mov    eax,0x3
c0020db8:	31 d2                	xor    edx,edx
c0020dba:	5b                   	pop    ebx
c0020dbb:	5e                   	pop    esi
c0020dbc:	c3                   	ret    
c0020dbd:	85 c0                	test   eax,eax
c0020dbf:	74 1f                	je     c0020de0 <SysFormatDisk(regs*)+0x6d>
c0020dc1:	83 f8 09             	cmp    eax,0x9
c0020dc4:	74 0d                	je     c0020dd3 <SysFormatDisk(regs*)+0x60>
c0020dc6:	83 c4 04             	add    esp,0x4
c0020dc9:	b8 02 00 00 00       	mov    eax,0x2
c0020dce:	31 d2                	xor    edx,edx
c0020dd0:	5b                   	pop    ebx
c0020dd1:	5e                   	pop    esi
c0020dd2:	c3                   	ret    
c0020dd3:	83 c4 04             	add    esp,0x4
c0020dd6:	b8 01 00 00 00       	mov    eax,0x1
c0020ddb:	31 d2                	xor    edx,edx
c0020ddd:	5b                   	pop    ebx
c0020dde:	5e                   	pop    esi
c0020ddf:	c3                   	ret    
c0020de0:	83 c4 04             	add    esp,0x4
c0020de3:	31 c0                	xor    eax,eax
c0020de5:	31 d2                	xor    edx,edx
c0020de7:	5b                   	pop    ebx
c0020de8:	5e                   	pop    esi
c0020de9:	c3                   	ret    

c0020dea <SysSetDiskVolumeLabel(regs*)>:
c0020dea:	56                   	push   esi
c0020deb:	53                   	push   ebx
c0020dec:	83 ec 04             	sub    esp,0x4
c0020def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020df3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020df6:	83 f8 19             	cmp    eax,0x19
c0020df9:	77 33                	ja     c0020e2e <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dfb:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020e02:	85 c9                	test   ecx,ecx
c0020e04:	74 28                	je     c0020e2e <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e06:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020e09:	85 db                	test   ebx,ebx
c0020e0b:	74 21                	je     c0020e2e <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e0d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020e13:	85 d2                	test   edx,edx
c0020e15:	74 17                	je     c0020e2e <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e17:	8b 32                	mov    esi,DWORD PTR [edx]
c0020e19:	53                   	push   ebx
c0020e1a:	50                   	push   eax
c0020e1b:	51                   	push   ecx
c0020e1c:	52                   	push   edx
c0020e1d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020e20:	83 c4 10             	add    esp,0x10
c0020e23:	89 c2                	mov    edx,eax
c0020e25:	83 c4 04             	add    esp,0x4
c0020e28:	c1 fa 1f             	sar    edx,0x1f
c0020e2b:	5b                   	pop    ebx
c0020e2c:	5e                   	pop    esi
c0020e2d:	c3                   	ret    
c0020e2e:	83 c4 04             	add    esp,0x4
c0020e31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e36:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e3b:	5b                   	pop    ebx
c0020e3c:	5e                   	pop    esi
c0020e3d:	c3                   	ret    

c0020e3e <SysGetDiskVolumeLabel(regs*)>:
c0020e3e:	57                   	push   edi
c0020e3f:	56                   	push   esi
c0020e40:	53                   	push   ebx
c0020e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e45:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e48:	83 fa 19             	cmp    edx,0x19
c0020e4b:	77 3c                	ja     c0020e89 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e4d:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020e54:	85 c9                	test   ecx,ecx
c0020e56:	74 31                	je     c0020e89 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e58:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e5b:	85 db                	test   ebx,ebx
c0020e5d:	74 2a                	je     c0020e89 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e5f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020e62:	85 f6                	test   esi,esi
c0020e64:	74 23                	je     c0020e89 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e66:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020e6c:	85 c0                	test   eax,eax
c0020e6e:	74 19                	je     c0020e89 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e70:	83 ec 0c             	sub    esp,0xc
c0020e73:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e75:	56                   	push   esi
c0020e76:	53                   	push   ebx
c0020e77:	52                   	push   edx
c0020e78:	51                   	push   ecx
c0020e79:	50                   	push   eax
c0020e7a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020e7d:	83 c4 20             	add    esp,0x20
c0020e80:	89 c2                	mov    edx,eax
c0020e82:	5b                   	pop    ebx
c0020e83:	c1 fa 1f             	sar    edx,0x1f
c0020e86:	5e                   	pop    esi
c0020e87:	5f                   	pop    edi
c0020e88:	c3                   	ret    
c0020e89:	5b                   	pop    ebx
c0020e8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e94:	5e                   	pop    esi
c0020e95:	5f                   	pop    edi
c0020e96:	c3                   	ret    

c0020e97 <SysShutdown(regs*)>:
c0020e97:	83 ec 0c             	sub    esp,0xc
c0020e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ea1:	85 c0                	test   eax,eax
c0020ea3:	74 18                	je     c0020ebd <SysShutdown(regs*)+0x26>
c0020ea5:	83 f8 01             	cmp    eax,0x1
c0020ea8:	74 38                	je     c0020ee2 <SysShutdown(regs*)+0x4b>
c0020eaa:	83 f8 02             	cmp    eax,0x2
c0020ead:	74 24                	je     c0020ed3 <SysShutdown(regs*)+0x3c>
c0020eaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020eb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020eb9:	83 c4 0c             	add    esp,0xc
c0020ebc:	c3                   	ret    
c0020ebd:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ec2:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ec4:	6a 00                	push   0x0
c0020ec6:	6a 00                	push   0x0
c0020ec8:	6a 00                	push   0x0
c0020eca:	50                   	push   eax
c0020ecb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ece:	83 c4 10             	add    esp,0x10
c0020ed1:	eb dc                	jmp    c0020eaf <SysShutdown(regs*)+0x18>
c0020ed3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ed8:	8b 10                	mov    edx,DWORD PTR [eax]
c0020eda:	6a 00                	push   0x0
c0020edc:	6a 00                	push   0x0
c0020ede:	6a 01                	push   0x1
c0020ee0:	eb e8                	jmp    c0020eca <SysShutdown(regs*)+0x33>
c0020ee2:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020ee7:	85 c0                	test   eax,eax
c0020ee9:	74 02                	je     c0020eed <SysShutdown(regs*)+0x56>
c0020eeb:	ff d0                	call   eax
c0020eed:	31 c0                	xor    eax,eax
c0020eef:	31 d2                	xor    edx,edx
c0020ef1:	83 c4 0c             	add    esp,0xc
c0020ef4:	c3                   	ret    

c0020ef5 <SysRealpath(regs*)>:
c0020ef5:	83 ec 0c             	sub    esp,0xc
c0020ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020efc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020eff:	85 d2                	test   edx,edx
c0020f01:	74 07                	je     c0020f0a <SysRealpath(regs*)+0x15>
c0020f03:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020f06:	85 c0                	test   eax,eax
c0020f08:	75 0b                	jne    c0020f15 <SysRealpath(regs*)+0x20>
c0020f0a:	b8 01 00 00 00       	mov    eax,0x1
c0020f0f:	31 d2                	xor    edx,edx
c0020f11:	83 c4 0c             	add    esp,0xc
c0020f14:	c3                   	ret    
c0020f15:	6a 00                	push   0x0
c0020f17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0020f1d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0020f20:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0020f26:	51                   	push   ecx
c0020f27:	52                   	push   edx
c0020f28:	50                   	push   eax
c0020f29:	e8 2a 92 ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020f2e:	83 c4 10             	add    esp,0x10
c0020f31:	31 c0                	xor    eax,eax
c0020f33:	31 d2                	xor    edx,edx
c0020f35:	83 c4 0c             	add    esp,0xc
c0020f38:	c3                   	ret    

c0020f39 <SysReadDir(regs*)>:
c0020f39:	53                   	push   ebx
c0020f3a:	83 ec 18             	sub    esp,0x18
c0020f3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f41:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020f44:	83 f8 02             	cmp    eax,0x2
c0020f47:	76 61                	jbe    c0020faa <SysReadDir(regs*)+0x71>
c0020f49:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020f50:	77 49                	ja     c0020f9b <SysReadDir(regs*)+0x62>
c0020f52:	83 ec 0c             	sub    esp,0xc
c0020f55:	50                   	push   eax
c0020f56:	e8 5c 6e ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0020f5b:	83 c4 10             	add    esp,0x10
c0020f5e:	85 c0                	test   eax,eax
c0020f60:	74 39                	je     c0020f9b <SysReadDir(regs*)+0x62>
c0020f62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f6a:	83 ec 0c             	sub    esp,0xc
c0020f6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f6f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020f73:	51                   	push   ecx
c0020f74:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020f77:	51                   	push   ecx
c0020f78:	6a 00                	push   0x0
c0020f7a:	68 10 01 00 00       	push   0x110
c0020f7f:	50                   	push   eax
c0020f80:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020f83:	83 c4 20             	add    esp,0x20
c0020f86:	85 c0                	test   eax,eax
c0020f88:	74 29                	je     c0020fb3 <SysReadDir(regs*)+0x7a>
c0020f8a:	83 f8 07             	cmp    eax,0x7
c0020f8d:	74 1b                	je     c0020faa <SysReadDir(regs*)+0x71>
c0020f8f:	b8 02 00 00 00       	mov    eax,0x2
c0020f94:	31 d2                	xor    edx,edx
c0020f96:	83 c4 18             	add    esp,0x18
c0020f99:	5b                   	pop    ebx
c0020f9a:	c3                   	ret    
c0020f9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fa0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fa5:	83 c4 18             	add    esp,0x18
c0020fa8:	5b                   	pop    ebx
c0020fa9:	c3                   	ret    
c0020faa:	b8 01 00 00 00       	mov    eax,0x1
c0020faf:	31 d2                	xor    edx,edx
c0020fb1:	eb e3                	jmp    c0020f96 <SysReadDir(regs*)+0x5d>
c0020fb3:	31 c0                	xor    eax,eax
c0020fb5:	31 d2                	xor    edx,edx
c0020fb7:	eb dd                	jmp    c0020f96 <SysReadDir(regs*)+0x5d>

c0020fb9 <SysIsATTY(regs*)>:
c0020fb9:	83 ec 0c             	sub    esp,0xc
c0020fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fc3:	83 f8 02             	cmp    eax,0x2
c0020fc6:	76 07                	jbe    c0020fcf <SysIsATTY(regs*)+0x16>
c0020fc8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020fcd:	75 26                	jne    c0020ff5 <SysIsATTY(regs*)+0x3c>
c0020fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fd7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020fdd:	85 c0                	test   eax,eax
c0020fdf:	74 24                	je     c0021005 <SysIsATTY(regs*)+0x4c>
c0020fe1:	83 ec 0c             	sub    esp,0xc
c0020fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0020fe6:	50                   	push   eax
c0020fe7:	ff 12                	call   DWORD PTR [edx]
c0020fe9:	31 d2                	xor    edx,edx
c0020feb:	0f b6 c0             	movzx  eax,al
c0020fee:	83 c4 10             	add    esp,0x10
c0020ff1:	83 c4 0c             	add    esp,0xc
c0020ff4:	c3                   	ret    
c0020ff5:	83 ec 0c             	sub    esp,0xc
c0020ff8:	50                   	push   eax
c0020ff9:	e8 b9 6d ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0020ffe:	83 c4 10             	add    esp,0x10
c0021001:	85 c0                	test   eax,eax
c0021003:	75 dc                	jne    c0020fe1 <SysIsATTY(regs*)+0x28>
c0021005:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002100a:	ba ff ff ff ff       	mov    edx,0xffffffff
c002100f:	83 c4 0c             	add    esp,0xc
c0021012:	c3                   	ret    

c0021013 <SysSeek(regs*)>:
c0021013:	53                   	push   ebx
c0021014:	83 ec 08             	sub    esp,0x8
c0021017:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002101b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002101e:	8d 50 fd             	lea    edx,[eax-0x3]
c0021021:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021027:	77 32                	ja     c002105b <SysSeek(regs*)+0x48>
c0021029:	83 ec 0c             	sub    esp,0xc
c002102c:	50                   	push   eax
c002102d:	e8 85 6d ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0021032:	83 c4 0c             	add    esp,0xc
c0021035:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021038:	31 db                	xor    ebx,ebx
c002103a:	53                   	push   ebx
c002103b:	51                   	push   ecx
c002103c:	50                   	push   eax
c002103d:	e8 ea 94 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0021042:	83 c4 10             	add    esp,0x10
c0021045:	85 c0                	test   eax,eax
c0021047:	0f 95 c0             	setne  al
c002104a:	31 d2                	xor    edx,edx
c002104c:	0f b6 c0             	movzx  eax,al
c002104f:	f7 d8                	neg    eax
c0021051:	83 d2 00             	adc    edx,0x0
c0021054:	83 c4 08             	add    esp,0x8
c0021057:	f7 da                	neg    edx
c0021059:	5b                   	pop    ebx
c002105a:	c3                   	ret    
c002105b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021060:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021065:	83 c4 08             	add    esp,0x8
c0021068:	5b                   	pop    ebx
c0021069:	c3                   	ret    

c002106a <SysTell(regs*)>:
c002106a:	53                   	push   ebx
c002106b:	83 ec 08             	sub    esp,0x8
c002106e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021072:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021075:	83 f8 02             	cmp    eax,0x2
c0021078:	76 4e                	jbe    c00210c8 <SysTell(regs*)+0x5e>
c002107a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002107f:	76 19                	jbe    c002109a <SysTell(regs*)+0x30>
c0021081:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021084:	31 d2                	xor    edx,edx
c0021086:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002108c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021093:	31 c0                	xor    eax,eax
c0021095:	83 c4 08             	add    esp,0x8
c0021098:	5b                   	pop    ebx
c0021099:	c3                   	ret    
c002109a:	83 ec 0c             	sub    esp,0xc
c002109d:	50                   	push   eax
c002109e:	e8 14 6d ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c00210a3:	5a                   	pop    edx
c00210a4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00210a7:	59                   	pop    ecx
c00210a8:	53                   	push   ebx
c00210a9:	50                   	push   eax
c00210aa:	e8 29 95 ff ff       	call   c001a5d8 <File::tell(unsigned long long*)>
c00210af:	83 c4 10             	add    esp,0x10
c00210b2:	85 c0                	test   eax,eax
c00210b4:	0f 95 c0             	setne  al
c00210b7:	31 d2                	xor    edx,edx
c00210b9:	0f b6 c0             	movzx  eax,al
c00210bc:	f7 d8                	neg    eax
c00210be:	83 d2 00             	adc    edx,0x0
c00210c1:	83 c4 08             	add    esp,0x8
c00210c4:	f7 da                	neg    edx
c00210c6:	5b                   	pop    ebx
c00210c7:	c3                   	ret    
c00210c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210d2:	83 c4 08             	add    esp,0x8
c00210d5:	5b                   	pop    ebx
c00210d6:	c3                   	ret    

c00210d7 <SysSize(regs*)>:
c00210d7:	53                   	push   ebx
c00210d8:	83 ec 18             	sub    esp,0x18
c00210db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00210df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210e2:	83 f8 02             	cmp    eax,0x2
c00210e5:	76 54                	jbe    c002113b <SysSize(regs*)+0x64>
c00210e7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210ec:	76 19                	jbe    c0021107 <SysSize(regs*)+0x30>
c00210ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210f1:	31 d2                	xor    edx,edx
c00210f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021100:	31 c0                	xor    eax,eax
c0021102:	83 c4 18             	add    esp,0x18
c0021105:	5b                   	pop    ebx
c0021106:	c3                   	ret    
c0021107:	83 ec 0c             	sub    esp,0xc
c002110a:	50                   	push   eax
c002110b:	e8 a7 6c ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0021110:	83 c4 0c             	add    esp,0xc
c0021113:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021117:	52                   	push   edx
c0021118:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002111b:	52                   	push   edx
c002111c:	50                   	push   eax
c002111d:	e8 4e 96 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0021122:	83 c4 10             	add    esp,0x10
c0021125:	85 c0                	test   eax,eax
c0021127:	0f 95 c0             	setne  al
c002112a:	31 d2                	xor    edx,edx
c002112c:	0f b6 c0             	movzx  eax,al
c002112f:	f7 d8                	neg    eax
c0021131:	83 d2 00             	adc    edx,0x0
c0021134:	83 c4 18             	add    esp,0x18
c0021137:	f7 da                	neg    edx
c0021139:	5b                   	pop    ebx
c002113a:	c3                   	ret    
c002113b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021140:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021145:	83 c4 18             	add    esp,0x18
c0021148:	5b                   	pop    ebx
c0021149:	c3                   	ret    

c002114a <SysSizeFromFilename(regs*)>:
c002114a:	55                   	push   ebp
c002114b:	57                   	push   edi
c002114c:	56                   	push   esi
c002114d:	53                   	push   ebx
c002114e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021154:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c002115b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002115e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021161:	85 f6                	test   esi,esi
c0021163:	74 34                	je     c0021199 <SysSizeFromFilename(regs*)+0x4f>
c0021165:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002116b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002116e:	83 f8 02             	cmp    eax,0x2
c0021171:	76 2d                	jbe    c00211a0 <SysSizeFromFilename(regs*)+0x56>
c0021173:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021178:	76 3b                	jbe    c00211b5 <SysSizeFromFilename(regs*)+0x6b>
c002117a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002117d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021183:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002118a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021190:	31 c0                	xor    eax,eax
c0021192:	5b                   	pop    ebx
c0021193:	31 d2                	xor    edx,edx
c0021195:	5e                   	pop    esi
c0021196:	5f                   	pop    edi
c0021197:	5d                   	pop    ebp
c0021198:	c3                   	ret    
c0021199:	89 f8                	mov    eax,edi
c002119b:	83 f8 02             	cmp    eax,0x2
c002119e:	77 d3                	ja     c0021173 <SysSizeFromFilename(regs*)+0x29>
c00211a0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00211a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211ab:	5b                   	pop    ebx
c00211ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211b1:	5e                   	pop    esi
c00211b2:	5f                   	pop    edi
c00211b3:	5d                   	pop    ebp
c00211b4:	c3                   	ret    
c00211b5:	83 ec 0c             	sub    esp,0xc
c00211b8:	68 14 01 00 00       	push   0x114
c00211bd:	e8 f8 51 ff ff       	call   c00163ba <malloc>
c00211c2:	6a 01                	push   0x1
c00211c4:	89 c5                	mov    ebp,eax
c00211c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211cb:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00211ce:	51                   	push   ecx
c00211cf:	57                   	push   edi
c00211d0:	55                   	push   ebp
c00211d1:	e8 9c 91 ff ff       	call   c001a372 <File::File(char const*, Process*, bool)>
c00211d6:	83 c4 1c             	add    esp,0x1c
c00211d9:	8d 44 24 23          	lea    eax,[esp+0x23]
c00211dd:	50                   	push   eax
c00211de:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00211e1:	53                   	push   ebx
c00211e2:	55                   	push   ebp
c00211e3:	e8 88 95 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	85 ed                	test   ebp,ebp
c00211ed:	74 15                	je     c0021204 <SysSizeFromFilename(regs*)+0xba>
c00211ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211f3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00211f6:	83 ec 0c             	sub    esp,0xc
c00211f9:	55                   	push   ebp
c00211fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021204:	85 c0                	test   eax,eax
c0021206:	75 98                	jne    c00211a0 <SysSizeFromFilename(regs*)+0x56>
c0021208:	6a 00                	push   0x0
c002120a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002120f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021212:	05 0c 01 00 00       	add    eax,0x10c
c0021217:	50                   	push   eax
c0021218:	57                   	push   edi
c0021219:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021220:	53                   	push   ebx
c0021221:	e8 32 8f ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021226:	58                   	pop    eax
c0021227:	5a                   	pop    edx
c0021228:	8d 44 24 28          	lea    eax,[esp+0x28]
c002122c:	50                   	push   eax
c002122d:	53                   	push   ebx
c002122e:	e8 8d 89 ff ff       	call   c0019bc0 <KeDereferenceSymlink(char const*, char*)>
c0021233:	83 c4 10             	add    esp,0x10
c0021236:	83 f8 01             	cmp    eax,0x1
c0021239:	74 1a                	je     c0021255 <SysSizeFromFilename(regs*)+0x10b>
c002123b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021240:	74 26                	je     c0021268 <SysSizeFromFilename(regs*)+0x11e>
c0021242:	85 f6                	test   esi,esi
c0021244:	0f 84 40 ff ff ff    	je     c002118a <SysSizeFromFilename(regs*)+0x40>
c002124a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021250:	e9 35 ff ff ff       	jmp    c002118a <SysSizeFromFilename(regs*)+0x40>
c0021255:	85 f6                	test   esi,esi
c0021257:	0f 84 2d ff ff ff    	je     c002118a <SysSizeFromFilename(regs*)+0x40>
c002125d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021263:	e9 22 ff ff ff       	jmp    c002118a <SysSizeFromFilename(regs*)+0x40>
c0021268:	85 f6                	test   esi,esi
c002126a:	0f 84 1a ff ff ff    	je     c002118a <SysSizeFromFilename(regs*)+0x40>
c0021270:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021276:	e9 0f ff ff ff       	jmp    c002118a <SysSizeFromFilename(regs*)+0x40>

c002127b <SysSizeFromFilenameNoSymlink(regs*)>:
c002127b:	55                   	push   ebp
c002127c:	57                   	push   edi
c002127d:	56                   	push   esi
c002127e:	53                   	push   ebx
c002127f:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021285:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c002128c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002128f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021292:	85 f6                	test   esi,esi
c0021294:	74 34                	je     c00212ca <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0021296:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002129c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002129f:	83 f8 02             	cmp    eax,0x2
c00212a2:	76 2d                	jbe    c00212d1 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00212a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212a9:	76 3b                	jbe    c00212e6 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00212ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212bb:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212c1:	31 c0                	xor    eax,eax
c00212c3:	5b                   	pop    ebx
c00212c4:	31 d2                	xor    edx,edx
c00212c6:	5e                   	pop    esi
c00212c7:	5f                   	pop    edi
c00212c8:	5d                   	pop    ebp
c00212c9:	c3                   	ret    
c00212ca:	89 f8                	mov    eax,edi
c00212cc:	83 f8 02             	cmp    eax,0x2
c00212cf:	77 d3                	ja     c00212a4 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00212d1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212dc:	5b                   	pop    ebx
c00212dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212e2:	5e                   	pop    esi
c00212e3:	5f                   	pop    edi
c00212e4:	5d                   	pop    ebp
c00212e5:	c3                   	ret    
c00212e6:	83 ec 0c             	sub    esp,0xc
c00212e9:	68 14 01 00 00       	push   0x114
c00212ee:	e8 c7 50 ff ff       	call   c00163ba <malloc>
c00212f3:	6a 00                	push   0x0
c00212f5:	89 c5                	mov    ebp,eax
c00212f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00212fc:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00212ff:	51                   	push   ecx
c0021300:	57                   	push   edi
c0021301:	55                   	push   ebp
c0021302:	e8 6b 90 ff ff       	call   c001a372 <File::File(char const*, Process*, bool)>
c0021307:	83 c4 1c             	add    esp,0x1c
c002130a:	8d 44 24 23          	lea    eax,[esp+0x23]
c002130e:	50                   	push   eax
c002130f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021312:	53                   	push   ebx
c0021313:	55                   	push   ebp
c0021314:	e8 57 94 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0021319:	83 c4 10             	add    esp,0x10
c002131c:	85 ed                	test   ebp,ebp
c002131e:	74 15                	je     c0021335 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0021320:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021324:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021327:	83 ec 0c             	sub    esp,0xc
c002132a:	55                   	push   ebp
c002132b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002132e:	83 c4 10             	add    esp,0x10
c0021331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021335:	85 c0                	test   eax,eax
c0021337:	75 98                	jne    c00212d1 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021339:	6a 00                	push   0x0
c002133b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021340:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021343:	05 0c 01 00 00       	add    eax,0x10c
c0021348:	50                   	push   eax
c0021349:	57                   	push   edi
c002134a:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021351:	53                   	push   ebx
c0021352:	e8 01 8e ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021357:	58                   	pop    eax
c0021358:	5a                   	pop    edx
c0021359:	8d 44 24 28          	lea    eax,[esp+0x28]
c002135d:	50                   	push   eax
c002135e:	53                   	push   ebx
c002135f:	e8 5c 88 ff ff       	call   c0019bc0 <KeDereferenceSymlink(char const*, char*)>
c0021364:	83 c4 10             	add    esp,0x10
c0021367:	83 f8 01             	cmp    eax,0x1
c002136a:	74 1a                	je     c0021386 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c002136c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021371:	74 26                	je     c0021399 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0021373:	85 f6                	test   esi,esi
c0021375:	0f 84 40 ff ff ff    	je     c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002137b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021381:	e9 35 ff ff ff       	jmp    c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021386:	85 f6                	test   esi,esi
c0021388:	0f 84 2d ff ff ff    	je     c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002138e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021394:	e9 22 ff ff ff       	jmp    c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021399:	85 f6                	test   esi,esi
c002139b:	0f 84 1a ff ff ff    	je     c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00213a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213a7:	e9 0f ff ff ff       	jmp    c00212bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00213ac <SysClose(regs*)>:
c00213ac:	53                   	push   ebx
c00213ad:	83 ec 08             	sub    esp,0x8
c00213b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213b7:	83 f8 02             	cmp    eax,0x2
c00213ba:	76 41                	jbe    c00213fd <SysClose(regs*)+0x51>
c00213bc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00213c2:	83 fa 01             	cmp    edx,0x1
c00213c5:	76 2d                	jbe    c00213f4 <SysClose(regs*)+0x48>
c00213c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213cc:	77 2f                	ja     c00213fd <SysClose(regs*)+0x51>
c00213ce:	83 ec 0c             	sub    esp,0xc
c00213d1:	50                   	push   eax
c00213d2:	e8 e0 69 ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c00213d7:	89 c3                	mov    ebx,eax
c00213d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00213dc:	e8 eb 90 ff ff       	call   c001a4cc <File::close()>
c00213e1:	83 c4 10             	add    esp,0x10
c00213e4:	85 db                	test   ebx,ebx
c00213e6:	74 0c                	je     c00213f4 <SysClose(regs*)+0x48>
c00213e8:	83 ec 0c             	sub    esp,0xc
c00213eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00213ed:	53                   	push   ebx
c00213ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00213f1:	83 c4 10             	add    esp,0x10
c00213f4:	31 c0                	xor    eax,eax
c00213f6:	31 d2                	xor    edx,edx
c00213f8:	83 c4 08             	add    esp,0x8
c00213fb:	5b                   	pop    ebx
c00213fc:	c3                   	ret    
c00213fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021402:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021407:	83 c4 08             	add    esp,0x8
c002140a:	5b                   	pop    ebx
c002140b:	c3                   	ret    

c002140c <SysOpenDir(regs*)>:
c002140c:	56                   	push   esi
c002140d:	53                   	push   ebx
c002140e:	83 ec 04             	sub    esp,0x4
c0021411:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021415:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021418:	85 c9                	test   ecx,ecx
c002141a:	74 5d                	je     c0021479 <SysOpenDir(regs*)+0x6d>
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	68 14 01 00 00       	push   0x114
c0021424:	e8 91 4f ff ff       	call   c00163ba <malloc>
c0021429:	83 c4 0c             	add    esp,0xc
c002142c:	89 c6                	mov    esi,eax
c002142e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021433:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021436:	50                   	push   eax
c0021437:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002143a:	52                   	push   edx
c002143b:	56                   	push   esi
c002143c:	e8 ef 94 ff ff       	call   c001a930 <Directory::Directory(char const*, Process*)>
c0021441:	83 c4 10             	add    esp,0x10
c0021444:	85 f6                	test   esi,esi
c0021446:	74 31                	je     c0021479 <SysOpenDir(regs*)+0x6d>
c0021448:	83 ec 0c             	sub    esp,0xc
c002144b:	56                   	push   esi
c002144c:	e8 a7 95 ff ff       	call   c001a9f8 <Directory::open()>
c0021451:	83 c4 10             	add    esp,0x10
c0021454:	85 c0                	test   eax,eax
c0021456:	75 21                	jne    c0021479 <SysOpenDir(regs*)+0x6d>
c0021458:	83 ec 0c             	sub    esp,0xc
c002145b:	56                   	push   esi
c002145c:	e8 59 66 ff ff       	call   c0017aba <UnixFile::getFileDescriptor()>
c0021461:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021464:	83 c4 10             	add    esp,0x10
c0021467:	89 02                	mov    DWORD PTR [edx],eax
c0021469:	c1 f8 1f             	sar    eax,0x1f
c002146c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002146f:	83 c4 04             	add    esp,0x4
c0021472:	31 c0                	xor    eax,eax
c0021474:	31 d2                	xor    edx,edx
c0021476:	5b                   	pop    ebx
c0021477:	5e                   	pop    esi
c0021478:	c3                   	ret    
c0021479:	83 c4 04             	add    esp,0x4
c002147c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021481:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021486:	5b                   	pop    ebx
c0021487:	5e                   	pop    esi
c0021488:	c3                   	ret    

c0021489 <SysMakeDir(regs*)>:
c0021489:	56                   	push   esi
c002148a:	53                   	push   ebx
c002148b:	83 ec 10             	sub    esp,0x10
c002148e:	68 14 01 00 00       	push   0x114
c0021493:	e8 22 4f ff ff       	call   c00163ba <malloc>
c0021498:	83 c4 0c             	add    esp,0xc
c002149b:	89 c3                	mov    ebx,eax
c002149d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214a5:	50                   	push   eax
c00214a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214aa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00214ad:	52                   	push   edx
c00214ae:	53                   	push   ebx
c00214af:	e8 7c 94 ff ff       	call   c001a930 <Directory::Directory(char const*, Process*)>
c00214b4:	83 c4 10             	add    esp,0x10
c00214b7:	85 db                	test   ebx,ebx
c00214b9:	74 2c                	je     c00214e7 <SysMakeDir(regs*)+0x5e>
c00214bb:	83 ec 0c             	sub    esp,0xc
c00214be:	53                   	push   ebx
c00214bf:	e8 14 97 ff ff       	call   c001abd8 <Directory::create()>
c00214c4:	89 c6                	mov    esi,eax
c00214c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00214c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00214cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00214ce:	83 c4 10             	add    esp,0x10
c00214d1:	31 c0                	xor    eax,eax
c00214d3:	85 f6                	test   esi,esi
c00214d5:	0f 95 c0             	setne  al
c00214d8:	31 d2                	xor    edx,edx
c00214da:	f7 d8                	neg    eax
c00214dc:	83 d2 00             	adc    edx,0x0
c00214df:	83 c4 04             	add    esp,0x4
c00214e2:	f7 da                	neg    edx
c00214e4:	5b                   	pop    ebx
c00214e5:	5e                   	pop    esi
c00214e6:	c3                   	ret    
c00214e7:	83 c4 04             	add    esp,0x4
c00214ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214f4:	5b                   	pop    ebx
c00214f5:	5e                   	pop    esi
c00214f6:	c3                   	ret    

c00214f7 <SysCloseDir(regs*)>:
c00214f7:	53                   	push   ebx
c00214f8:	83 ec 08             	sub    esp,0x8
c00214fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021502:	8d 50 fd             	lea    edx,[eax-0x3]
c0021505:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002150b:	77 2f                	ja     c002153c <SysCloseDir(regs*)+0x45>
c002150d:	83 ec 0c             	sub    esp,0xc
c0021510:	50                   	push   eax
c0021511:	e8 a1 68 ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0021516:	89 c3                	mov    ebx,eax
c0021518:	89 04 24             	mov    DWORD PTR [esp],eax
c002151b:	e8 34 95 ff ff       	call   c001aa54 <Directory::close()>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	85 db                	test   ebx,ebx
c0021525:	74 0c                	je     c0021533 <SysCloseDir(regs*)+0x3c>
c0021527:	83 ec 0c             	sub    esp,0xc
c002152a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002152c:	53                   	push   ebx
c002152d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	31 c0                	xor    eax,eax
c0021535:	31 d2                	xor    edx,edx
c0021537:	83 c4 08             	add    esp,0x8
c002153a:	5b                   	pop    ebx
c002153b:	c3                   	ret    
c002153c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021541:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021546:	83 c4 08             	add    esp,0x8
c0021549:	5b                   	pop    ebx
c002154a:	c3                   	ret    

c002154b <SysWait(regs*)>:
c002154b:	83 ec 10             	sub    esp,0x10
c002154e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021552:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021555:	52                   	push   edx
c0021556:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021559:	51                   	push   ecx
c002155a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002155d:	50                   	push   eax
c002155e:	e8 e9 3d 00 00       	call   c002534c <waitTask(int, int*, int)>
c0021563:	83 c4 1c             	add    esp,0x1c
c0021566:	89 c2                	mov    edx,eax
c0021568:	c1 fa 1f             	sar    edx,0x1f
c002156b:	c3                   	ret    

c002156c <SysNotImpl(regs*)>:
c002156c:	83 ec 18             	sub    esp,0x18
c002156f:	68 e4 29 03 c0       	push   0xc00329e4
c0021574:	e8 e9 ec ff ff       	call   c0020262 <KePanic(char const*)>
c0021579:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002157e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021583:	83 c4 1c             	add    esp,0x1c
c0021586:	c3                   	ret    

c0021587 <SysPanic(regs*)>:
c0021587:	83 ec 18             	sub    esp,0x18
c002158a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002158e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021591:	50                   	push   eax
c0021592:	e8 cb ec ff ff       	call   c0020262 <KePanic(char const*)>
c0021597:	b8 01 00 00 00       	mov    eax,0x1
c002159c:	31 d2                	xor    edx,edx
c002159e:	83 c4 1c             	add    esp,0x1c
c00215a1:	c3                   	ret    

c00215a2 <SysRmdir(regs*)>:
c00215a2:	56                   	push   esi
c00215a3:	53                   	push   ebx
c00215a4:	83 ec 20             	sub    esp,0x20
c00215a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00215ab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00215ae:	68 14 01 00 00       	push   0x114
c00215b3:	e8 02 4e ff ff       	call   c00163ba <malloc>
c00215b8:	6a 00                	push   0x0
c00215ba:	89 c3                	mov    ebx,eax
c00215bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215c4:	50                   	push   eax
c00215c5:	56                   	push   esi
c00215c6:	53                   	push   ebx
c00215c7:	e8 a6 8d ff ff       	call   c001a372 <File::File(char const*, Process*, bool)>
c00215cc:	83 c4 14             	add    esp,0x14
c00215cf:	53                   	push   ebx
c00215d0:	e8 67 90 ff ff       	call   c001a63c <File::unlink()>
c00215d5:	83 c4 10             	add    esp,0x10
c00215d8:	85 db                	test   ebx,ebx
c00215da:	74 14                	je     c00215f0 <SysRmdir(regs*)+0x4e>
c00215dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215e2:	83 ec 0c             	sub    esp,0xc
c00215e5:	53                   	push   ebx
c00215e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215f0:	85 c0                	test   eax,eax
c00215f2:	0f 95 c0             	setne  al
c00215f5:	31 d2                	xor    edx,edx
c00215f7:	0f b6 c0             	movzx  eax,al
c00215fa:	f7 d8                	neg    eax
c00215fc:	83 d2 00             	adc    edx,0x0
c00215ff:	83 c4 14             	add    esp,0x14
c0021602:	f7 da                	neg    edx
c0021604:	5b                   	pop    ebx
c0021605:	5e                   	pop    esi
c0021606:	c3                   	ret    

c0021607 <SysUnlink(regs*)>:
c0021607:	56                   	push   esi
c0021608:	53                   	push   ebx
c0021609:	83 ec 20             	sub    esp,0x20
c002160c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021610:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021613:	68 14 01 00 00       	push   0x114
c0021618:	e8 9d 4d ff ff       	call   c00163ba <malloc>
c002161d:	6a 00                	push   0x0
c002161f:	89 c3                	mov    ebx,eax
c0021621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021626:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021629:	50                   	push   eax
c002162a:	56                   	push   esi
c002162b:	53                   	push   ebx
c002162c:	e8 41 8d ff ff       	call   c001a372 <File::File(char const*, Process*, bool)>
c0021631:	83 c4 14             	add    esp,0x14
c0021634:	53                   	push   ebx
c0021635:	e8 02 90 ff ff       	call   c001a63c <File::unlink()>
c002163a:	83 c4 10             	add    esp,0x10
c002163d:	85 db                	test   ebx,ebx
c002163f:	74 14                	je     c0021655 <SysUnlink(regs*)+0x4e>
c0021641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021645:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021647:	83 ec 0c             	sub    esp,0xc
c002164a:	53                   	push   ebx
c002164b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002164e:	83 c4 10             	add    esp,0x10
c0021651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021655:	85 c0                	test   eax,eax
c0021657:	0f 95 c0             	setne  al
c002165a:	31 d2                	xor    edx,edx
c002165c:	0f b6 c0             	movzx  eax,al
c002165f:	f7 d8                	neg    eax
c0021661:	83 d2 00             	adc    edx,0x0
c0021664:	83 c4 14             	add    esp,0x14
c0021667:	f7 da                	neg    edx
c0021669:	5b                   	pop    ebx
c002166a:	5e                   	pop    esi
c002166b:	c3                   	ret    

c002166c <SysGetArgv(regs*)>:
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021673:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021676:	85 c0                	test   eax,eax
c0021678:	78 2c                	js     c00216a6 <SysGetArgv(regs*)+0x3a>
c002167a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021680:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021683:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021689:	7d 1b                	jge    c00216a6 <SysGetArgv(regs*)+0x3a>
c002168b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021692:	85 c0                	test   eax,eax
c0021694:	74 18                	je     c00216ae <SysGetArgv(regs*)+0x42>
c0021696:	83 ec 08             	sub    esp,0x8
c0021699:	50                   	push   eax
c002169a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c002169d:	50                   	push   eax
c002169e:	e8 9d ef fd ff       	call   c0000640 <strcpy>
c00216a3:	83 c4 10             	add    esp,0x10
c00216a6:	31 c0                	xor    eax,eax
c00216a8:	31 d2                	xor    edx,edx
c00216aa:	83 c4 0c             	add    esp,0xc
c00216ad:	c3                   	ret    
c00216ae:	b8 01 00 00 00       	mov    eax,0x1
c00216b3:	31 d2                	xor    edx,edx
c00216b5:	83 c4 0c             	add    esp,0xc
c00216b8:	c3                   	ret    

c00216b9 <SysUSleep(regs*)>:
c00216b9:	83 ec 1c             	sub    esp,0x1c
c00216bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00216c0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00216c3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00216c6:	6a 00                	push   0x0
c00216c8:	6a 64                	push   0x64
c00216ca:	52                   	push   edx
c00216cb:	50                   	push   eax
c00216cc:	e8 7f cf 00 00       	call   c002e650 <__udivdi3>
c00216d1:	83 c4 14             	add    esp,0x14
c00216d4:	50                   	push   eax
c00216d5:	e8 56 3d 00 00       	call   c0025430 <milliTenthSleep(unsigned int)>
c00216da:	31 c0                	xor    eax,eax
c00216dc:	31 d2                	xor    edx,edx
c00216de:	83 c4 1c             	add    esp,0x1c
c00216e1:	c3                   	ret    

c00216e2 <SysSpawn(regs*)>:
c00216e2:	56                   	push   esi
c00216e3:	53                   	push   ebx
c00216e4:	83 ec 04             	sub    esp,0x4
c00216e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216eb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216ee:	85 f6                	test   esi,esi
c00216f0:	75 0a                	jne    c00216fc <SysSpawn(regs*)+0x1a>
c00216f2:	83 c4 04             	add    esp,0x4
c00216f5:	31 c0                	xor    eax,eax
c00216f7:	31 d2                	xor    edx,edx
c00216f9:	5b                   	pop    ebx
c00216fa:	5e                   	pop    esi
c00216fb:	c3                   	ret    
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	68 24 07 00 00       	push   0x724
c0021704:	e8 b1 4c ff ff       	call   c00163ba <malloc>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002170f:	89 c6                	mov    esi,eax
c0021711:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021714:	85 c9                	test   ecx,ecx
c0021716:	75 39                	jne    c0021751 <SysSpawn(regs*)+0x6f>
c0021718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002171d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021720:	52                   	push   edx
c0021721:	50                   	push   eax
c0021722:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021725:	50                   	push   eax
c0021726:	56                   	push   esi
c0021727:	e8 a8 34 00 00       	call   c0024bd4 <Process::Process(char const*, Process*, char**)>
c002172c:	83 c4 10             	add    esp,0x10
c002172f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021736:	75 ba                	jne    c00216f2 <SysSpawn(regs*)+0x10>
c0021738:	83 ec 0c             	sub    esp,0xc
c002173b:	56                   	push   esi
c002173c:	e8 d3 39 00 00       	call   c0025114 <Process::createUserThread()>
c0021741:	8b 06                	mov    eax,DWORD PTR [esi]
c0021743:	83 c4 10             	add    esp,0x10
c0021746:	89 c2                	mov    edx,eax
c0021748:	83 c4 04             	add    esp,0x4
c002174b:	c1 fa 1f             	sar    edx,0x1f
c002174e:	5b                   	pop    ebx
c002174f:	5e                   	pop    esi
c0021750:	c3                   	ret    
c0021751:	31 c0                	xor    eax,eax
c0021753:	eb cb                	jmp    c0021720 <SysSpawn(regs*)+0x3e>

c0021755 <SysGetEnv(regs*)>:
c0021755:	57                   	push   edi
c0021756:	56                   	push   esi
c0021757:	53                   	push   ebx
c0021758:	83 ec 1c             	sub    esp,0x1c
c002175b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002175f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021764:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021767:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002176a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002176d:	51                   	push   ecx
c002176e:	e8 8c e9 ff ff       	call   c00200ff <KeGetProcessTotalEnvCount(Process*)>
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	39 c7                	cmp    edi,eax
c0021778:	7c 14                	jl     c002178e <SysGetEnv(regs*)+0x39>
c002177a:	85 f6                	test   esi,esi
c002177c:	75 0b                	jne    c0021789 <SysGetEnv(regs*)+0x34>
c002177e:	83 c4 10             	add    esp,0x10
c0021781:	31 c0                	xor    eax,eax
c0021783:	5b                   	pop    ebx
c0021784:	31 d2                	xor    edx,edx
c0021786:	5e                   	pop    esi
c0021787:	5f                   	pop    edi
c0021788:	c3                   	ret    
c0021789:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002178c:	eb f0                	jmp    c002177e <SysGetEnv(regs*)+0x29>
c002178e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021792:	83 ec 04             	sub    esp,0x4
c0021795:	57                   	push   edi
c0021796:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002179c:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c002179f:	57                   	push   edi
c00217a0:	50                   	push   eax
c00217a1:	e8 79 e9 ff ff       	call   c002011f <KeGetProcessEnvPair(Process*, int)>
c00217a6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00217a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00217b1:	83 c4 0c             	add    esp,0xc
c00217b4:	85 d2                	test   edx,edx
c00217b6:	75 23                	jne    c00217db <SysGetEnv(regs*)+0x86>
c00217b8:	83 ec 0c             	sub    esp,0xc
c00217bb:	50                   	push   eax
c00217bc:	e8 af ed fd ff       	call   c0000570 <strlen>
c00217c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00217c4:	89 c3                	mov    ebx,eax
c00217c6:	e8 a5 ed fd ff       	call   c0000570 <strlen>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00217d2:	83 c4 10             	add    esp,0x10
c00217d5:	31 d2                	xor    edx,edx
c00217d7:	5b                   	pop    ebx
c00217d8:	5e                   	pop    esi
c00217d9:	5f                   	pop    edi
c00217da:	c3                   	ret    
c00217db:	83 ec 08             	sub    esp,0x8
c00217de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217e1:	50                   	push   eax
c00217e2:	56                   	push   esi
c00217e3:	e8 58 ee fd ff       	call   c0000640 <strcpy>
c00217e8:	58                   	pop    eax
c00217e9:	5a                   	pop    edx
c00217ea:	68 fe 29 03 c0       	push   0xc00329fe
c00217ef:	56                   	push   esi
c00217f0:	e8 4b f0 fd ff       	call   c0000840 <strcat>
c00217f5:	59                   	pop    ecx
c00217f6:	5b                   	pop    ebx
c00217f7:	57                   	push   edi
c00217f8:	56                   	push   esi
c00217f9:	e8 42 f0 fd ff       	call   c0000840 <strcat>
c00217fe:	83 c4 10             	add    esp,0x10
c0021801:	e9 78 ff ff ff       	jmp    c002177e <SysGetEnv(regs*)+0x29>

c0021806 <SysSetFatAttrib(regs*)>:
c0021806:	57                   	push   edi
c0021807:	56                   	push   esi
c0021808:	53                   	push   ebx
c0021809:	83 ec 1c             	sub    esp,0x1c
c002180c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021810:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021813:	68 14 01 00 00       	push   0x114
c0021818:	e8 9d 4b ff ff       	call   c00163ba <malloc>
c002181d:	83 c4 0c             	add    esp,0xc
c0021820:	89 c3                	mov    ebx,eax
c0021822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021827:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002182a:	50                   	push   eax
c002182b:	57                   	push   edi
c002182c:	53                   	push   ebx
c002182d:	e8 1e 8c ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0021832:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021835:	83 c4 0c             	add    esp,0xc
c0021838:	0f b6 d4             	movzx  edx,ah
c002183b:	0f b6 c0             	movzx  eax,al
c002183e:	52                   	push   edx
c002183f:	50                   	push   eax
c0021840:	53                   	push   ebx
c0021841:	e8 90 8e ff ff       	call   c001a6d6 <File::chfatattr(unsigned char, unsigned char)>
c0021846:	83 c4 10             	add    esp,0x10
c0021849:	85 db                	test   ebx,ebx
c002184b:	74 14                	je     c0021861 <SysSetFatAttrib(regs*)+0x5b>
c002184d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021851:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021853:	83 ec 0c             	sub    esp,0xc
c0021856:	53                   	push   ebx
c0021857:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002185a:	83 c4 10             	add    esp,0x10
c002185d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021861:	85 c0                	test   eax,eax
c0021863:	0f 95 c0             	setne  al
c0021866:	31 d2                	xor    edx,edx
c0021868:	0f b6 c0             	movzx  eax,al
c002186b:	f7 d8                	neg    eax
c002186d:	83 d2 00             	adc    edx,0x0
c0021870:	83 c4 10             	add    esp,0x10
c0021873:	f7 da                	neg    edx
c0021875:	5b                   	pop    ebx
c0021876:	5e                   	pop    esi
c0021877:	5f                   	pop    edi
c0021878:	c3                   	ret    

c0021879 <SysPipe(regs*)>:
c0021879:	57                   	push   edi
c002187a:	56                   	push   esi
c002187b:	53                   	push   ebx
c002187c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021880:	83 ec 0c             	sub    esp,0xc
c0021883:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021886:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021889:	6a 20                	push   0x20
c002188b:	e8 2a 4b ff ff       	call   c00163ba <malloc>
c0021890:	89 c3                	mov    ebx,eax
c0021892:	58                   	pop    eax
c0021893:	5a                   	pop    edx
c0021894:	68 00 50 00 00       	push   0x5000
c0021899:	53                   	push   ebx
c002189a:	e8 8d 54 ff ff       	call   c0016d2c <Pipe::Pipe(int)>
c002189f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218a2:	e8 13 62 ff ff       	call   c0017aba <UnixFile::getFileDescriptor()>
c00218a7:	89 07                	mov    DWORD PTR [edi],eax
c00218a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218ac:	e8 09 62 ff ff       	call   c0017aba <UnixFile::getFileDescriptor()>
c00218b1:	83 c4 10             	add    esp,0x10
c00218b4:	89 06                	mov    DWORD PTR [esi],eax
c00218b6:	31 d2                	xor    edx,edx
c00218b8:	5b                   	pop    ebx
c00218b9:	31 c0                	xor    eax,eax
c00218bb:	5e                   	pop    esi
c00218bc:	5f                   	pop    edi
c00218bd:	c3                   	ret    

c00218be <SysGetUnixTime(regs*)>:
c00218be:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00218c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218cd:	e9 4c 95 ff ff       	jmp    c001ae1e <Clock::timeInSecondsLocal()>

c00218d2 <string_ends_with(char const*, char const*)>:
c00218d2:	57                   	push   edi
c00218d3:	56                   	push   esi
c00218d4:	53                   	push   ebx
c00218d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00218dd:	83 ec 0c             	sub    esp,0xc
c00218e0:	53                   	push   ebx
c00218e1:	e8 8a ec fd ff       	call   c0000570 <strlen>
c00218e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00218e9:	89 c6                	mov    esi,eax
c00218eb:	e8 80 ec fd ff       	call   c0000570 <strlen>
c00218f0:	83 c4 10             	add    esp,0x10
c00218f3:	39 c6                	cmp    esi,eax
c00218f5:	7d 06                	jge    c00218fd <string_ends_with(char const*, char const*)+0x2b>
c00218f7:	5b                   	pop    ebx
c00218f8:	31 c0                	xor    eax,eax
c00218fa:	5e                   	pop    esi
c00218fb:	5f                   	pop    edi
c00218fc:	c3                   	ret    
c00218fd:	83 ec 08             	sub    esp,0x8
c0021900:	29 c6                	sub    esi,eax
c0021902:	57                   	push   edi
c0021903:	01 f3                	add    ebx,esi
c0021905:	53                   	push   ebx
c0021906:	e8 45 ee fd ff       	call   c0000750 <strcmp>
c002190b:	83 c4 10             	add    esp,0x10
c002190e:	85 c0                	test   eax,eax
c0021910:	5b                   	pop    ebx
c0021911:	0f 94 c0             	sete   al
c0021914:	5e                   	pop    esi
c0021915:	0f b6 c0             	movzx  eax,al
c0021918:	5f                   	pop    edi
c0021919:	c3                   	ret    

c002191a <SysOpen(regs*)>:
c002191a:	56                   	push   esi
c002191b:	53                   	push   ebx
c002191c:	81 ec 04 01 00 00    	sub    esp,0x104
c0021922:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021929:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002192c:	85 c0                	test   eax,eax
c002192e:	0f 84 bc 01 00 00    	je     c0021af0 <SysOpen(regs*)+0x1d6>
c0021934:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021937:	85 c0                	test   eax,eax
c0021939:	0f 84 b1 01 00 00    	je     c0021af0 <SysOpen(regs*)+0x1d6>
c002193f:	6a 00                	push   0x0
c0021941:	68 00 2a 03 c0       	push   0xc0032a00
c0021946:	50                   	push   eax
c0021947:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002194b:	56                   	push   esi
c002194c:	e8 07 88 ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021951:	89 34 24             	mov    DWORD PTR [esp],esi
c0021954:	e8 17 ec fd ff       	call   c0000570 <strlen>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	83 e8 01             	sub    eax,0x1
c002195f:	74 21                	je     c0021982 <SysOpen(regs*)+0x68>
c0021961:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021965:	eb 12                	jmp    c0021979 <SysOpen(regs*)+0x5f>
c0021967:	83 fa 3a             	cmp    edx,0x3a
c002196a:	74 12                	je     c002197e <SysOpen(regs*)+0x64>
c002196c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021970:	83 e8 01             	sub    eax,0x1
c0021973:	74 0d                	je     c0021982 <SysOpen(regs*)+0x68>
c0021975:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021979:	83 fa 2e             	cmp    edx,0x2e
c002197c:	75 e9                	jne    c0021967 <SysOpen(regs*)+0x4d>
c002197e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021982:	83 ec 08             	sub    esp,0x8
c0021985:	68 04 2a 03 c0       	push   0xc0032a04
c002198a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002198d:	50                   	push   eax
c002198e:	e8 3f ff ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c0021993:	83 c4 10             	add    esp,0x10
c0021996:	85 c0                	test   eax,eax
c0021998:	74 1d                	je     c00219b7 <SysOpen(regs*)+0x9d>
c002199a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002199d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00219a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219aa:	81 c4 04 01 00 00    	add    esp,0x104
c00219b0:	31 c0                	xor    eax,eax
c00219b2:	31 d2                	xor    edx,edx
c00219b4:	5b                   	pop    ebx
c00219b5:	5e                   	pop    esi
c00219b6:	c3                   	ret    
c00219b7:	83 ec 08             	sub    esp,0x8
c00219ba:	68 09 2a 03 c0       	push   0xc0032a09
c00219bf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219c2:	50                   	push   eax
c00219c3:	e8 0a ff ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c00219c8:	83 c4 10             	add    esp,0x10
c00219cb:	85 c0                	test   eax,eax
c00219cd:	75 cb                	jne    c002199a <SysOpen(regs*)+0x80>
c00219cf:	83 ec 08             	sub    esp,0x8
c00219d2:	68 05 2a 03 c0       	push   0xc0032a05
c00219d7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219da:	50                   	push   eax
c00219db:	e8 70 ed fd ff       	call   c0000750 <strcmp>
c00219e0:	83 c4 10             	add    esp,0x10
c00219e3:	85 c0                	test   eax,eax
c00219e5:	74 b3                	je     c002199a <SysOpen(regs*)+0x80>
c00219e7:	83 ec 08             	sub    esp,0x8
c00219ea:	68 04 2a 03 c0       	push   0xc0032a04
c00219ef:	56                   	push   esi
c00219f0:	e8 dd fe ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c00219f5:	83 c4 10             	add    esp,0x10
c00219f8:	85 c0                	test   eax,eax
c00219fa:	75 9e                	jne    c002199a <SysOpen(regs*)+0x80>
c00219fc:	83 ec 08             	sub    esp,0x8
c00219ff:	68 0e 2a 03 c0       	push   0xc0032a0e
c0021a04:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a07:	50                   	push   eax
c0021a08:	e8 c5 fe ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c0021a0d:	83 c4 10             	add    esp,0x10
c0021a10:	85 c0                	test   eax,eax
c0021a12:	0f 85 eb 00 00 00    	jne    c0021b03 <SysOpen(regs*)+0x1e9>
c0021a18:	83 ec 08             	sub    esp,0x8
c0021a1b:	68 13 2a 03 c0       	push   0xc0032a13
c0021a20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a23:	50                   	push   eax
c0021a24:	e8 a9 fe ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	85 c0                	test   eax,eax
c0021a2e:	0f 85 cf 00 00 00    	jne    c0021b03 <SysOpen(regs*)+0x1e9>
c0021a34:	83 ec 08             	sub    esp,0x8
c0021a37:	68 0f 2a 03 c0       	push   0xc0032a0f
c0021a3c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021a3f:	51                   	push   ecx
c0021a40:	e8 0b ed fd ff       	call   c0000750 <strcmp>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	85 c0                	test   eax,eax
c0021a4a:	0f 84 b3 00 00 00    	je     c0021b03 <SysOpen(regs*)+0x1e9>
c0021a50:	83 ec 08             	sub    esp,0x8
c0021a53:	68 0e 2a 03 c0       	push   0xc0032a0e
c0021a58:	56                   	push   esi
c0021a59:	e8 74 fe ff ff       	call   c00218d2 <string_ends_with(char const*, char const*)>
c0021a5e:	83 c4 10             	add    esp,0x10
c0021a61:	85 c0                	test   eax,eax
c0021a63:	0f 85 9a 00 00 00    	jne    c0021b03 <SysOpen(regs*)+0x1e9>
c0021a69:	83 ec 0c             	sub    esp,0xc
c0021a6c:	68 14 01 00 00       	push   0x114
c0021a71:	e8 44 49 ff ff       	call   c00163ba <malloc>
c0021a76:	83 c4 0c             	add    esp,0xc
c0021a79:	89 c6                	mov    esi,eax
c0021a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a83:	50                   	push   eax
c0021a84:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021a87:	52                   	push   edx
c0021a88:	56                   	push   esi
c0021a89:	e8 c2 89 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0021a8e:	83 c4 10             	add    esp,0x10
c0021a91:	85 f6                	test   esi,esi
c0021a93:	74 5b                	je     c0021af0 <SysOpen(regs*)+0x1d6>
c0021a95:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021a98:	0f b6 c2             	movzx  eax,dl
c0021a9b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021a9e:	89 d0                	mov    eax,edx
c0021aa0:	83 e0 01             	and    eax,0x1
c0021aa3:	f6 c2 02             	test   dl,0x2
c0021aa6:	74 03                	je     c0021aab <SysOpen(regs*)+0x191>
c0021aa8:	83 c8 02             	or     eax,0x2
c0021aab:	f6 c2 04             	test   dl,0x4
c0021aae:	74 03                	je     c0021ab3 <SysOpen(regs*)+0x199>
c0021ab0:	83 c8 04             	or     eax,0x4
c0021ab3:	f6 c2 08             	test   dl,0x8
c0021ab6:	74 03                	je     c0021abb <SysOpen(regs*)+0x1a1>
c0021ab8:	83 c8 0a             	or     eax,0xa
c0021abb:	80 e2 10             	and    dl,0x10
c0021abe:	74 03                	je     c0021ac3 <SysOpen(regs*)+0x1a9>
c0021ac0:	83 c8 12             	or     eax,0x12
c0021ac3:	83 ec 08             	sub    esp,0x8
c0021ac6:	50                   	push   eax
c0021ac7:	56                   	push   esi
c0021ac8:	e8 a1 89 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0021acd:	83 c4 10             	add    esp,0x10
c0021ad0:	85 c0                	test   eax,eax
c0021ad2:	75 1c                	jne    c0021af0 <SysOpen(regs*)+0x1d6>
c0021ad4:	83 ec 0c             	sub    esp,0xc
c0021ad7:	56                   	push   esi
c0021ad8:	e8 dd 5f ff ff       	call   c0017aba <UnixFile::getFileDescriptor()>
c0021add:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021ae0:	83 c4 10             	add    esp,0x10
c0021ae3:	89 02                	mov    DWORD PTR [edx],eax
c0021ae5:	c1 f8 1f             	sar    eax,0x1f
c0021ae8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021aeb:	e9 ba fe ff ff       	jmp    c00219aa <SysOpen(regs*)+0x90>
c0021af0:	81 c4 04 01 00 00    	add    esp,0x104
c0021af6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021afb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021b00:	5b                   	pop    ebx
c0021b01:	5e                   	pop    esi
c0021b02:	c3                   	ret    
c0021b03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b06:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021b0c:	e9 92 fe ff ff       	jmp    c00219a3 <SysOpen(regs*)+0x89>

c0021b11 <KeSystemCall(regs*, void*)>:
c0021b11:	53                   	push   ebx
c0021b12:	83 ec 08             	sub    esp,0x8
c0021b15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021b1c:	83 f8 3e             	cmp    eax,0x3e
c0021b1f:	77 16                	ja     c0021b37 <KeSystemCall(regs*, void*)+0x26>
c0021b21:	8b 14 85 60 42 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbda0]
c0021b28:	85 d2                	test   edx,edx
c0021b2a:	74 0b                	je     c0021b37 <KeSystemCall(regs*, void*)+0x26>
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	53                   	push   ebx
c0021b30:	ff d2                	call   edx
c0021b32:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021b35:	eb 0d                	jmp    c0021b44 <KeSystemCall(regs*, void*)+0x33>
c0021b37:	52                   	push   edx
c0021b38:	52                   	push   edx
c0021b39:	50                   	push   eax
c0021b3a:	68 18 2a 03 c0       	push   0xc0032a18
c0021b3f:	e8 05 77 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021b4c:	31 d2                	xor    edx,edx
c0021b4e:	83 c4 08             	add    esp,0x8
c0021b51:	5b                   	pop    ebx
c0021b52:	c3                   	ret    
c0021b53:	90                   	nop

c0021b54 <KeSwitchEndian16(unsigned short)>:
c0021b54:	83 ec 04             	sub    esp,0x4
c0021b57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b5b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021b5f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b63:	c1 f8 08             	sar    eax,0x8
c0021b66:	89 c2                	mov    edx,eax
c0021b68:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b6c:	c1 e0 08             	shl    eax,0x8
c0021b6f:	09 d0                	or     eax,edx
c0021b71:	83 c4 04             	add    esp,0x4
c0021b74:	c3                   	ret    
c0021b75:	8d 76 00             	lea    esi,[esi+0x0]

c0021b78 <KeSwitchEndian32(unsigned int)>:
c0021b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b7c:	c1 e8 18             	shr    eax,0x18
c0021b7f:	89 c2                	mov    edx,eax
c0021b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b85:	c1 e0 08             	shl    eax,0x8
c0021b88:	25 00 00 ff 00       	and    eax,0xff0000
c0021b8d:	09 c2                	or     edx,eax
c0021b8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b93:	c1 e8 08             	shr    eax,0x8
c0021b96:	25 00 ff 00 00       	and    eax,0xff00
c0021b9b:	09 c2                	or     edx,eax
c0021b9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba1:	c1 e0 18             	shl    eax,0x18
c0021ba4:	09 d0                	or     eax,edx
c0021ba6:	c3                   	ret    
c0021ba7:	90                   	nop

c0021ba8 <EthernetCRC32(unsigned char*, int)>:
c0021ba8:	83 ec 10             	sub    esp,0x10
c0021bab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bb0:	75 0a                	jne    c0021bbc <EthernetCRC32(unsigned char*, int)+0x14>
c0021bb2:	b8 00 00 00 00       	mov    eax,0x0
c0021bb7:	e9 8c 00 00 00       	jmp    c0021c48 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bbc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021bc1:	7f 09                	jg     c0021bcc <EthernetCRC32(unsigned char*, int)+0x24>
c0021bc3:	b8 00 00 00 00       	mov    eax,0x0
c0021bc8:	eb 7e                	jmp    c0021c48 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bca:	66 90                	xchg   ax,ax
c0021bcc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021bd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021be0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021be4:	7d 5a                	jge    c0021c40 <EthernetCRC32(unsigned char*, int)+0x98>
c0021be6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bee:	01 d0                	add    eax,edx
c0021bf0:	8a 00                	mov    al,BYTE PTR [eax]
c0021bf2:	0f b6 c0             	movzx  eax,al
c0021bf5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021bf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c01:	8d 76 00             	lea    esi,[esi+0x0]
c0021c04:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021c09:	7f 2d                	jg     c0021c38 <EthernetCRC32(unsigned char*, int)+0x90>
c0021c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c0f:	83 e0 01             	and    eax,0x1
c0021c12:	74 10                	je     c0021c24 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c18:	d1 e8                	shr    eax,1
c0021c1a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021c1f:	eb 0b                	jmp    c0021c2c <EthernetCRC32(unsigned char*, int)+0x84>
c0021c21:	8d 76 00             	lea    esi,[esi+0x0]
c0021c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c28:	d1 e8                	shr    eax,1
c0021c2a:	66 90                	xchg   ax,ax
c0021c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c30:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021c35:	eb cd                	jmp    c0021c04 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021c37:	90                   	nop
c0021c38:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021c3d:	eb 9d                	jmp    c0021bdc <EthernetCRC32(unsigned char*, int)+0x34>
c0021c3f:	90                   	nop
c0021c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c44:	f7 d0                	not    eax
c0021c46:	66 90                	xchg   ax,ax
c0021c48:	83 c4 10             	add    esp,0x10
c0021c4b:	c3                   	ret    

c0021c4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021c4c:	83 ec 2c             	sub    esp,0x2c
c0021c4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c53:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c67:	0f b7 c0             	movzx  eax,ax
c0021c6a:	3d 06 08 00 00       	cmp    eax,0x806
c0021c6f:	75 13                	jne    c0021c84 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021c71:	83 ec 0c             	sub    esp,0xc
c0021c74:	68 2c 2a 03 c0       	push   0xc0032a2c
c0021c79:	e8 cb 75 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0021c7e:	83 c4 10             	add    esp,0x10
c0021c81:	eb 25                	jmp    c0021ca8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c83:	90                   	nop
c0021c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c8b:	0f b7 c0             	movzx  eax,ax
c0021c8e:	3d 00 08 00 00       	cmp    eax,0x800
c0021c93:	75 13                	jne    c0021ca8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c95:	83 ec 0c             	sub    esp,0xc
c0021c98:	68 42 2a 03 c0       	push   0xc0032a42
c0021c9d:	e8 a7 75 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0021ca2:	83 c4 10             	add    esp,0x10
c0021ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ca8:	90                   	nop
c0021ca9:	83 c4 2c             	add    esp,0x2c
c0021cac:	c3                   	ret    
c0021cad:	66 90                	xchg   ax,ax
c0021caf:	90                   	nop

c0021cb0 <KeNetCreateSemaphore>:
c0021cb0:	53                   	push   ebx
c0021cb1:	83 ec 18             	sub    esp,0x18
c0021cb4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021cbc:	83 ec 0c             	sub    esp,0xc
c0021cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cc3:	e8 f2 46 ff ff       	call   c00163ba <malloc>
c0021cc8:	83 c4 10             	add    esp,0x10
c0021ccb:	89 c3                	mov    ebx,eax
c0021ccd:	83 ec 08             	sub    esp,0x8
c0021cd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021cd4:	53                   	push   ebx
c0021cd5:	e8 32 e9 ff ff       	call   c002060c <Semaphore::Semaphore(int)>
c0021cda:	83 c4 10             	add    esp,0x10
c0021cdd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ce9:	89 10                	mov    DWORD PTR [eax],edx
c0021ceb:	90                   	nop
c0021cec:	83 c4 18             	add    esp,0x18
c0021cef:	5b                   	pop    ebx
c0021cf0:	c3                   	ret    
c0021cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0021cf4 <KeNetFreeSemaphore>:
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cfd:	83 ec 08             	sub    esp,0x8
c0021d00:	6a 10                	push   0x10
c0021d02:	50                   	push   eax
c0021d03:	e8 14 74 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0021d08:	83 c4 10             	add    esp,0x10
c0021d0b:	90                   	nop
c0021d0c:	83 c4 0c             	add    esp,0xc
c0021d0f:	c3                   	ret    

c0021d10 <KeNetSignalSemaphore>:
c0021d10:	83 ec 0c             	sub    esp,0xc
c0021d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d19:	83 ec 0c             	sub    esp,0xc
c0021d1c:	50                   	push   eax
c0021d1d:	e8 4a ec ff ff       	call   c002096c <Semaphore::release()>
c0021d22:	83 c4 10             	add    esp,0x10
c0021d25:	90                   	nop
c0021d26:	83 c4 0c             	add    esp,0xc
c0021d29:	c3                   	ret    
c0021d2a:	66 90                	xchg   ax,ax

c0021d2c <KeNetWaitSemaphore>:
c0021d2c:	83 ec 0c             	sub    esp,0xc
c0021d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d33:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d35:	83 ec 08             	sub    esp,0x8
c0021d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d3c:	50                   	push   eax
c0021d3d:	e8 66 ea ff ff       	call   c00207a8 <Semaphore::acquire(int)>
c0021d42:	83 c4 10             	add    esp,0x10
c0021d45:	83 c4 0c             	add    esp,0xc
c0021d48:	c3                   	ret    
c0021d49:	8d 76 00             	lea    esi,[esi+0x0]

c0021d4c <KeNetCreateThread>:
c0021d4c:	83 ec 0c             	sub    esp,0xc
c0021d4f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021d54:	68 80 00 00 00       	push   0x80
c0021d59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d61:	50                   	push   eax
c0021d62:	e8 a1 32 00 00       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c0021d67:	83 c4 10             	add    esp,0x10
c0021d6a:	90                   	nop
c0021d6b:	83 c4 0c             	add    esp,0xc
c0021d6e:	c3                   	ret    
c0021d6f:	90                   	nop

c0021d70 <KeCPanic>:
c0021d70:	83 ec 0c             	sub    esp,0xc
c0021d73:	83 ec 0c             	sub    esp,0xc
c0021d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d7a:	e8 e3 e4 ff ff       	call   c0020262 <KePanic(char const*)>
c0021d7f:	83 c4 10             	add    esp,0x10
c0021d82:	90                   	nop
c0021d83:	83 c4 0c             	add    esp,0xc
c0021d86:	c3                   	ret    

c0021d87 <CmOpen(char const*)>:
c0021d87:	57                   	push   edi
c0021d88:	56                   	push   esi
c0021d89:	53                   	push   ebx
c0021d8a:	83 ec 1c             	sub    esp,0x1c
c0021d8d:	6a 30                	push   0x30
c0021d8f:	e8 26 46 ff ff       	call   c00163ba <malloc>
c0021d94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021d9b:	89 c3                	mov    ebx,eax
c0021d9d:	e8 18 46 ff ff       	call   c00163ba <malloc>
c0021da2:	83 c4 0c             	add    esp,0xc
c0021da5:	89 c6                	mov    esi,eax
c0021da7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021dad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021db1:	50                   	push   eax
c0021db2:	e8 99 86 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0021db7:	83 c4 0c             	add    esp,0xc
c0021dba:	89 33                	mov    DWORD PTR [ebx],esi
c0021dbc:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021dc0:	50                   	push   eax
c0021dc1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021dc5:	50                   	push   eax
c0021dc6:	56                   	push   esi
c0021dc7:	e8 a4 89 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0021dcc:	5a                   	pop    edx
c0021dcd:	59                   	pop    ecx
c0021dce:	6a 01                	push   0x1
c0021dd0:	ff 33                	push   DWORD PTR [ebx]
c0021dd2:	e8 97 86 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0021dd7:	5e                   	pop    esi
c0021dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ddc:	e8 d9 45 ff ff       	call   c00163ba <malloc>
c0021de1:	5a                   	pop    edx
c0021de2:	89 c7                	mov    edi,eax
c0021de4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021de8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021dea:	8b 10                	mov    edx,DWORD PTR [eax]
c0021dec:	56                   	push   esi
c0021ded:	57                   	push   edi
c0021dee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021df6:	50                   	push   eax
c0021df7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021dfa:	83 c4 14             	add    esp,0x14
c0021dfd:	ff 33                	push   DWORD PTR [ebx]
c0021dff:	e8 c8 86 ff ff       	call   c001a4cc <File::close()>
c0021e04:	59                   	pop    ecx
c0021e05:	58                   	pop    eax
c0021e06:	6a 13                	push   0x13
c0021e08:	ff 33                	push   DWORD PTR [ebx]
c0021e0a:	e8 5f 86 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0021e0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e11:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e13:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e16:	57                   	push   edi
c0021e17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e1f:	50                   	push   eax
c0021e20:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021e23:	83 c4 14             	add    esp,0x14
c0021e26:	57                   	push   edi
c0021e27:	e8 9e 45 ff ff       	call   c00163ca <free>
c0021e2c:	83 c4 10             	add    esp,0x10
c0021e2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021e32:	75 10                	jne    c0021e44 <CmOpen(char const*)+0xbd>
c0021e34:	83 ec 0c             	sub    esp,0xc
c0021e37:	68 57 2a 03 c0       	push   0xc0032a57
c0021e3c:	e8 21 e4 ff ff       	call   c0020262 <KePanic(char const*)>
c0021e41:	83 c4 10             	add    esp,0x10
c0021e44:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021e47:	50                   	push   eax
c0021e48:	6a 00                	push   0x0
c0021e4a:	6a 00                	push   0x0
c0021e4c:	ff 33                	push   DWORD PTR [ebx]
c0021e4e:	e8 d9 86 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0021e53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e55:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e57:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e5a:	57                   	push   edi
c0021e5b:	6a 00                	push   0x0
c0021e5d:	6a 2b                	push   0x2b
c0021e5f:	50                   	push   eax
c0021e60:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e63:	83 c4 1c             	add    esp,0x1c
c0021e66:	6a 00                	push   0x0
c0021e68:	6a 00                	push   0x0
c0021e6a:	ff 33                	push   DWORD PTR [ebx]
c0021e6c:	e8 bb 86 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0021e71:	83 c4 0c             	add    esp,0xc
c0021e74:	6a 08                	push   0x8
c0021e76:	68 68 2a 03 c0       	push   0xc0032a68
c0021e7b:	57                   	push   edi
c0021e7c:	e8 ff e4 fd ff       	call   c0000380 <memcmp>
c0021e81:	83 c4 10             	add    esp,0x10
c0021e84:	85 c0                	test   eax,eax
c0021e86:	74 10                	je     c0021e98 <CmOpen(char const*)+0x111>
c0021e88:	83 ec 0c             	sub    esp,0xc
c0021e8b:	68 71 2a 03 c0       	push   0xc0032a71
c0021e90:	e8 cd e3 ff ff       	call   c0020262 <KePanic(char const*)>
c0021e95:	83 c4 10             	add    esp,0x10
c0021e98:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021e9c:	89 d8                	mov    eax,ebx
c0021e9e:	83 c4 10             	add    esp,0x10
c0021ea1:	5b                   	pop    ebx
c0021ea2:	5e                   	pop    esi
c0021ea3:	5f                   	pop    edi
c0021ea4:	c3                   	ret    

c0021ea5 <CmClose(Reghive_Tag*)>:
c0021ea5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ea9:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021ead:	74 0b                	je     c0021eba <CmClose(Reghive_Tag*)+0x15>
c0021eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021eb5:	e9 12 86 ff ff       	jmp    c001a4cc <File::close()>
c0021eba:	c3                   	ret    

c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ebb:	53                   	push   ebx
c0021ebc:	83 ec 18             	sub    esp,0x18
c0021ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ec3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ec7:	74 29                	je     c0021ef2 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ec9:	50                   	push   eax
c0021eca:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021ecf:	99                   	cdq    
c0021ed0:	52                   	push   edx
c0021ed1:	50                   	push   eax
c0021ed2:	ff 33                	push   DWORD PTR [ebx]
c0021ed4:	e8 53 86 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0021ed9:	5a                   	pop    edx
c0021eda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021edc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021ee0:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ee2:	51                   	push   ecx
c0021ee3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021ee7:	6a 00                	push   0x0
c0021ee9:	6a 2b                	push   0x2b
c0021eeb:	50                   	push   eax
c0021eec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021eef:	83 c4 20             	add    esp,0x20
c0021ef2:	83 c4 18             	add    esp,0x18
c0021ef5:	5b                   	pop    ebx
c0021ef6:	c3                   	ret    

c0021ef7 <CmGetString(Reghive_Tag*, int, char*)>:
c0021ef7:	55                   	push   ebp
c0021ef8:	57                   	push   edi
c0021ef9:	56                   	push   esi
c0021efa:	53                   	push   ebx
c0021efb:	31 db                	xor    ebx,ebx
c0021efd:	83 ec 70             	sub    esp,0x70
c0021f00:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021f07:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021f0b:	50                   	push   eax
c0021f0c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f13:	55                   	push   ebp
c0021f14:	e8 a2 ff ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f19:	83 c4 10             	add    esp,0x10
c0021f1c:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021f21:	c1 e0 08             	shl    eax,0x8
c0021f24:	89 c2                	mov    edx,eax
c0021f26:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021f2b:	09 d0                	or     eax,edx
c0021f2d:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021f32:	c1 e0 08             	shl    eax,0x8
c0021f35:	09 d0                	or     eax,edx
c0021f37:	74 25                	je     c0021f5e <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021f39:	6b fb 0d             	imul   edi,ebx,0xd
c0021f3c:	52                   	push   edx
c0021f3d:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021f41:	52                   	push   edx
c0021f42:	50                   	push   eax
c0021f43:	55                   	push   ebp
c0021f44:	e8 72 ff ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f49:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021f4d:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021f54:	b9 27 00 00 00       	mov    ecx,0x27
c0021f59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f5b:	83 c4 10             	add    esp,0x10
c0021f5e:	83 c3 03             	add    ebx,0x3
c0021f61:	83 fb 15             	cmp    ebx,0x15
c0021f64:	75 b6                	jne    c0021f1c <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021f66:	83 c4 6c             	add    esp,0x6c
c0021f69:	5b                   	pop    ebx
c0021f6a:	5e                   	pop    esi
c0021f6b:	5f                   	pop    edi
c0021f6c:	5d                   	pop    ebp
c0021f6d:	c3                   	ret    

c0021f6e <CmEnterDirectory(Reghive_Tag*, int)>:
c0021f6e:	83 ec 40             	sub    esp,0x40
c0021f71:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021f75:	50                   	push   eax
c0021f76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f7a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f7e:	e8 38 ff ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f83:	83 c4 10             	add    esp,0x10
c0021f86:	83 c8 ff             	or     eax,0xffffffff
c0021f89:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021f8e:	75 19                	jne    c0021fa9 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021f90:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021f95:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021f9a:	c1 e0 08             	shl    eax,0x8
c0021f9d:	09 c2                	or     edx,eax
c0021f9f:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021fa4:	c1 e0 10             	shl    eax,0x10
c0021fa7:	09 d0                	or     eax,edx
c0021fa9:	83 c4 3c             	add    esp,0x3c
c0021fac:	c3                   	ret    

c0021fad <CmGetNext(Reghive_Tag*, int)>:
c0021fad:	83 ec 40             	sub    esp,0x40
c0021fb0:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fb4:	50                   	push   eax
c0021fb5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fbd:	e8 f9 fe ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021fc2:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021fc7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021fcc:	c1 e0 08             	shl    eax,0x8
c0021fcf:	09 c2                	or     edx,eax
c0021fd1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021fd6:	83 c4 4c             	add    esp,0x4c
c0021fd9:	c1 e0 10             	shl    eax,0x10
c0021fdc:	09 d0                	or     eax,edx
c0021fde:	c3                   	ret    

c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021fdf:	53                   	push   ebx
c0021fe0:	83 ec 18             	sub    esp,0x18
c0021fe3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021fe7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021feb:	74 29                	je     c0022016 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021fed:	50                   	push   eax
c0021fee:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021ff3:	99                   	cdq    
c0021ff4:	52                   	push   edx
c0021ff5:	50                   	push   eax
c0021ff6:	ff 33                	push   DWORD PTR [ebx]
c0021ff8:	e8 2f 85 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0021ffd:	5a                   	pop    edx
c0021ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022000:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022004:	8b 10                	mov    edx,DWORD PTR [eax]
c0022006:	51                   	push   ecx
c0022007:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002200b:	6a 00                	push   0x0
c002200d:	6a 2b                	push   0x2b
c002200f:	50                   	push   eax
c0022010:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022013:	83 c4 20             	add    esp,0x20
c0022016:	83 c4 18             	add    esp,0x18
c0022019:	5b                   	pop    ebx
c002201a:	c3                   	ret    

c002201b <CmFreeExtent(Reghive_Tag*, int)>:
c002201b:	53                   	push   ebx
c002201c:	83 ec 3c             	sub    esp,0x3c
c002201f:	6a 2b                	push   0x2b
c0022021:	6a 00                	push   0x0
c0022023:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022027:	53                   	push   ebx
c0022028:	e8 c3 e4 fd ff       	call   c00004f0 <memset>
c002202d:	83 c4 0c             	add    esp,0xc
c0022030:	53                   	push   ebx
c0022031:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022039:	e8 a1 ff ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002203e:	83 c4 48             	add    esp,0x48
c0022041:	5b                   	pop    ebx
c0022042:	c3                   	ret    

c0022043 <CmUpdateHeader(Reghive_Tag*)>:
c0022043:	83 ec 0c             	sub    esp,0xc
c0022046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002204e:	74 10                	je     c0022060 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022050:	52                   	push   edx
c0022051:	8d 50 05             	lea    edx,[eax+0x5]
c0022054:	52                   	push   edx
c0022055:	6a 00                	push   0x0
c0022057:	50                   	push   eax
c0022058:	e8 82 ff ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002205d:	83 c4 10             	add    esp,0x10
c0022060:	83 c4 0c             	add    esp,0xc
c0022063:	c3                   	ret    

c0022064 <CmExpand(Reghive_Tag*, int)>:
c0022064:	57                   	push   edi
c0022065:	56                   	push   esi
c0022066:	83 ce ff             	or     esi,0xffffffff
c0022069:	53                   	push   ebx
c002206a:	83 ec 30             	sub    esp,0x30
c002206d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022071:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022075:	74 5f                	je     c00220d6 <CmExpand(Reghive_Tag*, int)+0x72>
c0022077:	31 d2                	xor    edx,edx
c0022079:	31 f6                	xor    esi,esi
c002207b:	50                   	push   eax
c002207c:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0022080:	52                   	push   edx
c0022081:	50                   	push   eax
c0022082:	ff 33                	push   DWORD PTR [ebx]
c0022084:	e8 a3 84 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0022089:	83 c4 0c             	add    esp,0xc
c002208c:	6a 2b                	push   0x2b
c002208e:	6a 00                	push   0x0
c0022090:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0022094:	57                   	push   edi
c0022095:	e8 56 e4 fd ff       	call   c00004f0 <memset>
c002209a:	83 c4 10             	add    esp,0x10
c002209d:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00220a1:	7d 1b                	jge    c00220be <CmExpand(Reghive_Tag*, int)+0x5a>
c00220a3:	83 ec 0c             	sub    esp,0xc
c00220a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220a8:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00220ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00220ae:	46                   	inc    esi
c00220af:	51                   	push   ecx
c00220b0:	57                   	push   edi
c00220b1:	6a 00                	push   0x0
c00220b3:	6a 2b                	push   0x2b
c00220b5:	50                   	push   eax
c00220b6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220b9:	83 c4 20             	add    esp,0x20
c00220bc:	eb df                	jmp    c002209d <CmExpand(Reghive_Tag*, int)+0x39>
c00220be:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00220c2:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00220c5:	83 ec 0c             	sub    esp,0xc
c00220c8:	01 f2                	add    edx,esi
c00220ca:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00220cd:	53                   	push   ebx
c00220ce:	e8 70 ff ff ff       	call   c0022043 <CmUpdateHeader(Reghive_Tag*)>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	83 c4 30             	add    esp,0x30
c00220d9:	89 f0                	mov    eax,esi
c00220db:	5b                   	pop    ebx
c00220dc:	5e                   	pop    esi
c00220dd:	5f                   	pop    edi
c00220de:	c3                   	ret    

c00220df <CmFindUnusedExtent(Reghive_Tag*)>:
c00220df:	55                   	push   ebp
c00220e0:	57                   	push   edi
c00220e1:	56                   	push   esi
c00220e2:	53                   	push   ebx
c00220e3:	83 cb ff             	or     ebx,0xffffffff
c00220e6:	83 ec 1c             	sub    esp,0x1c
c00220e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00220ed:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00220f1:	74 68                	je     c002215b <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00220f3:	be 2b 00 00 00       	mov    esi,0x2b
c00220f8:	51                   	push   ecx
c00220f9:	31 ff                	xor    edi,edi
c00220fb:	6a 00                	push   0x0
c00220fd:	31 db                	xor    ebx,ebx
c00220ff:	6a 00                	push   0x0
c0022101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022104:	e8 23 84 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0022109:	83 c4 10             	add    esp,0x10
c002210c:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c002210f:	76 3b                	jbe    c002214c <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022111:	83 ec 0c             	sub    esp,0xc
c0022114:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022117:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002211b:	8b 10                	mov    edx,DWORD PTR [eax]
c002211d:	51                   	push   ecx
c002211e:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022122:	51                   	push   ecx
c0022123:	6a 00                	push   0x0
c0022125:	6a 01                	push   0x1
c0022127:	50                   	push   eax
c0022128:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002212b:	83 c4 20             	add    esp,0x20
c002212e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022133:	74 26                	je     c002215b <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022135:	43                   	inc    ebx
c0022136:	52                   	push   edx
c0022137:	57                   	push   edi
c0022138:	56                   	push   esi
c0022139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002213c:	e8 eb 83 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0022141:	83 c6 2b             	add    esi,0x2b
c0022144:	83 d7 00             	adc    edi,0x0
c0022147:	83 c4 10             	add    esp,0x10
c002214a:	eb c0                	jmp    c002210c <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002214c:	50                   	push   eax
c002214d:	50                   	push   eax
c002214e:	6a 40                	push   0x40
c0022150:	55                   	push   ebp
c0022151:	e8 0e ff ff ff       	call   c0022064 <CmExpand(Reghive_Tag*, int)>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	89 c3                	mov    ebx,eax
c002215b:	83 c4 1c             	add    esp,0x1c
c002215e:	89 d8                	mov    eax,ebx
c0022160:	5b                   	pop    ebx
c0022161:	5e                   	pop    esi
c0022162:	5f                   	pop    edi
c0022163:	5d                   	pop    ebp
c0022164:	c3                   	ret    

c0022165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022165:	55                   	push   ebp
c0022166:	57                   	push   edi
c0022167:	56                   	push   esi
c0022168:	53                   	push   ebx
c0022169:	81 ec 88 00 00 00    	sub    esp,0x88
c002216f:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0022176:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002217d:	e8 5d ff ff ff       	call   c00220df <CmFindUnusedExtent(Reghive_Tag*)>
c0022182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022186:	83 c4 0c             	add    esp,0xc
c0022189:	6a 2b                	push   0x2b
c002218b:	6a 00                	push   0x0
c002218d:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0022191:	55                   	push   ebp
c0022192:	e8 59 e3 fd ff       	call   c00004f0 <memset>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	85 db                	test   ebx,ebx
c002219c:	74 12                	je     c00221b0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c002219e:	51                   	push   ecx
c002219f:	55                   	push   ebp
c00221a0:	53                   	push   ebx
c00221a1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221a8:	e8 0e fd ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221ad:	83 c4 10             	add    esp,0x10
c00221b0:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00221b4:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00221bb:	b9 2b 00 00 00       	mov    ecx,0x2b
c00221c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221c2:	85 db                	test   ebx,ebx
c00221c4:	74 49                	je     c002220f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00221c6:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00221cb:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00221d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221d4:	c1 e0 08             	shl    eax,0x8
c00221d7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00221dd:	09 c8                	or     eax,ecx
c00221df:	74 11                	je     c00221f2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00221e1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00221e5:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00221e9:	c1 e8 10             	shr    eax,0x10
c00221ec:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00221f0:	eb 0f                	jmp    c0022201 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00221f2:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00221f7:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00221fc:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022201:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022205:	c1 ea 08             	shr    edx,0x8
c0022208:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002220d:	eb 0f                	jmp    c002221e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c002220f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022214:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022219:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002221e:	52                   	push   edx
c002221f:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022223:	50                   	push   eax
c0022224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022228:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002222f:	e8 ab fd ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022234:	83 c4 10             	add    esp,0x10
c0022237:	85 db                	test   ebx,ebx
c0022239:	74 12                	je     c002224d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002223b:	50                   	push   eax
c002223c:	55                   	push   ebp
c002223d:	53                   	push   ebx
c002223e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022245:	e8 95 fd ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002224a:	83 c4 10             	add    esp,0x10
c002224d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022251:	83 c4 7c             	add    esp,0x7c
c0022254:	5b                   	pop    ebx
c0022255:	5e                   	pop    esi
c0022256:	5f                   	pop    edi
c0022257:	5d                   	pop    ebp
c0022258:	c3                   	ret    

c0022259 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022259:	55                   	push   ebp
c002225a:	57                   	push   edi
c002225b:	56                   	push   esi
c002225c:	53                   	push   ebx
c002225d:	bb 27 00 00 00       	mov    ebx,0x27
c0022262:	81 ec 88 00 00 00    	sub    esp,0x88
c0022268:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c002226f:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0022276:	e8 f5 e2 fd ff       	call   c0000570 <strlen>
c002227b:	8d 48 26             	lea    ecx,[eax+0x26]
c002227e:	89 c8                	mov    eax,ecx
c0022280:	99                   	cdq    
c0022281:	f7 fb                	idiv   ebx
c0022283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022287:	83 c4 10             	add    esp,0x10
c002228a:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022290:	7e 10                	jle    c00222a2 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0022292:	83 ec 0c             	sub    esp,0xc
c0022295:	68 82 2a 03 c0       	push   0xc0032a82
c002229a:	e8 c3 df ff ff       	call   c0020262 <KePanic(char const*)>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	31 ff                	xor    edi,edi
c00222a4:	50                   	push   eax
c00222a5:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00222a9:	53                   	push   ebx
c00222aa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222b1:	56                   	push   esi
c00222b2:	e8 04 fc ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222b7:	83 c4 10             	add    esp,0x10
c00222ba:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00222be:	89 d0                	mov    eax,edx
c00222c0:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00222c4:	c1 e0 08             	shl    eax,0x8
c00222c7:	09 c2                	or     edx,eax
c00222c9:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00222cd:	c1 e2 08             	shl    edx,0x8
c00222d0:	09 c2                	or     edx,eax
c00222d2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00222d6:	7e 76                	jle    c002234e <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00222d8:	85 d2                	test   edx,edx
c00222da:	75 25                	jne    c0022301 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00222dc:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00222e1:	8d 44 24 45          	lea    eax,[esp+0x45]
c00222e5:	50                   	push   eax
c00222e6:	6a 00                	push   0x0
c00222e8:	6a 00                	push   0x0
c00222ea:	56                   	push   esi
c00222eb:	e8 75 fe ff ff       	call   c0022165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	89 c2                	mov    edx,eax
c00222f5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00222f8:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00222fb:	c1 f8 10             	sar    eax,0x10
c00222fe:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022301:	55                   	push   ebp
c0022302:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0022306:	55                   	push   ebp
c0022307:	52                   	push   edx
c0022308:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002230c:	56                   	push   esi
c002230d:	e8 a9 fb ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022312:	83 c4 0c             	add    esp,0xc
c0022315:	6a 27                	push   0x27
c0022317:	6a 00                	push   0x0
c0022319:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002231d:	51                   	push   ecx
c002231e:	e8 cd e1 fd ff       	call   c00004f0 <memset>
c0022323:	83 c4 0c             	add    esp,0xc
c0022326:	6b c7 27             	imul   eax,edi,0x27
c0022329:	6a 27                	push   0x27
c002232b:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022332:	50                   	push   eax
c0022333:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022337:	51                   	push   ecx
c0022338:	e8 43 e3 fd ff       	call   c0000680 <strncpy>
c002233d:	83 c4 0c             	add    esp,0xc
c0022340:	55                   	push   ebp
c0022341:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022345:	52                   	push   edx
c0022346:	56                   	push   esi
c0022347:	e8 93 fc ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002234c:	eb 19                	jmp    c0022367 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c002234e:	85 d2                	test   edx,edx
c0022350:	74 18                	je     c002236a <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0022352:	51                   	push   ecx
c0022353:	51                   	push   ecx
c0022354:	52                   	push   edx
c0022355:	56                   	push   esi
c0022356:	e8 c0 fc ff ff       	call   c002201b <CmFreeExtent(Reghive_Tag*, int)>
c002235b:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c002235f:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022363:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022367:	83 c4 10             	add    esp,0x10
c002236a:	47                   	inc    edi
c002236b:	83 c3 03             	add    ebx,0x3
c002236e:	83 ff 07             	cmp    edi,0x7
c0022371:	0f 85 43 ff ff ff    	jne    c00222ba <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0022377:	50                   	push   eax
c0022378:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c002237c:	50                   	push   eax
c002237d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022384:	56                   	push   esi
c0022385:	e8 55 fc ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002238a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022390:	5b                   	pop    ebx
c0022391:	5e                   	pop    esi
c0022392:	5f                   	pop    edi
c0022393:	5d                   	pop    ebp
c0022394:	c3                   	ret    

c0022395 <CmGetMatch(char*, char*, bool, bool*)>:
c0022395:	56                   	push   esi
c0022396:	53                   	push   ebx
c0022397:	50                   	push   eax
c0022398:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002239c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223a1:	74 25                	je     c00223c8 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00223a3:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00223a6:	31 db                	xor    ebx,ebx
c00223a8:	50                   	push   eax
c00223a9:	50                   	push   eax
c00223aa:	8d 04 9d 60 43 03 c0 	lea    eax,[ebx*4-0x3ffcbca0]
c00223b1:	50                   	push   eax
c00223b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223b6:	e8 95 e3 fd ff       	call   c0000750 <strcmp>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	85 c0                	test   eax,eax
c00223c0:	74 2e                	je     c00223f0 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223c2:	43                   	inc    ebx
c00223c3:	83 fb 3f             	cmp    ebx,0x3f
c00223c6:	75 e0                	jne    c00223a8 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00223c8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00223cb:	31 db                	xor    ebx,ebx
c00223cd:	8d 04 9d 60 43 03 c0 	lea    eax,[ebx*4-0x3ffcbca0]
c00223d4:	51                   	push   ecx
c00223d5:	51                   	push   ecx
c00223d6:	50                   	push   eax
c00223d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223db:	e8 70 e3 fd ff       	call   c0000750 <strcmp>
c00223e0:	83 c4 10             	add    esp,0x10
c00223e3:	85 c0                	test   eax,eax
c00223e5:	74 09                	je     c00223f0 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223e7:	43                   	inc    ebx
c00223e8:	83 fb 3f             	cmp    ebx,0x3f
c00223eb:	75 e0                	jne    c00223cd <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00223ed:	83 cb ff             	or     ebx,0xffffffff
c00223f0:	89 d8                	mov    eax,ebx
c00223f2:	5a                   	pop    edx
c00223f3:	5b                   	pop    ebx
c00223f4:	5e                   	pop    esi
c00223f5:	c3                   	ret    

c00223f6 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00223f6:	55                   	push   ebp
c00223f7:	31 c0                	xor    eax,eax
c00223f9:	57                   	push   edi
c00223fa:	56                   	push   esi
c00223fb:	53                   	push   ebx
c00223fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022400:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022404:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022406:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002240a:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002240d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022411:	83 fd 1f             	cmp    ebp,0x1f
c0022414:	7f 0b                	jg     c0022421 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022416:	0f b6 c2             	movzx  eax,dl
c0022419:	d3 e0                	shl    eax,cl
c002241b:	09 07                	or     DWORD PTR [edi],eax
c002241d:	b0 01                	mov    al,0x1
c002241f:	01 33                	add    DWORD PTR [ebx],esi
c0022421:	5b                   	pop    ebx
c0022422:	5e                   	pop    esi
c0022423:	5f                   	pop    edi
c0022424:	5d                   	pop    ebp
c0022425:	c3                   	ret    

c0022426 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022426:	57                   	push   edi
c0022427:	56                   	push   esi
c0022428:	53                   	push   ebx
c0022429:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002242d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022431:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022435:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022439:	39 0b                	cmp    DWORD PTR [ebx],ecx
c002243b:	7c 17                	jl     c0022454 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c002243d:	8b 17                	mov    edx,DWORD PTR [edi]
c002243f:	b8 01 00 00 00       	mov    eax,0x1
c0022444:	d3 e0                	shl    eax,cl
c0022446:	48                   	dec    eax
c0022447:	21 d0                	and    eax,edx
c0022449:	d3 ea                	shr    edx,cl
c002244b:	89 17                	mov    DWORD PTR [edi],edx
c002244d:	29 0b                	sub    DWORD PTR [ebx],ecx
c002244f:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022452:	eb 05                	jmp    c0022459 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022454:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022457:	31 c0                	xor    eax,eax
c0022459:	5b                   	pop    ebx
c002245a:	5e                   	pop    esi
c002245b:	5f                   	pop    edi
c002245c:	c3                   	ret    

c002245d <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c002245d:	83 ec 40             	sub    esp,0x40
c0022460:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022464:	50                   	push   eax
c0022465:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022469:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002246d:	e8 49 fa ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022472:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022476:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002247a:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c002247e:	89 10                	mov    DWORD PTR [eax],edx
c0022480:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022483:	83 c4 4c             	add    esp,0x4c
c0022486:	c3                   	ret    

c0022487 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0022487:	55                   	push   ebp
c0022488:	57                   	push   edi
c0022489:	56                   	push   esi
c002248a:	53                   	push   ebx
c002248b:	83 ec 40             	sub    esp,0x40
c002248e:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022492:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0022496:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c002249a:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c002249e:	53                   	push   ebx
c002249f:	56                   	push   esi
c00224a0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224a4:	e8 12 fa ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224a9:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00224ad:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00224b1:	83 c4 0c             	add    esp,0xc
c00224b4:	53                   	push   ebx
c00224b5:	56                   	push   esi
c00224b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224ba:	e8 20 fb ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224bf:	83 c4 4c             	add    esp,0x4c
c00224c2:	5b                   	pop    ebx
c00224c3:	5e                   	pop    esi
c00224c4:	5f                   	pop    edi
c00224c5:	5d                   	pop    ebp
c00224c6:	c3                   	ret    

c00224c7 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00224c7:	55                   	push   ebp
c00224c8:	57                   	push   edi
c00224c9:	56                   	push   esi
c00224ca:	31 f6                	xor    esi,esi
c00224cc:	53                   	push   ebx
c00224cd:	31 db                	xor    ebx,ebx
c00224cf:	83 ec 40             	sub    esp,0x40
c00224d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00224da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00224e2:	6a 12                	push   0x12
c00224e4:	68 ee 00 00 00       	push   0xee
c00224e9:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00224ed:	e8 fe df fd ff       	call   c00004f0 <memset>
c00224f2:	83 c4 10             	add    esp,0x10
c00224f5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00224f9:	6a 08                	push   0x8
c00224fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00224ff:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022503:	50                   	push   eax
c0022504:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022508:	55                   	push   ebp
c0022509:	57                   	push   edi
c002250a:	e8 e7 fe ff ff       	call   c00223f6 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002250f:	83 c4 10             	add    esp,0x10
c0022512:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022516:	50                   	push   eax
c0022517:	6a 06                	push   0x6
c0022519:	55                   	push   ebp
c002251a:	57                   	push   edi
c002251b:	e8 06 ff ff ff       	call   c0022426 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022520:	83 c4 10             	add    esp,0x10
c0022523:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022528:	74 07                	je     c0022531 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c002252a:	46                   	inc    esi
c002252b:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c002252f:	eb e1                	jmp    c0022512 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022531:	43                   	inc    ebx
c0022532:	83 fb 12             	cmp    ebx,0x12
c0022535:	75 c2                	jne    c00224f9 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022537:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002253b:	31 db                	xor    ebx,ebx
c002253d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022540:	50                   	push   eax
c0022541:	50                   	push   eax
c0022542:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022547:	43                   	inc    ebx
c0022548:	8d 04 85 60 43 03 c0 	lea    eax,[eax*4-0x3ffcbca0]
c002254f:	50                   	push   eax
c0022550:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022554:	e8 e7 e2 fd ff       	call   c0000840 <strcat>
c0022559:	83 c4 10             	add    esp,0x10
c002255c:	83 fb 18             	cmp    ebx,0x18
c002255f:	75 df                	jne    c0022540 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022561:	83 c4 3c             	add    esp,0x3c
c0022564:	31 c0                	xor    eax,eax
c0022566:	5b                   	pop    ebx
c0022567:	5e                   	pop    esi
c0022568:	5f                   	pop    edi
c0022569:	5d                   	pop    ebp
c002256a:	c3                   	ret    

c002256b <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c002256b:	83 ec 40             	sub    esp,0x40
c002256e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022572:	50                   	push   eax
c0022573:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022577:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002257b:	e8 3b f9 ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022580:	58                   	pop    eax
c0022581:	5a                   	pop    edx
c0022582:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022586:	8d 44 24 15          	lea    eax,[esp+0x15]
c002258a:	50                   	push   eax
c002258b:	e8 37 ff ff ff       	call   c00224c7 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022590:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022595:	83 c4 4c             	add    esp,0x4c
c0022598:	c3                   	ret    

c0022599 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0022599:	55                   	push   ebp
c002259a:	57                   	push   edi
c002259b:	56                   	push   esi
c002259c:	53                   	push   ebx
c002259d:	31 db                	xor    ebx,ebx
c002259f:	83 ec 70             	sub    esp,0x70
c00225a2:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00225a9:	6a 30                	push   0x30
c00225ab:	6a 00                	push   0x0
c00225ad:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00225b1:	56                   	push   esi
c00225b2:	e8 39 df fd ff       	call   c00004f0 <memset>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	83 ec 0c             	sub    esp,0xc
c00225bd:	57                   	push   edi
c00225be:	e8 ad df fd ff       	call   c0000570 <strlen>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	39 d8                	cmp    eax,ebx
c00225c8:	76 16                	jbe    c00225e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00225ca:	83 ec 0c             	sub    esp,0xc
c00225cd:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00225d1:	50                   	push   eax
c00225d2:	e8 59 e3 fd ff       	call   c0000930 <toupper>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00225dd:	43                   	inc    ebx
c00225de:	eb da                	jmp    c00225ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00225e0:	31 f6                	xor    esi,esi
c00225e2:	52                   	push   edx
c00225e3:	31 ff                	xor    edi,edi
c00225e5:	6a 18                	push   0x18
c00225e7:	6a 3f                	push   0x3f
c00225e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00225ed:	50                   	push   eax
c00225ee:	e8 fd de fd ff       	call   c00004f0 <memset>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00225fa:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00225fe:	84 c0                	test   al,al
c0022600:	0f 84 b0 00 00 00    	je     c00226b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022606:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c002260a:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c002260f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022613:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022618:	8d 6e 01             	lea    ebp,[esi+0x1]
c002261b:	83 ec 0c             	sub    esp,0xc
c002261e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022622:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022626:	53                   	push   ebx
c0022627:	e8 44 df fd ff       	call   c0000570 <strlen>
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	85 c0                	test   eax,eax
c0022631:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022635:	74 0b                	je     c0022642 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022637:	50                   	push   eax
c0022638:	6a 01                	push   0x1
c002263a:	53                   	push   ebx
c002263b:	8d 44 24 20          	lea    eax,[esp+0x20]
c002263f:	50                   	push   eax
c0022640:	eb 0a                	jmp    c002264c <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022642:	50                   	push   eax
c0022643:	6a 00                	push   0x0
c0022645:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022649:	50                   	push   eax
c002264a:	6a 00                	push   0x0
c002264c:	e8 44 fd ff ff       	call   c0022395 <CmGetMatch(char*, char*, bool, bool*)>
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	83 f8 ff             	cmp    eax,0xffffffff
c0022657:	75 1a                	jne    c0022673 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022659:	83 ec 0c             	sub    esp,0xc
c002265c:	68 97 2a 03 c0       	push   0xc0032a97
c0022661:	e8 fc db ff ff       	call   c0020262 <KePanic(char const*)>
c0022666:	83 c4 10             	add    esp,0x10
c0022669:	b8 02 00 00 00       	mov    eax,0x2
c002266e:	e9 bc 00 00 00       	jmp    c002272f <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022673:	83 ff 18             	cmp    edi,0x18
c0022676:	75 1a                	jne    c0022692 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022678:	83 ec 0c             	sub    esp,0xc
c002267b:	68 ac 2a 03 c0       	push   0xc0032aac
c0022680:	e8 dd db ff ff       	call   c0020262 <KePanic(char const*)>
c0022685:	83 c4 10             	add    esp,0x10
c0022688:	b8 01 00 00 00       	mov    eax,0x1
c002268d:	e9 9d 00 00 00       	jmp    c002272f <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022692:	47                   	inc    edi
c0022693:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022698:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c002269c:	74 02                	je     c00226a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c002269e:	89 ee                	mov    esi,ebp
c00226a0:	83 ec 0c             	sub    esp,0xc
c00226a3:	53                   	push   ebx
c00226a4:	e8 c7 de fd ff       	call   c0000570 <strlen>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	85 c0                	test   eax,eax
c00226ae:	74 06                	je     c00226b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00226b0:	46                   	inc    esi
c00226b1:	e9 40 ff ff ff       	jmp    c00225f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00226b6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00226c6:	31 f6                	xor    esi,esi
c00226c8:	50                   	push   eax
c00226c9:	31 ff                	xor    edi,edi
c00226cb:	6a 12                	push   0x12
c00226cd:	68 ee 00 00 00       	push   0xee
c00226d2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00226d9:	e8 12 de fd ff       	call   c00004f0 <memset>
c00226de:	83 c4 10             	add    esp,0x10
c00226e1:	83 fe 17             	cmp    esi,0x17
c00226e4:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00226e8:	7e 26                	jle    c0022710 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00226ea:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00226ee:	50                   	push   eax
c00226ef:	6a 08                	push   0x8
c00226f1:	55                   	push   ebp
c00226f2:	53                   	push   ebx
c00226f3:	e8 2e fd ff ff       	call   c0022426 <CmGetShift(unsigned int*, int*, int, bool*)>
c00226f8:	83 c4 10             	add    esp,0x10
c00226fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022700:	74 26                	je     c0022728 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022702:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022709:	4e                   	dec    esi
c002270a:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c002270d:	47                   	inc    edi
c002270e:	eb 1c                	jmp    c002272c <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022710:	6a 06                	push   0x6
c0022712:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022717:	50                   	push   eax
c0022718:	55                   	push   ebp
c0022719:	53                   	push   ebx
c002271a:	e8 d7 fc ff ff       	call   c00223f6 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002271f:	83 c4 10             	add    esp,0x10
c0022722:	84 c0                	test   al,al
c0022724:	75 06                	jne    c002272c <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022726:	eb c2                	jmp    c00226ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022728:	31 c0                	xor    eax,eax
c002272a:	eb 03                	jmp    c002272f <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c002272c:	46                   	inc    esi
c002272d:	eb b2                	jmp    c00226e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c002272f:	83 c4 6c             	add    esp,0x6c
c0022732:	5b                   	pop    ebx
c0022733:	5e                   	pop    esi
c0022734:	5f                   	pop    edi
c0022735:	5d                   	pop    ebp
c0022736:	c3                   	ret    

c0022737 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022737:	53                   	push   ebx
c0022738:	83 ec 3c             	sub    esp,0x3c
c002273b:	6a 2b                	push   0x2b
c002273d:	6a 00                	push   0x0
c002273f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022743:	53                   	push   ebx
c0022744:	e8 a7 dd fd ff       	call   c00004f0 <memset>
c0022749:	58                   	pop    eax
c002274a:	5a                   	pop    edx
c002274b:	8d 44 24 11          	lea    eax,[esp+0x11]
c002274f:	50                   	push   eax
c0022750:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022754:	e8 40 fe ff ff       	call   c0022599 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022759:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c002275e:	83 c4 0c             	add    esp,0xc
c0022761:	6a 15                	push   0x15
c0022763:	6a 00                	push   0x0
c0022765:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022769:	50                   	push   eax
c002276a:	e8 81 dd fd ff       	call   c00004f0 <memset>
c002276f:	53                   	push   ebx
c0022770:	6a 00                	push   0x0
c0022772:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002277a:	e8 e6 f9 ff ff       	call   c0022165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002277f:	83 c4 58             	add    esp,0x58
c0022782:	5b                   	pop    ebx
c0022783:	c3                   	ret    

c0022784 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022784:	56                   	push   esi
c0022785:	53                   	push   ebx
c0022786:	83 ec 48             	sub    esp,0x48
c0022789:	6a 12                	push   0x12
c002278b:	68 ff 00 00 00       	push   0xff
c0022790:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022794:	56                   	push   esi
c0022795:	e8 56 dd fd ff       	call   c00004f0 <memset>
c002279a:	5a                   	pop    edx
c002279b:	59                   	pop    ecx
c002279c:	56                   	push   esi
c002279d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227a1:	e8 f3 fd ff ff       	call   c0022599 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227a6:	83 c4 10             	add    esp,0x10
c00227a9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00227ad:	85 db                	test   ebx,ebx
c00227af:	74 42                	je     c00227f3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00227b1:	50                   	push   eax
c00227b2:	8d 44 24 19          	lea    eax,[esp+0x19]
c00227b6:	50                   	push   eax
c00227b7:	53                   	push   ebx
c00227b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227bc:	e8 fa f6 ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227c1:	83 c4 0c             	add    esp,0xc
c00227c4:	6a 12                	push   0x12
c00227c6:	8d 44 24 21          	lea    eax,[esp+0x21]
c00227ca:	50                   	push   eax
c00227cb:	56                   	push   esi
c00227cc:	e8 af db fd ff       	call   c0000380 <memcmp>
c00227d1:	83 c4 10             	add    esp,0x10
c00227d4:	85 c0                	test   eax,eax
c00227d6:	74 1e                	je     c00227f6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00227d8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00227dd:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00227e2:	c1 e3 08             	shl    ebx,0x8
c00227e5:	09 d8                	or     eax,ebx
c00227e7:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00227ec:	c1 e3 10             	shl    ebx,0x10
c00227ef:	09 c3                	or     ebx,eax
c00227f1:	eb ba                	jmp    c00227ad <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00227f3:	83 cb ff             	or     ebx,0xffffffff
c00227f6:	89 d8                	mov    eax,ebx
c00227f8:	83 c4 44             	add    esp,0x44
c00227fb:	5b                   	pop    ebx
c00227fc:	5e                   	pop    esi
c00227fd:	c3                   	ret    

c00227fe <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00227fe:	57                   	push   edi
c00227ff:	56                   	push   esi
c0022800:	53                   	push   ebx
c0022801:	83 ec 34             	sub    esp,0x34
c0022804:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022808:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002280c:	6a 2b                	push   0x2b
c002280e:	6a 00                	push   0x0
c0022810:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022814:	53                   	push   ebx
c0022815:	e8 d6 dc fd ff       	call   c00004f0 <memset>
c002281a:	58                   	pop    eax
c002281b:	5a                   	pop    edx
c002281c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022820:	50                   	push   eax
c0022821:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022825:	e8 6f fd ff ff       	call   c0022599 <CmConvertToInternalFilename(char const*, unsigned char*)>
c002282a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c002282e:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022832:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022836:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c002283a:	53                   	push   ebx
c002283b:	6a 00                	push   0x0
c002283d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022841:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022845:	e8 1b f9 ff ff       	call   c0022165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002284a:	83 c4 50             	add    esp,0x50
c002284d:	5b                   	pop    ebx
c002284e:	5e                   	pop    esi
c002284f:	5f                   	pop    edi
c0022850:	c3                   	ret    

c0022851 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022851:	55                   	push   ebp
c0022852:	57                   	push   edi
c0022853:	56                   	push   esi
c0022854:	53                   	push   ebx
c0022855:	83 ec 40             	sub    esp,0x40
c0022858:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c002285c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022860:	6a 2b                	push   0x2b
c0022862:	6a 00                	push   0x0
c0022864:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022868:	56                   	push   esi
c0022869:	e8 82 dc fd ff       	call   c00004f0 <memset>
c002286e:	5f                   	pop    edi
c002286f:	89 ef                	mov    edi,ebp
c0022871:	58                   	pop    eax
c0022872:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022876:	50                   	push   eax
c0022877:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002287b:	e8 19 fd ff ff       	call   c0022599 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022880:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022885:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c002288a:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c002288f:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022894:	83 c4 10             	add    esp,0x10
c0022897:	85 ed                	test   ebp,ebp
c0022899:	74 14                	je     c00228af <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c002289b:	51                   	push   ecx
c002289c:	51                   	push   ecx
c002289d:	57                   	push   edi
c002289e:	53                   	push   ebx
c002289f:	e8 09 f7 ff ff       	call   c0021fad <CmGetNext(Reghive_Tag*, int)>
c00228a4:	83 c4 10             	add    esp,0x10
c00228a7:	85 c0                	test   eax,eax
c00228a9:	74 04                	je     c00228af <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228ab:	89 c7                	mov    edi,eax
c00228ad:	eb e8                	jmp    c0022897 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00228af:	56                   	push   esi
c00228b0:	6a 00                	push   0x0
c00228b2:	57                   	push   edi
c00228b3:	53                   	push   ebx
c00228b4:	e8 ac f8 ff ff       	call   c0022165 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00228b9:	83 c4 0c             	add    esp,0xc
c00228bc:	89 c7                	mov    edi,eax
c00228be:	56                   	push   esi
c00228bf:	50                   	push   eax
c00228c0:	53                   	push   ebx
c00228c1:	e8 f5 f5 ff ff       	call   c0021ebb <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00228c6:	58                   	pop    eax
c00228c7:	5a                   	pop    edx
c00228c8:	6a 6c                	push   0x6c
c00228ca:	6a 00                	push   0x0
c00228cc:	6a 00                	push   0x0
c00228ce:	68 bd 2a 03 c0       	push   0xc0032abd
c00228d3:	57                   	push   edi
c00228d4:	53                   	push   ebx
c00228d5:	e8 24 ff ff ff       	call   c00227fe <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00228da:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00228de:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00228e2:	c1 e8 10             	shr    eax,0x10
c00228e5:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00228e9:	83 c4 1c             	add    esp,0x1c
c00228ec:	56                   	push   esi
c00228ed:	57                   	push   edi
c00228ee:	53                   	push   ebx
c00228ef:	e8 eb f6 ff ff       	call   c0021fdf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00228f4:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00228f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00228fe:	c1 e0 08             	shl    eax,0x8
c0022901:	09 c2                	or     edx,eax
c0022903:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022908:	83 c4 4c             	add    esp,0x4c
c002290b:	c1 e0 10             	shl    eax,0x10
c002290e:	5b                   	pop    ebx
c002290f:	09 d0                	or     eax,edx
c0022911:	5e                   	pop    esi
c0022912:	5f                   	pop    edi
c0022913:	5d                   	pop    ebp
c0022914:	c3                   	ret    

c0022915 <zStrtok(char*, char const*)>:
c0022915:	55                   	push   ebp
c0022916:	57                   	push   edi
c0022917:	56                   	push   esi
c0022918:	53                   	push   ebx
c0022919:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002291d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022921:	85 db                	test   ebx,ebx
c0022923:	74 2f                	je     c0022954 <zStrtok(char*, char const*)+0x3f>
c0022925:	85 c0                	test   eax,eax
c0022927:	75 09                	jne    c0022932 <zStrtok(char*, char const*)+0x1d>
c0022929:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c002292e:	85 c0                	test   eax,eax
c0022930:	74 50                	je     c0022982 <zStrtok(char*, char const*)+0x6d>
c0022932:	31 c9                	xor    ecx,ecx
c0022934:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022938:	74 03                	je     c002293d <zStrtok(char*, char const*)+0x28>
c002293a:	41                   	inc    ecx
c002293b:	eb f7                	jmp    c0022934 <zStrtok(char*, char const*)+0x1f>
c002293d:	31 d2                	xor    edx,edx
c002293f:	39 ca                	cmp    edx,ecx
c0022941:	74 15                	je     c0022958 <zStrtok(char*, char const*)+0x43>
c0022943:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022947:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c002294a:	8d 3c 10             	lea    edi,[eax+edx*1]
c002294d:	39 ee                	cmp    esi,ebp
c002294f:	74 13                	je     c0022964 <zStrtok(char*, char const*)+0x4f>
c0022951:	42                   	inc    edx
c0022952:	eb eb                	jmp    c002293f <zStrtok(char*, char const*)+0x2a>
c0022954:	31 c0                	xor    eax,eax
c0022956:	eb 2a                	jmp    c0022982 <zStrtok(char*, char const*)+0x6d>
c0022958:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022962:	eb 1e                	jmp    c0022982 <zStrtok(char*, char const*)+0x6d>
c0022964:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022967:	39 ce                	cmp    esi,ecx
c0022969:	75 0a                	jne    c0022975 <zStrtok(char*, char const*)+0x60>
c002296b:	40                   	inc    eax
c002296c:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022971:	89 d8                	mov    eax,ebx
c0022973:	eb 0d                	jmp    c0022982 <zStrtok(char*, char const*)+0x6d>
c0022975:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022979:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002297c:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022982:	5b                   	pop    ebx
c0022983:	5e                   	pop    esi
c0022984:	5f                   	pop    edi
c0022985:	5d                   	pop    ebp
c0022986:	c3                   	ret    

c0022987 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022987:	57                   	push   edi
c0022988:	56                   	push   esi
c0022989:	53                   	push   ebx
c002298a:	81 ec 08 01 00 00    	sub    esp,0x108
c0022990:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022997:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c002299e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00229a2:	53                   	push   ebx
c00229a3:	e8 98 dc fd ff       	call   c0000640 <strcpy>
c00229a8:	59                   	pop    ecx
c00229a9:	5e                   	pop    esi
c00229aa:	68 5f 2e 03 c0       	push   0xc0032e5f
c00229af:	53                   	push   ebx
c00229b0:	bb 01 00 00 00       	mov    ebx,0x1
c00229b5:	e8 5b ff ff ff       	call   c0022915 <zStrtok(char*, char const*)>
c00229ba:	83 c4 10             	add    esp,0x10
c00229bd:	85 c0                	test   eax,eax
c00229bf:	74 3b                	je     c00229fc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229c1:	52                   	push   edx
c00229c2:	50                   	push   eax
c00229c3:	6a 01                	push   0x1
c00229c5:	57                   	push   edi
c00229c6:	e8 b9 fd ff ff       	call   c0022784 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00229cb:	59                   	pop    ecx
c00229cc:	89 c3                	mov    ebx,eax
c00229ce:	5e                   	pop    esi
c00229cf:	68 5f 2e 03 c0       	push   0xc0032e5f
c00229d4:	6a 00                	push   0x0
c00229d6:	e8 3a ff ff ff       	call   c0022915 <zStrtok(char*, char const*)>
c00229db:	83 c4 10             	add    esp,0x10
c00229de:	89 c6                	mov    esi,eax
c00229e0:	85 c0                	test   eax,eax
c00229e2:	74 18                	je     c00229fc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229e4:	52                   	push   edx
c00229e5:	52                   	push   edx
c00229e6:	53                   	push   ebx
c00229e7:	57                   	push   edi
c00229e8:	e8 81 f5 ff ff       	call   c0021f6e <CmEnterDirectory(Reghive_Tag*, int)>
c00229ed:	83 c4 10             	add    esp,0x10
c00229f0:	89 c3                	mov    ebx,eax
c00229f2:	83 f8 ff             	cmp    eax,0xffffffff
c00229f5:	74 05                	je     c00229fc <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229f7:	50                   	push   eax
c00229f8:	56                   	push   esi
c00229f9:	53                   	push   ebx
c00229fa:	eb c9                	jmp    c00229c5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00229fc:	81 c4 00 01 00 00    	add    esp,0x100
c0022a02:	89 d8                	mov    eax,ebx
c0022a04:	5b                   	pop    ebx
c0022a05:	5e                   	pop    esi
c0022a06:	5f                   	pop    edi
c0022a07:	c3                   	ret    

c0022a08 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022a08:	55                   	push   ebp
c0022a09:	57                   	push   edi
c0022a0a:	56                   	push   esi
c0022a0b:	53                   	push   ebx
c0022a0c:	83 ec 5c             	sub    esp,0x5c
c0022a0f:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022a13:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022a17:	85 db                	test   ebx,ebx
c0022a19:	0f 8e 84 00 00 00    	jle    c0022aa3 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022a1f:	31 ed                	xor    ebp,ebp
c0022a21:	57                   	push   edi
c0022a22:	6a 32                	push   0x32
c0022a24:	6a 00                	push   0x0
c0022a26:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022a2a:	57                   	push   edi
c0022a2b:	e8 c0 da fd ff       	call   c00004f0 <memset>
c0022a30:	83 c4 0c             	add    esp,0xc
c0022a33:	57                   	push   edi
c0022a34:	53                   	push   ebx
c0022a35:	56                   	push   esi
c0022a36:	e8 30 fb ff ff       	call   c002256b <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022a3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a3f:	83 c4 10             	add    esp,0x10
c0022a42:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022a46:	7d 13                	jge    c0022a5b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022a48:	83 ec 0c             	sub    esp,0xc
c0022a4b:	45                   	inc    ebp
c0022a4c:	68 e3 31 03 c0       	push   0xc00331e3
c0022a51:	e8 f3 67 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0022a56:	83 c4 10             	add    esp,0x10
c0022a59:	eb e7                	jmp    c0022a42 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022a5b:	51                   	push   ecx
c0022a5c:	57                   	push   edi
c0022a5d:	53                   	push   ebx
c0022a5e:	68 c3 2a 03 c0       	push   0xc0032ac3
c0022a63:	e8 e1 67 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0022a68:	83 c4 10             	add    esp,0x10
c0022a6b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022a70:	75 1e                	jne    c0022a90 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022a72:	52                   	push   edx
c0022a73:	52                   	push   edx
c0022a74:	53                   	push   ebx
c0022a75:	56                   	push   esi
c0022a76:	e8 f3 f4 ff ff       	call   c0021f6e <CmEnterDirectory(Reghive_Tag*, int)>
c0022a7b:	83 c4 0c             	add    esp,0xc
c0022a7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022a82:	8d 51 04             	lea    edx,[ecx+0x4]
c0022a85:	52                   	push   edx
c0022a86:	50                   	push   eax
c0022a87:	56                   	push   esi
c0022a88:	e8 7b ff ff ff       	call   c0022a08 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022a8d:	83 c4 10             	add    esp,0x10
c0022a90:	50                   	push   eax
c0022a91:	50                   	push   eax
c0022a92:	53                   	push   ebx
c0022a93:	56                   	push   esi
c0022a94:	e8 14 f5 ff ff       	call   c0021fad <CmGetNext(Reghive_Tag*, int)>
c0022a99:	83 c4 10             	add    esp,0x10
c0022a9c:	89 c3                	mov    ebx,eax
c0022a9e:	e9 74 ff ff ff       	jmp    c0022a17 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022aa3:	83 c4 5c             	add    esp,0x5c
c0022aa6:	5b                   	pop    ebx
c0022aa7:	5e                   	pop    esi
c0022aa8:	5f                   	pop    edi
c0022aa9:	5d                   	pop    ebp
c0022aaa:	c3                   	ret    

c0022aab <CmSplitFinalSlashInPlace(char*)>:
c0022aab:	53                   	push   ebx
c0022aac:	83 ec 14             	sub    esp,0x14
c0022aaf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022ab3:	53                   	push   ebx
c0022ab4:	e8 b7 da fd ff       	call   c0000570 <strlen>
c0022ab9:	83 c4 10             	add    esp,0x10
c0022abc:	48                   	dec    eax
c0022abd:	85 c0                	test   eax,eax
c0022abf:	74 15                	je     c0022ad6 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022ac1:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022ac4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022ac8:	75 09                	jne    c0022ad3 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022aca:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022acd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022ad1:	eb 05                	jmp    c0022ad8 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022ad3:	48                   	dec    eax
c0022ad4:	eb e7                	jmp    c0022abd <CmSplitFinalSlashInPlace(char*)+0x12>
c0022ad6:	31 c0                	xor    eax,eax
c0022ad8:	83 c4 08             	add    esp,0x8
c0022adb:	5b                   	pop    ebx
c0022adc:	c3                   	ret    

c0022add <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022add:	55                   	push   ebp
c0022ade:	57                   	push   edi
c0022adf:	56                   	push   esi
c0022ae0:	53                   	push   ebx
c0022ae1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022ae7:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022aee:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022af0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022af3:	80 fa 40             	cmp    dl,0x40
c0022af6:	75 1c                	jne    c0022b14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022af8:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022afb:	85 c9                	test   ecx,ecx
c0022afd:	0f 84 09 01 00 00    	je     c0022c0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b03:	8d 43 01             	lea    eax,[ebx+0x1]
c0022b06:	83 f9 3a             	cmp    ecx,0x3a
c0022b09:	74 04                	je     c0022b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022b0b:	89 c3                	mov    ebx,eax
c0022b0d:	eb e9                	jmp    c0022af8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022b0f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022b12:	89 c3                	mov    ebx,eax
c0022b14:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022b18:	50                   	push   eax
c0022b19:	6a 40                	push   0x40
c0022b1b:	6a 00                	push   0x0
c0022b1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b21:	50                   	push   eax
c0022b22:	e8 c9 d9 fd ff       	call   c00004f0 <memset>
c0022b27:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022b2e:	31 c0                	xor    eax,eax
c0022b30:	83 c4 10             	add    esp,0x10
c0022b33:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022b38:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022b3b:	89 d1                	mov    ecx,edx
c0022b3d:	85 d2                	test   edx,edx
c0022b3f:	0f 84 c7 00 00 00    	je     c0022c0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b45:	3d c7 00 00 00       	cmp    eax,0xc7
c0022b4a:	0f 8f bc 00 00 00    	jg     c0022c0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b50:	83 fa 0a             	cmp    edx,0xa
c0022b53:	0f 85 a4 00 00 00    	jne    c0022bfd <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022b59:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022b5e:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022b63:	89 c8                	mov    eax,ecx
c0022b65:	a8 df                	test   al,0xdf
c0022b67:	0f 94 c2             	sete   dl
c0022b6a:	83 f9 23             	cmp    ecx,0x23
c0022b6d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022b72:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022b76:	80 e2 01             	and    dl,0x1
c0022b79:	75 4a                	jne    c0022bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b7b:	83 e8 09             	sub    eax,0x9
c0022b7e:	3c 01                	cmp    al,0x1
c0022b80:	76 43                	jbe    c0022bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b82:	83 f9 5b             	cmp    ecx,0x5b
c0022b85:	75 42                	jne    c0022bc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022b87:	83 fe 40             	cmp    esi,0x40
c0022b8a:	75 39                	jne    c0022bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b8c:	83 ec 0c             	sub    esp,0xc
c0022b8f:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022b93:	52                   	push   edx
c0022b94:	e8 d7 d9 fd ff       	call   c0000570 <strlen>
c0022b99:	83 c4 10             	add    esp,0x10
c0022b9c:	83 f8 3f             	cmp    eax,0x3f
c0022b9f:	77 6b                	ja     c0022c0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022ba1:	50                   	push   eax
c0022ba2:	50                   	push   eax
c0022ba3:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022ba7:	52                   	push   edx
c0022ba8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022bac:	52                   	push   edx
c0022bad:	e8 8e da fd ff       	call   c0000640 <strcpy>
c0022bb2:	58                   	pop    eax
c0022bb3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022bb7:	52                   	push   edx
c0022bb8:	e8 b3 d9 fd ff       	call   c0000570 <strlen>
c0022bbd:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022bc2:	83 c4 10             	add    esp,0x10
c0022bc5:	31 d2                	xor    edx,edx
c0022bc7:	eb 3b                	jmp    c0022c04 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022bc9:	83 fe 40             	cmp    esi,0x40
c0022bcc:	74 06                	je     c0022bd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022bce:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022bd2:	eb 20                	jmp    c0022bf4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022bd4:	50                   	push   eax
c0022bd5:	50                   	push   eax
c0022bd6:	55                   	push   ebp
c0022bd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022bdb:	50                   	push   eax
c0022bdc:	e8 6f db fd ff       	call   c0000750 <strcmp>
c0022be1:	83 c4 10             	add    esp,0x10
c0022be4:	85 c0                	test   eax,eax
c0022be6:	75 dd                	jne    c0022bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022be8:	eb e4                	jmp    c0022bce <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022bea:	8d 50 01             	lea    edx,[eax+0x1]
c0022bed:	83 f9 3d             	cmp    ecx,0x3d
c0022bf0:	74 1e                	je     c0022c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022bf2:	89 d0                	mov    eax,edx
c0022bf4:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022bf7:	85 c9                	test   ecx,ecx
c0022bf9:	75 ef                	jne    c0022bea <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022bfb:	eb 0f                	jmp    c0022c0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0022c00:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022c04:	47                   	inc    edi
c0022c05:	89 d0                	mov    eax,edx
c0022c07:	e9 2c ff ff ff       	jmp    c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022c0c:	31 c0                	xor    eax,eax
c0022c0e:	eb 33                	jmp    c0022c43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c14:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022c17:	50                   	push   eax
c0022c18:	50                   	push   eax
c0022c19:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022c1d:	50                   	push   eax
c0022c1e:	53                   	push   ebx
c0022c1f:	e8 2c db fd ff       	call   c0000750 <strcmp>
c0022c24:	83 c4 10             	add    esp,0x10
c0022c27:	85 c0                	test   eax,eax
c0022c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c2d:	75 96                	jne    c0022bc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022c2f:	51                   	push   ecx
c0022c30:	51                   	push   ecx
c0022c31:	52                   	push   edx
c0022c32:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022c39:	e8 02 da fd ff       	call   c0000640 <strcpy>
c0022c3e:	83 c4 10             	add    esp,0x10
c0022c41:	b0 01                	mov    al,0x1
c0022c43:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c49:	5b                   	pop    ebx
c0022c4a:	5e                   	pop    esi
c0022c4b:	5f                   	pop    edi
c0022c4c:	5d                   	pop    ebp
c0022c4d:	c3                   	ret    

c0022c4e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022c4e:	57                   	push   edi
c0022c4f:	56                   	push   esi
c0022c50:	53                   	push   ebx
c0022c51:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022c57:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022c5e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022c65:	53                   	push   ebx
c0022c66:	e8 05 d9 fd ff       	call   c0000570 <strlen>
c0022c6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c6e:	89 c7                	mov    edi,eax
c0022c70:	e8 fb d8 fd ff       	call   c0000570 <strlen>
c0022c75:	83 c4 10             	add    esp,0x10
c0022c78:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022c7c:	3d ff 00 00 00       	cmp    eax,0xff
c0022c81:	0f 87 d3 00 00 00    	ja     c0022d5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022c87:	57                   	push   edi
c0022c88:	57                   	push   edi
c0022c89:	56                   	push   esi
c0022c8a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022c8e:	56                   	push   esi
c0022c8f:	e8 ac d9 fd ff       	call   c0000640 <strcpy>
c0022c94:	58                   	pop    eax
c0022c95:	5a                   	pop    edx
c0022c96:	68 5f 2e 03 c0       	push   0xc0032e5f
c0022c9b:	56                   	push   esi
c0022c9c:	e8 9f db fd ff       	call   c0000840 <strcat>
c0022ca1:	59                   	pop    ecx
c0022ca2:	5f                   	pop    edi
c0022ca3:	53                   	push   ebx
c0022ca4:	56                   	push   esi
c0022ca5:	e8 96 db fd ff       	call   c0000840 <strcat>
c0022caa:	58                   	pop    eax
c0022cab:	5a                   	pop    edx
c0022cac:	68 cd 2a 03 c0       	push   0xc0032acd
c0022cb1:	56                   	push   esi
c0022cb2:	e8 89 db fd ff       	call   c0000840 <strcat>
c0022cb7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022cbe:	e8 f7 36 ff ff       	call   c00163ba <malloc>
c0022cc3:	83 c4 0c             	add    esp,0xc
c0022cc6:	89 c3                	mov    ebx,eax
c0022cc8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022cce:	56                   	push   esi
c0022ccf:	50                   	push   eax
c0022cd0:	e8 7b 77 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	85 db                	test   ebx,ebx
c0022cda:	74 7e                	je     c0022d5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022cdc:	51                   	push   ecx
c0022cdd:	51                   	push   ecx
c0022cde:	6a 01                	push   0x1
c0022ce0:	53                   	push   ebx
c0022ce1:	e8 88 77 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0022ce6:	83 c4 10             	add    esp,0x10
c0022ce9:	85 c0                	test   eax,eax
c0022ceb:	74 08                	je     c0022cf5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022ced:	83 ec 0c             	sub    esp,0xc
c0022cf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cf2:	53                   	push   ebx
c0022cf3:	eb 5f                	jmp    c0022d54 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022cf5:	52                   	push   edx
c0022cf6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022cfa:	50                   	push   eax
c0022cfb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022cff:	50                   	push   eax
c0022d00:	53                   	push   ebx
c0022d01:	e8 6a 7a ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0022d06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022d0a:	83 c4 10             	add    esp,0x10
c0022d0d:	89 c1                	mov    ecx,eax
c0022d0f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022d13:	74 31                	je     c0022d46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d15:	83 ec 0c             	sub    esp,0xc
c0022d18:	50                   	push   eax
c0022d19:	e8 9c 36 ff ff       	call   c00163ba <malloc>
c0022d1e:	89 c6                	mov    esi,eax
c0022d20:	58                   	pop    eax
c0022d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d23:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022d27:	52                   	push   edx
c0022d28:	56                   	push   esi
c0022d29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d31:	53                   	push   ebx
c0022d32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022d35:	83 c4 20             	add    esp,0x20
c0022d38:	85 c0                	test   eax,eax
c0022d3a:	75 0a                	jne    c0022d46 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d40:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022d44:	74 18                	je     c0022d5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022d46:	83 ec 0c             	sub    esp,0xc
c0022d49:	53                   	push   ebx
c0022d4a:	e8 7d 77 ff ff       	call   c001a4cc <File::close()>
c0022d4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d57:	83 c4 10             	add    esp,0x10
c0022d5a:	31 c0                	xor    eax,eax
c0022d5c:	eb 3b                	jmp    c0022d99 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022d5e:	83 ec 0c             	sub    esp,0xc
c0022d61:	53                   	push   ebx
c0022d62:	e8 65 77 ff ff       	call   c001a4cc <File::close()>
c0022d67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d6f:	83 c4 0c             	add    esp,0xc
c0022d72:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022d79:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022d80:	56                   	push   esi
c0022d81:	e8 57 fd ff ff       	call   c0022add <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022d86:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d8d:	e8 38 36 ff ff       	call   c00163ca <free>
c0022d92:	83 c4 10             	add    esp,0x10
c0022d95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d99:	81 c4 20 01 00 00    	add    esp,0x120
c0022d9f:	5b                   	pop    ebx
c0022da0:	5e                   	pop    esi
c0022da1:	5f                   	pop    edi
c0022da2:	c3                   	ret    

c0022da3 <Reg::getLine(char*, char*, char*)>:
c0022da3:	57                   	push   edi
c0022da4:	56                   	push   esi
c0022da5:	53                   	push   ebx
c0022da6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022daa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022dae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022db2:	57                   	push   edi
c0022db3:	56                   	push   esi
c0022db4:	53                   	push   ebx
c0022db5:	68 d2 2a 03 c0       	push   0xc0032ad2
c0022dba:	e8 8f fe ff ff       	call   c0022c4e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022dbf:	83 c4 10             	add    esp,0x10
c0022dc2:	84 c0                	test   al,al
c0022dc4:	75 10                	jne    c0022dd6 <Reg::getLine(char*, char*, char*)+0x33>
c0022dc6:	57                   	push   edi
c0022dc7:	56                   	push   esi
c0022dc8:	53                   	push   ebx
c0022dc9:	68 f7 2a 03 c0       	push   0xc0032af7
c0022dce:	e8 7b fe ff ff       	call   c0022c4e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022dd3:	83 c4 10             	add    esp,0x10
c0022dd6:	5b                   	pop    ebx
c0022dd7:	5e                   	pop    esi
c0022dd8:	5f                   	pop    edi
c0022dd9:	c3                   	ret    

c0022dda <Reg::readInt(char*, char*, int*)>:
c0022dda:	55                   	push   ebp
c0022ddb:	57                   	push   edi
c0022ddc:	56                   	push   esi
c0022ddd:	53                   	push   ebx
c0022dde:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022de4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022de8:	55                   	push   ebp
c0022de9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022df0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022df7:	e8 a7 ff ff ff       	call   c0022da3 <Reg::getLine(char*, char*, char*)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	84 c0                	test   al,al
c0022e01:	0f 84 b6 00 00 00    	je     c0022ebd <Reg::readInt(char*, char*, int*)+0xe3>
c0022e07:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022e0c:	83 fa 2b             	cmp    edx,0x2b
c0022e0f:	74 0c                	je     c0022e1d <Reg::readInt(char*, char*, int*)+0x43>
c0022e11:	83 fa 2d             	cmp    edx,0x2d
c0022e14:	75 0e                	jne    c0022e24 <Reg::readInt(char*, char*, int*)+0x4a>
c0022e16:	ba 01 00 00 00       	mov    edx,0x1
c0022e1b:	eb 0b                	jmp    c0022e28 <Reg::readInt(char*, char*, int*)+0x4e>
c0022e1d:	ba 01 00 00 00       	mov    edx,0x1
c0022e22:	eb 02                	jmp    c0022e26 <Reg::readInt(char*, char*, int*)+0x4c>
c0022e24:	31 d2                	xor    edx,edx
c0022e26:	31 c0                	xor    eax,eax
c0022e28:	be 0a 00 00 00       	mov    esi,0xa
c0022e2d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022e32:	75 21                	jne    c0022e55 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e34:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022e39:	83 f9 78             	cmp    ecx,0x78
c0022e3c:	75 0a                	jne    c0022e48 <Reg::readInt(char*, char*, int*)+0x6e>
c0022e3e:	83 c2 02             	add    edx,0x2
c0022e41:	be 10 00 00 00       	mov    esi,0x10
c0022e46:	eb 0d                	jmp    c0022e55 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e48:	83 f9 62             	cmp    ecx,0x62
c0022e4b:	75 08                	jne    c0022e55 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e4d:	83 c2 02             	add    edx,0x2
c0022e50:	be 02 00 00 00       	mov    esi,0x2
c0022e55:	01 d5                	add    ebp,edx
c0022e57:	31 d2                	xor    edx,edx
c0022e59:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022e5d:	83 f9 0d             	cmp    ecx,0xd
c0022e60:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022e64:	0f 94 c3             	sete   bl
c0022e67:	85 c9                	test   ecx,ecx
c0022e69:	89 df                	mov    edi,ebx
c0022e6b:	0f 94 c3             	sete   bl
c0022e6e:	09 df                	or     edi,ebx
c0022e70:	89 fb                	mov    ebx,edi
c0022e72:	83 e7 01             	and    edi,0x1
c0022e75:	75 35                	jne    c0022eac <Reg::readInt(char*, char*, int*)+0xd2>
c0022e77:	0f af d6             	imul   edx,esi
c0022e7a:	83 fe 10             	cmp    esi,0x10
c0022e7d:	75 26                	jne    c0022ea5 <Reg::readInt(char*, char*, int*)+0xcb>
c0022e7f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022e83:	83 ef 41             	sub    edi,0x41
c0022e86:	89 fb                	mov    ebx,edi
c0022e88:	80 fb 05             	cmp    bl,0x5
c0022e8b:	77 06                	ja     c0022e93 <Reg::readInt(char*, char*, int*)+0xb9>
c0022e8d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022e91:	eb 16                	jmp    c0022ea9 <Reg::readInt(char*, char*, int*)+0xcf>
c0022e93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022e97:	83 eb 61             	sub    ebx,0x61
c0022e9a:	80 fb 05             	cmp    bl,0x5
c0022e9d:	77 06                	ja     c0022ea5 <Reg::readInt(char*, char*, int*)+0xcb>
c0022e9f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022ea3:	eb 04                	jmp    c0022ea9 <Reg::readInt(char*, char*, int*)+0xcf>
c0022ea5:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022ea9:	45                   	inc    ebp
c0022eaa:	eb ad                	jmp    c0022e59 <Reg::readInt(char*, char*, int*)+0x7f>
c0022eac:	84 c0                	test   al,al
c0022eae:	74 02                	je     c0022eb2 <Reg::readInt(char*, char*, int*)+0xd8>
c0022eb0:	f7 da                	neg    edx
c0022eb2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022eb9:	89 10                	mov    DWORD PTR [eax],edx
c0022ebb:	88 d8                	mov    al,bl
c0022ebd:	81 c4 ec 00 00 00    	add    esp,0xec
c0022ec3:	5b                   	pop    ebx
c0022ec4:	5e                   	pop    esi
c0022ec5:	5f                   	pop    edi
c0022ec6:	5d                   	pop    ebp
c0022ec7:	c3                   	ret    

c0022ec8 <Reg::readString(char*, char*, char*, int)>:
c0022ec8:	57                   	push   edi
c0022ec9:	56                   	push   esi
c0022eca:	53                   	push   ebx
c0022ecb:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022ed1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022ed8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022edc:	57                   	push   edi
c0022edd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022ee4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022eeb:	e8 b3 fe ff ff       	call   c0022da3 <Reg::getLine(char*, char*, char*)>
c0022ef0:	83 c4 10             	add    esp,0x10
c0022ef3:	89 c6                	mov    esi,eax
c0022ef5:	84 c0                	test   al,al
c0022ef7:	74 44                	je     c0022f3d <Reg::readString(char*, char*, char*, int)+0x75>
c0022ef9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022f00:	31 c0                	xor    eax,eax
c0022f02:	4a                   	dec    edx
c0022f03:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022f06:	84 c9                	test   cl,cl
c0022f08:	74 0f                	je     c0022f19 <Reg::readString(char*, char*, char*, int)+0x51>
c0022f0a:	39 c2                	cmp    edx,eax
c0022f0c:	7e 0b                	jle    c0022f19 <Reg::readString(char*, char*, char*, int)+0x51>
c0022f0e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022f11:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022f16:	40                   	inc    eax
c0022f17:	eb ea                	jmp    c0022f03 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022f19:	83 ec 0c             	sub    esp,0xc
c0022f1c:	53                   	push   ebx
c0022f1d:	e8 4e d6 fd ff       	call   c0000570 <strlen>
c0022f22:	83 c4 10             	add    esp,0x10
c0022f25:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022f2a:	75 11                	jne    c0022f3d <Reg::readString(char*, char*, char*, int)+0x75>
c0022f2c:	83 ec 0c             	sub    esp,0xc
c0022f2f:	53                   	push   ebx
c0022f30:	e8 3b d6 fd ff       	call   c0000570 <strlen>
c0022f35:	83 c4 10             	add    esp,0x10
c0022f38:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022f3d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022f43:	89 f0                	mov    eax,esi
c0022f45:	5b                   	pop    ebx
c0022f46:	5e                   	pop    esi
c0022f47:	5f                   	pop    edi
c0022f48:	c3                   	ret    

c0022f49 <Reg::readBool(char*, char*, bool*)>:
c0022f49:	83 ec 20             	sub    esp,0x20
c0022f4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022f50:	50                   	push   eax
c0022f51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f59:	e8 7c fe ff ff       	call   c0022dda <Reg::readInt(char*, char*, int*)>
c0022f5e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022f63:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022f67:	0f 95 02             	setne  BYTE PTR [edx]
c0022f6a:	83 c4 2c             	add    esp,0x2c
c0022f6d:	c3                   	ret    

c0022f6e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022f6e:	53                   	push   ebx
c0022f6f:	83 ec 1c             	sub    esp,0x1c
c0022f72:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022f76:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022f7a:	50                   	push   eax
c0022f7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f83:	e8 c1 ff ff ff       	call   c0022f49 <Reg::readBool(char*, char*, bool*)>
c0022f88:	83 c4 10             	add    esp,0x10
c0022f8b:	84 c0                	test   al,al
c0022f8d:	74 04                	je     c0022f93 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022f8f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022f93:	88 d8                	mov    al,bl
c0022f95:	83 c4 18             	add    esp,0x18
c0022f98:	5b                   	pop    ebx
c0022f99:	c3                   	ret    

c0022f9a <Reg::readIntWithDefault(char*, char*, int)>:
c0022f9a:	53                   	push   ebx
c0022f9b:	83 ec 1c             	sub    esp,0x1c
c0022f9e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fa2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022fa6:	50                   	push   eax
c0022fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022faf:	e8 26 fe ff ff       	call   c0022dda <Reg::readInt(char*, char*, int*)>
c0022fb4:	83 c4 10             	add    esp,0x10
c0022fb7:	84 c0                	test   al,al
c0022fb9:	74 04                	je     c0022fbf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022fbb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022fbf:	89 d8                	mov    eax,ebx
c0022fc1:	83 c4 18             	add    esp,0x18
c0022fc4:	5b                   	pop    ebx
c0022fc5:	c3                   	ret    

c0022fc6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022fc6:	57                   	push   edi
c0022fc7:	56                   	push   esi
c0022fc8:	56                   	push   esi
c0022fc9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022fcd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022fd1:	56                   	push   esi
c0022fd2:	57                   	push   edi
c0022fd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fdb:	e8 e8 fe ff ff       	call   c0022ec8 <Reg::readString(char*, char*, char*, int)>
c0022fe0:	83 c4 10             	add    esp,0x10
c0022fe3:	84 c0                	test   al,al
c0022fe5:	75 1a                	jne    c0023001 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022fe7:	51                   	push   ecx
c0022fe8:	56                   	push   esi
c0022fe9:	6a 00                	push   0x0
c0022feb:	57                   	push   edi
c0022fec:	e8 ff d4 fd ff       	call   c00004f0 <memset>
c0022ff1:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022ff4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ff8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022ffa:	83 c4 10             	add    esp,0x10
c0022ffd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023001:	89 f8                	mov    eax,edi
c0023003:	5a                   	pop    edx
c0023004:	5e                   	pop    esi
c0023005:	5f                   	pop    edi
c0023006:	c3                   	ret    

c0023007 <SysEject(regs*)>:
c0023007:	83 ec 0c             	sub    esp,0xc
c002300a:	83 ca ff             	or     edx,0xffffffff
c002300d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023011:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023014:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023019:	83 e9 41             	sub    ecx,0x41
c002301c:	83 f9 19             	cmp    ecx,0x19
c002301f:	77 18                	ja     c0023039 <SysEject(regs*)+0x32>
c0023021:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0023028:	85 c9                	test   ecx,ecx
c002302a:	74 0d                	je     c0023039 <SysEject(regs*)+0x32>
c002302c:	83 ec 0c             	sub    esp,0xc
c002302f:	51                   	push   ecx
c0023030:	e8 1d 96 ff ff       	call   c001c652 <LogicalDisk::eject()>
c0023035:	83 c4 10             	add    esp,0x10
c0023038:	99                   	cdq    
c0023039:	83 c4 0c             	add    esp,0xc
c002303c:	c3                   	ret    

c002303d <SysExit(regs*)>:
c002303d:	83 ec 18             	sub    esp,0x18
c0023040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023044:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023047:	e8 8c 29 00 00       	call   c00259d8 <terminateTask(int)>
c002304c:	83 c8 ff             	or     eax,0xffffffff
c002304f:	83 c4 1c             	add    esp,0x1c
c0023052:	89 c2                	mov    edx,eax
c0023054:	c3                   	ret    

c0023055 <SysGetCwd(regs*)>:
c0023055:	83 ec 10             	sub    esp,0x10
c0023058:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002305c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c002305f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023067:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002306a:	e8 95 70 ff ff       	call   c001a104 <Fs::getcwd(Process*, char*, int)>
c002306f:	83 c4 1c             	add    esp,0x1c
c0023072:	99                   	cdq    
c0023073:	c3                   	ret    

c0023074 <SysGetPID(regs*)>:
c0023074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023079:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002307c:	8b 00                	mov    eax,DWORD PTR [eax]
c002307e:	99                   	cdq    
c002307f:	c3                   	ret    

c0023080 <SysGetRAMData(regs*)>:
c0023080:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0023086:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0023090:	99                   	cdq    
c0023091:	f7 f9                	idiv   ecx
c0023093:	c1 e0 18             	shl    eax,0x18
c0023096:	09 c8                	or     eax,ecx
c0023098:	99                   	cdq    
c0023099:	c3                   	ret    

c002309a <SysGetVGAPtr(regs*)>:
c002309a:	55                   	push   ebp
c002309b:	57                   	push   edi
c002309c:	56                   	push   esi
c002309d:	53                   	push   ebx
c002309e:	83 ec 18             	sub    esp,0x18
c00230a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00230a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00230a8:	e8 f7 23 00 00       	call   c00254a4 <Thr::processFromPID(int)>
c00230ad:	83 c4 10             	add    esp,0x10
c00230b0:	89 c1                	mov    ecx,eax
c00230b2:	b8 01 00 00 00       	mov    eax,0x1
c00230b7:	85 c9                	test   ecx,ecx
c00230b9:	74 57                	je     c0023112 <SysGetVGAPtr(regs*)+0x78>
c00230bb:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00230c1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00230c5:	74 0c                	je     c00230d3 <SysGetVGAPtr(regs*)+0x39>
c00230c7:	83 ec 0c             	sub    esp,0xc
c00230ca:	55                   	push   ebp
c00230cb:	e8 8d 3f ff ff       	call   c001705d <setActiveTerminal(VgaText*)>
c00230d0:	83 c4 10             	add    esp,0x10
c00230d3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00230d6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00230d9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00230de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00230e0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00230e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00230e6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00230ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00230ef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00230f2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00230f8:	50                   	push   eax
c00230f9:	50                   	push   eax
c00230fa:	68 12 2b 03 c0       	push   0xc0032b12
c00230ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023102:	05 a8 0f 00 00       	add    eax,0xfa8
c0023107:	50                   	push   eax
c0023108:	e8 33 d5 fd ff       	call   c0000640 <strcpy>
c002310d:	83 c4 10             	add    esp,0x10
c0023110:	31 c0                	xor    eax,eax
c0023112:	83 c4 0c             	add    esp,0xc
c0023115:	31 d2                	xor    edx,edx
c0023117:	5b                   	pop    ebx
c0023118:	5e                   	pop    esi
c0023119:	5f                   	pop    edi
c002311a:	5d                   	pop    ebp
c002311b:	c3                   	ret    

c002311c <SysKill(regs*)>:
c002311c:	53                   	push   ebx
c002311d:	83 ec 08             	sub    esp,0x8
c0023120:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023124:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023128:	75 16                	jne    c0023140 <SysKill(regs*)+0x24>
c002312a:	83 ec 0c             	sub    esp,0xc
c002312d:	68 1c 2b 03 c0       	push   0xc0032b1c
c0023132:	e8 2b d1 ff ff       	call   c0020262 <KePanic(char const*)>
c0023137:	83 c4 10             	add    esp,0x10
c002313a:	e9 89 00 00 00       	jmp    c00231c8 <SysKill(regs*)+0xac>
c002313f:	90                   	nop
c0023140:	83 ec 0c             	sub    esp,0xc
c0023143:	68 ec 01 04 c0       	push   0xc00401ec
c0023148:	e8 ef ba 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002314d:	8d 76 00             	lea    esi,[esi+0x0]
c0023150:	83 c4 10             	add    esp,0x10
c0023153:	85 c0                	test   eax,eax
c0023155:	74 19                	je     c0023170 <SysKill(regs*)+0x54>
c0023157:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002315a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002315d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002315f:	74 33                	je     c0023194 <SysKill(regs*)+0x78>
c0023161:	52                   	push   edx
c0023162:	52                   	push   edx
c0023163:	50                   	push   eax
c0023164:	68 ec 01 04 c0       	push   0xc00401ec
c0023169:	e8 ee bd 00 00       	call   c002ef5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002316e:	eb e0                	jmp    c0023150 <SysKill(regs*)+0x34>
c0023170:	83 ec 0c             	sub    esp,0xc
c0023173:	68 e0 01 04 c0       	push   0xc00401e0
c0023178:	e8 bf ba 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002317d:	8d 76 00             	lea    esi,[esi+0x0]
c0023180:	83 c4 10             	add    esp,0x10
c0023183:	85 c0                	test   eax,eax
c0023185:	74 41                	je     c00231c8 <SysKill(regs*)+0xac>
c0023187:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002318a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002318d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002318f:	75 27                	jne    c00231b8 <SysKill(regs*)+0x9c>
c0023191:	8d 76 00             	lea    esi,[esi+0x0]
c0023194:	51                   	push   ecx
c0023195:	51                   	push   ecx
c0023196:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002319e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231a1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00231a7:	e8 6f d9 ff ff       	call   c0020b1b <KeRaiseSignal(SigHandlerBlock*, int)>
c00231ac:	83 c4 10             	add    esp,0x10
c00231af:	31 c0                	xor    eax,eax
c00231b1:	31 d2                	xor    edx,edx
c00231b3:	eb 1b                	jmp    c00231d0 <SysKill(regs*)+0xb4>
c00231b5:	8d 76 00             	lea    esi,[esi+0x0]
c00231b8:	52                   	push   edx
c00231b9:	52                   	push   edx
c00231ba:	50                   	push   eax
c00231bb:	68 e0 01 04 c0       	push   0xc00401e0
c00231c0:	e8 97 bd 00 00       	call   c002ef5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231c5:	eb b9                	jmp    c0023180 <SysKill(regs*)+0x64>
c00231c7:	90                   	nop
c00231c8:	83 c8 ff             	or     eax,0xffffffff
c00231cb:	89 c2                	mov    edx,eax
c00231cd:	8d 76 00             	lea    esi,[esi+0x0]
c00231d0:	83 c4 08             	add    esp,0x8
c00231d3:	5b                   	pop    ebx
c00231d4:	c3                   	ret    

c00231d5 <SysLoadDLL(regs*)>:
c00231d5:	56                   	push   esi
c00231d6:	53                   	push   ebx
c00231d7:	31 d2                	xor    edx,edx
c00231d9:	51                   	push   ecx
c00231da:	b8 01 00 00 00       	mov    eax,0x1
c00231df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00231e3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00231e7:	0f 84 8c 00 00 00    	je     c0023279 <SysLoadDLL(regs*)+0xa4>
c00231ed:	83 ec 0c             	sub    esp,0xc
c00231f0:	68 14 01 00 00       	push   0x114
c00231f5:	e8 c0 31 ff ff       	call   c00163ba <malloc>
c00231fa:	83 c4 0c             	add    esp,0xc
c00231fd:	89 c3                	mov    ebx,eax
c00231ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023204:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023207:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002320a:	53                   	push   ebx
c002320b:	e8 40 72 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0023210:	83 c4 10             	add    esp,0x10
c0023213:	31 d2                	xor    edx,edx
c0023215:	b8 02 00 00 00       	mov    eax,0x2
c002321a:	85 db                	test   ebx,ebx
c002321c:	74 5b                	je     c0023279 <SysLoadDLL(regs*)+0xa4>
c002321e:	83 ec 0c             	sub    esp,0xc
c0023221:	53                   	push   ebx
c0023222:	e8 0b 75 ff ff       	call   c001a732 <File::exists()>
c0023227:	83 c4 10             	add    esp,0x10
c002322a:	84 c0                	test   al,al
c002322c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002322e:	75 11                	jne    c0023241 <SysLoadDLL(regs*)+0x6c>
c0023230:	83 ec 0c             	sub    esp,0xc
c0023233:	53                   	push   ebx
c0023234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023237:	83 c4 10             	add    esp,0x10
c002323a:	b8 03 00 00 00       	mov    eax,0x3
c002323f:	eb 36                	jmp    c0023277 <SysLoadDLL(regs*)+0xa2>
c0023241:	83 ec 0c             	sub    esp,0xc
c0023244:	53                   	push   ebx
c0023245:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023248:	58                   	pop    eax
c0023249:	5a                   	pop    edx
c002324a:	6a 00                	push   0x0
c002324c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002324f:	e8 81 15 00 00       	call   c00247d5 <Thr::loadDLL(char const*, bool)>
c0023254:	83 c4 10             	add    esp,0x10
c0023257:	89 c1                	mov    ecx,eax
c0023259:	31 d2                	xor    edx,edx
c002325b:	b8 04 00 00 00       	mov    eax,0x4
c0023260:	85 c9                	test   ecx,ecx
c0023262:	74 15                	je     c0023279 <SysLoadDLL(regs*)+0xa4>
c0023264:	53                   	push   ebx
c0023265:	53                   	push   ebx
c0023266:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002326c:	51                   	push   ecx
c002326d:	e8 b5 17 00 00       	call   c0024a27 <Thr::executeDLL(unsigned long, void*)>
c0023272:	83 c4 10             	add    esp,0x10
c0023275:	31 c0                	xor    eax,eax
c0023277:	31 d2                	xor    edx,edx
c0023279:	59                   	pop    ecx
c002327a:	5b                   	pop    ebx
c002327b:	5e                   	pop    esi
c002327c:	c3                   	ret    

c002327d <SysRead(regs*)>:
c002327d:	57                   	push   edi
c002327e:	56                   	push   esi
c002327f:	53                   	push   ebx
c0023280:	83 ec 10             	sub    esp,0x10
c0023283:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023287:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002328a:	83 f8 02             	cmp    eax,0x2
c002328d:	77 10                	ja     c002329f <SysRead(regs*)+0x22>
c002328f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023294:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023297:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002329d:	eb 0e                	jmp    c00232ad <SysRead(regs*)+0x30>
c002329f:	83 ec 0c             	sub    esp,0xc
c00232a2:	50                   	push   eax
c00232a3:	e8 0f 4b ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c00232a8:	83 c4 10             	add    esp,0x10
c00232ab:	89 c1                	mov    ecx,eax
c00232ad:	83 c8 ff             	or     eax,0xffffffff
c00232b0:	85 c9                	test   ecx,ecx
c00232b2:	89 c2                	mov    edx,eax
c00232b4:	74 28                	je     c00232de <SysRead(regs*)+0x61>
c00232b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00232be:	31 ff                	xor    edi,edi
c00232c0:	83 ec 0c             	sub    esp,0xc
c00232c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00232c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00232c9:	52                   	push   edx
c00232ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232cd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00232d0:	57                   	push   edi
c00232d1:	56                   	push   esi
c00232d2:	51                   	push   ecx
c00232d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00232d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00232da:	83 c4 20             	add    esp,0x20
c00232dd:	99                   	cdq    
c00232de:	83 c4 10             	add    esp,0x10
c00232e1:	5b                   	pop    ebx
c00232e2:	5e                   	pop    esi
c00232e3:	5f                   	pop    edi
c00232e4:	c3                   	ret    

c00232e5 <SysRegisterSignal(regs*)>:
c00232e5:	83 ec 18             	sub    esp,0x18
c00232e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232ec:	6a 00                	push   0x0
c00232ee:	6a 00                	push   0x0
c00232f0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00232f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00232f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232fe:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023304:	e8 dc d7 ff ff       	call   c0020ae5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023309:	83 c4 2c             	add    esp,0x2c
c002330c:	99                   	cdq    
c002330d:	c3                   	ret    

c002330e <SysRegistryGetTypeFromPath(regs*)>:
c002330e:	57                   	push   edi
c002330f:	56                   	push   esi
c0023310:	53                   	push   ebx
c0023311:	81 ec 38 01 00 00    	sub    esp,0x138
c0023317:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002331e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023321:	68 3d 2b 03 c0       	push   0xc0032b3d
c0023326:	e8 1e 5f ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002332b:	5a                   	pop    edx
c002332c:	59                   	pop    ecx
c002332d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023330:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023333:	e8 4f f6 ff ff       	call   c0022987 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023338:	5f                   	pop    edi
c0023339:	89 c6                	mov    esi,eax
c002333b:	5a                   	pop    edx
c002333c:	50                   	push   eax
c002333d:	68 5d 2b 03 c0       	push   0xc0032b5d
c0023342:	e8 02 5f ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0023347:	83 c4 10             	add    esp,0x10
c002334a:	85 f6                	test   esi,esi
c002334c:	74 28                	je     c0023376 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002334e:	50                   	push   eax
c002334f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023353:	57                   	push   edi
c0023354:	56                   	push   esi
c0023355:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023358:	e8 0e f2 ff ff       	call   c002256b <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002335d:	83 c4 0c             	add    esp,0xc
c0023360:	89 c3                	mov    ebx,eax
c0023362:	57                   	push   edi
c0023363:	50                   	push   eax
c0023364:	68 65 2b 03 c0       	push   0xc0032b65
c0023369:	e8 db 5e ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002336e:	89 d8                	mov    eax,ebx
c0023370:	83 c4 10             	add    esp,0x10
c0023373:	99                   	cdq    
c0023374:	eb 05                	jmp    c002337b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0023376:	83 c8 ff             	or     eax,0xffffffff
c0023379:	89 c2                	mov    edx,eax
c002337b:	81 c4 30 01 00 00    	add    esp,0x130
c0023381:	5b                   	pop    ebx
c0023382:	5e                   	pop    esi
c0023383:	5f                   	pop    edi
c0023384:	c3                   	ret    

c0023385 <SysRegistryReadExtent(regs*)>:
c0023385:	83 ec 1c             	sub    esp,0x1c
c0023388:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002338c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002338f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023392:	85 c0                	test   eax,eax
c0023394:	79 1f                	jns    c00233b5 <SysRegistryReadExtent(regs*)+0x30>
c0023396:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002339b:	52                   	push   edx
c002339c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00233a0:	52                   	push   edx
c00233a1:	50                   	push   eax
c00233a2:	51                   	push   ecx
c00233a3:	e8 b5 f0 ff ff       	call   c002245d <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00233a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00233b0:	83 c4 10             	add    esp,0x10
c00233b3:	eb 14                	jmp    c00233c9 <SysRegistryReadExtent(regs*)+0x44>
c00233b5:	83 ec 04             	sub    esp,0x4
c00233b8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00233bb:	50                   	push   eax
c00233bc:	51                   	push   ecx
c00233bd:	e8 35 eb ff ff       	call   c0021ef7 <CmGetString(Reghive_Tag*, int, char*)>
c00233c2:	83 c4 10             	add    esp,0x10
c00233c5:	31 c0                	xor    eax,eax
c00233c7:	31 d2                	xor    edx,edx
c00233c9:	83 c4 1c             	add    esp,0x1c
c00233cc:	c3                   	ret    

c00233cd <SysRegistryPathToExtentLookup(regs*)>:
c00233cd:	53                   	push   ebx
c00233ce:	83 ec 10             	sub    esp,0x10
c00233d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00233d8:	68 7b 2b 03 c0       	push   0xc0032b7b
c00233dd:	e8 67 5e ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00233e2:	58                   	pop    eax
c00233e3:	5a                   	pop    edx
c00233e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00233e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00233ea:	e8 98 f5 ff ff       	call   c0022987 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00233ef:	83 c4 18             	add    esp,0x18
c00233f2:	99                   	cdq    
c00233f3:	5b                   	pop    ebx
c00233f4:	c3                   	ret    

c00233f5 <SysRegistryEnterDirectory(regs*)>:
c00233f5:	53                   	push   ebx
c00233f6:	83 ec 10             	sub    esp,0x10
c00233f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023400:	68 9e 2b 03 c0       	push   0xc0032b9e
c0023405:	e8 3f 5e ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002340a:	58                   	pop    eax
c002340b:	5a                   	pop    edx
c002340c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002340f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023412:	e8 57 eb ff ff       	call   c0021f6e <CmEnterDirectory(Reghive_Tag*, int)>
c0023417:	83 c4 18             	add    esp,0x18
c002341a:	99                   	cdq    
c002341b:	5b                   	pop    ebx
c002341c:	c3                   	ret    

c002341d <SysRegistryGetNext(regs*)>:
c002341d:	53                   	push   ebx
c002341e:	83 ec 10             	sub    esp,0x10
c0023421:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023425:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023428:	68 bc 2b 03 c0       	push   0xc0032bbc
c002342d:	e8 17 5e ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0023432:	58                   	pop    eax
c0023433:	5a                   	pop    edx
c0023434:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023437:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002343a:	e8 6e eb ff ff       	call   c0021fad <CmGetNext(Reghive_Tag*, int)>
c002343f:	83 c4 18             	add    esp,0x18
c0023442:	99                   	cdq    
c0023443:	5b                   	pop    ebx
c0023444:	c3                   	ret    

c0023445 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023445:	57                   	push   edi
c0023446:	56                   	push   esi
c0023447:	53                   	push   ebx
c0023448:	81 ec 34 01 00 00    	sub    esp,0x134
c002344e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023455:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023459:	57                   	push   edi
c002345a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c002345d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023460:	e8 06 f1 ff ff       	call   c002256b <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023465:	89 c3                	mov    ebx,eax
c0023467:	58                   	pop    eax
c0023468:	5a                   	pop    edx
c0023469:	57                   	push   edi
c002346a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c002346d:	e8 ce d1 fd ff       	call   c0000640 <strcpy>
c0023472:	89 d8                	mov    eax,ebx
c0023474:	81 c4 40 01 00 00    	add    esp,0x140
c002347a:	99                   	cdq    
c002347b:	5b                   	pop    ebx
c002347c:	5e                   	pop    esi
c002347d:	5f                   	pop    edi
c002347e:	c3                   	ret    

c002347f <SysRegistryOpen(regs*)>:
c002347f:	83 ec 18             	sub    esp,0x18
c0023482:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023486:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023489:	e8 f9 e8 ff ff       	call   c0021d87 <CmOpen(char const*)>
c002348e:	83 c4 1c             	add    esp,0x1c
c0023491:	99                   	cdq    
c0023492:	c3                   	ret    

c0023493 <SysRegistryClose(regs*)>:
c0023493:	83 ec 18             	sub    esp,0x18
c0023496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002349a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002349d:	e8 03 ea ff ff       	call   c0021ea5 <CmClose(Reghive_Tag*)>
c00234a2:	31 c0                	xor    eax,eax
c00234a4:	31 d2                	xor    edx,edx
c00234a6:	83 c4 1c             	add    esp,0x1c
c00234a9:	c3                   	ret    

c00234aa <SysSbrk(regs*)>:
c00234aa:	56                   	push   esi
c00234ab:	53                   	push   ebx
c00234ac:	50                   	push   eax
c00234ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234b9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00234bc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00234c2:	85 db                	test   ebx,ebx
c00234c4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00234c7:	74 02                	je     c00234cb <SysSbrk(regs*)+0x21>
c00234c9:	79 06                	jns    c00234d1 <SysSbrk(regs*)+0x27>
c00234cb:	89 f0                	mov    eax,esi
c00234cd:	31 d2                	xor    edx,edx
c00234cf:	eb 2a                	jmp    c00234fb <SysSbrk(regs*)+0x51>
c00234d1:	83 c8 ff             	or     eax,0xffffffff
c00234d4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00234da:	89 c2                	mov    edx,eax
c00234dc:	77 1d                	ja     c00234fb <SysSbrk(regs*)+0x51>
c00234de:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00234e4:	50                   	push   eax
c00234e5:	c1 ea 0c             	shr    edx,0xc
c00234e8:	68 07 0c 00 00       	push   0xc07
c00234ed:	52                   	push   edx
c00234ee:	51                   	push   ecx
c00234ef:	e8 34 52 ff ff       	call   c0018728 <VAS::allocatePages(int, int)>
c00234f4:	89 f0                	mov    eax,esi
c00234f6:	31 d2                	xor    edx,edx
c00234f8:	83 c4 10             	add    esp,0x10
c00234fb:	59                   	pop    ecx
c00234fc:	5b                   	pop    ebx
c00234fd:	5e                   	pop    esi
c00234fe:	c3                   	ret    

c00234ff <SysSetCwd(regs*)>:
c00234ff:	83 ec 14             	sub    esp,0x14
c0023502:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023506:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002350e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023511:	e8 bb 72 ff ff       	call   c001a7d1 <Fs::setcwd(Process*, char*)>
c0023516:	83 c4 1c             	add    esp,0x1c
c0023519:	99                   	cdq    
c002351a:	c3                   	ret    

c002351b <SysSetTime(regs*)>:
c002351b:	55                   	push   ebp
c002351c:	31 c9                	xor    ecx,ecx
c002351e:	57                   	push   edi
c002351f:	bd 0c 00 00 00       	mov    ebp,0xc
c0023524:	56                   	push   esi
c0023525:	53                   	push   ebx
c0023526:	31 db                	xor    ebx,ebx
c0023528:	83 ec 10             	sub    esp,0x10
c002352b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002352f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023532:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023535:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023538:	89 c2                	mov    edx,eax
c002353a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023540:	83 e2 1f             	and    edx,0x1f
c0023543:	c1 e7 10             	shl    edi,0x10
c0023546:	42                   	inc    edx
c0023547:	c1 e8 05             	shr    eax,0x5
c002354a:	88 d1                	mov    cl,dl
c002354c:	31 d2                	xor    edx,edx
c002354e:	f7 f5                	div    ebp
c0023550:	89 dd                	mov    ebp,ebx
c0023552:	88 d5                	mov    ch,dl
c0023554:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002355a:	0f b7 c1             	movzx  eax,cx
c002355d:	31 d2                	xor    edx,edx
c002355f:	09 f8                	or     eax,edi
c0023561:	bf 3c 00 00 00       	mov    edi,0x3c
c0023566:	89 c1                	mov    ecx,eax
c0023568:	89 f0                	mov    eax,esi
c002356a:	f7 f7                	div    edi
c002356c:	c1 e2 10             	shl    edx,0x10
c002356f:	09 d5                	or     ebp,edx
c0023571:	31 d2                	xor    edx,edx
c0023573:	89 eb                	mov    ebx,ebp
c0023575:	f7 f7                	div    edi
c0023577:	bf 10 0e 00 00       	mov    edi,0xe10
c002357c:	88 d7                	mov    bh,dl
c002357e:	89 f0                	mov    eax,esi
c0023580:	31 d2                	xor    edx,edx
c0023582:	f7 f7                	div    edi
c0023584:	bf 18 00 00 00       	mov    edi,0x18
c0023589:	31 d2                	xor    edx,edx
c002358b:	f7 f7                	div    edi
c002358d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0023592:	88 d3                	mov    bl,dl
c0023594:	53                   	push   ebx
c0023595:	51                   	push   ecx
c0023596:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c002359c:	e8 3d 7a ff ff       	call   c001afde <Clock::setTimeInDatetimeLocal(datetime_t)>
c00235a1:	83 c4 1c             	add    esp,0x1c
c00235a4:	83 f0 01             	xor    eax,0x1
c00235a7:	5b                   	pop    ebx
c00235a8:	0f b6 c0             	movzx  eax,al
c00235ab:	5e                   	pop    esi
c00235ac:	31 d2                	xor    edx,edx
c00235ae:	5f                   	pop    edi
c00235af:	5d                   	pop    ebp
c00235b0:	c3                   	ret    

c00235b1 <SysSymlink(regs*)>:
c00235b1:	56                   	push   esi
c00235b2:	83 c8 ff             	or     eax,0xffffffff
c00235b5:	53                   	push   ebx
c00235b6:	89 c2                	mov    edx,eax
c00235b8:	81 ec 34 02 00 00    	sub    esp,0x234
c00235be:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00235c5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00235c9:	74 50                	je     c002361b <SysSymlink(regs*)+0x6a>
c00235cb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00235ce:	85 c9                	test   ecx,ecx
c00235d0:	74 49                	je     c002361b <SysSymlink(regs*)+0x6a>
c00235d2:	6a 01                	push   0x1
c00235d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235dc:	05 0c 01 00 00       	add    eax,0x10c
c00235e1:	50                   	push   eax
c00235e2:	51                   	push   ecx
c00235e3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00235e7:	56                   	push   esi
c00235e8:	e8 6b 6b ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00235ed:	6a 01                	push   0x1
c00235ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235f7:	05 0c 01 00 00       	add    eax,0x10c
c00235fc:	50                   	push   eax
c00235fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023600:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023607:	53                   	push   ebx
c0023608:	e8 4b 6b ff ff       	call   c001a158 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002360d:	83 c4 18             	add    esp,0x18
c0023610:	56                   	push   esi
c0023611:	53                   	push   ebx
c0023612:	e8 50 67 ff ff       	call   c0019d67 <KeCreateSymlink(char const*, char const*)>
c0023617:	83 c4 10             	add    esp,0x10
c002361a:	99                   	cdq    
c002361b:	81 c4 34 02 00 00    	add    esp,0x234
c0023621:	5b                   	pop    ebx
c0023622:	5e                   	pop    esi
c0023623:	c3                   	ret    

c0023624 <SysTimezone(regs*)>:
c0023624:	53                   	push   ebx
c0023625:	83 ec 08             	sub    esp,0x8
c0023628:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002362c:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023630:	75 17                	jne    c0023649 <SysTimezone(regs*)+0x25>
c0023632:	83 ec 0c             	sub    esp,0xc
c0023635:	68 d3 2b 03 c0       	push   0xc0032bd3
c002363a:	e8 0a 5c ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002363f:	83 c8 ff             	or     eax,0xffffffff
c0023642:	83 c4 10             	add    esp,0x10
c0023645:	89 c2                	mov    edx,eax
c0023647:	eb 20                	jmp    c0023669 <SysTimezone(regs*)+0x45>
c0023649:	83 ec 0c             	sub    esp,0xc
c002364c:	68 e8 2b 03 c0       	push   0xc0032be8
c0023651:	e8 f3 5b ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0023656:	58                   	pop    eax
c0023657:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002365a:	e8 e9 76 ff ff       	call   c001ad48 <User::loadClockSettings(int)>
c002365f:	83 c4 10             	add    esp,0x10
c0023662:	b8 01 00 00 00       	mov    eax,0x1
c0023667:	31 d2                	xor    edx,edx
c0023669:	83 c4 08             	add    esp,0x8
c002366c:	5b                   	pop    ebx
c002366d:	c3                   	ret    

c002366e <SysTruncate(regs*)>:
c002366e:	55                   	push   ebp
c002366f:	57                   	push   edi
c0023670:	31 ff                	xor    edi,edi
c0023672:	56                   	push   esi
c0023673:	53                   	push   ebx
c0023674:	83 ec 0c             	sub    esp,0xc
c0023677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002367b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002367e:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023681:	89 ce                	mov    esi,ecx
c0023683:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023687:	0f 84 9a 00 00 00    	je     c0023727 <SysTruncate(regs*)+0xb9>
c002368d:	83 ec 0c             	sub    esp,0xc
c0023690:	68 14 01 00 00       	push   0x114
c0023695:	e8 20 2d ff ff       	call   c00163ba <malloc>
c002369a:	83 c4 0c             	add    esp,0xc
c002369d:	89 c3                	mov    ebx,eax
c002369f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236a4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236a7:	55                   	push   ebp
c00236a8:	53                   	push   ebx
c00236a9:	e8 a2 6d ff ff       	call   c001a450 <File::File(char const*, Process*)>
c00236ae:	83 c4 10             	add    esp,0x10
c00236b1:	31 d2                	xor    edx,edx
c00236b3:	b8 03 00 00 00       	mov    eax,0x3
c00236b8:	85 db                	test   ebx,ebx
c00236ba:	0f 84 a2 00 00 00    	je     c0023762 <SysTruncate(regs*)+0xf4>
c00236c0:	51                   	push   ecx
c00236c1:	51                   	push   ecx
c00236c2:	6a 02                	push   0x2
c00236c4:	53                   	push   ebx
c00236c5:	e8 a4 6d ff ff       	call   c001a46e <File::open(FileOpenMode)>
c00236ca:	83 c4 10             	add    esp,0x10
c00236cd:	85 c0                	test   eax,eax
c00236cf:	74 13                	je     c00236e4 <SysTruncate(regs*)+0x76>
c00236d1:	83 ec 0c             	sub    esp,0xc
c00236d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236d6:	53                   	push   ebx
c00236d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00236da:	83 c4 10             	add    esp,0x10
c00236dd:	b8 04 00 00 00       	mov    eax,0x4
c00236e2:	eb 7c                	jmp    c0023760 <SysTruncate(regs*)+0xf2>
c00236e4:	52                   	push   edx
c00236e5:	57                   	push   edi
c00236e6:	56                   	push   esi
c00236e7:	53                   	push   ebx
c00236e8:	e8 95 6e ff ff       	call   c001a582 <File::truncate(unsigned long long)>
c00236ed:	83 c4 10             	add    esp,0x10
c00236f0:	85 c0                	test   eax,eax
c00236f2:	74 1b                	je     c002370f <SysTruncate(regs*)+0xa1>
c00236f4:	83 ec 0c             	sub    esp,0xc
c00236f7:	53                   	push   ebx
c00236f8:	e8 cf 6d ff ff       	call   c001a4cc <File::close()>
c00236fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023702:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023705:	83 c4 10             	add    esp,0x10
c0023708:	b8 05 00 00 00       	mov    eax,0x5
c002370d:	eb 51                	jmp    c0023760 <SysTruncate(regs*)+0xf2>
c002370f:	83 ec 0c             	sub    esp,0xc
c0023712:	53                   	push   ebx
c0023713:	e8 b4 6d ff ff       	call   c001a4cc <File::close()>
c0023718:	8b 03                	mov    eax,DWORD PTR [ebx]
c002371a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002371d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023720:	83 c4 10             	add    esp,0x10
c0023723:	31 c0                	xor    eax,eax
c0023725:	eb 39                	jmp    c0023760 <SysTruncate(regs*)+0xf2>
c0023727:	31 d2                	xor    edx,edx
c0023729:	b8 01 00 00 00       	mov    eax,0x1
c002372e:	83 fd 02             	cmp    ebp,0x2
c0023731:	7e 2f                	jle    c0023762 <SysTruncate(regs*)+0xf4>
c0023733:	83 ec 0c             	sub    esp,0xc
c0023736:	51                   	push   ecx
c0023737:	e8 7b 46 ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c002373c:	83 c4 10             	add    esp,0x10
c002373f:	89 c1                	mov    ecx,eax
c0023741:	31 d2                	xor    edx,edx
c0023743:	b8 02 00 00 00       	mov    eax,0x2
c0023748:	85 c9                	test   ecx,ecx
c002374a:	74 16                	je     c0023762 <SysTruncate(regs*)+0xf4>
c002374c:	50                   	push   eax
c002374d:	57                   	push   edi
c002374e:	56                   	push   esi
c002374f:	51                   	push   ecx
c0023750:	e8 2d 6e ff ff       	call   c001a582 <File::truncate(unsigned long long)>
c0023755:	83 c4 10             	add    esp,0x10
c0023758:	85 c0                	test   eax,eax
c002375a:	0f 95 c0             	setne  al
c002375d:	0f b6 c0             	movzx  eax,al
c0023760:	31 d2                	xor    edx,edx
c0023762:	83 c4 0c             	add    esp,0xc
c0023765:	5b                   	pop    ebx
c0023766:	5e                   	pop    esi
c0023767:	5f                   	pop    edi
c0023768:	5d                   	pop    ebp
c0023769:	c3                   	ret    

c002376a <SysWrite(regs*)>:
c002376a:	57                   	push   edi
c002376b:	56                   	push   esi
c002376c:	53                   	push   ebx
c002376d:	83 ec 10             	sub    esp,0x10
c0023770:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023774:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023777:	83 f8 02             	cmp    eax,0x2
c002377a:	77 10                	ja     c002378c <SysWrite(regs*)+0x22>
c002377c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023784:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002378a:	eb 0e                	jmp    c002379a <SysWrite(regs*)+0x30>
c002378c:	83 ec 0c             	sub    esp,0xc
c002378f:	50                   	push   eax
c0023790:	e8 22 46 ff ff       	call   c0017db7 <KeGetFileFromDescriptor(int)>
c0023795:	83 c4 10             	add    esp,0x10
c0023798:	89 c1                	mov    ecx,eax
c002379a:	83 c8 ff             	or     eax,0xffffffff
c002379d:	85 c9                	test   ecx,ecx
c002379f:	89 c2                	mov    edx,eax
c00237a1:	74 28                	je     c00237cb <SysWrite(regs*)+0x61>
c00237a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237ab:	31 ff                	xor    edi,edi
c00237ad:	83 ec 0c             	sub    esp,0xc
c00237b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00237b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00237b6:	52                   	push   edx
c00237b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00237ba:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00237bd:	57                   	push   edi
c00237be:	56                   	push   esi
c00237bf:	51                   	push   ecx
c00237c0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00237c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00237c7:	83 c4 20             	add    esp,0x20
c00237ca:	99                   	cdq    
c00237cb:	83 c4 10             	add    esp,0x10
c00237ce:	5b                   	pop    ebx
c00237cf:	5e                   	pop    esi
c00237d0:	5f                   	pop    edi
c00237d1:	c3                   	ret    

c00237d2 <SysWsbe(regs*)>:
c00237d2:	57                   	push   edi
c00237d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00237d8:	56                   	push   esi
c00237d9:	be 27 2c 03 c0       	mov    esi,0xc0032c27
c00237de:	53                   	push   ebx
c00237df:	83 ec 30             	sub    esp,0x30
c00237e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00237e6:	fc                   	cld    
c00237e7:	83 ec 0c             	sub    esp,0xc
c00237ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237ec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237f8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00237fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0023800:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023803:	57                   	push   edi
c0023804:	e8 67 cd fd ff       	call   c0000570 <strlen>
c0023809:	5a                   	pop    edx
c002380a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c002380e:	52                   	push   edx
c002380f:	31 d2                	xor    edx,edx
c0023811:	57                   	push   edi
c0023812:	52                   	push   edx
c0023813:	50                   	push   eax
c0023814:	56                   	push   esi
c0023815:	ff d3                	call   ebx
c0023817:	83 c4 14             	add    esp,0x14
c002381a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002381e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023821:	e8 b2 21 00 00       	call   c00259d8 <terminateTask(int)>
c0023826:	83 c4 40             	add    esp,0x40
c0023829:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002382e:	5b                   	pop    ebx
c002382f:	31 d2                	xor    edx,edx
c0023831:	5e                   	pop    esi
c0023832:	5f                   	pop    edi
c0023833:	c3                   	ret    

c0023834 <SysYield(regs*)>:
c0023834:	83 ec 0c             	sub    esp,0xc
c0023837:	fa                   	cli    
c0023838:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002383e:	e8 15 1a 00 00       	call   c0025258 <schedule()>
c0023843:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023848:	48                   	dec    eax
c0023849:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002384e:	75 01                	jne    c0023851 <SysYield(regs*)+0x1d>
c0023850:	fb                   	sti    
c0023851:	31 c0                	xor    eax,eax
c0023853:	31 d2                	xor    edx,edx
c0023855:	83 c4 0c             	add    esp,0xc
c0023858:	c3                   	ret    

c0023859 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023859:	55                   	push   ebp
c002385a:	57                   	push   edi
c002385b:	56                   	push   esi
c002385c:	53                   	push   ebx
c002385d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023863:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c002386b:	0f 95 c0             	setne  al
c002386e:	31 d2                	xor    edx,edx
c0023870:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023878:	0f 94 c2             	sete   dl
c002387b:	85 c2                	test   edx,eax
c002387d:	74 34                	je     c00238b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c002387f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c002388a:	74 27                	je     c00238b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c002388c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023893:	05 00 10 00 00       	add    eax,0x1000
c0023898:	89 c1                	mov    ecx,eax
c002389a:	25 00 f0 ff ff       	and    eax,0xfffff000
c002389f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00238a5:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00238ac:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00238b3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00238ba:	83 ec 0c             	sub    esp,0xc
c00238bd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00238c3:	6a 01                	push   0x1
c00238c5:	e8 47 46 ff ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	89 c3                	mov    ebx,eax
c00238cf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00238d5:	0f 86 25 01 00 00    	jbe    c0023a00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00238db:	c1 ee 0c             	shr    esi,0xc
c00238de:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00238e5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00238e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00238f1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00238f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00238fc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023903:	29 ef                	sub    edi,ebp
c0023905:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023909:	0f 83 f8 00 00 00    	jae    c0023a07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c002390f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023915:	76 05                	jbe    c002391c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023917:	bf 00 10 00 00       	mov    edi,0x1000
c002391c:	83 ec 0c             	sub    esp,0xc
c002391f:	31 d2                	xor    edx,edx
c0023921:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023928:	8b 08                	mov    ecx,DWORD PTR [eax]
c002392a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002392e:	50                   	push   eax
c002392f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023933:	56                   	push   esi
c0023934:	52                   	push   edx
c0023935:	57                   	push   edi
c0023936:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c002393d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023940:	83 c4 20             	add    esp,0x20
c0023943:	85 c0                	test   eax,eax
c0023945:	75 06                	jne    c002394d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023947:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002394b:	74 13                	je     c0023960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c002394d:	83 ec 0c             	sub    esp,0xc
c0023950:	53                   	push   ebx
c0023951:	e8 d9 48 ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0023956:	83 c4 10             	add    esp,0x10
c0023959:	31 c0                	xor    eax,eax
c002395b:	e9 7c 01 00 00       	jmp    c0023adc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023960:	fa                   	cli    
c0023961:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023967:	e8 57 2d ff ff       	call   c00166c3 <Phys::allocatePage()>
c002396c:	6a 07                	push   0x7
c002396e:	89 c7                	mov    edi,eax
c0023970:	53                   	push   ebx
c0023971:	50                   	push   eax
c0023972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023977:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002397a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023980:	e8 9f 4c ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023985:	83 c4 0c             	add    esp,0xc
c0023988:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c002398f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023995:	6a 00                	push   0x0
c0023997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002399c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002399f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239a5:	e8 e0 4a ff ff       	call   c001848a <VAS::mapOtherVASIn(bool, VAS*)>
c00239aa:	58                   	pop    eax
c00239ab:	5a                   	pop    edx
c00239ac:	68 07 0c 00 00       	push   0xc07
c00239b1:	55                   	push   ebp
c00239b2:	57                   	push   edi
c00239b3:	89 df                	mov    edi,ebx
c00239b5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c2:	6a 00                	push   0x0
c00239c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239cc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239d2:	e8 9f 4e ff ff       	call   c0018876 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239d7:	b9 00 10 00 00       	mov    ecx,0x1000
c00239dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00239de:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239e3:	83 c4 20             	add    esp,0x20
c00239e6:	48                   	dec    eax
c00239e7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239ec:	85 c0                	test   eax,eax
c00239ee:	75 01                	jne    c00239f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00239f0:	fb                   	sti    
c00239f1:	81 c5 00 10 00 00    	add    ebp,0x1000
c00239f7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00239fb:	e9 f1 fe ff ff       	jmp    c00238f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023a00:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023a07:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023a0e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023a14:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023a1a:	0f 86 ae 00 00 00    	jbe    c0023ace <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023a20:	fa                   	cli    
c0023a21:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a27:	c1 ee 0c             	shr    esi,0xc
c0023a2a:	51                   	push   ecx
c0023a2b:	31 ff                	xor    edi,edi
c0023a2d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023a34:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a3a:	6a 00                	push   0x0
c0023a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a4a:	e8 3b 4a ff ff       	call   c001848a <VAS::mapOtherVASIn(bool, VAS*)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	e8 6c 2c ff ff       	call   c00166c3 <Phys::allocatePage()>
c0023a57:	47                   	inc    edi
c0023a58:	6a 07                	push   0x7
c0023a5a:	53                   	push   ebx
c0023a5b:	50                   	push   eax
c0023a5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023a66:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023a69:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023a6f:	e8 b0 4b ff ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023a74:	58                   	pop    eax
c0023a75:	5a                   	pop    edx
c0023a76:	68 07 0c 00 00       	push   0xc07
c0023a7b:	55                   	push   ebp
c0023a7c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023a82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a86:	50                   	push   eax
c0023a87:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023a8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a94:	6a 00                	push   0x0
c0023a96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a9e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023aa4:	e8 cd 4d ff ff       	call   c0018876 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023aa9:	83 c4 1c             	add    esp,0x1c
c0023aac:	68 00 10 00 00       	push   0x1000
c0023ab1:	6a 00                	push   0x0
c0023ab3:	53                   	push   ebx
c0023ab4:	e8 37 ca fd ff       	call   c00004f0 <memset>
c0023ab9:	83 c4 10             	add    esp,0x10
c0023abc:	39 fe                	cmp    esi,edi
c0023abe:	77 92                	ja     c0023a52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023ac0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023ac5:	48                   	dec    eax
c0023ac6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023acb:	75 01                	jne    c0023ace <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023acd:	fb                   	sti    
c0023ace:	83 ec 0c             	sub    esp,0xc
c0023ad1:	53                   	push   ebx
c0023ad2:	e8 58 47 ff ff       	call   c001822f <Virt::freeKernelVirtualPages(unsigned long)>
c0023ad7:	83 c4 10             	add    esp,0x10
c0023ada:	b0 01                	mov    al,0x1
c0023adc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023ae2:	5b                   	pop    ebx
c0023ae3:	5e                   	pop    esi
c0023ae4:	5f                   	pop    edi
c0023ae5:	5d                   	pop    ebp
c0023ae6:	c3                   	ret    

c0023ae7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023ae7:	55                   	push   ebp
c0023ae8:	57                   	push   edi
c0023ae9:	56                   	push   esi
c0023aea:	53                   	push   ebx
c0023aeb:	83 ec 48             	sub    esp,0x48
c0023aee:	68 14 01 00 00       	push   0x114
c0023af3:	e8 c2 28 ff ff       	call   c00163ba <malloc>
c0023af8:	83 c4 0c             	add    esp,0xc
c0023afb:	89 c6                	mov    esi,eax
c0023afd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023b01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023b05:	50                   	push   eax
c0023b06:	e8 45 69 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0023b0b:	58                   	pop    eax
c0023b0c:	5a                   	pop    edx
c0023b0d:	6a 01                	push   0x1
c0023b0f:	56                   	push   esi
c0023b10:	e8 59 69 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0023b15:	83 c4 10             	add    esp,0x10
c0023b18:	85 c0                	test   eax,eax
c0023b1a:	0f 85 43 01 00 00    	jne    c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023b28:	83 ec 0c             	sub    esp,0xc
c0023b2b:	6a 34                	push   0x34
c0023b2d:	e8 88 28 ff ff       	call   c00163ba <malloc>
c0023b32:	89 c3                	mov    ebx,eax
c0023b34:	58                   	pop    eax
c0023b35:	8b 06                	mov    eax,DWORD PTR [esi]
c0023b37:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023b3b:	57                   	push   edi
c0023b3c:	53                   	push   ebx
c0023b3d:	6a 00                	push   0x0
c0023b3f:	6a 34                	push   0x34
c0023b41:	56                   	push   esi
c0023b42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023b45:	83 c4 20             	add    esp,0x20
c0023b48:	85 c0                	test   eax,eax
c0023b4a:	0f 85 13 01 00 00    	jne    c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b50:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023b56:	0f 85 07 01 00 00    	jne    c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023b5f:	85 c0                	test   eax,eax
c0023b61:	0f 84 fc 00 00 00    	je     c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b67:	31 d2                	xor    edx,edx
c0023b69:	55                   	push   ebp
c0023b6a:	52                   	push   edx
c0023b6b:	50                   	push   eax
c0023b6c:	56                   	push   esi
c0023b6d:	e8 ba 69 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	85 c0                	test   eax,eax
c0023b77:	0f 85 e6 00 00 00    	jne    c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023b83:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023b87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023b8b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023b8f:	0f af c2             	imul   eax,edx
c0023b92:	50                   	push   eax
c0023b93:	e8 22 28 ff ff       	call   c00163ba <malloc>
c0023b98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023b9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023b9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023ba1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ba5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ba9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bad:	0f af c2             	imul   eax,edx
c0023bb0:	99                   	cdq    
c0023bb1:	52                   	push   edx
c0023bb2:	50                   	push   eax
c0023bb3:	56                   	push   esi
c0023bb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023bb7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023bba:	83 c4 20             	add    esp,0x20
c0023bbd:	85 c0                	test   eax,eax
c0023bbf:	0f 84 9e 00 00 00    	je     c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bc5:	31 d2                	xor    edx,edx
c0023bc7:	51                   	push   ecx
c0023bc8:	52                   	push   edx
c0023bc9:	50                   	push   eax
c0023bca:	56                   	push   esi
c0023bcb:	e8 5c 69 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023bd0:	83 c4 10             	add    esp,0x10
c0023bd3:	85 c0                	test   eax,eax
c0023bd5:	0f 85 88 00 00 00    	jne    c0023c63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bdb:	83 ec 0c             	sub    esp,0xc
c0023bde:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023be2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023be6:	31 ed                	xor    ebp,ebp
c0023be8:	0f af c2             	imul   eax,edx
c0023beb:	50                   	push   eax
c0023bec:	e8 c9 27 ff ff       	call   c00163ba <malloc>
c0023bf1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023bf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023bf7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bfe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c02:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c06:	0f af c2             	imul   eax,edx
c0023c09:	99                   	cdq    
c0023c0a:	52                   	push   edx
c0023c0b:	50                   	push   eax
c0023c0c:	56                   	push   esi
c0023c0d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c10:	83 c4 20             	add    esp,0x20
c0023c13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c1b:	0f b7 fd             	movzx  edi,bp
c0023c1e:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023c22:	73 7d                	jae    c0023ca1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023c24:	c1 e7 05             	shl    edi,0x5
c0023c27:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023c2b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023c2e:	75 6b                	jne    c0023c9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023c30:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023c33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c37:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023c3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023c3e:	52                   	push   edx
c0023c3f:	31 d2                	xor    edx,edx
c0023c41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023c44:	52                   	push   edx
c0023c45:	50                   	push   eax
c0023c46:	56                   	push   esi
c0023c47:	e8 e0 68 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023c4c:	83 c4 10             	add    esp,0x10
c0023c4f:	85 c0                	test   eax,eax
c0023c51:	74 17                	je     c0023c6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023c53:	83 ec 0c             	sub    esp,0xc
c0023c56:	68 53 2c 03 c0       	push   0xc0032c53
c0023c5b:	e8 e9 55 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0023c60:	83 c4 10             	add    esp,0x10
c0023c63:	31 c0                	xor    eax,eax
c0023c65:	e9 87 00 00 00       	jmp    c0023cf1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023c6a:	83 ec 0c             	sub    esp,0xc
c0023c6d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023c70:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023c73:	50                   	push   eax
c0023c74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023c78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023c7c:	56                   	push   esi
c0023c7d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023c81:	e8 d3 fb ff ff       	call   c0023859 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023c86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023c8a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023c8e:	83 c4 20             	add    esp,0x20
c0023c91:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023c95:	73 04                	jae    c0023c9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023c97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c9b:	45                   	inc    ebp
c0023c9c:	e9 7a ff ff ff       	jmp    c0023c1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023ca1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023ca5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cad:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023cb3:	83 ec 0c             	sub    esp,0xc
c0023cb6:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023cc1:	05 00 10 00 00       	add    eax,0x1000
c0023cc6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023cc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ccd:	e8 f8 26 ff ff       	call   c00163ca <free>
c0023cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cd5:	e8 f0 26 ff ff       	call   c00163ca <free>
c0023cda:	58                   	pop    eax
c0023cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023cdf:	e8 e6 26 ff ff       	call   c00163ca <free>
c0023ce4:	89 34 24             	mov    DWORD PTR [esp],esi
c0023ce7:	e8 e0 67 ff ff       	call   c001a4cc <File::close()>
c0023cec:	83 c4 10             	add    esp,0x10
c0023cef:	b0 01                	mov    al,0x1
c0023cf1:	83 c4 3c             	add    esp,0x3c
c0023cf4:	5b                   	pop    ebx
c0023cf5:	5e                   	pop    esi
c0023cf6:	5f                   	pop    edi
c0023cf7:	5d                   	pop    ebp
c0023cf8:	c3                   	ret    

c0023cf9 <Thr::runtimeReferenceHelper()>:
c0023cf9:	83 ec 18             	sub    esp,0x18
c0023cfc:	68 5b 2c 03 c0       	push   0xc0032c5b
c0023d01:	e8 43 55 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0023d06:	fa                   	cli    
c0023d07:	83 c4 10             	add    esp,0x10
c0023d0a:	eb fe                	jmp    c0023d0a <Thr::runtimeReferenceHelper()+0x11>

c0023d0c <Thr::getAddressOfKernelSymbol(char const*)>:
c0023d0c:	57                   	push   edi
c0023d0d:	56                   	push   esi
c0023d0e:	53                   	push   ebx
c0023d0f:	31 db                	xor    ebx,ebx
c0023d11:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023d17:	7e 3c                	jle    c0023d55 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023d19:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023d20:	31 ff                	xor    edi,edi
c0023d22:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023d29:	7e 27                	jle    c0023d52 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023d2b:	50                   	push   eax
c0023d2c:	50                   	push   eax
c0023d2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d31:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d33:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023d3a:	50                   	push   eax
c0023d3b:	e8 10 ca fd ff       	call   c0000750 <strcmp>
c0023d40:	83 c4 10             	add    esp,0x10
c0023d43:	85 c0                	test   eax,eax
c0023d45:	75 05                	jne    c0023d4c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023d47:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023d4a:	eb 0b                	jmp    c0023d57 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023d4c:	83 c6 10             	add    esi,0x10
c0023d4f:	47                   	inc    edi
c0023d50:	eb d0                	jmp    c0023d22 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023d52:	43                   	inc    ebx
c0023d53:	eb bc                	jmp    c0023d11 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023d55:	31 c0                	xor    eax,eax
c0023d57:	5b                   	pop    ebx
c0023d58:	5e                   	pop    esi
c0023d59:	5f                   	pop    edi
c0023d5a:	c3                   	ret    

c0023d5b <Thr::loadKernelSymbolTable(char const*)>:
c0023d5b:	55                   	push   ebp
c0023d5c:	57                   	push   edi
c0023d5d:	56                   	push   esi
c0023d5e:	53                   	push   ebx
c0023d5f:	83 ec 68             	sub    esp,0x68
c0023d62:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023d68:	68 14 01 00 00       	push   0x114
c0023d6d:	e8 48 26 ff ff       	call   c00163ba <malloc>
c0023d72:	83 c4 0c             	add    esp,0xc
c0023d75:	89 c3                	mov    ebx,eax
c0023d77:	56                   	push   esi
c0023d78:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023d7c:	50                   	push   eax
c0023d7d:	e8 ce 66 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0023d82:	5e                   	pop    esi
c0023d83:	5f                   	pop    edi
c0023d84:	6a 01                	push   0x1
c0023d86:	53                   	push   ebx
c0023d87:	e8 e2 66 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0023d8c:	83 c4 10             	add    esp,0x10
c0023d8f:	85 c0                	test   eax,eax
c0023d91:	74 0a                	je     c0023d9d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023d93:	83 ec 0c             	sub    esp,0xc
c0023d96:	68 7d 2c 03 c0       	push   0xc0032c7d
c0023d9b:	eb 34                	jmp    c0023dd1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023d9d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023da5:	83 ec 0c             	sub    esp,0xc
c0023da8:	6a 34                	push   0x34
c0023daa:	e8 0b 26 ff ff       	call   c00163ba <malloc>
c0023daf:	59                   	pop    ecx
c0023db0:	89 c7                	mov    edi,eax
c0023db2:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023db6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023db8:	56                   	push   esi
c0023db9:	57                   	push   edi
c0023dba:	6a 00                	push   0x0
c0023dbc:	6a 34                	push   0x34
c0023dbe:	53                   	push   ebx
c0023dbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023dc2:	83 c4 20             	add    esp,0x20
c0023dc5:	85 c0                	test   eax,eax
c0023dc7:	74 17                	je     c0023de0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023dc9:	83 ec 0c             	sub    esp,0xc
c0023dcc:	68 94 2c 03 c0       	push   0xc0032c94
c0023dd1:	e8 8c c4 ff ff       	call   c0020262 <KePanic(char const*)>
c0023dd6:	83 c4 10             	add    esp,0x10
c0023dd9:	31 c0                	xor    eax,eax
c0023ddb:	e9 31 02 00 00       	jmp    c0024011 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023de0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023de6:	75 e1                	jne    c0023dc9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023de8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023deb:	85 c0                	test   eax,eax
c0023ded:	74 da                	je     c0023dc9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023def:	52                   	push   edx
c0023df0:	31 d2                	xor    edx,edx
c0023df2:	52                   	push   edx
c0023df3:	50                   	push   eax
c0023df4:	53                   	push   ebx
c0023df5:	e8 32 67 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023dfa:	83 c4 10             	add    esp,0x10
c0023dfd:	85 c0                	test   eax,eax
c0023dff:	75 c8                	jne    c0023dc9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e01:	83 ec 0c             	sub    esp,0xc
c0023e04:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e08:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e0c:	31 ed                	xor    ebp,ebp
c0023e0e:	0f af c2             	imul   eax,edx
c0023e11:	50                   	push   eax
c0023e12:	e8 a3 25 ff ff       	call   c00163ba <malloc>
c0023e17:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023e19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e24:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e28:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e2c:	0f af c2             	imul   eax,edx
c0023e2f:	99                   	cdq    
c0023e30:	52                   	push   edx
c0023e31:	50                   	push   eax
c0023e32:	53                   	push   ebx
c0023e33:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e36:	83 c4 20             	add    esp,0x20
c0023e39:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023e41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023e49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023e51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023e59:	0f b7 f5             	movzx  esi,bp
c0023e5c:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023e60:	0f 83 a7 00 00 00    	jae    c0023f0d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023e66:	6b f6 28             	imul   esi,esi,0x28
c0023e69:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023e6d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023e70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e74:	50                   	push   eax
c0023e75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023e79:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023e7d:	8b 16                	mov    edx,DWORD PTR [esi]
c0023e7f:	6b c0 28             	imul   eax,eax,0x28
c0023e82:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023e86:	89 d0                	mov    eax,edx
c0023e88:	31 d2                	xor    edx,edx
c0023e8a:	52                   	push   edx
c0023e8b:	50                   	push   eax
c0023e8c:	53                   	push   ebx
c0023e8d:	e8 9a 66 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023e92:	83 c4 0c             	add    esp,0xc
c0023e95:	6a 20                	push   0x20
c0023e97:	6a 00                	push   0x0
c0023e99:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023e9d:	52                   	push   edx
c0023e9e:	e8 4d c6 fd ff       	call   c00004f0 <memset>
c0023ea3:	58                   	pop    eax
c0023ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ea6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023eaa:	51                   	push   ecx
c0023eab:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023eaf:	52                   	push   edx
c0023eb0:	6a 00                	push   0x0
c0023eb2:	6a 1f                	push   0x1f
c0023eb4:	53                   	push   ebx
c0023eb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023eb8:	83 c4 18             	add    esp,0x18
c0023ebb:	68 ab 2c 03 c0       	push   0xc0032cab
c0023ec0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ec4:	52                   	push   edx
c0023ec5:	e8 86 c8 fd ff       	call   c0000750 <strcmp>
c0023eca:	83 c4 10             	add    esp,0x10
c0023ecd:	85 c0                	test   eax,eax
c0023ecf:	75 0f                	jne    c0023ee0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023ed1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023ed4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023edc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ee0:	50                   	push   eax
c0023ee1:	50                   	push   eax
c0023ee2:	68 b3 2c 03 c0       	push   0xc0032cb3
c0023ee7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023eeb:	50                   	push   eax
c0023eec:	e8 5f c8 fd ff       	call   c0000750 <strcmp>
c0023ef1:	83 c4 10             	add    esp,0x10
c0023ef4:	85 c0                	test   eax,eax
c0023ef6:	75 0f                	jne    c0023f07 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023ef8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023efb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023eff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f07:	45                   	inc    ebp
c0023f08:	e9 4c ff ff ff       	jmp    c0023e59 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023f0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023f12:	75 10                	jne    c0023f24 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023f14:	83 ec 0c             	sub    esp,0xc
c0023f17:	68 bb 2c 03 c0       	push   0xc0032cbb
c0023f1c:	e8 41 c3 ff ff       	call   c0020262 <KePanic(char const*)>
c0023f21:	83 c4 10             	add    esp,0x10
c0023f24:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023f29:	75 10                	jne    c0023f3b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023f2b:	83 ec 0c             	sub    esp,0xc
c0023f2e:	68 bb 2c 03 c0       	push   0xc0032cbb
c0023f33:	e8 2a c3 ff ff       	call   c0020262 <KePanic(char const*)>
c0023f38:	83 c4 10             	add    esp,0x10
c0023f3b:	31 d2                	xor    edx,edx
c0023f3d:	50                   	push   eax
c0023f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f42:	52                   	push   edx
c0023f43:	50                   	push   eax
c0023f44:	53                   	push   ebx
c0023f45:	e8 e2 65 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023f4a:	5a                   	pop    edx
c0023f4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023f4f:	e8 66 24 ff ff       	call   c00163ba <malloc>
c0023f54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023f58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f5c:	31 c9                	xor    ecx,ecx
c0023f5e:	5e                   	pop    esi
c0023f5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f61:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023f65:	55                   	push   ebp
c0023f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f6a:	51                   	push   ecx
c0023f6b:	52                   	push   edx
c0023f6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023f70:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023f74:	53                   	push   ebx
c0023f75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f78:	83 c4 14             	add    esp,0x14
c0023f7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023f7f:	e8 36 24 ff ff       	call   c00163ba <malloc>
c0023f84:	89 c6                	mov    esi,eax
c0023f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023f8b:	56                   	push   esi
c0023f8c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023f90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023f94:	51                   	push   ecx
c0023f95:	52                   	push   edx
c0023f96:	53                   	push   ebx
c0023f97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f9e:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023fa4:	83 c4 1c             	add    esp,0x1c
c0023fa7:	c1 e8 04             	shr    eax,0x4
c0023faa:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fb5:	31 d2                	xor    edx,edx
c0023fb7:	52                   	push   edx
c0023fb8:	50                   	push   eax
c0023fb9:	53                   	push   ebx
c0023fba:	e8 6d 65 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0023fbf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023fc1:	31 d2                	xor    edx,edx
c0023fc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fc6:	56                   	push   esi
c0023fc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023fcb:	52                   	push   edx
c0023fcc:	50                   	push   eax
c0023fcd:	53                   	push   ebx
c0023fce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023fd1:	83 c4 14             	add    esp,0x14
c0023fd4:	53                   	push   ebx
c0023fd5:	e8 f2 64 ff ff       	call   c001a4cc <File::close()>
c0023fda:	5d                   	pop    ebp
c0023fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023fdf:	e8 e6 23 ff ff       	call   c00163ca <free>
c0023fe4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023fe7:	e8 de 23 ff ff       	call   c00163ca <free>
c0023fec:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023ff1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0023ff8:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023fff:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0024006:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c002400c:	83 c4 10             	add    esp,0x10
c002400f:	b0 01                	mov    al,0x1
c0024011:	83 c4 5c             	add    esp,0x5c
c0024014:	5b                   	pop    ebx
c0024015:	5e                   	pop    esi
c0024016:	5f                   	pop    edi
c0024017:	5d                   	pop    ebp
c0024018:	c3                   	ret    

c0024019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024019:	55                   	push   ebp
c002401a:	57                   	push   edi
c002401b:	56                   	push   esi
c002401c:	53                   	push   ebx
c002401d:	81 ec 68 03 00 00    	sub    esp,0x368
c0024023:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c002402a:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0024030:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024034:	68 14 01 00 00       	push   0x114
c0024039:	e8 7c 23 ff ff       	call   c00163ba <malloc>
c002403e:	83 c4 0c             	add    esp,0xc
c0024041:	89 c5                	mov    ebp,eax
c0024043:	53                   	push   ebx
c0024044:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002404b:	50                   	push   eax
c002404c:	e8 ff 63 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0024051:	5e                   	pop    esi
c0024052:	5f                   	pop    edi
c0024053:	6a 01                	push   0x1
c0024055:	55                   	push   ebp
c0024056:	e8 13 64 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c002405b:	83 c4 10             	add    esp,0x10
c002405e:	85 c0                	test   eax,eax
c0024060:	0f 85 aa 06 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024066:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002406e:	83 ec 0c             	sub    esp,0xc
c0024071:	6a 34                	push   0x34
c0024073:	e8 42 23 ff ff       	call   c00163ba <malloc>
c0024078:	5b                   	pop    ebx
c0024079:	89 c7                	mov    edi,eax
c002407b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c002407f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024082:	53                   	push   ebx
c0024083:	57                   	push   edi
c0024084:	6a 00                	push   0x0
c0024086:	6a 34                	push   0x34
c0024088:	55                   	push   ebp
c0024089:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002408c:	83 c4 20             	add    esp,0x20
c002408f:	85 c0                	test   eax,eax
c0024091:	0f 85 79 06 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024097:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c002409d:	0f 85 6d 06 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240a3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00240a6:	85 c0                	test   eax,eax
c00240a8:	0f 84 62 06 00 00    	je     c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240ae:	31 d2                	xor    edx,edx
c00240b0:	51                   	push   ecx
c00240b1:	52                   	push   edx
c00240b2:	50                   	push   eax
c00240b3:	55                   	push   ebp
c00240b4:	e8 73 64 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c00240b9:	83 c4 10             	add    esp,0x10
c00240bc:	85 c0                	test   eax,eax
c00240be:	0f 85 4c 06 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240c4:	83 ec 0c             	sub    esp,0xc
c00240c7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00240ca:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00240d2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240d6:	0f af c2             	imul   eax,edx
c00240d9:	50                   	push   eax
c00240da:	e8 db 22 ff ff       	call   c00163ba <malloc>
c00240df:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00240e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00240e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240ed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240f5:	0f af c2             	imul   eax,edx
c00240f8:	99                   	cdq    
c00240f9:	52                   	push   edx
c00240fa:	50                   	push   eax
c00240fb:	55                   	push   ebp
c00240fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240ff:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024102:	83 c4 20             	add    esp,0x20
c0024105:	85 c0                	test   eax,eax
c0024107:	0f 84 03 06 00 00    	je     c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002410d:	52                   	push   edx
c002410e:	31 d2                	xor    edx,edx
c0024110:	52                   	push   edx
c0024111:	50                   	push   eax
c0024112:	55                   	push   ebp
c0024113:	e8 14 64 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0024118:	83 c4 10             	add    esp,0x10
c002411b:	85 c0                	test   eax,eax
c002411d:	0f 85 ed 05 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024123:	83 ec 0c             	sub    esp,0xc
c0024126:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002412a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002412e:	31 f6                	xor    esi,esi
c0024130:	0f af c2             	imul   eax,edx
c0024133:	50                   	push   eax
c0024134:	e8 81 22 ff ff       	call   c00163ba <malloc>
c0024139:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002413c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024140:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024143:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024147:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002414b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002414f:	0f af c2             	imul   eax,edx
c0024152:	99                   	cdq    
c0024153:	52                   	push   edx
c0024154:	50                   	push   eax
c0024155:	55                   	push   ebp
c0024156:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024159:	83 c4 20             	add    esp,0x20
c002415c:	0f b7 de             	movzx  ebx,si
c002415f:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0024163:	0f 83 87 00 00 00    	jae    c00241f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0024169:	c1 e3 05             	shl    ebx,0x5
c002416c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024170:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0024173:	75 75                	jne    c00241ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0024175:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024178:	31 d2                	xor    edx,edx
c002417a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002417e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0024181:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024185:	50                   	push   eax
c0024186:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0024189:	52                   	push   edx
c002418a:	50                   	push   eax
c002418b:	55                   	push   ebp
c002418c:	e8 9b 63 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0024191:	83 c4 10             	add    esp,0x10
c0024194:	85 c0                	test   eax,eax
c0024196:	0f 85 74 05 00 00    	jne    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002419c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00241a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00241a6:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00241aa:	31 d2                	xor    edx,edx
c00241ac:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00241b0:	83 ec 0c             	sub    esp,0xc
c00241b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241b7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00241be:	50                   	push   eax
c00241bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241c7:	52                   	push   edx
c00241c8:	50                   	push   eax
c00241c9:	55                   	push   ebp
c00241ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241cd:	83 c4 1c             	add    esp,0x1c
c00241d0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00241d3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00241d6:	50                   	push   eax
c00241d7:	6a 00                	push   0x0
c00241d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241dd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00241e1:	50                   	push   eax
c00241e2:	e8 09 c3 fd ff       	call   c00004f0 <memset>
c00241e7:	83 c4 10             	add    esp,0x10
c00241ea:	46                   	inc    esi
c00241eb:	e9 6c ff ff ff       	jmp    c002415c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00241f0:	53                   	push   ebx
c00241f1:	31 db                	xor    ebx,ebx
c00241f3:	68 00 01 00 00       	push   0x100
c00241f8:	6a 00                	push   0x0
c00241fa:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00241fe:	50                   	push   eax
c00241ff:	e8 ec c2 fd ff       	call   c00004f0 <memset>
c0024204:	83 c4 0c             	add    esp,0xc
c0024207:	68 00 01 00 00       	push   0x100
c002420c:	6a 00                	push   0x0
c002420e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024215:	50                   	push   eax
c0024216:	e8 d5 c2 fd ff       	call   c00004f0 <memset>
c002421b:	83 c4 10             	add    esp,0x10
c002421e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024226:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002422e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024236:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002423e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024246:	0f b7 f3             	movzx  esi,bx
c0024249:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c002424d:	0f 83 2d 01 00 00    	jae    c0024380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024253:	6b f6 28             	imul   esi,esi,0x28
c0024256:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002425a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002425d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024261:	52                   	push   edx
c0024262:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024266:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c002426a:	8b 06                	mov    eax,DWORD PTR [esi]
c002426c:	6b d2 28             	imul   edx,edx,0x28
c002426f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024273:	31 d2                	xor    edx,edx
c0024275:	52                   	push   edx
c0024276:	50                   	push   eax
c0024277:	55                   	push   ebp
c0024278:	e8 af 62 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c002427d:	83 c4 0c             	add    esp,0xc
c0024280:	6a 20                	push   0x20
c0024282:	6a 00                	push   0x0
c0024284:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002428b:	51                   	push   ecx
c002428c:	e8 5f c2 fd ff       	call   c00004f0 <memset>
c0024291:	59                   	pop    ecx
c0024292:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024295:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024299:	52                   	push   edx
c002429a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00242a1:	51                   	push   ecx
c00242a2:	6a 00                	push   0x0
c00242a4:	6a 1f                	push   0x1f
c00242a6:	55                   	push   ebp
c00242a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242aa:	83 c4 1c             	add    esp,0x1c
c00242ad:	6a 09                	push   0x9
c00242af:	68 d5 2c 03 c0       	push   0xc0032cd5
c00242b4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242bb:	51                   	push   ecx
c00242bc:	e8 bf c0 fd ff       	call   c0000380 <memcmp>
c00242c1:	83 c4 10             	add    esp,0x10
c00242c4:	85 c0                	test   eax,eax
c00242c6:	75 21                	jne    c00242e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00242c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00242cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00242d0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00242d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00242db:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00242e2:	89 d0                	mov    eax,edx
c00242e4:	40                   	inc    eax
c00242e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00242e9:	50                   	push   eax
c00242ea:	6a 09                	push   0x9
c00242ec:	68 df 2c 03 c0       	push   0xc0032cdf
c00242f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00242f8:	50                   	push   eax
c00242f9:	e8 82 c0 fd ff       	call   c0000380 <memcmp>
c00242fe:	83 c4 10             	add    esp,0x10
c0024301:	85 c0                	test   eax,eax
c0024303:	75 21                	jne    c0024326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024309:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002430d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024311:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024315:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024318:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002431f:	89 d0                	mov    eax,edx
c0024321:	40                   	inc    eax
c0024322:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024326:	50                   	push   eax
c0024327:	50                   	push   eax
c0024328:	68 ab 2c 03 c0       	push   0xc0032cab
c002432d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024334:	50                   	push   eax
c0024335:	e8 16 c4 fd ff       	call   c0000750 <strcmp>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	85 c0                	test   eax,eax
c002433f:	75 0f                	jne    c0024350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024341:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024344:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002434c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024350:	50                   	push   eax
c0024351:	50                   	push   eax
c0024352:	68 b3 2c 03 c0       	push   0xc0032cb3
c0024357:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002435e:	50                   	push   eax
c002435f:	e8 ec c3 fd ff       	call   c0000750 <strcmp>
c0024364:	83 c4 10             	add    esp,0x10
c0024367:	85 c0                	test   eax,eax
c0024369:	75 0f                	jne    c002437a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c002436b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002436e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024376:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002437a:	43                   	inc    ebx
c002437b:	e9 c6 fe ff ff       	jmp    c0024246 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0024380:	31 d2                	xor    edx,edx
c0024382:	50                   	push   eax
c0024383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024387:	52                   	push   edx
c0024388:	50                   	push   eax
c0024389:	55                   	push   ebp
c002438a:	e8 9d 61 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c002438f:	58                   	pop    eax
c0024390:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024394:	e8 21 20 ff ff       	call   c00163ba <malloc>
c0024399:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002439c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00243a0:	31 d2                	xor    edx,edx
c00243a2:	58                   	pop    eax
c00243a3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00243a7:	53                   	push   ebx
c00243a8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00243ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243b0:	52                   	push   edx
c00243b1:	50                   	push   eax
c00243b2:	55                   	push   ebp
c00243b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243b6:	83 c4 14             	add    esp,0x14
c00243b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00243bd:	e8 f8 1f ff ff       	call   c00163ba <malloc>
c00243c2:	31 d2                	xor    edx,edx
c00243c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00243c8:	83 c4 0c             	add    esp,0xc
c00243cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00243cf:	52                   	push   edx
c00243d0:	50                   	push   eax
c00243d1:	55                   	push   ebp
c00243d2:	e8 55 61 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c00243d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243da:	31 d2                	xor    edx,edx
c00243dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00243e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00243e7:	52                   	push   edx
c00243e8:	50                   	push   eax
c00243e9:	55                   	push   ebp
c00243ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243ed:	83 c4 20             	add    esp,0x20
c00243f0:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00243f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00243fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024401:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024405:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0024409:	0f 84 05 03 00 00    	je     c0024714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c002440f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0024416:	31 d2                	xor    edx,edx
c0024418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002441c:	c1 e8 03             	shr    eax,0x3
c002441f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024423:	51                   	push   ecx
c0024424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024428:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002442c:	52                   	push   edx
c002442d:	50                   	push   eax
c002442e:	55                   	push   ebp
c002442f:	e8 f8 60 ff ff       	call   c001a52c <File::seek(unsigned long long)>
c0024434:	5b                   	pop    ebx
c0024435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024439:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024440:	e8 75 1f ff ff       	call   c00163ba <malloc>
c0024445:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024448:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002444c:	31 d2                	xor    edx,edx
c002444e:	5e                   	pop    esi
c002444f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024453:	50                   	push   eax
c0024454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024458:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002445c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024463:	52                   	push   edx
c0024464:	50                   	push   eax
c0024465:	55                   	push   ebp
c0024466:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024469:	83 c4 20             	add    esp,0x20
c002446c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024474:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024478:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c002447c:	0f 8d 76 02 00 00    	jge    c00246f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0024482:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0024486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002448a:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c002448f:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0024492:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002449a:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c002449e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244a2:	c1 e8 08             	shr    eax,0x8
c00244a5:	89 c6                	mov    esi,eax
c00244a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00244ab:	c1 e6 04             	shl    esi,0x4
c00244ae:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00244b2:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00244b5:	85 db                	test   ebx,ebx
c00244b7:	0f 85 b3 00 00 00    	jne    c0024570 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244bd:	83 ec 0c             	sub    esp,0xc
c00244c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244c4:	03 06                	add    eax,DWORD PTR [esi]
c00244c6:	50                   	push   eax
c00244c7:	e8 40 f8 ff ff       	call   c0023d0c <Thr::getAddressOfKernelSymbol(char const*)>
c00244cc:	83 c4 10             	add    esp,0x10
c00244cf:	89 c3                	mov    ebx,eax
c00244d1:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00244d6:	85 c0                	test   eax,eax
c00244d8:	0f 85 92 00 00 00    	jne    c0024570 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244de:	83 ec 0c             	sub    esp,0xc
c00244e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244e5:	03 06                	add    eax,DWORD PTR [esi]
c00244e7:	50                   	push   eax
c00244e8:	e8 63 bf ff ff       	call   c0020450 <KeResolveCompatibilitySymbol(char*)>
c00244ed:	83 c4 10             	add    esp,0x10
c00244f0:	89 c3                	mov    ebx,eax
c00244f2:	85 c0                	test   eax,eax
c00244f4:	75 7a                	jne    c0024570 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244f6:	51                   	push   ecx
c00244f7:	51                   	push   ecx
c00244f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244fc:	03 06                	add    eax,DWORD PTR [esi]
c00244fe:	50                   	push   eax
c00244ff:	68 e9 2c 03 c0       	push   0xc0032ce9
c0024504:	e8 40 4d ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0024509:	58                   	pop    eax
c002450a:	5a                   	pop    edx
c002450b:	68 03 2d 03 c0       	push   0xc0032d03
c0024510:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024517:	50                   	push   eax
c0024518:	e8 23 c1 fd ff       	call   c0000640 <strcpy>
c002451d:	59                   	pop    ecx
c002451e:	58                   	pop    eax
c002451f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024523:	03 06                	add    eax,DWORD PTR [esi]
c0024525:	50                   	push   eax
c0024526:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002452d:	50                   	push   eax
c002452e:	e8 0d c3 fd ff       	call   c0000840 <strcat>
c0024533:	58                   	pop    eax
c0024534:	5a                   	pop    edx
c0024535:	68 9d 2d 03 c0       	push   0xc0032d9d
c002453a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024541:	50                   	push   eax
c0024542:	e8 f9 c2 fd ff       	call   c0000840 <strcat>
c0024547:	83 c4 10             	add    esp,0x10
c002454a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002454f:	0f 84 5d 01 00 00    	je     c00246b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024555:	83 ec 0c             	sub    esp,0xc
c0024558:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002455f:	50                   	push   eax
c0024560:	e8 fd bc ff ff       	call   c0020262 <KePanic(char const*)>
c0024565:	83 c4 10             	add    esp,0x10
c0024568:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002456c:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024570:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0024575:	83 f8 01             	cmp    eax,0x1
c0024578:	0f 85 8f 00 00 00    	jne    c002460d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c002457e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0024585:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024589:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c002458d:	01 ce                	add    esi,ecx
c002458f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024597:	0f 94 c0             	sete   al
c002459a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00245a2:	0f 94 c2             	sete   dl
c00245a5:	09 c2                	or     edx,eax
c00245a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00245a9:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00245ae:	0f b6 d2             	movzx  edx,dl
c00245b1:	74 41                	je     c00245f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00245b3:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00245b6:	85 d2                	test   edx,edx
c00245b8:	75 15                	jne    c00245cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00245ba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00245be:	66 83 f8 0c          	cmp    ax,0xc
c00245c2:	76 05                	jbe    c00245c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00245c4:	b8 0c 00 00 00       	mov    eax,0xc
c00245c9:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00245cd:	76 37                	jbe    c0024606 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245cf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00245d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00245d8:	0f 84 d4 00 00 00    	je     c00246b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00245de:	83 ec 0c             	sub    esp,0xc
c00245e1:	68 1a 2d 03 c0       	push   0xc0032d1a
c00245e6:	e8 77 bc ff ff       	call   c0020262 <KePanic(char const*)>
c00245eb:	83 c4 10             	add    esp,0x10
c00245ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00245f2:	eb 12                	jmp    c0024606 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245f4:	01 c1                	add    ecx,eax
c00245f6:	85 d2                	test   edx,edx
c00245f8:	75 0c                	jne    c0024606 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00245fa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00245fe:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024602:	77 02                	ja     c0024606 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024604:	01 d9                	add    ecx,ebx
c0024606:	89 0e                	mov    DWORD PTR [esi],ecx
c0024608:	e9 e2 00 00 00       	jmp    c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c002460d:	83 f8 02             	cmp    eax,0x2
c0024610:	75 77                	jne    c0024689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024612:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024619:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c002461d:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024621:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024629:	74 21                	je     c002464c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c002462b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024633:	74 17                	je     c002464c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024635:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024639:	b8 0a 00 00 00       	mov    eax,0xa
c002463e:	83 fa 0e             	cmp    edx,0xe
c0024641:	77 03                	ja     c0024646 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024643:	8d 42 fc             	lea    eax,[edx-0x4]
c0024646:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002464a:	76 17                	jbe    c0024663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c002464c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024651:	74 5f                	je     c00246b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024653:	83 ec 0c             	sub    esp,0xc
c0024656:	68 36 2d 03 c0       	push   0xc0032d36
c002465b:	e8 02 bc ff ff       	call   c0020262 <KePanic(char const*)>
c0024660:	83 c4 10             	add    esp,0x10
c0024663:	8b 06                	mov    eax,DWORD PTR [esi]
c0024665:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c002466a:	74 13                	je     c002467f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c002466c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024670:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0024677:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c002467b:	01 d0                	add    eax,edx
c002467d:	eb 04                	jmp    c0024683 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c002467f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0024683:	01 c3                	add    ebx,eax
c0024685:	89 1e                	mov    DWORD PTR [esi],ebx
c0024687:	eb 66                	jmp    c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024689:	52                   	push   edx
c002468a:	52                   	push   edx
c002468b:	50                   	push   eax
c002468c:	68 52 2d 03 c0       	push   0xc0032d52
c0024691:	e8 b3 4b ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0024696:	83 c4 10             	add    esp,0x10
c0024699:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002469e:	74 12                	je     c00246b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00246a0:	83 ec 0c             	sub    esp,0xc
c00246a3:	68 5d 2d 03 c0       	push   0xc0032d5d
c00246a8:	e8 b5 bb ff ff       	call   c0020262 <KePanic(char const*)>
c00246ad:	83 c4 10             	add    esp,0x10
c00246b0:	eb 3d                	jmp    c00246ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00246b2:	83 ec 0c             	sub    esp,0xc
c00246b5:	55                   	push   ebp
c00246b6:	e8 11 5e ff ff       	call   c001a4cc <File::close()>
c00246bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00246be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00246c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246c4:	59                   	pop    ecx
c00246c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246c9:	e8 fc 1c ff ff       	call   c00163ca <free>
c00246ce:	5b                   	pop    ebx
c00246cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00246d3:	e8 f2 1c ff ff       	call   c00163ca <free>
c00246d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246db:	e8 ea 1c ff ff       	call   c00163ca <free>
c00246e0:	5e                   	pop    esi
c00246e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00246e5:	e8 e0 1c ff ff       	call   c00163ca <free>
c00246ea:	83 c4 10             	add    esp,0x10
c00246ed:	eb 21                	jmp    c0024710 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00246ef:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00246f3:	e9 7c fd ff ff       	jmp    c0024474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00246f8:	83 ec 0c             	sub    esp,0xc
c00246fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246ff:	e8 c6 1c ff ff       	call   c00163ca <free>
c0024704:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	e9 f1 fc ff ff       	jmp    c0024401 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024710:	31 c0                	xor    eax,eax
c0024712:	eb 33                	jmp    c0024747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024714:	83 ec 0c             	sub    esp,0xc
c0024717:	55                   	push   ebp
c0024718:	e8 af 5d ff ff       	call   c001a4cc <File::close()>
c002471d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024720:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024726:	58                   	pop    eax
c0024727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002472b:	e8 9a 1c ff ff       	call   c00163ca <free>
c0024730:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024733:	e8 92 1c ff ff       	call   c00163ca <free>
c0024738:	5a                   	pop    edx
c0024739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002473d:	e8 88 1c ff ff       	call   c00163ca <free>
c0024742:	83 c4 10             	add    esp,0x10
c0024745:	b0 01                	mov    al,0x1
c0024747:	81 c4 5c 03 00 00    	add    esp,0x35c
c002474d:	5b                   	pop    ebx
c002474e:	5e                   	pop    esi
c002474f:	5f                   	pop    edi
c0024750:	5d                   	pop    ebp
c0024751:	c3                   	ret    

c0024752 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024752:	56                   	push   esi
c0024753:	31 d2                	xor    edx,edx
c0024755:	53                   	push   ebx
c0024756:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c002475c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024760:	39 d3                	cmp    ebx,edx
c0024762:	7e 1b                	jle    c002477f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024764:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c002476b:	39 c8                	cmp    eax,ecx
c002476d:	77 0d                	ja     c002477c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c002476f:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c0024776:	01 c6                	add    esi,eax
c0024778:	39 ce                	cmp    esi,ecx
c002477a:	77 05                	ja     c0024781 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c002477c:	42                   	inc    edx
c002477d:	eb e1                	jmp    c0024760 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c002477f:	31 c0                	xor    eax,eax
c0024781:	5b                   	pop    ebx
c0024782:	5e                   	pop    esi
c0024783:	c3                   	ret    

c0024784 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024784:	53                   	push   ebx
c0024785:	31 c0                	xor    eax,eax
c0024787:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002478b:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024791:	39 c3                	cmp    ebx,eax
c0024793:	7e 22                	jle    c00247b7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024795:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c002479c:	39 ca                	cmp    edx,ecx
c002479e:	77 14                	ja     c00247b4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247a0:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00247a7:	39 ca                	cmp    edx,ecx
c00247a9:	76 09                	jbe    c00247b4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247ab:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00247b2:	eb 05                	jmp    c00247b9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00247b4:	40                   	inc    eax
c00247b5:	eb da                	jmp    c0024791 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00247b7:	31 c0                	xor    eax,eax
c00247b9:	5b                   	pop    ebx
c00247ba:	c3                   	ret    

c00247bb <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00247bb:	53                   	push   ebx
c00247bc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00247c0:	53                   	push   ebx
c00247c1:	e8 8c ff ff ff       	call   c0024752 <Thr::getDriverBaseFromAddress(unsigned long)>
c00247c6:	5a                   	pop    edx
c00247c7:	31 d2                	xor    edx,edx
c00247c9:	85 c0                	test   eax,eax
c00247cb:	74 04                	je     c00247d1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00247cd:	89 da                	mov    edx,ebx
c00247cf:	29 c2                	sub    edx,eax
c00247d1:	89 d0                	mov    eax,edx
c00247d3:	5b                   	pop    ebx
c00247d4:	c3                   	ret    

c00247d5 <Thr::loadDLL(char const*, bool)>:
c00247d5:	55                   	push   ebp
c00247d6:	57                   	push   edi
c00247d7:	56                   	push   esi
c00247d8:	53                   	push   ebx
c00247d9:	81 ec 34 01 00 00    	sub    esp,0x134
c00247df:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00247e6:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00247ed:	56                   	push   esi
c00247ee:	68 75 2d 03 c0       	push   0xc0032d75
c00247f3:	e8 51 4a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00247f8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00247ff:	e8 b6 1b ff ff       	call   c00163ba <malloc>
c0024804:	83 c4 0c             	add    esp,0xc
c0024807:	89 c3                	mov    ebx,eax
c0024809:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002480f:	56                   	push   esi
c0024810:	50                   	push   eax
c0024811:	e8 3a 5c ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0024816:	83 c4 10             	add    esp,0x10
c0024819:	85 db                	test   ebx,ebx
c002481b:	75 3c                	jne    c0024859 <Thr::loadDLL(char const*, bool)+0x84>
c002481d:	89 f8                	mov    eax,edi
c002481f:	84 c0                	test   al,al
c0024821:	0f 84 f3 01 00 00    	je     c0024a1a <Thr::loadDLL(char const*, bool)+0x245>
c0024827:	55                   	push   ebp
c0024828:	55                   	push   ebp
c0024829:	68 86 2d 03 c0       	push   0xc0032d86
c002482e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024832:	55                   	push   ebp
c0024833:	e8 08 be fd ff       	call   c0000640 <strcpy>
c0024838:	58                   	pop    eax
c0024839:	5a                   	pop    edx
c002483a:	56                   	push   esi
c002483b:	55                   	push   ebp
c002483c:	e8 ff bf fd ff       	call   c0000840 <strcat>
c0024841:	59                   	pop    ecx
c0024842:	58                   	pop    eax
c0024843:	68 9d 2d 03 c0       	push   0xc0032d9d
c0024848:	55                   	push   ebp
c0024849:	e8 f2 bf fd ff       	call   c0000840 <strcat>
c002484e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024851:	e8 0c ba ff ff       	call   c0020262 <KePanic(char const*)>
c0024856:	83 c4 10             	add    esp,0x10
c0024859:	51                   	push   ecx
c002485a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c002485e:	50                   	push   eax
c002485f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024863:	50                   	push   eax
c0024864:	53                   	push   ebx
c0024865:	e8 06 5f ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c002486a:	83 c4 10             	add    esp,0x10
c002486d:	89 c5                	mov    ebp,eax
c002486f:	85 db                	test   ebx,ebx
c0024871:	74 0c                	je     c002487f <Thr::loadDLL(char const*, bool)+0xaa>
c0024873:	83 ec 0c             	sub    esp,0xc
c0024876:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024878:	53                   	push   ebx
c0024879:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	83 ec 0c             	sub    esp,0xc
c0024882:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024887:	50                   	push   eax
c0024888:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002488c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024890:	55                   	push   ebp
c0024891:	68 9f 2d 03 c0       	push   0xc0032d9f
c0024896:	e8 ae 49 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002489b:	83 c4 20             	add    esp,0x20
c002489e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00248a3:	75 0a                	jne    c00248af <Thr::loadDLL(char const*, bool)+0xda>
c00248a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248a9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00248ad:	75 3c                	jne    c00248eb <Thr::loadDLL(char const*, bool)+0x116>
c00248af:	89 f8                	mov    eax,edi
c00248b1:	84 c0                	test   al,al
c00248b3:	0f 84 49 01 00 00    	je     c0024a02 <Thr::loadDLL(char const*, bool)+0x22d>
c00248b9:	51                   	push   ecx
c00248ba:	51                   	push   ecx
c00248bb:	68 c0 2d 03 c0       	push   0xc0032dc0
c00248c0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00248c4:	53                   	push   ebx
c00248c5:	e8 76 bd fd ff       	call   c0000640 <strcpy>
c00248ca:	5d                   	pop    ebp
c00248cb:	58                   	pop    eax
c00248cc:	56                   	push   esi
c00248cd:	53                   	push   ebx
c00248ce:	e8 6d bf fd ff       	call   c0000840 <strcat>
c00248d3:	58                   	pop    eax
c00248d4:	5a                   	pop    edx
c00248d5:	68 9d 2d 03 c0       	push   0xc0032d9d
c00248da:	53                   	push   ebx
c00248db:	e8 60 bf fd ff       	call   c0000840 <strcat>
c00248e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248e3:	e8 7a b9 ff ff       	call   c0020262 <KePanic(char const*)>
c00248e8:	83 c4 10             	add    esp,0x10
c00248eb:	52                   	push   edx
c00248ec:	6a 03                	push   0x3
c00248ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00248f6:	05 ff 0f 00 00       	add    eax,0xfff
c00248fb:	83 d2 00             	adc    edx,0x0
c00248fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024902:	50                   	push   eax
c0024903:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024909:	e8 1a 3e ff ff       	call   c0018728 <VAS::allocatePages(int, int)>
c002490e:	59                   	pop    ecx
c002490f:	89 c3                	mov    ebx,eax
c0024911:	5d                   	pop    ebp
c0024912:	50                   	push   eax
c0024913:	68 e2 11 03 c0       	push   0xc00311e2
c0024918:	e8 2c 49 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002491d:	89 34 24             	mov    DWORD PTR [esp],esi
c0024920:	e8 4b bc fd ff       	call   c0000570 <strlen>
c0024925:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c002492b:	40                   	inc    eax
c002492c:	89 04 24             	mov    DWORD PTR [esp],eax
c002492f:	e8 86 1a ff ff       	call   c00163ba <malloc>
c0024934:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c002493b:	58                   	pop    eax
c002493c:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024941:	5a                   	pop    edx
c0024942:	56                   	push   esi
c0024943:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c002494a:	e8 f1 bc fd ff       	call   c0000640 <strcpy>
c002494f:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024954:	8d 50 01             	lea    edx,[eax+0x1]
c0024957:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c002495e:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024964:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024968:	83 c4 0c             	add    esp,0xc
c002496b:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024972:	6a 01                	push   0x1
c0024974:	53                   	push   ebx
c0024975:	56                   	push   esi
c0024976:	e8 9e f6 ff ff       	call   c0024019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c002497b:	83 c4 10             	add    esp,0x10
c002497e:	0f b6 c0             	movzx  eax,al
c0024981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024985:	85 c0                	test   eax,eax
c0024987:	0f 85 89 00 00 00    	jne    c0024a16 <Thr::loadDLL(char const*, bool)+0x241>
c002498d:	89 f8                	mov    eax,edi
c002498f:	84 c0                	test   al,al
c0024991:	74 73                	je     c0024a06 <Thr::loadDLL(char const*, bool)+0x231>
c0024993:	83 ec 0c             	sub    esp,0xc
c0024996:	68 d9 2d 03 c0       	push   0xc0032dd9
c002499b:	e8 c2 b8 ff ff       	call   c0020262 <KePanic(char const*)>
c00249a0:	83 c4 10             	add    esp,0x10
c00249a3:	eb 61                	jmp    c0024a06 <Thr::loadDLL(char const*, bool)+0x231>
c00249a5:	50                   	push   eax
c00249a6:	50                   	push   eax
c00249a7:	89 e8                	mov    eax,ebp
c00249a9:	c1 e0 0c             	shl    eax,0xc
c00249ac:	01 d8                	add    eax,ebx
c00249ae:	50                   	push   eax
c00249af:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00249b5:	e8 56 38 ff ff       	call   c0018210 <VAS::getPageTableEntry(unsigned long)>
c00249ba:	83 c4 10             	add    esp,0x10
c00249bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00249bf:	a8 60                	test   al,0x60
c00249c1:	75 11                	jne    c00249d4 <Thr::loadDLL(char const*, bool)+0x1ff>
c00249c3:	83 ec 0c             	sub    esp,0xc
c00249c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00249cb:	50                   	push   eax
c00249cc:	e8 89 1c ff ff       	call   c001665a <Phys::freePage(unsigned long)>
c00249d1:	83 c4 10             	add    esp,0x10
c00249d4:	45                   	inc    ebp
c00249d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249dd:	05 ff 0f 00 00       	add    eax,0xfff
c00249e2:	bf 00 00 00 00       	mov    edi,0x0
c00249e7:	83 d2 00             	adc    edx,0x0
c00249ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00249ee:	c1 ea 0c             	shr    edx,0xc
c00249f1:	39 c5                	cmp    ebp,eax
c00249f3:	89 d1                	mov    ecx,edx
c00249f5:	89 f8                	mov    eax,edi
c00249f7:	19 c8                	sbb    eax,ecx
c00249f9:	72 aa                	jb     c00249a5 <Thr::loadDLL(char const*, bool)+0x1d0>
c00249fb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024a00:	75 18                	jne    c0024a1a <Thr::loadDLL(char const*, bool)+0x245>
c0024a02:	31 db                	xor    ebx,ebx
c0024a04:	eb 14                	jmp    c0024a1a <Thr::loadDLL(char const*, bool)+0x245>
c0024a06:	83 ec 0c             	sub    esp,0xc
c0024a09:	68 f8 2d 03 c0       	push   0xc0032df8
c0024a0e:	e8 4f b8 ff ff       	call   c0020262 <KePanic(char const*)>
c0024a13:	83 c4 10             	add    esp,0x10
c0024a16:	31 ed                	xor    ebp,ebp
c0024a18:	eb bb                	jmp    c00249d5 <Thr::loadDLL(char const*, bool)+0x200>
c0024a1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024a20:	89 d8                	mov    eax,ebx
c0024a22:	5b                   	pop    ebx
c0024a23:	5e                   	pop    esi
c0024a24:	5f                   	pop    edi
c0024a25:	5d                   	pop    ebp
c0024a26:	c3                   	ret    

c0024a27 <Thr::executeDLL(unsigned long, void*)>:
c0024a27:	56                   	push   esi
c0024a28:	53                   	push   ebx
c0024a29:	52                   	push   edx
c0024a2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024a32:	85 db                	test   ebx,ebx
c0024a34:	75 10                	jne    c0024a46 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024a36:	83 ec 0c             	sub    esp,0xc
c0024a39:	68 14 2e 03 c0       	push   0xc0032e14
c0024a3e:	e8 1f b8 ff ff       	call   c0020262 <KePanic(char const*)>
c0024a43:	83 c4 10             	add    esp,0x10
c0024a46:	50                   	push   eax
c0024a47:	50                   	push   eax
c0024a48:	53                   	push   ebx
c0024a49:	68 3e 2e 03 c0       	push   0xc0032e3e
c0024a4e:	e8 f6 47 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0024a53:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024a57:	89 d8                	mov    eax,ebx
c0024a59:	83 c4 14             	add    esp,0x14
c0024a5c:	5b                   	pop    ebx
c0024a5d:	5e                   	pop    esi
c0024a5e:	ff e0                	jmp    eax

c0024a60 <userModeEntryPoint(void*)>:
c0024a60:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024a65:	83 e8 01             	sub    eax,0x1
c0024a68:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024a6d:	75 01                	jne    c0024a70 <userModeEntryPoint(void*)+0x10>
c0024a6f:	fb                   	sti    
c0024a70:	fb                   	sti    
c0024a71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024a76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024a79:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024a7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a83:	e9 b7 b7 fd ff       	jmp    c000023f <goToUsermode>

c0024a88 <changeTSS>:
c0024a88:	83 ec 14             	sub    esp,0x14
c0024a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024a90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024a93:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024a98:	c1 e2 15             	shl    edx,0x15
c0024a9b:	29 d0                	sub    eax,edx
c0024a9d:	50                   	push   eax
c0024a9e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024aa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024aa9:	05 7c 11 00 00       	add    eax,0x117c
c0024aae:	50                   	push   eax
c0024aaf:	e8 a4 2d ff ff       	call   c0017858 <TSS::setESP(unsigned long)>
c0024ab4:	83 c4 1c             	add    esp,0x1c
c0024ab7:	c3                   	ret    

c0024ab8 <switchToThread(ThreadControlBlock*)>:
c0024ab8:	57                   	push   edi
c0024ab9:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024abf:	56                   	push   esi
c0024ac0:	85 c9                	test   ecx,ecx
c0024ac2:	53                   	push   ebx
c0024ac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ac7:	0f 85 8b 00 00 00    	jne    c0024b58 <switchToThread(ThreadControlBlock*)+0xa0>
c0024acd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024ad1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024ad7:	74 7b                	je     c0024b54 <switchToThread(ThreadControlBlock*)+0x9c>
c0024ad9:	b8 00 04 00 00       	mov    eax,0x400
c0024ade:	29 d0                	sub    eax,edx
c0024ae0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024ae3:	d1 f8                	sar    eax,1
c0024ae5:	01 d0                	add    eax,edx
c0024ae7:	90                   	nop
c0024ae8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024aeb:	e8 76 25 00 00       	call   c0027066 <HalQueryPerformanceCounter()>
c0024af0:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024af5:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024afb:	89 c6                	mov    esi,eax
c0024afd:	89 d7                	mov    edi,edx
c0024aff:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024b05:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024b0a:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024b10:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024b16:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024b1c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024b22:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024b28:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024b2b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024b2e:	01 c6                	add    esi,eax
c0024b30:	11 d7                	adc    edi,edx
c0024b32:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024b35:	83 ec 0c             	sub    esp,0xc
c0024b38:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024b3b:	53                   	push   ebx
c0024b3c:	e8 36 b7 fd ff       	call   c0000277 <switchToThreadASM>
c0024b41:	0f 20 c0             	mov    eax,cr0
c0024b44:	83 c8 08             	or     eax,0x8
c0024b47:	0f 22 c0             	mov    cr0,eax
c0024b4a:	83 c4 10             	add    esp,0x10
c0024b4d:	5b                   	pop    ebx
c0024b4e:	5e                   	pop    esi
c0024b4f:	5f                   	pop    edi
c0024b50:	c3                   	ret    
c0024b51:	8d 76 00             	lea    esi,[esi+0x0]
c0024b54:	31 c0                	xor    eax,eax
c0024b56:	eb 90                	jmp    c0024ae8 <switchToThread(ThreadControlBlock*)+0x30>
c0024b58:	5b                   	pop    ebx
c0024b59:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024b63:	5e                   	pop    esi
c0024b64:	5f                   	pop    edi
c0024b65:	c3                   	ret    
c0024b66:	66 90                	xchg   ax,ax

c0024b68 <Process::addArgs(char**)>:
c0024b68:	57                   	push   edi
c0024b69:	56                   	push   esi
c0024b6a:	53                   	push   ebx
c0024b6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024b73:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024b7d:	85 ff                	test   edi,edi
c0024b7f:	74 4f                	je     c0024bd0 <Process::addArgs(char**)+0x68>
c0024b81:	8b 07                	mov    eax,DWORD PTR [edi]
c0024b83:	85 c0                	test   eax,eax
c0024b85:	74 49                	je     c0024bd0 <Process::addArgs(char**)+0x68>
c0024b87:	31 db                	xor    ebx,ebx
c0024b89:	8d 76 00             	lea    esi,[esi+0x0]
c0024b8c:	83 ec 0c             	sub    esp,0xc
c0024b8f:	50                   	push   eax
c0024b90:	e8 db b9 fd ff       	call   c0000570 <strlen>
c0024b95:	83 c0 01             	add    eax,0x1
c0024b98:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b9b:	e8 1a 18 ff ff       	call   c00163ba <malloc>
c0024ba0:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024ba7:	5a                   	pop    edx
c0024ba8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024bab:	59                   	pop    ecx
c0024bac:	83 c3 01             	add    ebx,0x1
c0024baf:	52                   	push   edx
c0024bb0:	50                   	push   eax
c0024bb1:	e8 8a ba fd ff       	call   c0000640 <strcpy>
c0024bb6:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024bbc:	83 c4 10             	add    esp,0x10
c0024bbf:	83 c1 01             	add    ecx,0x1
c0024bc2:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024bc8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024bcb:	85 c0                	test   eax,eax
c0024bcd:	75 bd                	jne    c0024b8c <Process::addArgs(char**)+0x24>
c0024bcf:	90                   	nop
c0024bd0:	5b                   	pop    ebx
c0024bd1:	5e                   	pop    esi
c0024bd2:	5f                   	pop    edi
c0024bd3:	c3                   	ret    

c0024bd4 <Process::Process(char const*, Process*, char**)>:
c0024bd4:	56                   	push   esi
c0024bd5:	53                   	push   ebx
c0024bd6:	83 ec 14             	sub    esp,0x14
c0024bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bdd:	05 0c 02 00 00       	add    eax,0x20c
c0024be2:	bb 07 00 00 00       	mov    ebx,0x7
c0024be7:	89 c6                	mov    esi,eax
c0024be9:	8d 76 00             	lea    esi,[esi+0x0]
c0024bec:	85 db                	test   ebx,ebx
c0024bee:	78 14                	js     c0024c04 <Process::Process(char const*, Process*, char**)+0x30>
c0024bf0:	83 ec 0c             	sub    esp,0xc
c0024bf3:	56                   	push   esi
c0024bf4:	e8 6f a3 00 00       	call   c002ef68 <ThreadControlBlock::ThreadControlBlock()>
c0024bf9:	83 c4 10             	add    esp,0x10
c0024bfc:	83 c6 5f             	add    esi,0x5f
c0024bff:	83 eb 01             	sub    ebx,0x1
c0024c02:	eb e8                	jmp    c0024bec <Process::Process(char const*, Process*, char**)+0x18>
c0024c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024c1a:	83 ec 0c             	sub    esp,0xc
c0024c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c21:	e8 16 b4 ff ff       	call   c002003c <KeNewProcessEnv(Process*)>
c0024c26:	83 c4 10             	add    esp,0x10
c0024c29:	89 c2                	mov    edx,eax
c0024c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c2f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c39:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024c42:	a1 60 44 03 c0       	mov    eax,ds:0xc0034460
c0024c47:	8d 50 01             	lea    edx,[eax+0x1]
c0024c4a:	89 15 60 44 03 c0    	mov    DWORD PTR ds:0xc0034460,edx
c0024c50:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024c54:	89 02                	mov    DWORD PTR [edx],eax
c0024c56:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024c5e:	83 ec 0c             	sub    esp,0xc
c0024c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c65:	e8 50 17 ff ff       	call   c00163ba <malloc>
c0024c6a:	83 c4 10             	add    esp,0x10
c0024c6d:	89 c3                	mov    ebx,eax
c0024c6f:	83 ec 08             	sub    esp,0x8
c0024c72:	6a 00                	push   0x0
c0024c74:	53                   	push   ebx
c0024c75:	e8 f2 3c ff ff       	call   c001896c <VAS::VAS(bool)>
c0024c7a:	83 c4 10             	add    esp,0x10
c0024c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c81:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c8b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024c9d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ca3:	e8 eb bd ff ff       	call   c0020a93 <KeInitSignals()>
c0024ca8:	89 c2                	mov    edx,eax
c0024caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cae:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024cbe:	85 c0                	test   eax,eax
c0024cc0:	74 42                	je     c0024d04 <Process::Process(char const*, Process*, char**)+0x130>
c0024cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cc6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ccc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cd6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ce0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ce6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cf0:	05 0c 01 00 00       	add    eax,0x10c
c0024cf5:	83 ec 08             	sub    esp,0x8
c0024cf8:	52                   	push   edx
c0024cf9:	50                   	push   eax
c0024cfa:	e8 41 b9 fd ff       	call   c0000640 <strcpy>
c0024cff:	83 c4 10             	add    esp,0x10
c0024d02:	eb 64                	jmp    c0024d68 <Process::Process(char const*, Process*, char**)+0x194>
c0024d04:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024d0c:	83 ec 0c             	sub    esp,0xc
c0024d0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024d13:	e8 a2 16 ff ff       	call   c00163ba <malloc>
c0024d18:	83 c4 10             	add    esp,0x10
c0024d1b:	89 c3                	mov    ebx,eax
c0024d1d:	83 ec 08             	sub    esp,0x8
c0024d20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d24:	53                   	push   ebx
c0024d25:	e8 40 28 ff ff       	call   c001756a <VgaText::VgaText(char const*)>
c0024d2a:	83 c4 10             	add    esp,0x10
c0024d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d31:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024d41:	83 ec 0c             	sub    esp,0xc
c0024d44:	50                   	push   eax
c0024d45:	e8 be 20 ff ff       	call   c0016e08 <addToTerminalCycle(VgaText*)>
c0024d4a:	83 c4 10             	add    esp,0x10
c0024d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d51:	05 0c 01 00 00       	add    eax,0x10c
c0024d56:	83 ec 08             	sub    esp,0x8
c0024d59:	68 5d 2e 03 c0       	push   0xc0032e5d
c0024d5e:	50                   	push   eax
c0024d5f:	e8 dc b8 fd ff       	call   c0000640 <strcpy>
c0024d64:	83 c4 10             	add    esp,0x10
c0024d67:	90                   	nop
c0024d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d6c:	83 c0 0c             	add    eax,0xc
c0024d6f:	83 ec 08             	sub    esp,0x8
c0024d72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d76:	50                   	push   eax
c0024d77:	e8 c4 b8 fd ff       	call   c0000640 <strcpy>
c0024d7c:	83 c4 10             	add    esp,0x10
c0024d7f:	83 ec 08             	sub    esp,0x8
c0024d82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024d86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d8a:	e8 d9 fd ff ff       	call   c0024b68 <Process::addArgs(char**)>
c0024d8f:	83 c4 10             	add    esp,0x10
c0024d92:	83 ec 08             	sub    esp,0x8
c0024d95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d9d:	e8 45 ed ff ff       	call   c0023ae7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024da2:	83 c4 10             	add    esp,0x10
c0024da5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024da9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024dad:	83 f0 01             	xor    eax,0x1
c0024db0:	88 c2                	mov    dl,al
c0024db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024db6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024dbc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024dc1:	83 ec 04             	sub    esp,0x4
c0024dc4:	50                   	push   eax
c0024dc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dc9:	68 b4 2e 03 c0       	push   0xc0032eb4
c0024dce:	e8 76 44 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0024dd3:	83 c4 10             	add    esp,0x10
c0024dd6:	90                   	nop
c0024dd7:	83 c4 14             	add    esp,0x14
c0024dda:	5b                   	pop    ebx
c0024ddb:	5e                   	pop    esi
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop
c0024dde:	66 90                	xchg   ax,ax

c0024de0 <Process::Process(bool, char const*, Process*, char**)>:
c0024de0:	56                   	push   esi
c0024de1:	53                   	push   ebx
c0024de2:	83 ec 24             	sub    esp,0x24
c0024de5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024de9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df1:	05 0c 02 00 00       	add    eax,0x20c
c0024df6:	bb 07 00 00 00       	mov    ebx,0x7
c0024dfb:	89 c6                	mov    esi,eax
c0024dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0024e00:	85 db                	test   ebx,ebx
c0024e02:	78 14                	js     c0024e18 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024e04:	83 ec 0c             	sub    esp,0xc
c0024e07:	56                   	push   esi
c0024e08:	e8 5b a1 00 00       	call   c002ef68 <ThreadControlBlock::ThreadControlBlock()>
c0024e0d:	83 c4 10             	add    esp,0x10
c0024e10:	83 c6 5f             	add    esi,0x5f
c0024e13:	83 eb 01             	sub    ebx,0x1
c0024e16:	eb e8                	jmp    c0024e00 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024e18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e1c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e27:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e2e:	83 ec 0c             	sub    esp,0xc
c0024e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e35:	e8 02 b2 ff ff       	call   c002003c <KeNewProcessEnv(Process*)>
c0024e3a:	83 c4 10             	add    esp,0x10
c0024e3d:	89 c2                	mov    edx,eax
c0024e3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e43:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e4d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e56:	a1 60 44 03 c0       	mov    eax,ds:0xc0034460
c0024e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0024e5e:	89 15 60 44 03 c0    	mov    DWORD PTR ds:0xc0034460,edx
c0024e64:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e68:	89 02                	mov    DWORD PTR [edx],eax
c0024e6a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024e72:	83 ec 0c             	sub    esp,0xc
c0024e75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024e79:	e8 3c 15 ff ff       	call   c00163ba <malloc>
c0024e7e:	83 c4 10             	add    esp,0x10
c0024e81:	89 c3                	mov    ebx,eax
c0024e83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024e88:	83 ec 08             	sub    esp,0x8
c0024e8b:	50                   	push   eax
c0024e8c:	53                   	push   ebx
c0024e8d:	e8 da 3a ff ff       	call   c001896c <VAS::VAS(bool)>
c0024e92:	83 c4 10             	add    esp,0x10
c0024e95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e99:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ea3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024eb5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ebb:	e8 d3 bb ff ff       	call   c0020a93 <KeInitSignals()>
c0024ec0:	89 c2                	mov    edx,eax
c0024ec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ec6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024ecc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ed0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ed6:	85 c0                	test   eax,eax
c0024ed8:	74 42                	je     c0024f1c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024eda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ede:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ee4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024ef4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ef8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024efe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f08:	05 0c 01 00 00       	add    eax,0x10c
c0024f0d:	83 ec 08             	sub    esp,0x8
c0024f10:	52                   	push   edx
c0024f11:	50                   	push   eax
c0024f12:	e8 29 b7 fd ff       	call   c0000640 <strcpy>
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	eb 64                	jmp    c0024f80 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024f1c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024f24:	83 ec 0c             	sub    esp,0xc
c0024f27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024f2b:	e8 8a 14 ff ff       	call   c00163ba <malloc>
c0024f30:	83 c4 10             	add    esp,0x10
c0024f33:	89 c3                	mov    ebx,eax
c0024f35:	83 ec 08             	sub    esp,0x8
c0024f38:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f3c:	53                   	push   ebx
c0024f3d:	e8 28 26 ff ff       	call   c001756a <VgaText::VgaText(char const*)>
c0024f42:	83 c4 10             	add    esp,0x10
c0024f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f49:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024f59:	83 ec 0c             	sub    esp,0xc
c0024f5c:	50                   	push   eax
c0024f5d:	e8 a6 1e ff ff       	call   c0016e08 <addToTerminalCycle(VgaText*)>
c0024f62:	83 c4 10             	add    esp,0x10
c0024f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f69:	05 0c 01 00 00       	add    eax,0x10c
c0024f6e:	83 ec 08             	sub    esp,0x8
c0024f71:	68 5d 2e 03 c0       	push   0xc0032e5d
c0024f76:	50                   	push   eax
c0024f77:	e8 c4 b6 fd ff       	call   c0000640 <strcpy>
c0024f7c:	83 c4 10             	add    esp,0x10
c0024f7f:	90                   	nop
c0024f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f84:	83 c0 0c             	add    eax,0xc
c0024f87:	83 ec 08             	sub    esp,0x8
c0024f8a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f8e:	50                   	push   eax
c0024f8f:	e8 ac b6 fd ff       	call   c0000640 <strcpy>
c0024f94:	83 c4 10             	add    esp,0x10
c0024f97:	83 ec 08             	sub    esp,0x8
c0024f9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024f9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fa2:	e8 c1 fb ff ff       	call   c0024b68 <Process::addArgs(char**)>
c0024fa7:	83 c4 10             	add    esp,0x10
c0024faa:	90                   	nop
c0024fab:	83 c4 24             	add    esp,0x24
c0024fae:	5b                   	pop    ebx
c0024faf:	5e                   	pop    esi
c0024fb0:	c3                   	ret    
c0024fb1:	8d 76 00             	lea    esi,[esi+0x0]

c0024fb4 <taskStartupFunction>:
c0024fb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fb9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024fbc:	c3                   	ret    
c0024fbd:	8d 76 00             	lea    esi,[esi+0x0]

c0024fc0 <KeDisablePreemption()>:
c0024fc0:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024fc5:	85 c0                	test   eax,eax
c0024fc7:	75 13                	jne    c0024fdc <KeDisablePreemption()+0x1c>
c0024fc9:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024fcf:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024fd6:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024fdc:	83 c0 01             	add    eax,0x1
c0024fdf:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024fe4:	c3                   	ret    
c0024fe5:	8d 76 00             	lea    esi,[esi+0x0]

c0024fe8 <KeRestorePreemption()>:
c0024fe8:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024fed:	83 e8 01             	sub    eax,0x1
c0024ff0:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024ff5:	75 0d                	jne    c0025004 <KeRestorePreemption()+0x1c>
c0024ff7:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0024ffc:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025001:	8d 76 00             	lea    esi,[esi+0x0]
c0025004:	c3                   	ret    
c0025005:	90                   	nop
c0025006:	66 90                	xchg   ax,ax

c0025008 <Process::createThread(void (*)(void*), void*, int)>:
c0025008:	57                   	push   edi
c0025009:	31 c9                	xor    ecx,ecx
c002500b:	56                   	push   esi
c002500c:	53                   	push   ebx
c002500d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025011:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0025018:	89 f2                	mov    edx,esi
c002501a:	66 90                	xchg   ax,ax
c002501c:	0f b7 c2             	movzx  eax,dx
c002501f:	80 e2 01             	and    dl,0x1
c0025022:	74 14                	je     c0025038 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025024:	d1 f8                	sar    eax,1
c0025026:	83 c1 01             	add    ecx,0x1
c0025029:	89 c2                	mov    edx,eax
c002502b:	83 f9 10             	cmp    ecx,0x10
c002502e:	75 ec                	jne    c002501c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025030:	31 db                	xor    ebx,ebx
c0025032:	89 d8                	mov    eax,ebx
c0025034:	5b                   	pop    ebx
c0025035:	5e                   	pop    esi
c0025036:	5f                   	pop    edi
c0025037:	c3                   	ret    
c0025038:	b8 01 00 00 00       	mov    eax,0x1
c002503d:	d3 e0                	shl    eax,cl
c002503f:	09 c6                	or     esi,eax
c0025041:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025044:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002504b:	01 c0                	add    eax,eax
c002504d:	01 c8                	add    eax,ecx
c002504f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025052:	01 d8                	add    eax,ebx
c0025054:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002505b:	75 0b                	jne    c0025068 <Process::createThread(void (*)(void*), void*, int)+0x60>
c002505d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0025067:	90                   	nop
c0025068:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c002506e:	83 ec 0c             	sub    esp,0xc
c0025071:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0025074:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025077:	01 c0                	add    eax,eax
c0025079:	01 c8                	add    eax,ecx
c002507b:	8d 3c 80             	lea    edi,[eax+eax*4]
c002507e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0025081:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0025087:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c002508d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025091:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0025097:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c002509d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00250a3:	89 ca                	mov    edx,ecx
c00250a5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00250ac:	f7 da                	neg    edx
c00250ae:	c1 e2 15             	shl    edx,0x15
c00250b1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00250b7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00250bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00250c1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00250cb:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00250d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00250d5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00250db:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00250e5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00250ef:	68 00 01 00 00       	push   0x100
c00250f4:	e8 c1 12 ff ff       	call   c00163ba <malloc>
c00250f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00250fc:	58                   	pop    eax
c00250fd:	5a                   	pop    edx
c00250fe:	53                   	push   ebx
c00250ff:	68 ec 01 04 c0       	push   0xc00401ec
c0025104:	e8 f7 9b 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025109:	83 c4 10             	add    esp,0x10
c002510c:	89 d8                	mov    eax,ebx
c002510e:	5b                   	pop    ebx
c002510f:	5e                   	pop    esi
c0025110:	5f                   	pop    edi
c0025111:	c3                   	ret    
c0025112:	66 90                	xchg   ax,ax

c0025114 <Process::createUserThread()>:
c0025114:	83 ec 0c             	sub    esp,0xc
c0025117:	68 80 00 00 00       	push   0x80
c002511c:	6a 00                	push   0x0
c002511e:	68 60 4a 02 c0       	push   0xc0024a60
c0025123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025127:	50                   	push   eax
c0025128:	e8 db fe ff ff       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c002512d:	83 c4 1c             	add    esp,0x1c
c0025130:	c3                   	ret    
c0025131:	8d 76 00             	lea    esi,[esi+0x0]

c0025134 <setupMultitasking(void (*)())>:
c0025134:	56                   	push   esi
c0025135:	53                   	push   ebx
c0025136:	83 ec 04             	sub    esp,0x4
c0025139:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002513d:	eb 11                	jmp    c0025150 <setupMultitasking(void (*)())+0x1c>
c002513f:	90                   	nop
c0025140:	83 ec 0c             	sub    esp,0xc
c0025143:	68 ec 01 04 c0       	push   0xc00401ec
c0025148:	e8 f7 9a 00 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002514d:	83 c4 10             	add    esp,0x10
c0025150:	83 ec 0c             	sub    esp,0xc
c0025153:	68 ec 01 04 c0       	push   0xc00401ec
c0025158:	e8 c3 9a 00 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002515d:	83 c4 10             	add    esp,0x10
c0025160:	84 c0                	test   al,al
c0025162:	74 dc                	je     c0025140 <setupMultitasking(void (*)())+0xc>
c0025164:	83 ec 0c             	sub    esp,0xc
c0025167:	68 24 07 00 00       	push   0x724
c002516c:	e8 49 12 ff ff       	call   c00163ba <malloc>
c0025171:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025178:	89 c3                	mov    ebx,eax
c002517a:	6a 00                	push   0x0
c002517c:	68 61 2e 03 c0       	push   0xc0032e61
c0025181:	6a 01                	push   0x1
c0025183:	50                   	push   eax
c0025184:	e8 57 fc ff ff       	call   c0024de0 <Process::Process(bool, char const*, Process*, char**)>
c0025189:	83 c4 14             	add    esp,0x14
c002518c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0025192:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c0025198:	50                   	push   eax
c0025199:	e8 bf 1e ff ff       	call   c001705d <setActiveTerminal(VgaText*)>
c002519e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00251a5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00251af:	83 c8 01             	or     eax,0x1
c00251b2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00251b9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00251bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00251c2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00251cc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00251d2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00251d8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00251e2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00251ec:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00251f6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00251fc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025206:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c002520c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0025216:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c002521d:	e8 98 11 ff ff       	call   c00163ba <malloc>
c0025222:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025228:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c002522e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025234:	5a                   	pop    edx
c0025235:	59                   	pop    ecx
c0025236:	68 5d 2e 03 c0       	push   0xc0032e5d
c002523b:	50                   	push   eax
c002523c:	e8 ff b3 fd ff       	call   c0000640 <strcpy>
c0025241:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025248:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c002524c:	83 c4 14             	add    esp,0x14
c002524f:	5b                   	pop    ebx
c0025250:	5e                   	pop    esi
c0025251:	e9 13 b0 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0025256:	66 90                	xchg   ax,ax

c0025258 <schedule()>:
c0025258:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c002525e:	85 d2                	test   edx,edx
c0025260:	74 0e                	je     c0025270 <schedule()+0x18>
c0025262:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c002526c:	c3                   	ret    
c002526d:	8d 76 00             	lea    esi,[esi+0x0]
c0025270:	53                   	push   ebx
c0025271:	83 ec 14             	sub    esp,0x14
c0025274:	68 ec 01 04 c0       	push   0xc00401ec
c0025279:	e8 a2 99 00 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	84 c0                	test   al,al
c0025283:	75 3f                	jne    c00252c4 <schedule()+0x6c>
c0025285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002528a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002528d:	83 fa 01             	cmp    edx,0x1
c0025290:	74 3a                	je     c00252cc <schedule()+0x74>
c0025292:	66 90                	xchg   ax,ax
c0025294:	83 ec 0c             	sub    esp,0xc
c0025297:	68 ec 01 04 c0       	push   0xc00401ec
c002529c:	e8 9b 99 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00252a1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00252a8:	89 c3                	mov    ebx,eax
c00252aa:	e8 95 99 00 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00252af:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00252b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252b9:	e8 fa f7 ff ff       	call   c0024ab8 <switchToThread(ThreadControlBlock*)>
c00252be:	83 c4 10             	add    esp,0x10
c00252c1:	8d 76 00             	lea    esi,[esi+0x0]
c00252c4:	83 c4 08             	add    esp,0x8
c00252c7:	5b                   	pop    ebx
c00252c8:	c3                   	ret    
c00252c9:	8d 76 00             	lea    esi,[esi+0x0]
c00252cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00252d3:	83 ec 08             	sub    esp,0x8
c00252d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252db:	50                   	push   eax
c00252dc:	68 ec 01 04 c0       	push   0xc00401ec
c00252e1:	e8 1a 9a 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00252e6:	83 c4 10             	add    esp,0x10
c00252e9:	eb a9                	jmp    c0025294 <schedule()+0x3c>
c00252eb:	90                   	nop

c00252ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00252ec:	83 ec 0c             	sub    esp,0xc
c00252ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00252f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00252fb:	e8 58 ff ff ff       	call   c0025258 <schedule()>
c0025300:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025305:	83 e8 01             	sub    eax,0x1
c0025308:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002530d:	75 01                	jne    c0025310 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c002530f:	fb                   	sti    
c0025310:	83 c4 0c             	add    esp,0xc
c0025313:	c3                   	ret    

c0025314 <blockTask(TaskState)>:
c0025314:	83 ec 0c             	sub    esp,0xc
c0025317:	fa                   	cli    
c0025318:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002531d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025321:	83 c0 01             	add    eax,0x1
c0025324:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002532e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025331:	e8 22 ff ff ff       	call   c0025258 <schedule()>
c0025336:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002533b:	83 e8 01             	sub    eax,0x1
c002533e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025343:	75 03                	jne    c0025348 <blockTask(TaskState)+0x34>
c0025345:	fb                   	sti    
c0025346:	66 90                	xchg   ax,ax
c0025348:	83 c4 0c             	add    esp,0xc
c002534b:	c3                   	ret    

c002534c <waitTask(int, int*, int)>:
c002534c:	83 ec 18             	sub    esp,0x18
c002534f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025354:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025358:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002535b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002535f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025364:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0025367:	6a 07                	push   0x7
c0025369:	e8 a6 ff ff ff       	call   c0025314 <blockTask(TaskState)>
c002536e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025373:	83 c4 10             	add    esp,0x10
c0025376:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0025379:	85 d2                	test   edx,edx
c002537b:	74 0b                	je     c0025388 <waitTask(int, int*, int)+0x3c>
c002537d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025380:	89 02                	mov    DWORD PTR [edx],eax
c0025382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025387:	90                   	nop
c0025388:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c002538b:	83 c4 0c             	add    esp,0xc
c002538e:	c3                   	ret    
c002538f:	90                   	nop

c0025390 <milliTenthSleepUntil(unsigned int)>:
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c002539d:	76 05                	jbe    c00253a4 <milliTenthSleepUntil(unsigned int)+0x14>
c002539f:	90                   	nop
c00253a0:	83 c4 0c             	add    esp,0xc
c00253a3:	c3                   	ret    
c00253a4:	fa                   	cli    
c00253a5:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00253ab:	83 ec 08             	sub    esp,0x8
c00253ae:	83 c2 01             	add    edx,0x1
c00253b1:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00253b7:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00253bd:	83 c1 01             	add    ecx,0x1
c00253c0:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00253c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00253cc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00253cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253d4:	50                   	push   eax
c00253d5:	68 e0 01 04 c0       	push   0xc00401e0
c00253da:	e8 21 99 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00253df:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00253e6:	e8 29 ff ff ff       	call   c0025314 <blockTask(TaskState)>
c00253eb:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00253f0:	83 c4 10             	add    esp,0x10
c00253f3:	83 e8 01             	sub    eax,0x1
c00253f6:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00253fb:	85 c0                	test   eax,eax
c00253fd:	75 09                	jne    c0025408 <milliTenthSleepUntil(unsigned int)+0x78>
c00253ff:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025404:	85 c0                	test   eax,eax
c0025406:	75 14                	jne    c002541c <milliTenthSleepUntil(unsigned int)+0x8c>
c0025408:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002540d:	83 e8 01             	sub    eax,0x1
c0025410:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025415:	75 89                	jne    c00253a0 <milliTenthSleepUntil(unsigned int)+0x10>
c0025417:	fb                   	sti    
c0025418:	83 c4 0c             	add    esp,0xc
c002541b:	c3                   	ret    
c002541c:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025426:	e8 2d fe ff ff       	call   c0025258 <schedule()>
c002542b:	eb db                	jmp    c0025408 <milliTenthSleepUntil(unsigned int)+0x78>
c002542d:	8d 76 00             	lea    esi,[esi+0x0]

c0025430 <milliTenthSleep(unsigned int)>:
c0025430:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025434:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025439:	01 c2                	add    edx,eax
c002543b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002543f:	e9 4c ff ff ff       	jmp    c0025390 <milliTenthSleepUntil(unsigned int)>

c0025444 <sleep(unsigned int)>:
c0025444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025448:	8d 04 80             	lea    eax,[eax+eax*4]
c002544b:	8d 04 80             	lea    eax,[eax+eax*4]
c002544e:	8d 04 80             	lea    eax,[eax+eax*4]
c0025451:	8d 04 80             	lea    eax,[eax+eax*4]
c0025454:	c1 e0 04             	shl    eax,0x4
c0025457:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002545b:	eb d3                	jmp    c0025430 <milliTenthSleep(unsigned int)>
c002545d:	8d 76 00             	lea    esi,[esi+0x0]

c0025460 <taskReturned>:
c0025460:	83 ec 18             	sub    esp,0x18
c0025463:	68 e0 2e 03 c0       	push   0xc0032ee0
c0025468:	e8 f5 ad ff ff       	call   c0020262 <KePanic(char const*)>
c002546d:	83 c4 10             	add    esp,0x10
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	6a 02                	push   0x2
c0025475:	e8 9a fe ff ff       	call   c0025314 <blockTask(TaskState)>
c002547a:	fa                   	cli    
c002547b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025480:	83 c0 01             	add    eax,0x1
c0025483:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025488:	e8 cb fd ff ff       	call   c0025258 <schedule()>
c002548d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	83 e8 01             	sub    eax,0x1
c0025498:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002549d:	85 c0                	test   eax,eax
c002549f:	75 cf                	jne    c0025470 <taskReturned+0x10>
c00254a1:	fb                   	sti    
c00254a2:	eb cc                	jmp    c0025470 <taskReturned+0x10>

c00254a4 <Thr::processFromPID(int)>:
c00254a4:	57                   	push   edi
c00254a5:	56                   	push   esi
c00254a6:	53                   	push   ebx
c00254a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254ab:	fa                   	cli    
c00254ac:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00254b2:	83 ec 0c             	sub    esp,0xc
c00254b5:	83 c1 01             	add    ecx,0x1
c00254b8:	68 ec 01 04 c0       	push   0xc00401ec
c00254bd:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00254c3:	e8 74 97 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254c8:	83 c4 10             	add    esp,0x10
c00254cb:	89 c7                	mov    edi,eax
c00254cd:	eb 15                	jmp    c00254e4 <Thr::processFromPID(int)+0x40>
c00254cf:	90                   	nop
c00254d0:	83 ec 0c             	sub    esp,0xc
c00254d3:	68 ec 01 04 c0       	push   0xc00401ec
c00254d8:	e8 5f 97 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254dd:	83 c4 10             	add    esp,0x10
c00254e0:	39 f8                	cmp    eax,edi
c00254e2:	74 50                	je     c0025534 <Thr::processFromPID(int)+0x90>
c00254e4:	83 ec 0c             	sub    esp,0xc
c00254e7:	68 ec 01 04 c0       	push   0xc00401ec
c00254ec:	e8 4b 97 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254f1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00254f8:	89 c3                	mov    ebx,eax
c00254fa:	e8 45 97 00 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00254ff:	58                   	pop    eax
c0025500:	5a                   	pop    edx
c0025501:	53                   	push   ebx
c0025502:	68 ec 01 04 c0       	push   0xc00401ec
c0025507:	e8 f4 97 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002550c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002550f:	83 c4 10             	add    esp,0x10
c0025512:	39 30                	cmp    DWORD PTR [eax],esi
c0025514:	75 ba                	jne    c00254d0 <Thr::processFromPID(int)+0x2c>
c0025516:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002551b:	83 e8 01             	sub    eax,0x1
c002551e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025523:	74 0b                	je     c0025530 <Thr::processFromPID(int)+0x8c>
c0025525:	8d 76 00             	lea    esi,[esi+0x0]
c0025528:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002552b:	5b                   	pop    ebx
c002552c:	5e                   	pop    esi
c002552d:	5f                   	pop    edi
c002552e:	c3                   	ret    
c002552f:	90                   	nop
c0025530:	fb                   	sti    
c0025531:	eb f5                	jmp    c0025528 <Thr::processFromPID(int)+0x84>
c0025533:	90                   	nop
c0025534:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025539:	83 e8 01             	sub    eax,0x1
c002553c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025541:	75 05                	jne    c0025548 <Thr::processFromPID(int)+0xa4>
c0025543:	fb                   	sti    
c0025544:	5b                   	pop    ebx
c0025545:	5e                   	pop    esi
c0025546:	5f                   	pop    edi
c0025547:	c3                   	ret    
c0025548:	5b                   	pop    ebx
c0025549:	31 c0                	xor    eax,eax
c002554b:	5e                   	pop    esi
c002554c:	5f                   	pop    edi
c002554d:	c3                   	ret    
c002554e:	66 90                	xchg   ax,ax

c0025550 <unblockTask(ThreadControlBlock*)>:
c0025550:	53                   	push   ebx
c0025551:	83 ec 08             	sub    esp,0x8
c0025554:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025558:	fa                   	cli    
c0025559:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002555e:	83 c0 01             	add    eax,0x1
c0025561:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025566:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025569:	85 c0                	test   eax,eax
c002556b:	74 67                	je     c00255d4 <unblockTask(ThreadControlBlock*)+0x84>
c002556d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025570:	83 f8 01             	cmp    eax,0x1
c0025573:	74 37                	je     c00255ac <unblockTask(ThreadControlBlock*)+0x5c>
c0025575:	83 ec 0c             	sub    esp,0xc
c0025578:	68 ec 01 04 c0       	push   0xc00401ec
c002557d:	e8 ba 96 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	85 c0                	test   eax,eax
c0025587:	75 1b                	jne    c00255a4 <unblockTask(ThreadControlBlock*)+0x54>
c0025589:	eb 5d                	jmp    c00255e8 <unblockTask(ThreadControlBlock*)+0x98>
c002558b:	90                   	nop
c002558c:	83 ec 08             	sub    esp,0x8
c002558f:	50                   	push   eax
c0025590:	68 ec 01 04 c0       	push   0xc00401ec
c0025595:	e8 c2 99 00 00       	call   c002ef5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002559a:	83 c4 10             	add    esp,0x10
c002559d:	85 c0                	test   eax,eax
c002559f:	74 47                	je     c00255e8 <unblockTask(ThreadControlBlock*)+0x98>
c00255a1:	8d 76 00             	lea    esi,[esi+0x0]
c00255a4:	39 c3                	cmp    ebx,eax
c00255a6:	75 e4                	jne    c002558c <unblockTask(ThreadControlBlock*)+0x3c>
c00255a8:	eb 12                	jmp    c00255bc <unblockTask(ThreadControlBlock*)+0x6c>
c00255aa:	66 90                	xchg   ax,ax
c00255ac:	83 ec 0c             	sub    esp,0xc
c00255af:	68 7f 2e 03 c0       	push   0xc0032e7f
c00255b4:	e8 90 3c ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00255b9:	83 c4 10             	add    esp,0x10
c00255bc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255c1:	83 e8 01             	sub    eax,0x1
c00255c4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255c9:	75 01                	jne    c00255cc <unblockTask(ThreadControlBlock*)+0x7c>
c00255cb:	fb                   	sti    
c00255cc:	83 c4 08             	add    esp,0x8
c00255cf:	5b                   	pop    ebx
c00255d0:	c3                   	ret    
c00255d1:	8d 76 00             	lea    esi,[esi+0x0]
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	68 68 2e 03 c0       	push   0xc0032e68
c00255dc:	e8 68 3c ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00255e1:	83 c4 10             	add    esp,0x10
c00255e4:	eb d6                	jmp    c00255bc <unblockTask(ThreadControlBlock*)+0x6c>
c00255e6:	66 90                	xchg   ax,ax
c00255e8:	83 ec 08             	sub    esp,0x8
c00255eb:	53                   	push   ebx
c00255ec:	68 ec 01 04 c0       	push   0xc00401ec
c00255f1:	e8 0a 97 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	eb c1                	jmp    c00255bc <unblockTask(ThreadControlBlock*)+0x6c>
c00255fb:	90                   	nop

c00255fc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00255fc:	55                   	push   ebp
c00255fd:	57                   	push   edi
c00255fe:	56                   	push   esi
c00255ff:	53                   	push   ebx
c0025600:	83 ec 1c             	sub    esp,0x1c
c0025603:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025607:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002560a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025610:	85 ed                	test   ebp,ebp
c0025612:	7e 28                	jle    c002563c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025614:	31 f6                	xor    esi,esi
c0025616:	66 90                	xchg   ax,ax
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025622:	83 c6 01             	add    esi,0x1
c0025625:	57                   	push   edi
c0025626:	e8 9f 0d ff ff       	call   c00163ca <free>
c002562b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002562e:	83 c4 10             	add    esp,0x10
c0025631:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025637:	7f df                	jg     c0025618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025639:	8d 76 00             	lea    esi,[esi+0x0]
c002563c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025646:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002564b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002564e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025651:	d3 c0                	rol    eax,cl
c0025653:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002565a:	21 c8                	and    eax,ecx
c002565c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025663:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025666:	89 f7                	mov    edi,esi
c0025668:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025670:	0f 85 72 01 00 00    	jne    c00257e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025676:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c002567c:	85 ed                	test   ebp,ebp
c002567e:	74 1c                	je     c002569c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	55                   	push   ebp
c0025684:	e8 cf a8 ff ff       	call   c001ff58 <EnvVarContainer::~EnvVarContainer()>
c0025689:	59                   	pop    ecx
c002568a:	5e                   	pop    esi
c002568b:	6a 0c                	push   0xc
c002568d:	55                   	push   ebp
c002568e:	e8 89 3a ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0025693:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	89 f7                	mov    edi,esi
c002569b:	90                   	nop
c002569c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256a2:	85 c0                	test   eax,eax
c00256a4:	0f 84 b2 00 00 00    	je     c002575c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256aa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00256ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256b1:	31 c9                	xor    ecx,ecx
c00256b3:	eb 17                	jmp    c00256cc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00256b5:	8d 76 00             	lea    esi,[esi+0x0]
c00256b8:	83 c1 01             	add    ecx,0x1
c00256bb:	83 f9 10             	cmp    ecx,0x10
c00256be:	0f 84 98 00 00 00    	je     c002575c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256ca:	66 90                	xchg   ax,ax
c00256cc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00256d3:	d3 fa                	sar    edx,cl
c00256d5:	80 e2 01             	and    dl,0x1
c00256d8:	74 de                	je     c00256b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00256da:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00256dd:	01 d2                	add    edx,edx
c00256df:	01 ca                	add    edx,ecx
c00256e1:	8d 14 92             	lea    edx,[edx+edx*4]
c00256e4:	01 d0                	add    eax,edx
c00256e6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00256ec:	83 fd 07             	cmp    ebp,0x7
c00256ef:	75 c7                	jne    c00256b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00256f1:	05 40 02 00 00       	add    eax,0x240
c00256f6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00256f9:	83 fd ff             	cmp    ebp,0xffffffff
c00256fc:	0f 8c ee 00 00 00    	jl     c00257f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025702:	0f 84 ac 01 00 00    	je     c00258b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025708:	85 ed                	test   ebp,ebp
c002570a:	0f 84 90 01 00 00    	je     c00258a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025710:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025712:	75 a4                	jne    c00256b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025714:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002571a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002571e:	01 d0                	add    eax,edx
c0025720:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c002572d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025730:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025736:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c002573d:	50                   	push   eax
c002573e:	e8 0d fe ff ff       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c0025743:	83 c4 10             	add    esp,0x10
c0025746:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025749:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002574d:	89 f7                	mov    edi,esi
c002574f:	83 c1 01             	add    ecx,0x1
c0025752:	83 f9 10             	cmp    ecx,0x10
c0025755:	0f 85 69 ff ff ff    	jne    c00256c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002575b:	90                   	nop
c002575c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025762:	85 c0                	test   eax,eax
c0025764:	74 62                	je     c00257c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025766:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c002576c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025772:	74 54                	je     c00257c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	68 ec 01 04 c0       	push   0xc00401ec
c002577c:	e8 bb 94 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025781:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025788:	89 c7                	mov    edi,eax
c002578a:	e8 91 94 00 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002578f:	83 c4 10             	add    esp,0x10
c0025792:	84 c0                	test   al,al
c0025794:	0f 84 ce 00 00 00    	je     c0025868 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c002579a:	66 90                	xchg   ax,ax
c002579c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002579f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00257a5:	85 d2                	test   edx,edx
c00257a7:	74 0f                	je     c00257b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00257a9:	83 ec 0c             	sub    esp,0xc
c00257ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00257ae:	52                   	push   edx
c00257af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00257b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257b5:	83 c4 10             	add    esp,0x10
c00257b8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00257c2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00257c5:	8d 76 00             	lea    esi,[esi+0x0]
c00257c8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00257ce:	85 db                	test   ebx,ebx
c00257d0:	74 16                	je     c00257e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00257d2:	83 ec 0c             	sub    esp,0xc
c00257d5:	53                   	push   ebx
c00257d6:	e8 db 2c ff ff       	call   c00184b6 <VAS::~VAS()>
c00257db:	58                   	pop    eax
c00257dc:	5a                   	pop    edx
c00257dd:	6a 14                	push   0x14
c00257df:	53                   	push   ebx
c00257e0:	e8 37 39 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c00257e5:	83 c4 10             	add    esp,0x10
c00257e8:	83 c4 1c             	add    esp,0x1c
c00257eb:	5b                   	pop    ebx
c00257ec:	5e                   	pop    esi
c00257ed:	5f                   	pop    edi
c00257ee:	5d                   	pop    ebp
c00257ef:	c3                   	ret    
c00257f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257f4:	83 ec 0c             	sub    esp,0xc
c00257f7:	68 14 2f 03 c0       	push   0xc0032f14
c00257fc:	e8 61 aa ff ff       	call   c0020262 <KePanic(char const*)>
c0025801:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025804:	83 c4 10             	add    esp,0x10
c0025807:	89 f7                	mov    edi,esi
c0025809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002580d:	e9 a6 fe ff ff       	jmp    c00256b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025812:	66 90                	xchg   ax,ax
c0025814:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002581a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025820:	75 1e                	jne    c0025840 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025822:	83 ec 0c             	sub    esp,0xc
c0025825:	68 7c 2f 03 c0       	push   0xc0032f7c
c002582a:	e8 1a 3a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002582f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025836:	e8 d9 fa ff ff       	call   c0025314 <blockTask(TaskState)>
c002583b:	83 c4 10             	add    esp,0x10
c002583e:	66 90                	xchg   ax,ax
c0025840:	83 ec 08             	sub    esp,0x8
c0025843:	56                   	push   esi
c0025844:	68 ec 01 04 c0       	push   0xc00401ec
c0025849:	e8 b2 94 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002584e:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025855:	e8 e2 93 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002585a:	83 c4 10             	add    esp,0x10
c002585d:	39 f8                	cmp    eax,edi
c002585f:	0f 84 37 ff ff ff    	je     c002579c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025865:	8d 76 00             	lea    esi,[esi+0x0]
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	68 ec 01 04 c0       	push   0xc00401ec
c0025870:	e8 c7 93 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025875:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002587c:	89 c6                	mov    esi,eax
c002587e:	e8 c1 93 00 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025883:	83 c4 10             	add    esp,0x10
c0025886:	39 f3                	cmp    ebx,esi
c0025888:	74 b6                	je     c0025840 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002588a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c002588d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025890:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025896:	75 a8                	jne    c0025840 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025898:	e9 77 ff ff ff       	jmp    c0025814 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c002589d:	8d 76 00             	lea    esi,[esi+0x0]
c00258a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	68 48 2f 03 c0       	push   0xc0032f48
c00258ac:	e9 4b ff ff ff       	jmp    c00257fc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00258b1:	8d 76 00             	lea    esi,[esi+0x0]
c00258b4:	8b 36                	mov    esi,DWORD PTR [esi]
c00258b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258ba:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00258bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258c0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00258c6:	01 d7                	add    edi,edx
c00258c8:	89 f8                	mov    eax,edi
c00258ca:	e9 51 fe ff ff       	jmp    c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00258cf:	90                   	nop

c00258d0 <cleanerTaskFunction(void*)>:
c00258d0:	53                   	push   ebx
c00258d1:	83 ec 08             	sub    esp,0x8
c00258d4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258d9:	83 e8 01             	sub    eax,0x1
c00258dc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258e1:	75 01                	jne    c00258e4 <cleanerTaskFunction(void*)+0x14>
c00258e3:	fb                   	sti    
c00258e4:	fa                   	cli    
c00258e5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258ea:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c00258f1:	8d 50 01             	lea    edx,[eax+0x1]
c00258f4:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00258fa:	0f 84 c4 00 00 00    	je     c00259c4 <cleanerTaskFunction(void*)+0xf4>
c0025900:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025905:	85 c0                	test   eax,eax
c0025907:	75 03                	jne    c002590c <cleanerTaskFunction(void*)+0x3c>
c0025909:	fb                   	sti    
c002590a:	66 90                	xchg   ax,ax
c002590c:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025913:	fa                   	cli    
c0025914:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002591a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025920:	83 c2 01             	add    edx,0x1
c0025923:	83 c1 01             	add    ecx,0x1
c0025926:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002592c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025932:	fa                   	cli    
c0025933:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025939:	83 c3 01             	add    ebx,0x1
c002593c:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025942:	eb 28                	jmp    c002596c <cleanerTaskFunction(void*)+0x9c>
c0025944:	83 ec 0c             	sub    esp,0xc
c0025947:	68 d4 01 04 c0       	push   0xc00401d4
c002594c:	e8 eb 92 00 00       	call   c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025951:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025958:	89 c3                	mov    ebx,eax
c002595a:	e8 e5 92 00 00       	call   c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002595f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025962:	e8 95 fc ff ff       	call   c00255fc <cleanupTerminatedTask(ThreadControlBlock*)>
c0025967:	83 c4 10             	add    esp,0x10
c002596a:	66 90                	xchg   ax,ax
c002596c:	83 ec 0c             	sub    esp,0xc
c002596f:	68 d4 01 04 c0       	push   0xc00401d4
c0025974:	e8 a7 92 00 00       	call   c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025979:	83 c4 10             	add    esp,0x10
c002597c:	84 c0                	test   al,al
c002597e:	74 c4                	je     c0025944 <cleanerTaskFunction(void*)+0x74>
c0025980:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025985:	83 e8 01             	sub    eax,0x1
c0025988:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002598d:	75 01                	jne    c0025990 <cleanerTaskFunction(void*)+0xc0>
c002598f:	fb                   	sti    
c0025990:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025995:	83 e8 01             	sub    eax,0x1
c0025998:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002599d:	0f 85 31 ff ff ff    	jne    c00258d4 <cleanerTaskFunction(void*)+0x4>
c00259a3:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00259a8:	85 c0                	test   eax,eax
c00259aa:	0f 84 24 ff ff ff    	je     c00258d4 <cleanerTaskFunction(void*)+0x4>
c00259b0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259ba:	e8 99 f8 ff ff       	call   c0025258 <schedule()>
c00259bf:	e9 10 ff ff ff       	jmp    c00258d4 <cleanerTaskFunction(void*)+0x4>
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	6a 02                	push   0x2
c00259c9:	e8 1e f9 ff ff       	call   c00252ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00259ce:	83 c4 10             	add    esp,0x10
c00259d1:	e9 36 ff ff ff       	jmp    c002590c <cleanerTaskFunction(void*)+0x3c>
c00259d6:	66 90                	xchg   ax,ax

c00259d8 <terminateTask(int)>:
c00259d8:	83 ec 14             	sub    esp,0x14
c00259db:	fa                   	cli    
c00259dc:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00259e2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00259e8:	83 c2 01             	add    edx,0x1
c00259eb:	83 c1 01             	add    ecx,0x1
c00259ee:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00259f4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00259fa:	fa                   	cli    
c00259fb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a04:	83 c0 01             	add    eax,0x1
c0025a07:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a11:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025a14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a19:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025a1c:	50                   	push   eax
c0025a1d:	68 d4 01 04 c0       	push   0xc00401d4
c0025a22:	e8 d9 92 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a2c:	83 c4 10             	add    esp,0x10
c0025a2f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025a36:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025a3b:	85 c0                	test   eax,eax
c0025a3d:	74 65                	je     c0025aa4 <terminateTask(int)+0xcc>
c0025a3f:	83 ec 0c             	sub    esp,0xc
c0025a42:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025a49:	50                   	push   eax
c0025a4a:	e8 01 fb ff ff       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c0025a4f:	83 c4 10             	add    esp,0x10
c0025a52:	66 90                	xchg   ax,ax
c0025a54:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a59:	83 e8 01             	sub    eax,0x1
c0025a5c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a61:	75 01                	jne    c0025a64 <terminateTask(int)+0x8c>
c0025a63:	fb                   	sti    
c0025a64:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025a69:	83 e8 01             	sub    eax,0x1
c0025a6c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025a71:	75 09                	jne    c0025a7c <terminateTask(int)+0xa4>
c0025a73:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025a7a:	75 3c                	jne    c0025ab8 <terminateTask(int)+0xe0>
c0025a7c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a81:	83 e8 01             	sub    eax,0x1
c0025a84:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a89:	75 01                	jne    c0025a8c <terminateTask(int)+0xb4>
c0025a8b:	fb                   	sti    
c0025a8c:	fa                   	cli    
c0025a8d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a92:	83 c0 01             	add    eax,0x1
c0025a95:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a9a:	66 90                	xchg   ax,ax
c0025a9c:	e8 b7 f7 ff ff       	call   c0025258 <schedule()>
c0025aa1:	eb d9                	jmp    c0025a7c <terminateTask(int)+0xa4>
c0025aa3:	90                   	nop
c0025aa4:	83 ec 0c             	sub    esp,0xc
c0025aa7:	68 96 2e 03 c0       	push   0xc0032e96
c0025aac:	e8 98 37 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0025ab1:	83 c4 10             	add    esp,0x10
c0025ab4:	eb 9e                	jmp    c0025a54 <terminateTask(int)+0x7c>
c0025ab6:	66 90                	xchg   ax,ax
c0025ab8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025ac2:	eb d8                	jmp    c0025a9c <terminateTask(int)+0xc4>

c0025ac4 <Thr::terminateFromIRQ(int)>:
c0025ac4:	83 ec 18             	sub    esp,0x18
c0025ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025acb:	50                   	push   eax
c0025acc:	e8 07 ff ff ff       	call   c00259d8 <terminateTask(int)>
c0025ad1:	8d 76 00             	lea    esi,[esi+0x0]

c0025ad4 <__static_initialization_and_destruction_0(int, int)>:
c0025ad4:	83 ec 0c             	sub    esp,0xc
c0025ad7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025adc:	0f 85 8e 00 00 00    	jne    c0025b70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025ae2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025aea:	0f 85 80 00 00 00    	jne    c0025b70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	68 ec 01 04 c0       	push   0xc00401ec
c0025af8:	e8 b7 94 00 00       	call   c002efb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025afd:	83 c4 10             	add    esp,0x10
c0025b00:	83 ec 04             	sub    esp,0x4
c0025b03:	68 58 3b 03 c0       	push   0xc0033b58
c0025b08:	68 ec 01 04 c0       	push   0xc00401ec
c0025b0d:	68 64 ef 02 c0       	push   0xc002ef64
c0025b12:	e8 b5 35 ff ff       	call   c00190cc <__cxa_atexit>
c0025b17:	83 c4 10             	add    esp,0x10
c0025b1a:	83 ec 0c             	sub    esp,0xc
c0025b1d:	68 e0 01 04 c0       	push   0xc00401e0
c0025b22:	e8 8d 94 00 00       	call   c002efb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b27:	83 c4 10             	add    esp,0x10
c0025b2a:	83 ec 04             	sub    esp,0x4
c0025b2d:	68 58 3b 03 c0       	push   0xc0033b58
c0025b32:	68 e0 01 04 c0       	push   0xc00401e0
c0025b37:	68 64 ef 02 c0       	push   0xc002ef64
c0025b3c:	e8 8b 35 ff ff       	call   c00190cc <__cxa_atexit>
c0025b41:	83 c4 10             	add    esp,0x10
c0025b44:	83 ec 0c             	sub    esp,0xc
c0025b47:	68 d4 01 04 c0       	push   0xc00401d4
c0025b4c:	e8 63 94 00 00       	call   c002efb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b51:	83 c4 10             	add    esp,0x10
c0025b54:	83 ec 04             	sub    esp,0x4
c0025b57:	68 58 3b 03 c0       	push   0xc0033b58
c0025b5c:	68 d4 01 04 c0       	push   0xc00401d4
c0025b61:	68 64 ef 02 c0       	push   0xc002ef64
c0025b66:	e8 61 35 ff ff       	call   c00190cc <__cxa_atexit>
c0025b6b:	83 c4 10             	add    esp,0x10
c0025b6e:	66 90                	xchg   ax,ax
c0025b70:	90                   	nop
c0025b71:	83 c4 0c             	add    esp,0xc
c0025b74:	c3                   	ret    
c0025b75:	8d 76 00             	lea    esi,[esi+0x0]

c0025b78 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025b78:	83 ec 0c             	sub    esp,0xc
c0025b7b:	83 ec 08             	sub    esp,0x8
c0025b7e:	68 ff ff 00 00       	push   0xffff
c0025b83:	6a 01                	push   0x1
c0025b85:	e8 4a ff ff ff       	call   c0025ad4 <__static_initialization_and_destruction_0(int, int)>
c0025b8a:	83 c4 10             	add    esp,0x10
c0025b8d:	83 c4 0c             	add    esp,0xc
c0025b90:	c3                   	ret    

c0025b91 <Vm::inbv(unsigned short)>:
c0025b91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025b95:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025b9a:	75 06                	jne    c0025ba2 <Vm::inbv(unsigned short)+0x11>
c0025b9c:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025ba1:	c3                   	ret    
c0025ba2:	ec                   	in     al,dx
c0025ba3:	c3                   	ret    

c0025ba4 <Vm::outbv(unsigned short, unsigned char)>:
c0025ba4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025bac:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025bb1:	75 25                	jne    c0025bd8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025bb3:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025bb9:	8d 51 01             	lea    edx,[ecx+0x1]
c0025bbc:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025bc2:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025bc8:	83 fa 20             	cmp    edx,0x20
c0025bcb:	75 0c                	jne    c0025bd9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025bcd:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025bd7:	c3                   	ret    
c0025bd8:	ee                   	out    dx,al
c0025bd9:	c3                   	ret    

c0025bda <Vm::realToLinear(unsigned short, unsigned short)>:
c0025bda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025bdf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025be4:	c1 e0 04             	shl    eax,0x4
c0025be7:	01 d0                	add    eax,edx
c0025be9:	c3                   	ret    

c0025bea <Vm::getSegment(unsigned int)>:
c0025bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025bee:	c1 e8 10             	shr    eax,0x10
c0025bf1:	c3                   	ret    

c0025bf2 <Vm::getOffset(unsigned int)>:
c0025bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025bf6:	c3                   	ret    

c0025bf7 <Vm::mainloop2()>:
c0025bf7:	83 ec 18             	sub    esp,0x18
c0025bfa:	fa                   	cli    
c0025bfb:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c01:	6a 02                	push   0x2
c0025c03:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025c0a:	e8 dd f6 ff ff       	call   c00252ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c14:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025c18:	52                   	push   edx
c0025c19:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025c1d:	52                   	push   edx
c0025c1e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025c22:	52                   	push   edx
c0025c23:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025c27:	50                   	push   eax
c0025c28:	e8 e2 a5 fd ff       	call   c000020f <goToVM86>
c0025c2d:	83 c4 2c             	add    esp,0x2c
c0025c30:	c3                   	ret    

c0025c31 <Vm::mainVm8086Loop(void*)>:
c0025c31:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c36:	48                   	dec    eax
c0025c37:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c3c:	75 01                	jne    c0025c3f <Vm::mainVm8086Loop(void*)+0xe>
c0025c3e:	fb                   	sti    
c0025c3f:	eb b6                	jmp    c0025bf7 <Vm::mainloop2()>

c0025c41 <Vm::mainloop3(unsigned long)>:
c0025c41:	83 ec 18             	sub    esp,0x18
c0025c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c48:	fa                   	cli    
c0025c49:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c4f:	6a 02                	push   0x2
c0025c51:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025c58:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025c5d:	e8 8a f6 ff ff       	call   c00252ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c62:	83 c4 1c             	add    esp,0x1c
c0025c65:	eb 90                	jmp    c0025bf7 <Vm::mainloop2()>

c0025c67 <Vm::initialise8086()>:
c0025c67:	83 ec 0c             	sub    esp,0xc
c0025c6a:	68 80 00 00 00       	push   0x80
c0025c6f:	6a 00                	push   0x0
c0025c71:	68 31 5c 02 c0       	push   0xc0025c31
c0025c76:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025c7c:	e8 87 f3 ff ff       	call   c0025008 <Process::createThread(void (*)(void*), void*, int)>
c0025c81:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025c88:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025c8d:	68 00 01 00 00       	push   0x100
c0025c92:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025c97:	6a 00                	push   0x0
c0025c99:	6a 00                	push   0x0
c0025c9b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025ca1:	e8 78 2b ff ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025ca6:	83 c4 2c             	add    esp,0x2c
c0025ca9:	c3                   	ret    

c0025caa <Vm::finish8086()>:
c0025caa:	53                   	push   ebx
c0025cab:	83 ec 08             	sub    esp,0x8
c0025cae:	fa                   	cli    
c0025caf:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025cb5:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025cbc:	75 15                	jne    c0025cd3 <Vm::finish8086()+0x29>
c0025cbe:	e8 95 f5 ff ff       	call   c0025258 <schedule()>
c0025cc3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cc8:	48                   	dec    eax
c0025cc9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cce:	75 de                	jne    c0025cae <Vm::finish8086()+0x4>
c0025cd0:	fb                   	sti    
c0025cd1:	eb db                	jmp    c0025cae <Vm::finish8086()+0x4>
c0025cd3:	83 ec 0c             	sub    esp,0xc
c0025cd6:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025cdc:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ce2:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025ce9:	e8 62 f8 ff ff       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c0025cee:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cf3:	83 c4 10             	add    esp,0x10
c0025cf6:	8d 50 ff             	lea    edx,[eax-0x1]
c0025cf9:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025cff:	85 d2                	test   edx,edx
c0025d01:	75 01                	jne    c0025d04 <Vm::finish8086()+0x5a>
c0025d03:	fb                   	sti    
c0025d04:	89 d8                	mov    eax,ebx
c0025d06:	83 c4 08             	add    esp,0x8
c0025d09:	5b                   	pop    ebx
c0025d0a:	c3                   	ret    

c0025d0b <Vm::getOutput8086(unsigned char*)>:
c0025d0b:	57                   	push   edi
c0025d0c:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025d12:	56                   	push   esi
c0025d13:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025d18:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d1e:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025d23:	5e                   	pop    esi
c0025d24:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d2e:	5f                   	pop    edi
c0025d2f:	c3                   	ret    

c0025d30 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d30:	55                   	push   ebp
c0025d31:	57                   	push   edi
c0025d32:	56                   	push   esi
c0025d33:	53                   	push   ebx
c0025d34:	83 ec 0c             	sub    esp,0xc
c0025d37:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025d3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025d3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d47:	fa                   	cli    
c0025d48:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d4e:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025d55:	75 15                	jne    c0025d6c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025d57:	e8 fc f4 ff ff       	call   c0025258 <schedule()>
c0025d5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d61:	48                   	dec    eax
c0025d62:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d67:	75 de                	jne    c0025d47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025d69:	fb                   	sti    
c0025d6a:	eb db                	jmp    c0025d47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025d6c:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d71:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d7b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d7f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d83:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d87:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025d8b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d8f:	0f b7 ff             	movzx  edi,di
c0025d92:	0f b7 f6             	movzx  esi,si
c0025d95:	50                   	push   eax
c0025d96:	6a 20                	push   0x20
c0025d98:	6a 00                	push   0x0
c0025d9a:	68 40 02 04 c0       	push   0xc0040240
c0025d9f:	e8 4c a7 fd ff       	call   c00004f0 <memset>
c0025da4:	5a                   	pop    edx
c0025da5:	59                   	pop    ecx
c0025da6:	57                   	push   edi
c0025da7:	56                   	push   esi
c0025da8:	e8 2d fe ff ff       	call   c0025bda <Vm::realToLinear(unsigned short, unsigned short)>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	89 c7                	mov    edi,eax
c0025db2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025db6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025dba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025dbc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025dc1:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025dc8:	48                   	dec    eax
c0025dc9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025dce:	75 01                	jne    c0025dd1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025dd0:	fb                   	sti    
c0025dd1:	83 ec 0c             	sub    esp,0xc
c0025dd4:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025dda:	e8 71 f7 ff ff       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c0025ddf:	83 c4 1c             	add    esp,0x1c
c0025de2:	b0 01                	mov    al,0x1
c0025de4:	5b                   	pop    ebx
c0025de5:	5e                   	pop    esi
c0025de6:	5f                   	pop    edi
c0025de7:	5d                   	pop    ebp
c0025de8:	c3                   	ret    

c0025de9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025de9:	55                   	push   ebp
c0025dea:	57                   	push   edi
c0025deb:	56                   	push   esi
c0025dec:	53                   	push   ebx
c0025ded:	83 ec 34             	sub    esp,0x34
c0025df0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025df4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025df8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025dfc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025e00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e08:	68 a4 2f 03 c0       	push   0xc0032fa4
c0025e0d:	e8 37 34 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	fa                   	cli    
c0025e16:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e1c:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025e22:	84 db                	test   bl,bl
c0025e24:	75 15                	jne    c0025e3b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025e26:	e8 2d f4 ff ff       	call   c0025258 <schedule()>
c0025e2b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e30:	48                   	dec    eax
c0025e31:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e36:	75 dd                	jne    c0025e15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e38:	fb                   	sti    
c0025e39:	eb da                	jmp    c0025e15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025e3f:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025e44:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025e4e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025e52:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025e56:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025e5a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025e5e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025e62:	50                   	push   eax
c0025e63:	6a 20                	push   0x20
c0025e65:	6a 00                	push   0x0
c0025e67:	68 40 02 04 c0       	push   0xc0040240
c0025e6c:	e8 7f a6 fd ff       	call   c00004f0 <memset>
c0025e71:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025e78:	e8 3d 05 ff ff       	call   c00163ba <malloc>
c0025e7d:	83 c4 0c             	add    esp,0xc
c0025e80:	89 c5                	mov    ebp,eax
c0025e82:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025e88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e8c:	50                   	push   eax
c0025e8d:	e8 be 45 ff ff       	call   c001a450 <File::File(char const*, Process*)>
c0025e92:	83 c4 10             	add    esp,0x10
c0025e95:	85 ed                	test   ebp,ebp
c0025e97:	75 0a                	jne    c0025ea3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025e99:	83 ec 0c             	sub    esp,0xc
c0025e9c:	68 c6 2f 03 c0       	push   0xc0032fc6
c0025ea1:	eb 2b                	jmp    c0025ece <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025ea3:	50                   	push   eax
c0025ea4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025ea8:	50                   	push   eax
c0025ea9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025ead:	50                   	push   eax
c0025eae:	55                   	push   ebp
c0025eaf:	e8 bc 48 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0025eb4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025eb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025ebc:	83 c4 10             	add    esp,0x10
c0025ebf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025ec4:	74 27                	je     c0025eed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025ec6:	83 ec 0c             	sub    esp,0xc
c0025ec9:	68 da 2f 03 c0       	push   0xc0032fda
c0025ece:	e8 8f a3 ff ff       	call   c0020262 <KePanic(char const*)>
c0025ed3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ed8:	83 c4 10             	add    esp,0x10
c0025edb:	48                   	dec    eax
c0025edc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ee1:	85 c0                	test   eax,eax
c0025ee3:	75 01                	jne    c0025ee6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025ee5:	fb                   	sti    
c0025ee6:	31 db                	xor    ebx,ebx
c0025ee8:	e9 90 00 00 00       	jmp    c0025f7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025eed:	51                   	push   ecx
c0025eee:	51                   	push   ecx
c0025eef:	6a 01                	push   0x1
c0025ef1:	55                   	push   ebp
c0025ef2:	e8 77 45 ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0025ef7:	83 c4 10             	add    esp,0x10
c0025efa:	85 c0                	test   eax,eax
c0025efc:	74 26                	je     c0025f24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025efe:	83 ec 0c             	sub    esp,0xc
c0025f01:	68 f3 2f 03 c0       	push   0xc0032ff3
c0025f06:	e8 57 a3 ff ff       	call   c0020262 <KePanic(char const*)>
c0025f0b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f10:	83 c4 10             	add    esp,0x10
c0025f13:	48                   	dec    eax
c0025f14:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f19:	85 c0                	test   eax,eax
c0025f1b:	75 c9                	jne    c0025ee6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f1d:	fb                   	sti    
c0025f1e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025f22:	eb 59                	jmp    c0025f7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f24:	0f b7 ff             	movzx  edi,di
c0025f27:	50                   	push   eax
c0025f28:	0f b7 f6             	movzx  esi,si
c0025f2b:	50                   	push   eax
c0025f2c:	57                   	push   edi
c0025f2d:	56                   	push   esi
c0025f2e:	e8 a7 fc ff ff       	call   c0025bda <Vm::realToLinear(unsigned short, unsigned short)>
c0025f33:	5a                   	pop    edx
c0025f34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025f37:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025f3b:	51                   	push   ecx
c0025f3c:	50                   	push   eax
c0025f3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f45:	55                   	push   ebp
c0025f46:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025f49:	83 c4 14             	add    esp,0x14
c0025f4c:	55                   	push   ebp
c0025f4d:	e8 7a 45 ff ff       	call   c001a4cc <File::close()>
c0025f52:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f57:	83 c4 10             	add    esp,0x10
c0025f5a:	48                   	dec    eax
c0025f5b:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025f62:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f67:	85 c0                	test   eax,eax
c0025f69:	75 01                	jne    c0025f6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025f6b:	fb                   	sti    
c0025f6c:	83 ec 0c             	sub    esp,0xc
c0025f6f:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025f75:	e8 d6 f5 ff ff       	call   c0025550 <unblockTask(ThreadControlBlock*)>
c0025f7a:	83 c4 10             	add    esp,0x10
c0025f7d:	83 c4 2c             	add    esp,0x2c
c0025f80:	88 d8                	mov    al,bl
c0025f82:	5b                   	pop    ebx
c0025f83:	5e                   	pop    esi
c0025f84:	5f                   	pop    edi
c0025f85:	5d                   	pop    ebp
c0025f86:	c3                   	ret    

c0025f87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025f87:	57                   	push   edi
c0025f88:	56                   	push   esi
c0025f89:	53                   	push   ebx
c0025f8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f92:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025f96:	83 e8 06             	sub    eax,0x6
c0025f99:	0f b7 c0             	movzx  eax,ax
c0025f9c:	50                   	push   eax
c0025f9d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025fa2:	50                   	push   eax
c0025fa3:	e8 32 fc ff ff       	call   c0025bda <Vm::realToLinear(unsigned short, unsigned short)>
c0025fa8:	5a                   	pop    edx
c0025fa9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025fac:	59                   	pop    ecx
c0025fad:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025fb0:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025fb3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025fb9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025fbc:	8d 56 02             	lea    edx,[esi+0x2]
c0025fbf:	66 89 10             	mov    WORD PTR [eax],dx
c0025fc2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025fc6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025fca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0025fcd:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025fd1:	0f b6 f1             	movzx  esi,cl
c0025fd4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025fd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025fde:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025fe2:	0f b6 d5             	movzx  edx,ch
c0025fe5:	74 0a                	je     c0025ff1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0025fe7:	c1 e2 08             	shl    edx,0x8
c0025fea:	09 f2                	or     edx,esi
c0025fec:	80 ce 02             	or     dh,0x2
c0025fef:	eb 08                	jmp    c0025ff9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0025ff1:	c1 e2 08             	shl    edx,0x8
c0025ff4:	09 f2                	or     edx,esi
c0025ff6:	80 e6 fd             	and    dh,0xfd
c0025ff9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026002:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026006:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002600e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0026011:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026019:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c002601c:	5b                   	pop    ebx
c002601d:	5e                   	pop    esi
c002601e:	5f                   	pop    edi
c002601f:	c3                   	ret    

c0026020 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0026020:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026025:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002602a:	c1 e0 04             	shl    eax,0x4
c002602d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026030:	c3                   	ret    

c0026031 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026031:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026036:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002603b:	c1 e0 04             	shl    eax,0x4
c002603e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0026042:	c3                   	ret    

c0026043 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026043:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026048:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002604d:	c1 e0 04             	shl    eax,0x4
c0026050:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026053:	c3                   	ret    

c0026054 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026054:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026059:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002605e:	c1 e0 04             	shl    eax,0x4
c0026061:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026065:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026068:	c3                   	ret    

c0026069 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026069:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002606e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026073:	c1 e0 04             	shl    eax,0x4
c0026076:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002607a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c002607e:	c3                   	ret    

c002607f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c002607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026084:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026089:	c1 e0 04             	shl    eax,0x4
c002608c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026090:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0026093:	c3                   	ret    

c0026094 <Vm::faultHandler(regs*)>:
c0026094:	55                   	push   ebp
c0026095:	57                   	push   edi
c0026096:	56                   	push   esi
c0026097:	53                   	push   ebx
c0026098:	83 ec 2c             	sub    esp,0x2c
c002609b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002609f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00260a2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00260a6:	0f b7 f8             	movzx  edi,ax
c00260a9:	52                   	push   edx
c00260aa:	0f b7 c0             	movzx  eax,ax
c00260ad:	50                   	push   eax
c00260ae:	e8 27 fb ff ff       	call   c0025bda <Vm::realToLinear(unsigned short, unsigned short)>
c00260b3:	5a                   	pop    edx
c00260b4:	59                   	pop    ecx
c00260b5:	89 c1                	mov    ecx,eax
c00260b7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00260ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260be:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00260c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00260c7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00260ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00260ce:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00260d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00260d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00260db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00260df:	e8 f6 fa ff ff       	call   c0025bda <Vm::realToLinear(unsigned short, unsigned short)>
c00260e4:	5e                   	pop    esi
c00260e5:	be 06 00 00 00       	mov    esi,0x6
c00260ea:	5d                   	pop    ebp
c00260eb:	31 ed                	xor    ebp,ebp
c00260ed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00260f2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00260f5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00260fb:	0f 84 74 02 00 00    	je     c0026375 <Vm::faultHandler(regs*)+0x2e1>
c0026101:	0f 87 94 00 00 00    	ja     c002619b <Vm::faultHandler(regs*)+0x107>
c0026107:	83 fa 66             	cmp    edx,0x66
c002610a:	0f 84 e2 01 00 00    	je     c00262f2 <Vm::faultHandler(regs*)+0x25e>
c0026110:	77 47                	ja     c0026159 <Vm::faultHandler(regs*)+0xc5>
c0026112:	83 fa 36             	cmp    edx,0x36
c0026115:	0f 84 ca 01 00 00    	je     c00262e5 <Vm::faultHandler(regs*)+0x251>
c002611b:	77 1a                	ja     c0026137 <Vm::faultHandler(regs*)+0xa3>
c002611d:	83 fa 26             	cmp    edx,0x26
c0026120:	0f 84 98 01 00 00    	je     c00262be <Vm::faultHandler(regs*)+0x22a>
c0026126:	83 fa 2e             	cmp    edx,0x2e
c0026129:	0f 85 21 06 00 00    	jne    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c002612f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026132:	31 f6                	xor    esi,esi
c0026134:	41                   	inc    ecx
c0026135:	eb bb                	jmp    c00260f2 <Vm::faultHandler(regs*)+0x5e>
c0026137:	83 fa 64             	cmp    edx,0x64
c002613a:	0f 84 8b 01 00 00    	je     c00262cb <Vm::faultHandler(regs*)+0x237>
c0026140:	0f 87 92 01 00 00    	ja     c00262d8 <Vm::faultHandler(regs*)+0x244>
c0026146:	83 fa 3e             	cmp    edx,0x3e
c0026149:	0f 85 01 06 00 00    	jne    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c002614f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026152:	be 01 00 00 00       	mov    esi,0x1
c0026157:	eb db                	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c0026159:	83 fa 6d             	cmp    edx,0x6d
c002615c:	0f 84 34 03 00 00    	je     c0026496 <Vm::faultHandler(regs*)+0x402>
c0026162:	77 17                	ja     c002617b <Vm::faultHandler(regs*)+0xe7>
c0026164:	83 fa 67             	cmp    edx,0x67
c0026167:	0f 84 92 01 00 00    	je     c00262ff <Vm::faultHandler(regs*)+0x26b>
c002616d:	83 fa 6c             	cmp    edx,0x6c
c0026170:	0f 84 b1 02 00 00    	je     c0026427 <Vm::faultHandler(regs*)+0x393>
c0026176:	e9 d5 05 00 00       	jmp    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c002617b:	83 fa 6f             	cmp    edx,0x6f
c002617e:	0f 84 3d 04 00 00    	je     c00265c1 <Vm::faultHandler(regs*)+0x52d>
c0026184:	0f 82 9f 03 00 00    	jb     c0026529 <Vm::faultHandler(regs*)+0x495>
c002618a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0026190:	0f 84 76 01 00 00    	je     c002630c <Vm::faultHandler(regs*)+0x278>
c0026196:	e9 b5 05 00 00       	jmp    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c002619b:	81 fa ec 00 00 00    	cmp    edx,0xec
c00261a1:	0f 84 51 05 00 00    	je     c00266f8 <Vm::faultHandler(regs*)+0x664>
c00261a7:	0f 87 a9 00 00 00    	ja     c0026256 <Vm::faultHandler(regs*)+0x1c2>
c00261ad:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00261b3:	0f 84 d0 04 00 00    	je     c0026689 <Vm::faultHandler(regs*)+0x5f5>
c00261b9:	77 78                	ja     c0026233 <Vm::faultHandler(regs*)+0x19f>
c00261bb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00261c1:	0f 84 0e 02 00 00    	je     c00263d5 <Vm::faultHandler(regs*)+0x341>
c00261c7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00261cd:	0f 85 7d 05 00 00    	jne    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c00261d3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00261d7:	89 d1                	mov    ecx,edx
c00261d9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00261dc:	c1 e1 08             	shl    ecx,0x8
c00261df:	09 ca                	or     edx,ecx
c00261e1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00261e4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00261e8:	89 d1                	mov    ecx,edx
c00261ea:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00261ee:	c1 e1 08             	shl    ecx,0x8
c00261f1:	09 ca                	or     edx,ecx
c00261f3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00261f6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00261fa:	89 d1                	mov    ecx,edx
c00261fc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026200:	c1 e1 08             	shl    ecx,0x8
c0026203:	09 ca                	or     edx,ecx
c0026205:	81 ca 00 02 02 00    	or     edx,0x20200
c002620b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002620e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026212:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026218:	d1 e8                	shr    eax,1
c002621a:	83 e0 01             	and    eax,0x1
c002621d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026220:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026223:	83 c0 06             	add    eax,0x6
c0026226:	25 ff ff 00 00       	and    eax,0xffff
c002622b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002622e:	e9 19 05 00 00       	jmp    c002674c <Vm::faultHandler(regs*)+0x6b8>
c0026233:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026239:	0f 84 8f 04 00 00    	je     c00266ce <Vm::faultHandler(regs*)+0x63a>
c002623f:	0f 82 60 04 00 00    	jb     c00266a5 <Vm::faultHandler(regs*)+0x611>
c0026245:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002624b:	0f 84 94 04 00 00    	je     c00266e5 <Vm::faultHandler(regs*)+0x651>
c0026251:	e9 fa 04 00 00       	jmp    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c0026256:	81 fa ef 00 00 00    	cmp    edx,0xef
c002625c:	0f 84 d7 04 00 00    	je     c0026739 <Vm::faultHandler(regs*)+0x6a5>
c0026262:	77 2e                	ja     c0026292 <Vm::faultHandler(regs*)+0x1fe>
c0026264:	81 fa ed 00 00 00    	cmp    edx,0xed
c002626a:	0f 84 a4 04 00 00    	je     c0026714 <Vm::faultHandler(regs*)+0x680>
c0026270:	81 fa ee 00 00 00    	cmp    edx,0xee
c0026276:	0f 85 d4 04 00 00    	jne    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c002627c:	50                   	push   eax
c002627d:	50                   	push   eax
c002627e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026282:	50                   	push   eax
c0026283:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026287:	50                   	push   eax
c0026288:	e8 17 f9 ff ff       	call   c0025ba4 <Vm::outbv(unsigned short, unsigned char)>
c002628d:	e9 9f 04 00 00       	jmp    c0026731 <Vm::faultHandler(regs*)+0x69d>
c0026292:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0026298:	0f 84 6d 01 00 00    	je     c002640b <Vm::faultHandler(regs*)+0x377>
c002629e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00262a4:	0f 84 6f 01 00 00    	je     c0026419 <Vm::faultHandler(regs*)+0x385>
c00262aa:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00262b0:	0f 85 9a 04 00 00    	jne    c0026750 <Vm::faultHandler(regs*)+0x6bc>
c00262b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262b9:	e9 76 fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262c1:	be 02 00 00 00       	mov    esi,0x2
c00262c6:	e9 69 fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262ce:	be 03 00 00 00       	mov    esi,0x3
c00262d3:	e9 5c fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262db:	be 04 00 00 00       	mov    esi,0x4
c00262e0:	e9 4f fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262e8:	be 05 00 00 00       	mov    esi,0x5
c00262ed:	e9 42 fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262f5:	bd 01 00 00 00       	mov    ebp,0x1
c00262fa:	e9 35 fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c00262ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026302:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026307:	e9 28 fe ff ff       	jmp    c0026134 <Vm::faultHandler(regs*)+0xa0>
c002630c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002630f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026313:	83 e5 01             	and    ebp,0x1
c0026316:	74 30                	je     c0026348 <Vm::faultHandler(regs*)+0x2b4>
c0026318:	83 e9 04             	sub    ecx,0x4
c002631b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026321:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026327:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002632a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002632d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026333:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026337:	0f 84 0c 04 00 00    	je     c0026749 <Vm::faultHandler(regs*)+0x6b5>
c002633d:	80 ce 02             	or     dh,0x2
c0026340:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026343:	e9 01 04 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026348:	83 e9 02             	sub    ecx,0x2
c002634b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026351:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026354:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026358:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002635e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026362:	74 05                	je     c0026369 <Vm::faultHandler(regs*)+0x2d5>
c0026364:	80 ce 02             	or     dh,0x2
c0026367:	eb 03                	jmp    c002636c <Vm::faultHandler(regs*)+0x2d8>
c0026369:	80 e6 fd             	and    dh,0xfd
c002636c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026370:	e9 d4 03 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026375:	83 e5 01             	and    ebp,0x1
c0026378:	74 2a                	je     c00263a4 <Vm::faultHandler(regs*)+0x310>
c002637a:	8b 10                	mov    edx,DWORD PTR [eax]
c002637c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026382:	81 ca 00 02 02 00    	or     edx,0x20200
c0026388:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002638b:	8b 00                	mov    eax,DWORD PTR [eax]
c002638d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026393:	c1 e8 09             	shr    eax,0x9
c0026396:	83 e0 01             	and    eax,0x1
c0026399:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002639c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002639f:	83 c0 04             	add    eax,0x4
c00263a2:	eb 24                	jmp    c00263c8 <Vm::faultHandler(regs*)+0x334>
c00263a4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00263a7:	81 ca 00 02 02 00    	or     edx,0x20200
c00263ad:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263b0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00263b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263b9:	c1 e8 09             	shr    eax,0x9
c00263bc:	83 e0 01             	and    eax,0x1
c00263bf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263c2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263c5:	83 c0 02             	add    eax,0x2
c00263c8:	25 ff ff 00 00       	and    eax,0xffff
c00263cd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00263d0:	e9 74 03 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c00263d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263d9:	3d ee 00 00 00       	cmp    eax,0xee
c00263de:	75 10                	jne    c00263f0 <Vm::faultHandler(regs*)+0x35c>
c00263e0:	83 ec 0c             	sub    esp,0xc
c00263e3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00263e6:	e8 56 f8 ff ff       	call   c0025c41 <Vm::mainloop3(unsigned long)>
c00263eb:	e9 44 03 00 00       	jmp    c0026734 <Vm::faultHandler(regs*)+0x6a0>
c00263f0:	83 ec 0c             	sub    esp,0xc
c00263f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00263f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00263fb:	51                   	push   ecx
c00263fc:	50                   	push   eax
c00263fd:	53                   	push   ebx
c00263fe:	e8 84 fb ff ff       	call   c0025f87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026403:	83 c4 20             	add    esp,0x20
c0026406:	e9 41 03 00 00       	jmp    c002674c <Vm::faultHandler(regs*)+0x6b8>
c002640b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026410:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026414:	e9 30 03 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002641e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026422:	e9 22 03 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026427:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002642a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002642f:	74 2b                	je     c002645c <Vm::faultHandler(regs*)+0x3c8>
c0026431:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026438:	76 22                	jbe    c002645c <Vm::faultHandler(regs*)+0x3c8>
c002643a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002643e:	50                   	push   eax
c002643f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026443:	50                   	push   eax
c0026444:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026448:	50                   	push   eax
c0026449:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002644d:	50                   	push   eax
c002644e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026452:	50                   	push   eax
c0026453:	6a 6c                	push   0x6c
c0026455:	6a 6c                	push   0x6c
c0026457:	e9 bd 01 00 00       	jmp    c0026619 <Vm::faultHandler(regs*)+0x585>
c002645c:	83 ec 0c             	sub    esp,0xc
c002645f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026463:	0f b7 f6             	movzx  esi,si
c0026466:	50                   	push   eax
c0026467:	e8 25 f7 ff ff       	call   c0025b91 <Vm::inbv(unsigned short)>
c002646c:	83 c4 0c             	add    esp,0xc
c002646f:	0f b6 c0             	movzx  eax,al
c0026472:	50                   	push   eax
c0026473:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0026477:	50                   	push   eax
c0026478:	56                   	push   esi
c0026479:	e8 d6 fb ff ff       	call   c0026054 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c002647e:	83 c4 10             	add    esp,0x10
c0026481:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026484:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026488:	74 03                	je     c002648d <Vm::faultHandler(regs*)+0x3f9>
c002648a:	48                   	dec    eax
c002648b:	eb 01                	jmp    c002648e <Vm::faultHandler(regs*)+0x3fa>
c002648d:	40                   	inc    eax
c002648e:	0f b7 c0             	movzx  eax,ax
c0026491:	e9 8b 00 00 00       	jmp    c0026521 <Vm::faultHandler(regs*)+0x48d>
c0026496:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026499:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002649c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00264a1:	74 29                	je     c00264cc <Vm::faultHandler(regs*)+0x438>
c00264a3:	3d ff ff 00 00       	cmp    eax,0xffff
c00264a8:	76 22                	jbe    c00264cc <Vm::faultHandler(regs*)+0x438>
c00264aa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264ae:	50                   	push   eax
c00264af:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264b3:	50                   	push   eax
c00264b4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264b8:	50                   	push   eax
c00264b9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264bd:	50                   	push   eax
c00264be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264c2:	50                   	push   eax
c00264c3:	6a 6d                	push   0x6d
c00264c5:	6a 6d                	push   0x6d
c00264c7:	e9 4d 01 00 00       	jmp    c0026619 <Vm::faultHandler(regs*)+0x585>
c00264cc:	0f b7 c8             	movzx  ecx,ax
c00264cf:	0f b7 f6             	movzx  esi,si
c00264d2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00264d5:	83 e5 01             	and    ebp,0x1
c00264d8:	74 20                	je     c00264fa <Vm::faultHandler(regs*)+0x466>
c00264da:	ed                   	in     eax,dx
c00264db:	55                   	push   ebp
c00264dc:	50                   	push   eax
c00264dd:	51                   	push   ecx
c00264de:	56                   	push   esi
c00264df:	e8 9b fb ff ff       	call   c002607f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00264e4:	83 c4 10             	add    esp,0x10
c00264e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264ea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264ee:	74 05                	je     c00264f5 <Vm::faultHandler(regs*)+0x461>
c00264f0:	83 e8 04             	sub    eax,0x4
c00264f3:	eb 27                	jmp    c002651c <Vm::faultHandler(regs*)+0x488>
c00264f5:	83 c0 04             	add    eax,0x4
c00264f8:	eb 22                	jmp    c002651c <Vm::faultHandler(regs*)+0x488>
c00264fa:	66 ed                	in     ax,dx
c00264fc:	0f b7 c0             	movzx  eax,ax
c00264ff:	57                   	push   edi
c0026500:	50                   	push   eax
c0026501:	51                   	push   ecx
c0026502:	56                   	push   esi
c0026503:	e8 61 fb ff ff       	call   c0026069 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026508:	83 c4 10             	add    esp,0x10
c002650b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002650e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026512:	74 05                	je     c0026519 <Vm::faultHandler(regs*)+0x485>
c0026514:	83 e8 02             	sub    eax,0x2
c0026517:	eb 03                	jmp    c002651c <Vm::faultHandler(regs*)+0x488>
c0026519:	83 c0 02             	add    eax,0x2
c002651c:	25 ff ff 00 00       	and    eax,0xffff
c0026521:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026524:	e9 20 02 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026529:	8d 46 ff             	lea    eax,[esi-0x1]
c002652c:	0f b6 f0             	movzx  esi,al
c002652f:	83 fe 05             	cmp    esi,0x5
c0026532:	77 23                	ja     c0026557 <Vm::faultHandler(regs*)+0x4c3>
c0026534:	ff 24 b5 68 30 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf98]
c002653b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026540:	eb 15                	jmp    c0026557 <Vm::faultHandler(regs*)+0x4c3>
c0026542:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026546:	eb 0f                	jmp    c0026557 <Vm::faultHandler(regs*)+0x4c3>
c0026548:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c002654c:	eb 09                	jmp    c0026557 <Vm::faultHandler(regs*)+0x4c3>
c002654e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026552:	eb 03                	jmp    c0026557 <Vm::faultHandler(regs*)+0x4c3>
c0026554:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026557:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002655a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002655f:	74 29                	je     c002658a <Vm::faultHandler(regs*)+0x4f6>
c0026561:	3d ff ff 00 00       	cmp    eax,0xffff
c0026566:	76 22                	jbe    c002658a <Vm::faultHandler(regs*)+0x4f6>
c0026568:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002656c:	50                   	push   eax
c002656d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026571:	50                   	push   eax
c0026572:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026576:	50                   	push   eax
c0026577:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002657b:	50                   	push   eax
c002657c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026580:	50                   	push   eax
c0026581:	6a 6e                	push   0x6e
c0026583:	6a 6e                	push   0x6e
c0026585:	e9 8f 00 00 00       	jmp    c0026619 <Vm::faultHandler(regs*)+0x585>
c002658a:	0f b7 c0             	movzx  eax,ax
c002658d:	52                   	push   edx
c002658e:	52                   	push   edx
c002658f:	50                   	push   eax
c0026590:	57                   	push   edi
c0026591:	e8 8a fa ff ff       	call   c0026020 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026596:	59                   	pop    ecx
c0026597:	0f b6 c0             	movzx  eax,al
c002659a:	5e                   	pop    esi
c002659b:	50                   	push   eax
c002659c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00265a0:	50                   	push   eax
c00265a1:	e8 fe f5 ff ff       	call   c0025ba4 <Vm::outbv(unsigned short, unsigned char)>
c00265a6:	83 c4 10             	add    esp,0x10
c00265a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00265ac:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00265b0:	74 03                	je     c00265b5 <Vm::faultHandler(regs*)+0x521>
c00265b2:	48                   	dec    eax
c00265b3:	eb 01                	jmp    c00265b6 <Vm::faultHandler(regs*)+0x522>
c00265b5:	40                   	inc    eax
c00265b6:	0f b7 c0             	movzx  eax,ax
c00265b9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00265bc:	e9 88 01 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c00265c1:	8d 46 ff             	lea    eax,[esi-0x1]
c00265c4:	0f b6 f0             	movzx  esi,al
c00265c7:	83 fe 05             	cmp    esi,0x5
c00265ca:	77 1e                	ja     c00265ea <Vm::faultHandler(regs*)+0x556>
c00265cc:	ff 24 b5 80 30 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf80]
c00265d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00265d7:	eb 11                	jmp    c00265ea <Vm::faultHandler(regs*)+0x556>
c00265d9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00265dc:	eb 0c                	jmp    c00265ea <Vm::faultHandler(regs*)+0x556>
c00265de:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00265e1:	eb 07                	jmp    c00265ea <Vm::faultHandler(regs*)+0x556>
c00265e3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00265e6:	eb 02                	jmp    c00265ea <Vm::faultHandler(regs*)+0x556>
c00265e8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00265ea:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00265ed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00265f2:	74 37                	je     c002662b <Vm::faultHandler(regs*)+0x597>
c00265f4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00265fa:	76 2f                	jbe    c002662b <Vm::faultHandler(regs*)+0x597>
c00265fc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026600:	50                   	push   eax
c0026601:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026605:	50                   	push   eax
c0026606:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002660a:	50                   	push   eax
c002660b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002660f:	50                   	push   eax
c0026610:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026614:	50                   	push   eax
c0026615:	6a 6f                	push   0x6f
c0026617:	6a 6f                	push   0x6f
c0026619:	68 0c 30 03 c0       	push   0xc003300c
c002661e:	e8 26 2c ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026623:	83 c4 20             	add    esp,0x20
c0026626:	e9 83 01 00 00       	jmp    c00267ae <Vm::faultHandler(regs*)+0x71a>
c002662b:	0f b7 d7             	movzx  edx,di
c002662e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026631:	0f b7 c6             	movzx  eax,si
c0026634:	81 e1 00 04 00 00    	and    ecx,0x400
c002663a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c002663d:	83 e5 01             	and    ebp,0x1
c0026640:	74 1d                	je     c002665f <Vm::faultHandler(regs*)+0x5cb>
c0026642:	55                   	push   ebp
c0026643:	55                   	push   ebp
c0026644:	50                   	push   eax
c0026645:	52                   	push   edx
c0026646:	e8 f8 f9 ff ff       	call   c0026043 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002664b:	83 c4 10             	add    esp,0x10
c002664e:	89 fa                	mov    edx,edi
c0026650:	ef                   	out    dx,eax
c0026651:	85 c9                	test   ecx,ecx
c0026653:	74 05                	je     c002665a <Vm::faultHandler(regs*)+0x5c6>
c0026655:	83 ee 04             	sub    esi,0x4
c0026658:	eb 21                	jmp    c002667b <Vm::faultHandler(regs*)+0x5e7>
c002665a:	83 c6 04             	add    esi,0x4
c002665d:	eb 1c                	jmp    c002667b <Vm::faultHandler(regs*)+0x5e7>
c002665f:	55                   	push   ebp
c0026660:	55                   	push   ebp
c0026661:	50                   	push   eax
c0026662:	52                   	push   edx
c0026663:	e8 c9 f9 ff ff       	call   c0026031 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026668:	83 c4 10             	add    esp,0x10
c002666b:	89 fa                	mov    edx,edi
c002666d:	66 ef                	out    dx,ax
c002666f:	85 c9                	test   ecx,ecx
c0026671:	74 05                	je     c0026678 <Vm::faultHandler(regs*)+0x5e4>
c0026673:	83 ee 02             	sub    esi,0x2
c0026676:	eb 03                	jmp    c002667b <Vm::faultHandler(regs*)+0x5e7>
c0026678:	83 c6 02             	add    esi,0x2
c002667b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026681:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026684:	e9 c0 00 00 00       	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026689:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026690:	83 ec 0c             	sub    esp,0xc
c0026693:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026697:	50                   	push   eax
c0026698:	e8 f4 f4 ff ff       	call   c0025b91 <Vm::inbv(unsigned short)>
c002669d:	0f b6 c0             	movzx  eax,al
c00266a0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00266a3:	eb 3a                	jmp    c00266df <Vm::faultHandler(regs*)+0x64b>
c00266a5:	83 e5 01             	and    ebp,0x1
c00266a8:	74 07                	je     c00266b1 <Vm::faultHandler(regs*)+0x61d>
c00266aa:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266ae:	ed                   	in     eax,dx
c00266af:	eb 14                	jmp    c00266c5 <Vm::faultHandler(regs*)+0x631>
c00266b1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00266b4:	66 31 f6             	xor    si,si
c00266b7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00266ba:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266be:	66 ed                	in     ax,dx
c00266c0:	0f b7 c0             	movzx  eax,ax
c00266c3:	09 f0                	or     eax,esi
c00266c5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00266c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00266cc:	eb 7e                	jmp    c002674c <Vm::faultHandler(regs*)+0x6b8>
c00266ce:	52                   	push   edx
c00266cf:	52                   	push   edx
c00266d0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00266d4:	50                   	push   eax
c00266d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266d9:	50                   	push   eax
c00266da:	e8 c5 f4 ff ff       	call   c0025ba4 <Vm::outbv(unsigned short, unsigned char)>
c00266df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00266e3:	eb 4f                	jmp    c0026734 <Vm::faultHandler(regs*)+0x6a0>
c00266e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00266e8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266ec:	83 e5 01             	and    ebp,0x1
c00266ef:	74 03                	je     c00266f4 <Vm::faultHandler(regs*)+0x660>
c00266f1:	ef                   	out    dx,eax
c00266f2:	eb d4                	jmp    c00266c8 <Vm::faultHandler(regs*)+0x634>
c00266f4:	66 ef                	out    dx,ax
c00266f6:	eb d0                	jmp    c00266c8 <Vm::faultHandler(regs*)+0x634>
c00266f8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00266ff:	83 ec 0c             	sub    esp,0xc
c0026702:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026706:	50                   	push   eax
c0026707:	e8 85 f4 ff ff       	call   c0025b91 <Vm::inbv(unsigned short)>
c002670c:	0f b6 c0             	movzx  eax,al
c002670f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026712:	eb 1d                	jmp    c0026731 <Vm::faultHandler(regs*)+0x69d>
c0026714:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026717:	83 e5 01             	and    ebp,0x1
c002671a:	74 03                	je     c002671f <Vm::faultHandler(regs*)+0x68b>
c002671c:	ed                   	in     eax,dx
c002671d:	eb 0d                	jmp    c002672c <Vm::faultHandler(regs*)+0x698>
c002671f:	66 ed                	in     ax,dx
c0026721:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026724:	0f b7 c0             	movzx  eax,ax
c0026727:	66 31 d2             	xor    dx,dx
c002672a:	09 d0                	or     eax,edx
c002672c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002672f:	eb 18                	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026731:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026734:	83 c4 10             	add    esp,0x10
c0026737:	eb 13                	jmp    c002674c <Vm::faultHandler(regs*)+0x6b8>
c0026739:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c002673c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002673f:	83 e5 01             	and    ebp,0x1
c0026742:	74 03                	je     c0026747 <Vm::faultHandler(regs*)+0x6b3>
c0026744:	ef                   	out    dx,eax
c0026745:	eb 02                	jmp    c0026749 <Vm::faultHandler(regs*)+0x6b5>
c0026747:	66 ef                	out    dx,ax
c0026749:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002674c:	b0 01                	mov    al,0x1
c002674e:	eb 60                	jmp    c00267b0 <Vm::faultHandler(regs*)+0x71c>
c0026750:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026754:	50                   	push   eax
c0026755:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026759:	50                   	push   eax
c002675a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002675e:	50                   	push   eax
c002675f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026763:	50                   	push   eax
c0026764:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026768:	50                   	push   eax
c0026769:	52                   	push   edx
c002676a:	52                   	push   edx
c002676b:	68 39 30 03 c0       	push   0xc0033039
c0026770:	e8 d4 2a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026775:	83 c4 20             	add    esp,0x20
c0026778:	83 ec 0c             	sub    esp,0xc
c002677b:	6a 60                	push   0x60
c002677d:	e8 0f f4 ff ff       	call   c0025b91 <Vm::inbv(unsigned short)>
c0026782:	83 c4 10             	add    esp,0x10
c0026785:	0f b6 d0             	movzx  edx,al
c0026788:	83 fa 1c             	cmp    edx,0x1c
c002678b:	74 05                	je     c0026792 <Vm::faultHandler(regs*)+0x6fe>
c002678d:	83 fa 5a             	cmp    edx,0x5a
c0026790:	75 e6                	jne    c0026778 <Vm::faultHandler(regs*)+0x6e4>
c0026792:	0f b6 c0             	movzx  eax,al
c0026795:	83 f8 1c             	cmp    eax,0x1c
c0026798:	74 05                	je     c002679f <Vm::faultHandler(regs*)+0x70b>
c002679a:	83 f8 5a             	cmp    eax,0x5a
c002679d:	75 0f                	jne    c00267ae <Vm::faultHandler(regs*)+0x71a>
c002679f:	83 ec 0c             	sub    esp,0xc
c00267a2:	6a 60                	push   0x60
c00267a4:	e8 e8 f3 ff ff       	call   c0025b91 <Vm::inbv(unsigned short)>
c00267a9:	83 c4 10             	add    esp,0x10
c00267ac:	eb e4                	jmp    c0026792 <Vm::faultHandler(regs*)+0x6fe>
c00267ae:	31 c0                	xor    eax,eax
c00267b0:	83 c4 2c             	add    esp,0x2c
c00267b3:	5b                   	pop    ebx
c00267b4:	5e                   	pop    esi
c00267b5:	5f                   	pop    edi
c00267b6:	5d                   	pop    ebp
c00267b7:	c3                   	ret    

c00267b8 <noCopro(unsigned long)>:
c00267b8:	c3                   	ret    

c00267b9 <nmiHandler(regs*, void*)>:
c00267b9:	83 ec 0c             	sub    esp,0xc
c00267bc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267c1:	83 ec 0c             	sub    esp,0xc
c00267c4:	50                   	push   eax
c00267c5:	e8 f0 f3 fe ff       	call   c0015bba <Computer::handleNMI()>
c00267ca:	83 c4 10             	add    esp,0x10
c00267cd:	90                   	nop
c00267ce:	83 c4 0c             	add    esp,0xc
c00267d1:	c3                   	ret    

c00267d2 <doubleFault(regs*, void*)>:
c00267d2:	55                   	push   ebp
c00267d3:	89 e5                	mov    ebp,esp
c00267d5:	83 ec 08             	sub    esp,0x8
c00267d8:	83 ec 0c             	sub    esp,0xc
c00267db:	68 98 30 03 c0       	push   0xc0033098
c00267e0:	e8 7d 9a ff ff       	call   c0020262 <KePanic(char const*)>
c00267e5:	83 c4 10             	add    esp,0x10
c00267e8:	90                   	nop
c00267e9:	c9                   	leave  
c00267ea:	c3                   	ret    

c00267eb <displayDebugInfo(regs*)>:
c00267eb:	83 ec 1c             	sub    esp,0x1c
c00267ee:	0f 20 c0             	mov    eax,cr0
c00267f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267f5:	0f 20 d0             	mov    eax,cr2
c00267f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267fc:	0f 20 d8             	mov    eax,cr3
c00267ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026803:	0f 20 e0             	mov    eax,cr4
c0026806:	89 04 24             	mov    DWORD PTR [esp],eax
c0026809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002680d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026810:	83 ec 08             	sub    esp,0x8
c0026813:	50                   	push   eax
c0026814:	68 b4 30 03 c0       	push   0xc00330b4
c0026819:	e8 2b 2a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002681e:	83 c4 10             	add    esp,0x10
c0026821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026825:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026828:	83 ec 08             	sub    esp,0x8
c002682b:	50                   	push   eax
c002682c:	68 a5 30 03 c0       	push   0xc00330a5
c0026831:	e8 13 2a ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026836:	83 c4 10             	add    esp,0x10
c0026839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002683d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026840:	83 ec 08             	sub    esp,0x8
c0026843:	50                   	push   eax
c0026844:	68 b0 30 03 c0       	push   0xc00330b0
c0026849:	e8 fb 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002684e:	83 c4 10             	add    esp,0x10
c0026851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026855:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026858:	83 ec 08             	sub    esp,0x8
c002685b:	50                   	push   eax
c002685c:	68 bf 30 03 c0       	push   0xc00330bf
c0026861:	e8 e3 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026866:	83 c4 10             	add    esp,0x10
c0026869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002686d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026870:	83 ec 08             	sub    esp,0x8
c0026873:	50                   	push   eax
c0026874:	68 ca 30 03 c0       	push   0xc00330ca
c0026879:	e8 cb 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002687e:	83 c4 10             	add    esp,0x10
c0026881:	83 ec 08             	sub    esp,0x8
c0026884:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026888:	68 d5 30 03 c0       	push   0xc00330d5
c002688d:	e8 b7 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026892:	83 c4 10             	add    esp,0x10
c0026895:	83 ec 08             	sub    esp,0x8
c0026898:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002689c:	68 e0 30 03 c0       	push   0xc00330e0
c00268a1:	e8 a3 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00268a6:	83 c4 10             	add    esp,0x10
c00268a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268ad:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268b0:	c1 e0 05             	shl    eax,0x5
c00268b3:	8d 90 80 44 03 c0    	lea    edx,[eax-0x3ffcbb80]
c00268b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268bd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268c0:	83 ec 04             	sub    esp,0x4
c00268c3:	52                   	push   edx
c00268c4:	50                   	push   eax
c00268c5:	68 eb 30 03 c0       	push   0xc00330eb
c00268ca:	e8 7a 29 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00268cf:	83 c4 10             	add    esp,0x10
c00268d2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268dd:	83 ec 0c             	sub    esp,0xc
c00268e0:	50                   	push   eax
c00268e1:	e8 77 07 ff ff       	call   c001705d <setActiveTerminal(VgaText*)>
c00268e6:	83 c4 10             	add    esp,0x10
c00268e9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268f4:	83 ec 08             	sub    esp,0x8
c00268f7:	68 fa 30 03 c0       	push   0xc00330fa
c00268fc:	50                   	push   eax
c00268fd:	e8 a8 0a ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026902:	83 c4 10             	add    esp,0x10
c0026905:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002690a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026910:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026914:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026917:	83 ec 08             	sub    esp,0x8
c002691a:	52                   	push   edx
c002691b:	50                   	push   eax
c002691c:	e8 43 0a ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026921:	83 c4 10             	add    esp,0x10
c0026924:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026929:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002692f:	83 ec 08             	sub    esp,0x8
c0026932:	68 08 31 03 c0       	push   0xc0033108
c0026937:	50                   	push   eax
c0026938:	e8 6d 0a ff ff       	call   c00173aa <VgaText::puts(char const*)>
c002693d:	83 c4 10             	add    esp,0x10
c0026940:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026945:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002694b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026950:	8b 12                	mov    edx,DWORD PTR [edx]
c0026952:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026955:	83 c2 0c             	add    edx,0xc
c0026958:	83 ec 08             	sub    esp,0x8
c002695b:	52                   	push   edx
c002695c:	50                   	push   eax
c002695d:	e8 48 0a ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026962:	83 c4 10             	add    esp,0x10
c0026965:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002696a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026970:	83 ec 08             	sub    esp,0x8
c0026973:	68 11 31 03 c0       	push   0xc0033111
c0026978:	50                   	push   eax
c0026979:	e8 2c 0a ff ff       	call   c00173aa <VgaText::puts(char const*)>
c002697e:	83 c4 10             	add    esp,0x10
c0026981:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026986:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002698c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026990:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026993:	83 ec 08             	sub    esp,0x8
c0026996:	52                   	push   edx
c0026997:	50                   	push   eax
c0026998:	e8 c7 09 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c002699d:	83 c4 10             	add    esp,0x10
c00269a0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ab:	83 ec 08             	sub    esp,0x8
c00269ae:	68 19 31 03 c0       	push   0xc0033119
c00269b3:	50                   	push   eax
c00269b4:	e8 f1 09 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c00269b9:	83 c4 10             	add    esp,0x10
c00269bc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269cb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00269ce:	83 ec 08             	sub    esp,0x8
c00269d1:	52                   	push   edx
c00269d2:	50                   	push   eax
c00269d3:	e8 8c 09 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c00269d8:	83 c4 10             	add    esp,0x10
c00269db:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269e6:	83 ec 08             	sub    esp,0x8
c00269e9:	68 21 31 03 c0       	push   0xc0033121
c00269ee:	50                   	push   eax
c00269ef:	e8 b6 09 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c00269f4:	83 c4 10             	add    esp,0x10
c00269f7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a06:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026a09:	83 ec 08             	sub    esp,0x8
c0026a0c:	52                   	push   edx
c0026a0d:	50                   	push   eax
c0026a0e:	e8 51 09 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026a13:	83 c4 10             	add    esp,0x10
c0026a16:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a21:	83 ec 08             	sub    esp,0x8
c0026a24:	68 29 31 03 c0       	push   0xc0033129
c0026a29:	50                   	push   eax
c0026a2a:	e8 7b 09 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026a2f:	83 c4 10             	add    esp,0x10
c0026a32:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a41:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026a44:	83 ec 08             	sub    esp,0x8
c0026a47:	52                   	push   edx
c0026a48:	50                   	push   eax
c0026a49:	e8 16 09 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026a4e:	83 c4 10             	add    esp,0x10
c0026a51:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a5c:	83 ec 08             	sub    esp,0x8
c0026a5f:	68 31 31 03 c0       	push   0xc0033131
c0026a64:	50                   	push   eax
c0026a65:	e8 40 09 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026a6a:	83 c4 10             	add    esp,0x10
c0026a6d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a7c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026a7f:	83 ec 08             	sub    esp,0x8
c0026a82:	52                   	push   edx
c0026a83:	50                   	push   eax
c0026a84:	e8 db 08 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026a89:	83 c4 10             	add    esp,0x10
c0026a8c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a97:	83 ec 08             	sub    esp,0x8
c0026a9a:	68 39 31 03 c0       	push   0xc0033139
c0026a9f:	50                   	push   eax
c0026aa0:	e8 05 09 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026aa5:	83 c4 10             	add    esp,0x10
c0026aa8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ab3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ab7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026aba:	83 ec 08             	sub    esp,0x8
c0026abd:	52                   	push   edx
c0026abe:	50                   	push   eax
c0026abf:	e8 a0 08 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026ac4:	83 c4 10             	add    esp,0x10
c0026ac7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026acc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ad2:	83 ec 08             	sub    esp,0x8
c0026ad5:	68 41 31 03 c0       	push   0xc0033141
c0026ada:	50                   	push   eax
c0026adb:	e8 ca 08 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026ae0:	83 c4 10             	add    esp,0x10
c0026ae3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ae8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026aee:	83 ec 08             	sub    esp,0x8
c0026af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026af5:	50                   	push   eax
c0026af6:	e8 69 08 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026afb:	83 c4 10             	add    esp,0x10
c0026afe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b09:	83 ec 08             	sub    esp,0x8
c0026b0c:	68 4a 31 03 c0       	push   0xc003314a
c0026b11:	50                   	push   eax
c0026b12:	e8 93 08 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026b17:	83 c4 10             	add    esp,0x10
c0026b1a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b25:	83 ec 08             	sub    esp,0x8
c0026b28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b2c:	50                   	push   eax
c0026b2d:	e8 32 08 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026b32:	83 c4 10             	add    esp,0x10
c0026b35:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b40:	83 ec 08             	sub    esp,0x8
c0026b43:	68 52 31 03 c0       	push   0xc0033152
c0026b48:	50                   	push   eax
c0026b49:	e8 5c 08 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026b4e:	83 c4 10             	add    esp,0x10
c0026b51:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b5c:	83 ec 08             	sub    esp,0x8
c0026b5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026b63:	50                   	push   eax
c0026b64:	e8 fb 07 ff ff       	call   c0017364 <VgaText::putx(unsigned int)>
c0026b69:	83 c4 10             	add    esp,0x10
c0026b6c:	fa                   	cli    
c0026b6d:	f4                   	hlt    
c0026b6e:	eb fe                	jmp    c0026b6e <displayDebugInfo(regs*)+0x383>

c0026b70 <HalSystemIdle()>:
c0026b70:	56                   	push   esi
c0026b71:	53                   	push   ebx
c0026b72:	83 ec 14             	sub    esp,0x14
c0026b75:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026b7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b80:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026b86:	83 e0 04             	and    eax,0x4
c0026b89:	0f b6 c0             	movzx  eax,al
c0026b8c:	85 c0                	test   eax,eax
c0026b8e:	0f 95 c0             	setne  al
c0026b91:	0f b6 c0             	movzx  eax,al
c0026b94:	85 c0                	test   eax,eax
c0026b96:	74 4c                	je     c0026be4 <HalSystemIdle()+0x74>
c0026b98:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026b9d:	83 ec 08             	sub    esp,0x8
c0026ba0:	68 e1 00 00 00       	push   0xe1
c0026ba5:	50                   	push   eax
c0026ba6:	e8 19 ee fe ff       	call   c00159c4 <Computer::rdmsr(unsigned int)>
c0026bab:	83 c4 10             	add    esp,0x10
c0026bae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bb6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026bbf:	83 e2 02             	and    edx,0x2
c0026bc2:	89 d3                	mov    ebx,edx
c0026bc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026bc8:	83 e2 00             	and    edx,0x0
c0026bcb:	89 d6                	mov    esi,edx
c0026bcd:	56                   	push   esi
c0026bce:	53                   	push   ebx
c0026bcf:	68 e1 00 00 00       	push   0xe1
c0026bd4:	50                   	push   eax
c0026bd5:	e8 16 ee fe ff       	call   c00159f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026bda:	83 c4 10             	add    esp,0x10
c0026bdd:	e8 b2 95 fd ff       	call   c0000194 <doTPAUSE>
c0026be2:	eb 01                	jmp    c0026be5 <HalSystemIdle()+0x75>
c0026be4:	f4                   	hlt    
c0026be5:	90                   	nop
c0026be6:	83 c4 14             	add    esp,0x14
c0026be9:	5b                   	pop    ebx
c0026bea:	5e                   	pop    esi
c0026beb:	c3                   	ret    

c0026bec <displayProgramFault(char const*)>:
c0026bec:	83 ec 0c             	sub    esp,0xc
c0026bef:	83 ec 0c             	sub    esp,0xc
c0026bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bf6:	e8 4e 26 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026bfb:	83 c4 10             	add    esp,0x10
c0026bfe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c0e:	85 c0                	test   eax,eax
c0026c10:	74 21                	je     c0026c33 <displayProgramFault(char const*)+0x47>
c0026c12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c22:	6a 04                	push   0x4
c0026c24:	6a 0f                	push   0xf
c0026c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c2a:	50                   	push   eax
c0026c2b:	e8 ec 07 ff ff       	call   c001741c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026c30:	83 c4 10             	add    esp,0x10
c0026c33:	90                   	nop
c0026c34:	83 c4 0c             	add    esp,0xc
c0026c37:	c3                   	ret    

c0026c38 <gpFault(regs*, void*)>:
c0026c38:	83 ec 1c             	sub    esp,0x1c
c0026c3b:	c7 05 74 02 04 c0 94 60 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0026094
c0026c45:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c4a:	85 c0                	test   eax,eax
c0026c4c:	74 1e                	je     c0026c6c <gpFault(regs*, void*)+0x34>
c0026c4e:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c53:	83 ec 0c             	sub    esp,0xc
c0026c56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c5a:	ff d0                	call   eax
c0026c5c:	83 c4 10             	add    esp,0x10
c0026c5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026c63:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026c68:	85 c0                	test   eax,eax
c0026c6a:	75 2e                	jne    c0026c9a <gpFault(regs*, void*)+0x62>
c0026c6c:	83 ec 0c             	sub    esp,0xc
c0026c6f:	68 5a 31 03 c0       	push   0xc003315a
c0026c74:	e8 73 ff ff ff       	call   c0026bec <displayProgramFault(char const*)>
c0026c79:	83 c4 10             	add    esp,0x10
c0026c7c:	83 ec 0c             	sub    esp,0xc
c0026c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c83:	e8 63 fb ff ff       	call   c00267eb <displayDebugInfo(regs*)>
c0026c88:	83 c4 10             	add    esp,0x10
c0026c8b:	83 ec 0c             	sub    esp,0xc
c0026c8e:	6a 00                	push   0x0
c0026c90:	e8 2f ee ff ff       	call   c0025ac4 <Thr::terminateFromIRQ(int)>
c0026c95:	83 c4 10             	add    esp,0x10
c0026c98:	eb 01                	jmp    c0026c9b <gpFault(regs*, void*)+0x63>
c0026c9a:	90                   	nop
c0026c9b:	83 c4 1c             	add    esp,0x1c
c0026c9e:	c3                   	ret    

c0026c9f <pgFault(regs*, void*)>:
c0026c9f:	83 ec 1c             	sub    esp,0x1c
c0026ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ca6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026ca9:	0f 20 d0             	mov    eax,cr2
c0026cac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026cb4:	83 ec 04             	sub    esp,0x4
c0026cb7:	52                   	push   edx
c0026cb8:	50                   	push   eax
c0026cb9:	68 38 32 03 c0       	push   0xc0033238
c0026cbe:	e8 86 25 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026cc3:	83 c4 10             	add    esp,0x10
c0026cc6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ccd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026cd0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026cd6:	0f 20 d2             	mov    edx,cr2
c0026cd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026cdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026ce1:	83 ec 08             	sub    esp,0x8
c0026ce4:	52                   	push   edx
c0026ce5:	50                   	push   eax
c0026ce6:	e8 a9 1f ff ff       	call   c0018c94 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	0f b6 c0             	movzx  eax,al
c0026cf1:	85 c0                	test   eax,eax
c0026cf3:	75 2e                	jne    c0026d23 <pgFault(regs*, void*)+0x84>
c0026cf5:	83 ec 0c             	sub    esp,0xc
c0026cf8:	68 73 31 03 c0       	push   0xc0033173
c0026cfd:	e8 ea fe ff ff       	call   c0026bec <displayProgramFault(char const*)>
c0026d02:	83 c4 10             	add    esp,0x10
c0026d05:	83 ec 0c             	sub    esp,0xc
c0026d08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d0c:	e8 da fa ff ff       	call   c00267eb <displayDebugInfo(regs*)>
c0026d11:	83 c4 10             	add    esp,0x10
c0026d14:	83 ec 0c             	sub    esp,0xc
c0026d17:	6a 00                	push   0x0
c0026d19:	e8 a6 ed ff ff       	call   c0025ac4 <Thr::terminateFromIRQ(int)>
c0026d1e:	83 c4 10             	add    esp,0x10
c0026d21:	eb 01                	jmp    c0026d24 <pgFault(regs*, void*)+0x85>
c0026d23:	90                   	nop
c0026d24:	83 c4 1c             	add    esp,0x1c
c0026d27:	c3                   	ret    

c0026d28 <otherISRHandler(regs*, void*)>:
c0026d28:	83 ec 0c             	sub    esp,0xc
c0026d2b:	83 ec 0c             	sub    esp,0xc
c0026d2e:	68 60 32 03 c0       	push   0xc0033260
c0026d33:	e8 b4 fe ff ff       	call   c0026bec <displayProgramFault(char const*)>
c0026d38:	83 c4 10             	add    esp,0x10
c0026d3b:	83 ec 0c             	sub    esp,0xc
c0026d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d42:	e8 a4 fa ff ff       	call   c00267eb <displayDebugInfo(regs*)>
c0026d47:	83 c4 10             	add    esp,0x10
c0026d4a:	83 ec 0c             	sub    esp,0xc
c0026d4d:	6a 00                	push   0x0
c0026d4f:	e8 70 ed ff ff       	call   c0025ac4 <Thr::terminateFromIRQ(int)>
c0026d54:	83 c4 10             	add    esp,0x10
c0026d57:	90                   	nop
c0026d58:	83 c4 0c             	add    esp,0xc
c0026d5b:	c3                   	ret    

c0026d5c <opcodeFault(regs*, void*)>:
c0026d5c:	55                   	push   ebp
c0026d5d:	89 e5                	mov    ebp,esp
c0026d5f:	83 ec 08             	sub    esp,0x8
c0026d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026d68:	83 ec 08             	sub    esp,0x8
c0026d6b:	50                   	push   eax
c0026d6c:	68 7e 31 03 c0       	push   0xc003317e
c0026d71:	e8 d3 24 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026d76:	83 c4 10             	add    esp,0x10
c0026d79:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026d7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d84:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026d8a:	0f b6 c0             	movzx  eax,al
c0026d8d:	85 c0                	test   eax,eax
c0026d8f:	74 21                	je     c0026db2 <opcodeFault(regs*, void*)+0x56>
c0026d91:	83 ec 0c             	sub    esp,0xc
c0026d94:	68 88 32 03 c0       	push   0xc0033288
c0026d99:	e8 ab 24 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026d9e:	83 c4 10             	add    esp,0x10
c0026da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026da7:	8d 50 19             	lea    edx,[eax+0x19]
c0026daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026dad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026db0:	eb 2b                	jmp    c0026ddd <opcodeFault(regs*, void*)+0x81>
c0026db2:	83 ec 0c             	sub    esp,0xc
c0026db5:	68 8c 31 03 c0       	push   0xc003318c
c0026dba:	e8 2d fe ff ff       	call   c0026bec <displayProgramFault(char const*)>
c0026dbf:	83 c4 10             	add    esp,0x10
c0026dc2:	83 ec 0c             	sub    esp,0xc
c0026dc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dc8:	e8 1e fa ff ff       	call   c00267eb <displayDebugInfo(regs*)>
c0026dcd:	83 c4 10             	add    esp,0x10
c0026dd0:	83 ec 0c             	sub    esp,0xc
c0026dd3:	6a 00                	push   0x0
c0026dd5:	e8 ea ec ff ff       	call   c0025ac4 <Thr::terminateFromIRQ(int)>
c0026dda:	83 c4 10             	add    esp,0x10
c0026ddd:	c9                   	leave  
c0026dde:	c3                   	ret    

c0026ddf <i386SaveCoprocessor(void*)>:
c0026ddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026de3:	83 c0 3f             	add    eax,0x3f
c0026de6:	83 e0 c0             	and    eax,0xffffffc0
c0026de9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026ded:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026df3 <i386LoadCoprocessor(void*)>:
c0026df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026df7:	83 c0 3f             	add    eax,0x3f
c0026dfa:	83 e0 c0             	and    eax,0xffffffc0
c0026dfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e01:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026e07 <x87EmulHandler(regs*, void*)>:
c0026e07:	53                   	push   ebx
c0026e08:	83 ec 08             	sub    esp,0x8
c0026e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e10:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026e14:	74 10                	je     c0026e26 <x87EmulHandler(regs*, void*)+0x1f>
c0026e16:	83 ec 0c             	sub    esp,0xc
c0026e19:	68 99 31 03 c0       	push   0xc0033199
c0026e1e:	e8 3f 94 ff ff       	call   c0020262 <KePanic(char const*)>
c0026e23:	83 c4 10             	add    esp,0x10
c0026e26:	0f 20 c0             	mov    eax,cr0
c0026e29:	a8 08                	test   al,0x8
c0026e2b:	74 59                	je     c0026e86 <x87EmulHandler(regs*, void*)+0x7f>
c0026e2d:	0f 06                	clts   
c0026e2f:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e34:	85 c0                	test   eax,eax
c0026e36:	74 0e                	je     c0026e46 <x87EmulHandler(regs*, void*)+0x3f>
c0026e38:	83 ec 0c             	sub    esp,0xc
c0026e3b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e3e:	e8 9c ff ff ff       	call   c0026ddf <i386SaveCoprocessor(void*)>
c0026e43:	83 c4 10             	add    esp,0x10
c0026e46:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026e4c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026e50:	75 12                	jne    c0026e64 <x87EmulHandler(regs*, void*)+0x5d>
c0026e52:	83 ec 0c             	sub    esp,0xc
c0026e55:	68 40 02 00 00       	push   0x240
c0026e5a:	e8 5b f5 fe ff       	call   c00163ba <malloc>
c0026e5f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026e62:	eb 10                	jmp    c0026e74 <x87EmulHandler(regs*, void*)+0x6d>
c0026e64:	83 ec 0c             	sub    esp,0xc
c0026e67:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e6c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e6f:	e8 7f ff ff ff       	call   c0026df3 <i386LoadCoprocessor(void*)>
c0026e74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e79:	83 c4 10             	add    esp,0x10
c0026e7c:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026e81:	83 c4 08             	add    esp,0x8
c0026e84:	5b                   	pop    ebx
c0026e85:	c3                   	ret    
c0026e86:	83 ec 0c             	sub    esp,0xc
c0026e89:	68 ad 31 03 c0       	push   0xc00331ad
c0026e8e:	e8 b6 23 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026e93:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026e9b:	83 c4 18             	add    esp,0x18
c0026e9e:	5b                   	pop    ebx
c0026e9f:	e9 20 ec ff ff       	jmp    c0025ac4 <Thr::terminateFromIRQ(int)>

c0026ea4 <HalInitialiseCoprocessor()>:
c0026ea4:	83 ec 10             	sub    esp,0x10
c0026ea7:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026eb1:	6a 00                	push   0x0
c0026eb3:	68 07 6e 02 c0       	push   0xc0026e07
c0026eb8:	6a 07                	push   0x7
c0026eba:	e8 57 49 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ebf:	e8 9c 70 00 00       	call   c002df60 <avxDetect>
c0026ec4:	83 c4 10             	add    esp,0x10
c0026ec7:	85 c0                	test   eax,eax
c0026ec9:	74 1c                	je     c0026ee7 <HalInitialiseCoprocessor()+0x43>
c0026ecb:	c7 05 70 02 04 c0 8a df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df8a
c0026ed5:	c7 05 6c 02 04 c0 9b df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002df9b
c0026edf:	83 c4 0c             	add    esp,0xc
c0026ee2:	e9 c5 70 00 00       	jmp    c002dfac <avxInit>
c0026ee7:	e8 e4 73 00 00       	call   c002e2d0 <sseDetect>
c0026eec:	85 c0                	test   eax,eax
c0026eee:	74 1c                	je     c0026f0c <HalInitialiseCoprocessor()+0x68>
c0026ef0:	c7 05 70 02 04 c0 e8 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e2e8
c0026efa:	c7 05 6c 02 04 c0 f0 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e2f0
c0026f04:	83 c4 0c             	add    esp,0xc
c0026f07:	e9 ec 73 00 00       	jmp    c002e2f8 <sseInit>
c0026f0c:	e8 05 74 00 00       	call   c002e316 <x87Detect>
c0026f11:	85 c0                	test   eax,eax
c0026f13:	74 1c                	je     c0026f31 <HalInitialiseCoprocessor()+0x8d>
c0026f15:	c7 05 70 02 04 c0 31 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e331
c0026f1f:	c7 05 6c 02 04 c0 38 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e338
c0026f29:	83 c4 0c             	add    esp,0xc
c0026f2c:	e9 0e 74 00 00       	jmp    c002e33f <x87Init>
c0026f31:	c7 05 70 02 04 c0 b8 67 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00267b8
c0026f3b:	c7 05 6c 02 04 c0 b8 67 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00267b8
c0026f45:	0f 20 c0             	mov    eax,cr0
c0026f48:	83 c8 04             	or     eax,0x4
c0026f4b:	0f 22 c0             	mov    cr0,eax
c0026f4e:	83 c4 0c             	add    esp,0xc
c0026f51:	c3                   	ret    

c0026f52 <HalPanic(char const*)>:
c0026f52:	53                   	push   ebx
c0026f53:	83 ec 10             	sub    esp,0x10
c0026f56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026f5a:	fa                   	cli    
c0026f5b:	53                   	push   ebx
c0026f5c:	68 c3 31 03 c0       	push   0xc00331c3
c0026f61:	e8 e3 22 ff ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0026f66:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026f6b:	83 c4 10             	add    esp,0x10
c0026f6e:	85 c0                	test   eax,eax
c0026f70:	74 09                	je     c0026f7b <HalPanic(char const*)+0x29>
c0026f72:	83 ec 0c             	sub    esp,0xc
c0026f75:	53                   	push   ebx
c0026f76:	ff d0                	call   eax
c0026f78:	83 c4 10             	add    esp,0x10
c0026f7b:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026f80:	85 c0                	test   eax,eax
c0026f82:	0f 84 dc 00 00 00    	je     c0027064 <HalPanic(char const*)+0x112>
c0026f88:	52                   	push   edx
c0026f89:	6a 01                	push   0x1
c0026f8b:	6a 0f                	push   0xf
c0026f8d:	50                   	push   eax
c0026f8e:	e8 25 ff fe ff       	call   c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f93:	59                   	pop    ecx
c0026f94:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f9a:	e8 09 01 ff ff       	call   c00170a8 <VgaText::clearScreen()>
c0026f9f:	58                   	pop    eax
c0026fa0:	5a                   	pop    edx
c0026fa1:	68 94 12 03 c0       	push   0xc0031294
c0026fa6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fac:	e8 3f ff fe ff       	call   c0016ef0 <VgaText::setTitle(char*)>
c0026fb1:	83 c4 0c             	add    esp,0xc
c0026fb4:	6a 01                	push   0x1
c0026fb6:	6a 0f                	push   0xf
c0026fb8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fbe:	e8 f5 fe fe ff       	call   c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026fc3:	59                   	pop    ecx
c0026fc4:	58                   	pop    eax
c0026fc5:	68 dc 31 03 c0       	push   0xc00331dc
c0026fca:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fd0:	e8 d5 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026fd5:	83 c4 0c             	add    esp,0xc
c0026fd8:	6a 0f                	push   0xf
c0026fda:	6a 01                	push   0x1
c0026fdc:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fe2:	e8 d1 fe fe ff       	call   c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026fe7:	58                   	pop    eax
c0026fe8:	5a                   	pop    edx
c0026fe9:	68 e5 31 03 c0       	push   0xc00331e5
c0026fee:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ff4:	e8 b1 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0026ff9:	83 c4 0c             	add    esp,0xc
c0026ffc:	6a 01                	push   0x1
c0026ffe:	6a 0f                	push   0xf
c0027000:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027006:	e8 ad fe fe ff       	call   c0016eb8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002700b:	59                   	pop    ecx
c002700c:	58                   	pop    eax
c002700d:	68 29 32 03 c0       	push   0xc0033229
c0027012:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027018:	e8 8d 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c002701d:	58                   	pop    eax
c002701e:	5a                   	pop    edx
c002701f:	68 f2 31 03 c0       	push   0xc00331f2
c0027024:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002702a:	e8 7b 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c002702f:	59                   	pop    ecx
c0027030:	58                   	pop    eax
c0027031:	68 2c 32 03 c0       	push   0xc003322c
c0027036:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002703c:	e8 69 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0027041:	58                   	pop    eax
c0027042:	5a                   	pop    edx
c0027043:	53                   	push   ebx
c0027044:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002704a:	e8 5b 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c002704f:	59                   	pop    ecx
c0027050:	5b                   	pop    ebx
c0027051:	68 29 32 03 c0       	push   0xc0033229
c0027056:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002705c:	e8 49 03 ff ff       	call   c00173aa <VgaText::puts(char const*)>
c0027061:	83 c4 10             	add    esp,0x10
c0027064:	eb fe                	jmp    c0027064 <HalPanic(char const*)+0x112>

c0027066 <HalQueryPerformanceCounter()>:
c0027066:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002706b:	31 d2                	xor    edx,edx
c002706d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0027073:	31 c0                	xor    eax,eax
c0027075:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c002707c:	74 02                	je     c0027080 <HalQueryPerformanceCounter()+0x1a>
c002707e:	0f 31                	rdtsc  
c0027080:	c3                   	ret    

c0027081 <HalInitialise()>:
c0027081:	53                   	push   ebx
c0027082:	83 ec 08             	sub    esp,0x8
c0027085:	e8 bc 49 ff ff       	call   c001ba46 <setupINTS()>
c002708a:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0027091:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027096:	75 0f                	jne    c00270a7 <HalInitialise()+0x26>
c0027098:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c002709e:	83 e2 fe             	and    edx,0xfffffffe
c00270a1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270a7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270ad:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c00270b4:	83 e2 fe             	and    edx,0xfffffffe
c00270b7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270bd:	e8 9e 02 00 00       	call   c0027360 <picOpen()>
c00270c2:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00270c9:	74 0a                	je     c00270d5 <HalInitialise()+0x54>
c00270cb:	e8 e0 01 00 00       	call   c00272b0 <picDisable()>
c00270d0:	e8 03 68 00 00       	call   c002d8d8 <apicOpen()>
c00270d5:	bb 0f 00 00 00       	mov    ebx,0xf
c00270da:	50                   	push   eax
c00270db:	6a 00                	push   0x0
c00270dd:	68 28 6d 02 c0       	push   0xc0026d28
c00270e2:	6a 00                	push   0x0
c00270e4:	e8 2d 47 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270e9:	83 c4 0c             	add    esp,0xc
c00270ec:	6a 00                	push   0x0
c00270ee:	68 28 6d 02 c0       	push   0xc0026d28
c00270f3:	6a 01                	push   0x1
c00270f5:	e8 1c 47 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270fa:	83 c4 0c             	add    esp,0xc
c00270fd:	6a 00                	push   0x0
c00270ff:	68 b9 67 02 c0       	push   0xc00267b9
c0027104:	6a 02                	push   0x2
c0027106:	e8 0b 47 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002710b:	83 c4 0c             	add    esp,0xc
c002710e:	6a 00                	push   0x0
c0027110:	68 28 6d 02 c0       	push   0xc0026d28
c0027115:	6a 03                	push   0x3
c0027117:	e8 fa 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002711c:	83 c4 0c             	add    esp,0xc
c002711f:	6a 00                	push   0x0
c0027121:	68 28 6d 02 c0       	push   0xc0026d28
c0027126:	6a 04                	push   0x4
c0027128:	e8 e9 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002712d:	83 c4 0c             	add    esp,0xc
c0027130:	6a 00                	push   0x0
c0027132:	68 28 6d 02 c0       	push   0xc0026d28
c0027137:	6a 05                	push   0x5
c0027139:	e8 d8 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002713e:	83 c4 0c             	add    esp,0xc
c0027141:	6a 00                	push   0x0
c0027143:	68 5c 6d 02 c0       	push   0xc0026d5c
c0027148:	6a 06                	push   0x6
c002714a:	e8 c7 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002714f:	83 c4 0c             	add    esp,0xc
c0027152:	6a 00                	push   0x0
c0027154:	68 d2 67 02 c0       	push   0xc00267d2
c0027159:	6a 08                	push   0x8
c002715b:	e8 b6 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027160:	83 c4 0c             	add    esp,0xc
c0027163:	6a 00                	push   0x0
c0027165:	68 28 6d 02 c0       	push   0xc0026d28
c002716a:	6a 09                	push   0x9
c002716c:	e8 a5 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027171:	83 c4 0c             	add    esp,0xc
c0027174:	6a 00                	push   0x0
c0027176:	68 28 6d 02 c0       	push   0xc0026d28
c002717b:	6a 0a                	push   0xa
c002717d:	e8 94 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027182:	83 c4 0c             	add    esp,0xc
c0027185:	6a 00                	push   0x0
c0027187:	68 28 6d 02 c0       	push   0xc0026d28
c002718c:	6a 0b                	push   0xb
c002718e:	e8 83 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027193:	83 c4 0c             	add    esp,0xc
c0027196:	6a 00                	push   0x0
c0027198:	68 38 6c 02 c0       	push   0xc0026c38
c002719d:	6a 0d                	push   0xd
c002719f:	e8 72 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271a4:	83 c4 0c             	add    esp,0xc
c00271a7:	6a 00                	push   0x0
c00271a9:	68 9f 6c 02 c0       	push   0xc0026c9f
c00271ae:	6a 0e                	push   0xe
c00271b0:	e8 61 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271b5:	83 c4 10             	add    esp,0x10
c00271b8:	50                   	push   eax
c00271b9:	6a 00                	push   0x0
c00271bb:	68 28 6d 02 c0       	push   0xc0026d28
c00271c0:	53                   	push   ebx
c00271c1:	43                   	inc    ebx
c00271c2:	e8 4f 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271c7:	83 c4 10             	add    esp,0x10
c00271ca:	83 fb 1e             	cmp    ebx,0x1e
c00271cd:	75 e9                	jne    c00271b8 <HalInitialise()+0x137>
c00271cf:	50                   	push   eax
c00271d0:	6a 00                	push   0x0
c00271d2:	68 11 1b 02 c0       	push   0xc0021b11
c00271d7:	6a 60                	push   0x60
c00271d9:	e8 38 46 ff ff       	call   c001b816 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00271e3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00271ed:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00271f4:	e8 c1 f1 fe ff       	call   c00163ba <malloc>
c00271f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00271fc:	89 c3                	mov    ebx,eax
c00271fe:	e8 3b 09 00 00       	call   c0027b3e <RTC::RTC()>
c0027203:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002720d:	5a                   	pop    edx
c002720e:	59                   	pop    ecx
c002720f:	53                   	push   ebx
c0027210:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027216:	e8 af 40 ff ff       	call   c001b2ca <Device::addChild(Device*)>
c002721b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002721d:	6a 00                	push   0x0
c002721f:	6a 00                	push   0x0
c0027221:	6a 00                	push   0x0
c0027223:	53                   	push   ebx
c0027224:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027227:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002722c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027232:	83 c4 28             	add    esp,0x28
c0027235:	5b                   	pop    ebx
c0027236:	c3                   	ret    

c0027237 <HalMakeBeep(int)>:
c0027237:	53                   	push   ebx
c0027238:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c002723c:	85 db                	test   ebx,ebx
c002723e:	75 07                	jne    c0027247 <HalMakeBeep(int)+0x10>
c0027240:	e4 61                	in     al,0x61
c0027242:	83 e0 fc             	and    eax,0xfffffffc
c0027245:	eb 26                	jmp    c002726d <HalMakeBeep(int)+0x36>
c0027247:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002724c:	99                   	cdq    
c002724d:	f7 fb                	idiv   ebx
c002724f:	89 c1                	mov    ecx,eax
c0027251:	b0 b6                	mov    al,0xb6
c0027253:	e6 43                	out    0x43,al
c0027255:	88 c8                	mov    al,cl
c0027257:	e6 42                	out    0x42,al
c0027259:	89 c8                	mov    eax,ecx
c002725b:	c1 e8 08             	shr    eax,0x8
c002725e:	e6 42                	out    0x42,al
c0027260:	e4 61                	in     al,0x61
c0027262:	89 c2                	mov    edx,eax
c0027264:	83 ca 03             	or     edx,0x3
c0027267:	38 d0                	cmp    al,dl
c0027269:	74 04                	je     c002726f <HalMakeBeep(int)+0x38>
c002726b:	88 d0                	mov    al,dl
c002726d:	e6 61                	out    0x61,al
c002726f:	5b                   	pop    ebx
c0027270:	c3                   	ret    

c0027271 <HalGetRand()>:
c0027271:	31 c0                	xor    eax,eax
c0027273:	c3                   	ret    

c0027274 <HalEndOfInterrupt(int)>:
c0027274:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002727b:	74 23                	je     c00272a0 <HalEndOfInterrupt(int)+0x2c>
c002727d:	83 ec 14             	sub    esp,0x14
c0027280:	6a 1b                	push   0x1b
c0027282:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027288:	e8 37 e7 fe ff       	call   c00159c4 <Computer::rdmsr(unsigned int)>
c002728d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0027292:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c002729c:	83 c4 1c             	add    esp,0x1c
c002729f:	c3                   	ret    
c00272a0:	e9 3f 02 00 00       	jmp    c00274e4 <picEOI(int)>

c00272a5 <HalRestart()>:
c00272a5:	c3                   	ret    

c00272a6 <HalShutdown()>:
c00272a6:	c3                   	ret    

c00272a7 <HalSleep()>:
c00272a7:	c3                   	ret    

c00272a8 <picIoWait()>:
c00272a8:	eb 00                	jmp    c00272aa <picIoWait()+0x2>
c00272aa:	eb 00                	jmp    c00272ac <picIoWait()+0x4>
c00272ac:	90                   	nop
c00272ad:	c3                   	ret    
c00272ae:	66 90                	xchg   ax,ax

c00272b0 <picDisable()>:
c00272b0:	83 ec 10             	sub    esp,0x10
c00272b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00272ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00272bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00272c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00272c8:	ee                   	out    dx,al
c00272c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00272d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00272d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00272d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00272de:	ee                   	out    dx,al
c00272df:	90                   	nop
c00272e0:	83 c4 10             	add    esp,0x10
c00272e3:	c3                   	ret    

c00272e4 <picGetIRQReg(int)>:
c00272e4:	83 ec 10             	sub    esp,0x10
c00272e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272eb:	0f b6 c0             	movzx  eax,al
c00272ee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00272f5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00272f9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00272fd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027302:	ee                   	out    dx,al
c0027303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027307:	0f b6 c0             	movzx  eax,al
c002730a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027311:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027315:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027319:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002731e:	ee                   	out    dx,al
c002731f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027326:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002732b:	89 c2                	mov    edx,eax
c002732d:	ec                   	in     al,dx
c002732e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027332:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027336:	0f b6 c0             	movzx  eax,al
c0027339:	c1 e0 08             	shl    eax,0x8
c002733c:	89 c1                	mov    ecx,eax
c002733e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027345:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002734a:	89 c2                	mov    edx,eax
c002734c:	ec                   	in     al,dx
c002734d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027351:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027355:	0f b6 c0             	movzx  eax,al
c0027358:	09 c8                	or     eax,ecx
c002735a:	83 c4 10             	add    esp,0x10
c002735d:	c3                   	ret    
c002735e:	66 90                	xchg   ax,ax

c0027360 <picOpen()>:
c0027360:	83 ec 50             	sub    esp,0x50
c0027363:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002736a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002736f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027373:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027377:	ee                   	out    dx,al
c0027378:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c002737f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027384:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027388:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002738c:	ee                   	out    dx,al
c002738d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027395:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c002739d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00273a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00273a8:	89 c2                	mov    edx,eax
c00273aa:	ec                   	in     al,dx
c00273ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00273af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00273b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00273b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00273be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00273c2:	89 c2                	mov    edx,eax
c00273c4:	ec                   	in     al,dx
c00273c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00273c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00273cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00273d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00273d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00273dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00273e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00273e5:	ee                   	out    dx,al
c00273e6:	e8 bd fe ff ff       	call   c00272a8 <picIoWait()>
c00273eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00273f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00273f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00273fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00273ff:	ee                   	out    dx,al
c0027400:	e8 a3 fe ff ff       	call   c00272a8 <picIoWait()>
c0027405:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027409:	0f b6 c0             	movzx  eax,al
c002740c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027413:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027417:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002741b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002741f:	ee                   	out    dx,al
c0027420:	e8 83 fe ff ff       	call   c00272a8 <picIoWait()>
c0027425:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027429:	0f b6 c0             	movzx  eax,al
c002742c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027433:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027437:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002743b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002743f:	ee                   	out    dx,al
c0027440:	e8 63 fe ff ff       	call   c00272a8 <picIoWait()>
c0027445:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c002744c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027451:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027455:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027459:	ee                   	out    dx,al
c002745a:	e8 49 fe ff ff       	call   c00272a8 <picIoWait()>
c002745f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027466:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c002746b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c002746f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0027473:	ee                   	out    dx,al
c0027474:	e8 2f fe ff ff       	call   c00272a8 <picIoWait()>
c0027479:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027480:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027485:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027489:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002748d:	ee                   	out    dx,al
c002748e:	e8 15 fe ff ff       	call   c00272a8 <picIoWait()>
c0027493:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c002749a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c002749f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00274a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00274a7:	ee                   	out    dx,al
c00274a8:	e8 fb fd ff ff       	call   c00272a8 <picIoWait()>
c00274ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00274b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00274b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00274bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00274c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00274c5:	ee                   	out    dx,al
c00274c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00274cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00274d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00274d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00274da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00274de:	ee                   	out    dx,al
c00274df:	90                   	nop
c00274e0:	83 c4 50             	add    esp,0x50
c00274e3:	c3                   	ret    

c00274e4 <picEOI(int)>:
c00274e4:	83 ec 10             	sub    esp,0x10
c00274e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00274ec:	75 1e                	jne    c002750c <picEOI(int)+0x28>
c00274ee:	6a 0b                	push   0xb
c00274f0:	e8 ef fd ff ff       	call   c00272e4 <picGetIRQReg(int)>
c00274f5:	83 c4 04             	add    esp,0x4
c00274f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00274fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027502:	25 80 00 00 00       	and    eax,0x80
c0027507:	74 73                	je     c002757c <picEOI(int)+0x98>
c0027509:	8d 76 00             	lea    esi,[esi+0x0]
c002750c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027511:	75 31                	jne    c0027544 <picEOI(int)+0x60>
c0027513:	6a 0b                	push   0xb
c0027515:	e8 ca fd ff ff       	call   c00272e4 <picGetIRQReg(int)>
c002751a:	83 c4 04             	add    esp,0x4
c002751d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027526:	98                   	cwde   
c0027527:	85 c0                	test   eax,eax
c0027529:	78 19                	js     c0027544 <picEOI(int)+0x60>
c002752b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027532:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027537:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002753b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027540:	ee                   	out    dx,al
c0027541:	eb 3d                	jmp    c0027580 <picEOI(int)+0x9c>
c0027543:	90                   	nop
c0027544:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027549:	7e 19                	jle    c0027564 <picEOI(int)+0x80>
c002754b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027552:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027557:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002755b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027560:	ee                   	out    dx,al
c0027561:	8d 76 00             	lea    esi,[esi+0x0]
c0027564:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002756b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027570:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027574:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027579:	ee                   	out    dx,al
c002757a:	eb 04                	jmp    c0027580 <picEOI(int)+0x9c>
c002757c:	90                   	nop
c002757d:	8d 76 00             	lea    esi,[esi+0x0]
c0027580:	83 c4 10             	add    esp,0x10
c0027583:	c3                   	ret    

c0027584 <RTC::open(int, int, void*)>:
c0027584:	31 c0                	xor    eax,eax
c0027586:	c3                   	ret    
c0027587:	90                   	nop

c0027588 <RTC::close(int, int, void*)>:
c0027588:	31 c0                	xor    eax,eax
c002758a:	c3                   	ret    
c002758b:	90                   	nop

c002758c <RTC::timeInSecondsUTC()>:
c002758c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027590:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027596:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002759c:	c3                   	ret    
c002759d:	90                   	nop

c002759e <RTC::timeInDatetimeUTC()>:
c002759e:	53                   	push   ebx
c002759f:	83 ec 14             	sub    esp,0x14
c00275a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00275a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00275ac:	50                   	push   eax
c00275ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00275b0:	83 c4 0c             	add    esp,0xc
c00275b3:	52                   	push   edx
c00275b4:	50                   	push   eax
c00275b5:	53                   	push   ebx
c00275b6:	e8 83 3a ff ff       	call   c001b03e <secondsToDatetime(unsigned long long)>
c00275bb:	89 d8                	mov    eax,ebx
c00275bd:	83 c4 14             	add    esp,0x14
c00275c0:	5b                   	pop    ebx
c00275c1:	c2 04 00             	ret    0x4

c00275c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00275c4:	56                   	push   esi
c00275c5:	53                   	push   ebx
c00275c6:	83 ec 14             	sub    esp,0x14
c00275c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00275cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00275cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00275d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00275d6:	52                   	push   edx
c00275d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00275db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00275df:	50                   	push   eax
c00275e0:	e8 59 3a ff ff       	call   c001b03e <secondsToDatetime(unsigned long long)>
c00275e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00275e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00275ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00275f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00275f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00275f9:	89 f0                	mov    eax,esi
c00275fb:	83 c4 20             	add    esp,0x20
c00275fe:	5b                   	pop    ebx
c00275ff:	5e                   	pop    esi
c0027600:	ff e0                	jmp    eax

c0027602 <RTC::~RTC()>:
c0027602:	83 ec 0c             	sub    esp,0xc
c0027605:	ba c8 32 03 c0       	mov    edx,0xc00332c8
c002760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760e:	89 10                	mov    DWORD PTR [eax],edx
c0027610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027614:	83 ec 0c             	sub    esp,0xc
c0027617:	50                   	push   eax
c0027618:	e8 b3 37 ff ff       	call   c001add0 <Clock::~Clock()>
c002761d:	83 c4 10             	add    esp,0x10
c0027620:	90                   	nop
c0027621:	83 c4 0c             	add    esp,0xc
c0027624:	c3                   	ret    
c0027625:	90                   	nop

c0027626 <RTC::~RTC()>:
c0027626:	83 ec 0c             	sub    esp,0xc
c0027629:	83 ec 0c             	sub    esp,0xc
c002762c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027630:	e8 cd ff ff ff       	call   c0027602 <RTC::~RTC()>
c0027635:	83 c4 10             	add    esp,0x10
c0027638:	83 ec 08             	sub    esp,0x8
c002763b:	68 60 01 00 00       	push   0x160
c0027640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027644:	e8 d3 1a ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0027649:	83 c4 10             	add    esp,0x10
c002764c:	83 c4 0c             	add    esp,0xc
c002764f:	c3                   	ret    

c0027650 <RTC::get_update_in_progress_flag()>:
c0027650:	83 ec 14             	sub    esp,0x14
c0027653:	6a 0a                	push   0xa
c0027655:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002765b:	e8 1c e4 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027660:	83 c4 1c             	add    esp,0x1c
c0027663:	0f b6 c0             	movzx  eax,al
c0027666:	c1 e8 07             	shr    eax,0x7
c0027669:	c3                   	ret    

c002766a <RTC::completeRTCRefresh()>:
c002766a:	55                   	push   ebp
c002766b:	57                   	push   edi
c002766c:	56                   	push   esi
c002766d:	53                   	push   ebx
c002766e:	83 ec 3c             	sub    esp,0x3c
c0027671:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027677:	83 ec 0c             	sub    esp,0xc
c002767a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002767e:	e8 cd ff ff ff       	call   c0027650 <RTC::get_update_in_progress_flag()>
c0027683:	83 c4 10             	add    esp,0x10
c0027686:	84 c0                	test   al,al
c0027688:	74 0e                	je     c0027698 <RTC::completeRTCRefresh()+0x2e>
c002768a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027690:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027696:	73 df                	jae    c0027677 <RTC::completeRTCRefresh()+0xd>
c0027698:	51                   	push   ecx
c0027699:	51                   	push   ecx
c002769a:	6a 00                	push   0x0
c002769c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276a2:	e8 d5 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00276a7:	5b                   	pop    ebx
c00276a8:	89 c7                	mov    edi,eax
c00276aa:	5e                   	pop    esi
c00276ab:	6a 02                	push   0x2
c00276ad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276b3:	e8 c4 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00276b8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00276bc:	5d                   	pop    ebp
c00276bd:	58                   	pop    eax
c00276be:	6a 04                	push   0x4
c00276c0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276c6:	e8 b1 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00276cb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00276cf:	58                   	pop    eax
c00276d0:	5a                   	pop    edx
c00276d1:	6a 07                	push   0x7
c00276d3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276d9:	e8 9e e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00276de:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00276e2:	59                   	pop    ecx
c00276e3:	5b                   	pop    ebx
c00276e4:	6a 08                	push   0x8
c00276e6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276ec:	e8 8b e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00276f1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00276f5:	5e                   	pop    esi
c00276f6:	5d                   	pop    ebp
c00276f7:	6a 09                	push   0x9
c00276f9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276ff:	e8 78 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027704:	0f b6 c0             	movzx  eax,al
c0027707:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002770b:	83 c4 10             	add    esp,0x10
c002770e:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027714:	83 ec 0c             	sub    esp,0xc
c0027717:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002771b:	e8 30 ff ff ff       	call   c0027650 <RTC::get_update_in_progress_flag()>
c0027720:	83 c4 10             	add    esp,0x10
c0027723:	84 c0                	test   al,al
c0027725:	74 0e                	je     c0027735 <RTC::completeRTCRefresh()+0xcb>
c0027727:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c002772d:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027733:	73 df                	jae    c0027714 <RTC::completeRTCRefresh()+0xaa>
c0027735:	51                   	push   ecx
c0027736:	51                   	push   ecx
c0027737:	6a 00                	push   0x0
c0027739:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002773f:	e8 38 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027744:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027748:	5b                   	pop    ebx
c0027749:	5e                   	pop    esi
c002774a:	6a 02                	push   0x2
c002774c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027752:	e8 25 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027757:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002775b:	5d                   	pop    ebp
c002775c:	58                   	pop    eax
c002775d:	6a 04                	push   0x4
c002775f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027765:	e8 12 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c002776a:	88 c3                	mov    bl,al
c002776c:	58                   	pop    eax
c002776d:	5a                   	pop    edx
c002776e:	6a 07                	push   0x7
c0027770:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027776:	e8 01 e3 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c002777b:	59                   	pop    ecx
c002777c:	89 c6                	mov    esi,eax
c002777e:	5d                   	pop    ebp
c002777f:	6a 08                	push   0x8
c0027781:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027787:	e8 f0 e2 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c002778c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027790:	58                   	pop    eax
c0027791:	5a                   	pop    edx
c0027792:	6a 09                	push   0x9
c0027794:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002779a:	e8 dd e2 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c002779f:	89 f9                	mov    ecx,edi
c00277a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00277a5:	0f b6 e8             	movzx  ebp,al
c00277a8:	83 c4 10             	add    esp,0x10
c00277ab:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00277af:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00277b4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00277b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00277bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00277c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00277c5:	0f 94 c0             	sete   al
c00277c8:	0f b6 fb             	movzx  edi,bl
c00277cb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00277cf:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00277d4:	0f 94 c2             	sete   dl
c00277d7:	21 d0                	and    eax,edx
c00277d9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00277dd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00277e1:	0f 94 c2             	sete   dl
c00277e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00277e8:	21 c2                	and    edx,eax
c00277ea:	89 f0                	mov    eax,esi
c00277ec:	0f b6 c0             	movzx  eax,al
c00277ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00277f3:	89 f0                	mov    eax,esi
c00277f5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00277f9:	0f 94 c0             	sete   al
c00277fc:	21 d0                	and    eax,edx
c00277fe:	31 d2                	xor    edx,edx
c0027800:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027804:	0f 94 c2             	sete   dl
c0027807:	85 c2                	test   edx,eax
c0027809:	75 27                	jne    c0027832 <RTC::completeRTCRefresh()+0x1c8>
c002780b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002780f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027813:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027817:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002781b:	89 f0                	mov    eax,esi
c002781d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027821:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027825:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002782d:	e9 dc fe ff ff       	jmp    c002770e <RTC::completeRTCRefresh()+0xa4>
c0027832:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027836:	75 d3                	jne    c002780b <RTC::completeRTCRefresh()+0x1a1>
c0027838:	52                   	push   edx
c0027839:	52                   	push   edx
c002783a:	6a 0b                	push   0xb
c002783c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027842:	e8 35 e2 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027847:	83 c4 10             	add    esp,0x10
c002784a:	a8 04                	test   al,0x4
c002784c:	75 7a                	jne    c00278c8 <RTC::completeRTCRefresh()+0x25e>
c002784e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027856:	83 e1 0f             	and    ecx,0xf
c0027859:	c1 ea 04             	shr    edx,0x4
c002785c:	c1 ef 04             	shr    edi,0x4
c002785f:	6b d2 0a             	imul   edx,edx,0xa
c0027862:	83 e6 0f             	and    esi,0xf
c0027865:	01 d1                	add    ecx,edx
c0027867:	c1 ed 04             	shr    ebp,0x4
c002786a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c002786e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027872:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027876:	c1 ea 04             	shr    edx,0x4
c0027879:	83 e1 0f             	and    ecx,0xf
c002787c:	6b d2 0a             	imul   edx,edx,0xa
c002787f:	6b ed 0a             	imul   ebp,ebp,0xa
c0027882:	01 d1                	add    ecx,edx
c0027884:	89 fa                	mov    edx,edi
c0027886:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c002788a:	83 e2 07             	and    edx,0x7
c002788d:	89 d9                	mov    ecx,ebx
c002788f:	6b d2 0a             	imul   edx,edx,0xa
c0027892:	83 e1 0f             	and    ecx,0xf
c0027895:	83 e3 80             	and    ebx,0xffffff80
c0027898:	01 d1                	add    ecx,edx
c002789a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002789e:	09 cb                	or     ebx,ecx
c00278a0:	c1 ea 04             	shr    edx,0x4
c00278a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00278a7:	6b d2 0a             	imul   edx,edx,0xa
c00278aa:	83 e1 0f             	and    ecx,0xf
c00278ad:	01 d6                	add    esi,edx
c00278af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00278b3:	c1 ea 04             	shr    edx,0x4
c00278b6:	6b d2 0a             	imul   edx,edx,0xa
c00278b9:	01 d1                	add    ecx,edx
c00278bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00278bf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00278c3:	83 e2 0f             	and    edx,0xf
c00278c6:	01 d5                	add    ebp,edx
c00278c8:	a8 02                	test   al,0x2
c00278ca:	75 15                	jne    c00278e1 <RTC::completeRTCRefresh()+0x277>
c00278cc:	f6 c3 80             	test   bl,0x80
c00278cf:	74 10                	je     c00278e1 <RTC::completeRTCRefresh()+0x277>
c00278d1:	83 e3 7f             	and    ebx,0x7f
c00278d4:	b9 18 00 00 00       	mov    ecx,0x18
c00278d9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00278dc:	99                   	cdq    
c00278dd:	f7 f9                	idiv   ecx
c00278df:	88 d3                	mov    bl,dl
c00278e1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00278e7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00278ed:	77 06                	ja     c00278f5 <RTC::completeRTCRefresh()+0x28b>
c00278ef:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00278f5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00278fa:	31 c9                	xor    ecx,ecx
c00278fc:	c1 e0 10             	shl    eax,0x10
c00278ff:	89 cd                	mov    ebp,ecx
c0027901:	c1 e7 10             	shl    edi,0x10
c0027904:	31 d2                	xor    edx,edx
c0027906:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002790c:	09 c5                	or     ebp,eax
c002790e:	89 f0                	mov    eax,esi
c0027910:	89 e9                	mov    ecx,ebp
c0027912:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027916:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c002791a:	88 c2                	mov    dl,al
c002791c:	88 d9                	mov    cl,bl
c002791e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027922:	0f b7 c2             	movzx  eax,dx
c0027925:	09 f8                	or     eax,edi
c0027927:	89 c2                	mov    edx,eax
c0027929:	50                   	push   eax
c002792a:	50                   	push   eax
c002792b:	51                   	push   ecx
c002792c:	52                   	push   edx
c002792d:	e8 8d 35 ff ff       	call   c001aebf <datetimeToSeconds(datetime_t)>
c0027932:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027936:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c002793c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027942:	83 c4 4c             	add    esp,0x4c
c0027945:	5b                   	pop    ebx
c0027946:	5e                   	pop    esi
c0027947:	5f                   	pop    edi
c0027948:	5d                   	pop    ebp
c0027949:	c3                   	ret    

c002794a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c002794a:	55                   	push   ebp
c002794b:	57                   	push   edi
c002794c:	56                   	push   esi
c002794d:	53                   	push   ebx
c002794e:	83 ec 30             	sub    esp,0x30
c0027951:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027955:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027959:	6a 00                	push   0x0
c002795b:	6a 00                	push   0x0
c002795d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027963:	e8 2e e2 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027968:	83 c4 0c             	add    esp,0xc
c002796b:	6a 00                	push   0x0
c002796d:	6a 02                	push   0x2
c002796f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027975:	e8 1c e2 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c002797a:	31 d2                	xor    edx,edx
c002797c:	89 f9                	mov    ecx,edi
c002797e:	89 f8                	mov    eax,edi
c0027980:	c1 e9 10             	shr    ecx,0x10
c0027983:	0f b6 c4             	movzx  eax,ah
c0027986:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c002798a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002798e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027992:	b9 64 00 00 00       	mov    ecx,0x64
c0027997:	89 f0                	mov    eax,esi
c0027999:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002799d:	89 f0                	mov    eax,esi
c002799f:	0f b6 c4             	movzx  eax,ah
c00279a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00279a6:	89 f0                	mov    eax,esi
c00279a8:	c1 e8 10             	shr    eax,0x10
c00279ab:	f7 f1                	div    ecx
c00279ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00279b1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00279b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00279b9:	59                   	pop    ecx
c00279ba:	5b                   	pop    ebx
c00279bb:	89 fb                	mov    ebx,edi
c00279bd:	6a 0b                	push   0xb
c00279bf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c5:	e8 b2 e0 fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c00279ca:	83 c4 10             	add    esp,0x10
c00279cd:	89 c5                	mov    ebp,eax
c00279cf:	a8 04                	test   al,0x4
c00279d1:	75 6e                	jne    c0027a41 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00279d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00279d7:	31 d2                	xor    edx,edx
c00279d9:	0f b6 c1             	movzx  eax,cl
c00279dc:	b9 0a 00 00 00       	mov    ecx,0xa
c00279e1:	f7 f1                	div    ecx
c00279e3:	c1 e0 04             	shl    eax,0x4
c00279e6:	09 d0                	or     eax,edx
c00279e8:	31 d2                	xor    edx,edx
c00279ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00279ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00279f3:	f7 f1                	div    ecx
c00279f5:	c1 e0 04             	shl    eax,0x4
c00279f8:	09 d0                	or     eax,edx
c00279fa:	31 d2                	xor    edx,edx
c00279fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027a00:	0f b6 c3             	movzx  eax,bl
c0027a03:	f7 f1                	div    ecx
c0027a05:	c1 e0 04             	shl    eax,0x4
c0027a08:	09 d0                	or     eax,edx
c0027a0a:	31 d2                	xor    edx,edx
c0027a0c:	89 c3                	mov    ebx,eax
c0027a0e:	89 f0                	mov    eax,esi
c0027a10:	0f b6 c0             	movzx  eax,al
c0027a13:	f7 f1                	div    ecx
c0027a15:	c1 e0 04             	shl    eax,0x4
c0027a18:	09 d0                	or     eax,edx
c0027a1a:	31 d2                	xor    edx,edx
c0027a1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027a20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a25:	f7 f1                	div    ecx
c0027a27:	c1 e0 04             	shl    eax,0x4
c0027a2a:	09 d0                	or     eax,edx
c0027a2c:	31 d2                	xor    edx,edx
c0027a2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027a32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027a36:	f7 f1                	div    ecx
c0027a38:	c1 e0 04             	shl    eax,0x4
c0027a3b:	09 d0                	or     eax,edx
c0027a3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027a41:	83 e5 02             	and    ebp,0x2
c0027a44:	75 1e                	jne    c0027a64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a46:	0f b6 c3             	movzx  eax,bl
c0027a49:	83 f8 0b             	cmp    eax,0xb
c0027a4c:	76 10                	jbe    c0027a5e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027a4e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027a51:	88 d3                	mov    bl,dl
c0027a53:	84 d2                	test   dl,dl
c0027a55:	75 02                	jne    c0027a59 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027a57:	b3 0c                	mov    bl,0xc
c0027a59:	83 cb 80             	or     ebx,0xffffff80
c0027a5c:	eb 06                	jmp    c0027a64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a5e:	85 c0                	test   eax,eax
c0027a60:	75 02                	jne    c0027a64 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a62:	b3 0c                	mov    bl,0xc
c0027a64:	0f b6 db             	movzx  ebx,bl
c0027a67:	50                   	push   eax
c0027a68:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027a6d:	52                   	push   edx
c0027a6e:	6a 00                	push   0x0
c0027a70:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a76:	e8 1b e1 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a7b:	83 c4 0c             	add    esp,0xc
c0027a7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a83:	50                   	push   eax
c0027a84:	6a 02                	push   0x2
c0027a86:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a8c:	e8 05 e1 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a91:	83 c4 0c             	add    esp,0xc
c0027a94:	53                   	push   ebx
c0027a95:	6a 04                	push   0x4
c0027a97:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a9d:	e8 f4 e0 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027aa2:	83 c4 0c             	add    esp,0xc
c0027aa5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027aaa:	52                   	push   edx
c0027aab:	6a 07                	push   0x7
c0027aad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ab3:	e8 de e0 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ab8:	83 c4 0c             	add    esp,0xc
c0027abb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027ac0:	50                   	push   eax
c0027ac1:	6a 08                	push   0x8
c0027ac3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ac9:	e8 c8 e0 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ace:	83 c4 0c             	add    esp,0xc
c0027ad1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027ad6:	55                   	push   ebp
c0027ad7:	6a 09                	push   0x9
c0027ad9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027adf:	e8 b2 e0 fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ae4:	5a                   	pop    edx
c0027ae5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027ae9:	e8 7c fb ff ff       	call   c002766a <RTC::completeRTCRefresh()>
c0027aee:	83 c4 3c             	add    esp,0x3c
c0027af1:	b0 01                	mov    al,0x1
c0027af3:	5b                   	pop    ebx
c0027af4:	5e                   	pop    esi
c0027af5:	5f                   	pop    edi
c0027af6:	5d                   	pop    ebp
c0027af7:	c3                   	ret    

c0027af8 <rtcIRQHandler(regs*, void*)>:
c0027af8:	53                   	push   ebx
c0027af9:	83 ec 10             	sub    esp,0x10
c0027afc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027b00:	6a 0c                	push   0xc
c0027b02:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b08:	e8 6f df fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027b0d:	83 c4 10             	add    esp,0x10
c0027b10:	a8 80                	test   al,0x80
c0027b12:	74 24                	je     c0027b38 <rtcIRQHandler(regs*, void*)+0x40>
c0027b14:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027b1b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027b22:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027b29:	75 0d                	jne    c0027b38 <rtcIRQHandler(regs*, void*)+0x40>
c0027b2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027b2f:	83 c4 08             	add    esp,0x8
c0027b32:	5b                   	pop    ebx
c0027b33:	e9 32 fb ff ff       	jmp    c002766a <RTC::completeRTCRefresh()>
c0027b38:	83 c4 08             	add    esp,0x8
c0027b3b:	5b                   	pop    ebx
c0027b3c:	c3                   	ret    
c0027b3d:	90                   	nop

c0027b3e <RTC::RTC()>:
c0027b3e:	83 ec 1c             	sub    esp,0x1c
c0027b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b45:	83 ec 08             	sub    esp,0x8
c0027b48:	68 ab 32 03 c0       	push   0xc00332ab
c0027b4d:	50                   	push   eax
c0027b4e:	e8 47 32 ff ff       	call   c001ad9a <Clock::Clock(char const*)>
c0027b53:	83 c4 10             	add    esp,0x10
c0027b56:	ba c8 32 03 c0       	mov    edx,0xc00332c8
c0027b5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b5f:	89 10                	mov    DWORD PTR [eax],edx
c0027b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b65:	83 ec 0c             	sub    esp,0xc
c0027b68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027b6c:	6a 01                	push   0x1
c0027b6e:	68 f8 7a 02 c0       	push   0xc0027af8
c0027b73:	6a 08                	push   0x8
c0027b75:	50                   	push   eax
c0027b76:	e8 fb 36 ff ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027b7b:	83 c4 20             	add    esp,0x20
c0027b7e:	89 c2                	mov    edx,eax
c0027b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b84:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027b8a:	fa                   	cli    
c0027b8b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b90:	83 c0 01             	add    eax,0x1
c0027b93:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027b98:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027b9d:	83 ec 08             	sub    esp,0x8
c0027ba0:	6a 0b                	push   0xb
c0027ba2:	50                   	push   eax
c0027ba3:	e8 d4 de fe ff       	call   c0015a7c <Computer::readCMOS(unsigned char)>
c0027ba8:	83 c4 10             	add    esp,0x10
c0027bab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027baf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027bb4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027bb8:	83 ca 10             	or     edx,0x10
c0027bbb:	0f b6 d2             	movzx  edx,dl
c0027bbe:	83 ec 04             	sub    esp,0x4
c0027bc1:	52                   	push   edx
c0027bc2:	6a 0b                	push   0xb
c0027bc4:	50                   	push   eax
c0027bc5:	e8 cc df fe ff       	call   c0015b96 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027bca:	83 c4 10             	add    esp,0x10
c0027bcd:	83 ec 0c             	sub    esp,0xc
c0027bd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bd4:	e8 91 fa ff ff       	call   c002766a <RTC::completeRTCRefresh()>
c0027bd9:	83 c4 10             	add    esp,0x10
c0027bdc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027be1:	83 e8 01             	sub    eax,0x1
c0027be4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027be9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027bee:	85 c0                	test   eax,eax
c0027bf0:	75 01                	jne    c0027bf3 <RTC::RTC()+0xb5>
c0027bf2:	fb                   	sti    
c0027bf3:	90                   	nop
c0027bf4:	83 c4 1c             	add    esp,0x1c
c0027bf7:	c3                   	ret    

c0027bf8 <HalConsoleScroll(int, int)>:
c0027bf8:	83 ec 10             	sub    esp,0x10
c0027bfb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027c03:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027c0b:	90                   	nop
c0027c0c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c11:	0f 8f e1 00 00 00    	jg     c0027cf8 <HalConsoleScroll(int, int)+0x100>
c0027c17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027c1f:	90                   	nop
c0027c20:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027c28:	0f 8f be 00 00 00    	jg     c0027cec <HalConsoleScroll(int, int)+0xf4>
c0027c2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c32:	89 d0                	mov    eax,edx
c0027c34:	c1 e0 02             	shl    eax,0x2
c0027c37:	01 d0                	add    eax,edx
c0027c39:	c1 e0 05             	shl    eax,0x5
c0027c3c:	89 c2                	mov    edx,eax
c0027c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c42:	01 d0                	add    eax,edx
c0027c44:	89 c2                	mov    edx,eax
c0027c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c4a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027c4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c51:	89 d0                	mov    eax,edx
c0027c53:	c1 e0 02             	shl    eax,0x2
c0027c56:	01 d0                	add    eax,edx
c0027c58:	c1 e0 05             	shl    eax,0x5
c0027c5b:	89 c2                	mov    edx,eax
c0027c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c61:	01 d0                	add    eax,edx
c0027c63:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027c69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c6d:	01 c2                	add    edx,eax
c0027c6f:	8a 01                	mov    al,BYTE PTR [ecx]
c0027c71:	88 02                	mov    BYTE PTR [edx],al
c0027c73:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c78:	75 66                	jne    c0027ce0 <HalConsoleScroll(int, int)+0xe8>
c0027c7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c7e:	83 e0 01             	and    eax,0x1
c0027c81:	74 39                	je     c0027cbc <HalConsoleScroll(int, int)+0xc4>
c0027c83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027c87:	83 e0 0f             	and    eax,0xf
c0027c8a:	88 c2                	mov    dl,al
c0027c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c90:	c1 e0 04             	shl    eax,0x4
c0027c93:	09 d0                	or     eax,edx
c0027c95:	88 c1                	mov    cl,al
c0027c97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c9b:	89 d0                	mov    eax,edx
c0027c9d:	c1 e0 02             	shl    eax,0x2
c0027ca0:	01 d0                	add    eax,edx
c0027ca2:	c1 e0 05             	shl    eax,0x5
c0027ca5:	89 c2                	mov    edx,eax
c0027ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cab:	01 d0                	add    eax,edx
c0027cad:	89 c2                	mov    edx,eax
c0027caf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cb3:	01 d0                	add    eax,edx
c0027cb5:	88 ca                	mov    dl,cl
c0027cb7:	88 10                	mov    BYTE PTR [eax],dl
c0027cb9:	eb 25                	jmp    c0027ce0 <HalConsoleScroll(int, int)+0xe8>
c0027cbb:	90                   	nop
c0027cbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027cc0:	89 d0                	mov    eax,edx
c0027cc2:	c1 e0 02             	shl    eax,0x2
c0027cc5:	01 d0                	add    eax,edx
c0027cc7:	c1 e0 05             	shl    eax,0x5
c0027cca:	89 c2                	mov    edx,eax
c0027ccc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cd0:	01 d0                	add    eax,edx
c0027cd2:	89 c2                	mov    edx,eax
c0027cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cd8:	01 d0                	add    eax,edx
c0027cda:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0027ce0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027ce5:	e9 36 ff ff ff       	jmp    c0027c20 <HalConsoleScroll(int, int)+0x28>
c0027cea:	66 90                	xchg   ax,ax
c0027cec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027cf1:	e9 16 ff ff ff       	jmp    c0027c0c <HalConsoleScroll(int, int)+0x14>
c0027cf6:	66 90                	xchg   ax,ax
c0027cf8:	90                   	nop
c0027cf9:	83 c4 10             	add    esp,0x10
c0027cfc:	c3                   	ret    
c0027cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0027d00 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027d00:	83 ec 14             	sub    esp,0x14
c0027d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d07:	88 04 24             	mov    BYTE PTR [esp],al
c0027d0a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027d0d:	0f b6 c0             	movzx  eax,al
c0027d10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d14:	89 d1                	mov    ecx,edx
c0027d16:	83 e1 0f             	and    ecx,0xf
c0027d19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027d1d:	c1 e2 04             	shl    edx,0x4
c0027d20:	0f b6 d2             	movzx  edx,dl
c0027d23:	09 ca                	or     edx,ecx
c0027d25:	c1 e2 08             	shl    edx,0x8
c0027d28:	09 d0                	or     eax,edx
c0027d2a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027d2f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027d3b:	89 d0                	mov    eax,edx
c0027d3d:	c1 e0 02             	shl    eax,0x2
c0027d40:	01 d0                	add    eax,edx
c0027d42:	c1 e0 04             	shl    eax,0x4
c0027d45:	89 c2                	mov    edx,eax
c0027d47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d4b:	01 d0                	add    eax,edx
c0027d4d:	01 c0                	add    eax,eax
c0027d4f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027d53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d57:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027d5c:	66 89 02             	mov    WORD PTR [edx],ax
c0027d5f:	90                   	nop
c0027d60:	83 c4 14             	add    esp,0x14
c0027d63:	c3                   	ret    

c0027d64 <HalConsoleCursorUpdate(int, int)>:
c0027d64:	83 ec 20             	sub    esp,0x20
c0027d67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027d6b:	89 c2                	mov    edx,eax
c0027d6d:	c1 e2 02             	shl    edx,0x2
c0027d70:	01 d0                	add    eax,edx
c0027d72:	c1 e0 04             	shl    eax,0x4
c0027d75:	89 c2                	mov    edx,eax
c0027d77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d7b:	01 d0                	add    eax,edx
c0027d7d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027d82:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027d89:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027d8e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027d92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027d96:	ee                   	out    dx,al
c0027d97:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027d9c:	0f b6 c0             	movzx  eax,al
c0027d9f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027da6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027daa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027dae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027db2:	ee                   	out    dx,al
c0027db3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027dba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027dbf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027dc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027dc7:	ee                   	out    dx,al
c0027dc8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027dcd:	c1 e8 08             	shr    eax,0x8
c0027dd0:	0f b6 c0             	movzx  eax,al
c0027dd3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027dda:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027dde:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027de2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027de6:	ee                   	out    dx,al
c0027de7:	90                   	nop
c0027de8:	83 c4 20             	add    esp,0x20
c0027deb:	c3                   	ret    

c0027dec <FAT::getName()>:
c0027dec:	b8 fc 32 03 c0       	mov    eax,0xc00332fc
c0027df1:	c3                   	ret    
c0027df2:	66 90                	xchg   ax,ax

c0027df4 <FAT::tell(void*, unsigned long long*)>:
c0027df4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027df9:	75 09                	jne    c0027e04 <FAT::tell(void*, unsigned long long*)+0x10>
c0027dfb:	b8 04 00 00 00       	mov    eax,0x4
c0027e00:	c3                   	ret    
c0027e01:	8d 76 00             	lea    esi,[esi+0x0]
c0027e04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e09:	75 09                	jne    c0027e14 <FAT::tell(void*, unsigned long long*)+0x20>
c0027e0b:	b8 04 00 00 00       	mov    eax,0x4
c0027e10:	c3                   	ret    
c0027e11:	8d 76 00             	lea    esi,[esi+0x0]
c0027e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027e1b:	ba 00 00 00 00       	mov    edx,0x0
c0027e20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e24:	89 01                	mov    DWORD PTR [ecx],eax
c0027e26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e29:	b8 00 00 00 00       	mov    eax,0x0
c0027e2e:	c3                   	ret    
c0027e2f:	90                   	nop

c0027e30 <FAT::stat(void*, unsigned long long*)>:
c0027e30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e35:	75 09                	jne    c0027e40 <FAT::stat(void*, unsigned long long*)+0x10>
c0027e37:	b8 04 00 00 00       	mov    eax,0x4
c0027e3c:	c3                   	ret    
c0027e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0027e40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e45:	75 09                	jne    c0027e50 <FAT::stat(void*, unsigned long long*)+0x20>
c0027e47:	b8 04 00 00 00       	mov    eax,0x4
c0027e4c:	c3                   	ret    
c0027e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0027e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027e57:	ba 00 00 00 00       	mov    edx,0x0
c0027e5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e60:	89 01                	mov    DWORD PTR [ecx],eax
c0027e62:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e65:	b8 00 00 00 00       	mov    eax,0x0
c0027e6a:	c3                   	ret    
c0027e6b:	90                   	nop

c0027e6c <FAT::~FAT()>:
c0027e6c:	83 ec 0c             	sub    esp,0xc
c0027e6f:	ba 48 33 03 c0       	mov    edx,0xc0033348
c0027e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e78:	89 10                	mov    DWORD PTR [eax],edx
c0027e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e7e:	83 ec 0c             	sub    esp,0xc
c0027e81:	50                   	push   eax
c0027e82:	e8 4b 22 ff ff       	call   c001a0d2 <Filesystem::~Filesystem()>
c0027e87:	83 c4 10             	add    esp,0x10
c0027e8a:	90                   	nop
c0027e8b:	83 c4 0c             	add    esp,0xc
c0027e8e:	c3                   	ret    
c0027e8f:	90                   	nop

c0027e90 <FAT::~FAT()>:
c0027e90:	83 ec 0c             	sub    esp,0xc
c0027e93:	83 ec 0c             	sub    esp,0xc
c0027e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e9a:	e8 cd ff ff ff       	call   c0027e6c <FAT::~FAT()>
c0027e9f:	83 c4 10             	add    esp,0x10
c0027ea2:	83 ec 08             	sub    esp,0x8
c0027ea5:	6a 08                	push   0x8
c0027ea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eab:	e8 6c 12 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0027eb0:	83 c4 10             	add    esp,0x10
c0027eb3:	83 c4 0c             	add    esp,0xc
c0027eb6:	c3                   	ret    
c0027eb7:	90                   	nop

c0027eb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027eb8:	83 ec 1c             	sub    esp,0x1c
c0027ebb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027ec2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027ec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ecb:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ed2:	83 f8 ff             	cmp    eax,0xffffffff
c0027ed5:	75 35                	jne    c0027f0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027ed7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027edb:	88 c2                	mov    dl,al
c0027edd:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ee2:	01 d0                	add    eax,edx
c0027ee4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027ee8:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027eee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ef2:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027ef9:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027efe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f02:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f09:	eb 19                	jmp    c0027f24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027f0b:	90                   	nop
c0027f0c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f10:	88 c2                	mov    dl,al
c0027f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f16:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f1d:	01 d0                	add    eax,edx
c0027f1f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f23:	90                   	nop
c0027f24:	83 ec 04             	sub    esp,0x4
c0027f27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f2f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027f33:	50                   	push   eax
c0027f34:	e8 4a d2 fd ff       	call   c0005183 <f_getlabel>
c0027f39:	83 c4 10             	add    esp,0x10
c0027f3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027f40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027f45:	75 09                	jne    c0027f50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027f47:	b8 00 00 00 00       	mov    eax,0x0
c0027f4c:	eb 0a                	jmp    c0027f58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027f4e:	66 90                	xchg   ax,ax
c0027f50:	b8 01 00 00 00       	mov    eax,0x1
c0027f55:	8d 76 00             	lea    esi,[esi+0x0]
c0027f58:	83 c4 1c             	add    esp,0x1c
c0027f5b:	c3                   	ret    

c0027f5c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027f5c:	57                   	push   edi
c0027f5d:	83 ec 58             	sub    esp,0x58
c0027f60:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027f68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027f6c:	b8 00 00 00 00       	mov    eax,0x0
c0027f71:	b9 0f 00 00 00       	mov    ecx,0xf
c0027f76:	fc                   	cld    
c0027f77:	89 d7                	mov    edi,edx
c0027f79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027f7b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027f7f:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f86:	83 f8 ff             	cmp    eax,0xffffffff
c0027f89:	75 35                	jne    c0027fc0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027f8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027f8f:	88 c2                	mov    dl,al
c0027f91:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f96:	01 d0                	add    eax,edx
c0027f98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027f9c:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027fa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fa6:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027fad:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027fb2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027fb6:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027fbd:	eb 19                	jmp    c0027fd8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027fbf:	90                   	nop
c0027fc0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027fc4:	88 c2                	mov    dl,al
c0027fc6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fca:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027fd1:	01 d0                	add    eax,edx
c0027fd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027fd7:	90                   	nop
c0027fd8:	83 ec 08             	sub    esp,0x8
c0027fdb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027fdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027fe3:	50                   	push   eax
c0027fe4:	e8 57 88 fd ff       	call   c0000840 <strcat>
c0027fe9:	83 c4 10             	add    esp,0x10
c0027fec:	83 ec 0c             	sub    esp,0xc
c0027fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027ff3:	50                   	push   eax
c0027ff4:	e8 db d2 fd ff       	call   c00052d4 <f_setlabel>
c0027ff9:	83 c4 10             	add    esp,0x10
c0027ffc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028000:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028005:	75 09                	jne    c0028010 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0028007:	b8 00 00 00 00       	mov    eax,0x0
c002800c:	eb 0a                	jmp    c0028018 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c002800e:	66 90                	xchg   ax,ax
c0028010:	b8 01 00 00 00       	mov    eax,0x1
c0028015:	8d 76 00             	lea    esi,[esi+0x0]
c0028018:	83 c4 58             	add    esp,0x58
c002801b:	5f                   	pop    edi
c002801c:	c3                   	ret    
c002801d:	90                   	nop
c002801e:	66 90                	xchg   ax,ax

c0028020 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028020:	83 ec 2c             	sub    esp,0x2c
c0028023:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002802b:	83 ec 08             	sub    esp,0x8
c002802e:	68 20 33 03 c0       	push   0xc0033320
c0028033:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028037:	e8 14 87 fd ff       	call   c0000750 <strcmp>
c002803c:	83 c4 10             	add    esp,0x10
c002803f:	85 c0                	test   eax,eax
c0028041:	0f 94 c0             	sete   al
c0028044:	0f b6 c0             	movzx  eax,al
c0028047:	85 c0                	test   eax,eax
c0028049:	74 0d                	je     c0028058 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002804b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028053:	e9 c0 00 00 00       	jmp    c0028118 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028058:	83 ec 08             	sub    esp,0x8
c002805b:	68 12 33 03 c0       	push   0xc0033312
c0028060:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028064:	e8 e7 86 fd ff       	call   c0000750 <strcmp>
c0028069:	83 c4 10             	add    esp,0x10
c002806c:	85 c0                	test   eax,eax
c002806e:	0f 94 c0             	sete   al
c0028071:	0f b6 c0             	movzx  eax,al
c0028074:	85 c0                	test   eax,eax
c0028076:	74 10                	je     c0028088 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028078:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028080:	e9 93 00 00 00       	jmp    c0028118 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028085:	8d 76 00             	lea    esi,[esi+0x0]
c0028088:	83 ec 08             	sub    esp,0x8
c002808b:	68 18 33 03 c0       	push   0xc0033318
c0028090:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028094:	e8 b7 86 fd ff       	call   c0000750 <strcmp>
c0028099:	83 c4 10             	add    esp,0x10
c002809c:	85 c0                	test   eax,eax
c002809e:	0f 94 c0             	sete   al
c00280a1:	0f b6 c0             	movzx  eax,al
c00280a4:	85 c0                	test   eax,eax
c00280a6:	74 0c                	je     c00280b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00280a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280b0:	eb 66                	jmp    c0028118 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280b2:	66 90                	xchg   ax,ax
c00280b4:	83 ec 08             	sub    esp,0x8
c00280b7:	68 cc f4 02 c0       	push   0xc002f4cc
c00280bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280c0:	e8 8b 86 fd ff       	call   c0000750 <strcmp>
c00280c5:	83 c4 10             	add    esp,0x10
c00280c8:	85 c0                	test   eax,eax
c00280ca:	0f 94 c0             	sete   al
c00280cd:	0f b6 c0             	movzx  eax,al
c00280d0:	85 c0                	test   eax,eax
c00280d2:	74 0c                	je     c00280e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00280d4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00280dc:	eb 3a                	jmp    c0028118 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280de:	66 90                	xchg   ax,ax
c00280e0:	83 ec 08             	sub    esp,0x8
c00280e3:	68 1e 33 03 c0       	push   0xc003331e
c00280e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280ec:	e8 5f 86 fd ff       	call   c0000750 <strcmp>
c00280f1:	83 c4 10             	add    esp,0x10
c00280f4:	85 c0                	test   eax,eax
c00280f6:	0f 94 c0             	sete   al
c00280f9:	0f b6 c0             	movzx  eax,al
c00280fc:	85 c0                	test   eax,eax
c00280fe:	74 0c                	je     c002810c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028100:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028108:	eb 0e                	jmp    c0028118 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002810a:	66 90                	xchg   ax,ax
c002810c:	b8 08 00 00 00       	mov    eax,0x8
c0028111:	e9 ea 00 00 00       	jmp    c0028200 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028116:	66 90                	xchg   ax,ax
c0028118:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002811f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028124:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028128:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002812f:	83 f8 ff             	cmp    eax,0xffffffff
c0028132:	75 34                	jne    c0028168 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028134:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028138:	88 c2                	mov    dl,al
c002813a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002813f:	01 d0                	add    eax,edx
c0028141:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028145:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002814b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002814f:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028156:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002815b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002815f:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028166:	eb 18                	jmp    c0028180 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028168:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002816c:	88 c2                	mov    dl,al
c002816e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028172:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028179:	01 d0                	add    eax,edx
c002817b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002817f:	90                   	nop
c0028180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028184:	88 04 24             	mov    BYTE PTR [esp],al
c0028187:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002818b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002818f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0028197:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002819c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00281a4:	83 ec 0c             	sub    esp,0xc
c00281a7:	68 00 20 00 00       	push   0x2000
c00281ac:	e8 09 e2 fe ff       	call   c00163ba <malloc>
c00281b1:	83 c4 10             	add    esp,0x10
c00281b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00281b8:	68 00 20 00 00       	push   0x2000
c00281bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00281c5:	50                   	push   eax
c00281c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00281ca:	50                   	push   eax
c00281cb:	e8 01 d4 fd ff       	call   c00055d1 <f_mkfs>
c00281d0:	83 c4 10             	add    esp,0x10
c00281d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00281d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00281dc:	75 0a                	jne    c00281e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00281de:	b8 00 00 00 00       	mov    eax,0x0
c00281e3:	eb 1b                	jmp    c0028200 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00281e5:	8d 76 00             	lea    esi,[esi+0x0]
c00281e8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00281ed:	75 09                	jne    c00281f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00281ef:	b8 09 00 00 00       	mov    eax,0x9
c00281f4:	eb 0a                	jmp    c0028200 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00281f6:	66 90                	xchg   ax,ax
c00281f8:	b8 01 00 00 00       	mov    eax,0x1
c00281fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028200:	83 c4 2c             	add    esp,0x2c
c0028203:	c3                   	ret    

c0028204 <FAT::tryMount(LogicalDisk*, int)>:
c0028204:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002820a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002820f:	83 f8 14             	cmp    eax,0x14
c0028212:	75 18                	jne    c002822c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028214:	83 ec 0c             	sub    esp,0xc
c0028217:	68 24 33 03 c0       	push   0xc0033324
c002821c:	e8 41 80 ff ff       	call   c0020262 <KePanic(char const*)>
c0028221:	83 c4 10             	add    esp,0x10
c0028224:	b0 00                	mov    al,0x0
c0028226:	e9 ed 01 00 00       	jmp    c0028418 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002822b:	90                   	nop
c002822c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028233:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028239:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002823f:	3d 00 02 00 00       	cmp    eax,0x200
c0028244:	74 0a                	je     c0028250 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0028246:	b0 00                	mov    al,0x0
c0028248:	e9 cb 01 00 00       	jmp    c0028418 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002824d:	8d 76 00             	lea    esi,[esi+0x0]
c0028250:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028258:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002825f:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028266:	83 f8 ff             	cmp    eax,0xffffffff
c0028269:	74 09                	je     c0028274 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002826b:	b0 01                	mov    al,0x1
c002826d:	e9 a6 01 00 00       	jmp    c0028418 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028272:	66 90                	xchg   ax,ax
c0028274:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c002827e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0028286:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c002828d:	88 c2                	mov    dl,al
c002828f:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028294:	01 d0                	add    eax,edx
c0028296:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c002829d:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00282a3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00282aa:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00282b1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282b6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00282bd:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00282c4:	83 ec 0c             	sub    esp,0xc
c00282c7:	68 34 02 00 00       	push   0x234
c00282cc:	e8 e9 e0 fe ff       	call   c00163ba <malloc>
c00282d1:	83 c4 10             	add    esp,0x10
c00282d4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00282db:	83 ec 04             	sub    esp,0x4
c00282de:	6a 00                	push   0x0
c00282e0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00282e7:	50                   	push   eax
c00282e8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00282ef:	e8 b8 ba fd ff       	call   c0003dac <f_mount>
c00282f4:	83 c4 10             	add    esp,0x10
c00282f7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00282fe:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028306:	74 1c                	je     c0028324 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028308:	83 ec 0c             	sub    esp,0xc
c002830b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028312:	e8 c3 e0 fe ff       	call   c00163da <rfree>
c0028317:	83 c4 10             	add    esp,0x10
c002831a:	b0 00                	mov    al,0x0
c002831c:	e9 f7 00 00 00       	jmp    c0028418 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028321:	8d 76 00             	lea    esi,[esi+0x0]
c0028324:	83 ec 04             	sub    esp,0x4
c0028327:	68 00 01 00 00       	push   0x100
c002832c:	6a 00                	push   0x0
c002832e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028335:	50                   	push   eax
c0028336:	e8 b5 81 fd ff       	call   c00004f0 <memset>
c002833b:	83 c4 10             	add    esp,0x10
c002833e:	83 ec 08             	sub    esp,0x8
c0028341:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028348:	50                   	push   eax
c0028349:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028350:	50                   	push   eax
c0028351:	e8 ea 84 fd ff       	call   c0000840 <strcat>
c0028356:	83 c4 10             	add    esp,0x10
c0028359:	83 ec 08             	sub    esp,0x8
c002835c:	68 32 33 03 c0       	push   0xc0033332
c0028361:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028368:	50                   	push   eax
c0028369:	e8 d2 84 fd ff       	call   c0000840 <strcat>
c002836e:	83 c4 10             	add    esp,0x10
c0028371:	83 ec 04             	sub    esp,0x4
c0028374:	6a 01                	push   0x1
c0028376:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c002837d:	50                   	push   eax
c002837e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028382:	50                   	push   eax
c0028383:	e8 86 ba fd ff       	call   c0003e0e <f_open>
c0028388:	83 c4 10             	add    esp,0x10
c002838b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028392:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0028399:	85 c0                	test   eax,eax
c002839b:	74 0b                	je     c00283a8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c002839d:	78 31                	js     c00283d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002839f:	83 e8 04             	sub    eax,0x4
c00283a2:	83 f8 01             	cmp    eax,0x1
c00283a5:	77 29                	ja     c00283d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283a7:	90                   	nop
c00283a8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00283b0:	83 ec 0c             	sub    esp,0xc
c00283b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283b7:	50                   	push   eax
c00283b8:	e8 20 c2 fd ff       	call   c00045dd <f_close>
c00283bd:	83 c4 10             	add    esp,0x10
c00283c0:	90                   	nop
c00283c1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00283c9:	85 c0                	test   eax,eax
c00283cb:	74 43                	je     c0028410 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00283cd:	eb 31                	jmp    c0028400 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00283cf:	90                   	nop
c00283d0:	83 ec 0c             	sub    esp,0xc
c00283d3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00283da:	e8 fb df fe ff       	call   c00163da <rfree>
c00283df:	83 c4 10             	add    esp,0x10
c00283e2:	83 ec 04             	sub    esp,0x4
c00283e5:	6a 00                	push   0x0
c00283e7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00283ee:	50                   	push   eax
c00283ef:	6a 00                	push   0x0
c00283f1:	e8 b6 b9 fd ff       	call   c0003dac <f_mount>
c00283f6:	83 c4 10             	add    esp,0x10
c00283f9:	b0 00                	mov    al,0x0
c00283fb:	eb 1b                	jmp    c0028418 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00283fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028400:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028405:	83 c0 01             	add    eax,0x1
c0028408:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c002840d:	8d 76 00             	lea    esi,[esi+0x0]
c0028410:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028417:	90                   	nop
c0028418:	81 c4 4c 03 00 00    	add    esp,0x34c
c002841e:	c3                   	ret    
c002841f:	90                   	nop

c0028420 <FAT::allocateSwapfile(char const*, int)>:
c0028420:	55                   	push   ebp
c0028421:	57                   	push   edi
c0028422:	56                   	push   esi
c0028423:	53                   	push   ebx
c0028424:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002842a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028435:	83 ec 0c             	sub    esp,0xc
c0028438:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002843f:	e8 76 df fe ff       	call   c00163ba <malloc>
c0028444:	83 c4 10             	add    esp,0x10
c0028447:	89 c7                	mov    edi,eax
c0028449:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002844e:	83 ec 04             	sub    esp,0x4
c0028451:	50                   	push   eax
c0028452:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028459:	57                   	push   edi
c002845a:	e8 f1 1f ff ff       	call   c001a450 <File::File(char const*, Process*)>
c002845f:	83 c4 10             	add    esp,0x10
c0028462:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028469:	83 ec 04             	sub    esp,0x4
c002846c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028470:	50                   	push   eax
c0028471:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028475:	50                   	push   eax
c0028476:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002847d:	e8 ee 22 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c0028482:	83 c4 10             	add    esp,0x10
c0028485:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c002848c:	c1 e0 14             	shl    eax,0x14
c002848f:	89 c7                	mov    edi,eax
c0028491:	89 c5                	mov    ebp,eax
c0028493:	c1 fd 1f             	sar    ebp,0x1f
c0028496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002849e:	89 f9                	mov    ecx,edi
c00284a0:	31 c1                	xor    ecx,eax
c00284a2:	89 cb                	mov    ebx,ecx
c00284a4:	89 e9                	mov    ecx,ebp
c00284a6:	31 d1                	xor    ecx,edx
c00284a8:	89 ce                	mov    esi,ecx
c00284aa:	89 f0                	mov    eax,esi
c00284ac:	09 d8                	or     eax,ebx
c00284ae:	0f 84 9c 00 00 00    	je     c0028550 <FAT::allocateSwapfile(char const*, int)+0x130>
c00284b4:	83 ec 0c             	sub    esp,0xc
c00284b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284be:	e8 79 21 ff ff       	call   c001a63c <File::unlink()>
c00284c3:	83 c4 10             	add    esp,0x10
c00284c6:	83 ec 08             	sub    esp,0x8
c00284c9:	6a 12                	push   0x12
c00284cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284d2:	e8 97 1f ff ff       	call   c001a46e <File::open(FileOpenMode)>
c00284d7:	83 c4 10             	add    esp,0x10
c00284da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00284f5:	c1 e0 14             	shl    eax,0x14
c00284f8:	83 ec 04             	sub    esp,0x4
c00284fb:	6a 01                	push   0x1
c00284fd:	50                   	push   eax
c00284fe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028505:	e8 5a cf fd ff       	call   c0005464 <f_expand>
c002850a:	83 c4 10             	add    esp,0x10
c002850d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028514:	8b 00                	mov    eax,DWORD PTR [eax]
c0028516:	83 c0 10             	add    eax,0x10
c0028519:	8b 00                	mov    eax,DWORD PTR [eax]
c002851b:	83 ec 0c             	sub    esp,0xc
c002851e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028522:	52                   	push   edx
c0028523:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028527:	52                   	push   edx
c0028528:	6a 00                	push   0x0
c002852a:	68 00 04 00 00       	push   0x400
c002852f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028536:	ff d0                	call   eax
c0028538:	83 c4 20             	add    esp,0x20
c002853b:	83 ec 0c             	sub    esp,0xc
c002853e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028545:	e8 82 1f ff ff       	call   c001a4cc <File::close()>
c002854a:	83 c4 10             	add    esp,0x10
c002854d:	8d 76 00             	lea    esi,[esi+0x0]
c0028550:	83 ec 08             	sub    esp,0x8
c0028553:	6a 01                	push   0x1
c0028555:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002855c:	e8 0d 1f ff ff       	call   c001a46e <File::open(FileOpenMode)>
c0028561:	83 c4 10             	add    esp,0x10
c0028564:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002856b:	8b 00                	mov    eax,DWORD PTR [eax]
c002856d:	83 c0 0c             	add    eax,0xc
c0028570:	8b 00                	mov    eax,DWORD PTR [eax]
c0028572:	83 ec 0c             	sub    esp,0xc
c0028575:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028579:	52                   	push   edx
c002857a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c002857e:	52                   	push   edx
c002857f:	6a 00                	push   0x0
c0028581:	6a 04                	push   0x4
c0028583:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002858a:	ff d0                	call   eax
c002858c:	83 c4 20             	add    esp,0x20
c002858f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028596:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002859c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00285a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00285aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00285ad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00285b4:	83 ec 0c             	sub    esp,0xc
c00285b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285be:	e8 09 1f ff ff       	call   c001a4cc <File::close()>
c00285c3:	83 c4 10             	add    esp,0x10
c00285c6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00285cd:	ba 00 00 00 00       	mov    edx,0x0
c00285d2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00285d8:	5b                   	pop    ebx
c00285d9:	5e                   	pop    esi
c00285da:	5f                   	pop    edi
c00285db:	5d                   	pop    ebp
c00285dc:	c3                   	ret    
c00285dd:	90                   	nop
c00285de:	66 90                	xchg   ax,ax

c00285e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00285e0:	57                   	push   edi
c00285e1:	56                   	push   esi
c00285e2:	53                   	push   ebx
c00285e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00285e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00285f1:	74 0d                	je     c0028600 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00285f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00285fb:	75 0f                	jne    c002860c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00285fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028600:	b8 04 00 00 00       	mov    eax,0x4
c0028605:	e9 3a 01 00 00       	jmp    c0028744 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002860a:	66 90                	xchg   ax,ax
c002860c:	83 ec 08             	sub    esp,0x8
c002860f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028616:	50                   	push   eax
c0028617:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002861e:	e8 87 c2 fd ff       	call   c00048aa <f_readdir>
c0028623:	83 c4 10             	add    esp,0x10
c0028626:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002862d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002863e:	83 c0 16             	add    eax,0x16
c0028641:	50                   	push   eax
c0028642:	e8 29 7f fd ff       	call   c0000570 <strlen>
c0028647:	83 c4 10             	add    esp,0x10
c002864a:	ba 00 00 00 00       	mov    edx,0x0
c002864f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028653:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028657:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002865e:	0f b6 c0             	movzx  eax,al
c0028661:	83 e0 10             	and    eax,0x10
c0028664:	74 0a                	je     c0028670 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028666:	b8 02 00 00 00       	mov    eax,0x2
c002866b:	eb 0b                	jmp    c0028678 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c002866d:	8d 76 00             	lea    esi,[esi+0x0]
c0028670:	b8 01 00 00 00       	mov    eax,0x1
c0028675:	8d 76 00             	lea    esi,[esi+0x0]
c0028678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002867c:	83 ec 08             	sub    esp,0x8
c002867f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028686:	83 c0 16             	add    eax,0x16
c0028689:	50                   	push   eax
c002868a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002868e:	83 c0 10             	add    eax,0x10
c0028691:	50                   	push   eax
c0028692:	e8 a9 7f fd ff       	call   c0000640 <strcpy>
c0028697:	83 c4 10             	add    esp,0x10
c002869a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00286a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00286a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00286b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00286ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00286c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00286c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00286cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00286d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00286dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00286e4:	89 c6                	mov    esi,eax
c00286e6:	89 d7                	mov    edi,edx
c00286e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00286ea:	89 c8                	mov    eax,ecx
c00286ec:	89 fa                	mov    edx,edi
c00286ee:	89 f3                	mov    ebx,esi
c00286f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00286f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00286fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028705:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002870c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028712:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028719:	0f be c0             	movsx  eax,al
c002871c:	85 c0                	test   eax,eax
c002871e:	75 08                	jne    c0028728 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028720:	b8 07 00 00 00       	mov    eax,0x7
c0028725:	eb 1d                	jmp    c0028744 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028727:	90                   	nop
c0028728:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002872f:	85 c0                	test   eax,eax
c0028731:	75 09                	jne    c002873c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028733:	b8 00 00 00 00       	mov    eax,0x0
c0028738:	eb 0a                	jmp    c0028744 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002873a:	66 90                	xchg   ax,ax
c002873c:	b8 01 00 00 00       	mov    eax,0x1
c0028741:	8d 76 00             	lea    esi,[esi+0x0]
c0028744:	81 c4 50 02 00 00    	add    esp,0x250
c002874a:	5b                   	pop    ebx
c002874b:	5e                   	pop    esi
c002874c:	5f                   	pop    edi
c002874d:	c3                   	ret    
c002874e:	66 90                	xchg   ax,ax

c0028750 <FAT::read(void*, unsigned long, void*, int*)>:
c0028750:	83 ec 1c             	sub    esp,0x1c
c0028753:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028758:	74 0a                	je     c0028764 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c002875a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002875f:	75 0b                	jne    c002876c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028761:	8d 76 00             	lea    esi,[esi+0x0]
c0028764:	b8 04 00 00 00       	mov    eax,0x4
c0028769:	eb 41                	jmp    c00287ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c002876b:	90                   	nop
c002876c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028770:	50                   	push   eax
c0028771:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028775:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028779:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002877d:	e8 4f b9 fd ff       	call   c00040d1 <f_read>
c0028782:	83 c4 10             	add    esp,0x10
c0028785:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002878d:	89 c2                	mov    edx,eax
c002878f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028793:	89 10                	mov    DWORD PTR [eax],edx
c0028795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 07                	jne    c00287a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c002879d:	b8 00 00 00 00       	mov    eax,0x0
c00287a2:	eb 08                	jmp    c00287ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00287a4:	b8 01 00 00 00       	mov    eax,0x1
c00287a9:	8d 76 00             	lea    esi,[esi+0x0]
c00287ac:	83 c4 1c             	add    esp,0x1c
c00287af:	c3                   	ret    

c00287b0 <FAT::write(void*, unsigned long, void*, int*)>:
c00287b0:	83 ec 1c             	sub    esp,0x1c
c00287b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287b8:	74 0a                	je     c00287c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00287ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00287bf:	75 0b                	jne    c00287cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00287c1:	8d 76 00             	lea    esi,[esi+0x0]
c00287c4:	b8 04 00 00 00       	mov    eax,0x4
c00287c9:	eb 41                	jmp    c002880c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00287cb:	90                   	nop
c00287cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287d0:	50                   	push   eax
c00287d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00287d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00287d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287dd:	e8 ee ba fd ff       	call   c00042d0 <f_write>
c00287e2:	83 c4 10             	add    esp,0x10
c00287e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287ed:	89 c2                	mov    edx,eax
c00287ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00287f3:	89 10                	mov    DWORD PTR [eax],edx
c00287f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287f9:	85 c0                	test   eax,eax
c00287fb:	75 07                	jne    c0028804 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00287fd:	b8 00 00 00 00       	mov    eax,0x0
c0028802:	eb 08                	jmp    c002880c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028804:	b8 01 00 00 00       	mov    eax,0x1
c0028809:	8d 76 00             	lea    esi,[esi+0x0]
c002880c:	83 c4 1c             	add    esp,0x1c
c002880f:	c3                   	ret    

c0028810 <FAT::close(void*)>:
c0028810:	83 ec 1c             	sub    esp,0x1c
c0028813:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028818:	75 0a                	jne    c0028824 <FAT::close(void*)+0x14>
c002881a:	b8 04 00 00 00       	mov    eax,0x4
c002881f:	eb 3f                	jmp    c0028860 <FAT::close(void*)+0x50>
c0028821:	8d 76 00             	lea    esi,[esi+0x0]
c0028824:	83 ec 0c             	sub    esp,0xc
c0028827:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002882b:	e8 ad bd fd ff       	call   c00045dd <f_close>
c0028830:	83 c4 10             	add    esp,0x10
c0028833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028837:	83 ec 0c             	sub    esp,0xc
c002883a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002883e:	e8 87 db fe ff       	call   c00163ca <free>
c0028843:	83 c4 10             	add    esp,0x10
c0028846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002884a:	85 c0                	test   eax,eax
c002884c:	75 0a                	jne    c0028858 <FAT::close(void*)+0x48>
c002884e:	b8 00 00 00 00       	mov    eax,0x0
c0028853:	eb 0b                	jmp    c0028860 <FAT::close(void*)+0x50>
c0028855:	8d 76 00             	lea    esi,[esi+0x0]
c0028858:	b8 01 00 00 00       	mov    eax,0x1
c002885d:	8d 76 00             	lea    esi,[esi+0x0]
c0028860:	83 c4 1c             	add    esp,0x1c
c0028863:	c3                   	ret    

c0028864 <FAT::closeDir(void*)>:
c0028864:	83 ec 1c             	sub    esp,0x1c
c0028867:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002886c:	75 0a                	jne    c0028878 <FAT::closeDir(void*)+0x14>
c002886e:	b8 04 00 00 00       	mov    eax,0x4
c0028873:	eb 3f                	jmp    c00288b4 <FAT::closeDir(void*)+0x50>
c0028875:	8d 76 00             	lea    esi,[esi+0x0]
c0028878:	83 ec 0c             	sub    esp,0xc
c002887b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002887f:	e8 04 c0 fd ff       	call   c0004888 <f_closedir>
c0028884:	83 c4 10             	add    esp,0x10
c0028887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002888b:	83 ec 0c             	sub    esp,0xc
c002888e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028892:	e8 33 db fe ff       	call   c00163ca <free>
c0028897:	83 c4 10             	add    esp,0x10
c002889a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002889e:	85 c0                	test   eax,eax
c00288a0:	75 0a                	jne    c00288ac <FAT::closeDir(void*)+0x48>
c00288a2:	b8 00 00 00 00       	mov    eax,0x0
c00288a7:	eb 0b                	jmp    c00288b4 <FAT::closeDir(void*)+0x50>
c00288a9:	8d 76 00             	lea    esi,[esi+0x0]
c00288ac:	b8 01 00 00 00       	mov    eax,0x1
c00288b1:	8d 76 00             	lea    esi,[esi+0x0]
c00288b4:	83 c4 1c             	add    esp,0x1c
c00288b7:	c3                   	ret    

c00288b8 <FAT::truncate(void*, unsigned long long)>:
c00288b8:	83 ec 2c             	sub    esp,0x2c
c00288bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00288bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00288c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00288c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00288d0:	75 0a                	jne    c00288dc <FAT::truncate(void*, unsigned long long)+0x24>
c00288d2:	b8 04 00 00 00       	mov    eax,0x4
c00288d7:	eb 47                	jmp    c0028920 <FAT::truncate(void*, unsigned long long)+0x68>
c00288d9:	8d 76 00             	lea    esi,[esi+0x0]
c00288dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00288e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00288e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00288e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00288ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288f3:	83 ec 08             	sub    esp,0x8
c00288f6:	50                   	push   eax
c00288f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00288fb:	e8 0c bd fd ff       	call   c000460c <f_lseek>
c0028900:	83 c4 10             	add    esp,0x10
c0028903:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002890b:	85 c0                	test   eax,eax
c002890d:	75 09                	jne    c0028918 <FAT::truncate(void*, unsigned long long)+0x60>
c002890f:	b8 00 00 00 00       	mov    eax,0x0
c0028914:	eb 0a                	jmp    c0028920 <FAT::truncate(void*, unsigned long long)+0x68>
c0028916:	66 90                	xchg   ax,ax
c0028918:	b8 01 00 00 00       	mov    eax,0x1
c002891d:	8d 76 00             	lea    esi,[esi+0x0]
c0028920:	83 c4 2c             	add    esp,0x2c
c0028923:	c3                   	ret    

c0028924 <FAT::seek(void*, unsigned long long)>:
c0028924:	83 ec 2c             	sub    esp,0x2c
c0028927:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002892b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002892f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028937:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002893c:	75 0a                	jne    c0028948 <FAT::seek(void*, unsigned long long)+0x24>
c002893e:	b8 04 00 00 00       	mov    eax,0x4
c0028943:	eb 33                	jmp    c0028978 <FAT::seek(void*, unsigned long long)+0x54>
c0028945:	8d 76 00             	lea    esi,[esi+0x0]
c0028948:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002894c:	83 ec 08             	sub    esp,0x8
c002894f:	50                   	push   eax
c0028950:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028954:	e8 b3 bc fd ff       	call   c000460c <f_lseek>
c0028959:	83 c4 10             	add    esp,0x10
c002895c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028964:	85 c0                	test   eax,eax
c0028966:	75 08                	jne    c0028970 <FAT::seek(void*, unsigned long long)+0x4c>
c0028968:	b8 00 00 00 00       	mov    eax,0x0
c002896d:	eb 09                	jmp    c0028978 <FAT::seek(void*, unsigned long long)+0x54>
c002896f:	90                   	nop
c0028970:	b8 01 00 00 00       	mov    eax,0x1
c0028975:	8d 76 00             	lea    esi,[esi+0x0]
c0028978:	83 c4 2c             	add    esp,0x2c
c002897b:	c3                   	ret    

c002897c <fatWrapperReadDisk>:
c002897c:	53                   	push   ebx
c002897d:	83 ec 18             	sub    esp,0x18
c0028980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028984:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028988:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002898d:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028994:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028998:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002899c:	ba 00 00 00 00       	mov    edx,0x0
c00289a1:	83 ec 0c             	sub    esp,0xc
c00289a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289a8:	53                   	push   ebx
c00289a9:	52                   	push   edx
c00289aa:	50                   	push   eax
c00289ab:	51                   	push   ecx
c00289ac:	e8 0b 3d ff ff       	call   c001c6bc <LogicalDisk::read(unsigned long long, int, void*)>
c00289b1:	83 c4 20             	add    esp,0x20
c00289b4:	83 c4 18             	add    esp,0x18
c00289b7:	5b                   	pop    ebx
c00289b8:	c3                   	ret    
c00289b9:	8d 76 00             	lea    esi,[esi+0x0]

c00289bc <fatWrapperWriteDisk>:
c00289bc:	53                   	push   ebx
c00289bd:	83 ec 18             	sub    esp,0x18
c00289c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00289c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289cd:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00289d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00289d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00289dc:	ba 00 00 00 00       	mov    edx,0x0
c00289e1:	83 ec 0c             	sub    esp,0xc
c00289e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289e8:	53                   	push   ebx
c00289e9:	52                   	push   edx
c00289ea:	50                   	push   eax
c00289eb:	51                   	push   ecx
c00289ec:	e8 37 3d ff ff       	call   c001c728 <LogicalDisk::write(unsigned long long, int, void*)>
c00289f1:	83 c4 20             	add    esp,0x20
c00289f4:	83 c4 18             	add    esp,0x18
c00289f7:	5b                   	pop    ebx
c00289f8:	c3                   	ret    
c00289f9:	8d 76 00             	lea    esi,[esi+0x0]

c00289fc <fatWrapperIoctl>:
c00289fc:	53                   	push   ebx
c00289fd:	83 ec 28             	sub    esp,0x28
c0028a00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028a04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028a08:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028a0c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028a10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a15:	83 f8 02             	cmp    eax,0x2
c0028a18:	75 32                	jne    c0028a4c <fatWrapperIoctl+0x50>
c0028a1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028a22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a27:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028a3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028a3e:	66 89 02             	mov    WORD PTR [edx],ax
c0028a41:	b8 00 00 00 00       	mov    eax,0x0
c0028a46:	e9 c5 00 00 00       	jmp    c0028b10 <fatWrapperIoctl+0x114>
c0028a4b:	90                   	nop
c0028a4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a51:	83 f8 01             	cmp    eax,0x1
c0028a54:	75 6a                	jne    c0028ac0 <fatWrapperIoctl+0xc4>
c0028a56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028a5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a63:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a6a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a70:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028a76:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028a7c:	89 c8                	mov    eax,ecx
c0028a7e:	89 da                	mov    edx,ebx
c0028a80:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028a84:	c1 e0 0a             	shl    eax,0xa
c0028a87:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028a8c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028a93:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028a99:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028a9f:	89 cb                	mov    ebx,ecx
c0028aa1:	c1 fb 1f             	sar    ebx,0x1f
c0028aa4:	53                   	push   ebx
c0028aa5:	51                   	push   ecx
c0028aa6:	52                   	push   edx
c0028aa7:	50                   	push   eax
c0028aa8:	e8 a3 5b 00 00       	call   c002e650 <__udivdi3>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	89 c2                	mov    edx,eax
c0028ab2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028ab6:	89 10                	mov    DWORD PTR [eax],edx
c0028ab8:	b8 00 00 00 00       	mov    eax,0x0
c0028abd:	eb 51                	jmp    c0028b10 <fatWrapperIoctl+0x114>
c0028abf:	90                   	nop
c0028ac0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ac5:	85 c0                	test   eax,eax
c0028ac7:	75 07                	jne    c0028ad0 <fatWrapperIoctl+0xd4>
c0028ac9:	b8 00 00 00 00       	mov    eax,0x0
c0028ace:	eb 40                	jmp    c0028b10 <fatWrapperIoctl+0x114>
c0028ad0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ad5:	83 f8 03             	cmp    eax,0x3
c0028ad8:	75 1a                	jne    c0028af4 <fatWrapperIoctl+0xf8>
c0028ada:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ade:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028ae2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ae6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028aec:	b8 00 00 00 00       	mov    eax,0x0
c0028af1:	eb 1d                	jmp    c0028b10 <fatWrapperIoctl+0x114>
c0028af3:	90                   	nop
c0028af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028af9:	83 f8 04             	cmp    eax,0x4
c0028afc:	75 0a                	jne    c0028b08 <fatWrapperIoctl+0x10c>
c0028afe:	b8 00 00 00 00       	mov    eax,0x0
c0028b03:	eb 0b                	jmp    c0028b10 <fatWrapperIoctl+0x114>
c0028b05:	8d 76 00             	lea    esi,[esi+0x0]
c0028b08:	b8 04 00 00 00       	mov    eax,0x4
c0028b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b10:	83 c4 28             	add    esp,0x28
c0028b13:	5b                   	pop    ebx
c0028b14:	c3                   	ret    
c0028b15:	90                   	nop
c0028b16:	66 90                	xchg   ax,ax

c0028b18 <FAT::FAT()>:
c0028b18:	83 ec 1c             	sub    esp,0x1c
c0028b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	50                   	push   eax
c0028b23:	e8 86 15 ff ff       	call   c001a0ae <Filesystem::Filesystem()>
c0028b28:	83 c4 10             	add    esp,0x10
c0028b2b:	ba 48 33 03 c0       	mov    edx,0xc0033348
c0028b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b34:	89 10                	mov    DWORD PTR [eax],edx
c0028b36:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028b40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028b48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028b4d:	7f 19                	jg     c0028b68 <FAT::FAT()+0x50>
c0028b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b53:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028b5e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028b63:	eb e3                	jmp    c0028b48 <FAT::FAT()+0x30>
c0028b65:	8d 76 00             	lea    esi,[esi+0x0]
c0028b68:	90                   	nop
c0028b69:	83 c4 1c             	add    esp,0x1c
c0028b6c:	c3                   	ret    
c0028b6d:	90                   	nop
c0028b6e:	66 90                	xchg   ax,ax

c0028b70 <FAT::fixFilepath(char*)>:
c0028b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b74:	8a 00                	mov    al,BYTE PTR [eax]
c0028b76:	0f be c0             	movsx  eax,al
c0028b79:	83 f8 40             	cmp    eax,0x40
c0028b7c:	7e 2e                	jle    c0028bac <FAT::fixFilepath(char*)+0x3c>
c0028b7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b82:	8a 00                	mov    al,BYTE PTR [eax]
c0028b84:	83 e8 41             	sub    eax,0x41
c0028b87:	88 c2                	mov    dl,al
c0028b89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b8d:	88 10                	mov    BYTE PTR [eax],dl
c0028b8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b93:	8a 00                	mov    al,BYTE PTR [eax]
c0028b95:	0f be c0             	movsx  eax,al
c0028b98:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028b9f:	83 c0 30             	add    eax,0x30
c0028ba2:	88 c2                	mov    dl,al
c0028ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ba8:	88 10                	mov    BYTE PTR [eax],dl
c0028baa:	66 90                	xchg   ax,ax
c0028bac:	90                   	nop
c0028bad:	c3                   	ret    
c0028bae:	66 90                	xchg   ax,ax

c0028bb0 <FAT::open(char const*, void**, FileOpenMode)>:
c0028bb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028bb6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028bbe:	74 0c                	je     c0028bcc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028bc0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028bc8:	75 0e                	jne    c0028bd8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028bca:	66 90                	xchg   ax,ax
c0028bcc:	b8 04 00 00 00       	mov    eax,0x4
c0028bd1:	e9 46 01 00 00       	jmp    c0028d1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028bd6:	66 90                	xchg   ax,ax
c0028bd8:	83 ec 08             	sub    esp,0x8
c0028bdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028be2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028be6:	50                   	push   eax
c0028be7:	e8 54 7a fd ff       	call   c0000640 <strcpy>
c0028bec:	83 c4 10             	add    esp,0x10
c0028bef:	83 ec 08             	sub    esp,0x8
c0028bf2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028bf6:	50                   	push   eax
c0028bf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028bfe:	e8 6d ff ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0028c03:	83 c4 10             	add    esp,0x10
c0028c06:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028c0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c15:	83 e0 01             	and    eax,0x1
c0028c18:	74 12                	je     c0028c2c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028c1a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c21:	83 c8 01             	or     eax,0x1
c0028c24:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c2b:	90                   	nop
c0028c2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c33:	83 e0 04             	and    eax,0x4
c0028c36:	74 24                	je     c0028c5c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028c38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c3f:	83 c8 30             	or     eax,0x30
c0028c42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c49:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c50:	83 c8 02             	or     eax,0x2
c0028c53:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c5a:	66 90                	xchg   ax,ax
c0028c5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c63:	83 e0 02             	and    eax,0x2
c0028c66:	74 14                	je     c0028c7c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028c68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c6f:	83 c8 02             	or     eax,0x2
c0028c72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c79:	8d 76 00             	lea    esi,[esi+0x0]
c0028c7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c83:	83 e0 08             	and    eax,0x8
c0028c86:	74 14                	je     c0028c9c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028c88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c8f:	83 c8 04             	or     eax,0x4
c0028c92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c99:	8d 76 00             	lea    esi,[esi+0x0]
c0028c9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ca3:	83 e0 10             	and    eax,0x10
c0028ca6:	74 14                	je     c0028cbc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028ca8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028caf:	83 c8 08             	or     eax,0x8
c0028cb2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cbc:	83 ec 0c             	sub    esp,0xc
c0028cbf:	68 28 02 00 00       	push   0x228
c0028cc4:	e8 f1 d6 fe ff       	call   c00163ba <malloc>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	89 c2                	mov    edx,eax
c0028cce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cd5:	89 10                	mov    DWORD PTR [eax],edx
c0028cd7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028cdf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ce8:	83 ec 04             	sub    esp,0x4
c0028ceb:	52                   	push   edx
c0028cec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028cf0:	52                   	push   edx
c0028cf1:	50                   	push   eax
c0028cf2:	e8 17 b1 fd ff       	call   c0003e0e <f_open>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028d01:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028d09:	74 09                	je     c0028d14 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028d0b:	b8 01 00 00 00       	mov    eax,0x1
c0028d10:	eb 0a                	jmp    c0028d1c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028d12:	66 90                	xchg   ax,ax
c0028d14:	b8 00 00 00 00       	mov    eax,0x0
c0028d19:	8d 76 00             	lea    esi,[esi+0x0]
c0028d1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d22:	c3                   	ret    
c0028d23:	90                   	nop

c0028d24 <FAT::openDir(char const*, void**)>:
c0028d24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028d2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028d32:	74 0c                	je     c0028d40 <FAT::openDir(char const*, void**)+0x1c>
c0028d34:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028d3c:	75 0e                	jne    c0028d4c <FAT::openDir(char const*, void**)+0x28>
c0028d3e:	66 90                	xchg   ax,ax
c0028d40:	b8 04 00 00 00       	mov    eax,0x4
c0028d45:	e9 82 00 00 00       	jmp    c0028dcc <FAT::openDir(char const*, void**)+0xa8>
c0028d4a:	66 90                	xchg   ax,ax
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028d56:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028d5a:	50                   	push   eax
c0028d5b:	e8 e0 78 fd ff       	call   c0000640 <strcpy>
c0028d60:	83 c4 10             	add    esp,0x10
c0028d63:	83 ec 08             	sub    esp,0x8
c0028d66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d6a:	50                   	push   eax
c0028d6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028d72:	e8 f9 fd ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0028d77:	83 c4 10             	add    esp,0x10
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	6a 30                	push   0x30
c0028d7f:	e8 36 d6 fe ff       	call   c00163ba <malloc>
c0028d84:	83 c4 10             	add    esp,0x10
c0028d87:	89 c2                	mov    edx,eax
c0028d89:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d90:	89 10                	mov    DWORD PTR [eax],edx
c0028d92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d9b:	83 ec 08             	sub    esp,0x8
c0028d9e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028da2:	52                   	push   edx
c0028da3:	50                   	push   eax
c0028da4:	e8 14 ba fd ff       	call   c00047bd <f_opendir>
c0028da9:	83 c4 10             	add    esp,0x10
c0028dac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028db3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028dbb:	74 07                	je     c0028dc4 <FAT::openDir(char const*, void**)+0xa0>
c0028dbd:	b8 01 00 00 00       	mov    eax,0x1
c0028dc2:	eb 08                	jmp    c0028dcc <FAT::openDir(char const*, void**)+0xa8>
c0028dc4:	b8 00 00 00 00       	mov    eax,0x0
c0028dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dcc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028dd2:	c3                   	ret    
c0028dd3:	90                   	nop

c0028dd4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028dd4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028dda:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028de2:	75 0c                	jne    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028de4:	b8 04 00 00 00       	mov    eax,0x4
c0028de9:	e9 d6 00 00 00       	jmp    c0028ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028dee:	66 90                	xchg   ax,ax
c0028df0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028df8:	75 0a                	jne    c0028e04 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028dfa:	b8 04 00 00 00       	mov    eax,0x4
c0028dff:	e9 c0 00 00 00       	jmp    c0028ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e04:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028e0c:	75 0a                	jne    c0028e18 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028e0e:	b8 04 00 00 00       	mov    eax,0x4
c0028e13:	e9 ac 00 00 00       	jmp    c0028ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e18:	83 ec 08             	sub    esp,0x8
c0028e1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e22:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e29:	50                   	push   eax
c0028e2a:	e8 11 78 fd ff       	call   c0000640 <strcpy>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	83 ec 08             	sub    esp,0x8
c0028e35:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028e3c:	50                   	push   eax
c0028e3d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e44:	e8 27 fd ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028e53:	50                   	push   eax
c0028e54:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e5b:	50                   	push   eax
c0028e5c:	e8 db ba fd ff       	call   c000493c <f_stat>
c0028e61:	83 c4 10             	add    esp,0x10
c0028e64:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028e6b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028e72:	85 c0                	test   eax,eax
c0028e74:	74 0a                	je     c0028e80 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028e76:	83 f8 04             	cmp    eax,0x4
c0028e79:	74 39                	je     c0028eb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028e7b:	eb 3f                	jmp    c0028ebc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028e84:	0f b6 c0             	movzx  eax,al
c0028e87:	83 e0 10             	and    eax,0x10
c0028e8a:	0f 95 c2             	setne  dl
c0028e8d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028e94:	88 10                	mov    BYTE PTR [eax],dl
c0028e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e9a:	ba 00 00 00 00       	mov    edx,0x0
c0028e9f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028ea6:	89 01                	mov    DWORD PTR [ecx],eax
c0028ea8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028eab:	b8 00 00 00 00       	mov    eax,0x0
c0028eb0:	eb 12                	jmp    c0028ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028eb2:	66 90                	xchg   ax,ax
c0028eb4:	b8 02 00 00 00       	mov    eax,0x2
c0028eb9:	eb 09                	jmp    c0028ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028ebb:	90                   	nop
c0028ebc:	b8 01 00 00 00       	mov    eax,0x1
c0028ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ec4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028eca:	c3                   	ret    
c0028ecb:	90                   	nop

c0028ecc <FAT::unlink(char const*)>:
c0028ecc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028ed2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028eda:	75 08                	jne    c0028ee4 <FAT::unlink(char const*)+0x18>
c0028edc:	b8 04 00 00 00       	mov    eax,0x4
c0028ee1:	eb 61                	jmp    c0028f44 <FAT::unlink(char const*)+0x78>
c0028ee3:	90                   	nop
c0028ee4:	83 ec 08             	sub    esp,0x8
c0028ee7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028eee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028ef2:	50                   	push   eax
c0028ef3:	e8 48 77 fd ff       	call   c0000640 <strcpy>
c0028ef8:	83 c4 10             	add    esp,0x10
c0028efb:	83 ec 08             	sub    esp,0x8
c0028efe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f02:	50                   	push   eax
c0028f03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f0a:	e8 61 fc ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f19:	50                   	push   eax
c0028f1a:	e8 8f bc fd ff       	call   c0004bae <f_unlink>
c0028f1f:	83 c4 10             	add    esp,0x10
c0028f22:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028f29:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028f30:	85 c0                	test   eax,eax
c0028f32:	75 08                	jne    c0028f3c <FAT::unlink(char const*)+0x70>
c0028f34:	b8 00 00 00 00       	mov    eax,0x0
c0028f39:	eb 09                	jmp    c0028f44 <FAT::unlink(char const*)+0x78>
c0028f3b:	90                   	nop
c0028f3c:	b8 01 00 00 00       	mov    eax,0x1
c0028f41:	8d 76 00             	lea    esi,[esi+0x0]
c0028f44:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028f4a:	c3                   	ret    
c0028f4b:	90                   	nop

c0028f4c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028f4c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028f52:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028f59:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028f60:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028f64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028f68:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028f70:	75 0a                	jne    c0028f7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028f72:	b8 04 00 00 00       	mov    eax,0x4
c0028f77:	e9 7c 01 00 00       	jmp    c00290f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028f7c:	83 ec 08             	sub    esp,0x8
c0028f7f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028f86:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028f8a:	50                   	push   eax
c0028f8b:	e8 b0 76 fd ff       	call   c0000640 <strcpy>
c0028f90:	83 c4 10             	add    esp,0x10
c0028f93:	83 ec 08             	sub    esp,0x8
c0028f96:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028f9a:	50                   	push   eax
c0028f9b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028fa2:	e8 c9 fb ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028fb2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028fba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fbf:	83 e0 01             	and    eax,0x1
c0028fc2:	74 14                	je     c0028fd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028fc4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fcb:	83 c8 01             	or     eax,0x1
c0028fce:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0028fd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fdd:	83 e0 02             	and    eax,0x2
c0028fe0:	74 12                	je     c0028ff4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0028fe2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fe9:	83 c8 20             	or     eax,0x20
c0028fec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028ff3:	90                   	nop
c0028ff4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ff9:	83 e0 04             	and    eax,0x4
c0028ffc:	74 12                	je     c0029010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0028ffe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029005:	83 c8 04             	or     eax,0x4
c0029008:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002900f:	90                   	nop
c0029010:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029015:	83 e0 08             	and    eax,0x8
c0029018:	74 12                	je     c002902c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c002901a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029021:	83 c8 02             	or     eax,0x2
c0029024:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002902b:	90                   	nop
c002902c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029031:	83 e0 01             	and    eax,0x1
c0029034:	74 12                	je     c0029048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0029036:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002903d:	83 c8 01             	or     eax,0x1
c0029040:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029047:	90                   	nop
c0029048:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002904d:	83 e0 02             	and    eax,0x2
c0029050:	74 12                	je     c0029064 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0029052:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029059:	83 c8 20             	or     eax,0x20
c002905c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029063:	90                   	nop
c0029064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029069:	83 e0 04             	and    eax,0x4
c002906c:	74 12                	je     c0029080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c002906e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029075:	83 c8 04             	or     eax,0x4
c0029078:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002907f:	90                   	nop
c0029080:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029085:	83 e0 08             	and    eax,0x8
c0029088:	74 12                	je     c002909c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c002908a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029091:	83 c8 02             	or     eax,0x2
c0029094:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002909b:	90                   	nop
c002909c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00290a3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00290aa:	09 d0                	or     eax,edx
c00290ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290b3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00290bb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00290c3:	83 ec 04             	sub    esp,0x4
c00290c6:	52                   	push   edx
c00290c7:	50                   	push   eax
c00290c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00290cc:	50                   	push   eax
c00290cd:	e8 51 bf fd ff       	call   c0005023 <f_chmod>
c00290d2:	83 c4 10             	add    esp,0x10
c00290d5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00290dc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00290e3:	85 c0                	test   eax,eax
c00290e5:	75 09                	jne    c00290f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c00290e7:	b8 00 00 00 00       	mov    eax,0x0
c00290ec:	eb 0a                	jmp    c00290f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00290ee:	66 90                	xchg   ax,ax
c00290f0:	b8 01 00 00 00       	mov    eax,0x1
c00290f5:	8d 76 00             	lea    esi,[esi+0x0]
c00290f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00290fe:	c3                   	ret    
c00290ff:	90                   	nop

c0029100 <FAT::rename(char const*, char const*)>:
c0029100:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029106:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002910e:	74 0c                	je     c002911c <FAT::rename(char const*, char const*)+0x1c>
c0029110:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029118:	75 0e                	jne    c0029128 <FAT::rename(char const*, char const*)+0x28>
c002911a:	66 90                	xchg   ax,ax
c002911c:	b8 04 00 00 00       	mov    eax,0x4
c0029121:	e9 9e 00 00 00       	jmp    c00291c4 <FAT::rename(char const*, char const*)+0xc4>
c0029126:	66 90                	xchg   ax,ax
c0029128:	83 ec 08             	sub    esp,0x8
c002912b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029132:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029139:	50                   	push   eax
c002913a:	e8 01 75 fd ff       	call   c0000640 <strcpy>
c002913f:	83 c4 10             	add    esp,0x10
c0029142:	83 ec 08             	sub    esp,0x8
c0029145:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002914c:	50                   	push   eax
c002914d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029154:	e8 17 fa ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0029159:	83 c4 10             	add    esp,0x10
c002915c:	83 ec 08             	sub    esp,0x8
c002915f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0029166:	8d 44 24 18          	lea    eax,[esp+0x18]
c002916a:	50                   	push   eax
c002916b:	e8 d0 74 fd ff       	call   c0000640 <strcpy>
c0029170:	83 c4 10             	add    esp,0x10
c0029173:	83 ec 08             	sub    esp,0x8
c0029176:	8d 44 24 14          	lea    eax,[esp+0x14]
c002917a:	50                   	push   eax
c002917b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029182:	e8 e9 f9 ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c0029187:	83 c4 10             	add    esp,0x10
c002918a:	83 ec 08             	sub    esp,0x8
c002918d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029191:	50                   	push   eax
c0029192:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029199:	50                   	push   eax
c002919a:	e8 cc bc fd ff       	call   c0004e6b <f_rename>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00291a9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00291b0:	85 c0                	test   eax,eax
c00291b2:	75 08                	jne    c00291bc <FAT::rename(char const*, char const*)+0xbc>
c00291b4:	b8 00 00 00 00       	mov    eax,0x0
c00291b9:	eb 09                	jmp    c00291c4 <FAT::rename(char const*, char const*)+0xc4>
c00291bb:	90                   	nop
c00291bc:	b8 01 00 00 00       	mov    eax,0x1
c00291c1:	8d 76 00             	lea    esi,[esi+0x0]
c00291c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00291ca:	c3                   	ret    
c00291cb:	90                   	nop

c00291cc <FAT::mkdir(char const*)>:
c00291cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291da:	75 08                	jne    c00291e4 <FAT::mkdir(char const*)+0x18>
c00291dc:	b8 04 00 00 00       	mov    eax,0x4
c00291e1:	eb 61                	jmp    c0029244 <FAT::mkdir(char const*)+0x78>
c00291e3:	90                   	nop
c00291e4:	83 ec 08             	sub    esp,0x8
c00291e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291f2:	50                   	push   eax
c00291f3:	e8 48 74 fd ff       	call   c0000640 <strcpy>
c00291f8:	83 c4 10             	add    esp,0x10
c00291fb:	83 ec 08             	sub    esp,0x8
c00291fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029202:	50                   	push   eax
c0029203:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002920a:	e8 61 f9 ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c002920f:	83 c4 10             	add    esp,0x10
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029219:	50                   	push   eax
c002921a:	e8 b1 ba fd ff       	call   c0004cd0 <f_mkdir>
c002921f:	83 c4 10             	add    esp,0x10
c0029222:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029229:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029230:	85 c0                	test   eax,eax
c0029232:	75 08                	jne    c002923c <FAT::mkdir(char const*)+0x70>
c0029234:	b8 00 00 00 00       	mov    eax,0x0
c0029239:	eb 09                	jmp    c0029244 <FAT::mkdir(char const*)+0x78>
c002923b:	90                   	nop
c002923c:	b8 01 00 00 00       	mov    eax,0x1
c0029241:	8d 76 00             	lea    esi,[esi+0x0]
c0029244:	81 c4 1c 01 00 00    	add    esp,0x11c
c002924a:	c3                   	ret    
c002924b:	90                   	nop

c002924c <FAT::exists(char const*)>:
c002924c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029252:	83 ec 08             	sub    esp,0x8
c0029255:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002925c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029260:	50                   	push   eax
c0029261:	e8 da 73 fd ff       	call   c0000640 <strcpy>
c0029266:	83 c4 10             	add    esp,0x10
c0029269:	83 ec 08             	sub    esp,0x8
c002926c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029270:	50                   	push   eax
c0029271:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029278:	e8 f3 f8 ff ff       	call   c0028b70 <FAT::fixFilepath(char*)>
c002927d:	83 c4 10             	add    esp,0x10
c0029280:	83 ec 08             	sub    esp,0x8
c0029283:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c002928a:	50                   	push   eax
c002928b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002928f:	50                   	push   eax
c0029290:	e8 a7 b6 fd ff       	call   c000493c <f_stat>
c0029295:	83 c4 10             	add    esp,0x10
c0029298:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002929f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00292a6:	85 c0                	test   eax,eax
c00292a8:	75 06                	jne    c00292b0 <FAT::exists(char const*)+0x64>
c00292aa:	b0 01                	mov    al,0x1
c00292ac:	eb 06                	jmp    c00292b4 <FAT::exists(char const*)+0x68>
c00292ae:	66 90                	xchg   ax,ax
c00292b0:	b0 00                	mov    al,0x0
c00292b2:	66 90                	xchg   ax,ax
c00292b4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00292ba:	c3                   	ret    
c00292bb:	90                   	nop

c00292bc <isoReadDiscSectorHelper>:
c00292bc:	83 ec 2c             	sub    esp,0x2c
c00292bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00292c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00292c7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00292cc:	83 e8 41             	sub    eax,0x41
c00292cf:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00292d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00292da:	ba 00 00 00 00       	mov    edx,0x0
c00292df:	83 ec 0c             	sub    esp,0xc
c00292e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00292e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00292ea:	52                   	push   edx
c00292eb:	50                   	push   eax
c00292ec:	51                   	push   ecx
c00292ed:	e8 ca 33 ff ff       	call   c001c6bc <LogicalDisk::read(unsigned long long, int, void*)>
c00292f2:	83 c4 20             	add    esp,0x20
c00292f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00292f9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00292fe:	74 0c                	je     c002930c <isoReadDiscSectorHelper+0x50>
c0029300:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029304:	c1 e0 0b             	shl    eax,0xb
c0029307:	eb 0b                	jmp    c0029314 <isoReadDiscSectorHelper+0x58>
c0029309:	8d 76 00             	lea    esi,[esi+0x0]
c002930c:	b8 00 00 00 00       	mov    eax,0x0
c0029311:	8d 76 00             	lea    esi,[esi+0x0]
c0029314:	83 c4 2c             	add    esp,0x2c
c0029317:	c3                   	ret    

c0029318 <iso_kprintf>:
c0029318:	83 ec 0c             	sub    esp,0xc
c002931b:	83 ec 08             	sub    esp,0x8
c002931e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029322:	68 f6 30 03 c0       	push   0xc00330f6
c0029327:	e8 1d ff fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002932c:	83 c4 10             	add    esp,0x10
c002932f:	90                   	nop
c0029330:	83 c4 0c             	add    esp,0xc
c0029333:	c3                   	ret    

c0029334 <iso_kprintfd>:
c0029334:	83 ec 0c             	sub    esp,0xc
c0029337:	83 ec 08             	sub    esp,0x8
c002933a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002933e:	68 2a 17 03 c0       	push   0xc003172a
c0029343:	e8 01 ff fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0029348:	83 c4 10             	add    esp,0x10
c002934b:	90                   	nop
c002934c:	83 c4 0c             	add    esp,0xc
c002934f:	c3                   	ret    

c0029350 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029350:	b8 08 00 00 00       	mov    eax,0x8
c0029355:	c3                   	ret    

c0029356 <ISO9660::truncate(void*, unsigned long long)>:
c0029356:	b8 01 00 00 00       	mov    eax,0x1
c002935b:	c3                   	ret    

c002935c <ISO9660::getName()>:
c002935c:	b8 ac 33 03 c0       	mov    eax,0xc00333ac
c0029361:	c3                   	ret    

c0029362 <ISO9660::closeDir(void*)>:
c0029362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029366:	8b 00                	mov    eax,DWORD PTR [eax]
c0029368:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002936b:	90                   	nop

c002936c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002936c:	b8 01 00 00 00       	mov    eax,0x1
c0029371:	c3                   	ret    

c0029372 <ISO9660::unlink(char const*)>:
c0029372:	b8 01 00 00 00       	mov    eax,0x1
c0029377:	c3                   	ret    

c0029378 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029378:	b8 03 00 00 00       	mov    eax,0x3
c002937d:	c3                   	ret    

c002937e <ISO9660::rename(char const*, char const*)>:
c002937e:	b8 01 00 00 00       	mov    eax,0x1
c0029383:	c3                   	ret    

c0029384 <ISO9660::mkdir(char const*)>:
c0029384:	b8 01 00 00 00       	mov    eax,0x1
c0029389:	c3                   	ret    

c002938a <ISO9660::~ISO9660()>:
c002938a:	83 ec 0c             	sub    esp,0xc
c002938d:	ba ec 34 03 c0       	mov    edx,0xc00334ec
c0029392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029396:	89 10                	mov    DWORD PTR [eax],edx
c0029398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	50                   	push   eax
c00293a0:	e8 2d 0d ff ff       	call   c001a0d2 <Filesystem::~Filesystem()>
c00293a5:	83 c4 10             	add    esp,0x10
c00293a8:	90                   	nop
c00293a9:	83 c4 0c             	add    esp,0xc
c00293ac:	c3                   	ret    
c00293ad:	90                   	nop

c00293ae <ISO9660::~ISO9660()>:
c00293ae:	83 ec 0c             	sub    esp,0xc
c00293b1:	83 ec 0c             	sub    esp,0xc
c00293b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293b8:	e8 cd ff ff ff       	call   c002938a <ISO9660::~ISO9660()>
c00293bd:	83 c4 10             	add    esp,0x10
c00293c0:	83 ec 08             	sub    esp,0x8
c00293c3:	6a 08                	push   0x8
c00293c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293c9:	e8 4e fd fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c00293ce:	83 c4 10             	add    esp,0x10
c00293d1:	83 c4 0c             	add    esp,0xc
c00293d4:	c3                   	ret    
c00293d5:	90                   	nop

c00293d6 <ISO9660::exists(char const*)>:
c00293d6:	83 ec 18             	sub    esp,0x18
c00293d9:	68 c7 33 03 c0       	push   0xc00333c7
c00293de:	e8 7f 6e ff ff       	call   c0020262 <KePanic(char const*)>
c00293e3:	31 c0                	xor    eax,eax
c00293e5:	83 c4 1c             	add    esp,0x1c
c00293e8:	c3                   	ret    
c00293e9:	90                   	nop

c00293ea <ISO9660::open(char const*, void**, FileOpenMode)>:
c00293ea:	56                   	push   esi
c00293eb:	53                   	push   ebx
c00293ec:	53                   	push   ebx
c00293ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00293f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00293f5:	85 db                	test   ebx,ebx
c00293f7:	0f 84 ca 00 00 00    	je     c00294c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00293fd:	85 f6                	test   esi,esi
c00293ff:	0f 84 c2 00 00 00    	je     c00294c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029405:	b8 03 00 00 00       	mov    eax,0x3
c002940a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002940f:	0f 85 b7 00 00 00    	jne    c00294cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029415:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029417:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002941e:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029424:	74 1b                	je     c0029441 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029426:	85 c0                	test   eax,eax
c0029428:	74 10                	je     c002943a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002942a:	83 ec 0c             	sub    esp,0xc
c002942d:	68 e5 33 03 c0       	push   0xc00333e5
c0029432:	e8 2b 6e ff ff       	call   c0020262 <KePanic(char const*)>
c0029437:	83 c4 10             	add    esp,0x10
c002943a:	8a 03                	mov    al,BYTE PTR [ebx]
c002943c:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029441:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029444:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002944b:	85 c0                	test   eax,eax
c002944d:	74 09                	je     c0029458 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c002944f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029456:	74 48                	je     c00294a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029458:	83 ec 0c             	sub    esp,0xc
c002945b:	68 f5 33 03 c0       	push   0xc00333f5
c0029460:	e8 e4 fd fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0029465:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029468:	83 c4 10             	add    esp,0x10
c002946b:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029472:	85 c0                	test   eax,eax
c0029474:	74 17                	je     c002948d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029476:	83 ec 0c             	sub    esp,0xc
c0029479:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029480:	68 15 34 03 c0       	push   0xc0033415
c0029485:	e8 bf fd fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002948a:	83 c4 10             	add    esp,0x10
c002948d:	83 ec 0c             	sub    esp,0xc
c0029490:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029497:	50                   	push   eax
c0029498:	e8 5d d7 fd ff       	call   c0006bfa <init_percd>
c002949d:	83 c4 10             	add    esp,0x10
c00294a0:	83 c3 03             	add    ebx,0x3
c00294a3:	51                   	push   ecx
c00294a4:	51                   	push   ecx
c00294a5:	6a 00                	push   0x0
c00294a7:	53                   	push   ebx
c00294a8:	e8 14 d2 fd ff       	call   c00066c1 <iso_open>
c00294ad:	83 c4 10             	add    esp,0x10
c00294b0:	89 c2                	mov    edx,eax
c00294b2:	b8 01 00 00 00       	mov    eax,0x1
c00294b7:	83 fa ff             	cmp    edx,0xffffffff
c00294ba:	74 10                	je     c00294cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294bc:	83 c2 32             	add    edx,0x32
c00294bf:	31 c0                	xor    eax,eax
c00294c1:	01 d2                	add    edx,edx
c00294c3:	89 16                	mov    DWORD PTR [esi],edx
c00294c5:	eb 05                	jmp    c00294cc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294c7:	b8 04 00 00 00       	mov    eax,0x4
c00294cc:	5a                   	pop    edx
c00294cd:	5b                   	pop    ebx
c00294ce:	5e                   	pop    esi
c00294cf:	c3                   	ret    

c00294d0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00294d0:	53                   	push   ebx
c00294d1:	83 ec 08             	sub    esp,0x8
c00294d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00294d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00294dc:	85 c0                	test   eax,eax
c00294de:	74 2d                	je     c002950d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00294e0:	85 db                	test   ebx,ebx
c00294e2:	74 29                	je     c002950d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00294e4:	b9 02 00 00 00       	mov    ecx,0x2
c00294e9:	52                   	push   edx
c00294ea:	99                   	cdq    
c00294eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294ef:	f7 f9                	idiv   ecx
c00294f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00294f5:	83 e8 32             	sub    eax,0x32
c00294f8:	50                   	push   eax
c00294f9:	e8 6b d2 fd ff       	call   c0006769 <iso_read>
c00294fe:	83 c4 10             	add    esp,0x10
c0029501:	89 03                	mov    DWORD PTR [ebx],eax
c0029503:	09 d0                	or     eax,edx
c0029505:	0f 94 c0             	sete   al
c0029508:	0f b6 c0             	movzx  eax,al
c002950b:	eb 05                	jmp    c0029512 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c002950d:	b8 04 00 00 00       	mov    eax,0x4
c0029512:	83 c4 08             	add    esp,0x8
c0029515:	5b                   	pop    ebx
c0029516:	c3                   	ret    
c0029517:	90                   	nop

c0029518 <ISO9660::seek(void*, unsigned long long)>:
c0029518:	57                   	push   edi
c0029519:	56                   	push   esi
c002951a:	b8 04 00 00 00       	mov    eax,0x4
c002951f:	51                   	push   ecx
c0029520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029524:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029528:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002952c:	85 d2                	test   edx,edx
c002952e:	74 26                	je     c0029556 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029530:	6a 00                	push   0x0
c0029532:	b9 02 00 00 00       	mov    ecx,0x2
c0029537:	57                   	push   edi
c0029538:	89 d0                	mov    eax,edx
c002953a:	56                   	push   esi
c002953b:	99                   	cdq    
c002953c:	f7 f9                	idiv   ecx
c002953e:	83 e8 32             	sub    eax,0x32
c0029541:	50                   	push   eax
c0029542:	e8 38 d3 fd ff       	call   c000687f <iso_seek>
c0029547:	83 c4 10             	add    esp,0x10
c002954a:	31 f0                	xor    eax,esi
c002954c:	31 fa                	xor    edx,edi
c002954e:	09 d0                	or     eax,edx
c0029550:	0f 95 c0             	setne  al
c0029553:	0f b6 c0             	movzx  eax,al
c0029556:	5a                   	pop    edx
c0029557:	5e                   	pop    esi
c0029558:	5f                   	pop    edi
c0029559:	c3                   	ret    

c002955a <ISO9660::tell(void*, unsigned long long*)>:
c002955a:	53                   	push   ebx
c002955b:	83 ec 08             	sub    esp,0x8
c002955e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029562:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029566:	85 c0                	test   eax,eax
c0029568:	74 24                	je     c002958e <ISO9660::tell(void*, unsigned long long*)+0x34>
c002956a:	85 db                	test   ebx,ebx
c002956c:	74 20                	je     c002958e <ISO9660::tell(void*, unsigned long long*)+0x34>
c002956e:	83 ec 0c             	sub    esp,0xc
c0029571:	b9 02 00 00 00       	mov    ecx,0x2
c0029576:	99                   	cdq    
c0029577:	f7 f9                	idiv   ecx
c0029579:	83 e8 32             	sub    eax,0x32
c002957c:	50                   	push   eax
c002957d:	e8 81 d3 fd ff       	call   c0006903 <iso_tell>
c0029582:	83 c4 10             	add    esp,0x10
c0029585:	89 03                	mov    DWORD PTR [ebx],eax
c0029587:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c002958a:	31 c0                	xor    eax,eax
c002958c:	eb 05                	jmp    c0029593 <ISO9660::tell(void*, unsigned long long*)+0x39>
c002958e:	b8 04 00 00 00       	mov    eax,0x4
c0029593:	83 c4 08             	add    esp,0x8
c0029596:	5b                   	pop    ebx
c0029597:	c3                   	ret    

c0029598 <ISO9660::stat(void*, unsigned long long*)>:
c0029598:	53                   	push   ebx
c0029599:	83 ec 14             	sub    esp,0x14
c002959c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00295a0:	68 39 34 03 c0       	push   0xc0033439
c00295a5:	e8 9f fc fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00295aa:	83 c4 10             	add    esp,0x10
c00295ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295b2:	74 2c                	je     c00295e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295b4:	85 db                	test   ebx,ebx
c00295b6:	74 28                	je     c00295e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295b8:	83 ec 0c             	sub    esp,0xc
c00295bb:	b9 02 00 00 00       	mov    ecx,0x2
c00295c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00295c4:	99                   	cdq    
c00295c5:	f7 f9                	idiv   ecx
c00295c7:	83 e8 32             	sub    eax,0x32
c00295ca:	50                   	push   eax
c00295cb:	e8 64 d3 fd ff       	call   c0006934 <iso_total>
c00295d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00295d7:	89 03                	mov    DWORD PTR [ebx],eax
c00295d9:	83 c4 10             	add    esp,0x10
c00295dc:	31 c0                	xor    eax,eax
c00295de:	eb 05                	jmp    c00295e5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00295e0:	b8 04 00 00 00       	mov    eax,0x4
c00295e5:	83 c4 08             	add    esp,0x8
c00295e8:	5b                   	pop    ebx
c00295e9:	c3                   	ret    

c00295ea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00295ea:	55                   	push   ebp
c00295eb:	57                   	push   edi
c00295ec:	56                   	push   esi
c00295ed:	53                   	push   ebx
c00295ee:	83 ec 18             	sub    esp,0x18
c00295f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00295f5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00295f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00295fd:	68 41 34 03 c0       	push   0xc0033441
c0029602:	e8 42 fc fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0029607:	83 c4 10             	add    esp,0x10
c002960a:	85 ff                	test   edi,edi
c002960c:	0f 94 c0             	sete   al
c002960f:	85 f6                	test   esi,esi
c0029611:	0f 94 c2             	sete   dl
c0029614:	09 d0                	or     eax,edx
c0029616:	a8 01                	test   al,0x1
c0029618:	0f 85 dd 00 00 00    	jne    c00296fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002961e:	85 db                	test   ebx,ebx
c0029620:	0f 84 d5 00 00 00    	je     c00296fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029626:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029629:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002962f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029636:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002963d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002963f:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029645:	74 1b                	je     c0029662 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029647:	85 c0                	test   eax,eax
c0029649:	74 10                	je     c002965b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002964b:	83 ec 0c             	sub    esp,0xc
c002964e:	68 e5 33 03 c0       	push   0xc00333e5
c0029653:	e8 0a 6c ff ff       	call   c0020262 <KePanic(char const*)>
c0029658:	83 c4 10             	add    esp,0x10
c002965b:	8a 03                	mov    al,BYTE PTR [ebx]
c002965d:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029662:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029665:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002966c:	85 c0                	test   eax,eax
c002966e:	74 09                	je     c0029679 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029670:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029677:	74 51                	je     c00296ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029679:	83 ec 0c             	sub    esp,0xc
c002967c:	68 49 34 03 c0       	push   0xc0033449
c0029681:	e8 c3 fb fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0029686:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029689:	83 c4 10             	add    esp,0x10
c002968c:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029694:	74 21                	je     c00296b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029696:	83 ec 0c             	sub    esp,0xc
c0029699:	68 69 34 03 c0       	push   0xc0033469
c002969e:	e8 a6 fb fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c00296a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296a6:	83 c4 10             	add    esp,0x10
c00296a9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296b0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296b7:	83 ec 0c             	sub    esp,0xc
c00296ba:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296c1:	50                   	push   eax
c00296c2:	e8 33 d5 fd ff       	call   c0006bfa <init_percd>
c00296c7:	83 c4 10             	add    esp,0x10
c00296ca:	83 c3 03             	add    ebx,0x3
c00296cd:	52                   	push   edx
c00296ce:	52                   	push   edx
c00296cf:	6a 00                	push   0x0
c00296d1:	53                   	push   ebx
c00296d2:	e8 ea cf fd ff       	call   c00066c1 <iso_open>
c00296d7:	83 c4 10             	add    esp,0x10
c00296da:	89 c5                	mov    ebp,eax
c00296dc:	83 f8 ff             	cmp    eax,0xffffffff
c00296df:	75 21                	jne    c0029702 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00296e1:	50                   	push   eax
c00296e2:	50                   	push   eax
c00296e3:	6a 01                	push   0x1
c00296e5:	53                   	push   ebx
c00296e6:	e8 d6 cf fd ff       	call   c00066c1 <iso_open>
c00296eb:	83 c4 10             	add    esp,0x10
c00296ee:	ba 02 00 00 00       	mov    edx,0x2
c00296f3:	40                   	inc    eax
c00296f4:	74 2b                	je     c0029721 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00296f6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00296f9:	eb 24                	jmp    c002971f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00296fb:	ba 04 00 00 00       	mov    edx,0x4
c0029700:	eb 1f                	jmp    c0029721 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029702:	83 ec 0c             	sub    esp,0xc
c0029705:	50                   	push   eax
c0029706:	e8 29 d2 fd ff       	call   c0006934 <iso_total>
c002970b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029712:	89 07                	mov    DWORD PTR [edi],eax
c0029714:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029717:	e8 2f d0 fd ff       	call   c000674b <iso_close>
c002971c:	83 c4 10             	add    esp,0x10
c002971f:	31 d2                	xor    edx,edx
c0029721:	83 c4 0c             	add    esp,0xc
c0029724:	89 d0                	mov    eax,edx
c0029726:	5b                   	pop    ebx
c0029727:	5e                   	pop    esi
c0029728:	5f                   	pop    edi
c0029729:	5d                   	pop    ebp
c002972a:	c3                   	ret    
c002972b:	90                   	nop

c002972c <ISO9660::close(void*)>:
c002972c:	83 ec 0c             	sub    esp,0xc
c002972f:	b8 04 00 00 00       	mov    eax,0x4
c0029734:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029738:	85 d2                	test   edx,edx
c002973a:	74 1b                	je     c0029757 <ISO9660::close(void*)+0x2b>
c002973c:	83 ec 0c             	sub    esp,0xc
c002973f:	b9 02 00 00 00       	mov    ecx,0x2
c0029744:	89 d0                	mov    eax,edx
c0029746:	99                   	cdq    
c0029747:	f7 f9                	idiv   ecx
c0029749:	83 e8 32             	sub    eax,0x32
c002974c:	50                   	push   eax
c002974d:	e8 f9 cf fd ff       	call   c000674b <iso_close>
c0029752:	83 c4 10             	add    esp,0x10
c0029755:	31 c0                	xor    eax,eax
c0029757:	83 c4 0c             	add    esp,0xc
c002975a:	c3                   	ret    
c002975b:	90                   	nop

c002975c <ISO9660::openDir(char const*, void**)>:
c002975c:	56                   	push   esi
c002975d:	53                   	push   ebx
c002975e:	50                   	push   eax
c002975f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029763:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029767:	85 db                	test   ebx,ebx
c0029769:	0f 84 bd 00 00 00    	je     c002982c <ISO9660::openDir(char const*, void**)+0xd0>
c002976f:	85 f6                	test   esi,esi
c0029771:	0f 84 b5 00 00 00    	je     c002982c <ISO9660::openDir(char const*, void**)+0xd0>
c0029777:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029779:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029780:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029786:	74 1b                	je     c00297a3 <ISO9660::openDir(char const*, void**)+0x47>
c0029788:	85 c0                	test   eax,eax
c002978a:	74 10                	je     c002979c <ISO9660::openDir(char const*, void**)+0x40>
c002978c:	83 ec 0c             	sub    esp,0xc
c002978f:	68 e5 33 03 c0       	push   0xc00333e5
c0029794:	e8 c9 6a ff ff       	call   c0020262 <KePanic(char const*)>
c0029799:	83 c4 10             	add    esp,0x10
c002979c:	8a 03                	mov    al,BYTE PTR [ebx]
c002979e:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00297a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00297a6:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00297ad:	85 c0                	test   eax,eax
c00297af:	74 10                	je     c00297c1 <ISO9660::openDir(char const*, void**)+0x65>
c00297b1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00297b8:	74 1a                	je     c00297d4 <ISO9660::openDir(char const*, void**)+0x78>
c00297ba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00297c1:	83 ec 0c             	sub    esp,0xc
c00297c4:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00297cb:	50                   	push   eax
c00297cc:	e8 29 d4 fd ff       	call   c0006bfa <init_percd>
c00297d1:	83 c4 10             	add    esp,0x10
c00297d4:	83 c3 03             	add    ebx,0x3
c00297d7:	50                   	push   eax
c00297d8:	50                   	push   eax
c00297d9:	6a 01                	push   0x1
c00297db:	53                   	push   ebx
c00297dc:	e8 e0 ce fd ff       	call   c00066c1 <iso_open>
c00297e1:	83 c4 10             	add    esp,0x10
c00297e4:	89 c3                	mov    ebx,eax
c00297e6:	83 f8 ff             	cmp    eax,0xffffffff
c00297e9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00297ee:	75 1c                	jne    c002980c <ISO9660::openDir(char const*, void**)+0xb0>
c00297f0:	53                   	push   ebx
c00297f1:	53                   	push   ebx
c00297f2:	68 8d 34 03 c0       	push   0xc003348d
c00297f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00297fd:	e8 a8 db fe ff       	call   c00173aa <VgaText::puts(char const*)>
c0029802:	83 c4 10             	add    esp,0x10
c0029805:	b8 01 00 00 00       	mov    eax,0x1
c002980a:	eb 25                	jmp    c0029831 <ISO9660::openDir(char const*, void**)+0xd5>
c002980c:	01 db                	add    ebx,ebx
c002980e:	51                   	push   ecx
c002980f:	83 c3 65             	add    ebx,0x65
c0029812:	51                   	push   ecx
c0029813:	68 a0 34 03 c0       	push   0xc00334a0
c0029818:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002981e:	e8 87 db fe ff       	call   c00173aa <VgaText::puts(char const*)>
c0029823:	89 1e                	mov    DWORD PTR [esi],ebx
c0029825:	83 c4 10             	add    esp,0x10
c0029828:	31 c0                	xor    eax,eax
c002982a:	eb 05                	jmp    c0029831 <ISO9660::openDir(char const*, void**)+0xd5>
c002982c:	b8 04 00 00 00       	mov    eax,0x4
c0029831:	5a                   	pop    edx
c0029832:	5b                   	pop    ebx
c0029833:	5e                   	pop    esi
c0029834:	c3                   	ret    
c0029835:	90                   	nop

c0029836 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029836:	55                   	push   ebp
c0029837:	57                   	push   edi
c0029838:	56                   	push   esi
c0029839:	53                   	push   ebx
c002983a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029840:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029847:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002984e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029856:	0f 84 e7 00 00 00    	je     c0029943 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c002985c:	85 db                	test   ebx,ebx
c002985e:	0f 84 df 00 00 00    	je     c0029943 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029864:	83 ec 0c             	sub    esp,0xc
c0029867:	68 b3 34 03 c0       	push   0xc00334b3
c002986c:	e8 d8 f9 fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c0029871:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029878:	b9 02 00 00 00       	mov    ecx,0x2
c002987d:	99                   	cdq    
c002987e:	f7 f9                	idiv   ecx
c0029880:	83 e8 32             	sub    eax,0x32
c0029883:	89 04 24             	mov    DWORD PTR [esp],eax
c0029886:	e8 fb d0 fd ff       	call   c0006986 <iso_readdir>
c002988b:	83 c4 10             	add    esp,0x10
c002988e:	89 c6                	mov    esi,eax
c0029890:	85 c0                	test   eax,eax
c0029892:	75 37                	jne    c00298cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029894:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029899:	56                   	push   esi
c002989a:	56                   	push   esi
c002989b:	68 be 34 03 c0       	push   0xc00334be
c00298a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00298a6:	e8 ff da fe ff       	call   c00173aa <VgaText::puts(char const*)>
c00298ab:	83 c4 0c             	add    esp,0xc
c00298ae:	68 10 01 00 00       	push   0x110
c00298b3:	6a 00                	push   0x0
c00298b5:	57                   	push   edi
c00298b6:	e8 35 6c fd ff       	call   c00004f0 <memset>
c00298bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00298c1:	83 c4 10             	add    esp,0x10
c00298c4:	b8 01 00 00 00       	mov    eax,0x1
c00298c9:	eb 7d                	jmp    c0029948 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00298cb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00298d1:	8d 68 08             	lea    ebp,[eax+0x8]
c00298d4:	83 ec 0c             	sub    esp,0xc
c00298d7:	55                   	push   ebp
c00298d8:	e8 93 6c fd ff       	call   c0000570 <strlen>
c00298dd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00298e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00298e9:	83 c4 10             	add    esp,0x10
c00298ec:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00298f0:	75 0a                	jne    c00298fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00298f2:	b8 02 00 00 00       	mov    eax,0x2
c00298f7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00298fa:	74 05                	je     c0029901 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c00298fc:	b8 01 00 00 00       	mov    eax,0x1
c0029901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029905:	50                   	push   eax
c0029906:	50                   	push   eax
c0029907:	55                   	push   ebp
c0029908:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002990c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029910:	50                   	push   eax
c0029911:	e8 2a 6d fd ff       	call   c0000640 <strcpy>
c0029916:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002991d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002991f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029925:	5a                   	pop    edx
c0029926:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002992b:	59                   	pop    ecx
c002992c:	68 d1 34 03 c0       	push   0xc00334d1
c0029931:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029937:	e8 6e da fe ff       	call   c00173aa <VgaText::puts(char const*)>
c002993c:	83 c4 10             	add    esp,0x10
c002993f:	31 c0                	xor    eax,eax
c0029941:	eb 05                	jmp    c0029948 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029943:	b8 04 00 00 00       	mov    eax,0x4
c0029948:	81 c4 1c 01 00 00    	add    esp,0x11c
c002994e:	5b                   	pop    ebx
c002994f:	5e                   	pop    esi
c0029950:	5f                   	pop    edi
c0029951:	5d                   	pop    ebp
c0029952:	c3                   	ret    

c0029953 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029953:	57                   	push   edi
c0029954:	56                   	push   esi
c0029955:	53                   	push   ebx
c0029956:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002995a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002995e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029962:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029968:	0f be cb             	movsx  ecx,bl
c002996b:	75 0b                	jne    c0029978 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c002996d:	0f be 05 20 47 03 c0 	movsx  eax,BYTE PTR ds:0xc0034720
c0029974:	39 c8                	cmp    eax,ecx
c0029976:	74 47                	je     c00299bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	31 d2                	xor    edx,edx
c002997d:	68 a0 03 04 c0       	push   0xc00403a0
c0029982:	6a 01                	push   0x1
c0029984:	52                   	push   edx
c0029985:	56                   	push   esi
c0029986:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c002998d:	e8 2a 2d ff ff       	call   c001c6bc <LogicalDisk::read(unsigned long long, int, void*)>
c0029992:	83 c4 20             	add    esp,0x20
c0029995:	85 c0                	test   eax,eax
c0029997:	75 0e                	jne    c00299a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029999:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c002999f:	88 1d 20 47 03 c0    	mov    BYTE PTR ds:0xc0034720,bl
c00299a5:	eb 18                	jmp    c00299bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00299a7:	50                   	push   eax
c00299a8:	68 00 08 00 00       	push   0x800
c00299ad:	6a 00                	push   0x0
c00299af:	57                   	push   edi
c00299b0:	e8 3b 6b fd ff       	call   c00004f0 <memset>
c00299b5:	83 c4 10             	add    esp,0x10
c00299b8:	b8 01 00 00 00       	mov    eax,0x1
c00299bd:	eb 0e                	jmp    c00299cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00299bf:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00299c4:	b9 00 08 00 00       	mov    ecx,0x800
c00299c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00299cb:	31 c0                	xor    eax,eax
c00299cd:	5b                   	pop    ebx
c00299ce:	5e                   	pop    esi
c00299cf:	5f                   	pop    edi
c00299d0:	c3                   	ret    
c00299d1:	90                   	nop

c00299d2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00299d2:	53                   	push   ebx
c00299d3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00299d9:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c00299e3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00299ea:	8d 58 41             	lea    ebx,[eax+0x41]
c00299ed:	0f be db             	movsx  ebx,bl
c00299f0:	53                   	push   ebx
c00299f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00299f5:	50                   	push   eax
c00299f6:	6a 10                	push   0x10
c00299f8:	e8 56 ff ff ff       	call   c0029953 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00299fd:	83 c4 10             	add    esp,0x10
c0029a00:	31 d2                	xor    edx,edx
c0029a02:	85 c0                	test   eax,eax
c0029a04:	75 33                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a06:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029a0b:	75 2c                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a0d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029a12:	75 25                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a14:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029a19:	75 1e                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a1b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029a20:	75 17                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a22:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029a27:	75 10                	jne    c0029a39 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a29:	83 ec 0c             	sub    esp,0xc
c0029a2c:	53                   	push   ebx
c0029a2d:	e8 c8 d1 fd ff       	call   c0006bfa <init_percd>
c0029a32:	83 c4 10             	add    esp,0x10
c0029a35:	40                   	inc    eax
c0029a36:	0f 95 c2             	setne  dl
c0029a39:	88 d0                	mov    al,dl
c0029a3b:	81 c4 08 08 00 00    	add    esp,0x808
c0029a41:	5b                   	pop    ebx
c0029a42:	c3                   	ret    
c0029a43:	90                   	nop

c0029a44 <ISO9660::ISO9660()>:
c0029a44:	83 ec 0c             	sub    esp,0xc
c0029a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4b:	83 ec 0c             	sub    esp,0xc
c0029a4e:	50                   	push   eax
c0029a4f:	e8 5a 06 ff ff       	call   c001a0ae <Filesystem::Filesystem()>
c0029a54:	83 c4 10             	add    esp,0x10
c0029a57:	ba ec 34 03 c0       	mov    edx,0xc00334ec
c0029a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a60:	89 10                	mov    DWORD PTR [eax],edx
c0029a62:	e8 a5 d2 fd ff       	call   c0006d0c <fs_iso9660_init>
c0029a67:	90                   	nop
c0029a68:	83 c4 0c             	add    esp,0xc
c0029a6b:	c3                   	ret    

c0029a6c <SoundCard::beginPlayback()>:
c0029a6c:	c7 44 24 04 50 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033550
c0029a74:	e9 e9 67 ff ff       	jmp    c0020262 <KePanic(char const*)>
c0029a79:	90                   	nop

c0029a7a <SoundCard::stopPlayback()>:
c0029a7a:	c7 44 24 04 50 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033550
c0029a82:	e9 db 67 ff ff       	jmp    c0020262 <KePanic(char const*)>
c0029a87:	90                   	nop

c0029a88 <SoundCard::SoundCard(char const*)>:
c0029a88:	83 ec 1c             	sub    esp,0x1c
c0029a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a8f:	83 ec 08             	sub    esp,0x8
c0029a92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029a96:	50                   	push   eax
c0029a97:	e8 90 19 ff ff       	call   c001b42c <Device::Device(char const*)>
c0029a9c:	83 c4 10             	add    esp,0x10
c0029a9f:	ba 9c 35 03 c0       	mov    edx,0xc003359c
c0029aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029aa8:	89 10                	mov    DWORD PTR [eax],edx
c0029aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029aae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ab9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ac7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ad5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ae3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029aed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029af5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029afa:	7f 1a                	jg     c0029b16 <SoundCard::SoundCard(char const*)+0x8e>
c0029afc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029b04:	83 c2 54             	add    edx,0x54
c0029b07:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029b0f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029b14:	eb df                	jmp    c0029af5 <SoundCard::SoundCard(char const*)+0x6d>
c0029b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b1a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b21:	90                   	nop
c0029b22:	83 c4 1c             	add    esp,0x1c
c0029b25:	c3                   	ret    

c0029b26 <SoundCard::~SoundCard()>:
c0029b26:	83 ec 0c             	sub    esp,0xc
c0029b29:	ba 9c 35 03 c0       	mov    edx,0xc003359c
c0029b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b32:	89 10                	mov    DWORD PTR [eax],edx
c0029b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b38:	83 ec 0c             	sub    esp,0xc
c0029b3b:	50                   	push   eax
c0029b3c:	e8 8b 16 ff ff       	call   c001b1cc <Device::~Device()>
c0029b41:	83 c4 10             	add    esp,0x10
c0029b44:	90                   	nop
c0029b45:	83 c4 0c             	add    esp,0xc
c0029b48:	c3                   	ret    
c0029b49:	90                   	nop

c0029b4a <SoundCard::~SoundCard()>:
c0029b4a:	83 ec 0c             	sub    esp,0xc
c0029b4d:	83 ec 0c             	sub    esp,0xc
c0029b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b54:	e8 cd ff ff ff       	call   c0029b26 <SoundCard::~SoundCard()>
c0029b59:	83 c4 10             	add    esp,0x10
c0029b5c:	83 ec 08             	sub    esp,0x8
c0029b5f:	68 e8 01 00 00       	push   0x1e8
c0029b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b68:	e8 af f5 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c0029b6d:	83 c4 10             	add    esp,0x10
c0029b70:	83 c4 0c             	add    esp,0xc
c0029b73:	c3                   	ret    

c0029b74 <SoundCard::configureRates(int, int, int)>:
c0029b74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029b78:	31 c0                	xor    eax,eax
c0029b7a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029b81:	75 20                	jne    c0029ba3 <SoundCard::configureRates(int, int, int)+0x2f>
c0029b83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029b87:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029b91:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029ba1:	b0 01                	mov    al,0x1
c0029ba3:	c3                   	ret    

c0029ba4 <SoundCard::getSamples16(int, short*)>:
c0029ba4:	55                   	push   ebp
c0029ba5:	57                   	push   edi
c0029ba6:	31 ff                	xor    edi,edi
c0029ba8:	56                   	push   esi
c0029ba9:	53                   	push   ebx
c0029baa:	31 db                	xor    ebx,ebx
c0029bac:	83 ec 10             	sub    esp,0x10
c0029baf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029bb3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029bb7:	8d 04 36             	lea    eax,[esi+esi*1]
c0029bba:	50                   	push   eax
c0029bbb:	6a 00                	push   0x0
c0029bbd:	55                   	push   ebp
c0029bbe:	e8 2d 69 fd ff       	call   c00004f0 <memset>
c0029bc3:	83 c4 10             	add    esp,0x10
c0029bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029bca:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029bd1:	85 c0                	test   eax,eax
c0029bd3:	74 1b                	je     c0029bf0 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bd5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029bd9:	75 15                	jne    c0029bf0 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bdb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029bdf:	55                   	push   ebp
c0029be0:	56                   	push   esi
c0029be1:	50                   	push   eax
c0029be2:	e8 f1 02 00 00       	call   c0029ed8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029be7:	83 c4 10             	add    esp,0x10
c0029bea:	39 c7                	cmp    edi,eax
c0029bec:	7d 02                	jge    c0029bf0 <SoundCard::getSamples16(int, short*)+0x4c>
c0029bee:	89 c7                	mov    edi,eax
c0029bf0:	43                   	inc    ebx
c0029bf1:	83 fb 20             	cmp    ebx,0x20
c0029bf4:	75 d0                	jne    c0029bc6 <SoundCard::getSamples16(int, short*)+0x22>
c0029bf6:	83 c4 0c             	add    esp,0xc
c0029bf9:	89 f8                	mov    eax,edi
c0029bfb:	5b                   	pop    ebx
c0029bfc:	5e                   	pop    esi
c0029bfd:	5f                   	pop    edi
c0029bfe:	5d                   	pop    ebp
c0029bff:	c3                   	ret    

c0029c00 <SoundCard::getSamples32(int, int*)>:
c0029c00:	55                   	push   ebp
c0029c01:	57                   	push   edi
c0029c02:	31 ff                	xor    edi,edi
c0029c04:	56                   	push   esi
c0029c05:	31 f6                	xor    esi,esi
c0029c07:	53                   	push   ebx
c0029c08:	83 ec 10             	sub    esp,0x10
c0029c0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029c0f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029c13:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c17:	c1 e0 02             	shl    eax,0x2
c0029c1a:	50                   	push   eax
c0029c1b:	6a 00                	push   0x0
c0029c1d:	55                   	push   ebp
c0029c1e:	e8 cd 68 fd ff       	call   c00004f0 <memset>
c0029c23:	83 c4 10             	add    esp,0x10
c0029c26:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029c2d:	85 c0                	test   eax,eax
c0029c2f:	74 1b                	je     c0029c4c <SoundCard::getSamples32(int, int*)+0x4c>
c0029c31:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c35:	75 15                	jne    c0029c4c <SoundCard::getSamples32(int, int*)+0x4c>
c0029c37:	53                   	push   ebx
c0029c38:	55                   	push   ebp
c0029c39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029c3d:	50                   	push   eax
c0029c3e:	e8 61 03 00 00       	call   c0029fa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029c43:	83 c4 10             	add    esp,0x10
c0029c46:	39 c6                	cmp    esi,eax
c0029c48:	7d 02                	jge    c0029c4c <SoundCard::getSamples32(int, int*)+0x4c>
c0029c4a:	89 c6                	mov    esi,eax
c0029c4c:	47                   	inc    edi
c0029c4d:	83 ff 20             	cmp    edi,0x20
c0029c50:	75 d4                	jne    c0029c26 <SoundCard::getSamples32(int, int*)+0x26>
c0029c52:	85 f6                	test   esi,esi
c0029c54:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029c5b:	75 0f                	jne    c0029c6c <SoundCard::getSamples32(int, int*)+0x6c>
c0029c5d:	85 c0                	test   eax,eax
c0029c5f:	74 1b                	je     c0029c7c <SoundCard::getSamples32(int, int*)+0x7c>
c0029c61:	83 ec 0c             	sub    esp,0xc
c0029c64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029c66:	53                   	push   ebx
c0029c67:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029c6a:	eb 0d                	jmp    c0029c79 <SoundCard::getSamples32(int, int*)+0x79>
c0029c6c:	85 c0                	test   eax,eax
c0029c6e:	75 0c                	jne    c0029c7c <SoundCard::getSamples32(int, int*)+0x7c>
c0029c70:	83 ec 0c             	sub    esp,0xc
c0029c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029c75:	53                   	push   ebx
c0029c76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029c79:	83 c4 10             	add    esp,0x10
c0029c7c:	83 c4 0c             	add    esp,0xc
c0029c7f:	89 f0                	mov    eax,esi
c0029c81:	5b                   	pop    ebx
c0029c82:	5e                   	pop    esi
c0029c83:	5f                   	pop    edi
c0029c84:	5d                   	pop    ebp
c0029c85:	c3                   	ret    

c0029c86 <SoundCard::addChannel(SoundPort*)>:
c0029c86:	83 ec 0c             	sub    esp,0xc
c0029c89:	31 c0                	xor    eax,eax
c0029c8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029c8f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029c97:	74 1b                	je     c0029cb4 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029c99:	40                   	inc    eax
c0029c9a:	83 f8 20             	cmp    eax,0x20
c0029c9d:	75 f0                	jne    c0029c8f <SoundCard::addChannel(SoundPort*)+0x9>
c0029c9f:	83 ec 0c             	sub    esp,0xc
c0029ca2:	68 75 35 03 c0       	push   0xc0033575
c0029ca7:	e8 b6 65 ff ff       	call   c0020262 <KePanic(char const*)>
c0029cac:	83 c4 10             	add    esp,0x10
c0029caf:	83 c8 ff             	or     eax,0xffffffff
c0029cb2:	eb 0b                	jmp    c0029cbf <SoundCard::addChannel(SoundPort*)+0x39>
c0029cb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029cb8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029cbf:	83 c4 0c             	add    esp,0xc
c0029cc2:	c3                   	ret    
c0029cc3:	90                   	nop

c0029cc4 <SoundCard::removeChannel(int)>:
c0029cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029ccc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029cd7:	c3                   	ret    

c0029cd8 <SoundPort::SoundPort(int, int, int, int)>:
c0029cd8:	83 ec 0c             	sub    esp,0xc
c0029cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cdf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cea:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029cf6:	89 10                	mov    DWORD PTR [eax],edx
c0029cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029d0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029d0e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029d13:	75 13                	jne    c0029d28 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0029d1b:	05 a0 0f 00 00       	add    eax,0xfa0
c0029d20:	01 c0                	add    eax,eax
c0029d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029d26:	66 90                	xchg   ax,ax
c0029d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029d30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d37:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029d45:	c1 e0 02             	shl    eax,0x2
c0029d48:	83 ec 0c             	sub    esp,0xc
c0029d4b:	50                   	push   eax
c0029d4c:	e8 69 c6 fe ff       	call   c00163ba <malloc>
c0029d51:	83 c4 10             	add    esp,0x10
c0029d54:	89 c2                	mov    edx,eax
c0029d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029d5d:	90                   	nop
c0029d5e:	83 c4 0c             	add    esp,0xc
c0029d61:	c3                   	ret    
c0029d62:	66 90                	xchg   ax,ax

c0029d64 <SoundPort::~SoundPort()>:
c0029d64:	83 ec 0c             	sub    esp,0xc
c0029d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029d6e:	85 c0                	test   eax,eax
c0029d70:	74 1e                	je     c0029d90 <SoundPort::~SoundPort()+0x2c>
c0029d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029d79:	83 ec 0c             	sub    esp,0xc
c0029d7c:	50                   	push   eax
c0029d7d:	e8 48 c6 fe ff       	call   c00163ca <free>
c0029d82:	83 c4 10             	add    esp,0x10
c0029d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d89:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029d90:	90                   	nop
c0029d91:	83 c4 0c             	add    esp,0xc
c0029d94:	c3                   	ret    
c0029d95:	90                   	nop
c0029d96:	66 90                	xchg   ax,ax

c0029d98 <SoundPort::unpause()>:
c0029d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d9c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029da0:	c3                   	ret    
c0029da1:	90                   	nop
c0029da2:	66 90                	xchg   ax,ax

c0029da4 <SoundPort::pause()>:
c0029da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029da8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029dac:	c3                   	ret    
c0029dad:	90                   	nop
c0029dae:	66 90                	xchg   ax,ax

c0029db0 <SoundPort::getBufferUsed()>:
c0029db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029db4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029db7:	c3                   	ret    

c0029db8 <SoundPort::getBufferSize()>:
c0029db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dbc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029dbf:	c3                   	ret    

c0029dc0 <SoundPort::buffer16(short*, int)>:
c0029dc0:	55                   	push   ebp
c0029dc1:	57                   	push   edi
c0029dc2:	56                   	push   esi
c0029dc3:	53                   	push   ebx
c0029dc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029dc8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029dcc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029dcf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029dd2:	74 68                	je     c0029e3c <SoundPort::buffer16(short*, int)+0x7c>
c0029dd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029dd8:	85 c9                	test   ecx,ecx
c0029dda:	7e 60                	jle    c0029e3c <SoundPort::buffer16(short*, int)+0x7c>
c0029ddc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029de0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029de3:	c1 e1 0f             	shl    ecx,0xf
c0029de6:	8d 70 01             	lea    esi,[eax+0x1]
c0029de9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029dec:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029def:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029df2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029df5:	74 4d                	je     c0029e44 <SoundPort::buffer16(short*, int)+0x84>
c0029df7:	31 f6                	xor    esi,esi
c0029df9:	eb 21                	jmp    c0029e1c <SoundPort::buffer16(short*, int)+0x5c>
c0029dfb:	90                   	nop
c0029dfc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029e01:	8d 79 01             	lea    edi,[ecx+0x1]
c0029e04:	c1 e3 0f             	shl    ebx,0xf
c0029e07:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029e0a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029e0d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029e10:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e13:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e16:	74 1c                	je     c0029e34 <SoundPort::buffer16(short*, int)+0x74>
c0029e18:	89 c6                	mov    esi,eax
c0029e1a:	66 90                	xchg   ax,ax
c0029e1c:	8d 46 01             	lea    eax,[esi+0x1]
c0029e1f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029e23:	75 d7                	jne    c0029dfc <SoundPort::buffer16(short*, int)+0x3c>
c0029e25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029e29:	8d 76 00             	lea    esi,[esi+0x0]
c0029e2c:	5b                   	pop    ebx
c0029e2d:	5e                   	pop    esi
c0029e2e:	5f                   	pop    edi
c0029e2f:	5d                   	pop    ebp
c0029e30:	c3                   	ret    
c0029e31:	8d 76 00             	lea    esi,[esi+0x0]
c0029e34:	5b                   	pop    ebx
c0029e35:	8d 46 02             	lea    eax,[esi+0x2]
c0029e38:	5e                   	pop    esi
c0029e39:	5f                   	pop    edi
c0029e3a:	5d                   	pop    ebp
c0029e3b:	c3                   	ret    
c0029e3c:	5b                   	pop    ebx
c0029e3d:	31 c0                	xor    eax,eax
c0029e3f:	5e                   	pop    esi
c0029e40:	5f                   	pop    edi
c0029e41:	5d                   	pop    ebp
c0029e42:	c3                   	ret    
c0029e43:	90                   	nop
c0029e44:	b8 01 00 00 00       	mov    eax,0x1
c0029e49:	eb e1                	jmp    c0029e2c <SoundPort::buffer16(short*, int)+0x6c>
c0029e4b:	90                   	nop

c0029e4c <SoundPort::buffer32(int*, int)>:
c0029e4c:	55                   	push   ebp
c0029e4d:	57                   	push   edi
c0029e4e:	56                   	push   esi
c0029e4f:	53                   	push   ebx
c0029e50:	83 ec 04             	sub    esp,0x4
c0029e53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e5b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e5e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029e62:	89 04 24             	mov    DWORD PTR [esp],eax
c0029e65:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e68:	74 5a                	je     c0029ec4 <SoundPort::buffer32(int*, int)+0x78>
c0029e6a:	85 c0                	test   eax,eax
c0029e6c:	7e 56                	jle    c0029ec4 <SoundPort::buffer32(int*, int)+0x78>
c0029e6e:	8d 71 01             	lea    esi,[ecx+0x1]
c0029e71:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029e74:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029e77:	8b 37                	mov    esi,DWORD PTR [edi]
c0029e79:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029e7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e82:	74 4c                	je     c0029ed0 <SoundPort::buffer32(int*, int)+0x84>
c0029e84:	31 f6                	xor    esi,esi
c0029e86:	eb 1c                	jmp    c0029ea4 <SoundPort::buffer32(int*, int)+0x58>
c0029e88:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029e8b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029e8e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029e91:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029e94:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029e98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e9e:	74 18                	je     c0029eb8 <SoundPort::buffer32(int*, int)+0x6c>
c0029ea0:	89 de                	mov    esi,ebx
c0029ea2:	66 90                	xchg   ax,ax
c0029ea4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029ea7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029eaa:	75 dc                	jne    c0029e88 <SoundPort::buffer32(int*, int)+0x3c>
c0029eac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029eaf:	90                   	nop
c0029eb0:	83 c4 04             	add    esp,0x4
c0029eb3:	5b                   	pop    ebx
c0029eb4:	5e                   	pop    esi
c0029eb5:	5f                   	pop    edi
c0029eb6:	5d                   	pop    ebp
c0029eb7:	c3                   	ret    
c0029eb8:	83 c4 04             	add    esp,0x4
c0029ebb:	8d 46 02             	lea    eax,[esi+0x2]
c0029ebe:	5b                   	pop    ebx
c0029ebf:	5e                   	pop    esi
c0029ec0:	5f                   	pop    edi
c0029ec1:	5d                   	pop    ebp
c0029ec2:	c3                   	ret    
c0029ec3:	90                   	nop
c0029ec4:	83 c4 04             	add    esp,0x4
c0029ec7:	31 c0                	xor    eax,eax
c0029ec9:	5b                   	pop    ebx
c0029eca:	5e                   	pop    esi
c0029ecb:	5f                   	pop    edi
c0029ecc:	5d                   	pop    ebp
c0029ecd:	c3                   	ret    
c0029ece:	66 90                	xchg   ax,ax
c0029ed0:	b8 01 00 00 00       	mov    eax,0x1
c0029ed5:	eb d9                	jmp    c0029eb0 <SoundPort::buffer32(int*, int)+0x64>
c0029ed7:	90                   	nop

c0029ed8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029ed8:	57                   	push   edi
c0029ed9:	56                   	push   esi
c0029eda:	53                   	push   ebx
c0029edb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029edf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029ee3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029ee9:	39 03                	cmp    DWORD PTR [ebx],eax
c0029eeb:	74 13                	je     c0029f00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029eed:	83 ec 0c             	sub    esp,0xc
c0029ef0:	68 c8 35 03 c0       	push   0xc00335c8
c0029ef5:	e8 68 63 ff ff       	call   c0020262 <KePanic(char const*)>
c0029efa:	83 c4 10             	add    esp,0x10
c0029efd:	8d 76 00             	lea    esi,[esi+0x0]
c0029f00:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029f06:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f09:	74 11                	je     c0029f1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029f0b:	83 ec 0c             	sub    esp,0xc
c0029f0e:	68 07 36 03 c0       	push   0xc0033607
c0029f13:	e8 4a 63 ff ff       	call   c0020262 <KePanic(char const*)>
c0029f18:	83 c4 10             	add    esp,0x10
c0029f1b:	90                   	nop
c0029f1c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029f22:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f25:	74 11                	je     c0029f38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029f27:	83 ec 0c             	sub    esp,0xc
c0029f2a:	68 07 36 03 c0       	push   0xc0033607
c0029f2f:	e8 2e 63 ff ff       	call   c0020262 <KePanic(char const*)>
c0029f34:	83 c4 10             	add    esp,0x10
c0029f37:	90                   	nop
c0029f38:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029f3b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029f3f:	7e 07                	jle    c0029f48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029f41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029f45:	8d 76 00             	lea    esi,[esi+0x0]
c0029f48:	85 f6                	test   esi,esi
c0029f4a:	7e 2c                	jle    c0029f78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029f4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029f50:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029f53:	31 c9                	xor    ecx,ecx
c0029f55:	01 d7                	add    edi,edx
c0029f57:	90                   	nop
c0029f58:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029f5b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029f5e:	85 c0                	test   eax,eax
c0029f60:	79 06                	jns    c0029f68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029f62:	05 ff 7f 00 00       	add    eax,0x7fff
c0029f67:	90                   	nop
c0029f68:	c1 f8 0f             	sar    eax,0xf
c0029f6b:	83 c1 04             	add    ecx,0x4
c0029f6e:	66 01 02             	add    WORD PTR [edx],ax
c0029f71:	83 c2 02             	add    edx,0x2
c0029f74:	39 d7                	cmp    edi,edx
c0029f76:	75 e0                	jne    c0029f58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029f78:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029f7b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029f7e:	83 ec 04             	sub    esp,0x4
c0029f81:	29 f0                	sub    eax,esi
c0029f83:	c1 e0 02             	shl    eax,0x2
c0029f86:	50                   	push   eax
c0029f87:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029f8a:	50                   	push   eax
c0029f8b:	52                   	push   edx
c0029f8c:	e8 3f 64 fd ff       	call   c00003d0 <memmove>
c0029f91:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029f94:	83 c4 10             	add    esp,0x10
c0029f97:	29 f0                	sub    eax,esi
c0029f99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029f9c:	89 f0                	mov    eax,esi
c0029f9e:	5b                   	pop    ebx
c0029f9f:	5e                   	pop    esi
c0029fa0:	5f                   	pop    edi
c0029fa1:	c3                   	ret    
c0029fa2:	66 90                	xchg   ax,ax

c0029fa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029fa4:	57                   	push   edi
c0029fa5:	56                   	push   esi
c0029fa6:	53                   	push   ebx
c0029fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029fab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029faf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029fb3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029fb9:	39 06                	cmp    DWORD PTR [esi],eax
c0029fbb:	74 13                	je     c0029fd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029fbd:	83 ec 0c             	sub    esp,0xc
c0029fc0:	68 e8 35 03 c0       	push   0xc00335e8
c0029fc5:	e8 98 62 ff ff       	call   c0020262 <KePanic(char const*)>
c0029fca:	83 c4 10             	add    esp,0x10
c0029fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0029fd0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0029fd6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0029fd9:	74 11                	je     c0029fec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0029fdb:	83 ec 0c             	sub    esp,0xc
c0029fde:	68 23 36 03 c0       	push   0xc0033623
c0029fe3:	e8 7a 62 ff ff       	call   c0020262 <KePanic(char const*)>
c0029fe8:	83 c4 10             	add    esp,0x10
c0029feb:	90                   	nop
c0029fec:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0029ff2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0029ff5:	74 11                	je     c002a008 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0029ff7:	83 ec 0c             	sub    esp,0xc
c0029ffa:	68 23 36 03 c0       	push   0xc0033623
c0029fff:	e8 5e 62 ff ff       	call   c0020262 <KePanic(char const*)>
c002a004:	83 c4 10             	add    esp,0x10
c002a007:	90                   	nop
c002a008:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a00b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a00f:	7e 07                	jle    c002a018 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a011:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a015:	8d 76 00             	lea    esi,[esi+0x0]
c002a018:	85 ff                	test   edi,edi
c002a01a:	7e 1c                	jle    c002a038 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a01c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a023:	31 c0                	xor    eax,eax
c002a025:	8d 76 00             	lea    esi,[esi+0x0]
c002a028:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a02b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a02e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a031:	83 c0 04             	add    eax,0x4
c002a034:	39 c1                	cmp    ecx,eax
c002a036:	75 f0                	jne    c002a028 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a038:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a03b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a03e:	83 ec 04             	sub    esp,0x4
c002a041:	29 f8                	sub    eax,edi
c002a043:	c1 e0 02             	shl    eax,0x2
c002a046:	50                   	push   eax
c002a047:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a04a:	50                   	push   eax
c002a04b:	52                   	push   edx
c002a04c:	e8 7f 63 fd ff       	call   c00003d0 <memmove>
c002a051:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a054:	83 c4 10             	add    esp,0x10
c002a057:	29 f8                	sub    eax,edi
c002a059:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a05c:	89 f8                	mov    eax,edi
c002a05e:	5b                   	pop    ebx
c002a05f:	5e                   	pop    esi
c002a060:	5f                   	pop    edi
c002a061:	c3                   	ret    

c002a062 <PCI::open(int, int, void*)>:
c002a062:	83 ec 18             	sub    esp,0x18
c002a065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a069:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a06d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a073:	8b 10                	mov    edx,DWORD PTR [eax]
c002a075:	50                   	push   eax
c002a076:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a079:	31 c0                	xor    eax,eax
c002a07b:	83 c4 1c             	add    esp,0x1c
c002a07e:	c3                   	ret    
c002a07f:	90                   	nop

c002a080 <PCI::close(int, int, void*)>:
c002a080:	31 c0                	xor    eax,eax
c002a082:	c3                   	ret    
c002a083:	90                   	nop

c002a084 <PCI::PCI()>:
c002a084:	83 ec 0c             	sub    esp,0xc
c002a087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a08b:	83 ec 08             	sub    esp,0x8
c002a08e:	68 3f 36 03 c0       	push   0xc003363f
c002a093:	50                   	push   eax
c002a094:	e8 93 0b ff ff       	call   c001ac2c <Bus::Bus(char const*)>
c002a099:	83 c4 10             	add    esp,0x10
c002a09c:	ba e8 36 03 c0       	mov    edx,0xc00336e8
c002a0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0a5:	89 10                	mov    DWORD PTR [eax],edx
c002a0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0ab:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0b9:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0c8:	0f b6 d0             	movzx  edx,al
c002a0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0cf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0e0:	0f b6 d0             	movzx  edx,al
c002a0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0e7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0f6:	8d 50 01             	lea    edx,[eax+0x1]
c002a0f9:	88 d1                	mov    cl,dl
c002a0fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a0ff:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a105:	0f b6 d0             	movzx  edx,al
c002a108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a10c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a110:	83 c9 c0             	or     ecx,0xffffffc0
c002a113:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a117:	90                   	nop
c002a118:	83 c4 0c             	add    esp,0xc
c002a11b:	c3                   	ret    

c002a11c <PCI::readBAR8(unsigned int, int)>:
c002a11c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a124:	f6 c2 01             	test   dl,0x1
c002a127:	74 07                	je     c002a130 <PCI::readBAR8(unsigned int, int)+0x14>
c002a129:	83 e2 fc             	and    edx,0xfffffffc
c002a12c:	01 c2                	add    edx,eax
c002a12e:	ec                   	in     al,dx
c002a12f:	c3                   	ret    
c002a130:	83 e2 f0             	and    edx,0xfffffff0
c002a133:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a136:	c3                   	ret    
c002a137:	90                   	nop

c002a138 <PCI::readBAR16(unsigned int, int)>:
c002a138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a140:	f6 c2 01             	test   dl,0x1
c002a143:	74 08                	je     c002a14d <PCI::readBAR16(unsigned int, int)+0x15>
c002a145:	83 e2 fc             	and    edx,0xfffffffc
c002a148:	01 c2                	add    edx,eax
c002a14a:	66 ed                	in     ax,dx
c002a14c:	c3                   	ret    
c002a14d:	83 e2 f0             	and    edx,0xfffffff0
c002a150:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a154:	c3                   	ret    
c002a155:	90                   	nop

c002a156 <PCI::readBAR32(unsigned int, int)>:
c002a156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a15a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a15e:	f6 c2 01             	test   dl,0x1
c002a161:	74 07                	je     c002a16a <PCI::readBAR32(unsigned int, int)+0x14>
c002a163:	83 e2 fc             	and    edx,0xfffffffc
c002a166:	01 c2                	add    edx,eax
c002a168:	ed                   	in     eax,dx
c002a169:	c3                   	ret    
c002a16a:	83 e2 f0             	and    edx,0xfffffff0
c002a16d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a170:	c3                   	ret    
c002a171:	90                   	nop

c002a172 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a17a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a17e:	f6 c2 01             	test   dl,0x1
c002a181:	74 07                	je     c002a18a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a183:	83 e2 fc             	and    edx,0xfffffffc
c002a186:	01 ca                	add    edx,ecx
c002a188:	ee                   	out    dx,al
c002a189:	c3                   	ret    
c002a18a:	83 e2 f0             	and    edx,0xfffffff0
c002a18d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a190:	c3                   	ret    
c002a191:	90                   	nop

c002a192 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a192:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a19a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a19e:	f6 c2 01             	test   dl,0x1
c002a1a1:	74 08                	je     c002a1ab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a1a3:	83 e2 fc             	and    edx,0xfffffffc
c002a1a6:	01 ca                	add    edx,ecx
c002a1a8:	66 ef                	out    dx,ax
c002a1aa:	c3                   	ret    
c002a1ab:	83 e2 f0             	and    edx,0xfffffff0
c002a1ae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a1b2:	c3                   	ret    
c002a1b3:	90                   	nop

c002a1b4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a1b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1c0:	f6 c2 01             	test   dl,0x1
c002a1c3:	74 07                	je     c002a1cc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a1c5:	83 e2 fc             	and    edx,0xfffffffc
c002a1c8:	01 ca                	add    edx,ecx
c002a1ca:	ef                   	out    dx,eax
c002a1cb:	c3                   	ret    
c002a1cc:	83 e2 f0             	and    edx,0xfffffff0
c002a1cf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a1d2:	c3                   	ret    
c002a1d3:	90                   	nop

c002a1d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a1d4:	55                   	push   ebp
c002a1d5:	57                   	push   edi
c002a1d6:	56                   	push   esi
c002a1d7:	53                   	push   ebx
c002a1d8:	83 ec 0c             	sub    esp,0xc
c002a1db:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a1e0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a1e4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a1e8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a1ec:	83 fe 07             	cmp    esi,0x7
c002a1ef:	76 10                	jbe    c002a201 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a1f1:	83 ec 0c             	sub    esp,0xc
c002a1f4:	68 47 36 03 c0       	push   0xc0033647
c002a1f9:	e8 64 60 ff ff       	call   c0020262 <KePanic(char const*)>
c002a1fe:	83 c4 10             	add    esp,0x10
c002a201:	0f b6 db             	movzx  ebx,bl
c002a204:	83 fb 0f             	cmp    ebx,0xf
c002a207:	76 10                	jbe    c002a219 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a209:	83 ec 0c             	sub    esp,0xc
c002a20c:	68 77 36 03 c0       	push   0xc0033677
c002a211:	e8 4c 60 ff ff       	call   c0020262 <KePanic(char const*)>
c002a216:	83 c4 10             	add    esp,0x10
c002a219:	8d 04 36             	lea    eax,[esi+esi*1]
c002a21c:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a221:	83 c8 f0             	or     eax,0xfffffff0
c002a224:	ee                   	out    dx,al
c002a225:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a22a:	89 e8                	mov    eax,ebp
c002a22c:	ee                   	out    dx,al
c002a22d:	83 c4 0c             	add    esp,0xc
c002a230:	89 d8                	mov    eax,ebx
c002a232:	89 f9                	mov    ecx,edi
c002a234:	c1 e0 08             	shl    eax,0x8
c002a237:	0f b6 d9             	movzx  ebx,cl
c002a23a:	83 e3 fc             	and    ebx,0xfffffffc
c002a23d:	09 d8                	or     eax,ebx
c002a23f:	5b                   	pop    ebx
c002a240:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a245:	5e                   	pop    esi
c002a246:	5f                   	pop    edi
c002a247:	5d                   	pop    ebp
c002a248:	c3                   	ret    
c002a249:	90                   	nop

c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a24a:	57                   	push   edi
c002a24b:	56                   	push   esi
c002a24c:	53                   	push   ebx
c002a24d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a255:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a25b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a25f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a263:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a267:	83 ff 01             	cmp    edi,0x1
c002a26a:	75 3f                	jne    c002a2ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a26c:	89 de                	mov    esi,ebx
c002a26e:	0f b6 c0             	movzx  eax,al
c002a271:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a277:	c1 e0 10             	shl    eax,0x10
c002a27a:	0f b6 c9             	movzx  ecx,cl
c002a27d:	09 f0                	or     eax,esi
c002a27f:	c1 e1 08             	shl    ecx,0x8
c002a282:	0f b6 d2             	movzx  edx,dl
c002a285:	09 c8                	or     eax,ecx
c002a287:	c1 e2 0b             	shl    edx,0xb
c002a28a:	09 d0                	or     eax,edx
c002a28c:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a291:	0d 00 00 00 80       	or     eax,0x80000000
c002a296:	ef                   	out    dx,eax
c002a297:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a29c:	ed                   	in     eax,dx
c002a29d:	83 e3 02             	and    ebx,0x2
c002a2a0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a2a7:	d3 e8                	shr    eax,cl
c002a2a9:	eb 44                	jmp    c002a2ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a2ab:	83 ff 02             	cmp    edi,0x2
c002a2ae:	75 2d                	jne    c002a2dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a2b0:	83 ec 0c             	sub    esp,0xc
c002a2b3:	0f b6 c9             	movzx  ecx,cl
c002a2b6:	0f b6 d2             	movzx  edx,dl
c002a2b9:	0f b6 fb             	movzx  edi,bl
c002a2bc:	0f b6 c0             	movzx  eax,al
c002a2bf:	57                   	push   edi
c002a2c0:	51                   	push   ecx
c002a2c1:	52                   	push   edx
c002a2c2:	50                   	push   eax
c002a2c3:	56                   	push   esi
c002a2c4:	e8 0b ff ff ff       	call   c002a1d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2c9:	89 c2                	mov    edx,eax
c002a2cb:	ed                   	in     eax,dx
c002a2cc:	83 e3 02             	and    ebx,0x2
c002a2cf:	83 c4 20             	add    esp,0x20
c002a2d2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a2d9:	d3 e8                	shr    eax,cl
c002a2db:	eb 12                	jmp    c002a2ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a2dd:	83 ec 0c             	sub    esp,0xc
c002a2e0:	68 a7 36 03 c0       	push   0xc00336a7
c002a2e5:	e8 78 5f ff ff       	call   c0020262 <KePanic(char const*)>
c002a2ea:	83 c4 10             	add    esp,0x10
c002a2ed:	31 c0                	xor    eax,eax
c002a2ef:	5b                   	pop    ebx
c002a2f0:	5e                   	pop    esi
c002a2f1:	5f                   	pop    edi
c002a2f2:	c3                   	ret    
c002a2f3:	90                   	nop

c002a2f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a2f4:	83 ec 18             	sub    esp,0x18
c002a2f7:	6a 00                	push   0x0
c002a2f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2fe:	50                   	push   eax
c002a2ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a304:	50                   	push   eax
c002a305:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a30a:	50                   	push   eax
c002a30b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a30f:	e8 36 ff ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a314:	83 c4 2c             	add    esp,0x2c
c002a317:	c3                   	ret    

c002a318 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a318:	83 ec 18             	sub    esp,0x18
c002a31b:	6a 0e                	push   0xe
c002a31d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a322:	50                   	push   eax
c002a323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a328:	50                   	push   eax
c002a329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a32e:	50                   	push   eax
c002a32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a333:	e8 12 ff ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a338:	83 c4 2c             	add    esp,0x2c
c002a33b:	0f b6 c0             	movzx  eax,al
c002a33e:	c3                   	ret    
c002a33f:	90                   	nop

c002a340 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a340:	55                   	push   ebp
c002a341:	57                   	push   edi
c002a342:	56                   	push   esi
c002a343:	53                   	push   ebx
c002a344:	83 ec 18             	sub    esp,0x18
c002a347:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a34c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a351:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a356:	6a 0a                	push   0xa
c002a358:	56                   	push   esi
c002a359:	55                   	push   ebp
c002a35a:	57                   	push   edi
c002a35b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a35f:	e8 e6 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a364:	83 c4 14             	add    esp,0x14
c002a367:	89 c3                	mov    ebx,eax
c002a369:	6a 0a                	push   0xa
c002a36b:	0f b6 db             	movzx  ebx,bl
c002a36e:	56                   	push   esi
c002a36f:	55                   	push   ebp
c002a370:	57                   	push   edi
c002a371:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a375:	e8 d0 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a37a:	83 c4 2c             	add    esp,0x2c
c002a37d:	25 00 ff 00 00       	and    eax,0xff00
c002a382:	09 d8                	or     eax,ebx
c002a384:	5b                   	pop    ebx
c002a385:	5e                   	pop    esi
c002a386:	5f                   	pop    edi
c002a387:	5d                   	pop    ebp
c002a388:	c3                   	ret    
c002a389:	90                   	nop

c002a38a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a38a:	83 ec 18             	sub    esp,0x18
c002a38d:	6a 08                	push   0x8
c002a38f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a394:	50                   	push   eax
c002a395:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a39a:	50                   	push   eax
c002a39b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3a0:	50                   	push   eax
c002a3a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3a5:	e8 a0 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3aa:	83 c4 2c             	add    esp,0x2c
c002a3ad:	0f b6 c4             	movzx  eax,ah
c002a3b0:	c3                   	ret    
c002a3b1:	90                   	nop

c002a3b2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a3b2:	83 ec 18             	sub    esp,0x18
c002a3b5:	6a 08                	push   0x8
c002a3b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3bc:	50                   	push   eax
c002a3bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c2:	50                   	push   eax
c002a3c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c8:	50                   	push   eax
c002a3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3cd:	e8 78 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3d2:	83 c4 2c             	add    esp,0x2c
c002a3d5:	c3                   	ret    

c002a3d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a3d6:	83 ec 18             	sub    esp,0x18
c002a3d9:	6a 3c                	push   0x3c
c002a3db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3e0:	50                   	push   eax
c002a3e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3e6:	50                   	push   eax
c002a3e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3ec:	50                   	push   eax
c002a3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3f1:	e8 54 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3f6:	83 c4 2c             	add    esp,0x2c
c002a3f9:	c3                   	ret    

c002a3fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a3fa:	83 ec 18             	sub    esp,0x18
c002a3fd:	6a 18                	push   0x18
c002a3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a404:	50                   	push   eax
c002a405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a40a:	50                   	push   eax
c002a40b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a410:	50                   	push   eax
c002a411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a415:	e8 30 fe ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a41a:	83 c4 2c             	add    esp,0x2c
c002a41d:	0f b6 c4             	movzx  eax,ah
c002a420:	c3                   	ret    
c002a421:	90                   	nop

c002a422 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a422:	55                   	push   ebp
c002a423:	57                   	push   edi
c002a424:	56                   	push   esi
c002a425:	53                   	push   ebx
c002a426:	83 ec 28             	sub    esp,0x28
c002a429:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a42d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a432:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a437:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a43c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a443:	8d 43 12             	lea    eax,[ebx+0x12]
c002a446:	83 c3 10             	add    ebx,0x10
c002a449:	0f b6 c0             	movzx  eax,al
c002a44c:	0f b6 db             	movzx  ebx,bl
c002a44f:	50                   	push   eax
c002a450:	51                   	push   ecx
c002a451:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a455:	57                   	push   edi
c002a456:	55                   	push   ebp
c002a457:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a45b:	e8 ea fd ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a460:	83 c4 14             	add    esp,0x14
c002a463:	89 c6                	mov    esi,eax
c002a465:	53                   	push   ebx
c002a466:	c1 e6 10             	shl    esi,0x10
c002a469:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a46d:	51                   	push   ecx
c002a46e:	57                   	push   edi
c002a46f:	55                   	push   ebp
c002a470:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a474:	e8 d1 fd ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a479:	83 c4 3c             	add    esp,0x3c
c002a47c:	0f b7 c0             	movzx  eax,ax
c002a47f:	5b                   	pop    ebx
c002a480:	09 f0                	or     eax,esi
c002a482:	5e                   	pop    esi
c002a483:	5f                   	pop    edi
c002a484:	5d                   	pop    ebp
c002a485:	c3                   	ret    

c002a486 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a486:	55                   	push   ebp
c002a487:	57                   	push   edi
c002a488:	56                   	push   esi
c002a489:	53                   	push   ebx
c002a48a:	83 ec 0c             	sub    esp,0xc
c002a48d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a491:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a495:	89 f5                	mov    ebp,esi
c002a497:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a49d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a4a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a4a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a4a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a4ad:	83 f9 01             	cmp    ecx,0x1
c002a4b0:	75 5d                	jne    c002a50f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a4b2:	0f b6 c8             	movzx  ecx,al
c002a4b5:	0f b6 d2             	movzx  edx,dl
c002a4b8:	c1 e1 10             	shl    ecx,0x10
c002a4bb:	c1 e2 0b             	shl    edx,0xb
c002a4be:	89 f0                	mov    eax,esi
c002a4c0:	25 fc 00 00 00       	and    eax,0xfc
c002a4c5:	09 c1                	or     ecx,eax
c002a4c7:	89 e8                	mov    eax,ebp
c002a4c9:	0f b6 c0             	movzx  eax,al
c002a4cc:	c1 e0 08             	shl    eax,0x8
c002a4cf:	09 c1                	or     ecx,eax
c002a4d1:	09 d1                	or     ecx,edx
c002a4d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a4d8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a4de:	89 c8                	mov    eax,ecx
c002a4e0:	ef                   	out    dx,eax
c002a4e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a4e6:	ed                   	in     eax,dx
c002a4e7:	0f b7 db             	movzx  ebx,bx
c002a4ea:	83 e6 02             	and    esi,0x2
c002a4ed:	74 0a                	je     c002a4f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a4ef:	0f b7 d0             	movzx  edx,ax
c002a4f2:	c1 e3 10             	shl    ebx,0x10
c002a4f5:	09 d3                	or     ebx,edx
c002a4f7:	eb 05                	jmp    c002a4fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a4f9:	66 31 c0             	xor    ax,ax
c002a4fc:	09 c3                	or     ebx,eax
c002a4fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a503:	89 c8                	mov    eax,ecx
c002a505:	ef                   	out    dx,eax
c002a506:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a50b:	89 d8                	mov    eax,ebx
c002a50d:	eb 41                	jmp    c002a550 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a50f:	83 f9 02             	cmp    ecx,0x2
c002a512:	75 45                	jne    c002a559 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a514:	83 ec 0c             	sub    esp,0xc
c002a517:	0f b6 d2             	movzx  edx,dl
c002a51a:	89 f1                	mov    ecx,esi
c002a51c:	0f b6 c0             	movzx  eax,al
c002a51f:	0f b6 f1             	movzx  esi,cl
c002a522:	89 e9                	mov    ecx,ebp
c002a524:	56                   	push   esi
c002a525:	0f b6 c9             	movzx  ecx,cl
c002a528:	51                   	push   ecx
c002a529:	52                   	push   edx
c002a52a:	50                   	push   eax
c002a52b:	57                   	push   edi
c002a52c:	e8 a3 fc ff ff       	call   c002a1d4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a531:	89 c2                	mov    edx,eax
c002a533:	ed                   	in     eax,dx
c002a534:	83 c4 20             	add    esp,0x20
c002a537:	0f b7 db             	movzx  ebx,bx
c002a53a:	f6 c2 02             	test   dl,0x2
c002a53d:	74 0c                	je     c002a54b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a53f:	0f b7 c8             	movzx  ecx,ax
c002a542:	89 d8                	mov    eax,ebx
c002a544:	c1 e0 10             	shl    eax,0x10
c002a547:	09 c8                	or     eax,ecx
c002a549:	eb 05                	jmp    c002a550 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a54b:	66 31 c0             	xor    ax,ax
c002a54e:	09 d8                	or     eax,ebx
c002a550:	ef                   	out    dx,eax
c002a551:	83 c4 0c             	add    esp,0xc
c002a554:	5b                   	pop    ebx
c002a555:	5e                   	pop    esi
c002a556:	5f                   	pop    edi
c002a557:	5d                   	pop    ebp
c002a558:	c3                   	ret    
c002a559:	c7 44 24 20 a7 36 03 c0 	mov    DWORD PTR [esp+0x20],0xc00336a7
c002a561:	83 c4 0c             	add    esp,0xc
c002a564:	5b                   	pop    ebx
c002a565:	5e                   	pop    esi
c002a566:	5f                   	pop    edi
c002a567:	5d                   	pop    ebp
c002a568:	e9 f5 5c ff ff       	jmp    c0020262 <KePanic(char const*)>
c002a56d:	90                   	nop

c002a56e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a56e:	55                   	push   ebp
c002a56f:	57                   	push   edi
c002a570:	56                   	push   esi
c002a571:	53                   	push   ebx
c002a572:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a578:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a57f:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a586:	0f 85 bd 00 00 00    	jne    c002a649 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a58c:	83 ec 0c             	sub    esp,0xc
c002a58f:	68 14 01 00 00       	push   0x114
c002a594:	e8 21 be fe ff       	call   c00163ba <malloc>
c002a599:	83 c4 0c             	add    esp,0xc
c002a59c:	89 c3                	mov    ebx,eax
c002a59e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a5a4:	68 ad 36 03 c0       	push   0xc00336ad
c002a5a9:	50                   	push   eax
c002a5aa:	e8 a1 fe fe ff       	call   c001a450 <File::File(char const*, Process*)>
c002a5af:	83 c4 10             	add    esp,0x10
c002a5b2:	85 db                	test   ebx,ebx
c002a5b4:	0f 84 67 02 00 00    	je     c002a821 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5ba:	56                   	push   esi
c002a5bb:	56                   	push   esi
c002a5bc:	6a 01                	push   0x1
c002a5be:	53                   	push   ebx
c002a5bf:	e8 aa fe fe ff       	call   c001a46e <File::open(FileOpenMode)>
c002a5c4:	83 c4 10             	add    esp,0x10
c002a5c7:	85 c0                	test   eax,eax
c002a5c9:	0f 85 52 02 00 00    	jne    c002a821 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5cf:	52                   	push   edx
c002a5d0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a5d4:	50                   	push   eax
c002a5d5:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a5d9:	50                   	push   eax
c002a5da:	53                   	push   ebx
c002a5db:	e8 90 01 ff ff       	call   c001a770 <File::stat(unsigned long long*, bool*)>
c002a5e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a5e4:	40                   	inc    eax
c002a5e5:	89 04 24             	mov    DWORD PTR [esp],eax
c002a5e8:	e8 cd bd fe ff       	call   c00163ba <malloc>
c002a5ed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a5f1:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a5f6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a5fa:	59                   	pop    ecx
c002a5fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a5fd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a601:	51                   	push   ecx
c002a602:	50                   	push   eax
c002a603:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a607:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a60b:	53                   	push   ebx
c002a60c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a60f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a613:	83 c4 20             	add    esp,0x20
c002a616:	89 c8                	mov    eax,ecx
c002a618:	99                   	cdq    
c002a619:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a61d:	0f 85 fe 01 00 00    	jne    c002a821 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a623:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a627:	0f 85 f4 01 00 00    	jne    c002a821 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a62d:	83 ec 0c             	sub    esp,0xc
c002a630:	53                   	push   ebx
c002a631:	e8 96 fe fe ff       	call   c001a4cc <File::close()>
c002a636:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a63a:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a641:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a646:	83 c4 10             	add    esp,0x10
c002a649:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a64e:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a658:	31 f6                	xor    esi,esi
c002a65a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a662:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a669:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a66e:	31 c9                	xor    ecx,ecx
c002a670:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a678:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a67d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a685:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a689:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a691:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a695:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a699:	0f 8e 82 01 00 00    	jle    c002a821 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a69f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a6a2:	d4 40                	aam    0x40
c002a6a4:	d5 39                	aad    0x39
c002a6a6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a6aa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a6ae:	d4 40                	aam    0x40
c002a6b0:	d5 39                	aad    0x39
c002a6b2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a6b6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a6ba:	d4 40                	aam    0x40
c002a6bc:	d5 39                	aad    0x39
c002a6be:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a6c2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a6c6:	d4 40                	aam    0x40
c002a6c8:	d5 39                	aad    0x39
c002a6ca:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a6ce:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a6d2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a6d6:	3c 56                	cmp    al,0x56
c002a6d8:	74 43                	je     c002a71d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a6da:	d4 40                	aam    0x40
c002a6dc:	d5 39                	aad    0x39
c002a6de:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a6e1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a6e5:	0f b6 c9             	movzx  ecx,cl
c002a6e8:	c1 e1 04             	shl    ecx,0x4
c002a6eb:	d4 40                	aam    0x40
c002a6ed:	d5 39                	aad    0x39
c002a6ef:	83 e8 30             	sub    eax,0x30
c002a6f2:	0f b6 c0             	movzx  eax,al
c002a6f5:	09 c1                	or     ecx,eax
c002a6f7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a6fb:	c1 e1 04             	shl    ecx,0x4
c002a6fe:	d4 40                	aam    0x40
c002a700:	d5 39                	aad    0x39
c002a702:	83 e8 30             	sub    eax,0x30
c002a705:	0f b6 c0             	movzx  eax,al
c002a708:	09 c1                	or     ecx,eax
c002a70a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a70e:	c1 e1 04             	shl    ecx,0x4
c002a711:	d4 40                	aam    0x40
c002a713:	d5 39                	aad    0x39
c002a715:	83 e8 30             	sub    eax,0x30
c002a718:	0f b6 c0             	movzx  eax,al
c002a71b:	09 c1                	or     ecx,eax
c002a71d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a721:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a725:	3c 58                	cmp    al,0x58
c002a727:	74 47                	je     c002a770 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a729:	d4 40                	aam    0x40
c002a72b:	d5 39                	aad    0x39
c002a72d:	8d 50 d0             	lea    edx,[eax-0x30]
c002a730:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a734:	0f b6 d2             	movzx  edx,dl
c002a737:	c1 e2 04             	shl    edx,0x4
c002a73a:	d4 40                	aam    0x40
c002a73c:	d5 39                	aad    0x39
c002a73e:	83 e8 30             	sub    eax,0x30
c002a741:	0f b6 c0             	movzx  eax,al
c002a744:	09 c2                	or     edx,eax
c002a746:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a74a:	c1 e2 04             	shl    edx,0x4
c002a74d:	d4 40                	aam    0x40
c002a74f:	d5 39                	aad    0x39
c002a751:	83 e8 30             	sub    eax,0x30
c002a754:	0f b6 c0             	movzx  eax,al
c002a757:	09 c2                	or     edx,eax
c002a759:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a75d:	c1 e2 04             	shl    edx,0x4
c002a760:	d4 40                	aam    0x40
c002a762:	d5 39                	aad    0x39
c002a764:	83 e8 30             	sub    eax,0x30
c002a767:	0f b6 c0             	movzx  eax,al
c002a76a:	09 c2                	or     edx,eax
c002a76c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a770:	83 c6 10             	add    esi,0x10
c002a773:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a777:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a77b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a77f:	83 fa 0a             	cmp    edx,0xa
c002a782:	74 0b                	je     c002a78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a784:	47                   	inc    edi
c002a785:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a789:	75 19                	jne    c002a7a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a78b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a78f:	31 c0                	xor    eax,eax
c002a791:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a796:	0f 94 c0             	sete   al
c002a799:	01 c6                	add    esi,eax
c002a79b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a7a0:	75 0b                	jne    c002a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a7a2:	eb 14                	jmp    c002a7b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a7a4:	46                   	inc    esi
c002a7a5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a7a8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a7ab:	eb ca                	jmp    c002a777 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a7ad:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a7b2:	0f 85 dd fe ff ff    	jne    c002a695 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7b8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a7bd:	74 10                	je     c002a7cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a7bf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a7c4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a7c9:	0f 85 c6 fe ff ff    	jne    c002a695 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a7d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a7d7:	83 e8 30             	sub    eax,0x30
c002a7da:	83 ef 30             	sub    edi,0x30
c002a7dd:	c1 e0 04             	shl    eax,0x4
c002a7e0:	09 f8                	or     eax,edi
c002a7e2:	0f b6 c0             	movzx  eax,al
c002a7e5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a7e9:	0f 85 a6 fe ff ff    	jne    c002a695 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a7f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a7f7:	83 e8 30             	sub    eax,0x30
c002a7fa:	83 ef 30             	sub    edi,0x30
c002a7fd:	c1 e0 04             	shl    eax,0x4
c002a800:	09 f8                	or     eax,edi
c002a802:	0f b6 c0             	movzx  eax,al
c002a805:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a809:	0f 85 86 fe ff ff    	jne    c002a695 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a80f:	50                   	push   eax
c002a810:	50                   	push   eax
c002a811:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a815:	50                   	push   eax
c002a816:	55                   	push   ebp
c002a817:	e8 24 5e fd ff       	call   c0000640 <strcpy>
c002a81c:	83 c4 10             	add    esp,0x10
c002a81f:	eb 06                	jmp    c002a827 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a821:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a825:	31 ed                	xor    ebp,ebp
c002a827:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a82d:	89 e8                	mov    eax,ebp
c002a82f:	5b                   	pop    ebx
c002a830:	5e                   	pop    esi
c002a831:	5f                   	pop    edi
c002a832:	5d                   	pop    ebp
c002a833:	c3                   	ret    

c002a834 <PCI::checkBus(unsigned char)>:
c002a834:	56                   	push   esi
c002a835:	53                   	push   ebx
c002a836:	31 db                	xor    ebx,ebx
c002a838:	51                   	push   ecx
c002a839:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a83e:	52                   	push   edx
c002a83f:	53                   	push   ebx
c002a840:	43                   	inc    ebx
c002a841:	56                   	push   esi
c002a842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a846:	e8 03 03 00 00       	call   c002ab4e <PCI::checkDevice(unsigned char, unsigned char)>
c002a84b:	83 c4 10             	add    esp,0x10
c002a84e:	83 fb 20             	cmp    ebx,0x20
c002a851:	75 eb                	jne    c002a83e <PCI::checkBus(unsigned char)+0xa>
c002a853:	58                   	pop    eax
c002a854:	5b                   	pop    ebx
c002a855:	5e                   	pop    esi
c002a856:	c3                   	ret    
c002a857:	90                   	nop

c002a858 <PCI::foundDevice(PCIDeviceInfo)>:
c002a858:	55                   	push   ebp
c002a859:	57                   	push   edi
c002a85a:	56                   	push   esi
c002a85b:	53                   	push   ebx
c002a85c:	83 ec 1c             	sub    esp,0x1c
c002a85f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a864:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a868:	3d ff ff 00 00       	cmp    eax,0xffff
c002a86d:	0f 84 57 01 00 00    	je     c002a9ca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a873:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a878:	66 3d 06 04          	cmp    ax,0x406
c002a87c:	75 2c                	jne    c002a8aa <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a87e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a883:	50                   	push   eax
c002a884:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a889:	50                   	push   eax
c002a88a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a88f:	50                   	push   eax
c002a890:	53                   	push   ebx
c002a891:	e8 64 fb ff ff       	call   c002a3fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a896:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a89a:	0f b6 c0             	movzx  eax,al
c002a89d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a8a1:	83 c4 2c             	add    esp,0x2c
c002a8a4:	5b                   	pop    ebx
c002a8a5:	5e                   	pop    esi
c002a8a6:	5f                   	pop    edi
c002a8a7:	5d                   	pop    ebp
c002a8a8:	eb 8a                	jmp    c002a834 <PCI::checkBus(unsigned char)>
c002a8aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a8ae:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a8b4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a8b8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a8bc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a8c1:	85 d2                	test   edx,edx
c002a8c3:	74 36                	je     c002a8fb <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a8c5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a8c8:	85 c9                	test   ecx,ecx
c002a8ca:	74 2b                	je     c002a8f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8cc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a8d2:	31 ee                	xor    esi,ebp
c002a8d4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a8da:	75 1b                	jne    c002a8f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8dc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a8e0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a8e6:	75 0f                	jne    c002a8f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a8e8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a8ef:	39 f9                	cmp    ecx,edi
c002a8f1:	0f 84 d3 00 00 00    	je     c002a9ca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a8f7:	8b 12                	mov    edx,DWORD PTR [edx]
c002a8f9:	eb c6                	jmp    c002a8c1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a8fb:	3d 01 06 00 00       	cmp    eax,0x601
c002a900:	75 19                	jne    c002a91b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a902:	83 ec 0c             	sub    esp,0xc
c002a905:	68 64 01 00 00       	push   0x164
c002a90a:	e8 ab ba fe ff       	call   c00163ba <malloc>
c002a90f:	89 c5                	mov    ebp,eax
c002a911:	89 04 24             	mov    DWORD PTR [esp],eax
c002a914:	e8 a1 0e 00 00       	call   c002b7ba <SATABus::SATABus()>
c002a919:	eb 1e                	jmp    c002a939 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a91b:	3d 01 01 00 00       	cmp    eax,0x101
c002a920:	75 62                	jne    c002a984 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a922:	83 ec 0c             	sub    esp,0xc
c002a925:	68 70 02 00 00       	push   0x270
c002a92a:	e8 8b ba fe ff       	call   c00163ba <malloc>
c002a92f:	89 c5                	mov    ebp,eax
c002a931:	89 04 24             	mov    DWORD PTR [esp],eax
c002a934:	e8 e5 02 00 00       	call   c002ac1e <IDE::IDE()>
c002a939:	5f                   	pop    edi
c002a93a:	58                   	pop    eax
c002a93b:	55                   	push   ebp
c002a93c:	53                   	push   ebx
c002a93d:	e8 88 09 ff ff       	call   c001b2ca <Device::addChild(Device*)>
c002a942:	83 ec 1c             	sub    esp,0x1c
c002a945:	b9 09 00 00 00       	mov    ecx,0x9
c002a94a:	fc                   	cld    
c002a94b:	89 e7                	mov    edi,esp
c002a94d:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a951:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a953:	55                   	push   ebp
c002a954:	e8 b7 08 ff ff       	call   c001b210 <Device::preOpenPCI(PCIDeviceInfo)>
c002a959:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a95c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a960:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a968:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a970:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a978:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a97b:	83 c4 4c             	add    esp,0x4c
c002a97e:	5b                   	pop    ebx
c002a97f:	5e                   	pop    esi
c002a980:	5f                   	pop    edi
c002a981:	5d                   	pop    ebp
c002a982:	ff e0                	jmp    eax
c002a984:	83 ec 0c             	sub    esp,0xc
c002a987:	68 58 01 00 00       	push   0x158
c002a98c:	e8 29 ba fe ff       	call   c00163ba <malloc>
c002a991:	89 c5                	mov    ebp,eax
c002a993:	58                   	pop    eax
c002a994:	5a                   	pop    edx
c002a995:	68 c6 36 03 c0       	push   0xc00336c6
c002a99a:	55                   	push   ebp
c002a99b:	e8 de 0b ff ff       	call   c001b57e <DriverlessDevice::DriverlessDevice(char const*)>
c002a9a0:	59                   	pop    ecx
c002a9a1:	5e                   	pop    esi
c002a9a2:	55                   	push   ebp
c002a9a3:	53                   	push   ebx
c002a9a4:	e8 21 09 ff ff       	call   c001b2ca <Device::addChild(Device*)>
c002a9a9:	83 c4 10             	add    esp,0x10
c002a9ac:	b9 09 00 00 00       	mov    ecx,0x9
c002a9b1:	fc                   	cld    
c002a9b2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a9b6:	89 fe                	mov    esi,edi
c002a9b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a9ba:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a9be:	83 c4 1c             	add    esp,0x1c
c002a9c1:	5b                   	pop    ebx
c002a9c2:	5e                   	pop    esi
c002a9c3:	5f                   	pop    edi
c002a9c4:	5d                   	pop    ebp
c002a9c5:	e9 46 08 ff ff       	jmp    c001b210 <Device::preOpenPCI(PCIDeviceInfo)>
c002a9ca:	83 c4 1c             	add    esp,0x1c
c002a9cd:	5b                   	pop    ebx
c002a9ce:	5e                   	pop    esi
c002a9cf:	5f                   	pop    edi
c002a9d0:	5d                   	pop    ebp
c002a9d1:	c3                   	ret    

c002a9d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a9d2:	55                   	push   ebp
c002a9d3:	57                   	push   edi
c002a9d4:	56                   	push   esi
c002a9d5:	53                   	push   ebx
c002a9d6:	83 ec 68             	sub    esp,0x68
c002a9d9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a9dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a9e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a9e8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a9ef:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a9f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a9f8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a9ff:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002aa04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aa08:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002aa0d:	6a 0c                	push   0xc
c002aa0f:	57                   	push   edi
c002aa10:	53                   	push   ebx
c002aa11:	56                   	push   esi
c002aa12:	55                   	push   ebp
c002aa13:	e8 32 f8 ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa18:	83 c4 20             	add    esp,0x20
c002aa1b:	57                   	push   edi
c002aa1c:	53                   	push   ebx
c002aa1d:	56                   	push   esi
c002aa1e:	55                   	push   ebp
c002aa1f:	e8 1c f9 ff ff       	call   c002a340 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002aa24:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002aa29:	57                   	push   edi
c002aa2a:	53                   	push   ebx
c002aa2b:	56                   	push   esi
c002aa2c:	55                   	push   ebp
c002aa2d:	e8 a4 f9 ff ff       	call   c002a3d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002aa32:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002aa36:	83 c4 14             	add    esp,0x14
c002aa39:	6a 3c                	push   0x3c
c002aa3b:	57                   	push   edi
c002aa3c:	53                   	push   ebx
c002aa3d:	56                   	push   esi
c002aa3e:	55                   	push   ebp
c002aa3f:	e8 06 f8 ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa44:	0f b6 c4             	movzx  eax,ah
c002aa47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aa4b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002aa4f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002aa53:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002aa58:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002aa5e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002aa64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aa68:	83 c4 20             	add    esp,0x20
c002aa6b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002aa70:	74 30                	je     c002aaa2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aa72:	31 c0                	xor    eax,eax
c002aa74:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002aa78:	7e 28                	jle    c002aaa2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aa7a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002aa82:	39 cb                	cmp    ebx,ecx
c002aa84:	75 19                	jne    c002aa9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa86:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aa8e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002aa92:	75 0b                	jne    c002aa9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa94:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002aa9b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aa9f:	40                   	inc    eax
c002aaa0:	eb d2                	jmp    c002aa74 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002aaa2:	31 d2                	xor    edx,edx
c002aaa4:	83 ec 0c             	sub    esp,0xc
c002aaa7:	57                   	push   edi
c002aaa8:	53                   	push   ebx
c002aaa9:	56                   	push   esi
c002aaaa:	52                   	push   edx
c002aaab:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002aaaf:	55                   	push   ebp
c002aab0:	e8 6d f9 ff ff       	call   c002a422 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aab5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002aab9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002aabd:	42                   	inc    edx
c002aabe:	83 c4 20             	add    esp,0x20
c002aac1:	83 fa 06             	cmp    edx,0x6
c002aac4:	75 de                	jne    c002aaa4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002aac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002aace:	c1 e2 08             	shl    edx,0x8
c002aad1:	83 ec 0c             	sub    esp,0xc
c002aad4:	0f b6 c4             	movzx  eax,ah
c002aad7:	09 d0                	or     eax,edx
c002aad9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002aade:	6a 02                	push   0x2
c002aae0:	57                   	push   edi
c002aae1:	53                   	push   ebx
c002aae2:	56                   	push   esi
c002aae3:	55                   	push   ebp
c002aae4:	e8 61 f7 ff ff       	call   c002a24a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aae9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aaee:	83 c4 20             	add    esp,0x20
c002aaf1:	57                   	push   edi
c002aaf2:	53                   	push   ebx
c002aaf3:	56                   	push   esi
c002aaf4:	55                   	push   ebp
c002aaf5:	e8 90 f8 ff ff       	call   c002a38a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aafa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002aafe:	57                   	push   edi
c002aaff:	53                   	push   ebx
c002ab00:	56                   	push   esi
c002ab01:	55                   	push   ebp
c002ab02:	e8 ed f7 ff ff       	call   c002a2f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab07:	b9 09 00 00 00       	mov    ecx,0x9
c002ab0c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ab11:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ab15:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ab19:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ab1d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ab21:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ab25:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ab29:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ab2d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ab31:	83 ec 0c             	sub    esp,0xc
c002ab34:	fc                   	cld    
c002ab35:	89 e7                	mov    edi,esp
c002ab37:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ab3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ab3d:	55                   	push   ebp
c002ab3e:	e8 15 fd ff ff       	call   c002a858 <PCI::foundDevice(PCIDeviceInfo)>
c002ab43:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ab49:	5b                   	pop    ebx
c002ab4a:	5e                   	pop    esi
c002ab4b:	5f                   	pop    edi
c002ab4c:	5d                   	pop    ebp
c002ab4d:	c3                   	ret    

c002ab4e <PCI::checkDevice(unsigned char, unsigned char)>:
c002ab4e:	55                   	push   ebp
c002ab4f:	57                   	push   edi
c002ab50:	56                   	push   esi
c002ab51:	53                   	push   ebx
c002ab52:	83 ec 0c             	sub    esp,0xc
c002ab55:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ab59:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ab5e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ab63:	6a 00                	push   0x0
c002ab65:	56                   	push   esi
c002ab66:	57                   	push   edi
c002ab67:	55                   	push   ebp
c002ab68:	e8 87 f7 ff ff       	call   c002a2f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab6d:	6a 00                	push   0x0
c002ab6f:	56                   	push   esi
c002ab70:	57                   	push   edi
c002ab71:	55                   	push   ebp
c002ab72:	e8 5b fe ff ff       	call   c002a9d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ab77:	83 c4 20             	add    esp,0x20
c002ab7a:	6a 00                	push   0x0
c002ab7c:	56                   	push   esi
c002ab7d:	57                   	push   edi
c002ab7e:	55                   	push   ebp
c002ab7f:	e8 94 f7 ff ff       	call   c002a318 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab84:	83 c4 10             	add    esp,0x10
c002ab87:	a8 80                	test   al,0x80
c002ab89:	74 2d                	je     c002abb8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ab8b:	bb 01 00 00 00       	mov    ebx,0x1
c002ab90:	53                   	push   ebx
c002ab91:	56                   	push   esi
c002ab92:	57                   	push   edi
c002ab93:	55                   	push   ebp
c002ab94:	e8 5b f7 ff ff       	call   c002a2f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab99:	83 c4 10             	add    esp,0x10
c002ab9c:	0f b7 c0             	movzx  eax,ax
c002ab9f:	3d ff ff 00 00       	cmp    eax,0xffff
c002aba4:	74 0c                	je     c002abb2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002aba6:	53                   	push   ebx
c002aba7:	56                   	push   esi
c002aba8:	57                   	push   edi
c002aba9:	55                   	push   ebp
c002abaa:	e8 23 fe ff ff       	call   c002a9d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002abaf:	83 c4 10             	add    esp,0x10
c002abb2:	43                   	inc    ebx
c002abb3:	83 fb 08             	cmp    ebx,0x8
c002abb6:	75 d8                	jne    c002ab90 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002abb8:	83 c4 0c             	add    esp,0xc
c002abbb:	5b                   	pop    ebx
c002abbc:	5e                   	pop    esi
c002abbd:	5f                   	pop    edi
c002abbe:	5d                   	pop    ebp
c002abbf:	c3                   	ret    

c002abc0 <PCI::detect()>:
c002abc0:	56                   	push   esi
c002abc1:	53                   	push   ebx
c002abc2:	53                   	push   ebx
c002abc3:	31 db                	xor    ebx,ebx
c002abc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002abc9:	6a 00                	push   0x0
c002abcb:	6a 00                	push   0x0
c002abcd:	6a 00                	push   0x0
c002abcf:	56                   	push   esi
c002abd0:	e8 43 f7 ff ff       	call   c002a318 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002abd5:	83 c4 10             	add    esp,0x10
c002abd8:	a8 80                	test   al,0x80
c002abda:	75 21                	jne    c002abfd <PCI::detect()+0x3d>
c002abdc:	51                   	push   ecx
c002abdd:	51                   	push   ecx
c002abde:	6a 00                	push   0x0
c002abe0:	56                   	push   esi
c002abe1:	e8 4e fc ff ff       	call   c002a834 <PCI::checkBus(unsigned char)>
c002abe6:	83 c4 10             	add    esp,0x10
c002abe9:	eb 2a                	jmp    c002ac15 <PCI::detect()+0x55>
c002abeb:	52                   	push   edx
c002abec:	52                   	push   edx
c002abed:	53                   	push   ebx
c002abee:	43                   	inc    ebx
c002abef:	56                   	push   esi
c002abf0:	e8 3f fc ff ff       	call   c002a834 <PCI::checkBus(unsigned char)>
c002abf5:	83 c4 10             	add    esp,0x10
c002abf8:	83 fb 08             	cmp    ebx,0x8
c002abfb:	74 18                	je     c002ac15 <PCI::detect()+0x55>
c002abfd:	53                   	push   ebx
c002abfe:	6a 00                	push   0x0
c002ac00:	6a 00                	push   0x0
c002ac02:	56                   	push   esi
c002ac03:	e8 ec f6 ff ff       	call   c002a2f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac08:	83 c4 10             	add    esp,0x10
c002ac0b:	0f b7 c0             	movzx  eax,ax
c002ac0e:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac13:	74 d6                	je     c002abeb <PCI::detect()+0x2b>
c002ac15:	58                   	pop    eax
c002ac16:	5b                   	pop    ebx
c002ac17:	5e                   	pop    esi
c002ac18:	c3                   	ret    
c002ac19:	90                   	nop

c002ac1a <IDE::close(int, int, void*)>:
c002ac1a:	83 c8 ff             	or     eax,0xffffffff
c002ac1d:	c3                   	ret    

c002ac1e <IDE::IDE()>:
c002ac1e:	83 ec 0c             	sub    esp,0xc
c002ac21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac25:	83 ec 08             	sub    esp,0x8
c002ac28:	68 0c 37 03 c0       	push   0xc003370c
c002ac2d:	50                   	push   eax
c002ac2e:	e8 f1 09 ff ff       	call   c001b624 <HardDiskController::HardDiskController(char const*)>
c002ac33:	83 c4 10             	add    esp,0x10
c002ac36:	ba 9c 37 03 c0       	mov    edx,0xc003379c
c002ac3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac3f:	89 10                	mov    DWORD PTR [eax],edx
c002ac41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac45:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ac4c:	90                   	nop
c002ac4d:	83 c4 0c             	add    esp,0xc
c002ac50:	c3                   	ret    
c002ac51:	90                   	nop

c002ac52 <IDE::prepareInterrupt(unsigned char)>:
c002ac52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ac57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ac5b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ac63:	c3                   	ret    

c002ac64 <selectDrive(unsigned char, unsigned char)>:
c002ac64:	c3                   	ret    
c002ac65:	90                   	nop

c002ac66 <IDE::getBase(unsigned char)>:
c002ac66:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ac6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ac6f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002ac77:	c3                   	ret    

c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002ac78:	55                   	push   ebp
c002ac79:	57                   	push   edi
c002ac7a:	56                   	push   esi
c002ac7b:	53                   	push   ebx
c002ac7c:	83 ec 1c             	sub    esp,0x1c
c002ac7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ac83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ac87:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ac8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ac8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ac92:	80 f9 03             	cmp    cl,0x3
c002ac95:	77 4f                	ja     c002ace6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ac97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ac9b:	0f b6 fa             	movzx  edi,dl
c002ac9e:	0f b6 db             	movzx  ebx,bl
c002aca1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002aca4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002aca9:	80 ca 80             	or     dl,0x80
c002acac:	52                   	push   edx
c002acad:	6a 0c                	push   0xc
c002acaf:	57                   	push   edi
c002acb0:	56                   	push   esi
c002acb1:	e8 c2 ff ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002acb6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002acbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002acbf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002acc3:	ee                   	out    dx,al
c002acc4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002acc9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002accd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002acd1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002acd5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002acdd:	83 c4 2c             	add    esp,0x2c
c002ace0:	5b                   	pop    ebx
c002ace1:	5e                   	pop    esi
c002ace2:	5f                   	pop    edi
c002ace3:	5d                   	pop    ebp
c002ace4:	eb 92                	jmp    c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ace6:	0f b6 cb             	movzx  ecx,bl
c002ace9:	83 f9 07             	cmp    ecx,0x7
c002acec:	77 12                	ja     c002ad00 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002acee:	0f b6 d2             	movzx  edx,dl
c002acf1:	0f b6 db             	movzx  ebx,bl
c002acf4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002acfc:	01 da                	add    edx,ebx
c002acfe:	eb 2f                	jmp    c002ad2f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad00:	83 f9 0d             	cmp    ecx,0xd
c002ad03:	77 13                	ja     c002ad18 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ad05:	0f b6 d2             	movzx  edx,dl
c002ad08:	0f b6 db             	movzx  ebx,bl
c002ad0b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002ad12:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ad16:	eb 17                	jmp    c002ad2f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad18:	83 f9 15             	cmp    ecx,0x15
c002ad1b:	77 13                	ja     c002ad30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ad1d:	0f b6 d2             	movzx  edx,dl
c002ad20:	0f b6 db             	movzx  ebx,bl
c002ad23:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002ad2b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002ad2f:	ee                   	out    dx,al
c002ad30:	83 c4 1c             	add    esp,0x1c
c002ad33:	5b                   	pop    ebx
c002ad34:	5e                   	pop    esi
c002ad35:	5f                   	pop    edi
c002ad36:	5d                   	pop    ebp
c002ad37:	c3                   	ret    

c002ad38 <IDE::read(unsigned char, unsigned char)>:
c002ad38:	55                   	push   ebp
c002ad39:	57                   	push   edi
c002ad3a:	56                   	push   esi
c002ad3b:	53                   	push   ebx
c002ad3c:	83 ec 1c             	sub    esp,0x1c
c002ad3f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ad43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ad47:	8d 43 f8             	lea    eax,[ebx-0x8]
c002ad4a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002ad4e:	3c 03                	cmp    al,0x3
c002ad50:	77 40                	ja     c002ad92 <IDE::read(unsigned char, unsigned char)+0x5a>
c002ad52:	0f b6 f9             	movzx  edi,cl
c002ad55:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002ad58:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002ad5d:	0c 80                	or     al,0x80
c002ad5f:	50                   	push   eax
c002ad60:	6a 0c                	push   0xc
c002ad62:	57                   	push   edi
c002ad63:	56                   	push   esi
c002ad64:	e8 0f ff ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad69:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002ad6e:	0f b6 d3             	movzx  edx,bl
c002ad71:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002ad75:	ec                   	in     al,dx
c002ad76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002ad7a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002ad7f:	52                   	push   edx
c002ad80:	6a 0c                	push   0xc
c002ad82:	57                   	push   edi
c002ad83:	56                   	push   esi
c002ad84:	e8 ef fe ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad89:	83 c4 20             	add    esp,0x20
c002ad8c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002ad90:	eb 4c                	jmp    c002adde <IDE::read(unsigned char, unsigned char)+0xa6>
c002ad92:	0f b6 d3             	movzx  edx,bl
c002ad95:	83 fa 07             	cmp    edx,0x7
c002ad98:	77 12                	ja     c002adac <IDE::read(unsigned char, unsigned char)+0x74>
c002ad9a:	0f b6 c9             	movzx  ecx,cl
c002ad9d:	0f b6 d3             	movzx  edx,bl
c002ada0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002ada8:	01 c2                	add    edx,eax
c002adaa:	eb 31                	jmp    c002addd <IDE::read(unsigned char, unsigned char)+0xa5>
c002adac:	83 fa 0d             	cmp    edx,0xd
c002adaf:	77 13                	ja     c002adc4 <IDE::read(unsigned char, unsigned char)+0x8c>
c002adb1:	0f b6 c9             	movzx  ecx,cl
c002adb4:	0f b6 d3             	movzx  edx,bl
c002adb7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002adbe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002adc2:	eb 19                	jmp    c002addd <IDE::read(unsigned char, unsigned char)+0xa5>
c002adc4:	31 c0                	xor    eax,eax
c002adc6:	83 fa 15             	cmp    edx,0x15
c002adc9:	77 13                	ja     c002adde <IDE::read(unsigned char, unsigned char)+0xa6>
c002adcb:	0f b6 c9             	movzx  ecx,cl
c002adce:	0f b6 d3             	movzx  edx,bl
c002add1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002add9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002addd:	ec                   	in     al,dx
c002adde:	83 c4 1c             	add    esp,0x1c
c002ade1:	5b                   	pop    ebx
c002ade2:	5e                   	pop    esi
c002ade3:	5f                   	pop    edi
c002ade4:	5d                   	pop    ebp
c002ade5:	c3                   	ret    

c002ade6 <IDE::waitInterrupt(unsigned char)>:
c002ade6:	55                   	push   ebp
c002ade7:	57                   	push   edi
c002ade8:	56                   	push   esi
c002ade9:	53                   	push   ebx
c002adea:	31 db                	xor    ebx,ebx
c002adec:	83 ec 0c             	sub    esp,0xc
c002adef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002adf3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002adf8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ae00:	89 e8                	mov    eax,ebp
c002ae02:	84 c0                	test   al,al
c002ae04:	75 30                	jne    c002ae36 <IDE::waitInterrupt(unsigned char)+0x50>
c002ae06:	50                   	push   eax
c002ae07:	6a 0c                	push   0xc
c002ae09:	56                   	push   esi
c002ae0a:	57                   	push   edi
c002ae0b:	e8 28 ff ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002ae10:	83 c4 10             	add    esp,0x10
c002ae13:	a8 01                	test   al,0x1
c002ae15:	75 27                	jne    c002ae3e <IDE::waitInterrupt(unsigned char)+0x58>
c002ae17:	f6 c3 04             	test   bl,0x4
c002ae1a:	75 12                	jne    c002ae2e <IDE::waitInterrupt(unsigned char)+0x48>
c002ae1c:	83 fb 32             	cmp    ebx,0x32
c002ae1f:	7e 0d                	jle    c002ae2e <IDE::waitInterrupt(unsigned char)+0x48>
c002ae21:	83 ec 0c             	sub    esp,0xc
c002ae24:	6a 64                	push   0x64
c002ae26:	e8 05 a6 ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002ae2b:	83 c4 10             	add    esp,0x10
c002ae2e:	83 fb 3c             	cmp    ebx,0x3c
c002ae31:	74 0b                	je     c002ae3e <IDE::waitInterrupt(unsigned char)+0x58>
c002ae33:	43                   	inc    ebx
c002ae34:	eb c2                	jmp    c002adf8 <IDE::waitInterrupt(unsigned char)+0x12>
c002ae36:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002ae3e:	83 c4 0c             	add    esp,0xc
c002ae41:	89 e8                	mov    eax,ebp
c002ae43:	5b                   	pop    ebx
c002ae44:	5e                   	pop    esi
c002ae45:	5f                   	pop    edi
c002ae46:	5d                   	pop    ebp
c002ae47:	c3                   	ret    

c002ae48 <ideChannel0IRQHandler(regs*, void*)>:
c002ae48:	83 ec 10             	sub    esp,0x10
c002ae4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae4f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002ae56:	6a 07                	push   0x7
c002ae58:	6a 00                	push   0x0
c002ae5a:	50                   	push   eax
c002ae5b:	e8 d8 fe ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002ae60:	83 c4 1c             	add    esp,0x1c
c002ae63:	c3                   	ret    

c002ae64 <ideChannel1IRQHandler(regs*, void*)>:
c002ae64:	83 ec 10             	sub    esp,0x10
c002ae67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae6b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002ae72:	6a 07                	push   0x7
c002ae74:	6a 01                	push   0x1
c002ae76:	50                   	push   eax
c002ae77:	e8 bc fe ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002ae7c:	83 c4 1c             	add    esp,0x1c
c002ae7f:	c3                   	ret    

c002ae80 <IDE::enableIRQs(unsigned char, bool)>:
c002ae80:	57                   	push   edi
c002ae81:	b8 02 00 00 00       	mov    eax,0x2
c002ae86:	56                   	push   esi
c002ae87:	53                   	push   ebx
c002ae88:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ae90:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ae95:	74 02                	je     c002ae99 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ae97:	31 c0                	xor    eax,eax
c002ae99:	0f b6 db             	movzx  ebx,bl
c002ae9c:	bf 04 00 00 00       	mov    edi,0x4
c002aea1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002aea8:	50                   	push   eax
c002aea9:	6a 0c                	push   0xc
c002aeab:	53                   	push   ebx
c002aeac:	56                   	push   esi
c002aead:	e8 c6 fd ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aeb2:	83 c4 10             	add    esp,0x10
c002aeb5:	50                   	push   eax
c002aeb6:	6a 0c                	push   0xc
c002aeb8:	53                   	push   ebx
c002aeb9:	56                   	push   esi
c002aeba:	e8 79 fe ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002aebf:	83 c4 10             	add    esp,0x10
c002aec2:	4f                   	dec    edi
c002aec3:	75 f0                	jne    c002aeb5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002aec5:	5b                   	pop    ebx
c002aec6:	5e                   	pop    esi
c002aec7:	5f                   	pop    edi
c002aec8:	c3                   	ret    
c002aec9:	90                   	nop

c002aeca <IDE::open(int, int, void*)>:
c002aeca:	55                   	push   ebp
c002aecb:	57                   	push   edi
c002aecc:	56                   	push   esi
c002aecd:	53                   	push   ebx
c002aece:	83 ec 1c             	sub    esp,0x1c
c002aed1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002aed5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002aede:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002aee7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002aeee:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002aef5:	0f 85 de 02 00 00    	jne    c002b1d9 <IDE::open(int, int, void*)+0x30f>
c002aefb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002af01:	88 04 24             	mov    BYTE PTR [esp],al
c002af04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002af07:	83 e0 7f             	and    eax,0x7f
c002af0a:	83 f8 05             	cmp    eax,0x5
c002af0d:	74 05                	je     c002af14 <IDE::open(int, int, void*)+0x4a>
c002af0f:	83 f8 0f             	cmp    eax,0xf
c002af12:	75 32                	jne    c002af46 <IDE::open(int, int, void*)+0x7c>
c002af14:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002af1a:	83 e0 fc             	and    eax,0xfffffffc
c002af1d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002af24:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002af2a:	83 e0 fc             	and    eax,0xfffffffc
c002af2d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002af34:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002af3a:	83 e0 fc             	and    eax,0xfffffffc
c002af3d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002af44:	eb 14                	jmp    c002af5a <IDE::open(int, int, void*)+0x90>
c002af46:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002af50:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002af5a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002af61:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002af68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002af6c:	89 c6                	mov    esi,eax
c002af6e:	bf f8 0c 00 00       	mov    edi,0xcf8
c002af73:	c1 e6 10             	shl    esi,0x10
c002af76:	89 e8                	mov    eax,ebp
c002af78:	89 fa                	mov    edx,edi
c002af7a:	c1 e0 0b             	shl    eax,0xb
c002af7d:	09 f0                	or     eax,esi
c002af7f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002af86:	c1 e6 08             	shl    esi,0x8
c002af89:	09 c6                	or     esi,eax
c002af8b:	89 f0                	mov    eax,esi
c002af8d:	0d 08 00 00 80       	or     eax,0x80000008
c002af92:	ef                   	out    dx,eax
c002af93:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002af98:	89 ca                	mov    edx,ecx
c002af9a:	ed                   	in     eax,dx
c002af9b:	c1 e8 10             	shr    eax,0x10
c002af9e:	3d ff ff 00 00       	cmp    eax,0xffff
c002afa3:	0f 84 f9 00 00 00    	je     c002b0a2 <IDE::open(int, int, void*)+0x1d8>
c002afa9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002afaf:	89 fa                	mov    edx,edi
c002afb1:	89 f0                	mov    eax,esi
c002afb3:	ef                   	out    dx,eax
c002afb4:	b0 fe                	mov    al,0xfe
c002afb6:	89 ca                	mov    edx,ecx
c002afb8:	ee                   	out    dx,al
c002afb9:	89 f0                	mov    eax,esi
c002afbb:	89 fa                	mov    edx,edi
c002afbd:	ef                   	out    dx,eax
c002afbe:	89 ca                	mov    edx,ecx
c002afc0:	ed                   	in     eax,dx
c002afc1:	3c fe                	cmp    al,0xfe
c002afc3:	0f 85 a9 00 00 00    	jne    c002b072 <IDE::open(int, int, void*)+0x1a8>
c002afc9:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002afcf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002afd6:	74 33                	je     c002b00b <IDE::open(int, int, void*)+0x141>
c002afd8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002afde:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002afe2:	40                   	inc    eax
c002afe3:	83 ec 0c             	sub    esp,0xc
c002afe6:	0f b6 c0             	movzx  eax,al
c002afe9:	50                   	push   eax
c002afea:	55                   	push   ebp
c002afeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002afef:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002aff5:	51                   	push   ecx
c002aff6:	e8 1d 35 ff ff       	call   c001e518 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002affb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b000:	83 c4 1c             	add    esp,0x1c
c002b003:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b009:	eb 0a                	jmp    c002b015 <IDE::open(int, int, void*)+0x14b>
c002b00b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b015:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b01c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b023:	c1 e1 10             	shl    ecx,0x10
c002b026:	c1 e0 08             	shl    eax,0x8
c002b029:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b02e:	09 c1                	or     ecx,eax
c002b030:	89 fa                	mov    edx,edi
c002b032:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b039:	c1 e0 0b             	shl    eax,0xb
c002b03c:	09 c1                	or     ecx,eax
c002b03e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b044:	89 c8                	mov    eax,ecx
c002b046:	ef                   	out    dx,eax
c002b047:	be fc 0c 00 00       	mov    esi,0xcfc
c002b04c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b052:	89 f2                	mov    edx,esi
c002b054:	ee                   	out    dx,al
c002b055:	89 c8                	mov    eax,ecx
c002b057:	89 fa                	mov    edx,edi
c002b059:	ef                   	out    dx,eax
c002b05a:	89 f2                	mov    edx,esi
c002b05c:	ed                   	in     eax,dx
c002b05d:	0f b6 c0             	movzx  eax,al
c002b060:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b066:	74 4a                	je     c002b0b2 <IDE::open(int, int, void*)+0x1e8>
c002b068:	83 ec 0c             	sub    esp,0xc
c002b06b:	68 24 37 03 c0       	push   0xc0033724
c002b070:	eb 38                	jmp    c002b0aa <IDE::open(int, int, void*)+0x1e0>
c002b072:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b07b:	75 1b                	jne    c002b098 <IDE::open(int, int, void*)+0x1ce>
c002b07d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b081:	3d 80 00 00 00       	cmp    eax,0x80
c002b086:	74 07                	je     c002b08f <IDE::open(int, int, void*)+0x1c5>
c002b088:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b08d:	75 09                	jne    c002b098 <IDE::open(int, int, void*)+0x1ce>
c002b08f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b096:	eb 1a                	jmp    c002b0b2 <IDE::open(int, int, void*)+0x1e8>
c002b098:	83 ec 0c             	sub    esp,0xc
c002b09b:	68 2c 37 03 c0       	push   0xc003372c
c002b0a0:	eb 08                	jmp    c002b0aa <IDE::open(int, int, void*)+0x1e0>
c002b0a2:	83 ec 0c             	sub    esp,0xc
c002b0a5:	68 5d 37 03 c0       	push   0xc003375d
c002b0aa:	e8 b3 51 ff ff       	call   c0020262 <KePanic(char const*)>
c002b0af:	83 c4 10             	add    esp,0x10
c002b0b2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b0b9:	74 1a                	je     c002b0d5 <IDE::open(int, int, void*)+0x20b>
c002b0bb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b0c1:	83 e0 fc             	and    eax,0xfffffffc
c002b0c4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b0cb:	83 c0 08             	add    eax,0x8
c002b0ce:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b0d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b0db:	89 c2                	mov    edx,eax
c002b0dd:	83 e2 0f             	and    edx,0xf
c002b0e0:	83 fa 08             	cmp    edx,0x8
c002b0e3:	75 0a                	jne    c002b0ef <IDE::open(int, int, void*)+0x225>
c002b0e5:	83 e8 02             	sub    eax,0x2
c002b0e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b0ef:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b0f5:	89 c2                	mov    edx,eax
c002b0f7:	83 e2 0f             	and    edx,0xf
c002b0fa:	83 fa 08             	cmp    edx,0x8
c002b0fd:	75 0a                	jne    c002b109 <IDE::open(int, int, void*)+0x23f>
c002b0ff:	83 e8 02             	sub    eax,0x2
c002b102:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b109:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b110:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b117:	89 d0                	mov    eax,edx
c002b119:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b11c:	8d 7a 01             	lea    edi,[edx+0x1]
c002b11f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b123:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b127:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b12b:	83 e1 3f             	and    ecx,0x3f
c002b12e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b132:	89 f9                	mov    ecx,edi
c002b134:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b13b:	0f b6 c9             	movzx  ecx,cl
c002b13e:	8d 78 02             	lea    edi,[eax+0x2]
c002b141:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b144:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b148:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b14c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b150:	83 e2 3f             	and    edx,0x3f
c002b153:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b157:	89 f9                	mov    ecx,edi
c002b159:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b15f:	0f b6 d1             	movzx  edx,cl
c002b162:	8d 78 03             	lea    edi,[eax+0x3]
c002b165:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b168:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b16c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b170:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b174:	83 e1 3f             	and    ecx,0x3f
c002b177:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b17b:	89 f9                	mov    ecx,edi
c002b17d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b183:	0f b6 c9             	movzx  ecx,cl
c002b186:	8d 78 04             	lea    edi,[eax+0x4]
c002b189:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b18c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b190:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b194:	89 fa                	mov    edx,edi
c002b196:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b19c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b1a0:	83 e2 3f             	and    edx,0x3f
c002b1a3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b1a7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b1ae:	66 85 f6             	test   si,si
c002b1b1:	74 65                	je     c002b218 <IDE::open(int, int, void*)+0x34e>
c002b1b3:	89 f9                	mov    ecx,edi
c002b1b5:	83 c0 05             	add    eax,0x5
c002b1b8:	0f b6 d1             	movzx  edx,cl
c002b1bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b1be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1c2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b1c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b1cc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b1d0:	83 e0 3f             	and    eax,0x3f
c002b1d3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b1d7:	eb 3f                	jmp    c002b218 <IDE::open(int, int, void*)+0x34e>
c002b1d9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b1df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b1e6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b1ed:	05 06 02 00 00       	add    eax,0x206
c002b1f2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b1f9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b200:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b207:	05 06 02 00 00       	add    eax,0x206
c002b20c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b213:	e9 bd fe ff ff       	jmp    c002b0d5 <IDE::open(int, int, void*)+0x20b>
c002b218:	50                   	push   eax
c002b219:	50                   	push   eax
c002b21a:	6a 00                	push   0x0
c002b21c:	53                   	push   ebx
c002b21d:	e8 30 fa ff ff       	call   c002ac52 <IDE::prepareInterrupt(unsigned char)>
c002b222:	5a                   	pop    edx
c002b223:	59                   	pop    ecx
c002b224:	6a 01                	push   0x1
c002b226:	53                   	push   ebx
c002b227:	e8 26 fa ff ff       	call   c002ac52 <IDE::prepareInterrupt(unsigned char)>
c002b22c:	83 c4 0c             	add    esp,0xc
c002b22f:	6a 00                	push   0x0
c002b231:	6a 00                	push   0x0
c002b233:	53                   	push   ebx
c002b234:	e8 47 fc ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002b239:	83 c4 0c             	add    esp,0xc
c002b23c:	6a 00                	push   0x0
c002b23e:	6a 01                	push   0x1
c002b240:	53                   	push   ebx
c002b241:	e8 3a fc ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002b246:	83 c4 10             	add    esp,0x10
c002b249:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b250:	74 34                	je     c002b286 <IDE::open(int, int, void*)+0x3bc>
c002b252:	83 ec 0c             	sub    esp,0xc
c002b255:	53                   	push   ebx
c002b256:	6a 01                	push   0x1
c002b258:	68 48 ae 02 c0       	push   0xc002ae48
c002b25d:	6a 0e                	push   0xe
c002b25f:	53                   	push   ebx
c002b260:	e8 11 00 ff ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b265:	83 c4 14             	add    esp,0x14
c002b268:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b26e:	53                   	push   ebx
c002b26f:	6a 01                	push   0x1
c002b271:	68 64 ae 02 c0       	push   0xc002ae64
c002b276:	6a 0f                	push   0xf
c002b278:	53                   	push   ebx
c002b279:	e8 f8 ff fe ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b27e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b284:	eb 38                	jmp    c002b2be <IDE::open(int, int, void*)+0x3f4>
c002b286:	83 ec 0c             	sub    esp,0xc
c002b289:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b293:	53                   	push   ebx
c002b294:	6a 00                	push   0x0
c002b296:	68 48 ae 02 c0       	push   0xc002ae48
c002b29b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b2a1:	53                   	push   ebx
c002b2a2:	e8 cf ff fe ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2a7:	83 c4 14             	add    esp,0x14
c002b2aa:	53                   	push   ebx
c002b2ab:	6a 00                	push   0x0
c002b2ad:	68 64 ae 02 c0       	push   0xc002ae64
c002b2b2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b2b8:	53                   	push   ebx
c002b2b9:	e8 b8 ff fe ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2be:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b2c0:	83 c4 20             	add    esp,0x20
c002b2c3:	83 ec 0c             	sub    esp,0xc
c002b2c6:	53                   	push   ebx
c002b2c7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b2ca:	83 c4 0c             	add    esp,0xc
c002b2cd:	6a 07                	push   0x7
c002b2cf:	6a 00                	push   0x0
c002b2d1:	53                   	push   ebx
c002b2d2:	e8 61 fa ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b2d7:	83 c4 0c             	add    esp,0xc
c002b2da:	6a 07                	push   0x7
c002b2dc:	6a 01                	push   0x1
c002b2de:	53                   	push   ebx
c002b2df:	e8 54 fa ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b2e4:	83 c4 0c             	add    esp,0xc
c002b2e7:	6a 01                	push   0x1
c002b2e9:	6a 00                	push   0x0
c002b2eb:	53                   	push   ebx
c002b2ec:	e8 8f fb ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002b2f1:	83 c4 0c             	add    esp,0xc
c002b2f4:	6a 01                	push   0x1
c002b2f6:	6a 01                	push   0x1
c002b2f8:	53                   	push   ebx
c002b2f9:	e8 82 fb ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002b2fe:	83 c4 2c             	add    esp,0x2c
c002b301:	31 c0                	xor    eax,eax
c002b303:	5b                   	pop    ebx
c002b304:	5e                   	pop    esi
c002b305:	5f                   	pop    edi
c002b306:	5d                   	pop    ebp
c002b307:	c3                   	ret    

c002b308 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b308:	55                   	push   ebp
c002b309:	57                   	push   edi
c002b30a:	56                   	push   esi
c002b30b:	53                   	push   ebx
c002b30c:	83 ec 1c             	sub    esp,0x1c
c002b30f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b313:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b317:	8d 42 f8             	lea    eax,[edx-0x8]
c002b31a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b31e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b322:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b326:	3c 03                	cmp    al,0x3
c002b328:	77 5a                	ja     c002b384 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b32a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b32e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b332:	0f b6 db             	movzx  ebx,bl
c002b335:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b338:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b33d:	0c 80                	or     al,0x80
c002b33f:	50                   	push   eax
c002b340:	6a 0c                	push   0xc
c002b342:	53                   	push   ebx
c002b343:	56                   	push   esi
c002b344:	e8 2f f9 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b349:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b34e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b352:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b356:	0f b6 d2             	movzx  edx,dl
c002b359:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b35d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b35f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b364:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b368:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b36c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b370:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b378:	83 c4 2c             	add    esp,0x2c
c002b37b:	5b                   	pop    ebx
c002b37c:	5e                   	pop    esi
c002b37d:	5f                   	pop    edi
c002b37e:	5d                   	pop    ebp
c002b37f:	e9 f4 f8 ff ff       	jmp    c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b384:	0f b6 c2             	movzx  eax,dl
c002b387:	83 f8 07             	cmp    eax,0x7
c002b38a:	77 12                	ja     c002b39e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b38c:	0f b6 c2             	movzx  eax,dl
c002b38f:	0f b6 db             	movzx  ebx,bl
c002b392:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b39a:	01 c2                	add    edx,eax
c002b39c:	eb 2f                	jmp    c002b3cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b39e:	83 f8 0d             	cmp    eax,0xd
c002b3a1:	77 13                	ja     c002b3b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b3a3:	0f b6 db             	movzx  ebx,bl
c002b3a6:	0f b6 d2             	movzx  edx,dl
c002b3a9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b3b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b3b4:	eb 17                	jmp    c002b3cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b3b6:	83 f8 15             	cmp    eax,0x15
c002b3b9:	77 14                	ja     c002b3cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b3bb:	0f b6 db             	movzx  ebx,bl
c002b3be:	0f b6 d2             	movzx  edx,dl
c002b3c1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b3c9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b3cd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b3cf:	83 c4 1c             	add    esp,0x1c
c002b3d2:	5b                   	pop    ebx
c002b3d3:	5e                   	pop    esi
c002b3d4:	5f                   	pop    edi
c002b3d5:	5d                   	pop    ebp
c002b3d6:	c3                   	ret    
c002b3d7:	90                   	nop

c002b3d8 <IDE::detect()>:
c002b3d8:	55                   	push   ebp
c002b3d9:	57                   	push   edi
c002b3da:	56                   	push   esi
c002b3db:	53                   	push   ebx
c002b3dc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b3e2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b3e9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b3f0:	0f 85 a4 02 00 00    	jne    c002b69a <IDE::detect()+0x2c2>
c002b3f6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b3fd:	31 f6                	xor    esi,esi
c002b3ff:	31 ed                	xor    ebp,ebp
c002b401:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b409:	89 e8                	mov    eax,ebp
c002b40b:	c1 e0 06             	shl    eax,0x6
c002b40e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b416:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b41a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b422:	c1 e0 04             	shl    eax,0x4
c002b425:	83 c8 a0             	or     eax,0xffffffa0
c002b428:	0f b6 c0             	movzx  eax,al
c002b42b:	50                   	push   eax
c002b42c:	6a 06                	push   0x6
c002b42e:	56                   	push   esi
c002b42f:	53                   	push   ebx
c002b430:	e8 43 f8 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b435:	83 c4 0c             	add    esp,0xc
c002b438:	6a 0c                	push   0xc
c002b43a:	56                   	push   esi
c002b43b:	53                   	push   ebx
c002b43c:	e8 f7 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b441:	83 c4 0c             	add    esp,0xc
c002b444:	6a 0c                	push   0xc
c002b446:	56                   	push   esi
c002b447:	53                   	push   ebx
c002b448:	e8 eb f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b44d:	83 c4 0c             	add    esp,0xc
c002b450:	6a 0c                	push   0xc
c002b452:	56                   	push   esi
c002b453:	53                   	push   ebx
c002b454:	e8 df f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b459:	83 c4 0c             	add    esp,0xc
c002b45c:	6a 0c                	push   0xc
c002b45e:	56                   	push   esi
c002b45f:	53                   	push   ebx
c002b460:	e8 d3 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b465:	68 ec 00 00 00       	push   0xec
c002b46a:	6a 07                	push   0x7
c002b46c:	56                   	push   esi
c002b46d:	53                   	push   ebx
c002b46e:	e8 05 f8 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b473:	83 c4 1c             	add    esp,0x1c
c002b476:	6a 0c                	push   0xc
c002b478:	56                   	push   esi
c002b479:	53                   	push   ebx
c002b47a:	e8 b9 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b47f:	83 c4 0c             	add    esp,0xc
c002b482:	6a 0c                	push   0xc
c002b484:	56                   	push   esi
c002b485:	53                   	push   ebx
c002b486:	e8 ad f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b48b:	83 c4 0c             	add    esp,0xc
c002b48e:	6a 0c                	push   0xc
c002b490:	56                   	push   esi
c002b491:	53                   	push   ebx
c002b492:	e8 a1 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b497:	83 c4 0c             	add    esp,0xc
c002b49a:	6a 0c                	push   0xc
c002b49c:	56                   	push   esi
c002b49d:	53                   	push   ebx
c002b49e:	e8 95 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b4a3:	83 c4 0c             	add    esp,0xc
c002b4a6:	6a 0c                	push   0xc
c002b4a8:	56                   	push   esi
c002b4a9:	53                   	push   ebx
c002b4aa:	e8 89 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b4af:	83 c4 10             	add    esp,0x10
c002b4b2:	84 c0                	test   al,al
c002b4b4:	0f 84 60 01 00 00    	je     c002b61a <IDE::detect()+0x242>
c002b4ba:	31 ff                	xor    edi,edi
c002b4bc:	50                   	push   eax
c002b4bd:	6a 0c                	push   0xc
c002b4bf:	56                   	push   esi
c002b4c0:	53                   	push   ebx
c002b4c1:	e8 72 f8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b4c6:	83 c4 10             	add    esp,0x10
c002b4c9:	a8 01                	test   al,0x1
c002b4cb:	0f 85 6a 01 00 00    	jne    c002b63b <IDE::detect()+0x263>
c002b4d1:	a8 80                	test   al,0x80
c002b4d3:	75 04                	jne    c002b4d9 <IDE::detect()+0x101>
c002b4d5:	a8 08                	test   al,0x8
c002b4d7:	75 23                	jne    c002b4fc <IDE::detect()+0x124>
c002b4d9:	47                   	inc    edi
c002b4da:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b4e0:	7e da                	jle    c002b4bc <IDE::detect()+0xe4>
c002b4e2:	83 ec 0c             	sub    esp,0xc
c002b4e5:	6a 32                	push   0x32
c002b4e7:	e8 44 9f ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002b4ec:	83 c4 10             	add    esp,0x10
c002b4ef:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b4f5:	75 c5                	jne    c002b4bc <IDE::detect()+0xe4>
c002b4f7:	e9 3f 01 00 00       	jmp    c002b63b <IDE::detect()+0x263>
c002b4fc:	31 c9                	xor    ecx,ecx
c002b4fe:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b502:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b506:	83 ec 0c             	sub    esp,0xc
c002b509:	68 80 00 00 00       	push   0x80
c002b50e:	57                   	push   edi
c002b50f:	6a 00                	push   0x0
c002b511:	56                   	push   esi
c002b512:	53                   	push   ebx
c002b513:	e8 f0 fd ff ff       	call   c002b308 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b518:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b51d:	89 e8                	mov    eax,ebp
c002b51f:	89 d1                	mov    ecx,edx
c002b521:	c1 e0 06             	shl    eax,0x6
c002b524:	01 d8                	add    eax,ebx
c002b526:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b52d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b534:	89 f2                	mov    edx,esi
c002b536:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b53c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b540:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b546:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b54a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b551:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b559:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b560:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b568:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b56e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b575:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b57b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b57f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b583:	83 c4 20             	add    esp,0x20
c002b586:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b589:	83 c0 02             	add    eax,0x2
c002b58c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b592:	83 c7 02             	add    edi,0x2
c002b595:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b598:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b59e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b5a2:	75 e2                	jne    c002b586 <IDE::detect()+0x1ae>
c002b5a4:	89 e8                	mov    eax,ebp
c002b5a6:	c1 e0 06             	shl    eax,0x6
c002b5a9:	01 d8                	add    eax,ebx
c002b5ab:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b5b2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b5b9:	c1 ea 09             	shr    edx,0x9
c002b5bc:	83 e2 01             	and    edx,0x1
c002b5bf:	80 e1 01             	and    cl,0x1
c002b5c2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b5c8:	75 22                	jne    c002b5ec <IDE::detect()+0x214>
c002b5ca:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b5d1:	74 46                	je     c002b619 <IDE::detect()+0x241>
c002b5d3:	83 ec 0c             	sub    esp,0xc
c002b5d6:	68 7c 01 00 00       	push   0x17c
c002b5db:	e8 da ad fe ff       	call   c00163ba <malloc>
c002b5e0:	89 c7                	mov    edi,eax
c002b5e2:	89 04 24             	mov    DWORD PTR [esp],eax
c002b5e5:	e8 2e 05 00 00       	call   c002bb18 <ATA::ATA()>
c002b5ea:	eb 17                	jmp    c002b603 <IDE::detect()+0x22b>
c002b5ec:	83 ec 0c             	sub    esp,0xc
c002b5ef:	68 84 01 00 00       	push   0x184
c002b5f4:	e8 c1 ad fe ff       	call   c00163ba <malloc>
c002b5f9:	89 c7                	mov    edi,eax
c002b5fb:	89 04 24             	mov    DWORD PTR [esp],eax
c002b5fe:	e8 59 0e 00 00       	call   c002c45c <ATAPI::ATAPI()>
c002b603:	5a                   	pop    edx
c002b604:	59                   	pop    ecx
c002b605:	57                   	push   edi
c002b606:	53                   	push   ebx
c002b607:	e8 be fc fe ff       	call   c001b2ca <Device::addChild(Device*)>
c002b60c:	8b 07                	mov    eax,DWORD PTR [edi]
c002b60e:	53                   	push   ebx
c002b60f:	55                   	push   ebp
c002b610:	6a 00                	push   0x0
c002b612:	57                   	push   edi
c002b613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b616:	83 c4 20             	add    esp,0x20
c002b619:	45                   	inc    ebp
c002b61a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b61f:	74 0d                	je     c002b62e <IDE::detect()+0x256>
c002b621:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b629:	e9 db fd ff ff       	jmp    c002b409 <IDE::detect()+0x31>
c002b62e:	4e                   	dec    esi
c002b62f:	74 69                	je     c002b69a <IDE::detect()+0x2c2>
c002b631:	be 01 00 00 00       	mov    esi,0x1
c002b636:	e9 c6 fd ff ff       	jmp    c002b401 <IDE::detect()+0x29>
c002b63b:	50                   	push   eax
c002b63c:	6a 04                	push   0x4
c002b63e:	56                   	push   esi
c002b63f:	53                   	push   ebx
c002b640:	e8 f3 f6 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b645:	83 c4 0c             	add    esp,0xc
c002b648:	89 c7                	mov    edi,eax
c002b64a:	6a 05                	push   0x5
c002b64c:	56                   	push   esi
c002b64d:	53                   	push   ebx
c002b64e:	e8 e5 f6 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b653:	83 c4 10             	add    esp,0x10
c002b656:	89 f9                	mov    ecx,edi
c002b658:	0f b6 c0             	movzx  eax,al
c002b65b:	0f b6 f9             	movzx  edi,cl
c002b65e:	83 ff 14             	cmp    edi,0x14
c002b661:	75 07                	jne    c002b66a <IDE::detect()+0x292>
c002b663:	3d eb 00 00 00       	cmp    eax,0xeb
c002b668:	eb 0a                	jmp    c002b674 <IDE::detect()+0x29c>
c002b66a:	3d 96 00 00 00       	cmp    eax,0x96
c002b66f:	75 a9                	jne    c002b61a <IDE::detect()+0x242>
c002b671:	83 ff 69             	cmp    edi,0x69
c002b674:	75 a4                	jne    c002b61a <IDE::detect()+0x242>
c002b676:	68 a1 00 00 00       	push   0xa1
c002b67b:	6a 07                	push   0x7
c002b67d:	56                   	push   esi
c002b67e:	53                   	push   ebx
c002b67f:	e8 f4 f5 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b684:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b68b:	e8 a0 9d ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002b690:	83 c4 10             	add    esp,0x10
c002b693:	b1 01                	mov    cl,0x1
c002b695:	e9 64 fe ff ff       	jmp    c002b4fe <IDE::detect()+0x126>
c002b69a:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b6a0:	5b                   	pop    ebx
c002b6a1:	5e                   	pop    esi
c002b6a2:	5f                   	pop    edi
c002b6a3:	5d                   	pop    ebp
c002b6a4:	c3                   	ret    
c002b6a5:	90                   	nop

c002b6a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b6a6:	55                   	push   ebp
c002b6a7:	57                   	push   edi
c002b6a8:	56                   	push   esi
c002b6a9:	53                   	push   ebx
c002b6aa:	83 ec 1c             	sub    esp,0x1c
c002b6ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b6b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b6b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b6b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b6bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b6c1:	88 c3                	mov    bl,al
c002b6c3:	25 ff 00 00 00       	and    eax,0xff
c002b6c8:	0f 84 88 00 00 00    	je     c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6ce:	83 ec 0c             	sub    esp,0xc
c002b6d1:	89 c7                	mov    edi,eax
c002b6d3:	68 87 37 03 c0       	push   0xc0033787
c002b6d8:	e8 6c db fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002b6dd:	83 c4 10             	add    esp,0x10
c002b6e0:	83 ff 01             	cmp    edi,0x1
c002b6e3:	74 6b                	je     c002b750 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b6e5:	83 ff 02             	cmp    edi,0x2
c002b6e8:	75 58                	jne    c002b742 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b6ea:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b6ef:	01 ff                	add    edi,edi
c002b6f1:	50                   	push   eax
c002b6f2:	09 fe                	or     esi,edi
c002b6f4:	6a 01                	push   0x1
c002b6f6:	89 f0                	mov    eax,esi
c002b6f8:	0f b6 f0             	movzx  esi,al
c002b6fb:	c1 e6 06             	shl    esi,0x6
c002b6fe:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b706:	50                   	push   eax
c002b707:	55                   	push   ebp
c002b708:	e8 2b f6 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b70d:	83 c4 10             	add    esp,0x10
c002b710:	a8 01                	test   al,0x1
c002b712:	74 02                	je     c002b716 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b714:	b3 07                	mov    bl,0x7
c002b716:	a8 02                	test   al,0x2
c002b718:	74 02                	je     c002b71c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b71a:	b3 03                	mov    bl,0x3
c002b71c:	a8 04                	test   al,0x4
c002b71e:	74 02                	je     c002b722 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b720:	b3 14                	mov    bl,0x14
c002b722:	a8 08                	test   al,0x8
c002b724:	74 02                	je     c002b728 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b726:	b3 03                	mov    bl,0x3
c002b728:	a8 10                	test   al,0x10
c002b72a:	74 02                	je     c002b72e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b72c:	b3 15                	mov    bl,0x15
c002b72e:	a8 20                	test   al,0x20
c002b730:	74 02                	je     c002b734 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b732:	b3 03                	mov    bl,0x3
c002b734:	a8 40                	test   al,0x40
c002b736:	74 02                	je     c002b73a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b738:	b3 16                	mov    bl,0x16
c002b73a:	a8 80                	test   al,0x80
c002b73c:	74 18                	je     c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b73e:	b3 0d                	mov    bl,0xd
c002b740:	eb 14                	jmp    c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b742:	83 ff 03             	cmp    edi,0x3
c002b745:	74 0d                	je     c002b754 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b747:	83 ff 04             	cmp    edi,0x4
c002b74a:	75 0a                	jne    c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b74c:	b3 08                	mov    bl,0x8
c002b74e:	eb 06                	jmp    c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b750:	b3 13                	mov    bl,0x13
c002b752:	eb 02                	jmp    c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b754:	b3 17                	mov    bl,0x17
c002b756:	83 c4 1c             	add    esp,0x1c
c002b759:	88 d8                	mov    al,bl
c002b75b:	5b                   	pop    ebx
c002b75c:	5e                   	pop    esi
c002b75d:	5f                   	pop    edi
c002b75e:	5d                   	pop    ebp
c002b75f:	c3                   	ret    

c002b760 <IDE::polling(unsigned char, unsigned int)>:
c002b760:	57                   	push   edi
c002b761:	56                   	push   esi
c002b762:	53                   	push   ebx
c002b763:	bb 04 00 00 00       	mov    ebx,0x4
c002b768:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b76c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b771:	52                   	push   edx
c002b772:	6a 0c                	push   0xc
c002b774:	56                   	push   esi
c002b775:	57                   	push   edi
c002b776:	e8 bd f5 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b77b:	83 c4 10             	add    esp,0x10
c002b77e:	4b                   	dec    ebx
c002b77f:	75 f0                	jne    c002b771 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b781:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b786:	50                   	push   eax
c002b787:	6a 0c                	push   0xc
c002b789:	56                   	push   esi
c002b78a:	57                   	push   edi
c002b78b:	e8 a8 f5 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002b790:	83 c4 10             	add    esp,0x10
c002b793:	a8 01                	test   al,0x1
c002b795:	75 17                	jne    c002b7ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b797:	a8 20                	test   al,0x20
c002b799:	75 0f                	jne    c002b7aa <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b79b:	4b                   	dec    ebx
c002b79c:	74 10                	je     c002b7ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b79e:	a8 80                	test   al,0x80
c002b7a0:	75 e4                	jne    c002b786 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7a2:	a8 08                	test   al,0x8
c002b7a4:	74 e0                	je     c002b786 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7a6:	31 c0                	xor    eax,eax
c002b7a8:	eb 06                	jmp    c002b7b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7aa:	b0 01                	mov    al,0x1
c002b7ac:	eb 02                	jmp    c002b7b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7ae:	b0 02                	mov    al,0x2
c002b7b0:	5b                   	pop    ebx
c002b7b1:	5e                   	pop    esi
c002b7b2:	5f                   	pop    edi
c002b7b3:	c3                   	ret    

c002b7b4 <SATABus::close(int, int, void*)>:
c002b7b4:	31 c0                	xor    eax,eax
c002b7b6:	c3                   	ret    
c002b7b7:	90                   	nop

c002b7b8 <SATABus::detect()>:
c002b7b8:	c3                   	ret    
c002b7b9:	90                   	nop

c002b7ba <SATABus::SATABus()>:
c002b7ba:	83 ec 0c             	sub    esp,0xc
c002b7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7c1:	83 ec 08             	sub    esp,0x8
c002b7c4:	68 c0 37 03 c0       	push   0xc00337c0
c002b7c9:	50                   	push   eax
c002b7ca:	e8 55 fe fe ff       	call   c001b624 <HardDiskController::HardDiskController(char const*)>
c002b7cf:	83 c4 10             	add    esp,0x10
c002b7d2:	ba ec 37 03 c0       	mov    edx,0xc00337ec
c002b7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7db:	89 10                	mov    DWORD PTR [eax],edx
c002b7dd:	83 ec 0c             	sub    esp,0xc
c002b7e0:	6a 50                	push   0x50
c002b7e2:	e8 ab af fe ff       	call   c0016792 <Phys::allocateContiguousPages(int)>
c002b7e7:	83 c4 10             	add    esp,0x10
c002b7ea:	89 c2                	mov    edx,eax
c002b7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b7f6:	83 ec 0c             	sub    esp,0xc
c002b7f9:	6a 50                	push   0x50
c002b7fb:	e8 11 c7 fe ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c002b800:	83 c4 10             	add    esp,0x10
c002b803:	89 c2                	mov    edx,eax
c002b805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b809:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b80f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b814:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b818:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b81e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b822:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b828:	83 ec 0c             	sub    esp,0xc
c002b82b:	6a 03                	push   0x3
c002b82d:	6a 50                	push   0x50
c002b82f:	51                   	push   ecx
c002b830:	52                   	push   edx
c002b831:	50                   	push   eax
c002b832:	e8 e7 cf fe ff       	call   c001881e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b837:	83 c4 20             	add    esp,0x20
c002b83a:	90                   	nop
c002b83b:	83 c4 0c             	add    esp,0xc
c002b83e:	c3                   	ret    
c002b83f:	90                   	nop

c002b840 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b844:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b847:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b84a:	09 c2                	or     edx,eax
c002b84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b850:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b856:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b858:	31 c0                	xor    eax,eax
c002b85a:	c1 e9 08             	shr    ecx,0x8
c002b85d:	83 e1 0f             	and    ecx,0xf
c002b860:	39 c8                	cmp    eax,ecx
c002b862:	74 0a                	je     c002b86e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b864:	f6 c2 01             	test   dl,0x1
c002b867:	74 08                	je     c002b871 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b869:	d1 ea                	shr    edx,1
c002b86b:	40                   	inc    eax
c002b86c:	eb f2                	jmp    c002b860 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b86e:	83 c8 ff             	or     eax,0xffffffff
c002b871:	c3                   	ret    

c002b872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b872:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b876:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b879:	89 c2                	mov    edx,eax
c002b87b:	c1 ea 08             	shr    edx,0x8
c002b87e:	83 e2 0f             	and    edx,0xf
c002b881:	4a                   	dec    edx
c002b882:	75 32                	jne    c002b8b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b884:	83 e0 0f             	and    eax,0xf
c002b887:	83 f8 03             	cmp    eax,0x3
c002b88a:	75 2a                	jne    c002b8b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b88c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b88f:	b8 02 00 00 00       	mov    eax,0x2
c002b894:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b89a:	74 1c                	je     c002b8b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b89c:	b8 04 00 00 00       	mov    eax,0x4
c002b8a1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b8a7:	74 0f                	je     c002b8b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b8a9:	31 c0                	xor    eax,eax
c002b8ab:	83 fa 03             	cmp    edx,0x3
c002b8ae:	0f 94 c0             	sete   al
c002b8b1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b8b5:	c3                   	ret    
c002b8b6:	31 c0                	xor    eax,eax
c002b8b8:	c3                   	ret    
c002b8b9:	90                   	nop

c002b8ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b8ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8c1:	0f ba e2 0f          	bt     edx,0xf
c002b8c5:	72 f7                	jb     c002b8be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b8c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8ca:	83 ca 10             	or     edx,0x10
c002b8cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8d3:	83 ca 01             	or     edx,0x1
c002b8d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8d9:	c3                   	ret    

c002b8da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b8da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8e1:	83 e2 fe             	and    edx,0xfffffffe
c002b8e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8ea:	83 e2 ef             	and    edx,0xffffffef
c002b8ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b8f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8f3:	0f ba e2 0e          	bt     edx,0xe
c002b8f7:	72 f7                	jb     c002b8f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b8f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8fc:	0f ba e2 0f          	bt     edx,0xf
c002b900:	72 ee                	jb     c002b8f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b902:	c3                   	ret    
c002b903:	90                   	nop

c002b904 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b904:	55                   	push   ebp
c002b905:	57                   	push   edi
c002b906:	56                   	push   esi
c002b907:	53                   	push   ebx
c002b908:	83 ec 1c             	sub    esp,0x1c
c002b90b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b90f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b913:	53                   	push   ebx
c002b914:	56                   	push   esi
c002b915:	e8 c0 ff ff ff       	call   c002b8da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b91a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b91e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b924:	83 ec 0c             	sub    esp,0xc
c002b927:	c1 e5 0a             	shl    ebp,0xa
c002b92a:	01 e8                	add    eax,ebp
c002b92c:	89 03                	mov    DWORD PTR [ebx],eax
c002b92e:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b930:	68 00 04 00 00       	push   0x400
c002b935:	6a 00                	push   0x0
c002b937:	50                   	push   eax
c002b938:	e8 b3 4b fd ff       	call   c00004f0 <memset>
c002b93d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b943:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b947:	01 e8                	add    eax,ebp
c002b949:	83 c4 1c             	add    esp,0x1c
c002b94c:	89 03                	mov    DWORD PTR [ebx],eax
c002b94e:	c1 e2 08             	shl    edx,0x8
c002b951:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b958:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b95e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b964:	01 f8                	add    eax,edi
c002b966:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b969:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b96c:	68 00 01 00 00       	push   0x100
c002b971:	6a 00                	push   0x0
c002b973:	50                   	push   eax
c002b974:	e8 77 4b fd ff       	call   c00004f0 <memset>
c002b979:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b97f:	01 fa                	add    edx,edi
c002b981:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b985:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b988:	c1 e7 0d             	shl    edi,0xd
c002b98b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b992:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b998:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b99e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b9a2:	31 ff                	xor    edi,edi
c002b9a4:	83 c4 10             	add    esp,0x10
c002b9a7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b9ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b9b1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b9b7:	83 c5 20             	add    ebp,0x20
c002b9ba:	01 f8                	add    eax,edi
c002b9bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b9bf:	52                   	push   edx
c002b9c0:	68 00 01 00 00       	push   0x100
c002b9c5:	6a 00                	push   0x0
c002b9c7:	50                   	push   eax
c002b9c8:	e8 23 4b fd ff       	call   c00004f0 <memset>
c002b9cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b9d1:	83 c4 10             	add    esp,0x10
c002b9d4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002b9da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002b9e1:	01 f8                	add    eax,edi
c002b9e3:	81 c7 00 01 00 00    	add    edi,0x100
c002b9e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b9ec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002b9f2:	75 b3                	jne    c002b9a7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002b9f4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b9fb:	50                   	push   eax
c002b9fc:	50                   	push   eax
c002b9fd:	53                   	push   ebx
c002b9fe:	56                   	push   esi
c002b9ff:	e8 b6 fe ff ff       	call   c002b8ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002ba04:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba0b:	83 c4 2c             	add    esp,0x2c
c002ba0e:	5b                   	pop    ebx
c002ba0f:	5e                   	pop    esi
c002ba10:	5f                   	pop    edi
c002ba11:	5d                   	pop    ebp
c002ba12:	c3                   	ret    
c002ba13:	90                   	nop

c002ba14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002ba14:	55                   	push   ebp
c002ba15:	57                   	push   edi
c002ba16:	56                   	push   esi
c002ba17:	53                   	push   ebx
c002ba18:	31 db                	xor    ebx,ebx
c002ba1a:	83 ec 0c             	sub    esp,0xc
c002ba1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ba21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002ba25:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002ba28:	f7 c7 01 00 00 00    	test   edi,0x1
c002ba2e:	74 7a                	je     c002baaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002ba30:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002ba34:	89 d8                	mov    eax,ebx
c002ba36:	c1 e0 07             	shl    eax,0x7
c002ba39:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002ba40:	55                   	push   ebp
c002ba41:	56                   	push   esi
c002ba42:	e8 2b fe ff ff       	call   c002b872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002ba47:	5a                   	pop    edx
c002ba48:	83 f8 01             	cmp    eax,0x1
c002ba4b:	59                   	pop    ecx
c002ba4c:	75 21                	jne    c002ba6f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002ba4e:	50                   	push   eax
c002ba4f:	53                   	push   ebx
c002ba50:	55                   	push   ebp
c002ba51:	56                   	push   esi
c002ba52:	e8 ad fe ff ff       	call   c002b904 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002ba57:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002ba5e:	e8 57 a9 fe ff       	call   c00163ba <malloc>
c002ba63:	89 c5                	mov    ebp,eax
c002ba65:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba68:	e8 bb 10 00 00       	call   c002cb28 <SATA::SATA()>
c002ba6d:	eb 24                	jmp    c002ba93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002ba6f:	83 f8 04             	cmp    eax,0x4
c002ba72:	75 36                	jne    c002baaa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002ba74:	51                   	push   ecx
c002ba75:	53                   	push   ebx
c002ba76:	55                   	push   ebp
c002ba77:	56                   	push   esi
c002ba78:	e8 87 fe ff ff       	call   c002b904 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002ba7d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002ba84:	e8 31 a9 fe ff       	call   c00163ba <malloc>
c002ba89:	89 c5                	mov    ebp,eax
c002ba8b:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba8e:	e8 2b 18 00 00       	call   c002d2be <SATAPI::SATAPI()>
c002ba93:	58                   	pop    eax
c002ba94:	5a                   	pop    edx
c002ba95:	55                   	push   ebp
c002ba96:	56                   	push   esi
c002ba97:	e8 2e f8 fe ff       	call   c001b2ca <Device::addChild(Device*)>
c002ba9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ba9f:	56                   	push   esi
c002baa0:	6a 00                	push   0x0
c002baa2:	53                   	push   ebx
c002baa3:	55                   	push   ebp
c002baa4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002baa7:	83 c4 20             	add    esp,0x20
c002baaa:	d1 ef                	shr    edi,1
c002baac:	43                   	inc    ebx
c002baad:	83 fb 20             	cmp    ebx,0x20
c002bab0:	0f 85 72 ff ff ff    	jne    c002ba28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bab6:	83 c4 0c             	add    esp,0xc
c002bab9:	5b                   	pop    ebx
c002baba:	5e                   	pop    esi
c002babb:	5f                   	pop    edi
c002babc:	5d                   	pop    ebp
c002babd:	c3                   	ret    

c002babe <SATABus::open(int, int, void*)>:
c002babe:	53                   	push   ebx
c002babf:	83 ec 08             	sub    esp,0x8
c002bac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bac6:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bacc:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bad2:	e8 e9 94 ff ff       	call   c0024fc0 <KeDisablePreemption()>
c002bad7:	52                   	push   edx
c002bad8:	52                   	push   edx
c002bad9:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002badf:	53                   	push   ebx
c002bae0:	e8 2f ff ff ff       	call   c002ba14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bae5:	e8 fe 94 ff ff       	call   c0024fe8 <KeRestorePreemption()>
c002baea:	31 c0                	xor    eax,eax
c002baec:	83 c4 18             	add    esp,0x18
c002baef:	5b                   	pop    ebx
c002baf0:	c3                   	ret    
c002baf1:	90                   	nop

c002baf2 <ATA::close(int, int, void*)>:
c002baf2:	83 ec 0c             	sub    esp,0xc
c002baf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002baf9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002baff:	85 c0                	test   eax,eax
c002bb01:	74 0c                	je     c002bb0f <ATA::close(int, int, void*)+0x1d>
c002bb03:	83 ec 0c             	sub    esp,0xc
c002bb06:	8b 10                	mov    edx,DWORD PTR [eax]
c002bb08:	50                   	push   eax
c002bb09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bb0c:	83 c4 10             	add    esp,0x10
c002bb0f:	31 c0                	xor    eax,eax
c002bb11:	83 c4 0c             	add    esp,0xc
c002bb14:	c3                   	ret    
c002bb15:	90                   	nop

c002bb16 <ATA::powerSaving(PowerSavingLevel)>:
c002bb16:	c3                   	ret    
c002bb17:	90                   	nop

c002bb18 <ATA::ATA()>:
c002bb18:	83 ec 0c             	sub    esp,0xc
c002bb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb1f:	83 ec 04             	sub    esp,0x4
c002bb22:	68 00 02 00 00       	push   0x200
c002bb27:	68 c5 38 03 c0       	push   0xc00338c5
c002bb2c:	50                   	push   eax
c002bb2d:	e8 7c fb fe ff       	call   c001b6ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bb32:	83 c4 10             	add    esp,0x10
c002bb35:	ba 2c 38 03 c0       	mov    edx,0xc003382c
c002bb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb3e:	89 10                	mov    DWORD PTR [eax],edx
c002bb40:	90                   	nop
c002bb41:	83 c4 0c             	add    esp,0xc
c002bb44:	c3                   	ret    
c002bb45:	90                   	nop

c002bb46 <ATA::flush(bool)>:
c002bb46:	53                   	push   ebx
c002bb47:	83 ec 08             	sub    esp,0x8
c002bb4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb4e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bb53:	83 f8 01             	cmp    eax,0x1
c002bb56:	19 c0                	sbb    eax,eax
c002bb58:	83 e0 fd             	and    eax,0xfffffffd
c002bb5b:	05 ea 00 00 00       	add    eax,0xea
c002bb60:	50                   	push   eax
c002bb61:	6a 07                	push   0x7
c002bb63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb6a:	50                   	push   eax
c002bb6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb71:	e8 02 f1 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bb76:	83 c4 0c             	add    esp,0xc
c002bb79:	6a 00                	push   0x0
c002bb7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb82:	50                   	push   eax
c002bb83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb89:	e8 d2 fb ff ff       	call   c002b760 <IDE::polling(unsigned char, unsigned int)>
c002bb8e:	83 c4 18             	add    esp,0x18
c002bb91:	5b                   	pop    ebx
c002bb92:	c3                   	ret    
c002bb93:	90                   	nop

c002bb94 <ATA::readyForCommand()>:
c002bb94:	56                   	push   esi
c002bb95:	53                   	push   ebx
c002bb96:	53                   	push   ebx
c002bb97:	31 db                	xor    ebx,ebx
c002bb99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bb9d:	51                   	push   ecx
c002bb9e:	6a 0c                	push   0xc
c002bba0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bba7:	50                   	push   eax
c002bba8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bbae:	e8 85 f1 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002bbb3:	83 c4 10             	add    esp,0x10
c002bbb6:	a8 88                	test   al,0x88
c002bbb8:	74 1f                	je     c002bbd9 <ATA::readyForCommand()+0x45>
c002bbba:	43                   	inc    ebx
c002bbbb:	83 fb 63             	cmp    ebx,0x63
c002bbbe:	7e dd                	jle    c002bb9d <ATA::readyForCommand()+0x9>
c002bbc0:	83 ec 0c             	sub    esp,0xc
c002bbc3:	6a 0a                	push   0xa
c002bbc5:	e8 66 98 ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002bbca:	83 c4 10             	add    esp,0x10
c002bbcd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bbd3:	75 c8                	jne    c002bb9d <ATA::readyForCommand()+0x9>
c002bbd5:	31 c0                	xor    eax,eax
c002bbd7:	eb 02                	jmp    c002bbdb <ATA::readyForCommand()+0x47>
c002bbd9:	b0 01                	mov    al,0x1
c002bbdb:	5a                   	pop    edx
c002bbdc:	5b                   	pop    ebx
c002bbdd:	5e                   	pop    esi
c002bbde:	c3                   	ret    
c002bbdf:	90                   	nop

c002bbe0 <ATA::access(unsigned long long, int, void*, bool)>:
c002bbe0:	55                   	push   ebp
c002bbe1:	57                   	push   edi
c002bbe2:	56                   	push   esi
c002bbe3:	53                   	push   ebx
c002bbe4:	83 ec 2c             	sub    esp,0x2c
c002bbe7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bbeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bbef:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bbf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bbf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bbfb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bbff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002bc03:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bc09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bc0d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bc13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bc17:	c1 e0 06             	shl    eax,0x6
c002bc1a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bc22:	74 5d                	je     c002bc81 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002bc24:	89 fa                	mov    edx,edi
c002bc26:	89 f0                	mov    eax,esi
c002bc28:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bc2c:	c1 ea 1c             	shr    edx,0x1c
c002bc2f:	89 d1                	mov    ecx,edx
c002bc31:	09 c1                	or     ecx,eax
c002bc33:	74 25                	je     c002bc5a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bc35:	31 ed                	xor    ebp,ebp
c002bc37:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bc3e:	89 fa                	mov    edx,edi
c002bc40:	89 f0                	mov    eax,esi
c002bc42:	0f ad d0             	shrd   eax,edx,cl
c002bc45:	d3 ea                	shr    edx,cl
c002bc47:	f6 c1 20             	test   cl,0x20
c002bc4a:	74 02                	je     c002bc4e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bc4c:	89 d0                	mov    eax,edx
c002bc4e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bc52:	45                   	inc    ebp
c002bc53:	83 fd 06             	cmp    ebp,0x6
c002bc56:	75 df                	jne    c002bc37 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bc58:	eb 76                	jmp    c002bcd0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bc5a:	89 f0                	mov    eax,esi
c002bc5c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bc61:	89 fa                	mov    edx,edi
c002bc63:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bc6a:	0f ac d0 10          	shrd   eax,edx,0x10
c002bc6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bc73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bc77:	c1 ee 18             	shr    esi,0x18
c002bc7a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bc7f:	eb 56                	jmp    c002bcd7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bc81:	6a 00                	push   0x0
c002bc83:	6a 3f                	push   0x3f
c002bc85:	57                   	push   edi
c002bc86:	56                   	push   esi
c002bc87:	e8 c4 2a 00 00       	call   c002e750 <__umoddi3>
c002bc8c:	83 c4 10             	add    esp,0x10
c002bc8f:	40                   	inc    eax
c002bc90:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bc94:	6a 00                	push   0x0
c002bc96:	68 f0 03 00 00       	push   0x3f0
c002bc9b:	57                   	push   edi
c002bc9c:	56                   	push   esi
c002bc9d:	e8 ae 29 00 00       	call   c002e650 <__udivdi3>
c002bca2:	83 c4 10             	add    esp,0x10
c002bca5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bcaa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bcb1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bcb6:	6a 00                	push   0x0
c002bcb8:	6a 3f                	push   0x3f
c002bcba:	57                   	push   edi
c002bcbb:	56                   	push   esi
c002bcbc:	e8 8f 29 00 00       	call   c002e650 <__udivdi3>
c002bcc1:	83 c4 10             	add    esp,0x10
c002bcc4:	83 e0 0f             	and    eax,0xf
c002bcc7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bccc:	89 c6                	mov    esi,eax
c002bcce:	eb 07                	jmp    c002bcd7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bcd0:	31 f6                	xor    esi,esi
c002bcd2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bcd7:	bf 01 00 00 00       	mov    edi,0x1
c002bcdc:	50                   	push   eax
c002bcdd:	6a 00                	push   0x0
c002bcdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bce6:	50                   	push   eax
c002bce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bceb:	e8 90 f1 ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002bcf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bcf3:	e8 9c fe ff ff       	call   c002bb94 <ATA::readyForCommand()>
c002bcf8:	83 c4 10             	add    esp,0x10
c002bcfb:	84 c0                	test   al,al
c002bcfd:	0f 84 69 02 00 00    	je     c002bf6c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bd03:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bd09:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bd0f:	c1 e0 04             	shl    eax,0x4
c002bd12:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bd19:	09 c6                	or     esi,eax
c002bd1b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bd20:	75 05                	jne    c002bd27 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bd22:	83 ce a0             	or     esi,0xffffffa0
c002bd25:	eb 03                	jmp    c002bd2a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bd27:	83 ce e0             	or     esi,0xffffffe0
c002bd2a:	89 f0                	mov    eax,esi
c002bd2c:	0f b6 f0             	movzx  esi,al
c002bd2f:	56                   	push   esi
c002bd30:	6a 06                	push   0x6
c002bd32:	51                   	push   ecx
c002bd33:	52                   	push   edx
c002bd34:	e8 3f ef ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd39:	83 c4 10             	add    esp,0x10
c002bd3c:	6a 00                	push   0x0
c002bd3e:	6a 01                	push   0x1
c002bd40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd47:	50                   	push   eax
c002bd48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd4e:	e8 25 ef ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd53:	83 c4 10             	add    esp,0x10
c002bd56:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bd5b:	83 f8 02             	cmp    eax,0x2
c002bd5e:	75 6e                	jne    c002bdce <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bd60:	6a 00                	push   0x0
c002bd62:	6a 08                	push   0x8
c002bd64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd6b:	50                   	push   eax
c002bd6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd72:	e8 01 ef ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd77:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bd7c:	50                   	push   eax
c002bd7d:	6a 09                	push   0x9
c002bd7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd86:	50                   	push   eax
c002bd87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd8d:	e8 e6 ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd92:	83 c4 20             	add    esp,0x20
c002bd95:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bd9a:	50                   	push   eax
c002bd9b:	6a 0a                	push   0xa
c002bd9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda4:	50                   	push   eax
c002bda5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdab:	e8 c8 ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdb0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bdb5:	50                   	push   eax
c002bdb6:	6a 0b                	push   0xb
c002bdb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdbf:	50                   	push   eax
c002bdc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdc6:	e8 ad ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdcb:	83 c4 20             	add    esp,0x20
c002bdce:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bdd3:	50                   	push   eax
c002bdd4:	6a 02                	push   0x2
c002bdd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bddd:	50                   	push   eax
c002bdde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bde4:	e8 8f ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bde9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bdee:	50                   	push   eax
c002bdef:	6a 03                	push   0x3
c002bdf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdf8:	50                   	push   eax
c002bdf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdff:	e8 74 ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be04:	83 c4 20             	add    esp,0x20
c002be07:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002be0c:	50                   	push   eax
c002be0d:	6a 04                	push   0x4
c002be0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be16:	50                   	push   eax
c002be17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be1d:	e8 56 ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002be27:	50                   	push   eax
c002be28:	6a 05                	push   0x5
c002be2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be31:	50                   	push   eax
c002be32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be38:	e8 3b ee ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be3d:	83 c4 20             	add    esp,0x20
c002be40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002be45:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002be4a:	74 11                	je     c002be5d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002be4c:	b8 30 00 00 00       	mov    eax,0x30
c002be51:	83 fa 02             	cmp    edx,0x2
c002be54:	75 16                	jne    c002be6c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be56:	b8 34 00 00 00       	mov    eax,0x34
c002be5b:	eb 0f                	jmp    c002be6c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be5d:	b8 20 00 00 00       	mov    eax,0x20
c002be62:	83 fa 02             	cmp    edx,0x2
c002be65:	75 05                	jne    c002be6c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be67:	b8 24 00 00 00       	mov    eax,0x24
c002be6c:	50                   	push   eax
c002be6d:	6a 07                	push   0x7
c002be6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be76:	50                   	push   eax
c002be77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be7d:	e8 f6 ed ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be82:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002be86:	83 c4 10             	add    esp,0x10
c002be89:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002be8e:	85 f6                	test   esi,esi
c002be90:	0f 84 b3 00 00 00    	je     c002bf49 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002be96:	50                   	push   eax
c002be97:	6a 01                	push   0x1
c002be99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bea0:	50                   	push   eax
c002bea1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bea7:	e8 b4 f8 ff ff       	call   c002b760 <IDE::polling(unsigned char, unsigned int)>
c002beac:	83 c4 10             	add    esp,0x10
c002beaf:	0f b6 f8             	movzx  edi,al
c002beb2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002beb8:	85 ff                	test   edi,edi
c002beba:	74 1d                	je     c002bed9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002bebc:	57                   	push   edi
c002bebd:	0f b6 d2             	movzx  edx,dl
c002bec0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bec7:	50                   	push   eax
c002bec8:	52                   	push   edx
c002bec9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002becf:	e8 d2 f7 ff ff       	call   c002b6a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bed4:	e9 90 00 00 00       	jmp    c002bf69 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002bed9:	85 ed                	test   ebp,ebp
c002bedb:	74 3b                	je     c002bf18 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002bedd:	31 c9                	xor    ecx,ecx
c002bedf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bee3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002bee7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002beeb:	50                   	push   eax
c002beec:	50                   	push   eax
c002beed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bef4:	50                   	push   eax
c002bef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002befb:	e8 66 ed ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002bf00:	89 c2                	mov    edx,eax
c002bf02:	89 f8                	mov    eax,edi
c002bf04:	66 ef                	out    dx,ax
c002bf06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002bf0a:	83 c4 10             	add    esp,0x10
c002bf0d:	41                   	inc    ecx
c002bf0e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002bf14:	75 c9                	jne    c002bedf <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002bf16:	eb 23                	jmp    c002bf3b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002bf18:	0f b6 d2             	movzx  edx,dl
c002bf1b:	51                   	push   ecx
c002bf1c:	51                   	push   ecx
c002bf1d:	52                   	push   edx
c002bf1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf24:	e8 3d ed ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002bf29:	b9 00 01 00 00       	mov    ecx,0x100
c002bf2e:	89 c2                	mov    edx,eax
c002bf30:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bf34:	fc                   	cld    
c002bf35:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bf38:	83 c4 10             	add    esp,0x10
c002bf3b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bf43:	4e                   	dec    esi
c002bf44:	e9 45 ff ff ff       	jmp    c002be8e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002bf49:	31 ff                	xor    edi,edi
c002bf4b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bf50:	74 1a                	je     c002bf6c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bf52:	50                   	push   eax
c002bf53:	50                   	push   eax
c002bf54:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002bf59:	83 f8 02             	cmp    eax,0x2
c002bf5c:	0f 94 c0             	sete   al
c002bf5f:	0f b6 c0             	movzx  eax,al
c002bf62:	50                   	push   eax
c002bf63:	53                   	push   ebx
c002bf64:	e8 dd fb ff ff       	call   c002bb46 <ATA::flush(bool)>
c002bf69:	83 c4 10             	add    esp,0x10
c002bf6c:	83 c4 2c             	add    esp,0x2c
c002bf6f:	89 f8                	mov    eax,edi
c002bf71:	5b                   	pop    ebx
c002bf72:	5e                   	pop    esi
c002bf73:	5f                   	pop    edi
c002bf74:	5d                   	pop    ebp
c002bf75:	c3                   	ret    

c002bf76 <ATA::detectCHS()>:
c002bf76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bf7a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bf80:	c1 e0 06             	shl    eax,0x6
c002bf83:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bf89:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bf93:	c7 44 24 04 10 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033810
c002bf9b:	e9 c2 42 ff ff       	jmp    c0020262 <KePanic(char const*)>

c002bfa0 <ATA::open(int, int, void*)>:
c002bfa0:	53                   	push   ebx
c002bfa1:	83 ec 08             	sub    esp,0x8
c002bfa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bfa8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bfac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bfb0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bfb6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bfbc:	c1 e0 06             	shl    eax,0x6
c002bfbf:	01 d0                	add    eax,edx
c002bfc1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bfc8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bfce:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bfd5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bfdf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bfe5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bfec:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bff3:	75 0c                	jne    c002c001 <ATA::open(int, int, void*)+0x61>
c002bff5:	83 ec 0c             	sub    esp,0xc
c002bff8:	53                   	push   ebx
c002bff9:	e8 78 ff ff ff       	call   c002bf76 <ATA::detectCHS()>
c002bffe:	83 c4 10             	add    esp,0x10
c002c001:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c007:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c00d:	c1 e0 06             	shl    eax,0x6
c002c010:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c017:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c021:	d1 e8                	shr    eax,1
c002c023:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c029:	6a 04                	push   0x4
c002c02b:	6a 0c                	push   0xc
c002c02d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c034:	50                   	push   eax
c002c035:	52                   	push   edx
c002c036:	e8 3d ec ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c03b:	90                   	nop
c002c03c:	90                   	nop
c002c03d:	6a 00                	push   0x0
c002c03f:	6a 0c                	push   0xc
c002c041:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c048:	50                   	push   eax
c002c049:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c04f:	e8 24 ec ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c054:	83 c4 14             	add    esp,0x14
c002c057:	53                   	push   ebx
c002c058:	e8 b9 f6 fe ff       	call   c001b716 <PhysicalDisk::startCache()>
c002c05d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c060:	e8 ed 08 ff ff       	call   c001c952 <createPartitionsForDisk(PhysicalDisk*)>
c002c065:	31 c0                	xor    eax,eax
c002c067:	83 c4 18             	add    esp,0x18
c002c06a:	5b                   	pop    ebx
c002c06b:	c3                   	ret    

c002c06c <combineCharAndColour(char, unsigned char)>:
c002c06c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c071:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c077:	c1 e0 08             	shl    eax,0x8
c002c07a:	09 d0                	or     eax,edx
c002c07c:	c3                   	ret    

c002c07d <combineColours(unsigned char, unsigned char)>:
c002c07d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c082:	c1 e0 04             	shl    eax,0x4
c002c085:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c089:	c3                   	ret    

c002c08a <ATA::read(unsigned long long, int, void*)>:
c002c08a:	55                   	push   ebp
c002c08b:	57                   	push   edi
c002c08c:	56                   	push   esi
c002c08d:	be 04 00 00 00       	mov    esi,0x4
c002c092:	53                   	push   ebx
c002c093:	83 ec 0c             	sub    esp,0xc
c002c096:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c09a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c09e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c0a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c0a5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c0a9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c0af:	0f 87 a1 01 00 00    	ja     c002c256 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0b5:	be 06 00 00 00       	mov    esi,0x6
c002c0ba:	85 c9                	test   ecx,ecx
c002c0bc:	0f 84 94 01 00 00    	je     c002c256 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0c2:	55                   	push   ebp
c002c0c3:	55                   	push   ebp
c002c0c4:	6a 00                	push   0x0
c002c0c6:	51                   	push   ecx
c002c0c7:	53                   	push   ebx
c002c0c8:	52                   	push   edx
c002c0c9:	50                   	push   eax
c002c0ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c0ce:	e8 0d fb ff ff       	call   c002bbe0 <ATA::access(unsigned long long, int, void*, bool)>
c002c0d3:	83 c4 20             	add    esp,0x20
c002c0d6:	89 c6                	mov    esi,eax
c002c0d8:	85 c0                	test   eax,eax
c002c0da:	0f 85 71 01 00 00    	jne    c002c251 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c0e0:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c0e6:	89 da                	mov    edx,ebx
c002c0e8:	50                   	push   eax
c002c0e9:	bd 10 27 00 00       	mov    ebp,0x2710
c002c0ee:	50                   	push   eax
c002c0ef:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c0f5:	6a 0f                	push   0xf
c002c0f7:	6a 00                	push   0x0
c002c0f9:	e8 7f ff ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002c0fe:	59                   	pop    ecx
c002c0ff:	b9 0a 00 00 00       	mov    ecx,0xa
c002c104:	5b                   	pop    ebx
c002c105:	0f b6 d8             	movzx  ebx,al
c002c108:	89 d0                	mov    eax,edx
c002c10a:	53                   	push   ebx
c002c10b:	99                   	cdq    
c002c10c:	f7 fd                	idiv   ebp
c002c10e:	99                   	cdq    
c002c10f:	f7 f9                	idiv   ecx
c002c111:	83 c2 30             	add    edx,0x30
c002c114:	0f b6 d2             	movzx  edx,dl
c002c117:	52                   	push   edx
c002c118:	e8 4f ff ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c11d:	5f                   	pop    edi
c002c11e:	bf e8 03 00 00       	mov    edi,0x3e8
c002c123:	5a                   	pop    edx
c002c124:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c12a:	53                   	push   ebx
c002c12b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c130:	99                   	cdq    
c002c131:	f7 ff                	idiv   edi
c002c133:	99                   	cdq    
c002c134:	f7 f9                	idiv   ecx
c002c136:	8d 42 30             	lea    eax,[edx+0x30]
c002c139:	0f b6 c0             	movzx  eax,al
c002c13c:	50                   	push   eax
c002c13d:	e8 2a ff ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c142:	5f                   	pop    edi
c002c143:	bf 64 00 00 00       	mov    edi,0x64
c002c148:	5a                   	pop    edx
c002c149:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c14f:	53                   	push   ebx
c002c150:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c155:	99                   	cdq    
c002c156:	f7 ff                	idiv   edi
c002c158:	99                   	cdq    
c002c159:	f7 f9                	idiv   ecx
c002c15b:	8d 42 30             	lea    eax,[edx+0x30]
c002c15e:	0f b6 c0             	movzx  eax,al
c002c161:	50                   	push   eax
c002c162:	e8 05 ff ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c167:	5a                   	pop    edx
c002c168:	5a                   	pop    edx
c002c169:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c16f:	53                   	push   ebx
c002c170:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c175:	99                   	cdq    
c002c176:	f7 f9                	idiv   ecx
c002c178:	99                   	cdq    
c002c179:	f7 f9                	idiv   ecx
c002c17b:	8d 42 30             	lea    eax,[edx+0x30]
c002c17e:	0f b6 c0             	movzx  eax,al
c002c181:	50                   	push   eax
c002c182:	e8 e5 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c187:	5a                   	pop    edx
c002c188:	5a                   	pop    edx
c002c189:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c18f:	53                   	push   ebx
c002c190:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c195:	99                   	cdq    
c002c196:	f7 f9                	idiv   ecx
c002c198:	83 c2 30             	add    edx,0x30
c002c19b:	0f b6 d2             	movzx  edx,dl
c002c19e:	52                   	push   edx
c002c19f:	e8 c8 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c1a4:	5a                   	pop    edx
c002c1a5:	5a                   	pop    edx
c002c1a6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c1ac:	53                   	push   ebx
c002c1ad:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1b2:	99                   	cdq    
c002c1b3:	f7 fd                	idiv   ebp
c002c1b5:	99                   	cdq    
c002c1b6:	f7 f9                	idiv   ecx
c002c1b8:	8d 42 30             	lea    eax,[edx+0x30]
c002c1bb:	0f b6 c0             	movzx  eax,al
c002c1be:	50                   	push   eax
c002c1bf:	e8 a8 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c1c4:	5d                   	pop    ebp
c002c1c5:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c1ca:	5a                   	pop    edx
c002c1cb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c1d1:	53                   	push   ebx
c002c1d2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1d7:	99                   	cdq    
c002c1d8:	f7 fd                	idiv   ebp
c002c1da:	99                   	cdq    
c002c1db:	f7 f9                	idiv   ecx
c002c1dd:	8d 42 30             	lea    eax,[edx+0x30]
c002c1e0:	0f b6 c0             	movzx  eax,al
c002c1e3:	50                   	push   eax
c002c1e4:	e8 83 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c1e9:	5d                   	pop    ebp
c002c1ea:	5a                   	pop    edx
c002c1eb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c1f1:	53                   	push   ebx
c002c1f2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1f7:	99                   	cdq    
c002c1f8:	f7 ff                	idiv   edi
c002c1fa:	99                   	cdq    
c002c1fb:	f7 f9                	idiv   ecx
c002c1fd:	8d 42 30             	lea    eax,[edx+0x30]
c002c200:	0f b6 c0             	movzx  eax,al
c002c203:	50                   	push   eax
c002c204:	e8 63 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c209:	5f                   	pop    edi
c002c20a:	5d                   	pop    ebp
c002c20b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c211:	53                   	push   ebx
c002c212:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c217:	99                   	cdq    
c002c218:	f7 f9                	idiv   ecx
c002c21a:	99                   	cdq    
c002c21b:	f7 f9                	idiv   ecx
c002c21d:	8d 42 30             	lea    eax,[edx+0x30]
c002c220:	0f b6 c0             	movzx  eax,al
c002c223:	50                   	push   eax
c002c224:	e8 43 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c229:	5a                   	pop    edx
c002c22a:	5f                   	pop    edi
c002c22b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c231:	53                   	push   ebx
c002c232:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c237:	99                   	cdq    
c002c238:	f7 f9                	idiv   ecx
c002c23a:	83 c2 30             	add    edx,0x30
c002c23d:	0f b6 d2             	movzx  edx,dl
c002c240:	52                   	push   edx
c002c241:	e8 26 fe ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c246:	83 c4 10             	add    esp,0x10
c002c249:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c24f:	eb 05                	jmp    c002c256 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c251:	be 01 00 00 00       	mov    esi,0x1
c002c256:	83 c4 0c             	add    esp,0xc
c002c259:	89 f0                	mov    eax,esi
c002c25b:	5b                   	pop    ebx
c002c25c:	5e                   	pop    esi
c002c25d:	5f                   	pop    edi
c002c25e:	5d                   	pop    ebp
c002c25f:	c3                   	ret    

c002c260 <ATA::write(unsigned long long, int, void*)>:
c002c260:	55                   	push   ebp
c002c261:	57                   	push   edi
c002c262:	56                   	push   esi
c002c263:	be 04 00 00 00       	mov    esi,0x4
c002c268:	53                   	push   ebx
c002c269:	83 ec 0c             	sub    esp,0xc
c002c26c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c270:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c274:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c277:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c27b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c27f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c285:	0f 87 9c 01 00 00    	ja     c002c427 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c28b:	be 06 00 00 00       	mov    esi,0x6
c002c290:	85 c9                	test   ecx,ecx
c002c292:	0f 84 8f 01 00 00    	je     c002c427 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c298:	55                   	push   ebp
c002c299:	55                   	push   ebp
c002c29a:	6a 01                	push   0x1
c002c29c:	51                   	push   ecx
c002c29d:	53                   	push   ebx
c002c29e:	52                   	push   edx
c002c29f:	50                   	push   eax
c002c2a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c2a4:	e8 37 f9 ff ff       	call   c002bbe0 <ATA::access(unsigned long long, int, void*, bool)>
c002c2a9:	83 c4 20             	add    esp,0x20
c002c2ac:	89 c6                	mov    esi,eax
c002c2ae:	85 c0                	test   eax,eax
c002c2b0:	0f 85 6c 01 00 00    	jne    c002c422 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c2b6:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c2bc:	bd 10 27 00 00       	mov    ebp,0x2710
c002c2c1:	50                   	push   eax
c002c2c2:	50                   	push   eax
c002c2c3:	6a 0f                	push   0xf
c002c2c5:	6a 00                	push   0x0
c002c2c7:	e8 b1 fd ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002c2cc:	5a                   	pop    edx
c002c2cd:	0f b6 d8             	movzx  ebx,al
c002c2d0:	59                   	pop    ecx
c002c2d1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2d6:	53                   	push   ebx
c002c2d7:	b9 0a 00 00 00       	mov    ecx,0xa
c002c2dc:	99                   	cdq    
c002c2dd:	f7 fd                	idiv   ebp
c002c2df:	99                   	cdq    
c002c2e0:	f7 f9                	idiv   ecx
c002c2e2:	8d 42 30             	lea    eax,[edx+0x30]
c002c2e5:	0f b6 c0             	movzx  eax,al
c002c2e8:	50                   	push   eax
c002c2e9:	e8 7e fd ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c2ee:	5f                   	pop    edi
c002c2ef:	bf e8 03 00 00       	mov    edi,0x3e8
c002c2f4:	5a                   	pop    edx
c002c2f5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c2fb:	53                   	push   ebx
c002c2fc:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c301:	99                   	cdq    
c002c302:	f7 ff                	idiv   edi
c002c304:	99                   	cdq    
c002c305:	f7 f9                	idiv   ecx
c002c307:	8d 42 30             	lea    eax,[edx+0x30]
c002c30a:	0f b6 c0             	movzx  eax,al
c002c30d:	50                   	push   eax
c002c30e:	e8 59 fd ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c313:	5f                   	pop    edi
c002c314:	bf 64 00 00 00       	mov    edi,0x64
c002c319:	5a                   	pop    edx
c002c31a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c320:	53                   	push   ebx
c002c321:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c326:	99                   	cdq    
c002c327:	f7 ff                	idiv   edi
c002c329:	99                   	cdq    
c002c32a:	f7 f9                	idiv   ecx
c002c32c:	8d 42 30             	lea    eax,[edx+0x30]
c002c32f:	0f b6 c0             	movzx  eax,al
c002c332:	50                   	push   eax
c002c333:	e8 34 fd ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c338:	5a                   	pop    edx
c002c339:	5a                   	pop    edx
c002c33a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c340:	53                   	push   ebx
c002c341:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c346:	99                   	cdq    
c002c347:	f7 f9                	idiv   ecx
c002c349:	99                   	cdq    
c002c34a:	f7 f9                	idiv   ecx
c002c34c:	8d 42 30             	lea    eax,[edx+0x30]
c002c34f:	0f b6 c0             	movzx  eax,al
c002c352:	50                   	push   eax
c002c353:	e8 14 fd ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c358:	5a                   	pop    edx
c002c359:	5a                   	pop    edx
c002c35a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c360:	53                   	push   ebx
c002c361:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c366:	99                   	cdq    
c002c367:	f7 f9                	idiv   ecx
c002c369:	8d 42 30             	lea    eax,[edx+0x30]
c002c36c:	0f b6 c0             	movzx  eax,al
c002c36f:	50                   	push   eax
c002c370:	e8 f7 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c375:	5a                   	pop    edx
c002c376:	5a                   	pop    edx
c002c377:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c37d:	53                   	push   ebx
c002c37e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c383:	99                   	cdq    
c002c384:	f7 fd                	idiv   ebp
c002c386:	99                   	cdq    
c002c387:	f7 f9                	idiv   ecx
c002c389:	8d 42 30             	lea    eax,[edx+0x30]
c002c38c:	0f b6 c0             	movzx  eax,al
c002c38f:	50                   	push   eax
c002c390:	e8 d7 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c395:	5d                   	pop    ebp
c002c396:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c39b:	5a                   	pop    edx
c002c39c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c3a2:	53                   	push   ebx
c002c3a3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3a8:	99                   	cdq    
c002c3a9:	f7 fd                	idiv   ebp
c002c3ab:	99                   	cdq    
c002c3ac:	f7 f9                	idiv   ecx
c002c3ae:	8d 42 30             	lea    eax,[edx+0x30]
c002c3b1:	0f b6 c0             	movzx  eax,al
c002c3b4:	50                   	push   eax
c002c3b5:	e8 b2 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c3ba:	5d                   	pop    ebp
c002c3bb:	5a                   	pop    edx
c002c3bc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c3c2:	53                   	push   ebx
c002c3c3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3c8:	99                   	cdq    
c002c3c9:	f7 ff                	idiv   edi
c002c3cb:	99                   	cdq    
c002c3cc:	f7 f9                	idiv   ecx
c002c3ce:	8d 42 30             	lea    eax,[edx+0x30]
c002c3d1:	0f b6 c0             	movzx  eax,al
c002c3d4:	50                   	push   eax
c002c3d5:	e8 92 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c3da:	5f                   	pop    edi
c002c3db:	5d                   	pop    ebp
c002c3dc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c3e2:	53                   	push   ebx
c002c3e3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3e8:	99                   	cdq    
c002c3e9:	f7 f9                	idiv   ecx
c002c3eb:	99                   	cdq    
c002c3ec:	f7 f9                	idiv   ecx
c002c3ee:	8d 42 30             	lea    eax,[edx+0x30]
c002c3f1:	0f b6 c0             	movzx  eax,al
c002c3f4:	50                   	push   eax
c002c3f5:	e8 72 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c3fa:	5a                   	pop    edx
c002c3fb:	5f                   	pop    edi
c002c3fc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c402:	53                   	push   ebx
c002c403:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c408:	99                   	cdq    
c002c409:	f7 f9                	idiv   ecx
c002c40b:	83 c2 30             	add    edx,0x30
c002c40e:	0f b6 d2             	movzx  edx,dl
c002c411:	52                   	push   edx
c002c412:	e8 55 fc ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002c417:	83 c4 10             	add    esp,0x10
c002c41a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c420:	eb 05                	jmp    c002c427 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c422:	be 01 00 00 00       	mov    esi,0x1
c002c427:	83 c4 0c             	add    esp,0xc
c002c42a:	89 f0                	mov    eax,esi
c002c42c:	5b                   	pop    ebx
c002c42d:	5e                   	pop    esi
c002c42e:	5f                   	pop    edi
c002c42f:	5d                   	pop    ebp
c002c430:	c3                   	ret    
c002c431:	90                   	nop

c002c432 <ATAPI::write(unsigned long long, int, void*)>:
c002c432:	b8 03 00 00 00       	mov    eax,0x3
c002c437:	c3                   	ret    

c002c438 <ATAPI::close(int, int, void*)>:
c002c438:	83 ec 0c             	sub    esp,0xc
c002c43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c43f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c445:	85 c0                	test   eax,eax
c002c447:	74 0c                	je     c002c455 <ATAPI::close(int, int, void*)+0x1d>
c002c449:	83 ec 0c             	sub    esp,0xc
c002c44c:	8b 10                	mov    edx,DWORD PTR [eax]
c002c44e:	50                   	push   eax
c002c44f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c452:	83 c4 10             	add    esp,0x10
c002c455:	31 c0                	xor    eax,eax
c002c457:	83 c4 0c             	add    esp,0xc
c002c45a:	c3                   	ret    
c002c45b:	90                   	nop

c002c45c <ATAPI::ATAPI()>:
c002c45c:	83 ec 0c             	sub    esp,0xc
c002c45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c463:	83 ec 04             	sub    esp,0x4
c002c466:	68 00 08 00 00       	push   0x800
c002c46b:	68 65 39 03 c0       	push   0xc0033965
c002c470:	50                   	push   eax
c002c471:	e8 38 f2 fe ff       	call   c001b6ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c476:	83 c4 10             	add    esp,0x10
c002c479:	ba 74 38 03 c0       	mov    edx,0xc0033874
c002c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c482:	89 10                	mov    DWORD PTR [eax],edx
c002c484:	90                   	nop
c002c485:	83 c4 0c             	add    esp,0xc
c002c488:	c3                   	ret    
c002c489:	90                   	nop

c002c48a <ATAPI::readyForCommand()>:
c002c48a:	56                   	push   esi
c002c48b:	53                   	push   ebx
c002c48c:	53                   	push   ebx
c002c48d:	31 db                	xor    ebx,ebx
c002c48f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c493:	51                   	push   ecx
c002c494:	6a 0c                	push   0xc
c002c496:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c49d:	50                   	push   eax
c002c49e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c4a4:	e8 8f e8 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002c4a9:	83 c4 10             	add    esp,0x10
c002c4ac:	a8 88                	test   al,0x88
c002c4ae:	74 25                	je     c002c4d5 <ATAPI::readyForCommand()+0x4b>
c002c4b0:	43                   	inc    ebx
c002c4b1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c4b7:	7e da                	jle    c002c493 <ATAPI::readyForCommand()+0x9>
c002c4b9:	83 ec 0c             	sub    esp,0xc
c002c4bc:	68 5e 01 00 00       	push   0x15e
c002c4c1:	e8 6a 8f ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002c4c6:	83 c4 10             	add    esp,0x10
c002c4c9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c4cf:	75 c2                	jne    c002c493 <ATAPI::readyForCommand()+0x9>
c002c4d1:	31 c0                	xor    eax,eax
c002c4d3:	eb 02                	jmp    c002c4d7 <ATAPI::readyForCommand()+0x4d>
c002c4d5:	b0 01                	mov    al,0x1
c002c4d7:	5a                   	pop    edx
c002c4d8:	5b                   	pop    ebx
c002c4d9:	5e                   	pop    esi
c002c4da:	c3                   	ret    
c002c4db:	90                   	nop

c002c4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c4dc:	55                   	push   ebp
c002c4dd:	57                   	push   edi
c002c4de:	56                   	push   esi
c002c4df:	53                   	push   ebx
c002c4e0:	83 ec 20             	sub    esp,0x20
c002c4e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c4e7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c4eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c4ef:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c4f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c4f7:	6a 01                	push   0x1
c002c4f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c500:	50                   	push   eax
c002c501:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c507:	e8 74 e9 ff ff       	call   c002ae80 <IDE::enableIRQs(unsigned char, bool)>
c002c50c:	5e                   	pop    esi
c002c50d:	58                   	pop    eax
c002c50e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c515:	50                   	push   eax
c002c516:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c51c:	e8 31 e7 ff ff       	call   c002ac52 <IDE::prepareInterrupt(unsigned char)>
c002c521:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c524:	e8 61 ff ff ff       	call   c002c48a <ATAPI::readyForCommand()>
c002c529:	83 c4 10             	add    esp,0x10
c002c52c:	84 c0                	test   al,al
c002c52e:	75 0a                	jne    c002c53a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c530:	bb 01 00 00 00       	mov    ebx,0x1
c002c535:	e9 60 02 00 00       	jmp    c002c79a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c53a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c540:	c1 e0 04             	shl    eax,0x4
c002c543:	0f b6 c0             	movzx  eax,al
c002c546:	50                   	push   eax
c002c547:	6a 06                	push   0x6
c002c549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c550:	50                   	push   eax
c002c551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c557:	e8 1c e7 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c55c:	6a 00                	push   0x0
c002c55e:	6a 01                	push   0x1
c002c560:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c567:	50                   	push   eax
c002c568:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c56e:	e8 05 e7 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c573:	83 c4 20             	add    esp,0x20
c002c576:	0f b6 c3             	movzx  eax,bl
c002c579:	0f b6 df             	movzx  ebx,bh
c002c57c:	50                   	push   eax
c002c57d:	6a 04                	push   0x4
c002c57f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c586:	50                   	push   eax
c002c587:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c58d:	e8 e6 e6 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c592:	53                   	push   ebx
c002c593:	6a 05                	push   0x5
c002c595:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c59c:	50                   	push   eax
c002c59d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a3:	e8 d0 e6 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5a8:	83 c4 20             	add    esp,0x20
c002c5ab:	68 a0 00 00 00       	push   0xa0
c002c5b0:	6a 07                	push   0x7
c002c5b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5b9:	50                   	push   eax
c002c5ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5c0:	e8 b3 e6 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5c5:	83 c4 0c             	add    esp,0xc
c002c5c8:	6a 01                	push   0x1
c002c5ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5d1:	50                   	push   eax
c002c5d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5d8:	e8 83 f1 ff ff       	call   c002b760 <IDE::polling(unsigned char, unsigned int)>
c002c5dd:	83 c4 10             	add    esp,0x10
c002c5e0:	0f b6 d8             	movzx  ebx,al
c002c5e3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c5e9:	85 db                	test   ebx,ebx
c002c5eb:	74 20                	je     c002c60d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c5ed:	53                   	push   ebx
c002c5ee:	0f b6 c0             	movzx  eax,al
c002c5f1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c5f8:	52                   	push   edx
c002c5f9:	50                   	push   eax
c002c5fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c600:	e8 a1 f0 ff ff       	call   c002b6a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c605:	83 c4 10             	add    esp,0x10
c002c608:	e9 8d 01 00 00       	jmp    c002c79a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c60d:	0f b6 c0             	movzx  eax,al
c002c610:	53                   	push   ebx
c002c611:	53                   	push   ebx
c002c612:	50                   	push   eax
c002c613:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c619:	e8 48 e6 ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002c61e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c622:	b9 06 00 00 00       	mov    ecx,0x6
c002c627:	89 c2                	mov    edx,eax
c002c629:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c62c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c630:	83 c4 10             	add    esp,0x10
c002c633:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c638:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c63c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c642:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c649:	85 db                	test   ebx,ebx
c002c64b:	0f 84 ec 00 00 00    	je     c002c73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c651:	51                   	push   ecx
c002c652:	51                   	push   ecx
c002c653:	52                   	push   edx
c002c654:	50                   	push   eax
c002c655:	e8 8c e7 ff ff       	call   c002ade6 <IDE::waitInterrupt(unsigned char)>
c002c65a:	83 c4 10             	add    esp,0x10
c002c65d:	84 c0                	test   al,al
c002c65f:	0f 84 cb fe ff ff    	je     c002c530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c665:	56                   	push   esi
c002c666:	56                   	push   esi
c002c667:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c66e:	50                   	push   eax
c002c66f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c675:	e8 d8 e5 ff ff       	call   c002ac52 <IDE::prepareInterrupt(unsigned char)>
c002c67a:	83 c4 0c             	add    esp,0xc
c002c67d:	6a 04                	push   0x4
c002c67f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c686:	50                   	push   eax
c002c687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c68d:	e8 a6 e6 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002c692:	83 c4 0c             	add    esp,0xc
c002c695:	89 c6                	mov    esi,eax
c002c697:	6a 05                	push   0x5
c002c699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6a0:	50                   	push   eax
c002c6a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6a7:	e8 8c e6 ff ff       	call   c002ad38 <IDE::read(unsigned char, unsigned char)>
c002c6ac:	89 f1                	mov    ecx,esi
c002c6ae:	0f b6 c0             	movzx  eax,al
c002c6b1:	0f b6 f1             	movzx  esi,cl
c002c6b4:	c1 e0 08             	shl    eax,0x8
c002c6b7:	09 c6                	or     esi,eax
c002c6b9:	d1 fe                	sar    esi,1
c002c6bb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c6bf:	83 c4 10             	add    esp,0x10
c002c6c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c6c7:	74 41                	je     c002c70a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c6c9:	31 c9                	xor    ecx,ecx
c002c6cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c6d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c6d8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c6dc:	75 0a                	jne    c002c6e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c6de:	01 c9                	add    ecx,ecx
c002c6e0:	01 cd                	add    ebp,ecx
c002c6e2:	4b                   	dec    ebx
c002c6e3:	e9 54 ff ff ff       	jmp    c002c63c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c6e8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c6ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c6f1:	51                   	push   ecx
c002c6f2:	51                   	push   ecx
c002c6f3:	52                   	push   edx
c002c6f4:	50                   	push   eax
c002c6f5:	e8 6c e5 ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002c6fa:	89 c2                	mov    edx,eax
c002c6fc:	89 f0                	mov    eax,esi
c002c6fe:	66 ef                	out    dx,ax
c002c700:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c704:	83 c4 10             	add    esp,0x10
c002c707:	41                   	inc    ecx
c002c708:	eb c1                	jmp    c002c6cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c70a:	31 f6                	xor    esi,esi
c002c70c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c712:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c719:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c71d:	75 06                	jne    c002c725 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c71f:	01 f6                	add    esi,esi
c002c721:	01 f5                	add    ebp,esi
c002c723:	eb bd                	jmp    c002c6e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c725:	51                   	push   ecx
c002c726:	51                   	push   ecx
c002c727:	52                   	push   edx
c002c728:	50                   	push   eax
c002c729:	e8 38 e5 ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002c72e:	89 c2                	mov    edx,eax
c002c730:	66 ed                	in     ax,dx
c002c732:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c737:	83 c4 10             	add    esp,0x10
c002c73a:	46                   	inc    esi
c002c73b:	eb cf                	jmp    c002c70c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c73d:	51                   	push   ecx
c002c73e:	51                   	push   ecx
c002c73f:	52                   	push   edx
c002c740:	50                   	push   eax
c002c741:	e8 a0 e6 ff ff       	call   c002ade6 <IDE::waitInterrupt(unsigned char)>
c002c746:	83 c4 10             	add    esp,0x10
c002c749:	84 c0                	test   al,al
c002c74b:	0f 84 df fd ff ff    	je     c002c530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c751:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c756:	52                   	push   edx
c002c757:	52                   	push   edx
c002c758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c75f:	50                   	push   eax
c002c760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c766:	e8 e7 e4 ff ff       	call   c002ac52 <IDE::prepareInterrupt(unsigned char)>
c002c76b:	83 c4 10             	add    esp,0x10
c002c76e:	50                   	push   eax
c002c76f:	50                   	push   eax
c002c770:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c777:	50                   	push   eax
c002c778:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c77e:	e8 e3 e4 ff ff       	call   c002ac66 <IDE::getBase(unsigned char)>
c002c783:	8d 50 07             	lea    edx,[eax+0x7]
c002c786:	ec                   	in     al,dx
c002c787:	83 c4 10             	add    esp,0x10
c002c78a:	a8 88                	test   al,0x88
c002c78c:	74 0a                	je     c002c798 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c78e:	4b                   	dec    ebx
c002c78f:	75 dd                	jne    c002c76e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c791:	bb 02 00 00 00       	mov    ebx,0x2
c002c796:	eb 02                	jmp    c002c79a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c798:	31 db                	xor    ebx,ebx
c002c79a:	83 c4 1c             	add    esp,0x1c
c002c79d:	89 d8                	mov    eax,ebx
c002c79f:	5b                   	pop    ebx
c002c7a0:	5e                   	pop    esi
c002c7a1:	5f                   	pop    edi
c002c7a2:	5d                   	pop    ebp
c002c7a3:	c3                   	ret    

c002c7a4 <ATAPI::diskRemoved()>:
c002c7a4:	53                   	push   ebx
c002c7a5:	83 ec 14             	sub    esp,0x14
c002c7a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c7ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c7b3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c7b9:	e8 84 fe fe ff       	call   c001c642 <LogicalDisk::unmount()>
c002c7be:	58                   	pop    eax
c002c7bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c7c5:	e8 56 08 ff ff       	call   c001d020 <VCache::writeWriteBuffer()>
c002c7ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c7d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c7d4:	83 c4 18             	add    esp,0x18
c002c7d7:	5b                   	pop    ebx
c002c7d8:	e9 33 08 ff ff       	jmp    c001d010 <VCache::invalidateReadBuffer()>
c002c7dd:	90                   	nop

c002c7de <ATAPI::eject()>:
c002c7de:	57                   	push   edi
c002c7df:	b9 03 00 00 00       	mov    ecx,0x3
c002c7e4:	53                   	push   ebx
c002c7e5:	83 ec 14             	sub    esp,0x14
c002c7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c7ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c7f0:	fc                   	cld    
c002c7f1:	31 c0                	xor    eax,eax
c002c7f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c7f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c7fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c7ff:	50                   	push   eax
c002c800:	50                   	push   eax
c002c801:	6a 00                	push   0x0
c002c803:	6a 00                	push   0x0
c002c805:	6a 00                	push   0x0
c002c807:	6a 02                	push   0x2
c002c809:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c80d:	50                   	push   eax
c002c80e:	53                   	push   ebx
c002c80f:	e8 c8 fc ff ff       	call   c002c4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c814:	83 c4 14             	add    esp,0x14
c002c817:	53                   	push   ebx
c002c818:	e8 87 ff ff ff       	call   c002c7a4 <ATAPI::diskRemoved()>
c002c81d:	83 c4 24             	add    esp,0x24
c002c820:	31 c0                	xor    eax,eax
c002c822:	5b                   	pop    ebx
c002c823:	5f                   	pop    edi
c002c824:	c3                   	ret    
c002c825:	90                   	nop

c002c826 <ATAPI::diskInserted()>:
c002c826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c82a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c831:	c3                   	ret    

c002c832 <ATAPI::detectMedia()>:
c002c832:	56                   	push   esi
c002c833:	53                   	push   ebx
c002c834:	83 ec 28             	sub    esp,0x28
c002c837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c83b:	6a 0c                	push   0xc
c002c83d:	6a 00                	push   0x0
c002c83f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c843:	56                   	push   esi
c002c844:	e8 a7 3c fd ff       	call   c00004f0 <memset>
c002c849:	58                   	pop    eax
c002c84a:	5a                   	pop    edx
c002c84b:	6a 00                	push   0x0
c002c84d:	6a 00                	push   0x0
c002c84f:	6a 00                	push   0x0
c002c851:	6a 00                	push   0x0
c002c853:	56                   	push   esi
c002c854:	53                   	push   ebx
c002c855:	e8 82 fc ff ff       	call   c002c4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c85a:	83 c4 1c             	add    esp,0x1c
c002c85d:	6a 0c                	push   0xc
c002c85f:	6a 00                	push   0x0
c002c861:	56                   	push   esi
c002c862:	e8 89 3c fd ff       	call   c00004f0 <memset>
c002c867:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c86c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c871:	59                   	pop    ecx
c002c872:	58                   	pop    eax
c002c873:	6a 01                	push   0x1
c002c875:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c879:	50                   	push   eax
c002c87a:	6a 00                	push   0x0
c002c87c:	6a 12                	push   0x12
c002c87e:	56                   	push   esi
c002c87f:	53                   	push   ebx
c002c880:	e8 57 fc ff ff       	call   c002c4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c885:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c889:	83 c4 20             	add    esp,0x20
c002c88c:	83 e0 7f             	and    eax,0x7f
c002c88f:	83 f8 70             	cmp    eax,0x70
c002c892:	74 15                	je     c002c8a9 <ATAPI::detectMedia()+0x77>
c002c894:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c89b:	75 0c                	jne    c002c8a9 <ATAPI::detectMedia()+0x77>
c002c89d:	83 ec 0c             	sub    esp,0xc
c002c8a0:	53                   	push   ebx
c002c8a1:	e8 80 ff ff ff       	call   c002c826 <ATAPI::diskInserted()>
c002c8a6:	83 c4 10             	add    esp,0x10
c002c8a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c8ad:	83 e0 0f             	and    eax,0xf
c002c8b0:	83 f8 02             	cmp    eax,0x2
c002c8b3:	75 1b                	jne    c002c8d0 <ATAPI::detectMedia()+0x9e>
c002c8b5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c8ba:	75 2d                	jne    c002c8e9 <ATAPI::detectMedia()+0xb7>
c002c8bc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8c3:	74 24                	je     c002c8e9 <ATAPI::detectMedia()+0xb7>
c002c8c5:	83 ec 0c             	sub    esp,0xc
c002c8c8:	53                   	push   ebx
c002c8c9:	e8 d6 fe ff ff       	call   c002c7a4 <ATAPI::diskRemoved()>
c002c8ce:	eb 16                	jmp    c002c8e6 <ATAPI::detectMedia()+0xb4>
c002c8d0:	85 c0                	test   eax,eax
c002c8d2:	75 15                	jne    c002c8e9 <ATAPI::detectMedia()+0xb7>
c002c8d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8db:	75 0c                	jne    c002c8e9 <ATAPI::detectMedia()+0xb7>
c002c8dd:	83 ec 0c             	sub    esp,0xc
c002c8e0:	53                   	push   ebx
c002c8e1:	e8 40 ff ff ff       	call   c002c826 <ATAPI::diskInserted()>
c002c8e6:	83 c4 10             	add    esp,0x10
c002c8e9:	83 c4 24             	add    esp,0x24
c002c8ec:	5b                   	pop    ebx
c002c8ed:	5e                   	pop    esi
c002c8ee:	c3                   	ret    
c002c8ef:	90                   	nop

c002c8f0 <ATAPI::open(int, int, void*)>:
c002c8f0:	56                   	push   esi
c002c8f1:	53                   	push   ebx
c002c8f2:	50                   	push   eax
c002c8f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c8f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c8fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c8ff:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c905:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c90b:	c1 e0 06             	shl    eax,0x6
c002c90e:	01 d0                	add    eax,edx
c002c910:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c917:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c91d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c924:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c92e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c934:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c93b:	6a 04                	push   0x4
c002c93d:	6a 0c                	push   0xc
c002c93f:	51                   	push   ecx
c002c940:	52                   	push   edx
c002c941:	e8 32 e3 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c946:	90                   	nop
c002c947:	90                   	nop
c002c948:	6a 00                	push   0x0
c002c94a:	6a 0c                	push   0xc
c002c94c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c953:	50                   	push   eax
c002c954:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c95a:	e8 19 e3 ff ff       	call   c002ac78 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c95f:	83 c4 14             	add    esp,0x14
c002c962:	68 78 01 00 00       	push   0x178
c002c967:	e8 4e 9a fe ff       	call   c00163ba <malloc>
c002c96c:	83 c4 0c             	add    esp,0xc
c002c96f:	89 c6                	mov    esi,eax
c002c971:	6a 00                	push   0x0
c002c973:	68 ff ff ff 7f       	push   0x7fffffff
c002c978:	6a 00                	push   0x0
c002c97a:	6a 00                	push   0x0
c002c97c:	53                   	push   ebx
c002c97d:	68 17 3a 03 c0       	push   0xc0033a17
c002c982:	50                   	push   eax
c002c983:	e8 f8 fa fe ff       	call   c001c480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c988:	83 c4 14             	add    esp,0x14
c002c98b:	56                   	push   esi
c002c98c:	e8 af fb fe ff       	call   c001c540 <LogicalDisk::assignDriveLetter()>
c002c991:	5a                   	pop    edx
c002c992:	0f be c0             	movsx  eax,al
c002c995:	59                   	pop    ecx
c002c996:	50                   	push   eax
c002c997:	68 5c 38 03 c0       	push   0xc003385c
c002c99c:	e8 a8 c8 fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002c9a1:	58                   	pop    eax
c002c9a2:	5a                   	pop    edx
c002c9a3:	56                   	push   esi
c002c9a4:	53                   	push   ebx
c002c9a5:	e8 20 e9 fe ff       	call   c001b2ca <Device::addChild(Device*)>
c002c9aa:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c9b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9b3:	e8 5e ed fe ff       	call   c001b716 <PhysicalDisk::startCache()>
c002c9b8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c9bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9c2:	e8 6b fe ff ff       	call   c002c832 <ATAPI::detectMedia()>
c002c9c7:	83 c4 14             	add    esp,0x14
c002c9ca:	31 c0                	xor    eax,eax
c002c9cc:	5b                   	pop    ebx
c002c9cd:	5e                   	pop    esi
c002c9ce:	c3                   	ret    
c002c9cf:	90                   	nop

c002c9d0 <ATAPI::read(unsigned long long, int, void*)>:
c002c9d0:	55                   	push   ebp
c002c9d1:	57                   	push   edi
c002c9d2:	56                   	push   esi
c002c9d3:	53                   	push   ebx
c002c9d4:	83 ec 1c             	sub    esp,0x1c
c002c9d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c9db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c9df:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c9e3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c9ea:	74 3c                	je     c002ca28 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c9ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c9f0:	b9 03 00 00 00       	mov    ecx,0x3
c002c9f5:	fc                   	cld    
c002c9f6:	31 c0                	xor    eax,eax
c002c9f8:	0f ce                	bswap  esi
c002c9fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c9fc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002ca01:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002ca05:	89 e8                	mov    eax,ebp
c002ca07:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002ca0b:	50                   	push   eax
c002ca0c:	50                   	push   eax
c002ca0d:	55                   	push   ebp
c002ca0e:	c1 e5 0b             	shl    ebp,0xb
c002ca11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002ca15:	6a 00                	push   0x0
c002ca17:	55                   	push   ebp
c002ca18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ca1c:	50                   	push   eax
c002ca1d:	53                   	push   ebx
c002ca1e:	e8 b9 fa ff ff       	call   c002c4dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca23:	83 c4 20             	add    esp,0x20
c002ca26:	eb 1a                	jmp    c002ca42 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002ca28:	83 ec 0c             	sub    esp,0xc
c002ca2b:	53                   	push   ebx
c002ca2c:	e8 01 fe ff ff       	call   c002c832 <ATAPI::detectMedia()>
c002ca31:	83 c4 10             	add    esp,0x10
c002ca34:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ca3b:	75 af                	jne    c002c9ec <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002ca3d:	b8 02 00 00 00       	mov    eax,0x2
c002ca42:	83 c4 1c             	add    esp,0x1c
c002ca45:	5b                   	pop    ebx
c002ca46:	5e                   	pop    esi
c002ca47:	5f                   	pop    edi
c002ca48:	5d                   	pop    ebp
c002ca49:	c3                   	ret    

c002ca4a <SATA::close(int, int, void*)>:
c002ca4a:	83 ec 0c             	sub    esp,0xc
c002ca4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ca57:	85 c0                	test   eax,eax
c002ca59:	74 0c                	je     c002ca67 <SATA::close(int, int, void*)+0x1d>
c002ca5b:	83 ec 0c             	sub    esp,0xc
c002ca5e:	8b 10                	mov    edx,DWORD PTR [eax]
c002ca60:	50                   	push   eax
c002ca61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ca64:	83 c4 10             	add    esp,0x10
c002ca67:	31 c0                	xor    eax,eax
c002ca69:	83 c4 0c             	add    esp,0xc
c002ca6c:	c3                   	ret    
c002ca6d:	90                   	nop

c002ca6e <SATA::powerSaving(PowerSavingLevel)>:
c002ca6e:	c3                   	ret    
c002ca6f:	90                   	nop

c002ca70 <SATA::open(int, int, void*)>:
c002ca70:	56                   	push   esi
c002ca71:	53                   	push   ebx
c002ca72:	83 ec 10             	sub    esp,0x10
c002ca75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca79:	68 a4 38 03 c0       	push   0xc00338a4
c002ca7e:	e8 c6 c7 fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002ca83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002ca87:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002ca91:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ca97:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002caa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002caa5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002caaf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cab5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cabc:	e8 02 9c fe ff       	call   c00166c3 <Phys::allocatePage()>
c002cac1:	89 c6                	mov    esi,eax
c002cac3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cac9:	81 c6 00 10 00 00    	add    esi,0x1000
c002cacf:	e8 ef 9b fe ff       	call   c00166c3 <Phys::allocatePage()>
c002cad4:	83 c4 10             	add    esp,0x10
c002cad7:	39 c6                	cmp    esi,eax
c002cad9:	74 10                	je     c002caeb <SATA::open(int, int, void*)+0x7b>
c002cadb:	83 ec 0c             	sub    esp,0xc
c002cade:	68 b0 38 03 c0       	push   0xc00338b0
c002cae3:	e8 7a 37 ff ff       	call   c0020262 <KePanic(char const*)>
c002cae8:	83 c4 10             	add    esp,0x10
c002caeb:	83 ec 0c             	sub    esp,0xc
c002caee:	6a 02                	push   0x2
c002caf0:	e8 1c b4 fe ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c002caf5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cafb:	6a 03                	push   0x3
c002cafd:	50                   	push   eax
c002cafe:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cb04:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cb0a:	e8 15 bb fe ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cb0f:	83 c4 14             	add    esp,0x14
c002cb12:	53                   	push   ebx
c002cb13:	e8 fe eb fe ff       	call   c001b716 <PhysicalDisk::startCache()>
c002cb18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cb1b:	e8 32 fe fe ff       	call   c001c952 <createPartitionsForDisk(PhysicalDisk*)>
c002cb20:	83 c4 14             	add    esp,0x14
c002cb23:	31 c0                	xor    eax,eax
c002cb25:	5b                   	pop    ebx
c002cb26:	5e                   	pop    esi
c002cb27:	c3                   	ret    

c002cb28 <SATA::SATA()>:
c002cb28:	83 ec 0c             	sub    esp,0xc
c002cb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb2f:	83 ec 04             	sub    esp,0x4
c002cb32:	68 00 02 00 00       	push   0x200
c002cb37:	68 c4 38 03 c0       	push   0xc00338c4
c002cb3c:	50                   	push   eax
c002cb3d:	e8 6c eb fe ff       	call   c001b6ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cb42:	83 c4 10             	add    esp,0x10
c002cb45:	ba 34 39 03 c0       	mov    edx,0xc0033934
c002cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb4e:	89 10                	mov    DWORD PTR [eax],edx
c002cb50:	90                   	nop
c002cb51:	83 c4 0c             	add    esp,0xc
c002cb54:	c3                   	ret    
c002cb55:	90                   	nop

c002cb56 <SATA::access(unsigned long long, int, void*, bool)>:
c002cb56:	55                   	push   ebp
c002cb57:	57                   	push   edi
c002cb58:	56                   	push   esi
c002cb59:	53                   	push   ebx
c002cb5a:	83 ec 2c             	sub    esp,0x2c
c002cb5d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cb61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cb65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cb69:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cb6d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cb71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cb75:	fa                   	cli    
c002cb76:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cb7c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cb81:	7e 10                	jle    c002cb93 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002cb83:	83 ec 0c             	sub    esp,0xc
c002cb86:	68 d4 38 03 c0       	push   0xc00338d4
c002cb8b:	e8 d2 36 ff ff       	call   c0020262 <KePanic(char const*)>
c002cb90:	83 c4 10             	add    esp,0x10
c002cb93:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cb99:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cb9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cba5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cba9:	89 d0                	mov    eax,edx
c002cbab:	c1 e0 07             	shl    eax,0x7
c002cbae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cbb2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cbbc:	51                   	push   ecx
c002cbbd:	8d 42 02             	lea    eax,[edx+0x2]
c002cbc0:	51                   	push   ecx
c002cbc1:	c1 e0 07             	shl    eax,0x7
c002cbc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cbc8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cbcc:	50                   	push   eax
c002cbcd:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cbd3:	e8 68 ec ff ff       	call   c002b840 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cbd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cbdc:	83 c4 10             	add    esp,0x10
c002cbdf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cbe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002cbe8:	0f 84 aa 01 00 00    	je     c002cd98 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002cbee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cbf2:	c1 e0 09             	shl    eax,0x9
c002cbf5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cbfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cbfe:	74 0e                	je     c002cc0e <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cc00:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cc06:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cc0a:	89 c1                	mov    ecx,eax
c002cc0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cc0e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cc18:	8d 42 02             	lea    eax,[edx+0x2]
c002cc1b:	c1 e0 07             	shl    eax,0x7
c002cc1e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cc22:	8b 00                	mov    eax,DWORD PTR [eax]
c002cc24:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cc2a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cc30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cc34:	c1 e1 05             	shl    ecx,0x5
c002cc37:	01 c8                	add    eax,ecx
c002cc39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cc3d:	83 e1 01             	and    ecx,0x1
c002cc40:	89 ce                	mov    esi,ecx
c002cc42:	8a 08                	mov    cl,BYTE PTR [eax]
c002cc44:	c1 e6 06             	shl    esi,0x6
c002cc47:	83 e1 bf             	and    ecx,0xffffffbf
c002cc4a:	09 f1                	or     ecx,esi
c002cc4c:	88 08                	mov    BYTE PTR [eax],cl
c002cc4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cc50:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cc56:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cc5c:	89 08                	mov    DWORD PTR [eax],ecx
c002cc5e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc64:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cc6a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cc70:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cc73:	50                   	push   eax
c002cc74:	68 90 00 00 00       	push   0x90
c002cc79:	6a 00                	push   0x0
c002cc7b:	56                   	push   esi
c002cc7c:	e8 6f 38 fd ff       	call   c00004f0 <memset>
c002cc81:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cc87:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cc8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cc91:	83 c4 10             	add    esp,0x10
c002cc94:	48                   	dec    eax
c002cc95:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cc9a:	89 c1                	mov    ecx,eax
c002cc9c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cca2:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cca7:	09 c8                	or     eax,ecx
c002cca9:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002ccaf:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002ccb5:	83 c8 80             	or     eax,0xffffff80
c002ccb8:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002ccbe:	66 8b 06             	mov    ax,WORD PTR [esi]
c002ccc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ccc5:	25 00 7f 00 00       	and    eax,0x7f00
c002ccca:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cccf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ccd4:	66 89 06             	mov    WORD PTR [esi],ax
c002ccd7:	b0 35                	mov    al,0x35
c002ccd9:	75 02                	jne    c002ccdd <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002ccdb:	b0 25                	mov    al,0x25
c002ccdd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cce0:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cce4:	89 e8                	mov    eax,ebp
c002cce6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002ccea:	c1 e8 10             	shr    eax,0x10
c002cced:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002ccf0:	89 e8                	mov    eax,ebp
c002ccf2:	c1 e8 18             	shr    eax,0x18
c002ccf5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002ccf8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002ccfc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002ccff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cd03:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cd06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cd0a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cd0e:	89 d6                	mov    esi,edx
c002cd10:	31 c0                	xor    eax,eax
c002cd12:	c1 e6 07             	shl    esi,0x7
c002cd15:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cd19:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cd1f:	80 e1 88             	and    cl,0x88
c002cd22:	74 0a                	je     c002cd2e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cd24:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd29:	74 0a                	je     c002cd35 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cd2b:	40                   	inc    eax
c002cd2c:	eb eb                	jmp    c002cd19 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cd2e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd33:	75 0a                	jne    c002cd3f <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cd35:	83 ec 0c             	sub    esp,0xc
c002cd38:	68 0d 39 03 c0       	push   0xc003390d
c002cd3d:	eb 36                	jmp    c002cd75 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cd3f:	b8 01 00 00 00       	mov    eax,0x1
c002cd44:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cd48:	c1 e2 07             	shl    edx,0x7
c002cd4b:	d3 e0                	shl    eax,cl
c002cd4d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cd51:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cd57:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cd5d:	85 c8                	test   eax,ecx
c002cd5f:	74 2b                	je     c002cd8c <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cd61:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cd67:	0f ba e1 1e          	bt     ecx,0x1e
c002cd6b:	73 ea                	jae    c002cd57 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cd6d:	83 ec 0c             	sub    esp,0xc
c002cd70:	68 1b 39 03 c0       	push   0xc003391b
c002cd75:	e8 cf c4 fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002cd7a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd7f:	83 c4 10             	add    esp,0x10
c002cd82:	48                   	dec    eax
c002cd83:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd88:	85 c0                	test   eax,eax
c002cd8a:	eb 17                	jmp    c002cda3 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cd8c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cd92:	0f ba e0 1e          	bt     eax,0x1e
c002cd96:	73 15                	jae    c002cdad <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cd98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd9d:	48                   	dec    eax
c002cd9e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cda3:	75 01                	jne    c002cda6 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002cda5:	fb                   	sti    
c002cda6:	b8 01 00 00 00       	mov    eax,0x1
c002cdab:	eb 29                	jmp    c002cdd6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cdad:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cdb2:	75 10                	jne    c002cdc4 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002cdb4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cdba:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cdbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002cdc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cdc4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cdc9:	48                   	dec    eax
c002cdca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cdcf:	75 03                	jne    c002cdd4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cdd1:	fb                   	sti    
c002cdd2:	eb 02                	jmp    c002cdd6 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cdd4:	31 c0                	xor    eax,eax
c002cdd6:	83 c4 2c             	add    esp,0x2c
c002cdd9:	5b                   	pop    ebx
c002cdda:	5e                   	pop    esi
c002cddb:	5f                   	pop    edi
c002cddc:	5d                   	pop    ebp
c002cddd:	c3                   	ret    

c002cdde <SATA::read(unsigned long long, int, void*)>:
c002cdde:	55                   	push   ebp
c002cddf:	57                   	push   edi
c002cde0:	56                   	push   esi
c002cde1:	be 04 00 00 00       	mov    esi,0x4
c002cde6:	53                   	push   ebx
c002cde7:	83 ec 0c             	sub    esp,0xc
c002cdea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cdee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cdf2:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cdf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cdf9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cdfd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002ce03:	0f 87 1a 02 00 00    	ja     c002d023 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce09:	be 06 00 00 00       	mov    esi,0x6
c002ce0e:	85 c9                	test   ecx,ecx
c002ce10:	0f 84 0d 02 00 00    	je     c002d023 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce16:	56                   	push   esi
c002ce17:	56                   	push   esi
c002ce18:	6a 00                	push   0x0
c002ce1a:	51                   	push   ecx
c002ce1b:	53                   	push   ebx
c002ce1c:	52                   	push   edx
c002ce1d:	50                   	push   eax
c002ce1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002ce22:	e8 2f fd ff ff       	call   c002cb56 <SATA::access(unsigned long long, int, void*, bool)>
c002ce27:	83 c4 20             	add    esp,0x20
c002ce2a:	89 c6                	mov    esi,eax
c002ce2c:	85 c0                	test   eax,eax
c002ce2e:	0f 85 ea 01 00 00    	jne    c002d01e <SATA::read(unsigned long long, int, void*)+0x240>
c002ce34:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002ce3a:	bb 0a 00 00 00       	mov    ebx,0xa
c002ce3f:	50                   	push   eax
c002ce40:	50                   	push   eax
c002ce41:	6a 0f                	push   0xf
c002ce43:	6a 00                	push   0x0
c002ce45:	e8 33 f2 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002ce4a:	5a                   	pop    edx
c002ce4b:	0f b6 c0             	movzx  eax,al
c002ce4e:	59                   	pop    ecx
c002ce4f:	b9 10 27 00 00       	mov    ecx,0x2710
c002ce54:	50                   	push   eax
c002ce55:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce5a:	99                   	cdq    
c002ce5b:	f7 f9                	idiv   ecx
c002ce5d:	99                   	cdq    
c002ce5e:	f7 fb                	idiv   ebx
c002ce60:	8d 42 30             	lea    eax,[edx+0x30]
c002ce63:	0f b6 c0             	movzx  eax,al
c002ce66:	50                   	push   eax
c002ce67:	e8 00 f2 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002ce6c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ce72:	5f                   	pop    edi
c002ce73:	5d                   	pop    ebp
c002ce74:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ce79:	6a 0f                	push   0xf
c002ce7b:	6a 00                	push   0x0
c002ce7d:	e8 fb f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002ce82:	5a                   	pop    edx
c002ce83:	0f b6 c0             	movzx  eax,al
c002ce86:	59                   	pop    ecx
c002ce87:	50                   	push   eax
c002ce88:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce8d:	99                   	cdq    
c002ce8e:	f7 fd                	idiv   ebp
c002ce90:	99                   	cdq    
c002ce91:	f7 fb                	idiv   ebx
c002ce93:	8d 42 30             	lea    eax,[edx+0x30]
c002ce96:	0f b6 c0             	movzx  eax,al
c002ce99:	50                   	push   eax
c002ce9a:	e8 cd f1 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002ce9f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cea5:	5f                   	pop    edi
c002cea6:	bf 64 00 00 00       	mov    edi,0x64
c002ceab:	58                   	pop    eax
c002ceac:	6a 0f                	push   0xf
c002ceae:	6a 00                	push   0x0
c002ceb0:	e8 c8 f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002ceb5:	5a                   	pop    edx
c002ceb6:	0f b6 c0             	movzx  eax,al
c002ceb9:	59                   	pop    ecx
c002ceba:	50                   	push   eax
c002cebb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cec0:	99                   	cdq    
c002cec1:	f7 ff                	idiv   edi
c002cec3:	99                   	cdq    
c002cec4:	f7 fb                	idiv   ebx
c002cec6:	8d 42 30             	lea    eax,[edx+0x30]
c002cec9:	0f b6 c0             	movzx  eax,al
c002cecc:	50                   	push   eax
c002cecd:	e8 9a f1 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002ced2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002ced8:	58                   	pop    eax
c002ced9:	5a                   	pop    edx
c002ceda:	6a 0f                	push   0xf
c002cedc:	6a 00                	push   0x0
c002cede:	e8 9a f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cee3:	59                   	pop    ecx
c002cee4:	0f b6 c0             	movzx  eax,al
c002cee7:	5a                   	pop    edx
c002cee8:	50                   	push   eax
c002cee9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ceee:	99                   	cdq    
c002ceef:	f7 fb                	idiv   ebx
c002cef1:	99                   	cdq    
c002cef2:	f7 fb                	idiv   ebx
c002cef4:	8d 42 30             	lea    eax,[edx+0x30]
c002cef7:	0f b6 c0             	movzx  eax,al
c002cefa:	50                   	push   eax
c002cefb:	e8 6c f1 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cf00:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cf06:	59                   	pop    ecx
c002cf07:	58                   	pop    eax
c002cf08:	6a 0f                	push   0xf
c002cf0a:	6a 00                	push   0x0
c002cf0c:	e8 6c f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cf11:	5a                   	pop    edx
c002cf12:	0f b6 c0             	movzx  eax,al
c002cf15:	59                   	pop    ecx
c002cf16:	50                   	push   eax
c002cf17:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf1c:	99                   	cdq    
c002cf1d:	f7 fb                	idiv   ebx
c002cf1f:	8d 42 30             	lea    eax,[edx+0x30]
c002cf22:	0f b6 c0             	movzx  eax,al
c002cf25:	50                   	push   eax
c002cf26:	e8 41 f1 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cf2b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cf31:	58                   	pop    eax
c002cf32:	5a                   	pop    edx
c002cf33:	6a 0f                	push   0xf
c002cf35:	6a 00                	push   0x0
c002cf37:	e8 41 f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cf3c:	59                   	pop    ecx
c002cf3d:	0f b6 c0             	movzx  eax,al
c002cf40:	5a                   	pop    edx
c002cf41:	b9 10 27 00 00       	mov    ecx,0x2710
c002cf46:	50                   	push   eax
c002cf47:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf4c:	99                   	cdq    
c002cf4d:	f7 f9                	idiv   ecx
c002cf4f:	99                   	cdq    
c002cf50:	f7 fb                	idiv   ebx
c002cf52:	8d 42 30             	lea    eax,[edx+0x30]
c002cf55:	0f b6 c0             	movzx  eax,al
c002cf58:	50                   	push   eax
c002cf59:	e8 0e f1 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cf5e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cf64:	59                   	pop    ecx
c002cf65:	58                   	pop    eax
c002cf66:	6a 0f                	push   0xf
c002cf68:	6a 00                	push   0x0
c002cf6a:	e8 0e f1 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cf6f:	5a                   	pop    edx
c002cf70:	0f b6 c0             	movzx  eax,al
c002cf73:	59                   	pop    ecx
c002cf74:	50                   	push   eax
c002cf75:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf7a:	99                   	cdq    
c002cf7b:	f7 fd                	idiv   ebp
c002cf7d:	99                   	cdq    
c002cf7e:	f7 fb                	idiv   ebx
c002cf80:	8d 42 30             	lea    eax,[edx+0x30]
c002cf83:	0f b6 c0             	movzx  eax,al
c002cf86:	50                   	push   eax
c002cf87:	e8 e0 f0 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cf8c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cf92:	5d                   	pop    ebp
c002cf93:	58                   	pop    eax
c002cf94:	6a 0f                	push   0xf
c002cf96:	6a 00                	push   0x0
c002cf98:	e8 e0 f0 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cf9d:	5a                   	pop    edx
c002cf9e:	0f b6 c0             	movzx  eax,al
c002cfa1:	59                   	pop    ecx
c002cfa2:	50                   	push   eax
c002cfa3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfa8:	99                   	cdq    
c002cfa9:	f7 ff                	idiv   edi
c002cfab:	99                   	cdq    
c002cfac:	f7 fb                	idiv   ebx
c002cfae:	8d 42 30             	lea    eax,[edx+0x30]
c002cfb1:	0f b6 c0             	movzx  eax,al
c002cfb4:	50                   	push   eax
c002cfb5:	e8 b2 f0 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cfba:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cfc0:	5f                   	pop    edi
c002cfc1:	5d                   	pop    ebp
c002cfc2:	6a 0f                	push   0xf
c002cfc4:	6a 00                	push   0x0
c002cfc6:	e8 b2 f0 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cfcb:	5a                   	pop    edx
c002cfcc:	0f b6 c0             	movzx  eax,al
c002cfcf:	59                   	pop    ecx
c002cfd0:	50                   	push   eax
c002cfd1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfd6:	99                   	cdq    
c002cfd7:	f7 fb                	idiv   ebx
c002cfd9:	99                   	cdq    
c002cfda:	f7 fb                	idiv   ebx
c002cfdc:	8d 42 30             	lea    eax,[edx+0x30]
c002cfdf:	0f b6 c0             	movzx  eax,al
c002cfe2:	50                   	push   eax
c002cfe3:	e8 84 f0 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002cfe8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cfee:	5f                   	pop    edi
c002cfef:	5d                   	pop    ebp
c002cff0:	6a 0f                	push   0xf
c002cff2:	6a 00                	push   0x0
c002cff4:	e8 84 f0 ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002cff9:	5a                   	pop    edx
c002cffa:	0f b6 c0             	movzx  eax,al
c002cffd:	59                   	pop    ecx
c002cffe:	50                   	push   eax
c002cfff:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d004:	99                   	cdq    
c002d005:	f7 fb                	idiv   ebx
c002d007:	83 c2 30             	add    edx,0x30
c002d00a:	0f b6 d2             	movzx  edx,dl
c002d00d:	52                   	push   edx
c002d00e:	e8 59 f0 ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d013:	83 c4 10             	add    esp,0x10
c002d016:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d01c:	eb 05                	jmp    c002d023 <SATA::read(unsigned long long, int, void*)+0x245>
c002d01e:	be 01 00 00 00       	mov    esi,0x1
c002d023:	83 c4 0c             	add    esp,0xc
c002d026:	89 f0                	mov    eax,esi
c002d028:	5b                   	pop    ebx
c002d029:	5e                   	pop    esi
c002d02a:	5f                   	pop    edi
c002d02b:	5d                   	pop    ebp
c002d02c:	c3                   	ret    
c002d02d:	90                   	nop

c002d02e <SATA::write(unsigned long long, int, void*)>:
c002d02e:	55                   	push   ebp
c002d02f:	b8 04 00 00 00       	mov    eax,0x4
c002d034:	57                   	push   edi
c002d035:	56                   	push   esi
c002d036:	53                   	push   ebx
c002d037:	83 ec 1c             	sub    esp,0x1c
c002d03a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d03e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d042:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d045:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d049:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d04d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d053:	0f 87 32 02 00 00    	ja     c002d28b <SATA::write(unsigned long long, int, void*)+0x25d>
c002d059:	b8 06 00 00 00       	mov    eax,0x6
c002d05e:	85 ff                	test   edi,edi
c002d060:	0f 84 25 02 00 00    	je     c002d28b <SATA::write(unsigned long long, int, void*)+0x25d>
c002d066:	89 ee                	mov    esi,ebp
c002d068:	c1 e6 09             	shl    esi,0x9
c002d06b:	01 fe                	add    esi,edi
c002d06d:	89 c8                	mov    eax,ecx
c002d06f:	89 da                	mov    edx,ebx
c002d071:	83 c0 01             	add    eax,0x1
c002d074:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d078:	83 d2 00             	adc    edx,0x0
c002d07b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d07f:	50                   	push   eax
c002d080:	50                   	push   eax
c002d081:	6a 01                	push   0x1
c002d083:	57                   	push   edi
c002d084:	81 c7 00 02 00 00    	add    edi,0x200
c002d08a:	6a 01                	push   0x1
c002d08c:	53                   	push   ebx
c002d08d:	51                   	push   ecx
c002d08e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d092:	e8 bf fa ff ff       	call   c002cb56 <SATA::access(unsigned long long, int, void*, bool)>
c002d097:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d09b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d09f:	83 c4 20             	add    esp,0x20
c002d0a2:	39 f7                	cmp    edi,esi
c002d0a4:	75 c7                	jne    c002d06d <SATA::write(unsigned long long, int, void*)+0x3f>
c002d0a6:	bb 0a 00 00 00       	mov    ebx,0xa
c002d0ab:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d0b1:	bd 10 27 00 00       	mov    ebp,0x2710
c002d0b6:	50                   	push   eax
c002d0b7:	50                   	push   eax
c002d0b8:	6a 0f                	push   0xf
c002d0ba:	6a 00                	push   0x0
c002d0bc:	e8 bc ef ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d0c1:	5a                   	pop    edx
c002d0c2:	0f b6 c0             	movzx  eax,al
c002d0c5:	59                   	pop    ecx
c002d0c6:	50                   	push   eax
c002d0c7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0cc:	99                   	cdq    
c002d0cd:	f7 fd                	idiv   ebp
c002d0cf:	99                   	cdq    
c002d0d0:	f7 fb                	idiv   ebx
c002d0d2:	8d 42 30             	lea    eax,[edx+0x30]
c002d0d5:	0f b6 c0             	movzx  eax,al
c002d0d8:	50                   	push   eax
c002d0d9:	e8 8e ef ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d0de:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d0e4:	5e                   	pop    esi
c002d0e5:	5f                   	pop    edi
c002d0e6:	bf e8 03 00 00       	mov    edi,0x3e8
c002d0eb:	6a 0f                	push   0xf
c002d0ed:	6a 00                	push   0x0
c002d0ef:	e8 89 ef ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d0f4:	5a                   	pop    edx
c002d0f5:	0f b6 c0             	movzx  eax,al
c002d0f8:	59                   	pop    ecx
c002d0f9:	50                   	push   eax
c002d0fa:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0ff:	99                   	cdq    
c002d100:	f7 ff                	idiv   edi
c002d102:	99                   	cdq    
c002d103:	f7 fb                	idiv   ebx
c002d105:	8d 42 30             	lea    eax,[edx+0x30]
c002d108:	0f b6 c0             	movzx  eax,al
c002d10b:	50                   	push   eax
c002d10c:	e8 5b ef ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d111:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d117:	5e                   	pop    esi
c002d118:	be 64 00 00 00       	mov    esi,0x64
c002d11d:	58                   	pop    eax
c002d11e:	6a 0f                	push   0xf
c002d120:	6a 00                	push   0x0
c002d122:	e8 56 ef ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d127:	5a                   	pop    edx
c002d128:	0f b6 c0             	movzx  eax,al
c002d12b:	59                   	pop    ecx
c002d12c:	50                   	push   eax
c002d12d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d132:	99                   	cdq    
c002d133:	f7 fe                	idiv   esi
c002d135:	99                   	cdq    
c002d136:	f7 fb                	idiv   ebx
c002d138:	8d 42 30             	lea    eax,[edx+0x30]
c002d13b:	0f b6 c0             	movzx  eax,al
c002d13e:	50                   	push   eax
c002d13f:	e8 28 ef ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d144:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d14a:	58                   	pop    eax
c002d14b:	5a                   	pop    edx
c002d14c:	6a 0f                	push   0xf
c002d14e:	6a 00                	push   0x0
c002d150:	e8 28 ef ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d155:	59                   	pop    ecx
c002d156:	0f b6 c0             	movzx  eax,al
c002d159:	5a                   	pop    edx
c002d15a:	50                   	push   eax
c002d15b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d160:	99                   	cdq    
c002d161:	f7 fb                	idiv   ebx
c002d163:	99                   	cdq    
c002d164:	f7 fb                	idiv   ebx
c002d166:	8d 42 30             	lea    eax,[edx+0x30]
c002d169:	0f b6 c0             	movzx  eax,al
c002d16c:	50                   	push   eax
c002d16d:	e8 fa ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d172:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d178:	59                   	pop    ecx
c002d179:	58                   	pop    eax
c002d17a:	6a 0f                	push   0xf
c002d17c:	6a 00                	push   0x0
c002d17e:	e8 fa ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d183:	5a                   	pop    edx
c002d184:	0f b6 c0             	movzx  eax,al
c002d187:	59                   	pop    ecx
c002d188:	50                   	push   eax
c002d189:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d18e:	99                   	cdq    
c002d18f:	f7 fb                	idiv   ebx
c002d191:	83 c2 30             	add    edx,0x30
c002d194:	0f b6 d2             	movzx  edx,dl
c002d197:	52                   	push   edx
c002d198:	e8 cf ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d19d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d1a3:	58                   	pop    eax
c002d1a4:	5a                   	pop    edx
c002d1a5:	6a 0f                	push   0xf
c002d1a7:	6a 00                	push   0x0
c002d1a9:	e8 cf ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d1ae:	59                   	pop    ecx
c002d1af:	0f b6 c0             	movzx  eax,al
c002d1b2:	5a                   	pop    edx
c002d1b3:	50                   	push   eax
c002d1b4:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1b9:	99                   	cdq    
c002d1ba:	f7 fd                	idiv   ebp
c002d1bc:	99                   	cdq    
c002d1bd:	f7 fb                	idiv   ebx
c002d1bf:	8d 42 30             	lea    eax,[edx+0x30]
c002d1c2:	0f b6 c0             	movzx  eax,al
c002d1c5:	50                   	push   eax
c002d1c6:	e8 a1 ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d1cb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d1d1:	59                   	pop    ecx
c002d1d2:	5d                   	pop    ebp
c002d1d3:	6a 0f                	push   0xf
c002d1d5:	6a 00                	push   0x0
c002d1d7:	e8 a1 ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d1dc:	5a                   	pop    edx
c002d1dd:	0f b6 c0             	movzx  eax,al
c002d1e0:	59                   	pop    ecx
c002d1e1:	50                   	push   eax
c002d1e2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1e7:	99                   	cdq    
c002d1e8:	f7 ff                	idiv   edi
c002d1ea:	99                   	cdq    
c002d1eb:	f7 fb                	idiv   ebx
c002d1ed:	8d 42 30             	lea    eax,[edx+0x30]
c002d1f0:	0f b6 c0             	movzx  eax,al
c002d1f3:	50                   	push   eax
c002d1f4:	e8 73 ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d1f9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d1ff:	5f                   	pop    edi
c002d200:	5d                   	pop    ebp
c002d201:	6a 0f                	push   0xf
c002d203:	6a 00                	push   0x0
c002d205:	e8 73 ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d20a:	5a                   	pop    edx
c002d20b:	0f b6 c0             	movzx  eax,al
c002d20e:	59                   	pop    ecx
c002d20f:	50                   	push   eax
c002d210:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d215:	99                   	cdq    
c002d216:	f7 fe                	idiv   esi
c002d218:	99                   	cdq    
c002d219:	f7 fb                	idiv   ebx
c002d21b:	8d 42 30             	lea    eax,[edx+0x30]
c002d21e:	0f b6 c0             	movzx  eax,al
c002d221:	50                   	push   eax
c002d222:	e8 45 ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d227:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d22d:	5e                   	pop    esi
c002d22e:	5f                   	pop    edi
c002d22f:	6a 0f                	push   0xf
c002d231:	6a 00                	push   0x0
c002d233:	e8 45 ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d238:	5d                   	pop    ebp
c002d239:	0f b6 c0             	movzx  eax,al
c002d23c:	5a                   	pop    edx
c002d23d:	50                   	push   eax
c002d23e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d243:	99                   	cdq    
c002d244:	f7 fb                	idiv   ebx
c002d246:	99                   	cdq    
c002d247:	f7 fb                	idiv   ebx
c002d249:	8d 42 30             	lea    eax,[edx+0x30]
c002d24c:	0f b6 c0             	movzx  eax,al
c002d24f:	50                   	push   eax
c002d250:	e8 17 ee ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d255:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d25b:	59                   	pop    ecx
c002d25c:	5e                   	pop    esi
c002d25d:	6a 0f                	push   0xf
c002d25f:	6a 00                	push   0x0
c002d261:	e8 17 ee ff ff       	call   c002c07d <combineColours(unsigned char, unsigned char)>
c002d266:	5f                   	pop    edi
c002d267:	0f b6 c0             	movzx  eax,al
c002d26a:	5d                   	pop    ebp
c002d26b:	50                   	push   eax
c002d26c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d271:	99                   	cdq    
c002d272:	f7 fb                	idiv   ebx
c002d274:	83 c2 30             	add    edx,0x30
c002d277:	0f b6 d2             	movzx  edx,dl
c002d27a:	52                   	push   edx
c002d27b:	e8 ec ed ff ff       	call   c002c06c <combineCharAndColour(char, unsigned char)>
c002d280:	83 c4 10             	add    esp,0x10
c002d283:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d289:	31 c0                	xor    eax,eax
c002d28b:	83 c4 1c             	add    esp,0x1c
c002d28e:	5b                   	pop    ebx
c002d28f:	5e                   	pop    esi
c002d290:	5f                   	pop    edi
c002d291:	5d                   	pop    ebp
c002d292:	c3                   	ret    
c002d293:	90                   	nop

c002d294 <SATAPI::write(unsigned long long, int, void*)>:
c002d294:	b8 03 00 00 00       	mov    eax,0x3
c002d299:	c3                   	ret    

c002d29a <SATAPI::close(int, int, void*)>:
c002d29a:	83 ec 0c             	sub    esp,0xc
c002d29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d2a7:	85 c0                	test   eax,eax
c002d2a9:	74 0c                	je     c002d2b7 <SATAPI::close(int, int, void*)+0x1d>
c002d2ab:	83 ec 0c             	sub    esp,0xc
c002d2ae:	8b 10                	mov    edx,DWORD PTR [eax]
c002d2b0:	50                   	push   eax
c002d2b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d2b4:	83 c4 10             	add    esp,0x10
c002d2b7:	31 c0                	xor    eax,eax
c002d2b9:	83 c4 0c             	add    esp,0xc
c002d2bc:	c3                   	ret    
c002d2bd:	90                   	nop

c002d2be <SATAPI::SATAPI()>:
c002d2be:	83 ec 0c             	sub    esp,0xc
c002d2c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2c5:	83 ec 04             	sub    esp,0x4
c002d2c8:	68 00 08 00 00       	push   0x800
c002d2cd:	68 64 39 03 c0       	push   0xc0033964
c002d2d2:	50                   	push   eax
c002d2d3:	e8 d6 e3 fe ff       	call   c001b6ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d2d8:	83 c4 10             	add    esp,0x10
c002d2db:	ba 58 3a 03 c0       	mov    edx,0xc0033a58
c002d2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2e4:	89 10                	mov    DWORD PTR [eax],edx
c002d2e6:	90                   	nop
c002d2e7:	83 c4 0c             	add    esp,0xc
c002d2ea:	c3                   	ret    
c002d2eb:	90                   	nop

c002d2ec <SATAPI::diskRemoved()>:
c002d2ec:	c3                   	ret    
c002d2ed:	90                   	nop

c002d2ee <SATAPI::diskInserted()>:
c002d2ee:	83 ec 18             	sub    esp,0x18
c002d2f1:	68 70 39 03 c0       	push   0xc0033970
c002d2f6:	e8 4e bf fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002d2fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d2ff:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d306:	83 c4 1c             	add    esp,0x1c
c002d309:	c3                   	ret    

c002d30a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d30a:	55                   	push   ebp
c002d30b:	57                   	push   edi
c002d30c:	56                   	push   esi
c002d30d:	53                   	push   ebx
c002d30e:	83 ec 34             	sub    esp,0x34
c002d311:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d315:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d319:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d325:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d32b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d331:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d335:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d33b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d33f:	83 c0 02             	add    eax,0x2
c002d342:	c1 e0 07             	shl    eax,0x7
c002d345:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d349:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d34d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d351:	c1 e0 07             	shl    eax,0x7
c002d354:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d358:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d35c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d36a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d370:	e8 cb e4 ff ff       	call   c002b840 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d375:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d379:	83 c4 10             	add    esp,0x10
c002d37c:	b8 01 00 00 00       	mov    eax,0x1
c002d381:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d386:	0f 84 53 02 00 00    	je     c002d5df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d38c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d396:	8b 00                	mov    eax,DWORD PTR [eax]
c002d398:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d39e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d3a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d3a8:	c1 e1 05             	shl    ecx,0x5
c002d3ab:	01 c8                	add    eax,ecx
c002d3ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d3af:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d3b5:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d3bb:	89 08                	mov    DWORD PTR [eax],ecx
c002d3bd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d3c3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d3c9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d3cf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d3d2:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d3d5:	50                   	push   eax
c002d3d6:	68 90 00 00 00       	push   0x90
c002d3db:	6a 00                	push   0x0
c002d3dd:	53                   	push   ebx
c002d3de:	e8 0d 31 fd ff       	call   c00004f0 <memset>
c002d3e3:	b9 0c 00 00 00       	mov    ecx,0xc
c002d3e8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d3ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d3ee:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d3f4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d3f8:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d3fe:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d402:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d406:	48                   	dec    eax
c002d407:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d40c:	89 c1                	mov    ecx,eax
c002d40e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d414:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d419:	09 c8                	or     eax,ecx
c002d41b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d421:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d427:	83 c8 80             	or     eax,0xffffff80
c002d42a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d430:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d433:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d437:	25 00 7f 00 00       	and    eax,0x7f00
c002d43c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d440:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d445:	66 89 03             	mov    WORD PTR [ebx],ax
c002d448:	89 d0                	mov    eax,edx
c002d44a:	c1 ea 18             	shr    edx,0x18
c002d44d:	c1 e8 10             	shr    eax,0x10
c002d450:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d453:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d456:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d45a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d45d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d461:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d464:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d468:	83 c4 10             	add    esp,0x10
c002d46b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d46f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d473:	31 c0                	xor    eax,eax
c002d475:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d47b:	80 e1 88             	and    cl,0x88
c002d47e:	74 0a                	je     c002d48a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d480:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d485:	74 0a                	je     c002d491 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d487:	40                   	inc    eax
c002d488:	eb eb                	jmp    c002d475 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d48a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d48f:	75 43                	jne    c002d4d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d491:	83 ec 0c             	sub    esp,0xc
c002d494:	68 88 39 03 c0       	push   0xc0033988
c002d499:	e8 ab bd fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002d49e:	58                   	pop    eax
c002d49f:	5a                   	pop    edx
c002d4a0:	68 9d 39 03 c0       	push   0xc003399d
c002d4a5:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d4ab:	e8 fa 9e fe ff       	call   c00173aa <VgaText::puts(char const*)>
c002d4b0:	59                   	pop    ecx
c002d4b1:	5b                   	pop    ebx
c002d4b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4b6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d4bc:	e8 19 e4 ff ff       	call   c002b8da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d4c1:	5e                   	pop    esi
c002d4c2:	5f                   	pop    edi
c002d4c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4c7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d4cd:	e8 e8 e3 ff ff       	call   c002b8ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d4d2:	eb 48                	jmp    c002d51c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d4d4:	be 01 00 00 00       	mov    esi,0x1
c002d4d9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d4dd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d4e1:	d3 e6                	shl    esi,cl
c002d4e3:	c1 e7 07             	shl    edi,0x7
c002d4e6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d4ec:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d4f1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d4f5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d4fb:	85 c6                	test   esi,eax
c002d4fd:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d503:	0f 84 a3 00 00 00    	je     c002d5ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d509:	0f ba e0 1e          	bt     eax,0x1e
c002d50d:	73 1a                	jae    c002d529 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d50f:	83 ec 0c             	sub    esp,0xc
c002d512:	68 af 39 03 c0       	push   0xc00339af
c002d517:	e8 2d bd fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002d51c:	83 c4 10             	add    esp,0x10
c002d51f:	b8 01 00 00 00       	mov    eax,0x1
c002d524:	e9 b6 00 00 00       	jmp    c002d5df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d529:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d52f:	83 f8 0d             	cmp    eax,0xd
c002d532:	77 0a                	ja     c002d53e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d534:	83 ec 0c             	sub    esp,0xc
c002d537:	68 c8 00 00 00       	push   0xc8
c002d53c:	eb 28                	jmp    c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d53e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d544:	83 f8 0d             	cmp    eax,0xd
c002d547:	77 0a                	ja     c002d553 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d549:	83 ec 0c             	sub    esp,0xc
c002d54c:	68 58 02 00 00       	push   0x258
c002d551:	eb 13                	jmp    c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d553:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d559:	83 f8 06             	cmp    eax,0x6
c002d55c:	77 10                	ja     c002d56e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d55e:	83 ec 0c             	sub    esp,0xc
c002d561:	68 dc 05 00 00       	push   0x5dc
c002d566:	e8 c5 7e ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002d56b:	83 c4 10             	add    esp,0x10
c002d56e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d572:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d575:	75 06                	jne    c002d57d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d577:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d57b:	74 15                	je     c002d592 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d57d:	83 fb 06             	cmp    ebx,0x6
c002d580:	77 10                	ja     c002d592 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d582:	83 ec 0c             	sub    esp,0xc
c002d585:	68 c4 09 00 00       	push   0x9c4
c002d58a:	e8 a1 7e ff ff       	call   c0025430 <milliTenthSleep(unsigned int)>
c002d58f:	83 c4 10             	add    esp,0x10
c002d592:	43                   	inc    ebx
c002d593:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d599:	0f 85 56 ff ff ff    	jne    c002d4f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d59f:	83 ec 0c             	sub    esp,0xc
c002d5a2:	68 c2 39 03 c0       	push   0xc00339c2
c002d5a7:	e9 6b ff ff ff       	jmp    c002d517 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5ac:	0f ba e0 1e          	bt     eax,0x1e
c002d5b0:	73 0d                	jae    c002d5bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d5b2:	83 ec 0c             	sub    esp,0xc
c002d5b5:	68 d6 39 03 c0       	push   0xc00339d6
c002d5ba:	e9 58 ff ff ff       	jmp    c002d517 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5bf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d5c4:	74 17                	je     c002d5dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d5c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d5cb:	74 10                	je     c002d5dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d5cd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d5d3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d5d7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d5db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d5dd:	31 c0                	xor    eax,eax
c002d5df:	83 c4 2c             	add    esp,0x2c
c002d5e2:	5b                   	pop    ebx
c002d5e3:	5e                   	pop    esi
c002d5e4:	5f                   	pop    edi
c002d5e5:	5d                   	pop    ebp
c002d5e6:	c3                   	ret    
c002d5e7:	90                   	nop

c002d5e8 <SATAPI::eject()>:
c002d5e8:	57                   	push   edi
c002d5e9:	b9 03 00 00 00       	mov    ecx,0x3
c002d5ee:	83 ec 18             	sub    esp,0x18
c002d5f1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d5f5:	fc                   	cld    
c002d5f6:	31 c0                	xor    eax,eax
c002d5f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d5fa:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d5ff:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d604:	50                   	push   eax
c002d605:	6a 00                	push   0x0
c002d607:	6a 00                	push   0x0
c002d609:	6a 00                	push   0x0
c002d60b:	6a 00                	push   0x0
c002d60d:	6a 02                	push   0x2
c002d60f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d613:	50                   	push   eax
c002d614:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d618:	e8 ed fc ff ff       	call   c002d30a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d61d:	31 c0                	xor    eax,eax
c002d61f:	83 c4 38             	add    esp,0x38
c002d622:	5f                   	pop    edi
c002d623:	c3                   	ret    

c002d624 <SATAPI::detectMedia()>:
c002d624:	53                   	push   ebx
c002d625:	83 ec 14             	sub    esp,0x14
c002d628:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d62c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d632:	e8 e9 f9 fe ff       	call   c001d020 <VCache::writeWriteBuffer()>
c002d637:	59                   	pop    ecx
c002d638:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d63e:	e8 cd f9 fe ff       	call   c001d010 <VCache::invalidateReadBuffer()>
c002d643:	c7 04 24 eb 39 03 c0 	mov    DWORD PTR [esp],0xc00339eb
c002d64a:	e8 fa bb fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002d64f:	83 c4 10             	add    esp,0x10
c002d652:	31 c0                	xor    eax,eax
c002d654:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d65b:	85 d2                	test   edx,edx
c002d65d:	74 0f                	je     c002d66e <SATAPI::detectMedia()+0x4a>
c002d65f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d665:	75 07                	jne    c002d66e <SATAPI::detectMedia()+0x4a>
c002d667:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d66e:	40                   	inc    eax
c002d66f:	83 f8 1a             	cmp    eax,0x1a
c002d672:	75 e0                	jne    c002d654 <SATAPI::detectMedia()+0x30>
c002d674:	83 c4 08             	add    esp,0x8
c002d677:	5b                   	pop    ebx
c002d678:	c3                   	ret    
c002d679:	90                   	nop

c002d67a <SATAPI::open(int, int, void*)>:
c002d67a:	56                   	push   esi
c002d67b:	53                   	push   ebx
c002d67c:	51                   	push   ecx
c002d67d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d685:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d68f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d695:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d69f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d6a3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d6ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d6b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d6ba:	e8 04 90 fe ff       	call   c00166c3 <Phys::allocatePage()>
c002d6bf:	89 c6                	mov    esi,eax
c002d6c1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d6c7:	81 c6 00 10 00 00    	add    esi,0x1000
c002d6cd:	e8 f1 8f fe ff       	call   c00166c3 <Phys::allocatePage()>
c002d6d2:	39 c6                	cmp    esi,eax
c002d6d4:	74 10                	je     c002d6e6 <SATAPI::open(int, int, void*)+0x6c>
c002d6d6:	83 ec 0c             	sub    esp,0xc
c002d6d9:	68 00 3a 03 c0       	push   0xc0033a00
c002d6de:	e8 7f 2b ff ff       	call   c0020262 <KePanic(char const*)>
c002d6e3:	83 c4 10             	add    esp,0x10
c002d6e6:	83 ec 0c             	sub    esp,0xc
c002d6e9:	6a 02                	push   0x2
c002d6eb:	e8 21 a8 fe ff       	call   c0017f11 <Virt::allocateKernelVirtualPages(int)>
c002d6f0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d6f6:	6a 03                	push   0x3
c002d6f8:	50                   	push   eax
c002d6f9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d6ff:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d705:	e8 1a af fe ff       	call   c0018624 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d70a:	83 c4 14             	add    esp,0x14
c002d70d:	68 78 01 00 00       	push   0x178
c002d712:	e8 a3 8c fe ff       	call   c00163ba <malloc>
c002d717:	83 c4 0c             	add    esp,0xc
c002d71a:	89 c6                	mov    esi,eax
c002d71c:	6a 00                	push   0x0
c002d71e:	68 ff ff ff 7f       	push   0x7fffffff
c002d723:	6a 00                	push   0x0
c002d725:	6a 00                	push   0x0
c002d727:	53                   	push   ebx
c002d728:	68 16 3a 03 c0       	push   0xc0033a16
c002d72d:	50                   	push   eax
c002d72e:	e8 4d ed fe ff       	call   c001c480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d733:	83 c4 14             	add    esp,0x14
c002d736:	56                   	push   esi
c002d737:	e8 04 ee fe ff       	call   c001c540 <LogicalDisk::assignDriveLetter()>
c002d73c:	5a                   	pop    edx
c002d73d:	0f be c0             	movsx  eax,al
c002d740:	59                   	pop    ecx
c002d741:	50                   	push   eax
c002d742:	68 5c 38 03 c0       	push   0xc003385c
c002d747:	e8 fd ba fe ff       	call   c0019249 <Dbg::kprintf(char const*, ...)>
c002d74c:	58                   	pop    eax
c002d74d:	5a                   	pop    edx
c002d74e:	56                   	push   esi
c002d74f:	53                   	push   ebx
c002d750:	e8 75 db fe ff       	call   c001b2ca <Device::addChild(Device*)>
c002d755:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d75b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d75e:	e8 b3 df fe ff       	call   c001b716 <PhysicalDisk::startCache()>
c002d763:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d76a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d76d:	e8 b2 fe ff ff       	call   c002d624 <SATAPI::detectMedia()>
c002d772:	83 c4 14             	add    esp,0x14
c002d775:	31 c0                	xor    eax,eax
c002d777:	5b                   	pop    ebx
c002d778:	5e                   	pop    esi
c002d779:	c3                   	ret    

c002d77a <SATAPI::read(unsigned long long, int, void*)>:
c002d77a:	57                   	push   edi
c002d77b:	56                   	push   esi
c002d77c:	53                   	push   ebx
c002d77d:	83 ec 30             	sub    esp,0x30
c002d780:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d784:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d788:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d78c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d794:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d798:	83 fe 04             	cmp    esi,0x4
c002d79b:	7e 10                	jle    c002d7ad <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d79d:	83 ec 0c             	sub    esp,0xc
c002d7a0:	68 24 3a 03 c0       	push   0xc0033a24
c002d7a5:	e8 b8 2a ff ff       	call   c0020262 <KePanic(char const*)>
c002d7aa:	83 c4 10             	add    esp,0x10
c002d7ad:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d7b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d7b9:	51                   	push   ecx
c002d7ba:	50                   	push   eax
c002d7bb:	83 c0 02             	add    eax,0x2
c002d7be:	c1 e0 07             	shl    eax,0x7
c002d7c1:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d7c7:	50                   	push   eax
c002d7c8:	52                   	push   edx
c002d7c9:	e8 36 e1 ff ff       	call   c002b904 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d7ce:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d7d2:	b9 03 00 00 00       	mov    ecx,0x3
c002d7d7:	fc                   	cld    
c002d7d8:	31 c0                	xor    eax,eax
c002d7da:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d7dc:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d7e1:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d7e6:	83 c4 0c             	add    esp,0xc
c002d7e9:	6a 00                	push   0x0
c002d7eb:	6a 00                	push   0x0
c002d7ed:	6a 00                	push   0x0
c002d7ef:	6a 00                	push   0x0
c002d7f1:	6a 02                	push   0x2
c002d7f3:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d7f7:	50                   	push   eax
c002d7f8:	53                   	push   ebx
c002d7f9:	e8 0c fb ff ff       	call   c002d30a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d7fe:	83 c4 20             	add    esp,0x20
c002d801:	85 c0                	test   eax,eax
c002d803:	75 44                	jne    c002d849 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d805:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d809:	b9 03 00 00 00       	mov    ecx,0x3
c002d80e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d814:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d819:	0f c8                	bswap  eax
c002d81b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d81f:	89 f0                	mov    eax,esi
c002d821:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d825:	50                   	push   eax
c002d826:	56                   	push   esi
c002d827:	c1 e6 0b             	shl    esi,0xb
c002d82a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d82e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d836:	56                   	push   esi
c002d837:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d83b:	50                   	push   eax
c002d83c:	53                   	push   ebx
c002d83d:	e8 c8 fa ff ff       	call   c002d30a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d842:	83 c4 20             	add    esp,0x20
c002d845:	85 c0                	test   eax,eax
c002d847:	74 14                	je     c002d85d <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d84d:	83 ec 0c             	sub    esp,0xc
c002d850:	53                   	push   ebx
c002d851:	e8 ce fd ff ff       	call   c002d624 <SATAPI::detectMedia()>
c002d856:	83 c4 10             	add    esp,0x10
c002d859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d85d:	83 c4 30             	add    esp,0x30
c002d860:	5b                   	pop    ebx
c002d861:	5e                   	pop    esi
c002d862:	5f                   	pop    edi
c002d863:	c3                   	ret    

c002d864 <IOAPIC::close(int, int, void*)>:
c002d864:	b8 00 00 00 00       	mov    eax,0x0
c002d869:	c3                   	ret    

c002d86a <apicGetBase()>:
c002d86a:	55                   	push   ebp
c002d86b:	89 e5                	mov    ebp,esp
c002d86d:	83 ec 18             	sub    esp,0x18
c002d870:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d875:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d87b:	83 e0 08             	and    eax,0x8
c002d87e:	0f b6 c0             	movzx  eax,al
c002d881:	85 c0                	test   eax,eax
c002d883:	75 07                	jne    c002d88c <apicGetBase()+0x22>
c002d885:	b8 00 00 00 00       	mov    eax,0x0
c002d88a:	eb 21                	jmp    c002d8ad <apicGetBase()+0x43>
c002d88c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d891:	83 ec 08             	sub    esp,0x8
c002d894:	6a 1b                	push   0x1b
c002d896:	50                   	push   eax
c002d897:	e8 28 81 fe ff       	call   c00159c4 <Computer::rdmsr(unsigned int)>
c002d89c:	83 c4 10             	add    esp,0x10
c002d89f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d8a2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d8a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8a8:	25 00 00 ff ff       	and    eax,0xffff0000
c002d8ad:	c9                   	leave  
c002d8ae:	c3                   	ret    
c002d8af:	90                   	nop

c002d8b0 <IOAPIC::IOAPIC()>:
c002d8b0:	83 ec 0c             	sub    esp,0xc
c002d8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8b7:	83 ec 08             	sub    esp,0x8
c002d8ba:	68 88 3a 03 c0       	push   0xc0033a88
c002d8bf:	50                   	push   eax
c002d8c0:	e8 67 db fe ff       	call   c001b42c <Device::Device(char const*)>
c002d8c5:	83 c4 10             	add    esp,0x10
c002d8c8:	ba 98 3a 03 c0       	mov    edx,0xc0033a98
c002d8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8d1:	89 10                	mov    DWORD PTR [eax],edx
c002d8d3:	90                   	nop
c002d8d4:	83 c4 0c             	add    esp,0xc
c002d8d7:	c3                   	ret    

c002d8d8 <apicOpen()>:
c002d8d8:	55                   	push   ebp
c002d8d9:	89 e5                	mov    ebp,esp
c002d8db:	53                   	push   ebx
c002d8dc:	83 ec 34             	sub    esp,0x34
c002d8df:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d8e4:	83 f0 01             	xor    eax,0x1
c002d8e7:	0f b6 c0             	movzx  eax,al
c002d8ea:	85 c0                	test   eax,eax
c002d8ec:	0f 84 a3 00 00 00    	je     c002d995 <apicOpen()+0xbd>
c002d8f2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d8f6:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d8fb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d8ff:	0f b6 c0             	movzx  eax,al
c002d902:	39 c2                	cmp    edx,eax
c002d904:	0f 83 84 00 00 00    	jae    c002d98e <apicOpen()+0xb6>
c002d90a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d911:	83 ec 0c             	sub    esp,0xc
c002d914:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d917:	e8 9e 8a fe ff       	call   c00163ba <malloc>
c002d91c:	83 c4 10             	add    esp,0x10
c002d91f:	89 c3                	mov    ebx,eax
c002d921:	83 ec 0c             	sub    esp,0xc
c002d924:	53                   	push   ebx
c002d925:	e8 86 ff ff ff       	call   c002d8b0 <IOAPIC::IOAPIC()>
c002d92a:	83 c4 10             	add    esp,0x10
c002d92d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d930:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d934:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d937:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d93e:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d943:	83 c0 01             	add    eax,0x1
c002d946:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d94b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d950:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d956:	83 ec 08             	sub    esp,0x8
c002d959:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d95c:	50                   	push   eax
c002d95d:	e8 68 d9 fe ff       	call   c001b2ca <Device::addChild(Device*)>
c002d962:	83 c4 10             	add    esp,0x10
c002d965:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d968:	8b 00                	mov    eax,DWORD PTR [eax]
c002d96a:	83 c0 08             	add    eax,0x8
c002d96d:	8b 00                	mov    eax,DWORD PTR [eax]
c002d96f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d973:	6a 00                	push   0x0
c002d975:	6a 00                	push   0x0
c002d977:	52                   	push   edx
c002d978:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d97b:	ff d0                	call   eax
c002d97d:	83 c4 10             	add    esp,0x10
c002d980:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d983:	83 c0 01             	add    eax,0x1
c002d986:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d989:	e9 68 ff ff ff       	jmp    c002d8f6 <apicOpen()+0x1e>
c002d98e:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d995:	e8 d0 fe ff ff       	call   c002d86a <apicGetBase()>
c002d99a:	05 f0 00 00 00       	add    eax,0xf0
c002d99f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d9a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9a7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d9aa:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d9b1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d9b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d9be:	89 10                	mov    DWORD PTR [eax],edx
c002d9c0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d9c7:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d9cc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d9cf:	7d 7c                	jge    c002da4d <apicOpen()+0x175>
c002d9d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9d4:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9db:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d9de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9e1:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9e8:	c1 e8 08             	shr    eax,0x8
c002d9eb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d9ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d9f2:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d9f9:	c1 e8 18             	shr    eax,0x18
c002d9fc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d9ff:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002da03:	3d ff 00 00 00       	cmp    eax,0xff
c002da08:	75 3a                	jne    c002da44 <apicOpen()+0x16c>
c002da0a:	e8 5b fe ff ff       	call   c002d86a <apicGetBase()>
c002da0f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002da13:	83 fa 01             	cmp    edx,0x1
c002da16:	75 07                	jne    c002da1f <apicOpen()+0x147>
c002da18:	ba 60 03 00 00       	mov    edx,0x360
c002da1d:	eb 05                	jmp    c002da24 <apicOpen()+0x14c>
c002da1f:	ba 50 03 00 00       	mov    edx,0x350
c002da24:	01 d0                	add    eax,edx
c002da26:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002da29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da2c:	8b 00                	mov    eax,DWORD PTR [eax]
c002da2e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002da31:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002da38:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002da3c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da3f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002da42:	89 10                	mov    DWORD PTR [eax],edx
c002da44:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002da48:	e9 7a ff ff ff       	jmp    c002d9c7 <apicOpen()+0xef>
c002da4d:	90                   	nop
c002da4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002da51:	c9                   	leave  
c002da52:	c3                   	ret    
c002da53:	90                   	nop

c002da54 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002da54:	55                   	push   ebp
c002da55:	89 e5                	mov    ebp,esp
c002da57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002da60:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da63:	72 1d                	jb     c002da82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da68:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002da6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da71:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002da77:	01 d0                	add    eax,edx
c002da79:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da7c:	73 04                	jae    c002da82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da7e:	b0 01                	mov    al,0x1
c002da80:	eb 02                	jmp    c002da84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002da82:	b0 00                	mov    al,0x0
c002da84:	5d                   	pop    ebp
c002da85:	c3                   	ret    

c002da86 <IOAPIC::read(int)>:
c002da86:	55                   	push   ebp
c002da87:	89 e5                	mov    ebp,esp
c002da89:	83 ec 10             	sub    esp,0x10
c002da8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da8f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002da95:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002da98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002da9b:	0f b6 d0             	movzx  edx,al
c002da9e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002daa1:	89 10                	mov    DWORD PTR [eax],edx
c002daa3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002daa6:	83 c0 10             	add    eax,0x10
c002daa9:	8b 00                	mov    eax,DWORD PTR [eax]
c002daab:	c9                   	leave  
c002daac:	c3                   	ret    
c002daad:	90                   	nop

c002daae <IOAPIC::open(int, int, void*)>:
c002daae:	55                   	push   ebp
c002daaf:	89 e5                	mov    ebp,esp
c002dab1:	57                   	push   edi
c002dab2:	56                   	push   esi
c002dab3:	53                   	push   ebx
c002dab4:	83 ec 04             	sub    esp,0x4
c002dab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dabd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dac6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dacc:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dad6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dadf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dae5:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002daec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002daf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daf8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dafe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db07:	0f b6 f0             	movzx  esi,al
c002db0a:	89 d0                	mov    eax,edx
c002db0c:	ba 00 00 00 00       	mov    edx,0x0
c002db11:	89 c7                	mov    edi,eax
c002db13:	83 e7 ff             	and    edi,0xffffffff
c002db16:	89 f9                	mov    ecx,edi
c002db18:	0f b6 da             	movzx  ebx,dl
c002db1b:	89 c8                	mov    eax,ecx
c002db1d:	89 da                	mov    edx,ebx
c002db1f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002db22:	8d 5e 08             	lea    ebx,[esi+0x8]
c002db25:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002db29:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002db2d:	83 e0 00             	and    eax,0x0
c002db30:	09 d0                	or     eax,edx
c002db32:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002db36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db3f:	8d 50 01             	lea    edx,[eax+0x1]
c002db42:	88 d1                	mov    cl,dl
c002db44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002db47:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002db4d:	0f b6 d0             	movzx  edx,al
c002db50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db53:	83 c2 08             	add    edx,0x8
c002db56:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002db5a:	0f b6 c9             	movzx  ecx,cl
c002db5d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002db63:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002db67:	6a 01                	push   0x1
c002db69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db6c:	e8 15 ff ff ff       	call   c002da86 <IOAPIC::read(int)>
c002db71:	83 c4 08             	add    esp,0x8
c002db74:	c1 f8 10             	sar    eax,0x10
c002db77:	0f b6 c0             	movzx  eax,al
c002db7a:	8d 50 01             	lea    edx,[eax+0x1]
c002db7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db80:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002db86:	b8 00 00 00 00       	mov    eax,0x0
c002db8b:	8d 65 f4             	lea    esp,[ebp-0xc]
c002db8e:	5b                   	pop    ebx
c002db8f:	5e                   	pop    esi
c002db90:	5f                   	pop    edi
c002db91:	5d                   	pop    ebp
c002db92:	c3                   	ret    
c002db93:	90                   	nop

c002db94 <IOAPIC::write(int, int)>:
c002db94:	55                   	push   ebp
c002db95:	89 e5                	mov    ebp,esp
c002db97:	83 ec 10             	sub    esp,0x10
c002db9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db9d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dba3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dba6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dba9:	0f b6 d0             	movzx  edx,al
c002dbac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbaf:	89 10                	mov    DWORD PTR [eax],edx
c002dbb1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbb4:	8d 50 10             	lea    edx,[eax+0x10]
c002dbb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dbba:	89 02                	mov    DWORD PTR [edx],eax
c002dbbc:	90                   	nop
c002dbbd:	c9                   	leave  
c002dbbe:	c3                   	ret    
c002dbbf:	90                   	nop

c002dbc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dbc0:	55                   	push   ebp
c002dbc1:	89 e5                	mov    ebp,esp
c002dbc3:	53                   	push   ebx
c002dbc4:	83 ec 2c             	sub    esp,0x2c
c002dbc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dbca:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dbcd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dbd0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dbd3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dbd6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dbd9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dbdc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dbdf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dbe2:	88 d8                	mov    al,bl
c002dbe4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002dbe7:	88 c8                	mov    al,cl
c002dbe9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002dbec:	88 d0                	mov    al,dl
c002dbee:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002dbf1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dbf5:	83 c0 08             	add    eax,0x8
c002dbf8:	01 c0                	add    eax,eax
c002dbfa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dbfd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dc01:	83 c0 08             	add    eax,0x8
c002dc04:	01 c0                	add    eax,eax
c002dc06:	83 c0 01             	add    eax,0x1
c002dc09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dc0c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc0f:	50                   	push   eax
c002dc10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc13:	e8 6e fe ff ff       	call   c002da86 <IOAPIC::read(int)>
c002dc18:	83 c4 08             	add    esp,0x8
c002dc1b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dc1e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dc25:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc28:	c1 e0 18             	shl    eax,0x18
c002dc2b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dc2e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dc31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc34:	52                   	push   edx
c002dc35:	50                   	push   eax
c002dc36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc39:	e8 56 ff ff ff       	call   c002db94 <IOAPIC::write(int, int)>
c002dc3e:	83 c4 0c             	add    esp,0xc
c002dc41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc44:	50                   	push   eax
c002dc45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc48:	e8 39 fe ff ff       	call   c002da86 <IOAPIC::read(int)>
c002dc4d:	83 c4 08             	add    esp,0x8
c002dc50:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dc53:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dc5a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dc61:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dc68:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dc6c:	85 c0                	test   eax,eax
c002dc6e:	74 09                	je     c002dc79 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dc70:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dc77:	eb 07                	jmp    c002dc80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dc79:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dc80:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dc84:	85 c0                	test   eax,eax
c002dc86:	74 09                	je     c002dc91 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dc88:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dc8f:	eb 07                	jmp    c002dc98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dc91:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dc98:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dc9f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dca3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dca6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dca9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dcac:	52                   	push   edx
c002dcad:	50                   	push   eax
c002dcae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dcb1:	e8 de fe ff ff       	call   c002db94 <IOAPIC::write(int, int)>
c002dcb6:	83 c4 0c             	add    esp,0xc
c002dcb9:	90                   	nop
c002dcba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dcbd:	c9                   	leave  
c002dcbe:	c3                   	ret    
c002dcbf:	90                   	nop

c002dcc0 <APICTimer::close(int, int, void*)>:
c002dcc0:	b8 00 00 00 00       	mov    eax,0x0
c002dcc5:	c3                   	ret    
c002dcc6:	66 90                	xchg   ax,ax

c002dcc8 <apicTimerHandler(regs*, void*)>:
c002dcc8:	83 ec 0c             	sub    esp,0xc
c002dccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dccf:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dcd1:	b8 10 27 00 00       	mov    eax,0x2710
c002dcd6:	ba 00 00 00 00       	mov    edx,0x0
c002dcdb:	f7 f1                	div    ecx
c002dcdd:	83 ec 0c             	sub    esp,0xc
c002dce0:	50                   	push   eax
c002dce1:	e8 56 f0 fe ff       	call   c001cd3c <timerHandler(unsigned int)>
c002dce6:	83 c4 10             	add    esp,0x10
c002dce9:	90                   	nop
c002dcea:	83 c4 0c             	add    esp,0xc
c002dced:	c3                   	ret    
c002dcee:	66 90                	xchg   ax,ax

c002dcf0 <APICTimer::open(int, int, void*)>:
c002dcf0:	83 ec 0c             	sub    esp,0xc
c002dcf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcf7:	8b 00                	mov    eax,DWORD PTR [eax]
c002dcf9:	83 c0 24             	add    eax,0x24
c002dcfc:	8b 00                	mov    eax,DWORD PTR [eax]
c002dcfe:	83 ec 08             	sub    esp,0x8
c002dd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd09:	ff d0                	call   eax
c002dd0b:	83 c4 10             	add    esp,0x10
c002dd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dd16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd24:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dd2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd2e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dd34:	83 ec 0c             	sub    esp,0xc
c002dd37:	51                   	push   ecx
c002dd38:	6a 01                	push   0x1
c002dd3a:	68 c8 dc 02 c0       	push   0xc002dcc8
c002dd3f:	52                   	push   edx
c002dd40:	50                   	push   eax
c002dd41:	e8 30 d5 fe ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dd46:	83 c4 20             	add    esp,0x20
c002dd49:	89 c2                	mov    edx,eax
c002dd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd4f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dd55:	b8 00 00 00 00       	mov    eax,0x0
c002dd5a:	83 c4 0c             	add    esp,0xc
c002dd5d:	c3                   	ret    
c002dd5e:	66 90                	xchg   ax,ax

c002dd60 <APICTimer::write(int)>:
c002dd60:	83 ec 0c             	sub    esp,0xc
c002dd63:	83 ec 0c             	sub    esp,0xc
c002dd66:	68 bc 3a 03 c0       	push   0xc0033abc
c002dd6b:	e8 f2 24 ff ff       	call   c0020262 <KePanic(char const*)>
c002dd70:	83 c4 10             	add    esp,0x10
c002dd73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dd7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd81:	90                   	nop
c002dd82:	83 c4 0c             	add    esp,0xc
c002dd85:	c3                   	ret    
c002dd86:	66 90                	xchg   ax,ax

c002dd88 <APICTimer::APICTimer()>:
c002dd88:	83 ec 0c             	sub    esp,0xc
c002dd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd8f:	83 ec 08             	sub    esp,0x8
c002dd92:	68 cc 3a 03 c0       	push   0xc0033acc
c002dd97:	50                   	push   eax
c002dd98:	e8 d3 ee fe ff       	call   c001cc70 <Timer::Timer(char const*)>
c002dd9d:	83 c4 10             	add    esp,0x10
c002dda0:	ba e0 3a 03 c0       	mov    edx,0xc0033ae0
c002dda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dda9:	89 10                	mov    DWORD PTR [eax],edx
c002ddab:	90                   	nop
c002ddac:	83 c4 0c             	add    esp,0xc
c002ddaf:	c3                   	ret    

c002ddb0 <PIT::write(int)>:
c002ddb0:	83 ec 10             	sub    esp,0x10
c002ddb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ddb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002ddbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ddc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ddc5:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002ddca:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002ddcf:	89 c2                	mov    edx,eax
c002ddd1:	c1 fa 1f             	sar    edx,0x1f
c002ddd4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002ddd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dddc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dde3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002dde8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002ddec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002ddf1:	ee                   	out    dx,al
c002ddf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ddf6:	0f b6 c0             	movzx  eax,al
c002ddf9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002de00:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002de04:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002de08:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002de0d:	ee                   	out    dx,al
c002de0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002de12:	c1 f8 08             	sar    eax,0x8
c002de15:	0f b6 c0             	movzx  eax,al
c002de18:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002de1f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002de23:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002de27:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002de2c:	ee                   	out    dx,al
c002de2d:	90                   	nop
c002de2e:	83 c4 10             	add    esp,0x10
c002de31:	c3                   	ret    
c002de32:	66 90                	xchg   ax,ax

c002de34 <pitHandler(regs*, void*)>:
c002de34:	83 ec 0c             	sub    esp,0xc
c002de37:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002de3d:	b8 10 27 00 00       	mov    eax,0x2710
c002de42:	89 c2                	mov    edx,eax
c002de44:	c1 fa 1f             	sar    edx,0x1f
c002de47:	f7 f9                	idiv   ecx
c002de49:	83 ec 0c             	sub    esp,0xc
c002de4c:	50                   	push   eax
c002de4d:	e8 ea ee fe ff       	call   c001cd3c <timerHandler(unsigned int)>
c002de52:	83 c4 10             	add    esp,0x10
c002de55:	90                   	nop
c002de56:	83 c4 0c             	add    esp,0xc
c002de59:	c3                   	ret    
c002de5a:	66 90                	xchg   ax,ax

c002de5c <PIT::open(int, int, void*)>:
c002de5c:	83 ec 0c             	sub    esp,0xc
c002de5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de63:	8b 00                	mov    eax,DWORD PTR [eax]
c002de65:	83 c0 24             	add    eax,0x24
c002de68:	8b 00                	mov    eax,DWORD PTR [eax]
c002de6a:	83 ec 08             	sub    esp,0x8
c002de6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de75:	ff d0                	call   eax
c002de77:	83 c4 10             	add    esp,0x10
c002de7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de7e:	83 ec 0c             	sub    esp,0xc
c002de81:	6a 00                	push   0x0
c002de83:	6a 01                	push   0x1
c002de85:	68 34 de 02 c0       	push   0xc002de34
c002de8a:	6a 00                	push   0x0
c002de8c:	50                   	push   eax
c002de8d:	e8 e4 d3 fe ff       	call   c001b276 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002de92:	83 c4 20             	add    esp,0x20
c002de95:	89 c2                	mov    edx,eax
c002de97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de9b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dea1:	b8 00 00 00 00       	mov    eax,0x0
c002dea6:	83 c4 0c             	add    esp,0xc
c002dea9:	c3                   	ret    
c002deaa:	66 90                	xchg   ax,ax

c002deac <PIT::close(int, int, void*)>:
c002deac:	83 ec 0c             	sub    esp,0xc
c002deaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deb3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dec1:	6a 01                	push   0x1
c002dec3:	68 34 de 02 c0       	push   0xc002de34
c002dec8:	6a 00                	push   0x0
c002deca:	50                   	push   eax
c002decb:	e8 dc d3 fe ff       	call   c001b2ac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002ded0:	83 c4 10             	add    esp,0x10
c002ded3:	b8 00 00 00 00       	mov    eax,0x0
c002ded8:	83 c4 0c             	add    esp,0xc
c002dedb:	c3                   	ret    

c002dedc <PIT::PIT()>:
c002dedc:	83 ec 0c             	sub    esp,0xc
c002dedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dee3:	83 ec 08             	sub    esp,0x8
c002dee6:	68 08 3b 03 c0       	push   0xc0033b08
c002deeb:	50                   	push   eax
c002deec:	e8 7f ed fe ff       	call   c001cc70 <Timer::Timer(char const*)>
c002def1:	83 c4 10             	add    esp,0x10
c002def4:	ba 30 3b 03 c0       	mov    edx,0xc0033b30
c002def9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002defd:	89 10                	mov    DWORD PTR [eax],edx
c002deff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df09:	0f b6 d0             	movzx  edx,al
c002df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df10:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002df17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df21:	0f b6 d0             	movzx  edx,al
c002df24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df28:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df31:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df37:	8d 50 01             	lea    edx,[eax+0x1]
c002df3a:	88 d1                	mov    cl,dl
c002df3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df40:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002df46:	0f b6 d0             	movzx  edx,al
c002df49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df4d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002df51:	83 e1 3f             	and    ecx,0x3f
c002df54:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002df58:	90                   	nop
c002df59:	83 c4 0c             	add    esp,0xc
c002df5c:	c3                   	ret    
c002df5d:	66 90                	xchg   ax,ax
c002df5f:	90                   	nop

c002df60 <avxDetect>:
c002df60:	b8 01 00 00 00       	mov    eax,0x1
c002df65:	0f a2                	cpuid  
c002df67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002df6d:	74 15                	je     c002df84 <avxDetect.noAVX>
c002df6f:	b8 01 00 00 00       	mov    eax,0x1
c002df74:	0f a2                	cpuid  
c002df76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002df7c:	74 06                	je     c002df84 <avxDetect.noAVX>
c002df7e:	b8 01 00 00 00       	mov    eax,0x1
c002df83:	c3                   	ret    

c002df84 <avxDetect.noAVX>:
c002df84:	b8 00 00 00 00       	mov    eax,0x0
c002df89:	c3                   	ret    

c002df8a <avxSave>:
c002df8a:	53                   	push   ebx
c002df8b:	52                   	push   edx
c002df8c:	31 c0                	xor    eax,eax
c002df8e:	48                   	dec    eax
c002df8f:	89 c2                	mov    edx,eax
c002df91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df95:	0f ae 23             	xsave  [ebx]
c002df98:	5a                   	pop    edx
c002df99:	5b                   	pop    ebx
c002df9a:	c3                   	ret    

c002df9b <avxLoad>:
c002df9b:	53                   	push   ebx
c002df9c:	52                   	push   edx
c002df9d:	31 c0                	xor    eax,eax
c002df9f:	48                   	dec    eax
c002dfa0:	89 c2                	mov    edx,eax
c002dfa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dfa6:	0f ae 2b             	xrstor [ebx]
c002dfa9:	5a                   	pop    edx
c002dfaa:	5b                   	pop    ebx
c002dfab:	c3                   	ret    

c002dfac <avxInit>:
c002dfac:	e8 47 03 00 00       	call   c002e2f8 <sseInit>
c002dfb1:	50                   	push   eax
c002dfb2:	51                   	push   ecx
c002dfb3:	0f 20 e0             	mov    eax,cr4
c002dfb6:	0d 00 00 04 00       	or     eax,0x40000
c002dfbb:	0f 22 e0             	mov    cr4,eax
c002dfbe:	31 c9                	xor    ecx,ecx
c002dfc0:	0f 01 d0             	xgetbv 
c002dfc3:	0d 07 00 00 00       	or     eax,0x7
c002dfc8:	0f 01 d1             	xsetbv 
c002dfcb:	59                   	pop    ecx
c002dfcc:	58                   	pop    eax
c002dfcd:	c3                   	ret    

c002dfce <avxClose>:
c002dfce:	c3                   	ret    
c002dfcf:	90                   	nop

c002dfd0 <isr0>:
c002dfd0:	fa                   	cli    
c002dfd1:	68 00 00 00 00       	push   0x0
c002dfd6:	68 00 00 00 00       	push   0x0
c002dfdb:	e9 56 01 00 00       	jmp    c002e136 <int_common_stub>

c002dfe0 <isr1>:
c002dfe0:	fa                   	cli    
c002dfe1:	6a 00                	push   0x0
c002dfe3:	6a 01                	push   0x1
c002dfe5:	e9 4c 01 00 00       	jmp    c002e136 <int_common_stub>

c002dfea <isr2>:
c002dfea:	fa                   	cli    
c002dfeb:	6a 00                	push   0x0
c002dfed:	6a 02                	push   0x2
c002dfef:	e9 42 01 00 00       	jmp    c002e136 <int_common_stub>

c002dff4 <isr3>:
c002dff4:	fa                   	cli    
c002dff5:	6a 00                	push   0x0
c002dff7:	6a 03                	push   0x3
c002dff9:	e9 38 01 00 00       	jmp    c002e136 <int_common_stub>

c002dffe <isr4>:
c002dffe:	fa                   	cli    
c002dfff:	6a 00                	push   0x0
c002e001:	6a 04                	push   0x4
c002e003:	e9 2e 01 00 00       	jmp    c002e136 <int_common_stub>

c002e008 <isr5>:
c002e008:	fa                   	cli    
c002e009:	6a 00                	push   0x0
c002e00b:	6a 05                	push   0x5
c002e00d:	e9 24 01 00 00       	jmp    c002e136 <int_common_stub>

c002e012 <isr6>:
c002e012:	fa                   	cli    
c002e013:	6a 00                	push   0x0
c002e015:	6a 06                	push   0x6
c002e017:	e9 1a 01 00 00       	jmp    c002e136 <int_common_stub>

c002e01c <isr7>:
c002e01c:	fa                   	cli    
c002e01d:	6a 00                	push   0x0
c002e01f:	6a 07                	push   0x7
c002e021:	e9 10 01 00 00       	jmp    c002e136 <int_common_stub>

c002e026 <isr8>:
c002e026:	fa                   	cli    
c002e027:	6a 08                	push   0x8
c002e029:	e9 08 01 00 00       	jmp    c002e136 <int_common_stub>

c002e02e <isr9>:
c002e02e:	fa                   	cli    
c002e02f:	6a 00                	push   0x0
c002e031:	6a 09                	push   0x9
c002e033:	e9 fe 00 00 00       	jmp    c002e136 <int_common_stub>

c002e038 <isr10>:
c002e038:	fa                   	cli    
c002e039:	6a 0a                	push   0xa
c002e03b:	e9 f6 00 00 00       	jmp    c002e136 <int_common_stub>

c002e040 <isr11>:
c002e040:	fa                   	cli    
c002e041:	6a 0b                	push   0xb
c002e043:	e9 ee 00 00 00       	jmp    c002e136 <int_common_stub>

c002e048 <isr12>:
c002e048:	fa                   	cli    
c002e049:	6a 0c                	push   0xc
c002e04b:	e9 e6 00 00 00       	jmp    c002e136 <int_common_stub>

c002e050 <isr13>:
c002e050:	fa                   	cli    
c002e051:	6a 0d                	push   0xd
c002e053:	53                   	push   ebx
c002e054:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e058:	81 fb 26 e2 02 c0    	cmp    ebx,0xc002e226
c002e05e:	5b                   	pop    ebx
c002e05f:	0f 84 c3 01 00 00    	je     c002e228 <finishSignal2>
c002e065:	e9 cc 00 00 00       	jmp    c002e136 <int_common_stub>

c002e06a <isr14>:
c002e06a:	fa                   	cli    
c002e06b:	6a 0e                	push   0xe
c002e06d:	e9 c4 00 00 00       	jmp    c002e136 <int_common_stub>

c002e072 <isr15>:
c002e072:	fa                   	cli    
c002e073:	6a 00                	push   0x0
c002e075:	6a 0f                	push   0xf
c002e077:	e9 ba 00 00 00       	jmp    c002e136 <int_common_stub>

c002e07c <isr16>:
c002e07c:	fa                   	cli    
c002e07d:	6a 00                	push   0x0
c002e07f:	6a 10                	push   0x10
c002e081:	e9 b0 00 00 00       	jmp    c002e136 <int_common_stub>

c002e086 <isr17>:
c002e086:	fa                   	cli    
c002e087:	6a 00                	push   0x0
c002e089:	6a 11                	push   0x11
c002e08b:	e9 a6 00 00 00       	jmp    c002e136 <int_common_stub>

c002e090 <isr18>:
c002e090:	fa                   	cli    
c002e091:	6a 00                	push   0x0
c002e093:	6a 12                	push   0x12
c002e095:	e9 9c 00 00 00       	jmp    c002e136 <int_common_stub>

c002e09a <irq3>:
c002e09a:	fa                   	cli    
c002e09b:	6a 00                	push   0x0
c002e09d:	6a 23                	push   0x23
c002e09f:	e9 92 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0a4 <irq4>:
c002e0a4:	fa                   	cli    
c002e0a5:	6a 00                	push   0x0
c002e0a7:	6a 24                	push   0x24
c002e0a9:	e9 88 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0ae <irq5>:
c002e0ae:	fa                   	cli    
c002e0af:	6a 00                	push   0x0
c002e0b1:	6a 25                	push   0x25
c002e0b3:	e9 7e 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0b8 <irq6>:
c002e0b8:	fa                   	cli    
c002e0b9:	6a 00                	push   0x0
c002e0bb:	6a 26                	push   0x26
c002e0bd:	e9 74 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0c2 <irq7>:
c002e0c2:	fa                   	cli    
c002e0c3:	6a 00                	push   0x0
c002e0c5:	6a 27                	push   0x27
c002e0c7:	e9 6a 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0cc <irq8>:
c002e0cc:	fa                   	cli    
c002e0cd:	6a 00                	push   0x0
c002e0cf:	6a 28                	push   0x28
c002e0d1:	e9 60 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0d6 <irq9>:
c002e0d6:	fa                   	cli    
c002e0d7:	6a 00                	push   0x0
c002e0d9:	6a 29                	push   0x29
c002e0db:	e9 56 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0e0 <irq10>:
c002e0e0:	fa                   	cli    
c002e0e1:	6a 00                	push   0x0
c002e0e3:	6a 2a                	push   0x2a
c002e0e5:	e9 4c 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0ea <irq11>:
c002e0ea:	fa                   	cli    
c002e0eb:	6a 00                	push   0x0
c002e0ed:	6a 2b                	push   0x2b
c002e0ef:	e9 42 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0f4 <irq12>:
c002e0f4:	fa                   	cli    
c002e0f5:	6a 00                	push   0x0
c002e0f7:	6a 2c                	push   0x2c
c002e0f9:	e9 38 00 00 00       	jmp    c002e136 <int_common_stub>

c002e0fe <irq13>:
c002e0fe:	fa                   	cli    
c002e0ff:	6a 00                	push   0x0
c002e101:	6a 2d                	push   0x2d
c002e103:	e9 2e 00 00 00       	jmp    c002e136 <int_common_stub>

c002e108 <irq14>:
c002e108:	fa                   	cli    
c002e109:	6a 00                	push   0x0
c002e10b:	6a 2e                	push   0x2e
c002e10d:	e9 24 00 00 00       	jmp    c002e136 <int_common_stub>

c002e112 <irq15>:
c002e112:	fa                   	cli    
c002e113:	6a 00                	push   0x0
c002e115:	6a 2f                	push   0x2f
c002e117:	e9 1a 00 00 00       	jmp    c002e136 <int_common_stub>

c002e11c <irq1>:
c002e11c:	fa                   	cli    
c002e11d:	6a 00                	push   0x0
c002e11f:	6a 21                	push   0x21
c002e121:	eb 13                	jmp    c002e136 <int_common_stub>

c002e123 <irq2>:
c002e123:	fa                   	cli    
c002e124:	6a 00                	push   0x0
c002e126:	6a 22                	push   0x22
c002e128:	eb 0c                	jmp    c002e136 <int_common_stub>

c002e12a <isr96>:
c002e12a:	6a 00                	push   0x0
c002e12c:	6a 60                	push   0x60
c002e12e:	fb                   	sti    
c002e12f:	eb 37                	jmp    c002e168 <syscall_common_stub>

c002e131 <irq0>:
c002e131:	fa                   	cli    
c002e132:	6a 00                	push   0x0
c002e134:	6a 20                	push   0x20

c002e136 <int_common_stub>:
c002e136:	60                   	pusha  
c002e137:	1e                   	push   ds
c002e138:	06                   	push   es
c002e139:	0f a0                	push   fs
c002e13b:	0f a8                	push   gs
c002e13d:	66 b8 10 00          	mov    ax,0x10
c002e141:	66 8e d8             	mov    ds,ax
c002e144:	66 8e c0             	mov    es,ax
c002e147:	66 8e e0             	mov    fs,ax
c002e14a:	66 8e e8             	mov    gs,ax
c002e14d:	54                   	push   esp
c002e14e:	fc                   	cld    
c002e14f:	e8 38 d6 fe ff       	call   c001b78c <int_handler>
c002e154:	81 c4 04 00 00 00    	add    esp,0x4
c002e15a:	0f a9                	pop    gs
c002e15c:	0f a1                	pop    fs
c002e15e:	07                   	pop    es
c002e15f:	1f                   	pop    ds
c002e160:	61                   	popa   
c002e161:	81 c4 08 00 00 00    	add    esp,0x8
c002e167:	cf                   	iret   

c002e168 <syscall_common_stub>:
c002e168:	60                   	pusha  
c002e169:	1e                   	push   ds
c002e16a:	06                   	push   es
c002e16b:	0f a0                	push   fs
c002e16d:	0f a8                	push   gs
c002e16f:	66 b8 10 00          	mov    ax,0x10
c002e173:	66 8e d8             	mov    ds,ax
c002e176:	66 8e c0             	mov    es,ax
c002e179:	66 8e e0             	mov    fs,ax
c002e17c:	66 8e e8             	mov    gs,ax
c002e17f:	54                   	push   esp
c002e180:	fc                   	cld    
c002e181:	e8 06 d6 fe ff       	call   c001b78c <int_handler>
c002e186:	81 c4 04 00 00 00    	add    esp,0x4
c002e18c:	0f a9                	pop    gs
c002e18e:	0f a1                	pop    fs
c002e190:	07                   	pop    es
c002e191:	1f                   	pop    ds
c002e192:	e8 f8 2a ff ff       	call   c0020c8f <KiCheckSignalZ>
c002e197:	3d 00 00 00 00       	cmp    eax,0x0
c002e19c:	0f 84 c0 00 00 00    	je     c002e262 <skipSignals>
c002e1a2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e1a7:	61                   	popa   
c002e1a8:	53                   	push   ebx
c002e1a9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e1af:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e1b2:	5b                   	pop    ebx
c002e1b3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e1b8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e1bb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e1be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e1c1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e1c4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e1c7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e1ca:	81 c4 08 00 00 00    	add    esp,0x8
c002e1d0:	5e                   	pop    esi
c002e1d1:	5b                   	pop    ebx
c002e1d2:	59                   	pop    ecx
c002e1d3:	5a                   	pop    edx
c002e1d4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e1d7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e1da:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e1dd:	52                   	push   edx
c002e1de:	51                   	push   ecx
c002e1df:	53                   	push   ebx
c002e1e0:	56                   	push   esi
c002e1e1:	81 ec 08 00 00 00    	sub    esp,0x8
c002e1e7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e1ea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e1ed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e1f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e1f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e1f6:	60                   	pusha  
c002e1f7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e1fd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e200:	89 e3                	mov    ebx,esp
c002e202:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e205:	52                   	push   edx
c002e206:	68 26 e2 02 c0       	push   0xc002e226
c002e20b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e20e:	89 dc                	mov    esp,ebx
c002e210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e213:	68 23 00 00 00       	push   0x23
c002e218:	51                   	push   ecx
c002e219:	68 02 02 00 00       	push   0x202
c002e21e:	68 1b 00 00 00       	push   0x1b
c002e223:	ff 36                	push   DWORD PTR [esi]
c002e225:	cf                   	iret   

c002e226 <finishSignal>:
c002e226:	cd 0f                	int    0xf

c002e228 <finishSignal2>:
c002e228:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e22e:	e8 d9 2a ff ff       	call   c0020d0c <KiFinishSignalZ>
c002e233:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e239:	68 23 00 00 00       	push   0x23
c002e23e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e241:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e244:	68 1b 00 00 00       	push   0x1b
c002e249:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e24c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e24f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e252:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e255:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e258:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e25b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e25e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e261:	cf                   	iret   

c002e262 <skipSignals>:
c002e262:	61                   	popa   
c002e263:	81 c4 08 00 00 00    	add    esp,0x8
c002e269:	cf                   	iret   
c002e26a:	90                   	nop
c002e26b:	90                   	nop

c002e26c <irq16>:
c002e26c:	fa                   	cli    
c002e26d:	6a 00                	push   0x0
c002e26f:	6a 30                	push   0x30
c002e271:	e9 c0 fe ff ff       	jmp    c002e136 <int_common_stub>

c002e276 <irq17>:
c002e276:	fa                   	cli    
c002e277:	6a 00                	push   0x0
c002e279:	6a 31                	push   0x31
c002e27b:	e9 b6 fe ff ff       	jmp    c002e136 <int_common_stub>

c002e280 <irq18>:
c002e280:	fa                   	cli    
c002e281:	6a 00                	push   0x0
c002e283:	6a 32                	push   0x32
c002e285:	e9 ac fe ff ff       	jmp    c002e136 <int_common_stub>

c002e28a <irq19>:
c002e28a:	fa                   	cli    
c002e28b:	6a 00                	push   0x0
c002e28d:	6a 33                	push   0x33
c002e28f:	e9 a2 fe ff ff       	jmp    c002e136 <int_common_stub>

c002e294 <irq20>:
c002e294:	fa                   	cli    
c002e295:	6a 00                	push   0x0
c002e297:	6a 34                	push   0x34
c002e299:	e9 98 fe ff ff       	jmp    c002e136 <int_common_stub>

c002e29e <irq21>:
c002e29e:	fa                   	cli    
c002e29f:	6a 00                	push   0x0
c002e2a1:	6a 35                	push   0x35
c002e2a3:	e9 8e fe ff ff       	jmp    c002e136 <int_common_stub>

c002e2a8 <irq22>:
c002e2a8:	fa                   	cli    
c002e2a9:	6a 00                	push   0x0
c002e2ab:	6a 36                	push   0x36
c002e2ad:	e9 84 fe ff ff       	jmp    c002e136 <int_common_stub>

c002e2b2 <irq23>:
c002e2b2:	fa                   	cli    
c002e2b3:	6a 00                	push   0x0
c002e2b5:	6a 37                	push   0x37
c002e2b7:	e9 7a fe ff ff       	jmp    c002e136 <int_common_stub>
c002e2bc:	66 90                	xchg   ax,ax
c002e2be:	66 90                	xchg   ax,ax

c002e2c0 <i386GetRDRAND>:
c002e2c0:	b9 64 00 00 00       	mov    ecx,0x64

c002e2c5 <retry>:
c002e2c5:	0f c7 f0             	rdrand eax
c002e2c8:	72 05                	jb     c002e2cf <retry.done>
c002e2ca:	e2 f9                	loop   c002e2c5 <retry>

c002e2cc <retry.fail>:
c002e2cc:	31 c0                	xor    eax,eax
c002e2ce:	c3                   	ret    

c002e2cf <retry.done>:
c002e2cf:	c3                   	ret    

c002e2d0 <sseDetect>:
c002e2d0:	b8 01 00 00 00       	mov    eax,0x1
c002e2d5:	0f a2                	cpuid  
c002e2d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e2dd:	74 06                	je     c002e2e5 <sseDetect.noSSE>
c002e2df:	b8 01 00 00 00       	mov    eax,0x1
c002e2e4:	c3                   	ret    

c002e2e5 <sseDetect.noSSE>:
c002e2e5:	31 c0                	xor    eax,eax
c002e2e7:	c3                   	ret    

c002e2e8 <sseSave>:
c002e2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2ec:	0f ae 00             	fxsave [eax]
c002e2ef:	c3                   	ret    

c002e2f0 <sseLoad>:
c002e2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2f4:	0f ae 08             	fxrstor [eax]
c002e2f7:	c3                   	ret    

c002e2f8 <sseInit>:
c002e2f8:	e8 42 00 00 00       	call   c002e33f <x87Init>
c002e2fd:	0f 20 e0             	mov    eax,cr4
c002e300:	66 0d 00 06          	or     ax,0x600
c002e304:	0f 22 e0             	mov    cr4,eax
c002e307:	c3                   	ret    

c002e308 <sseClose>:
c002e308:	c3                   	ret    
c002e309:	66 90                	xchg   ax,ax
c002e30b:	66 90                	xchg   ax,ax
c002e30d:	66 90                	xchg   ax,ax
c002e30f:	90                   	nop

c002e310 <value_37F>:
c002e310:	7f 03                	jg     c002e315 <value_37A+0x1>

c002e312 <value_37E>:
c002e312:	7e 03                	jle    c002e317 <x87Detect+0x1>

c002e314 <value_37A>:
c002e314:	7a 03                	jp     c002e319 <x87Detect+0x3>

c002e316 <x87Detect>:
c002e316:	b8 01 00 00 00       	mov    eax,0x1
c002e31b:	0f a2                	cpuid  
c002e31d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e323:	74 06                	je     c002e32b <x87Detect.nox87>
c002e325:	b8 01 00 00 00       	mov    eax,0x1
c002e32a:	c3                   	ret    

c002e32b <x87Detect.nox87>:
c002e32b:	b8 00 00 00 00       	mov    eax,0x0
c002e330:	c3                   	ret    

c002e331 <x87Save>:
c002e331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e335:	dd 30                	fnsave [eax]
c002e337:	c3                   	ret    

c002e338 <x87Load>:
c002e338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e33c:	dd 20                	frstor [eax]
c002e33e:	c3                   	ret    

c002e33f <x87Init>:
c002e33f:	0f 20 c0             	mov    eax,cr0
c002e342:	66 25 fb ff          	and    ax,0xfffb
c002e346:	66 0d 22 00          	or     ax,0x22
c002e34a:	0f 22 c0             	mov    cr0,eax
c002e34d:	db e3                	fninit 
c002e34f:	0f 06                	clts   
c002e351:	d9 2d 14 e3 02 c0    	fldcw  WORD PTR ds:0xc002e314
c002e357:	c3                   	ret    

c002e358 <x87Close>:
c002e358:	c3                   	ret    
c002e359:	66 90                	xchg   ax,ax
c002e35b:	90                   	nop

c002e35c <__do_global_ctors_aux>:
c002e35c:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c002e361:	83 f8 ff             	cmp    eax,0xffffffff
c002e364:	74 1a                	je     c002e380 <__do_global_ctors_aux+0x24>
c002e366:	55                   	push   ebp
c002e367:	89 e5                	mov    ebp,esp
c002e369:	53                   	push   ebx
c002e36a:	52                   	push   edx
c002e36b:	bb 10 f3 02 c0       	mov    ebx,0xc002f310
c002e370:	ff d0                	call   eax
c002e372:	83 eb 04             	sub    ebx,0x4
c002e375:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e377:	83 f8 ff             	cmp    eax,0xffffffff
c002e37a:	75 f4                	jne    c002e370 <__do_global_ctors_aux+0x14>
c002e37c:	58                   	pop    eax
c002e37d:	5b                   	pop    ebx
c002e37e:	5d                   	pop    ebp
c002e37f:	c3                   	ret    
c002e380:	c3                   	ret    
c002e381:	66 90                	xchg   ax,ax
c002e383:	90                   	nop

c002e384 <__divdi3>:
c002e384:	55                   	push   ebp
c002e385:	57                   	push   edi
c002e386:	56                   	push   esi
c002e387:	53                   	push   ebx
c002e388:	83 ec 1c             	sub    esp,0x1c
c002e38b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e38f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e393:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e396:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e39a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e39e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e3a2:	85 db                	test   ebx,ebx
c002e3a4:	0f 88 8e 00 00 00    	js     c002e438 <__divdi3+0xb4>
c002e3aa:	89 dd                	mov    ebp,ebx
c002e3ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e3b4:	89 d3                	mov    ebx,edx
c002e3b6:	85 d2                	test   edx,edx
c002e3b8:	79 0d                	jns    c002e3c7 <__divdi3+0x43>
c002e3ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e3be:	f7 d8                	neg    eax
c002e3c0:	83 d2 00             	adc    edx,0x0
c002e3c3:	f7 da                	neg    edx
c002e3c5:	89 d3                	mov    ebx,edx
c002e3c7:	89 c7                	mov    edi,eax
c002e3c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e3cc:	85 db                	test   ebx,ebx
c002e3ce:	75 48                	jne    c002e418 <__divdi3+0x94>
c002e3d0:	39 ef                	cmp    edi,ebp
c002e3d2:	76 24                	jbe    c002e3f8 <__divdi3+0x74>
c002e3d4:	89 ea                	mov    edx,ebp
c002e3d6:	f7 f7                	div    edi
c002e3d8:	89 c1                	mov    ecx,eax
c002e3da:	31 f6                	xor    esi,esi
c002e3dc:	89 c8                	mov    eax,ecx
c002e3de:	89 f2                	mov    edx,esi
c002e3e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e3e4:	85 c9                	test   ecx,ecx
c002e3e6:	74 07                	je     c002e3ef <__divdi3+0x6b>
c002e3e8:	f7 d8                	neg    eax
c002e3ea:	83 d2 00             	adc    edx,0x0
c002e3ed:	f7 da                	neg    edx
c002e3ef:	83 c4 1c             	add    esp,0x1c
c002e3f2:	5b                   	pop    ebx
c002e3f3:	5e                   	pop    esi
c002e3f4:	5f                   	pop    edi
c002e3f5:	5d                   	pop    ebp
c002e3f6:	c3                   	ret    
c002e3f7:	90                   	nop
c002e3f8:	85 ff                	test   edi,edi
c002e3fa:	75 0b                	jne    c002e407 <__divdi3+0x83>
c002e3fc:	b8 01 00 00 00       	mov    eax,0x1
c002e401:	31 d2                	xor    edx,edx
c002e403:	f7 f3                	div    ebx
c002e405:	89 c7                	mov    edi,eax
c002e407:	31 d2                	xor    edx,edx
c002e409:	89 e8                	mov    eax,ebp
c002e40b:	f7 f7                	div    edi
c002e40d:	89 c6                	mov    esi,eax
c002e40f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e412:	f7 f7                	div    edi
c002e414:	89 c1                	mov    ecx,eax
c002e416:	eb c4                	jmp    c002e3dc <__divdi3+0x58>
c002e418:	39 eb                	cmp    ebx,ebp
c002e41a:	77 3c                	ja     c002e458 <__divdi3+0xd4>
c002e41c:	0f bd f3             	bsr    esi,ebx
c002e41f:	83 f6 1f             	xor    esi,0x1f
c002e422:	75 40                	jne    c002e464 <__divdi3+0xe0>
c002e424:	39 eb                	cmp    ebx,ebp
c002e426:	72 09                	jb     c002e431 <__divdi3+0xad>
c002e428:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e42b:	0f 87 97 00 00 00    	ja     c002e4c8 <__divdi3+0x144>
c002e431:	b9 01 00 00 00       	mov    ecx,0x1
c002e436:	eb a4                	jmp    c002e3dc <__divdi3+0x58>
c002e438:	f7 d9                	neg    ecx
c002e43a:	83 d3 00             	adc    ebx,0x0
c002e43d:	f7 db                	neg    ebx
c002e43f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e442:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e446:	89 dd                	mov    ebp,ebx
c002e448:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e450:	e9 5f ff ff ff       	jmp    c002e3b4 <__divdi3+0x30>
c002e455:	8d 76 00             	lea    esi,[esi+0x0]
c002e458:	31 f6                	xor    esi,esi
c002e45a:	31 c9                	xor    ecx,ecx
c002e45c:	e9 7b ff ff ff       	jmp    c002e3dc <__divdi3+0x58>
c002e461:	8d 76 00             	lea    esi,[esi+0x0]
c002e464:	b8 20 00 00 00       	mov    eax,0x20
c002e469:	29 f0                	sub    eax,esi
c002e46b:	89 f1                	mov    ecx,esi
c002e46d:	d3 e3                	shl    ebx,cl
c002e46f:	89 fa                	mov    edx,edi
c002e471:	88 c1                	mov    cl,al
c002e473:	d3 ea                	shr    edx,cl
c002e475:	09 da                	or     edx,ebx
c002e477:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e47b:	89 f1                	mov    ecx,esi
c002e47d:	d3 e7                	shl    edi,cl
c002e47f:	89 eb                	mov    ebx,ebp
c002e481:	88 c1                	mov    cl,al
c002e483:	d3 eb                	shr    ebx,cl
c002e485:	89 f1                	mov    ecx,esi
c002e487:	d3 e5                	shl    ebp,cl
c002e489:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e48c:	88 c1                	mov    cl,al
c002e48e:	d3 ea                	shr    edx,cl
c002e490:	09 d5                	or     ebp,edx
c002e492:	89 e8                	mov    eax,ebp
c002e494:	89 da                	mov    edx,ebx
c002e496:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e49a:	89 d3                	mov    ebx,edx
c002e49c:	89 c5                	mov    ebp,eax
c002e49e:	f7 e7                	mul    edi
c002e4a0:	39 d3                	cmp    ebx,edx
c002e4a2:	72 18                	jb     c002e4bc <__divdi3+0x138>
c002e4a4:	74 0a                	je     c002e4b0 <__divdi3+0x12c>
c002e4a6:	89 e9                	mov    ecx,ebp
c002e4a8:	31 f6                	xor    esi,esi
c002e4aa:	e9 2d ff ff ff       	jmp    c002e3dc <__divdi3+0x58>
c002e4af:	90                   	nop
c002e4b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e4b3:	89 f1                	mov    ecx,esi
c002e4b5:	d3 e7                	shl    edi,cl
c002e4b7:	39 c7                	cmp    edi,eax
c002e4b9:	73 eb                	jae    c002e4a6 <__divdi3+0x122>
c002e4bb:	90                   	nop
c002e4bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e4bf:	31 f6                	xor    esi,esi
c002e4c1:	e9 16 ff ff ff       	jmp    c002e3dc <__divdi3+0x58>
c002e4c6:	66 90                	xchg   ax,ax
c002e4c8:	31 c9                	xor    ecx,ecx
c002e4ca:	e9 0d ff ff ff       	jmp    c002e3dc <__divdi3+0x58>
c002e4cf:	90                   	nop

c002e4d0 <__moddi3>:
c002e4d0:	55                   	push   ebp
c002e4d1:	57                   	push   edi
c002e4d2:	56                   	push   esi
c002e4d3:	53                   	push   ebx
c002e4d4:	83 ec 2c             	sub    esp,0x2c
c002e4d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e4db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e4df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e4e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e4e7:	85 db                	test   ebx,ebx
c002e4e9:	0f 88 85 00 00 00    	js     c002e574 <__moddi3+0xa4>
c002e4ef:	89 de                	mov    esi,ebx
c002e4f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e4f9:	89 d7                	mov    edi,edx
c002e4fb:	85 d2                	test   edx,edx
c002e4fd:	79 09                	jns    c002e508 <__moddi3+0x38>
c002e4ff:	f7 d8                	neg    eax
c002e501:	83 d2 00             	adc    edx,0x0
c002e504:	f7 da                	neg    edx
c002e506:	89 d7                	mov    edi,edx
c002e508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e50c:	89 cd                	mov    ebp,ecx
c002e50e:	85 ff                	test   edi,edi
c002e510:	75 52                	jne    c002e564 <__moddi3+0x94>
c002e512:	89 c3                	mov    ebx,eax
c002e514:	39 f0                	cmp    eax,esi
c002e516:	76 24                	jbe    c002e53c <__moddi3+0x6c>
c002e518:	89 c8                	mov    eax,ecx
c002e51a:	89 f2                	mov    edx,esi
c002e51c:	f7 f3                	div    ebx
c002e51e:	89 d6                	mov    esi,edx
c002e520:	89 f0                	mov    eax,esi
c002e522:	31 d2                	xor    edx,edx
c002e524:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e528:	85 c9                	test   ecx,ecx
c002e52a:	74 07                	je     c002e533 <__moddi3+0x63>
c002e52c:	f7 d8                	neg    eax
c002e52e:	83 d2 00             	adc    edx,0x0
c002e531:	f7 da                	neg    edx
c002e533:	83 c4 2c             	add    esp,0x2c
c002e536:	5b                   	pop    ebx
c002e537:	5e                   	pop    esi
c002e538:	5f                   	pop    edi
c002e539:	5d                   	pop    ebp
c002e53a:	c3                   	ret    
c002e53b:	90                   	nop
c002e53c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e540:	85 db                	test   ebx,ebx
c002e542:	75 0d                	jne    c002e551 <__moddi3+0x81>
c002e544:	b8 01 00 00 00       	mov    eax,0x1
c002e549:	31 d2                	xor    edx,edx
c002e54b:	f7 f7                	div    edi
c002e54d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e551:	89 f0                	mov    eax,esi
c002e553:	31 d2                	xor    edx,edx
c002e555:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e559:	f7 f7                	div    edi
c002e55b:	89 e8                	mov    eax,ebp
c002e55d:	f7 f7                	div    edi
c002e55f:	89 d6                	mov    esi,edx
c002e561:	eb bd                	jmp    c002e520 <__moddi3+0x50>
c002e563:	90                   	nop
c002e564:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e568:	39 f7                	cmp    edi,esi
c002e56a:	76 20                	jbe    c002e58c <__moddi3+0xbc>
c002e56c:	89 c8                	mov    eax,ecx
c002e56e:	89 f2                	mov    edx,esi
c002e570:	eb b2                	jmp    c002e524 <__moddi3+0x54>
c002e572:	66 90                	xchg   ax,ax
c002e574:	f7 d9                	neg    ecx
c002e576:	83 d3 00             	adc    ebx,0x0
c002e579:	f7 db                	neg    ebx
c002e57b:	89 de                	mov    esi,ebx
c002e57d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e585:	e9 6f ff ff ff       	jmp    c002e4f9 <__moddi3+0x29>
c002e58a:	66 90                	xchg   ax,ax
c002e58c:	0f bd c7             	bsr    eax,edi
c002e58f:	83 f0 1f             	xor    eax,0x1f
c002e592:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e596:	75 24                	jne    c002e5bc <__moddi3+0xec>
c002e598:	39 f7                	cmp    edi,esi
c002e59a:	72 06                	jb     c002e5a2 <__moddi3+0xd2>
c002e59c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e5a0:	77 0c                	ja     c002e5ae <__moddi3+0xde>
c002e5a2:	89 e9                	mov    ecx,ebp
c002e5a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e5a8:	19 fe                	sbb    esi,edi
c002e5aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e5ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e5b2:	89 f2                	mov    edx,esi
c002e5b4:	e9 6b ff ff ff       	jmp    c002e524 <__moddi3+0x54>
c002e5b9:	8d 76 00             	lea    esi,[esi+0x0]
c002e5bc:	b8 20 00 00 00       	mov    eax,0x20
c002e5c1:	89 c2                	mov    edx,eax
c002e5c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e5c7:	29 da                	sub    edx,ebx
c002e5c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e5cd:	88 d9                	mov    cl,bl
c002e5cf:	d3 e7                	shl    edi,cl
c002e5d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e5d5:	88 d1                	mov    cl,dl
c002e5d7:	d3 e8                	shr    eax,cl
c002e5d9:	09 c7                	or     edi,eax
c002e5db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e5df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e5e3:	89 d8                	mov    eax,ebx
c002e5e5:	88 d9                	mov    cl,bl
c002e5e7:	d3 e7                	shl    edi,cl
c002e5e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e5ed:	89 f3                	mov    ebx,esi
c002e5ef:	88 d1                	mov    cl,dl
c002e5f1:	d3 eb                	shr    ebx,cl
c002e5f3:	89 c7                	mov    edi,eax
c002e5f5:	88 c1                	mov    cl,al
c002e5f7:	d3 e6                	shl    esi,cl
c002e5f9:	89 e8                	mov    eax,ebp
c002e5fb:	88 d1                	mov    cl,dl
c002e5fd:	d3 e8                	shr    eax,cl
c002e5ff:	09 f0                	or     eax,esi
c002e601:	89 f9                	mov    ecx,edi
c002e603:	d3 e5                	shl    ebp,cl
c002e605:	89 da                	mov    edx,ebx
c002e607:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e60b:	89 d3                	mov    ebx,edx
c002e60d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e611:	89 c6                	mov    esi,eax
c002e613:	89 d1                	mov    ecx,edx
c002e615:	39 d3                	cmp    ebx,edx
c002e617:	72 27                	jb     c002e640 <__moddi3+0x170>
c002e619:	74 21                	je     c002e63c <__moddi3+0x16c>
c002e61b:	29 f5                	sub    ebp,esi
c002e61d:	19 cb                	sbb    ebx,ecx
c002e61f:	89 de                	mov    esi,ebx
c002e621:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e625:	d3 e6                	shl    esi,cl
c002e627:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e62b:	89 f9                	mov    ecx,edi
c002e62d:	d3 ed                	shr    ebp,cl
c002e62f:	09 ee                	or     esi,ebp
c002e631:	89 f0                	mov    eax,esi
c002e633:	d3 eb                	shr    ebx,cl
c002e635:	89 da                	mov    edx,ebx
c002e637:	e9 e8 fe ff ff       	jmp    c002e524 <__moddi3+0x54>
c002e63c:	39 c5                	cmp    ebp,eax
c002e63e:	73 db                	jae    c002e61b <__moddi3+0x14b>
c002e640:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e644:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e648:	89 d1                	mov    ecx,edx
c002e64a:	89 c6                	mov    esi,eax
c002e64c:	eb cd                	jmp    c002e61b <__moddi3+0x14b>
c002e64e:	66 90                	xchg   ax,ax

c002e650 <__udivdi3>:
c002e650:	55                   	push   ebp
c002e651:	57                   	push   edi
c002e652:	56                   	push   esi
c002e653:	53                   	push   ebx
c002e654:	83 ec 1c             	sub    esp,0x1c
c002e657:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e65b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e65f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e663:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e667:	85 d2                	test   edx,edx
c002e669:	75 41                	jne    c002e6ac <__udivdi3+0x5c>
c002e66b:	39 f7                	cmp    edi,esi
c002e66d:	76 15                	jbe    c002e684 <__udivdi3+0x34>
c002e66f:	89 e8                	mov    eax,ebp
c002e671:	89 f2                	mov    edx,esi
c002e673:	f7 f7                	div    edi
c002e675:	31 db                	xor    ebx,ebx
c002e677:	89 da                	mov    edx,ebx
c002e679:	83 c4 1c             	add    esp,0x1c
c002e67c:	5b                   	pop    ebx
c002e67d:	5e                   	pop    esi
c002e67e:	5f                   	pop    edi
c002e67f:	5d                   	pop    ebp
c002e680:	c3                   	ret    
c002e681:	8d 76 00             	lea    esi,[esi+0x0]
c002e684:	89 f9                	mov    ecx,edi
c002e686:	85 ff                	test   edi,edi
c002e688:	75 0b                	jne    c002e695 <__udivdi3+0x45>
c002e68a:	b8 01 00 00 00       	mov    eax,0x1
c002e68f:	31 d2                	xor    edx,edx
c002e691:	f7 f7                	div    edi
c002e693:	89 c1                	mov    ecx,eax
c002e695:	31 d2                	xor    edx,edx
c002e697:	89 f0                	mov    eax,esi
c002e699:	f7 f1                	div    ecx
c002e69b:	89 c3                	mov    ebx,eax
c002e69d:	89 e8                	mov    eax,ebp
c002e69f:	f7 f1                	div    ecx
c002e6a1:	89 da                	mov    edx,ebx
c002e6a3:	83 c4 1c             	add    esp,0x1c
c002e6a6:	5b                   	pop    ebx
c002e6a7:	5e                   	pop    esi
c002e6a8:	5f                   	pop    edi
c002e6a9:	5d                   	pop    ebp
c002e6aa:	c3                   	ret    
c002e6ab:	90                   	nop
c002e6ac:	39 f2                	cmp    edx,esi
c002e6ae:	77 1c                	ja     c002e6cc <__udivdi3+0x7c>
c002e6b0:	0f bd da             	bsr    ebx,edx
c002e6b3:	83 f3 1f             	xor    ebx,0x1f
c002e6b6:	75 24                	jne    c002e6dc <__udivdi3+0x8c>
c002e6b8:	39 f2                	cmp    edx,esi
c002e6ba:	72 08                	jb     c002e6c4 <__udivdi3+0x74>
c002e6bc:	39 ef                	cmp    edi,ebp
c002e6be:	0f 87 84 00 00 00    	ja     c002e748 <__udivdi3+0xf8>
c002e6c4:	b8 01 00 00 00       	mov    eax,0x1
c002e6c9:	eb ac                	jmp    c002e677 <__udivdi3+0x27>
c002e6cb:	90                   	nop
c002e6cc:	31 db                	xor    ebx,ebx
c002e6ce:	31 c0                	xor    eax,eax
c002e6d0:	89 da                	mov    edx,ebx
c002e6d2:	83 c4 1c             	add    esp,0x1c
c002e6d5:	5b                   	pop    ebx
c002e6d6:	5e                   	pop    esi
c002e6d7:	5f                   	pop    edi
c002e6d8:	5d                   	pop    ebp
c002e6d9:	c3                   	ret    
c002e6da:	66 90                	xchg   ax,ax
c002e6dc:	b8 20 00 00 00       	mov    eax,0x20
c002e6e1:	29 d8                	sub    eax,ebx
c002e6e3:	88 d9                	mov    cl,bl
c002e6e5:	d3 e2                	shl    edx,cl
c002e6e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e6eb:	89 fa                	mov    edx,edi
c002e6ed:	88 c1                	mov    cl,al
c002e6ef:	d3 ea                	shr    edx,cl
c002e6f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e6f5:	09 d1                	or     ecx,edx
c002e6f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e6fb:	88 d9                	mov    cl,bl
c002e6fd:	d3 e7                	shl    edi,cl
c002e6ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e703:	89 f7                	mov    edi,esi
c002e705:	88 c1                	mov    cl,al
c002e707:	d3 ef                	shr    edi,cl
c002e709:	88 d9                	mov    cl,bl
c002e70b:	d3 e6                	shl    esi,cl
c002e70d:	89 ea                	mov    edx,ebp
c002e70f:	88 c1                	mov    cl,al
c002e711:	d3 ea                	shr    edx,cl
c002e713:	09 d6                	or     esi,edx
c002e715:	89 f0                	mov    eax,esi
c002e717:	89 fa                	mov    edx,edi
c002e719:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e71d:	89 d7                	mov    edi,edx
c002e71f:	89 c6                	mov    esi,eax
c002e721:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e725:	39 d7                	cmp    edi,edx
c002e727:	72 13                	jb     c002e73c <__udivdi3+0xec>
c002e729:	74 09                	je     c002e734 <__udivdi3+0xe4>
c002e72b:	89 f0                	mov    eax,esi
c002e72d:	31 db                	xor    ebx,ebx
c002e72f:	e9 43 ff ff ff       	jmp    c002e677 <__udivdi3+0x27>
c002e734:	88 d9                	mov    cl,bl
c002e736:	d3 e5                	shl    ebp,cl
c002e738:	39 c5                	cmp    ebp,eax
c002e73a:	73 ef                	jae    c002e72b <__udivdi3+0xdb>
c002e73c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e73f:	31 db                	xor    ebx,ebx
c002e741:	e9 31 ff ff ff       	jmp    c002e677 <__udivdi3+0x27>
c002e746:	66 90                	xchg   ax,ax
c002e748:	31 c0                	xor    eax,eax
c002e74a:	e9 28 ff ff ff       	jmp    c002e677 <__udivdi3+0x27>
c002e74f:	90                   	nop

c002e750 <__umoddi3>:
c002e750:	55                   	push   ebp
c002e751:	57                   	push   edi
c002e752:	56                   	push   esi
c002e753:	53                   	push   ebx
c002e754:	83 ec 1c             	sub    esp,0x1c
c002e757:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e75b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e75f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e767:	89 da                	mov    edx,ebx
c002e769:	85 c0                	test   eax,eax
c002e76b:	75 37                	jne    c002e7a4 <__umoddi3+0x54>
c002e76d:	39 df                	cmp    edi,ebx
c002e76f:	76 13                	jbe    c002e784 <__umoddi3+0x34>
c002e771:	89 f0                	mov    eax,esi
c002e773:	f7 f7                	div    edi
c002e775:	89 d0                	mov    eax,edx
c002e777:	31 d2                	xor    edx,edx
c002e779:	83 c4 1c             	add    esp,0x1c
c002e77c:	5b                   	pop    ebx
c002e77d:	5e                   	pop    esi
c002e77e:	5f                   	pop    edi
c002e77f:	5d                   	pop    ebp
c002e780:	c3                   	ret    
c002e781:	8d 76 00             	lea    esi,[esi+0x0]
c002e784:	89 fd                	mov    ebp,edi
c002e786:	85 ff                	test   edi,edi
c002e788:	75 0b                	jne    c002e795 <__umoddi3+0x45>
c002e78a:	b8 01 00 00 00       	mov    eax,0x1
c002e78f:	31 d2                	xor    edx,edx
c002e791:	f7 f7                	div    edi
c002e793:	89 c5                	mov    ebp,eax
c002e795:	89 d8                	mov    eax,ebx
c002e797:	31 d2                	xor    edx,edx
c002e799:	f7 f5                	div    ebp
c002e79b:	89 f0                	mov    eax,esi
c002e79d:	f7 f5                	div    ebp
c002e79f:	89 d0                	mov    eax,edx
c002e7a1:	eb d4                	jmp    c002e777 <__umoddi3+0x27>
c002e7a3:	90                   	nop
c002e7a4:	89 f1                	mov    ecx,esi
c002e7a6:	39 d8                	cmp    eax,ebx
c002e7a8:	76 0a                	jbe    c002e7b4 <__umoddi3+0x64>
c002e7aa:	89 f0                	mov    eax,esi
c002e7ac:	83 c4 1c             	add    esp,0x1c
c002e7af:	5b                   	pop    ebx
c002e7b0:	5e                   	pop    esi
c002e7b1:	5f                   	pop    edi
c002e7b2:	5d                   	pop    ebp
c002e7b3:	c3                   	ret    
c002e7b4:	0f bd e8             	bsr    ebp,eax
c002e7b7:	83 f5 1f             	xor    ebp,0x1f
c002e7ba:	75 1c                	jne    c002e7d8 <__umoddi3+0x88>
c002e7bc:	39 d8                	cmp    eax,ebx
c002e7be:	72 04                	jb     c002e7c4 <__umoddi3+0x74>
c002e7c0:	39 f7                	cmp    edi,esi
c002e7c2:	77 08                	ja     c002e7cc <__umoddi3+0x7c>
c002e7c4:	89 da                	mov    edx,ebx
c002e7c6:	29 fe                	sub    esi,edi
c002e7c8:	19 c2                	sbb    edx,eax
c002e7ca:	89 f1                	mov    ecx,esi
c002e7cc:	89 c8                	mov    eax,ecx
c002e7ce:	83 c4 1c             	add    esp,0x1c
c002e7d1:	5b                   	pop    ebx
c002e7d2:	5e                   	pop    esi
c002e7d3:	5f                   	pop    edi
c002e7d4:	5d                   	pop    ebp
c002e7d5:	c3                   	ret    
c002e7d6:	66 90                	xchg   ax,ax
c002e7d8:	ba 20 00 00 00       	mov    edx,0x20
c002e7dd:	29 ea                	sub    edx,ebp
c002e7df:	89 e9                	mov    ecx,ebp
c002e7e1:	d3 e0                	shl    eax,cl
c002e7e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e7e7:	89 f8                	mov    eax,edi
c002e7e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e7ed:	88 d1                	mov    cl,dl
c002e7ef:	d3 e8                	shr    eax,cl
c002e7f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e7f5:	09 c1                	or     ecx,eax
c002e7f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e7fb:	89 e9                	mov    ecx,ebp
c002e7fd:	d3 e7                	shl    edi,cl
c002e7ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e803:	89 d8                	mov    eax,ebx
c002e805:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e809:	88 d1                	mov    cl,dl
c002e80b:	d3 e8                	shr    eax,cl
c002e80d:	89 c7                	mov    edi,eax
c002e80f:	89 e9                	mov    ecx,ebp
c002e811:	d3 e3                	shl    ebx,cl
c002e813:	89 f0                	mov    eax,esi
c002e815:	88 d1                	mov    cl,dl
c002e817:	d3 e8                	shr    eax,cl
c002e819:	09 d8                	or     eax,ebx
c002e81b:	89 e9                	mov    ecx,ebp
c002e81d:	d3 e6                	shl    esi,cl
c002e81f:	89 f3                	mov    ebx,esi
c002e821:	89 fa                	mov    edx,edi
c002e823:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e827:	89 d1                	mov    ecx,edx
c002e829:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e82d:	89 c6                	mov    esi,eax
c002e82f:	89 d7                	mov    edi,edx
c002e831:	39 d1                	cmp    ecx,edx
c002e833:	72 27                	jb     c002e85c <__umoddi3+0x10c>
c002e835:	74 21                	je     c002e858 <__umoddi3+0x108>
c002e837:	89 ca                	mov    edx,ecx
c002e839:	29 f3                	sub    ebx,esi
c002e83b:	19 fa                	sbb    edx,edi
c002e83d:	89 d0                	mov    eax,edx
c002e83f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e843:	d3 e0                	shl    eax,cl
c002e845:	89 e9                	mov    ecx,ebp
c002e847:	d3 eb                	shr    ebx,cl
c002e849:	09 d8                	or     eax,ebx
c002e84b:	d3 ea                	shr    edx,cl
c002e84d:	83 c4 1c             	add    esp,0x1c
c002e850:	5b                   	pop    ebx
c002e851:	5e                   	pop    esi
c002e852:	5f                   	pop    edi
c002e853:	5d                   	pop    ebp
c002e854:	c3                   	ret    
c002e855:	8d 76 00             	lea    esi,[esi+0x0]
c002e858:	39 c3                	cmp    ebx,eax
c002e85a:	73 db                	jae    c002e837 <__umoddi3+0xe7>
c002e85c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e860:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e864:	89 d7                	mov    edi,edx
c002e866:	89 c6                	mov    esi,eax
c002e868:	eb cd                	jmp    c002e837 <__umoddi3+0xe7>

Disassembly of section .init:

c002e86a <_init>:
c002e86a:	55                   	push   ebp
c002e86b:	89 e5                	mov    ebp,esp
c002e86d:	e8 82 18 fd ff       	call   c00000f4 <frame_dummy>
c002e872:	e8 e5 fa ff ff       	call   c002e35c <__do_global_ctors_aux>
c002e877:	5d                   	pop    ebp
c002e878:	c3                   	ret    

Disassembly of section .fini:

c002e879 <_fini>:
c002e879:	55                   	push   ebp
c002e87a:	89 e5                	mov    ebp,esp
c002e87c:	e8 03 18 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e881:	5d                   	pop    ebp
c002e882:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e884 <Computer::~Computer()>:
c002e884:	83 ec 0c             	sub    esp,0xc
c002e887:	ba a4 10 03 c0       	mov    edx,0xc00310a4
c002e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e890:	89 10                	mov    DWORD PTR [eax],edx
c002e892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e896:	83 ec 0c             	sub    esp,0xc
c002e899:	50                   	push   eax
c002e89a:	e8 2d c9 fe ff       	call   c001b1cc <Device::~Device()>
c002e89f:	83 c4 10             	add    esp,0x10
c002e8a2:	90                   	nop
c002e8a3:	83 c4 0c             	add    esp,0xc
c002e8a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e8a8 <Computer::~Computer()>:
c002e8a8:	83 ec 0c             	sub    esp,0xc
c002e8ab:	83 ec 0c             	sub    esp,0xc
c002e8ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e8b2:	e8 cd ff ff ff       	call   c002e884 <Computer::~Computer()>
c002e8b7:	83 c4 10             	add    esp,0x10
c002e8ba:	83 ec 08             	sub    esp,0x8
c002e8bd:	68 70 01 00 00       	push   0x170
c002e8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e8c6:	e8 51 a8 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002e8cb:	83 c4 10             	add    esp,0x10
c002e8ce:	83 c4 0c             	add    esp,0xc
c002e8d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e8d2 <idleCommon()>:
c002e8d2:	83 ec 0c             	sub    esp,0xc
c002e8d5:	fa                   	cli    
c002e8d6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e8dc:	e8 77 69 ff ff       	call   c0025258 <schedule()>
c002e8e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e8e6:	48                   	dec    eax
c002e8e7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e8ec:	75 01                	jne    c002e8ef <idleCommon()+0x1d>
c002e8ee:	fb                   	sti    
c002e8ef:	83 c4 0c             	add    esp,0xc
c002e8f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e8f4 <LinkedList<UnixFile>::~LinkedList()>:
c002e8f4:	90                   	nop
c002e8f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e8f6 <LinkedList<UnixFile>::LinkedList()>:
c002e8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e90b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e90f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e91a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e92f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e936:	90                   	nop
c002e937:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e938 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e938:	83 ec 0c             	sub    esp,0xc
c002e93b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e940:	75 10                	jne    c002e952 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e942:	83 ec 0c             	sub    esp,0xc
c002e945:	68 b8 12 03 c0       	push   0xc00312b8
c002e94a:	e8 13 19 ff ff       	call   c0020262 <KePanic(char const*)>
c002e94f:	83 c4 10             	add    esp,0x10
c002e952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e956:	8b 00                	mov    eax,DWORD PTR [eax]
c002e958:	85 c0                	test   eax,eax
c002e95a:	74 34                	je     c002e990 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e960:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e963:	85 c0                	test   eax,eax
c002e965:	74 29                	je     c002e990 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e96b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e96e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e972:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e979:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e97d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e984:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e987:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e98e:	eb 65                	jmp    c002e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e994:	8b 00                	mov    eax,DWORD PTR [eax]
c002e996:	85 c0                	test   eax,eax
c002e998:	75 4b                	jne    c002e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9a1:	85 c0                	test   eax,eax
c002e9a3:	75 40                	jne    c002e9e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9ad:	89 10                	mov    DWORD PTR [eax],edx
c002e9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9cf:	85 c0                	test   eax,eax
c002e9d1:	74 22                	je     c002e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9d3:	83 ec 0c             	sub    esp,0xc
c002e9d6:	68 da 12 03 c0       	push   0xc00312da
c002e9db:	e8 82 18 ff ff       	call   c0020262 <KePanic(char const*)>
c002e9e0:	83 c4 10             	add    esp,0x10
c002e9e3:	eb 10                	jmp    c002e9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9e5:	83 ec 0c             	sub    esp,0xc
c002e9e8:	68 e4 12 03 c0       	push   0xc00312e4
c002e9ed:	e8 70 18 ff ff       	call   c0020262 <KePanic(char const*)>
c002e9f2:	83 c4 10             	add    esp,0x10
c002e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9fc:	8d 50 01             	lea    edx,[eax+0x1]
c002e9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea06:	90                   	nop
c002ea07:	83 c4 0c             	add    esp,0xc
c002ea0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ea0c <LinkedList<UnixFile>::getFirstElement()>:
c002ea0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea10:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ea14 <LinkedList<UnixFile>::removeFirst()>:
c002ea14:	83 ec 0c             	sub    esp,0xc
c002ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea1b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea1d:	85 c0                	test   eax,eax
c002ea1f:	75 12                	jne    c002ea33 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ea21:	83 ec 0c             	sub    esp,0xc
c002ea24:	68 f0 12 03 c0       	push   0xc00312f0
c002ea29:	e8 34 18 ff ff       	call   c0020262 <KePanic(char const*)>
c002ea2e:	83 c4 10             	add    esp,0x10
c002ea31:	eb 7e                	jmp    c002eab1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ea33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea3d:	85 c0                	test   eax,eax
c002ea3f:	74 10                	je     c002ea51 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ea41:	83 ec 0c             	sub    esp,0xc
c002ea44:	68 3b 13 03 c0       	push   0xc003133b
c002ea49:	e8 14 18 ff ff       	call   c0020262 <KePanic(char const*)>
c002ea4e:	83 c4 10             	add    esp,0x10
c002ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea55:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea5a:	85 c0                	test   eax,eax
c002ea5c:	75 33                	jne    c002ea91 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ea68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea7a:	83 f8 01             	cmp    eax,0x1
c002ea7d:	74 21                	je     c002eaa0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea7f:	83 ec 0c             	sub    esp,0xc
c002ea82:	68 14 13 03 c0       	push   0xc0031314
c002ea87:	e8 d6 17 ff ff       	call   c0020262 <KePanic(char const*)>
c002ea8c:	83 c4 10             	add    esp,0x10
c002ea8f:	eb 0f                	jmp    c002eaa0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea95:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea9e:	89 10                	mov    DWORD PTR [eax],edx
c002eaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaa7:	8d 50 ff             	lea    edx,[eax-0x1]
c002eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eab1:	83 c4 0c             	add    esp,0xc
c002eab4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002eab6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002eab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eaba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eabd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002eabe <DriverlessDevice::~DriverlessDevice()>:
c002eabe:	ba 68 1f 03 c0       	mov    edx,0xc0031f68
c002eac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eac7:	89 10                	mov    DWORD PTR [eax],edx
c002eac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eacd:	50                   	push   eax
c002eace:	e8 f9 c6 fe ff       	call   c001b1cc <Device::~Device()>
c002ead3:	83 c4 04             	add    esp,0x4
c002ead6:	90                   	nop
c002ead7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ead8 <DriverlessDevice::~DriverlessDevice()>:
c002ead8:	83 ec 0c             	sub    esp,0xc
c002eadb:	83 ec 0c             	sub    esp,0xc
c002eade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eae2:	e8 d7 ff ff ff       	call   c002eabe <DriverlessDevice::~DriverlessDevice()>
c002eae7:	83 c4 10             	add    esp,0x10
c002eaea:	83 ec 08             	sub    esp,0x8
c002eaed:	68 58 01 00 00       	push   0x158
c002eaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eaf6:	e8 21 a6 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002eafb:	83 c4 10             	add    esp,0x10
c002eafe:	83 c4 0c             	add    esp,0xc
c002eb01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002eb02 <LinkedList<Device>::addElement(Device*)>:
c002eb02:	83 ec 0c             	sub    esp,0xc
c002eb05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eb0a:	75 10                	jne    c002eb1c <LinkedList<Device>::addElement(Device*)+0x1a>
c002eb0c:	83 ec 0c             	sub    esp,0xc
c002eb0f:	68 b8 12 03 c0       	push   0xc00312b8
c002eb14:	e8 49 17 ff ff       	call   c0020262 <KePanic(char const*)>
c002eb19:	83 c4 10             	add    esp,0x10
c002eb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb20:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb22:	85 c0                	test   eax,eax
c002eb24:	74 3a                	je     c002eb60 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb2d:	85 c0                	test   eax,eax
c002eb2f:	74 2f                	je     c002eb60 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb3c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb54:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb5e:	eb 68                	jmp    c002ebc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb64:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb66:	85 c0                	test   eax,eax
c002eb68:	75 4e                	jne    c002ebb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb71:	85 c0                	test   eax,eax
c002eb73:	75 43                	jne    c002ebb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb7d:	89 10                	mov    DWORD PTR [eax],edx
c002eb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb91:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eba2:	85 c0                	test   eax,eax
c002eba4:	74 22                	je     c002ebc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eba6:	83 ec 0c             	sub    esp,0xc
c002eba9:	68 da 12 03 c0       	push   0xc00312da
c002ebae:	e8 af 16 ff ff       	call   c0020262 <KePanic(char const*)>
c002ebb3:	83 c4 10             	add    esp,0x10
c002ebb6:	eb 10                	jmp    c002ebc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ebb8:	83 ec 0c             	sub    esp,0xc
c002ebbb:	68 e4 12 03 c0       	push   0xc00312e4
c002ebc0:	e8 9d 16 ff ff       	call   c0020262 <KePanic(char const*)>
c002ebc5:	83 c4 10             	add    esp,0x10
c002ebc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebcf:	8d 50 01             	lea    edx,[eax+0x1]
c002ebd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ebd9:	90                   	nop
c002ebda:	83 c4 0c             	add    esp,0xc
c002ebdd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ebde <LinkedList<Device>::LinkedList()>:
c002ebde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec1e:	90                   	nop
c002ec1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ec20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ec20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec24:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec26:	85 c0                	test   eax,eax
c002ec28:	75 0e                	jne    c002ec38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec31:	85 c0                	test   eax,eax
c002ec33:	75 03                	jne    c002ec38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec35:	b0 01                	mov    al,0x1
c002ec37:	c3                   	ret    
c002ec38:	b0 00                	mov    al,0x0
c002ec3a:	90                   	nop
c002ec3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ec3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ec44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ec44:	83 ec 0c             	sub    esp,0xc
c002ec47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec4b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec4d:	85 c0                	test   eax,eax
c002ec4f:	75 17                	jne    c002ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ec51:	83 ec 0c             	sub    esp,0xc
c002ec54:	68 f0 12 03 c0       	push   0xc00312f0
c002ec59:	e8 04 16 ff ff       	call   c0020262 <KePanic(char const*)>
c002ec5e:	83 c4 10             	add    esp,0x10
c002ec61:	e9 96 00 00 00       	jmp    c002ecfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ec66:	66 90                	xchg   ax,ax
c002ec68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec72:	85 c0                	test   eax,eax
c002ec74:	0f 95 c0             	setne  al
c002ec77:	0f b6 c0             	movzx  eax,al
c002ec7a:	85 c0                	test   eax,eax
c002ec7c:	74 12                	je     c002ec90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ec7e:	83 ec 0c             	sub    esp,0xc
c002ec81:	68 3b 13 03 c0       	push   0xc003133b
c002ec86:	e8 d7 15 ff ff       	call   c0020262 <KePanic(char const*)>
c002ec8b:	83 c4 10             	add    esp,0x10
c002ec8e:	66 90                	xchg   ax,ax
c002ec90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec94:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec99:	85 c0                	test   eax,eax
c002ec9b:	0f 94 c0             	sete   al
c002ec9e:	0f b6 c0             	movzx  eax,al
c002eca1:	85 c0                	test   eax,eax
c002eca3:	74 33                	je     c002ecd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002eca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecbe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecc1:	83 f8 01             	cmp    eax,0x1
c002ecc4:	74 22                	je     c002ece8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ecc6:	83 ec 0c             	sub    esp,0xc
c002ecc9:	68 14 13 03 c0       	push   0xc0031314
c002ecce:	e8 8f 15 ff ff       	call   c0020262 <KePanic(char const*)>
c002ecd3:	83 c4 10             	add    esp,0x10
c002ecd6:	eb 10                	jmp    c002ece8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecdc:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecde:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece5:	89 10                	mov    DWORD PTR [eax],edx
c002ece7:	90                   	nop
c002ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecef:	8d 50 ff             	lea    edx,[eax-0x1]
c002ecf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ecf9:	8d 76 00             	lea    esi,[esi+0x0]
c002ecfc:	83 c4 0c             	add    esp,0xc
c002ecff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ed00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ed00:	83 ec 0c             	sub    esp,0xc
c002ed03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ed08:	75 12                	jne    c002ed1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ed0a:	83 ec 0c             	sub    esp,0xc
c002ed0d:	68 b8 12 03 c0       	push   0xc00312b8
c002ed12:	e8 4b 15 ff ff       	call   c0020262 <KePanic(char const*)>
c002ed17:	83 c4 10             	add    esp,0x10
c002ed1a:	66 90                	xchg   ax,ax
c002ed1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed20:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed22:	85 c0                	test   eax,eax
c002ed24:	74 36                	je     c002ed5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed2d:	85 c0                	test   eax,eax
c002ed2f:	74 2b                	je     c002ed5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed3c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ed3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed58:	eb 6a                	jmp    c002edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed5a:	66 90                	xchg   ax,ax
c002ed5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed62:	85 c0                	test   eax,eax
c002ed64:	75 4e                	jne    c002edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed6d:	85 c0                	test   eax,eax
c002ed6f:	75 43                	jne    c002edb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed79:	89 10                	mov    DWORD PTR [eax],edx
c002ed7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed9b:	85 c0                	test   eax,eax
c002ed9d:	74 25                	je     c002edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed9f:	83 ec 0c             	sub    esp,0xc
c002eda2:	68 da 12 03 c0       	push   0xc00312da
c002eda7:	e8 b6 14 ff ff       	call   c0020262 <KePanic(char const*)>
c002edac:	83 c4 10             	add    esp,0x10
c002edaf:	eb 13                	jmp    c002edc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002edb1:	8d 76 00             	lea    esi,[esi+0x0]
c002edb4:	83 ec 0c             	sub    esp,0xc
c002edb7:	68 e4 12 03 c0       	push   0xc00312e4
c002edbc:	e8 a1 14 ff ff       	call   c0020262 <KePanic(char const*)>
c002edc1:	83 c4 10             	add    esp,0x10
c002edc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edcb:	8d 50 01             	lea    edx,[eax+0x1]
c002edce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002edd5:	90                   	nop
c002edd6:	83 c4 0c             	add    esp,0xc
c002edd9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002eddc <ACPI::~ACPI()>:
c002eddc:	83 ec 0c             	sub    esp,0xc
c002eddf:	ba 20 26 03 c0       	mov    edx,0xc0032620
c002ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede8:	89 10                	mov    DWORD PTR [eax],edx
c002edea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edee:	83 ec 0c             	sub    esp,0xc
c002edf1:	50                   	push   eax
c002edf2:	e8 d5 c3 fe ff       	call   c001b1cc <Device::~Device()>
c002edf7:	83 c4 10             	add    esp,0x10
c002edfa:	90                   	nop
c002edfb:	83 c4 0c             	add    esp,0xc
c002edfe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002ee00 <ACPI::~ACPI()>:
c002ee00:	83 ec 0c             	sub    esp,0xc
c002ee03:	83 ec 0c             	sub    esp,0xc
c002ee06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee0a:	e8 cd ff ff ff       	call   c002eddc <ACPI::~ACPI()>
c002ee0f:	83 c4 10             	add    esp,0x10
c002ee12:	83 ec 08             	sub    esp,0x8
c002ee15:	68 64 12 00 00       	push   0x1264
c002ee1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee1e:	e8 f9 a2 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002ee23:	83 c4 10             	add    esp,0x10
c002ee26:	83 c4 0c             	add    esp,0xc
c002ee29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ee2c <LinkedList<Device>::~LinkedList()>:
c002ee2c:	90                   	nop
c002ee2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ee30 <LinkedList<Device>::isEmpty()>:
c002ee30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee34:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee36:	85 c0                	test   eax,eax
c002ee38:	75 0e                	jne    c002ee48 <LinkedList<Device>::isEmpty()+0x18>
c002ee3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee41:	85 c0                	test   eax,eax
c002ee43:	75 03                	jne    c002ee48 <LinkedList<Device>::isEmpty()+0x18>
c002ee45:	b0 01                	mov    al,0x1
c002ee47:	c3                   	ret    
c002ee48:	b0 00                	mov    al,0x0
c002ee4a:	90                   	nop
c002ee4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ee4c <LinkedList<Device>::getFirstElement()>:
c002ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ee54 <LinkedList<Device>::removeFirst()>:
c002ee54:	83 ec 0c             	sub    esp,0xc
c002ee57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee5b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee5d:	85 c0                	test   eax,eax
c002ee5f:	75 17                	jne    c002ee78 <LinkedList<Device>::removeFirst()+0x24>
c002ee61:	83 ec 0c             	sub    esp,0xc
c002ee64:	68 f0 12 03 c0       	push   0xc00312f0
c002ee69:	e8 f4 13 ff ff       	call   c0020262 <KePanic(char const*)>
c002ee6e:	83 c4 10             	add    esp,0x10
c002ee71:	e9 92 00 00 00       	jmp    c002ef08 <LinkedList<Device>::removeFirst()+0xb4>
c002ee76:	66 90                	xchg   ax,ax
c002ee78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee7f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee85:	85 c0                	test   eax,eax
c002ee87:	74 13                	je     c002ee9c <LinkedList<Device>::removeFirst()+0x48>
c002ee89:	83 ec 0c             	sub    esp,0xc
c002ee8c:	68 3b 13 03 c0       	push   0xc003133b
c002ee91:	e8 cc 13 ff ff       	call   c0020262 <KePanic(char const*)>
c002ee96:	83 c4 10             	add    esp,0x10
c002ee99:	8d 76 00             	lea    esi,[esi+0x0]
c002ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eea2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eea8:	85 c0                	test   eax,eax
c002eeaa:	75 34                	jne    c002eee0 <LinkedList<Device>::removeFirst()+0x8c>
c002eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eec8:	83 f8 01             	cmp    eax,0x1
c002eecb:	74 27                	je     c002eef4 <LinkedList<Device>::removeFirst()+0xa0>
c002eecd:	83 ec 0c             	sub    esp,0xc
c002eed0:	68 14 13 03 c0       	push   0xc0031314
c002eed5:	e8 88 13 ff ff       	call   c0020262 <KePanic(char const*)>
c002eeda:	83 c4 10             	add    esp,0x10
c002eedd:	eb 15                	jmp    c002eef4 <LinkedList<Device>::removeFirst()+0xa0>
c002eedf:	90                   	nop
c002eee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eee4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eee6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002eeec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eef0:	89 10                	mov    DWORD PTR [eax],edx
c002eef2:	66 90                	xchg   ax,ax
c002eef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eefb:	8d 50 ff             	lea    edx,[eax-0x1]
c002eefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef05:	8d 76 00             	lea    esi,[esi+0x0]
c002ef08:	83 c4 0c             	add    esp,0xc
c002ef0b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ef0c <CPU::~CPU()>:
c002ef0c:	83 ec 0c             	sub    esp,0xc
c002ef0f:	ba c8 27 03 c0       	mov    edx,0xc00327c8
c002ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef18:	89 10                	mov    DWORD PTR [eax],edx
c002ef1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef1e:	83 ec 0c             	sub    esp,0xc
c002ef21:	50                   	push   eax
c002ef22:	e8 a5 c2 fe ff       	call   c001b1cc <Device::~Device()>
c002ef27:	83 c4 10             	add    esp,0x10
c002ef2a:	90                   	nop
c002ef2b:	83 c4 0c             	add    esp,0xc
c002ef2e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ef30 <CPU::~CPU()>:
c002ef30:	83 ec 0c             	sub    esp,0xc
c002ef33:	83 ec 0c             	sub    esp,0xc
c002ef36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef3a:	e8 cd ff ff ff       	call   c002ef0c <CPU::~CPU()>
c002ef3f:	83 c4 10             	add    esp,0x10
c002ef42:	83 ec 08             	sub    esp,0x8
c002ef45:	68 94 11 00 00       	push   0x1194
c002ef4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef4e:	e8 c9 a1 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002ef53:	83 c4 10             	add    esp,0x10
c002ef56:	83 c4 0c             	add    esp,0xc
c002ef59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ef5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ef5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ef60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ef64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ef64:	90                   	nop
c002ef65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ef68 <ThreadControlBlock::ThreadControlBlock()>:
c002ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ef73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ef7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ef89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef8d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002ef94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef98:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002ef9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efa3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002efa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efab:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002efaf:	90                   	nop
c002efb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002efb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002efb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efcd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eff4:	90                   	nop
c002eff5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002eff6 <PCI::~PCI()>:
c002eff6:	83 ec 0c             	sub    esp,0xc
c002eff9:	ba e8 36 03 c0       	mov    edx,0xc00336e8
c002effe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f002:	89 10                	mov    DWORD PTR [eax],edx
c002f004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f008:	83 ec 0c             	sub    esp,0xc
c002f00b:	50                   	push   eax
c002f00c:	e8 53 bc fe ff       	call   c001ac64 <Bus::~Bus()>
c002f011:	83 c4 10             	add    esp,0x10
c002f014:	90                   	nop
c002f015:	83 c4 0c             	add    esp,0xc
c002f018:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f01a <PCI::~PCI()>:
c002f01a:	83 ec 0c             	sub    esp,0xc
c002f01d:	83 ec 0c             	sub    esp,0xc
c002f020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f024:	e8 cd ff ff ff       	call   c002eff6 <PCI::~PCI()>
c002f029:	83 c4 10             	add    esp,0x10
c002f02c:	83 ec 08             	sub    esp,0x8
c002f02f:	68 5c 01 00 00       	push   0x15c
c002f034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f038:	e8 df a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f03d:	83 c4 10             	add    esp,0x10
c002f040:	83 c4 0c             	add    esp,0xc
c002f043:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f044 <IDE::~IDE()>:
c002f044:	83 ec 0c             	sub    esp,0xc
c002f047:	ba 9c 37 03 c0       	mov    edx,0xc003379c
c002f04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f050:	89 10                	mov    DWORD PTR [eax],edx
c002f052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f056:	83 ec 0c             	sub    esp,0xc
c002f059:	50                   	push   eax
c002f05a:	e8 fd c5 fe ff       	call   c001b65c <HardDiskController::~HardDiskController()>
c002f05f:	83 c4 10             	add    esp,0x10
c002f062:	90                   	nop
c002f063:	83 c4 0c             	add    esp,0xc
c002f066:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f068 <IDE::~IDE()>:
c002f068:	83 ec 0c             	sub    esp,0xc
c002f06b:	83 ec 0c             	sub    esp,0xc
c002f06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f072:	e8 cd ff ff ff       	call   c002f044 <IDE::~IDE()>
c002f077:	83 c4 10             	add    esp,0x10
c002f07a:	83 ec 08             	sub    esp,0x8
c002f07d:	68 70 02 00 00       	push   0x270
c002f082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f086:	e8 91 a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f08b:	83 c4 10             	add    esp,0x10
c002f08e:	83 c4 0c             	add    esp,0xc
c002f091:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f092 <SATABus::~SATABus()>:
c002f092:	83 ec 0c             	sub    esp,0xc
c002f095:	ba ec 37 03 c0       	mov    edx,0xc00337ec
c002f09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09e:	89 10                	mov    DWORD PTR [eax],edx
c002f0a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0a4:	83 ec 0c             	sub    esp,0xc
c002f0a7:	50                   	push   eax
c002f0a8:	e8 af c5 fe ff       	call   c001b65c <HardDiskController::~HardDiskController()>
c002f0ad:	83 c4 10             	add    esp,0x10
c002f0b0:	90                   	nop
c002f0b1:	83 c4 0c             	add    esp,0xc
c002f0b4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f0b6 <SATABus::~SATABus()>:
c002f0b6:	83 ec 0c             	sub    esp,0xc
c002f0b9:	83 ec 0c             	sub    esp,0xc
c002f0bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0c0:	e8 cd ff ff ff       	call   c002f092 <SATABus::~SATABus()>
c002f0c5:	83 c4 10             	add    esp,0x10
c002f0c8:	83 ec 08             	sub    esp,0x8
c002f0cb:	68 64 01 00 00       	push   0x164
c002f0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0d4:	e8 43 a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f0d9:	83 c4 10             	add    esp,0x10
c002f0dc:	83 c4 0c             	add    esp,0xc
c002f0df:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f0e0 <ATA::~ATA()>:
c002f0e0:	83 ec 0c             	sub    esp,0xc
c002f0e3:	ba 2c 38 03 c0       	mov    edx,0xc003382c
c002f0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ec:	89 10                	mov    DWORD PTR [eax],edx
c002f0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f2:	83 ec 0c             	sub    esp,0xc
c002f0f5:	50                   	push   eax
c002f0f6:	e8 43 c6 fe ff       	call   c001b73e <PhysicalDisk::~PhysicalDisk()>
c002f0fb:	83 c4 10             	add    esp,0x10
c002f0fe:	90                   	nop
c002f0ff:	83 c4 0c             	add    esp,0xc
c002f102:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f104 <ATA::~ATA()>:
c002f104:	83 ec 0c             	sub    esp,0xc
c002f107:	83 ec 0c             	sub    esp,0xc
c002f10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f10e:	e8 cd ff ff ff       	call   c002f0e0 <ATA::~ATA()>
c002f113:	83 c4 10             	add    esp,0x10
c002f116:	83 ec 08             	sub    esp,0x8
c002f119:	68 7c 01 00 00       	push   0x17c
c002f11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f122:	e8 f5 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f127:	83 c4 10             	add    esp,0x10
c002f12a:	83 c4 0c             	add    esp,0xc
c002f12d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f12e <ATAPI::~ATAPI()>:
c002f12e:	83 ec 0c             	sub    esp,0xc
c002f131:	ba 74 38 03 c0       	mov    edx,0xc0033874
c002f136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f13a:	89 10                	mov    DWORD PTR [eax],edx
c002f13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f140:	83 ec 0c             	sub    esp,0xc
c002f143:	50                   	push   eax
c002f144:	e8 f5 c5 fe ff       	call   c001b73e <PhysicalDisk::~PhysicalDisk()>
c002f149:	83 c4 10             	add    esp,0x10
c002f14c:	90                   	nop
c002f14d:	83 c4 0c             	add    esp,0xc
c002f150:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f152 <ATAPI::~ATAPI()>:
c002f152:	83 ec 0c             	sub    esp,0xc
c002f155:	83 ec 0c             	sub    esp,0xc
c002f158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f15c:	e8 cd ff ff ff       	call   c002f12e <ATAPI::~ATAPI()>
c002f161:	83 c4 10             	add    esp,0x10
c002f164:	83 ec 08             	sub    esp,0x8
c002f167:	68 84 01 00 00       	push   0x184
c002f16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f170:	e8 a7 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f175:	83 c4 10             	add    esp,0x10
c002f178:	83 c4 0c             	add    esp,0xc
c002f17b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f17c <SATA::~SATA()>:
c002f17c:	83 ec 0c             	sub    esp,0xc
c002f17f:	ba 34 39 03 c0       	mov    edx,0xc0033934
c002f184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f188:	89 10                	mov    DWORD PTR [eax],edx
c002f18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f18e:	83 ec 0c             	sub    esp,0xc
c002f191:	50                   	push   eax
c002f192:	e8 a7 c5 fe ff       	call   c001b73e <PhysicalDisk::~PhysicalDisk()>
c002f197:	83 c4 10             	add    esp,0x10
c002f19a:	90                   	nop
c002f19b:	83 c4 0c             	add    esp,0xc
c002f19e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f1a0 <SATA::~SATA()>:
c002f1a0:	83 ec 0c             	sub    esp,0xc
c002f1a3:	83 ec 0c             	sub    esp,0xc
c002f1a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1aa:	e8 cd ff ff ff       	call   c002f17c <SATA::~SATA()>
c002f1af:	83 c4 10             	add    esp,0x10
c002f1b2:	83 ec 08             	sub    esp,0x8
c002f1b5:	68 7c 01 00 00       	push   0x17c
c002f1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1be:	e8 59 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f1c3:	83 c4 10             	add    esp,0x10
c002f1c6:	83 c4 0c             	add    esp,0xc
c002f1c9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f1ca <SATAPI::~SATAPI()>:
c002f1ca:	83 ec 0c             	sub    esp,0xc
c002f1cd:	ba 58 3a 03 c0       	mov    edx,0xc0033a58
c002f1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d6:	89 10                	mov    DWORD PTR [eax],edx
c002f1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1dc:	83 ec 0c             	sub    esp,0xc
c002f1df:	50                   	push   eax
c002f1e0:	e8 59 c5 fe ff       	call   c001b73e <PhysicalDisk::~PhysicalDisk()>
c002f1e5:	83 c4 10             	add    esp,0x10
c002f1e8:	90                   	nop
c002f1e9:	83 c4 0c             	add    esp,0xc
c002f1ec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f1ee <SATAPI::~SATAPI()>:
c002f1ee:	83 ec 0c             	sub    esp,0xc
c002f1f1:	83 ec 0c             	sub    esp,0xc
c002f1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1f8:	e8 cd ff ff ff       	call   c002f1ca <SATAPI::~SATAPI()>
c002f1fd:	83 c4 10             	add    esp,0x10
c002f200:	83 ec 08             	sub    esp,0x8
c002f203:	68 84 01 00 00       	push   0x184
c002f208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f20c:	e8 0b 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f211:	83 c4 10             	add    esp,0x10
c002f214:	83 c4 0c             	add    esp,0xc
c002f217:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f218 <IOAPIC::~IOAPIC()>:
c002f218:	83 ec 0c             	sub    esp,0xc
c002f21b:	ba 98 3a 03 c0       	mov    edx,0xc0033a98
c002f220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f224:	89 10                	mov    DWORD PTR [eax],edx
c002f226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f22a:	83 ec 0c             	sub    esp,0xc
c002f22d:	50                   	push   eax
c002f22e:	e8 99 bf fe ff       	call   c001b1cc <Device::~Device()>
c002f233:	83 c4 10             	add    esp,0x10
c002f236:	90                   	nop
c002f237:	83 c4 0c             	add    esp,0xc
c002f23a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f23c <IOAPIC::~IOAPIC()>:
c002f23c:	83 ec 0c             	sub    esp,0xc
c002f23f:	83 ec 0c             	sub    esp,0xc
c002f242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f246:	e8 cd ff ff ff       	call   c002f218 <IOAPIC::~IOAPIC()>
c002f24b:	83 c4 10             	add    esp,0x10
c002f24e:	83 ec 08             	sub    esp,0x8
c002f251:	68 68 01 00 00       	push   0x168
c002f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f25a:	e8 bd 9e fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f25f:	83 c4 10             	add    esp,0x10
c002f262:	83 c4 0c             	add    esp,0xc
c002f265:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f268 <APICTimer::~APICTimer()>:
c002f268:	83 ec 0c             	sub    esp,0xc
c002f26b:	ba e0 3a 03 c0       	mov    edx,0xc0033ae0
c002f270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f274:	89 10                	mov    DWORD PTR [eax],edx
c002f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f27a:	83 ec 0c             	sub    esp,0xc
c002f27d:	50                   	push   eax
c002f27e:	e8 25 da fe ff       	call   c001cca8 <Timer::~Timer()>
c002f283:	83 c4 10             	add    esp,0x10
c002f286:	90                   	nop
c002f287:	83 c4 0c             	add    esp,0xc
c002f28a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f28c <APICTimer::~APICTimer()>:
c002f28c:	83 ec 0c             	sub    esp,0xc
c002f28f:	83 ec 0c             	sub    esp,0xc
c002f292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f296:	e8 cd ff ff ff       	call   c002f268 <APICTimer::~APICTimer()>
c002f29b:	83 c4 10             	add    esp,0x10
c002f29e:	83 ec 08             	sub    esp,0x8
c002f2a1:	68 60 01 00 00       	push   0x160
c002f2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2aa:	e8 6d 9e fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f2af:	83 c4 10             	add    esp,0x10
c002f2b2:	83 c4 0c             	add    esp,0xc
c002f2b5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f2b8 <PIT::~PIT()>:
c002f2b8:	83 ec 0c             	sub    esp,0xc
c002f2bb:	ba 30 3b 03 c0       	mov    edx,0xc0033b30
c002f2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2c4:	89 10                	mov    DWORD PTR [eax],edx
c002f2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2ca:	83 ec 0c             	sub    esp,0xc
c002f2cd:	50                   	push   eax
c002f2ce:	e8 d5 d9 fe ff       	call   c001cca8 <Timer::~Timer()>
c002f2d3:	83 c4 10             	add    esp,0x10
c002f2d6:	90                   	nop
c002f2d7:	83 c4 0c             	add    esp,0xc
c002f2da:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f2dc <PIT::~PIT()>:
c002f2dc:	83 ec 0c             	sub    esp,0xc
c002f2df:	83 ec 0c             	sub    esp,0xc
c002f2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2e6:	e8 cd ff ff ff       	call   c002f2b8 <PIT::~PIT()>
c002f2eb:	83 c4 10             	add    esp,0x10
c002f2ee:	83 ec 08             	sub    esp,0x8
c002f2f1:	68 5c 01 00 00       	push   0x15c
c002f2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2fa:	e8 1d 9e fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f2ff:	83 c4 10             	add    esp,0x10
c002f302:	83 c4 0c             	add    esp,0xc
c002f305:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 1b 29 03 c0       	mov    esi,0xc003291b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 37 29 03 c0       	mov    esi,0xc0032937
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
